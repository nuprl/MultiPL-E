language: php
name: HumanEval_1_separate_paren_groups
results:
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $separated_paren_groups = array();\n    $length = strlen($paren_string);\n\
    \    for ($i = 0; $i < $length; $i++) {\n        if ($paren_string[$i] == '(')\
    \ {\n            $group = '';\n            $braces = 1;\n            $i++;\n \
    \           while ($braces > 0) {\n                $group .= $paren_string[$i];\n\
    \                if ($paren_string[$i] == '(') {\n                    $braces++;\n\
    \                } else if ($paren_string[$i] == ')') {\n                    $braces--;\n\
    \                }\n                $i++;\n            }\n            $separated_paren_groups[]\
    \ = $group;\n        }\n    }\n    return $separated_paren_groups;\n}\n\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8lkercjz.php:36\n\
    Stack trace:\n#0 /tmp/tmp8lkercjz.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp8lkercjz.php\
    \ on line 36\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  // YOUR CODE HERE\n  $balanced = [];\n  $unbalanced = [];\n  $charArray\
    \ = str_split($paren_string);\n  $charCount = 0;\n  $lastChar = '';\n  $lastCharIsOpen\
    \ = false;\n  $lastIsNotClosed = false;\n  $balanced = [];\n  $unbalanced = [];\n\
    \  foreach ($charArray as $char) {\n    if ($char == ' ') {\n      continue;\n\
    \    } else if ($char == '(') {\n      $lastCharIsOpen = true;\n      $charCount++;\n\
    \    } else if ($char == ')') {\n      $charCount--;\n      if ($charCount ===\
    \ 0) {\n        $lastCharIsOpen = false;\n        $lastIsNotClosed = false;\n\
    \        array_push($balanced, implode('', $unbalanced));\n        $unbalanced\
    \ = [];\n      }\n    }\n    if ($lastCharIsOpen) {\n      array_push($unbalanced,\
    \ $char);\n    }\n    $lastChar = $char;\n  }\n  if ($lastIsNotClosed) {\n   \
    \ return null;\n  }\n  return $balanced;\n}\nfunction candidate(...$args) {\n\
    \    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp51etkvu7.php:49\n\
    Stack trace:\n#0 /tmp/tmp51etkvu7.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp51etkvu7.php\
    \ on line 49\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  return array();\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjf_9x8q3.php:17\n\
    Stack trace:\n#0 /tmp/tmpjf_9x8q3.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpjf_9x8q3.php\
    \ on line 17\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  $len = strlen($paren_string);\n  $i = 0;\n  $array = array();\n  while\
    \ ($i < $len) {\n    if ($paren_string[$i] == '(') {\n      $count = 1;\n    \
    \  $temp = \"\";\n      $i++;\n      while ($count > 0) {\n        if ($paren_string[$i]\
    \ == '(') {\n          $count++;\n        } else if ($paren_string[$i] == ')')\
    \ {\n          $count--;\n        }\n        $temp .= $paren_string[$i];\n   \
    \     $i++;\n      }\n      $array[] = $temp;\n    } else {\n      $i++;\n   \
    \ }\n  }\n  return $array;\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp39ujsf7d.php:39\n\
    Stack trace:\n#0 /tmp/tmp39ujsf7d.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp39ujsf7d.php\
    \ on line 39\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\t$open = strpos($paren_string, '(');\n\t$close = strpos($paren_string, ')');\n\
    \t$ret = array();\n\tif ($open !== false && $close !== false) {\n\t\t$ret[] =\
    \ substr($paren_string, $open, $close - $open + 1);\n\t\t$rest = substr($paren_string,\
    \ $close + 1);\n\t\t$ret = array_merge($ret, separate_paren_groups($rest));\n\t\
    }\n\treturn $ret;\n}\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkv4oaujp.php:24\n\
    Stack trace:\n#0 /tmp/tmpkv4oaujp.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpkv4oaujp.php\
    \ on line 24\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  // Get rid of any spaces\n  $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \  $result = array();\n  $temp = \"\";\n  $open_parens = 0;\n  $closed_parens\
    \ = 0;\n  $total_parens = 0;\n  for ($i = 0; $i < strlen($paren_string); $i++)\
    \ {\n    $char = $paren_string[$i];\n    $next_char = $paren_string[$i + 1];\n\
    \    if ($char == \"(\") {\n      $open_parens++;\n      $total_parens++;\n  \
    \  } else if ($char == \")\") {\n      $closed_parens++;\n      $total_parens++;\n\
    \    }\n    if ($open_parens > 0 && $closed_parens == $open_parens) {\n      $open_parens\
    \ = 0;\n      $closed_parens = 0;\n      array_push($result, $temp);\n      $temp\
    \ = \"\";\n    } else {\n      $temp .= $char;\n    }\n  }\n  return $result;\n\
    }\n\necho \"<pre>\";\nprint_r(separate_paren_groups(\"( ) (( )) (( )( ))\"));\n\
    echo \"</pre>\";\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>\nWarning: Uninitialized string offset 12 in /tmp/tmpdxspn809.php\
    \ on line 18\nArray\n(\n    [0] => (\n    [1] => (()\n    [2] => (()()\n)\n</pre>\n\
    Warning: Uninitialized string offset 24 in /tmp/tmpdxspn809.php on line 18\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpdxspn809.php:47\nStack\
    \ trace:\n#0 /tmp/tmpdxspn809.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpdxspn809.php\
    \ on line 47\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $result = [];\n\
    \    $current_group = '';\n    $stack = [];\n    for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n        $current_char = $paren_string[$i];\n        if ($current_char\
    \ === '(') {\n            array_push($stack, '(');\n        } else if ($current_char\
    \ === ')') {\n            if (count($stack) === 0) {\n                return -1;\n\
    \            }\n            array_pop($stack);\n            if (count($stack)\
    \ === 0) {\n                array_push($result, $current_group);\n           \
    \     $current_group = '';\n            }\n        }\n        $current_group .=\
    \ $current_char;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwrni9ym1.php:37\n\
    Stack trace:\n#0 /tmp/tmpwrni9ym1.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpwrni9ym1.php\
    \ on line 37\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp68fbuyoq.php:17\n\
    Stack trace:\n#0 /tmp/tmp68fbuyoq.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp68fbuyoq.php\
    \ on line 17\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $result = array();\n    $index = 0;\n    while ($index < strlen($paren_string))\
    \ {\n        $start = strpos($paren_string, '(', $index);\n        if ($start\
    \ === false) {\n            break;\n        }\n        $end = strpos($paren_string,\
    \ ')', $start);\n        if ($end === false) {\n            break;\n        }\n\
    \        $count = 1;\n        $position = $start + 1;\n        while ($count >\
    \ 0) {\n            if ($paren_string[$position] == '(') {\n                $count++;\n\
    \            } else if ($paren_string[$position] == ')') {\n                $count--;\n\
    \            }\n            $position++;\n        }\n        $result[] = substr($paren_string,\
    \ $start, $position - $start);\n        $index = $position;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy777reyc.php:44\n\
    Stack trace:\n#0 /tmp/tmpy777reyc.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpy777reyc.php\
    \ on line 44\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $out = array();\n    $curr = array();\n    $parens = 0;\n    for ($i\
    \ = 0; $i < strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n\
    \        if ($char === '(') {\n            $parens++;\n        } else if ($char\
    \ === ')') {\n            $parens--;\n        }\n        if ($parens === 0 &&\
    \ !empty($curr)) {\n            $out[] = implode($curr);\n            $curr =\
    \ array();\n        } else if ($parens > 0 && $char !== ' ') {\n            $curr[]\
    \ = $char;\n        }\n    }\n    return $out;\n}\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaed_fiwz.php:33\n\
    Stack trace:\n#0 /tmp/tmpaed_fiwz.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpaed_fiwz.php\
    \ on line 33\n"
  timestamp: 1659823661
- exit_code: 0
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  // your code here\n  $paren_groups = array();\n  $paren_group = \"\";\n\
    \  $stack = array();\n  $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \  for ($i = 0; $i < strlen($paren_string); $i++) {\n    $char = $paren_string[$i];\n\
    \    if ($char == \"(\") {\n      array_push($stack, $char);\n    } else if ($char\
    \ == \")\") {\n      array_pop($stack);\n    }\n    $paren_group .= $char;\n \
    \   if (empty($stack)) {\n      array_push($paren_groups, $paren_group);\n   \
    \   $paren_group = \"\";\n    }\n  }\n  return $paren_groups;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $new_array = array();\n    $current_string = \"\";\n    $first_brace\
    \ = null;\n    for ($i = 0; $i < strlen($paren_string); $i++) {\n        if ($paren_string[$i]\
    \ == '(') {\n            if ($first_brace == null) {\n                $first_brace\
    \ = true;\n            }\n            $current_string .= '(';\n        } else\
    \ if ($paren_string[$i] == ')') {\n            $current_string .= ')';\n     \
    \       if ($first_brace) {\n                $new_array[] = $current_string;\n\
    \                $current_string = \"\";\n                $first_brace = null;\n\
    \            }\n        }\n    }\n    return $new_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprlgbnnsk.php:35\n\
    Stack trace:\n#0 /tmp/tmprlgbnnsk.php(41): test()\n#1 {main}\n  thrown in /tmp/tmprlgbnnsk.php\
    \ on line 35\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  $open_parens = 0;\n  $group_start = null;\n  $groups = array();\n  foreach\
    \ (str_split($paren_string) as $i => $char) {\n    switch ($char) {\n      case\
    \ '(':\n        if ($open_parens == 0) {\n          $group_start = $i;\n     \
    \   }\n        $open_parens++;\n        break;\n      case ')':\n        $open_parens--;\n\
    \        if ($open_parens == 0) {\n          $groups[] = substr($paren_string,\
    \ $group_start, $i - $group_start + 1);\n        }\n        break;\n    }\n  }\n\
    \  return $groups;\n}\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdnl17zw2.php:38\n\
    Stack trace:\n#0 /tmp/tmpdnl17zw2.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpdnl17zw2.php\
    \ on line 38\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\t$groups = array();\n\t$group = '';\n\t$in_group = false;\n\t$paren_stack\
    \ = new SplStack();\n\tfor ($i = 0; $i < strlen($paren_string); $i++) {\n\t\t\
    if ($paren_string[$i] == '(') {\n\t\t\t$paren_stack->push($paren_string[$i]);\n\
    \t\t\tif (!$in_group) {\n\t\t\t\t$in_group = true;\n\t\t\t}\n\t\t} else if ($paren_string[$i]\
    \ == ')') {\n\t\t\t$paren_stack->pop();\n\t\t\tif ($paren_stack->isEmpty()) {\n\
    \t\t\t\t$in_group = false;\n\t\t\t\t$groups[] = $group;\n\t\t\t\t$group = '';\n\
    \t\t\t}\n\t\t} else if ($in_group) {\n\t\t\t$group .= $paren_string[$i];\n\t\t\
    }\n\t}\n\treturn $groups;\n}\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjawoqwks.php:37\n\
    Stack trace:\n#0 /tmp/tmpjawoqwks.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpjawoqwks.php\
    \ on line 37\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  $paren_array = [];\n  $index = 0;\n  $len = strlen($paren_string);\n  while\
    \ ($index < $len) {\n    $curr_paren = '';\n    $curr_char = $paren_string[$index];\n\
    \    if ($curr_char === '(') {\n      // Entering a new group, mark the starting\
    \ position\n      $start_pos = $index;\n      $count = 1; // Keep track of the\
    \ number of open/close parenthesis so we know when the group ends\n      $curr_paren\
    \ .= $curr_char;\n      $index++;\n      $curr_char = $paren_string[$index];\n\
    \      while ($count > 0) {\n        // Move forward in string until we hit a\
    \ close parenthesis\n        if ($curr_char === ')') {\n          $count--;\n\
    \        } elseif ($curr_char === '(') {\n          $count++;\n        }\n   \
    \     $curr_paren .= $curr_char;\n        $index++;\n        $curr_char = $paren_string[$index];\n\
    \      }\n      // Add our current parenthesis group to the array\n      $paren_array[]\
    \ = $curr_paren;\n    } else {\n      // Skip non-parenthesis chars\n      $index++;\n\
    \    }\n  }\n  return $paren_array;\n}\n\nfunction candidate(...$args) {\n   \
    \ return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Uninitialized string offset 27 in /tmp/tmpusloiz85.php on line\
    \ 31\n\nWarning: Uninitialized string offset 23 in /tmp/tmpusloiz85.php on line\
    \ 31\n\nWarning: Uninitialized string offset 14 in /tmp/tmpusloiz85.php on line\
    \ 31\n\nWarning: Uninitialized string offset 18 in /tmp/tmpusloiz85.php on line\
    \ 31\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpusloiz85.php:51\n\
    Stack trace:\n#0 /tmp/tmpusloiz85.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpusloiz85.php\
    \ on line 51\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\t// Write your code here\n\t$paren = array();\n\t$temp = \"\";\n\t$i = 0;\n\
    \twhile($i < strlen($paren_string)) {\n\t\tif($paren_string[$i] != \" \") {\n\t\
    \t\t$temp .= $paren_string[$i];\n\t\t}\n\t\tif($paren_string[$i] == \")\") {\n\
    \t\t\t$paren[] = $temp;\n\t\t\t$temp = \"\";\n\t\t}\n\t\t$i++;\n\t}\n\treturn\
    \ $paren;\n}\nprint_r(separate_paren_groups(\"( ) (( )) (( )( ))\"));\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => ()\n    [1] => (()\n    [2] => )\n    [3] => (()\n\
    \    [4] => ()\n    [5] => )\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpdfosyjsc.php:31\nStack trace:\n#0 /tmp/tmpdfosyjsc.php(37): test()\n\
    #1 {main}\n  thrown in /tmp/tmpdfosyjsc.php on line 31\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\t$result = array();\n\t$stack = array();\n\t$temp_array = array();\n\tfor\
    \ ($i = 0; $i < strlen($paren_string); $i++) {\n\t\tif ($paren_string[$i] == '(')\
    \ {\n\t\t\tarray_push($stack, $paren_string[$i]);\n\t\t} else if ($paren_string[$i]\
    \ == ')') {\n\t\t\tarray_pop($stack);\n\t\t\tarray_push($temp_array, $paren_string[$i]);\n\
    \t\t\tif (empty($stack)) {\n\t\t\t\tarray_push($result, implode(\"\", $temp_array));\n\
    \t\t\t\t$temp_array = array();\n\t\t\t}\n\t\t}\n\t}\n\treturn $result;\n}\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvepenn2s.php:31\n\
    Stack trace:\n#0 /tmp/tmpvepenn2s.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpvepenn2s.php\
    \ on line 31\n"
  timestamp: 1659823661
- exit_code: 0
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\t$paren_string = str_replace(\" \", \"\", $paren_string);\n\t$stack = array();\n\
    \t$groups = array();\n\t$current_group = '';\n\tfor ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n\t\t$c = $paren_string[$i];\n\t\tif ($c == '(') {\n\t\t\tarray_push($stack,\
    \ $c);\n\t\t\t$current_group .= $c;\n\t\t} else {\n\t\t\tarray_pop($stack);\n\t\
    \t\t$current_group .= $c;\n\t\t\tif (empty($stack)) {\n\t\t\t\tarray_push($groups,\
    \ $current_group);\n\t\t\t\t$current_group = '';\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ $groups;\n}\n\nvar_dump(separate_paren_groups(\"( ) (( )) (( )( ))\"));\n\n\
    function candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(3) {\n  [0]=>\n  string(2) \"()\"\n  [1]=>\n  string(4) \"(())\"\n\
    \  [2]=>\n  string(6) \"(()())\"\n}\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  $close_paren_pos = strpos($paren_string, \")\");\n  if ($close_paren_pos\
    \ === false) {\n    return array();\n  }\n  $paren_block = substr($paren_string,\
    \ 0, $close_paren_pos + 1);\n  $rest_of_string = substr($paren_string, $close_paren_pos\
    \ + 1);\n  $paren_groups = separate_paren_groups($rest_of_string);\n  array_unshift($paren_groups,\
    \ $paren_block);\n  return $paren_groups;\n}\n\nfunction candidate(...$args) {\n\
    \    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp31huvijw.php:25\n\
    Stack trace:\n#0 /tmp/tmp31huvijw.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp31huvijw.php\
    \ on line 25\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeeazsd23.php:16\n\
    Stack trace:\n#0 /tmp/tmpeeazsd23.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpeeazsd23.php\
    \ on line 16\n"
  timestamp: 1659823661
- exit_code: 0
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $result = array();\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \    $open_paren_index = strpos($paren_string, \"(\");\n    $close_paren_index\
    \ = strpos($paren_string, \")\");\n    $i = $open_paren_index;\n    $k = 0;\n\
    \    $temp = \"\";\n    while ($i < strlen($paren_string)) {\n        if ($paren_string[$i]\
    \ == \"(\") {\n            $k++;\n        } else if ($paren_string[$i] == \")\"\
    ) {\n            $k--;\n        }\n        $temp .= $paren_string[$i];\n     \
    \   if ($k == 0) {\n            array_push($result, $temp);\n            $temp\
    \ = \"\";\n        }\n        $i++;\n    }\n    return $result;\n}\n\n$input =\
    \ \"()(( ))(( )( ))\";\necho \"<br>\";\necho \"<br>\";\necho \"<br>\";\necho \"\
    <br>\";\n$result = separate_paren_groups($input);\nfor ($i = 0; $i < count($result);\
    \ $i++) {\n    echo $result[$i];\n    echo \"<br>\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: <br><br><br><br>()<br>(())<br>(()())<br>
  timestamp: 1659979173
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  $result = array();\n  $nested = array();\n  $current_group = \"\";\n  for\
    \ ($i = 0; $i < strlen($paren_string); $i++) {\n    if ($paren_string[$i] ===\
    \ \"(\") {\n      if (count($nested) === 0) {\n        $current_group = \"\";\n\
    \      }\n      array_push($nested, \"(\");\n    } else if ($paren_string[$i]\
    \ === \")\") {\n      array_pop($nested);\n      if (count($nested) === 0) {\n\
    \        array_push($result, $current_group);\n      }\n    } else if ($paren_string[$i]\
    \ !== \" \") {\n      $current_group .= $paren_string[$i];\n    }\n  }\n  return\
    \ $result;\n}\n\n$result = separate_paren_groups(\"( ) (( )) (( )( ))\");\nfor\
    \ ($i = 0; $i < count($result); $i++) {\n  echo $result[$i].\"\\n\";\n}\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbwo7a4ao.php:39\n\
    Stack trace:\n#0 /tmp/tmpbwo7a4ao.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpbwo7a4ao.php\
    \ on line 39\n"
  timestamp: 1659979173
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\t// Write your code here!\n\t$paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \n\t$p_array = array();\n\t$p_array_idx = 0;\n\t$idx = 0;\n\t$temp_group = \"\"\
    ;\n\t$temp_group_idx = 0;\n\t$n_left = 0;\n\t$n_right = 0;\n\n\twhile ($idx <\
    \ strlen($paren_string)) {\n\t\t$ch = $paren_string[$idx];\n\t\tif ($ch == '(')\
    \ {\n\t\t\t$n_left++;\n\t\t\t$temp_group[$temp_group_idx] = $ch;\n\t\t\t$temp_group_idx++;\n\
    \t\t} else if ($ch == ')') {\n\t\t\t$n_right++;\n\t\t\t$temp_group[$temp_group_idx]\
    \ = $ch;\n\t\t\t$temp_group_idx++;\n\t\t}\n\n\t\tif ($n_left == $n_right) {\n\t\
    \t\t$p_array[$p_array_idx] = $temp_group;\n\t\t\t$p_array_idx++;\n\t\t\t$temp_group\
    \ = \"\";\n\t\t\t$temp_group_idx = 0;\n\t\t\t$n_left = 0;\n\t\t\t$n_right = 0;\n\
    \t\t}\n\n\t\t$idx++;\n\t}\n\n\treturn $p_array;\n}\n\n$paren_string = \"( ) ((\
    \ )) (( )( ))\";\n$expected = array(\"()\", \"(())\", \"(()())\");\n\nprint \"\
    Test case 1 (\\\"$paren_string\\\"): \";\n$p_array = separate_paren_groups($paren_string);\n\
    $passed = ($p_array == $expected);\nprint ($passed ? \"PASSED\" : \"FAILED\");\n\
    print \"\\n\";\n\n$paren_string = \"( ( ) ) ( ( ( ) ) )\";\n$expected = array(\"\
    (())\", \"((()))\");\n\nprint \"Test case 2 (\\\"$paren_string\\\"): \";\n$p_array\
    \ = separate\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpn8dayyx_.php
    on line 61

    '
  timestamp: 1659979173
- exit_code: 0
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\t$groups = [];\n\t$level = 0;\n\t$current_group = '';\n\tfor ($i = 0; $i\
    \ < strlen($paren_string); $i++) {\n\t\tif ($paren_string[$i] == '(') {\n\t\t\t\
    $level++;\n\t\t\t$current_group .= '(';\n\t\t} else if ($paren_string[$i] == ')')\
    \ {\n\t\t\t$level--;\n\t\t\t$current_group .= ')';\n\t\t\tif ($level == 0) {\n\
    \t\t\t\t$groups[] = $current_group;\n\t\t\t\t$current_group = '';\n\t\t\t}\n\t\
    \t}\n\t}\n\treturn $groups;\n}\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979173
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\t$output = array();\n\t$start = 0;\n\t$paren_count = 0;\n\tfor ($i = 0;\
    \ $i < strlen($paren_string); $i++) {\n\t\tif ($paren_string[$i] == '(') {\n\t\
    \t\t$paren_count++;\n\t\t} else if ($paren_string[$i] == ')') {\n\t\t\t$paren_count--;\n\
    \t\t}\n\t\tif ($paren_count == 0) {\n\t\t\t$output[] = substr($paren_string, $start,\
    \ $i - $start + 1);\n\t\t\t$start = $i + 1;\n\t\t}\n\t}\n\treturn $output;\n}\n\
    function candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9zbnwpaf.php:30\n\
    Stack trace:\n#0 /tmp/tmp9zbnwpaf.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp9zbnwpaf.php\
    \ on line 30\n"
  timestamp: 1659979173
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $result = array();\n    $open = 0;\n    $start = 0;\n    for ($i = 0;\
    \ $i < strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n\
    \            if ($open == 0) {\n                $start = $i;\n            }\n\
    \            $open++;\n        } else if ($paren_string[$i] == ')') {\n      \
    \      $open--;\n            if ($open == 0) {\n                $result[] = substr($paren_string,\
    \ $start, $i - $start + 1);\n            }\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgb_sy2aw.php:36\n\
    Stack trace:\n#0 /tmp/tmpgb_sy2aw.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpgb_sy2aw.php\
    \ on line 36\n"
  timestamp: 1659979173
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  $result = array();\n  // for each character\n  for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n    // if it's an open paren\n    if ($paren_string[$i] == '(') {\n\
    \      // the current group we're working on is all characters after the first\
    \ open paren until we hit a closing paren\n      $current_group = substr($paren_string,\
    \ $i);\n      // $p is the current paren count\n      $p = 0;\n      // for each\
    \ character in the current group\n      for ($j = 0; $j < strlen($current_group);\
    \ $j++) {\n        // if it's an open paren, increment\n        if ($current_group[$j]\
    \ == '(') {\n          $p++;\n        }\n        // if it's a closing paren, decrement\n\
    \        if ($current_group[$j] == ')') {\n          $p--;\n        }\n      \
    \  // when we run out of open parens, that's the end of the current group we're\
    \ looking at\n        if ($p == 0) {\n          $result[] = substr($current_group,\
    \ 0, $j + 1);\n          break;\n        }\n      }\n    }\n  }\n  return $result;\n\
    }\n\n$input = \"( ) (( )) (( )( ))\";\n$test = separate_paren_groups($input);\n\
    echo implode(', ', $test) . \"\\n\";\n\nfunction candidate(...$args) {\n    return\
    \ separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((()))\
    \ (((())))\") !== array(\"()\", \"(())\", \"((()))\", \"(((())))\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(\"\
    (()(())((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ( ) (( )) (( )( ))\") !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "( ), (( )), ( ), (( )( )), ( ), ( )\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpmne3q7o3.php:48\nStack trace:\n#0 /tmp/tmpmne3q7o3.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpmne3q7o3.php on line 48\n"
  timestamp: 1659979173
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\t$count = strlen($paren_string);\n\t$open = 0;\n\t$closed = 0;\n\t$item\
    \ = \"\";\n\t$arr = array();\n\tfor ($i = 0; $i < $count; $i++) {\n\t\t$char =\
    \ $paren_string[$i];\n\t\tif ( $char == '(' ) {\n\t\t\t$open++;\n\t\t} else if\
    \ ( $char == ')' ) {\n\t\t\t$closed++;\n\t\t}\n\t\tif ( $open == $closed ) {\n\
    \t\t\t$arr[] = $item;\n\t\t\t$item = \"\";\n\t\t\t$open = 0;\n\t\t\t$closed =\
    \ 0;\n\t\t} else {\n\t\t\t$item .= $char;\n\t\t}\n\t}\n\treturn $arr;\n}\n\nprint_r(separate_paren_groups(\"\
    ( ) (( )) (( )( ))\"));\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => ( \n    [1] => \n    [2] => (( )\n    [3] => \n  \
    \  [4] => (( )( )\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0d6dp3es.php:39\n\
    Stack trace:\n#0 /tmp/tmp0d6dp3es.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp0d6dp3es.php\
    \ on line 39\n"
  timestamp: 1659979173
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $parens = str_split($paren_string);\n    $paren_groups = array();\n \
    \   $group = '';\n    $paren_count = 0;\n    foreach ($parens as $paren) {\n \
    \       if ($paren == '(') {\n            $paren_count++;\n        } elseif ($paren\
    \ == ')') {\n            $paren_count--;\n        }\n        $group .= $paren;\n\
    \        if ($paren_count == 0) {\n            array_push($paren_groups, $group);\n\
    \            $group = '';\n        }\n    }\n    return $paren_groups;\n}\n\n\
    function candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5krq7mj0.php:33\n\
    Stack trace:\n#0 /tmp/tmp5krq7mj0.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp5krq7mj0.php\
    \ on line 33\n"
  timestamp: 1659979173
- exit_code: 0
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $arr_string = str_split($paren_string);\n    $array = array();\n    $str_stack\
    \ = \"\";\n    $cnt_open = 0;\n    $cnt_close = 0;\n    for ($i = 0; $i < count($arr_string);\
    \ $i++) {\n        if ($arr_string[$i] == \"(\") {\n            $cnt_open++;\n\
    \            $str_stack .= $arr_string[$i];\n        } else if ($arr_string[$i]\
    \ == \")\") {\n            $cnt_close++;\n            $str_stack .= $arr_string[$i];\n\
    \        } else {\n            continue;\n        }\n        if ($cnt_open ==\
    \ $cnt_close) {\n            array_push($array, $str_stack);\n            $str_stack\
    \ = \"\";\n            $cnt_open = 0;\n            $cnt_close = 0;\n        }\n\
    \    }\n    return $array;\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979173
- exit_code: 0
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\t$paren_groups = [];\n\t$cursor = 0;\n\t$index_of_opening_paren = 0;\n\t\
    $current_group = \"\";\n\twhile ($cursor < strlen($paren_string)) {\n\t\tif ($paren_string[$cursor]\
    \ === \"(\") {\n\t\t\tif ($current_group === \"\") {\n\t\t\t\t$index_of_opening_paren\
    \ = $cursor;\n\t\t\t}\n\t\t\t$current_group .= $paren_string[$cursor];\n\t\t}\
    \ else if ($paren_string[$cursor] === \")\") {\n\t\t\t$current_group .= $paren_string[$cursor];\n\
    \t\t\tif (substr_count($current_group, \"(\") === substr_count($current_group,\
    \ \")\")) {\n\t\t\t\t$paren_groups[] = $current_group;\n\t\t\t\t$current_group\
    \ = \"\";\n\t\t\t}\n\t\t}\n\t\t$cursor++;\n\t}\n\treturn $paren_groups;\n}\n\n\
    function candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979173
- exit_code: 0
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $output = array();\n    $group = \"\";\n    $paren_stack = array();\n\
    \    for ($i = 0; $i < strlen($paren_string); $i++) {\n        $curr_char = $paren_string[$i];\n\
    \        if ($curr_char === \" \") {\n            continue;\n        }\n     \
    \   if ($curr_char === \"(\") {\n            $paren_stack[] = $curr_char;\n  \
    \      } else {\n            if (count($paren_stack) > 0) {\n                array_pop($paren_stack);\n\
    \            }\n        }\n        $group .= $curr_char;\n        if (count($paren_stack)\
    \ === 0) {\n            $output[] = $group;\n            $group = \"\";\n    \
    \    }\n    }\n    return $output;\n}\n\nfunction candidate(...$args) {\n    return\
    \ separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((()))\
    \ (((())))\") !== array(\"()\", \"(())\", \"((()))\", \"(((())))\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(\"\
    (()(())((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ( ) (( )) (( )( ))\") !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979173
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    // construct a regular expression to find all nested parentheses\n  \
    \  $paren_regex = '/(\\(+\\))+/';\n    preg_match_all($paren_regex, $paren_string,\
    \ $matches);\n    return $matches[0];\n}\n\nfunction candidate(...$args) {\n \
    \   return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_lqn9p6l.php:20\n\
    Stack trace:\n#0 /tmp/tmp_lqn9p6l.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp_lqn9p6l.php\
    \ on line 20\n"
  timestamp: 1659979173
- exit_code: 0
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\t$groups = [];\n\t$current_group = '';\n\t$open_paren_count = 0;\n\tfor\
    \ ($i = 0; $i < strlen($paren_string); $i++) {\n\t\t$char = $paren_string[$i];\n\
    \t\tif ($char === '(') {\n\t\t\t$open_paren_count++;\n\t\t\t$current_group .=\
    \ $char;\n\t\t} else if ($char === ')') {\n\t\t\t$open_paren_count--;\n\t\t\t\
    $current_group .= $char;\n\t\t\tif ($open_paren_count === 0) {\n\t\t\t\t$groups[]\
    \ = $current_group;\n\t\t\t\t$current_group = '';\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ $groups;\n}\n\n$input = '( ) (( )) (( )( ))';\nprint_r(separate_paren_groups($input));\n\
    \n$input = '( ( ) ( ( ( ( ) ) ) ) )';\nprint_r(separate_paren_groups($input));\n\
    \nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => ()\n    [1] => (())\n    [2] => (()())\n)\nArray\n\
    (\n    [0] => (()(((()))))\n)\n"
  timestamp: 1659979173
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    // your code here\n}\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnzgpcmsc.php:16\n\
    Stack trace:\n#0 /tmp/tmpnzgpcmsc.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpnzgpcmsc.php\
    \ on line 16\n"
  timestamp: 1659979173
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp68fbuyoq.php:17\n\
    Stack trace:\n#0 /tmp/tmp68fbuyoq.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp68fbuyoq.php\
    \ on line 17\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  $i = 0;\n  $arr = [];\n  while ($i < strlen($paren_string)) {\n    $c =\
    \ $paren_string[$i];\n    if ($c === '(') {\n      $num_open = 1;\n      $paren_string[$i]\
    \ = ' ';\n      $i++;\n      while ($num_open > 0) {\n        $c = $paren_string[$i];\n\
    \        if ($c === '(') {\n          $num_open++;\n        } else if ($c ===\
    \ ')') {\n          $num_open--;\n        }\n        $paren_string[$i] = ' ';\n\
    \        $i++;\n      }\n      $arr[] = trim($paren_string);\n    }\n    $i++;\n\
    \  }\n  return $arr;\n}\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbojyz80w.php:38\n\
    Stack trace:\n#0 /tmp/tmpbojyz80w.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpbojyz80w.php\
    \ on line 38\n"
  timestamp: 1659979173
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  $groups = array();\n  $open_count = 0;\n  $paren_group = \"\";\n  for ($i\
    \ = 0; $i < strlen($paren_string); $i++) {\n    $char = $paren_string[$i];\n \
    \   if ($char == \"(\") {\n      $open_count++;\n      $paren_group .= $char;\n\
    \    } else if ($char == \")\") {\n      $open_count--;\n      $paren_group .=\
    \ $char;\n    }\n    if ($open_count == 0) {\n      $groups[] = $paren_group;\n\
    \      $paren_group = \"\";\n    }\n  }\n  return $groups;\n}\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplyx4lj6i.php:33\n\
    Stack trace:\n#0 /tmp/tmplyx4lj6i.php(39): test()\n#1 {main}\n  thrown in /tmp/tmplyx4lj6i.php\
    \ on line 33\n"
  timestamp: 1659979173
- exit_code: 0
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    // Example:\
    \ I want to extract all strings from this string that are surrounded by parentheses.\n\
    \    // \"( ) (( )) (( )( ))\"\n    // Anything between parentheses I want to\
    \ keep and store in an array and return that array.\n    // One thing to note\
    \ is that there will be no nested parentheses. \n\n    // Here's my initial thought\
    \ process:\n    // I'll need to keep track of how many open and close parentheses\
    \ there are.\n    // I'll probably need to loop through the string.\n\n    //\
    \ I'm going to create an array that stores the substrings that I find.\n    $separated_paren_groups\
    \ = array();\n\n    // I'm going to create a variable that stores a string that's\
    \ inside a set of parentheses.\n    $paren_group = \"\";\n\n    // I'm going to\
    \ set up a count variable.\n    $paren_count = 0;\n\n    // I'm going to loop\
    \ through the string.\n    for ($i = 0; $i < strlen($paren_string); $i++) {\n\
    \        // If the character is an open parenthesis\n        if ($paren_string[$i]\
    \ == \"(\") {\n            // Increase the count variable.\n            $paren_count++;\n\
    \            // Add the parenthesis to the substring variable.\n            $paren_group\
    \ .= $paren_string[$i];\n        } else {\n            // If the character is\
    \ a close parenthesis\n            // Add the parenthesis to the substring variable.\n\
    \            $paren_group .= $paren_string[$i];\n            // Decrease the count\
    \ variable.\n            $paren_count--;\n            // If the count variable\
    \ is 0\n            if ($paren_count == 0) {\n                // Put the substring\
    \ variable into the array of substrings.\n                array_push($separated_paren_groups,\
    \ $paren_group);\n                // Clear the substring variable.\n         \
    \       $paren_group = \"\";\n            }\n        }\n    }\n\n    // Return\
    \ the array.\n    return $separated_paren_groups;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979173
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    // return array(\"(())\", \"(()())\");\n}\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmputi01x2w.php:16\n\
    Stack trace:\n#0 /tmp/tmputi01x2w.php(22): test()\n#1 {main}\n  thrown in /tmp/tmputi01x2w.php\
    \ on line 16\n"
  timestamp: 1659979173
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $i = 0;\n\
    \    $j = 0;\n    $k = 0;\n    $l = 0;\n    $result = [];\n    while ($i < strlen($paren_string))\
    \ {\n        $start = strpos($paren_string, \"(\", $j);\n        $end = strpos($paren_string,\
    \ \")\", $k);\n        if ($start === false) {\n            break;\n        }\n\
    \        while ($end) {\n            $paren_string = substr_replace($paren_string,\
    \ \"+\", $end, 1);\n            $end = strpos($paren_string, \")\", $end + 1);\n\
    \        }\n        $j = $start + 1;\n        $k = $end + 1;\n        $result[$l]\
    \ = substr($paren_string, $start, $end - $start + 1);\n        $l++;\n       \
    \ $i++;\n    }\n    return $result;\n}\n\n$a = \"( ) (( )) (( )( ))\";\nprint_r(separate_paren_groups($a));\n\
    function candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => (\n    [1] => ((++((+(+\n    [2] => (++((+(\n    [3]\
    \ => (\n    [4] => \n    [5] => \n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp1x_397z0.php:41\nStack trace:\n#0 /tmp/tmp1x_397z0.php(47): test()\n\
    #1 {main}\n  thrown in /tmp/tmp1x_397z0.php on line 41\n"
  timestamp: 1659979173
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  $original_string = $paren_string;\n  $len = strlen($paren_string);\n  $output\
    \ = array();\n  $start = 0;\n  $end = 0;\n  $left = 0;\n  $right = 0;\n  for ($i\
    \ = 0; $i < $len; $i++) {\n    if ($paren_string[$i] == '(') {\n      $left++;\n\
    \    } else if ($paren_string[$i] == ')') {\n      $right++;\n    }\n    if ($left\
    \ == $right) {\n      $end = $i;\n      array_push($output, substr($original_string,\
    \ $start, $end - $start + 1));\n      $left = 0;\n      $right = 0;\n      $start\
    \ = $i + 1;\n    }\n  }\n  return $output;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp42ga62j_.php:38\n\
    Stack trace:\n#0 /tmp/tmp42ga62j_.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp42ga62j_.php\
    \ on line 38\n"
  timestamp: 1659979173
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    // your code here\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptnb3w1nw.php:17\n\
    Stack trace:\n#0 /tmp/tmptnb3w1nw.php(23): test()\n#1 {main}\n  thrown in /tmp/tmptnb3w1nw.php\
    \ on line 17\n"
  timestamp: 1659979173
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $result = array();\n    $start_index = 0;\n    $end_index = 0;\n    $open_count\
    \ = 0;\n    $close_count = 0;\n    $curr_string = '';\n    for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n        if ($paren_string[$i] == '(') {\n            $open_count++;\n\
    \        } else if ($paren_string[$i] == ')') {\n            $close_count++;\n\
    \        }\n        if ($open_count > 0 && $open_count == $close_count) {\n  \
    \          $curr_string = substr($paren_string, $start_index, $i - $start_index\
    \ + 1);\n            $result[] = $curr_string;\n            $open_count = 0;\n\
    \            $close_count = 0;\n            $start_index = $i + 1;\n        }\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprxox2mew.php:37\n\
    Stack trace:\n#0 /tmp/tmprxox2mew.php(43): test()\n#1 {main}\n  thrown in /tmp/tmprxox2mew.php\
    \ on line 37\n"
  timestamp: 1659979173
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  // Test strings\n  // $paren_string = '()()';\n  // $paren_string = '()(())';\n\
    \  // $paren_string = '()(()())';\n  // $paren_string = '() (() ())';\n  // $paren_string\
    \ = '() (( ))';\n  // $paren_string = '() (()())';\n  // $paren_string = '()(\
    \ ()() )()';\n  // $paren_string = '() (()) (())';\n  // $paren_string = '() ((\
    \ )) (( ))';\n  // $paren_string = '() (()) (()) ()';\n  // $paren_string = '()\
    \ (( )) (( )) ()';\n  // $paren_string = '() (()) (()) (())';\n  // $paren_string\
    \ = '() (()()) (()())';\n  // $paren_string = '() (( )) (( )) (( ))';\n  // $paren_string\
    \ = '() (()) (()) (()) ()';\n  // $paren_string = '() (()()) (()()) (()())';\n\
    \  // $paren_string = '() (( )) (( )) (( )) (( ))';\n  // $paren_string = '()\
    \ (()) (()) (()) (()) ()';\n  // $paren_string = '() (()()) (()()) (()()) (()())';\n\
    \  // $paren_string = '() (( )) (( )) (( )) (( )) (( ))';\n  // $paren_string\
    \ = '() (()) (()) (()) (()) (()) ()';\n  // $paren_string = '() (()()) (()())\
    \ (()()) (()()) (()())';\n  // $paren_string = '() (( )) (( )) (( )) (( )) ((\
    \ )) (( ))';\n  // $paren_string = '() (()) (()) (()) (()) (()) (()) ()';\n  //\
    \ $paren_string = '() (()()) (()()) (()()) (()()) (()()) (()())';\n  // $paren_string\
    \ = '() (( )) (( )) (( )) (( )) (( )) (( )) (( ))';\n  // $paren_string = '()\
    \ (()) (()) (()) (()) (()) (()) (()) ()';\n \nfunction candidate(...$args) {\n\
    \    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unclosed ''{'' on line 8 in /tmp/tmpzyqgg7h6.php on line 49

    '
  timestamp: 1659979173
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $open_paren = \"(\";\n    $close_paren = \")\";\n    $paren_groups =\
    \ array();\n    $i = 0;\n    $j = 0;\n    $count = 0;\n    $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n    $length = strlen($paren_string);\n    while ($i\
    \ < $length) {\n        if ($paren_string[$i] == $open_paren) {\n            $paren_groups[$j]\
    \ = \"\";\n            $count++;\n        } else if ($paren_string[$i] == $close_paren)\
    \ {\n            $count--;\n            $j++;\n        } else {\n            $paren_groups[$j]\
    \ .= $paren_string[$i];\n        }\n        $i++;\n    }\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzw7jw46_.php:37\n\
    Stack trace:\n#0 /tmp/tmpzw7jw46_.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpzw7jw46_.php\
    \ on line 37\n"
  timestamp: 1659979173
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $arr = str_split($paren_string);\n    $groups = [];\n    $open = 0;\n\
    \    $current_group = '';\n    foreach ($arr as $char) {\n        if ($char ===\
    \ '(') {\n            $open++;\n            $current_group .= $char;\n       \
    \ } elseif ($char === ')') {\n            $open--;\n            $current_group\
    \ .= $char;\n        }\n        if ($open === 0) {\n            $groups[] = $current_group;\n\
    \            $current_group = '';\n        }\n    }\n    return $groups;\n}\n\
    echo implode(' ', separate_paren_groups(\"( ) (( )) (( )( ))\"));\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "()  (())  (()())\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd69epxoi.php:34\n\
    Stack trace:\n#0 /tmp/tmpd69epxoi.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpd69epxoi.php\
    \ on line 34\n"
  timestamp: 1659979173
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_groups =\
    \ [];\n  $open_parens = [];\n  $open_paren_pos = 0;\n  $i = 0;\n  while ($i <\
    \ strlen($paren_string)) {\n    if ($paren_string[$i] === '(') {\n      $open_parens[]\
    \ = $i;\n    } else if ($paren_string[$i] === ')') {\n      $open_paren_pos =\
    \ array_pop($open_parens);\n      $paren_groups[] = substr($paren_string, $open_paren_pos,\
    \ $i - $open_paren_pos + 1);\n    }\n    $i++;\n  }\n  return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpthouslrm.php:31\n\
    Stack trace:\n#0 /tmp/tmpthouslrm.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpthouslrm.php\
    \ on line 31\n"
  timestamp: 1659979173
- exit_code: 0
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  $result = array();\n  $accumulator = \"\";\n  $paren_count = 0;\n  $paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n  for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n    $current_paren = $paren_string[$i];\n    if ($current_paren ==\
    \ \"(\") {\n      $paren_count++;\n    } else {\n      $paren_count--;\n    }\n\
    \    $accumulator .= $current_paren;\n    if ($paren_count == 0) {\n      array_push($result,\
    \ $accumulator);\n      $accumulator = \"\";\n    }\n  }\n  return $result;\n\
    }\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979173
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $index = 0;\n \
    \ $current_group = [];\n  $groups = [];\n  while ($index < strlen($paren_string))\
    \ {\n    $cur_char = $paren_string[$index];\n    if ($cur_char === '(') {\n  \
    \    array_push($current_group, $cur_char);\n    } else if ($cur_char === ')')\
    \ {\n      array_push($current_group, $cur_char);\n      if (count($current_group)\
    \ === 2) {\n        array_push($groups, implode($current_group));\n        $current_group\
    \ = [];\n      }\n    }\n    $index++;\n  }\n  return $groups;\n}\n\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3weauq4d.php:34\n\
    Stack trace:\n#0 /tmp/tmp3weauq4d.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp3weauq4d.php\
    \ on line 34\n"
  timestamp: 1659979173
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    // $paren_groups = array();\n    // $paren_groups[] = \"()\";\n    //\
    \ $paren_groups[] = \"(())\";\n    // $paren_groups[] = \"(()())\";\n    // return\
    \ $paren_groups;\n    $stack = new SplStack();\n    $paren_groups = array();\n\
    \    $split_string = str_split($paren_string);\n    $paren_groups[] = '(\"\";';\n\
    \    $paren_groups[] = '(\"(\");';\n    $paren_groups[] = '(\"()\");';\n    $paren_groups[]\
    \ = '(\"(())\");';\n    $paren_groups[] = '(\"(()())\");';\n    $paren_groups[]\
    \ = '(\"(()()())\");';\n    return $paren_groups;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpig9zzsgm.php:31\n\
    Stack trace:\n#0 /tmp/tmpig9zzsgm.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpig9zzsgm.php\
    \ on line 31\n"
  timestamp: 1659979173
- exit_code: 0
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $length = strlen($paren_string);\n    $paren_groups = array();\n    $paren_stack\
    \ = array();\n    $buffer = '';\n    for ($i = 0; $i < $length; $i++) {\n    \
    \    if ($paren_string[$i] == '(') {\n            array_push($paren_stack, $paren_string[$i]);\n\
    \            $buffer .= $paren_string[$i];\n        } elseif ($paren_string[$i]\
    \ == ')') {\n            if (count($paren_stack) == 0) {\n                echo\
    \ 'error: no matching (';\n                break;\n            }\n           \
    \ array_pop($paren_stack);\n            $buffer .= $paren_string[$i];\n      \
    \      if (count($paren_stack) == 0) {\n                array_push($paren_groups,\
    \ $buffer);\n                $buffer = '';\n            }\n        }\n    }\n\
    \    return $paren_groups;\n}\n\nprint_r(separate_paren_groups(\"( ) (( )) ((\
    \ )( ))\"));\necho '<br>';\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => ()\n    [1] => (())\n    [2] => (()())\n)\n<br>"
  timestamp: 1659979173
- exit_code: 0
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $final = [];\n    $stack = [];\n    $current = '';\n    for ($i = 0;\
    \ $i < strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n\
    \            array_push($stack, $paren_string[$i]);\n            $current .= $paren_string[$i];\n\
    \        } elseif ($paren_string[$i] == ')') {\n            array_pop($stack);\n\
    \            $current .= $paren_string[$i];\n            if (empty($stack)) {\n\
    \                array_push($final, $current);\n                $current = '';\n\
    \            }\n        }\n    }\n    return $final;\n}\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979173
- exit_code: 0
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $separated_groups = array();\n    // Your code here.\n\n    $current_string\
    \ = \"\";\n    $count = 0;\n    for ($i = 0; $i < strlen($paren_string); $i++)\
    \ {\n        if ($paren_string[$i] == \"(\") {\n            $count++;\n      \
    \      $current_string .= \"(\";\n        } else if ($paren_string[$i] == \")\"\
    ) {\n            $count--;\n            $current_string .= \")\";\n        }\n\
    \n        if ($count == 0 && $current_string != \"\") {\n            array_push($separated_groups,\
    \ $current_string);\n            $current_string = \"\";\n        }\n    }\n\n\
    \    return $separated_groups;\n}\n\nfunction candidate(...$args) {\n    return\
    \ separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((()))\
    \ (((())))\") !== array(\"()\", \"(())\", \"((()))\", \"(((())))\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(\"\
    (()(())((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ( ) (( )) (( )( ))\") !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979173
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\t//Your Code Here\n}\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8fc33659.php:16\n\
    Stack trace:\n#0 /tmp/tmp8fc33659.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp8fc33659.php\
    \ on line 16\n"
  timestamp: 1659979173
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  $open_paren = strpos($paren_string, '(');\n  $close_paren = strpos($paren_string,\
    \ ')');\n  $possible_paren_groups = [];\n  while ($open_paren !== false) {\n \
    \   if ($close_paren !== false && $close_paren > $open_paren) {\n      $possible_paren_groups[]\
    \ = substr($paren_string, $open_paren, $close_paren - $open_paren + 1);\n    }\n\
    \    $open_paren = strpos($paren_string, '(', $open_paren + 1);\n    $close_paren\
    \ = strpos($paren_string, ')', $close_paren + 1);\n  }\n  return array_values(array_filter($possible_paren_groups,\
    \ function($group) {\n    $group_len = strlen($group);\n    if ($group_len < 2)\
    \ {\n      return false;\n    }\n    $expected_num_parens = ($group_len - 1) /\
    \ 2;\n    $num_open_parens = strlen(str_replace(['(', ')'], '', $group));\n  \
    \  return $expected_num_parens === $num_open_parens;\n  }));\n}\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp71inbvgu.php:34\n\
    Stack trace:\n#0 /tmp/tmp71inbvgu.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp71inbvgu.php\
    \ on line 34\n"
  timestamp: 1659979173
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  // >>>>>>>>>>>>> YOUR CODE HERE <<<<<<<<<<<<<\n  $result = array();\n \
    \ $string_group = \"\";\n  $len = strlen($paren_string);\n  for ($i = 0; $i <\
    \ $len; $i++) {\n    if ($paren_string[$i] == \" \") {\n      continue;\n    }\n\
    \    if ($paren_string[$i] == \"(\") {\n      $string_group .= \"(\";\n    }\n\
    \    if ($paren_string[$i] == \")\") {\n      $string_group .= \")\";\n      $result[]\
    \ = $string_group;\n      $string_group = \"\";\n    }\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpecsbkz2g.php:34\n\
    Stack trace:\n#0 /tmp/tmpecsbkz2g.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpecsbkz2g.php\
    \ on line 34\n"
  timestamp: 1659979173
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  $result = array();\n  if(empty($paren_string)) {\n    return $result;\n\
    \  }\n\n  $paren_array = preg_split('//', $paren_string, -1, PREG_SPLIT_NO_EMPTY);\n\
    \  $pindex = 0;\n  $temp = \"\";\n  $in_paren = false;\n  foreach($paren_array\
    \ as $char) {\n    if($char == '(') {\n      if($in_paren) {\n        $temp .=\
    \ $char;\n      }\n      $in_paren = true;\n    } else if($char == ')') {\n  \
    \    if($in_paren) {\n        $temp .= $char;\n      }\n      $in_paren = false;\n\
    \      $result[$pindex] = $temp;\n      $temp = \"\";\n      $pindex++;\n    }\
    \ else {\n      $temp .= $char;\n    }\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5zn2656o.php:44\n\
    Stack trace:\n#0 /tmp/tmp5zn2656o.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp5zn2656o.php\
    \ on line 44\n"
  timestamp: 1659979173
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $paren_string = str_replace(' ', '', $paren_string);\n    $result = array();\n\
    \    $iter_len = strlen($paren_string);\n    for ($i = 0; $i < $iter_len; $i++)\
    \ {\n        if ($paren_string[$i] === '(') {\n            $iter_len2 = strlen($paren_string);\n\
    \            for ($j = $i + 1; $j < $iter_len2; $j++) {\n                if ($paren_string[$j]\
    \ === ')') {\n                    $result[] = substr($paren_string, $i, $j - $i\
    \ + 1);\n                    $i = $j;\n                    break;\n          \
    \      }\n            }\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppmzq63n1.php:32\n\
    Stack trace:\n#0 /tmp/tmppmzq63n1.php(38): test()\n#1 {main}\n  thrown in /tmp/tmppmzq63n1.php\
    \ on line 32\n"
  timestamp: 1659979173
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  $paren_groups = [];\n  $current_group = '';\n  $open_parens = 0;\n  $close_parens\
    \ = 0;\n  $next_char = $paren_string[0];\n  for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n    $next_char = $paren_string[$i];\n    if ($next_char == '(') {\n\
    \      $open_parens++;\n    } elseif ($next_char == ')') {\n      $close_parens++;\n\
    \    }\n    if ($next_char != ' ') {\n      $current_group .= $next_char;\n  \
    \  }\n    if ($open_parens == $close_parens) {\n      $paren_groups[] = $current_group;\n\
    \      $current_group = '';\n      $open_parens = 0;\n      $close_parens = 0;\n\
    \    }\n  }\n  return $paren_groups;\n}\n\nfunction candidate(...$args) {\n  \
    \  return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7b654s9h.php:39\n\
    Stack trace:\n#0 /tmp/tmp7b654s9h.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp7b654s9h.php\
    \ on line 39\n"
  timestamp: 1659979173
- exit_code: 0
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  $groups = array();\n  $current_group = '';\n  $open_parens = 0;\n  $string_length\
    \ = strlen($paren_string);\n  for ($i = 0; $i < $string_length; $i++) {\n    $character\
    \ = $paren_string[$i];\n    if ($character == '(') {\n      $open_parens++;\n\
    \      $current_group .= $character;\n    } else if ($character == ')') {\n  \
    \    $open_parens--;\n      $current_group .= $character;\n      if ($open_parens\
    \ == 0) {\n        $groups[] = $current_group;\n        $current_group = '';\n\
    \      }\n    }\n  }\n  return $groups;\n}\nfunction candidate(...$args) {\n \
    \   return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n  \
    \  if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979173
- exit_code: 0
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $arr = str_split($paren_string);\n\
    \  $result = [];\n  $temp = '';\n  $count = 0;\n  foreach ($arr as $value) {\n\
    \    if ($value == '(') {\n      $count++;\n    }\n    $temp .= $value;\n    if\
    \ ($value == ')') {\n      $count--;\n    }\n    if ($count == 0) {\n      $result[]\
    \ = $temp;\n      $temp = '';\n    }\n  }\n  return $result;\n}\necho '<pre>';\n\
    print_r(separate_paren_groups(\"( ) (( )) (( )( ))\"));\necho '</pre>';\n\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => ()\n    [1] => (())\n    [2] => (()())\n)\n</pre>"
  timestamp: 1659979173
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\t$res = array();\n\t$i = 0;\n\t$c = 0;\n\t$s = \"\";\n\t$len = strlen($paren_string);\n\
    \twhile ($i < $len) {\n\t\t$c = $paren_string[$i];\n\t\tif ($c == \" \") {\n\t\
    \t\t$i++;\n\t\t\tcontinue;\n\t\t} else if ($c == \"(\") {\n\t\t\t$s .= $c;\n\t\
    \t\t$i++;\n\t\t\tcontinue;\n\t\t} else if ($c == \")\") {\n\t\t\t$s .= $c;\n\t\
    \t\t$i++;\n\t\t\t$res[] = $s;\n\t\t\t$s = \"\";\n\t\t\tcontinue;\n\t\t}\n\t}\n\
    \treturn $res;\n}\n\n$test_cases = array(\n\t'( ) (( )) (( )( ))' => array(\"\
    ()\", \"(())\", \"(()())\"),\n\t'(()())' => array(\"(()())\"),\n\t'(((())))' =>\
    \ array(\"(((())))\"),\n\t'(()((())))' => array(\"(()((())))\"),\n\t'(()) (()(()))'\
    \ => array(\"(())\", \"(()(()))\"),\n\t'((()) (()(())))' => array(\"((())\", \"\
    (()(())))\"),\n\t'(()) ((()(())))' => array(\"(())\", \"((()(())))\"),\n\t'()\
    \ (()()) (()(())) (()(())())' => array(\"()\", \"(()())\", \"(()(()))\", \"(()(())())\"\
    ),\n\t'() ((())) (()()()) (()()) (()(())) (()(())())' => array(\"()\", \"((()))\"\
    , \"(()()())\", \"(()())\", \"(()(()))\", \"(()(())())\"),\n\t'() () () ()' =>\
    \ array(\"()\", \"()\", \"()\", \"()\"),\n\t'((())) ((())) ((())) ((()))' => array(\"\
    ((()))\", \"((()))\", \"((()))\", \"((()))\"),\n\t'(()()) (()()) (\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "(()()) (()()) (", expecting
    ")" in /tmp/tmpgqketols.php on line 46

    '
  timestamp: 1659979173
- exit_code: 0
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    // your code here\n    $arr = str_split($paren_string);\n    $ret_arr\
    \ = array();\n    $cur_string = \"\";\n    $open_parens = 0;\n    foreach ($arr\
    \ as $char) {\n        if ($char == \"(\") {\n            $open_parens++;\n  \
    \          $cur_string .= $char;\n        } else if ($char == \")\") {\n     \
    \       $open_parens--;\n            $cur_string .= $char;\n        } else {\n\
    \            //space\n            continue;\n        }\n        if ($open_parens\
    \ == 0) {\n            array_push($ret_arr, $cur_string);\n            $cur_string\
    \ = \"\";\n        }\n    }\n    return $ret_arr;\n}\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979173
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  $parray = str_split($paren_string);\n  $current = \"\";\n  $groups = array();\n\
    \  $open = false;\n  foreach ($parray as $p) {\n    if ($p == \"(\") {\n     \
    \ if ($open) {\n        $current .= $p;\n      } else {\n        $open = true;\n\
    \        $current = $p;\n      }\n    } else if ($p == \")\") {\n      if ($open)\
    \ {\n        $current .= $p;\n        $groups[] = $current;\n        $current\
    \ = \"\";\n        $open = false;\n      }\n    }\n  }\n  return $groups;\n}\n\
    \nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo199ku6o.php:38\n\
    Stack trace:\n#0 /tmp/tmpo199ku6o.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpo199ku6o.php\
    \ on line 38\n"
  timestamp: 1659979173
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\t$array_parens = array();\n\tfor ($i = 0; $i < strlen($paren_string); $i++)\
    \ {\n\t\tif ($paren_string[$i] == '(') {\n\t\t\t$open_paren = $i;\n\t\t\t$open_paren_count\
    \ = 1;\n\t\t\tfor ($j = $i + 1; $j < strlen($paren_string); $j++) {\n\t\t\t\t\
    if ($paren_string[$j] == '(') {\n\t\t\t\t\t$open_paren_count++;\n\t\t\t\t} else\
    \ if ($paren_string[$j] == ')') {\n\t\t\t\t\t$open_paren_count--;\n\t\t\t\t}\n\
    \t\t\t\tif ($open_paren_count == 0) {\n\t\t\t\t\tarray_push($array_parens, substr($paren_string,\
    \ $open_paren, $j - $open_paren + 1));\n\t\t\t\t\t$i = $j;\n\t\t\t\t\tbreak;\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn $array_parens;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc2rkl4wn.php:39\n\
    Stack trace:\n#0 /tmp/tmpc2rkl4wn.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpc2rkl4wn.php\
    \ on line 39\n"
  timestamp: 1659979173
- exit_code: 0
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $paren_array = str_split($paren_string);\n    $paren_groups = array();\n\
    \    $current_group = array();\n    $nest_level = 0;\n    foreach ($paren_array\
    \ as $char) {\n        if ($char == '(') {\n            $nest_level += 1;\n  \
    \          $current_group[] = $char;\n        } elseif ($char == ')') {\n    \
    \        $nest_level -= 1;\n            $current_group[] = $char;\n          \
    \  if ($nest_level == 0) {\n                $paren_groups[] = implode($current_group);\n\
    \                $current_group = array();\n            }\n        }\n    }\n\
    \    return $paren_groups;\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979173
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $paren_open = str_split(\"(\");\n    $paren_close = str_split(\")\");\n\
    \    $paren_nested = array();\n    $paren_nested_cnt = 0;\n    $paren_string_arr\
    \ = str_split($paren_string);\n    $paren_string_arr_cnt = count($paren_string_arr);\n\
    \    $paren_string_arr_tmp = \"\";\n    $paren_string_arr_new = array();\n   \
    \ for ($i = 0; $i < $paren_string_arr_cnt; $i++) {\n        if (in_array($paren_string_arr[$i],\
    \ $paren_open)) {\n            $paren_nested_cnt++;\n            if ($paren_nested_cnt\
    \ == 1) {\n                $paren_string_arr_tmp = $paren_string_arr[$i];\n  \
    \          } else {\n                $paren_string_arr_tmp .= $paren_string_arr[$i];\n\
    \            }\n        } elseif (in_array($paren_string_arr[$i], $paren_close))\
    \ {\n            $paren_nested_cnt--;\n            if ($paren_nested_cnt == 0)\
    \ {\n                $paren_string_arr_tmp .= $paren_string_arr[$i];\n       \
    \         $paren_string_arr_new[] = $paren_string_arr_tmp;\n                $paren_string_arr_tmp\
    \ = \"\";\n            } else {\n                $paren_string_arr_tmp .= $paren_string_arr[$i];\n\
    \            }\n        }\n    }\n    return $paren_string_arr_new;\n}\n$input_tests\
    \ = array(\n    \"( ) (( )) (( )( ))\",\n    \"( (( )) )\",\n    \"(( ) ) )\"\
    ,\n    \"((( ))\",\n    \"((() ))\",\n    \"(((((((((((())))))))))) (((((((((((()))))))))))\
    \ (((((((((((())))))))))) (((((((((((())))))))))) (((((((((((())))))))))) (((((((((((()))))))))))\
    \ (((((((((((\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token ")" in /tmp/tmpxuyke0bq.php on line
    50

    '
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $paren_groups = array();\n    $last_match = 0;\n    $open_parens = 0;\n\
    \    for ($i = 0; $i < strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n\
    \        if ($char == '(') {\n            $open_parens++;\n        } else if ($char\
    \ == ')') {\n            $open_parens--;\n            if ($open_parens == 0) {\n\
    \                $paren_groups[] = substr($paren_string, $last_match, $i - $last_match\
    \ + 1);\n                $last_match = $i + 1;\n            }\n        }\n   \
    \ }\n    return $paren_groups;\n}\n\nfunction candidate(...$args) {\n    return\
    \ separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((()))\
    \ (((())))\") !== array(\"()\", \"(())\", \"((()))\", \"(((())))\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(\"\
    (()(())((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ( ) (( )) (( )( ))\") !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_2_2eake.php:32\n\
    Stack trace:\n#0 /tmp/tmp_2_2eake.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp_2_2eake.php\
    \ on line 32\n"
  timestamp: 1659979173
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $new_array = array();\n    $string_length = strlen($paren_string);\n\
    \    $string_start = 0;\n    $paren_position = 0;\n    $open_paren = 0;\n    $close_paren\
    \ = 0;\n    for ($i = 0; $i < $string_length; $i++) {\n        if ($paren_string[$i]\
    \ == '(') {\n            $open_paren++;\n        }\n        if ($paren_string[$i]\
    \ == ')') {\n            $close_paren++;\n        }\n        if ($open_paren ==\
    \ $close_paren) {\n            $new_array[$paren_position] = substr($paren_string,\
    \ $string_start, $i - $string_start + 1);\n            $paren_position++;\n  \
    \          $string_start = $i + 1;\n            $open_paren = 0;\n           \
    \ $close_paren = 0;\n        }\n    }\n    return $new_array;\n}\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_a19bamv.php:37\n\
    Stack trace:\n#0 /tmp/tmp_a19bamv.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp_a19bamv.php\
    \ on line 37\n"
  timestamp: 1659979173
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    //Code Here\n    $result = array();\n    $i = 0;\n    $start_index =\
    \ 0;\n    $open_counter = 0;\n    $current_string = \"\";\n    while($i < strlen($paren_string))\
    \ {\n        if($paren_string[$i] == \"(\") {\n            $open_counter++;\n\
    \            $current_string .= $paren_string[$i];\n        }\n        else if($paren_string[$i]\
    \ == \")\") {\n            $open_counter--;\n            $current_string .= $paren_string[$i];\n\
    \        }\n        if($open_counter == 0) {\n            array_push($result,\
    \ $current_string);\n            $current_string = \"\";\n        }\n        $i++;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcbi93xuf.php:38\n\
    Stack trace:\n#0 /tmp/tmpcbi93xuf.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpcbi93xuf.php\
    \ on line 38\n"
  timestamp: 1659979173
- exit_code: 0
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $group = '';\n    $parens = array();\n    $idx = 0;\n    $paren_string\
    \ = str_replace(' ', '', $paren_string);\n    for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n        if ($paren_string[$i] == '(') {\n            $group .= '(';\n\
    \            $idx++;\n        } else if ($paren_string[$i] == ')') {\n       \
    \     $group .= ')';\n            $idx--;\n        }\n        if ($idx == 0) {\n\
    \            $parens[] = $group;\n            $group = '';\n        }\n    }\n\
    \    return $parens;\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979173
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $stack = array();\n    $paren_string = preg_replace('/ /', '', $paren_string);\n\
    \    $groups = explode(')(', $paren_string);\n    $is_valid = true;\n    foreach\
    \ ($groups as $group) {\n        $start = $group[0];\n        $count = 0;\n  \
    \      if ($start == '(') {\n            $cur_group = $group;\n            foreach\
    \ (str_split($group) as $char) {\n                if ($char == '(') {\n      \
    \              $count++;\n                } else {\n                    $count--;\n\
    \                }\n                if ($count < 0) {\n                    $is_valid\
    \ = false;\n                    break;\n                }\n            }\n   \
    \         if ($count != 0) {\n                $is_valid = false;\n           \
    \ }\n            if ($is_valid) {\n                array_push($stack, $cur_group);\n\
    \            }\n        } else {\n            $is_valid = false;\n        }\n\
    \    }\n    return $stack;\n}\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Uninitialized string offset 0 in /tmp/tmp5gnzoo_b.php on line\
    \ 14\n\nWarning: Uninitialized string offset 0 in /tmp/tmp5gnzoo_b.php on line\
    \ 14\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5gnzoo_b.php:46\n\
    Stack trace:\n#0 /tmp/tmp5gnzoo_b.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp5gnzoo_b.php\
    \ on line 46\n"
  timestamp: 1659979173
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\t$groups = array();\n\t$left_parens = 0;\n\t$right_parens = 0;\n\t$output\
    \ = \"\";\n\t\n\tfor ($i = 0; $i < strlen($paren_string); $i++) {\n\t\t$character\
    \ = $paren_string[$i];\n\t\tif ($character == \"(\" && $i < strlen($paren_string)\
    \ - 1) {\n\t\t\t$left_parens++;\n\t\t\t$output .= $character;\n\t\t} else if ($character\
    \ == \")\" && $i < strlen($paren_string) - 1) {\n\t\t\t$right_parens++;\n\t\t\t\
    $output .= $character;\n\t\t} else if ($character == \" \") {\n\t\t\tcontinue;\n\
    \t\t} else if ($left_parens == $right_parens) {\n\t\t\t$groups[] = $output;\n\t\
    \t\t$output = \"\";\n\t\t\t$left_parens = 0;\n\t\t\t$right_parens = 0;\n\t\t}\n\
    \t}\n\t\n\treturn $groups;\n}\n\necho \"\\nTesting separate_paren_groups with\
    \ '() (( )) (( )( ))': \";\nprint_r(separate_paren_groups(\"( ) (( )) (( )( ))\"\
    ));\n\necho \"\\nTesting separate_paren_groups with '()( )()(( ))(( ))': \";\n\
    print_r(separate_paren_groups(\"()( )()(( ))(( ))\"));\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nTesting separate_paren_groups with '() (( )) (( )( ))': Array\n(\n)\n\
    \nTesting separate_paren_groups with '()( )()(( ))(( ))': Array\n(\n)\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpo0crhhbk.php:46\nStack trace:\n\
    #0 /tmp/tmpo0crhhbk.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpo0crhhbk.php\
    \ on line 46\n"
  timestamp: 1659979173
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  // TODO\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpws0duo4p.php:17\n\
    Stack trace:\n#0 /tmp/tmpws0duo4p.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpws0duo4p.php\
    \ on line 17\n"
  timestamp: 1659979173
- exit_code: 0
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  $result = array();\n  $current_group = '';\n  $depth = 0;\n  for ($i =\
    \ 0; $i < strlen($paren_string); $i++) {\n    if ($paren_string[$i] == '(') {\n\
    \      $depth++;\n      $current_group .= '(';\n    } else if ($paren_string[$i]\
    \ == ')') {\n      $depth--;\n      $current_group .= ')';\n      if ($depth ==\
    \ 0) {\n        $result[] = $current_group;\n        $current_group = '';\n  \
    \    }\n    }\n  }\n  return $result;\n}\n\n$result = separate_paren_groups(\"\
    ( ) (( )) (( )( ))\");\nprint_r($result);\nfunction candidate(...$args) {\n  \
    \  return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => ()\n    [1] => (())\n    [2] => (()())\n)\n"
  timestamp: 1659979173
- exit_code: 0
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  $paren_groups = array();\n  $current_paren_group = '';\n  $paren_stack\
    \ = array();\n  $paren_string = str_replace(' ', '', $paren_string);\n  for ($i\
    \ = 0; $i < strlen($paren_string); $i++) {\n    $char = $paren_string[$i];\n \
    \   if ($char == '(') {\n      array_push($paren_stack, $char);\n    } else if\
    \ ($char == ')') {\n      array_pop($paren_stack);\n    }\n    $current_paren_group\
    \ .= $char;\n    if (count($paren_stack) == 0) {\n      array_push($paren_groups,\
    \ $current_paren_group);\n      $current_paren_group = '';\n    }\n  }\n  return\
    \ $paren_groups;\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  return [];\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdbww23jv.php:17\n\
    Stack trace:\n#0 /tmp/tmpdbww23jv.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpdbww23jv.php\
    \ on line 17\n"
  timestamp: 1659979173
- exit_code: 0
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\t$paren_string = str_replace(\" \", \"\", $paren_string);\n\t$a_count =\
    \ 0;\n\t$b_count = 0;\n\t$c_count = 0;\n\t$c = 0;\n\t$parens = array();\n\t$index\
    \ = 0;\n\twhile($index < strlen($paren_string)) {\n\t\tif($paren_string[$index]\
    \ == \"(\") {\n\t\t\t$parens[$c] .= \"(\";\n\t\t\t$a_count++;\n\t\t}\n\t\telseif($paren_string[$index]\
    \ == \")\") {\n\t\t\t$parens[$c] .= \")\";\n\t\t\t$b_count++;\n\t\t}\n\t\tif($a_count\
    \ == $b_count) {\n\t\t\t$a_count = 0;\n\t\t\t$b_count = 0;\n\t\t\t$c++;\n\t\t\
    }\n\t\t$index++;\n\t}\n\treturn $parens;\n}\n\nfunction candidate(...$args) {\n\
    \    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 0 in /tmp/tmpo3i7d59b.php on line 18


    Warning: Undefined array key 1 in /tmp/tmpo3i7d59b.php on line 18


    Warning: Undefined array key 2 in /tmp/tmpo3i7d59b.php on line 18


    Warning: Undefined array key 3 in /tmp/tmpo3i7d59b.php on line 18


    Warning: Undefined array key 0 in /tmp/tmpo3i7d59b.php on line 18


    Warning: Undefined array key 1 in /tmp/tmpo3i7d59b.php on line 18


    Warning: Undefined array key 2 in /tmp/tmpo3i7d59b.php on line 18


    Warning: Undefined array key 3 in /tmp/tmpo3i7d59b.php on line 18


    Warning: Undefined array key 0 in /tmp/tmpo3i7d59b.php on line 18


    Warning: Undefined array key 0 in /tmp/tmpo3i7d59b.php on line 18


    Warning: Undefined array key 1 in /tmp/tmpo3i7d59b.php on line 18


    Warning: Undefined array key 2 in /tmp/tmpo3i7d59b.php on line 18

    '
  timestamp: 1659979173
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  // your code here\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvh15qod6.php:17\n\
    Stack trace:\n#0 /tmp/tmpvh15qod6.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpvh15qod6.php\
    \ on line 17\n"
  timestamp: 1659979173
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    // result\n    $result = array();\n    // get all braces, ignore spaces\n\
    \    $braces = str_split(str_replace(' ', '', $paren_string));\n    // braces\
    \ length\n    $braces_length = count($braces);\n    // each group\n    $group\
    \ = array();\n    // indexes of braces from first group\n    $first_group_indexes\
    \ = array();\n    // for each brace\n    for ($i = 0; $i < $braces_length; $i++)\
    \ {\n        // skip if brace is not open or close brace\n        if ($braces[$i]\
    \ != '(' && $braces[$i] != ')') {\n            continue;\n        }\n        //\
    \ skip if length of first group is > then current braces length\n        if (count($first_group_indexes)\
    \ > 0 && ($i - $first_group_indexes[0]) > $braces_length) {\n            continue;\n\
    \        }\n        // push new item\n        array_push($group, $braces[$i]);\n\
    \        // when group is close then it is good for first group\n        if ($braces[$i]\
    \ == ')') {\n            // if first group is empty then fill it\n           \
    \ if (count($first_group_indexes) == 0) {\n                // first group is current\
    \ group\n                $first_group_indexes = $group;\n            }\n     \
    \       // reset group\n            $group = array();\n        }\n    }\n    //\
    \ get the rest groups\n    $groups = array_diff($braces, $first_group_indexes);\n\
    \    // if any groups\n    if (count($groups) > 0) {\n        // remove duplicates\n\
    \        $groups = array_unique($groups);\n        // sort\n        sort($groups);\n\
    \        // add first group\n        array_unshift($groups, $first_group_indexes);\n\
    \        // for each group\n        foreach ($groups as $group) {\n          \
    \  // convert to string and add\n            array_push($result, implode('', $group));\n\
    \        }\n    }\n    // return result\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: int - string\
    \ in /tmp/tmpubxfsk1p.php:26\nStack trace:\n#0 /tmp/tmpubxfsk1p.php(63): separate_paren_groups('(()())\
    \ ((())) (...')\n#1 /tmp/tmpubxfsk1p.php(67): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpubxfsk1p.php(73): test()\n#3 {main}\n  thrown in /tmp/tmpubxfsk1p.php\
    \ on line 26\n"
  timestamp: 1659979173
- exit_code: 0
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $result = array();\n    $paren_string = preg_replace('/\\s+/', '', $paren_string);\n\
    \    $start = 0;\n    $open = 0;\n    for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n        if ($paren_string[$i] == '(') {\n            $open++;\n   \
    \     } else {\n            $open--;\n        }\n        if ($open == 0) {\n \
    \           $result[] = substr($paren_string, $start, $i - $start + 1);\n    \
    \        $start = $i + 1;\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979173
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\t// remove white space\n\t$paren_string = str_replace(' ', '', $paren_string);\n\
    \t$nested_parens = [];\n\t$current_parens = '';\n\t$paren_count = 0;\n\t// walk\
    \ the string and build our array\n\tfor ($i = 0; $i < strlen($paren_string); $i++)\
    \ {\n\t\t$char = $paren_string[$i];\n\t\t// increase paren count for opening parens\n\
    \t\tif ($char == '(') {\n\t\t\t$paren_count++;\n\t\t}\n\t\t// decrease paren count\
    \ for closing parens\n\t\tif ($char == ')') {\n\t\t\t$paren_count--;\n\t\t}\n\t\
    \t// if we are finished with the current group of parens, add it to the array\n\
    \t\tif ($paren_count == 0) {\n\t\t\t$nested_parens[] = $current_parens;\n\t\t\t\
    $current_parens = '';\n\t\t}\n\t\t// add the current character to the current\
    \ group of parens\n\t\t$current_parens .= $char;\n\t}\n\treturn $nested_parens;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7i6d1x3c.php:41\n\
    Stack trace:\n#0 /tmp/tmp7i6d1x3c.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp7i6d1x3c.php\
    \ on line 41\n"
  timestamp: 1659979174
- exit_code: 0
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $paren_string = preg_replace('/\\s+/', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $result = array();\n    $temp = '';\n    $open_paren\
    \ = 0;\n    foreach ($paren_array as $char) {\n        if ($char == '(') {\n \
    \           $open_paren++;\n        }\n        $temp .= $char;\n        if ($char\
    \ == ')') {\n            $open_paren--;\n            if ($open_paren == 0) {\n\
    \                $result[] = $temp;\n                $temp = '';\n           \
    \ }\n        }\n    }\n    return $result;\n}\necho '<pre>';\nvar_dump(separate_paren_groups(\"\
    ( ) (( )) (( )( ))\"));\necho '</pre>';\nfunction candidate(...$args) {\n    return\
    \ separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((()))\
    \ (((())))\") !== array(\"()\", \"(())\", \"((()))\", \"(((())))\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(\"\
    (()(())((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ( ) (( )) (( )( ))\") !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>array(3) {\n  [0]=>\n  string(2) \"()\"\n  [1]=>\n  string(4) \"(())\"\
    \n  [2]=>\n  string(6) \"(()())\"\n}\n</pre>"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\t$paren_arr = str_split($paren_string);\n\t$group = \"\";\n\t$final_arr\
    \ = array();\n\tfor ($i = 0; $i < count($paren_arr); $i++) {\n\t\tif ($paren_arr[$i]\
    \ == \" \") {\n\t\t\tcontinue;\n\t\t}\n\t\telse if ($paren_arr[$i] == \"(\") {\n\
    \t\t\t$group .= \"(\";\n\t\t}\n\t\telse if ($paren_arr[$i] == \")\") {\n\t\t\t\
    $group .= \")\";\n\t\t\tarray_push($final_arr, $group);\n\t\t\t$group = \"\";\n\
    \t\t}\n\t}\n\treturn $final_arr;\n}\nfunction candidate(...$args) {\n    return\
    \ separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((()))\
    \ (((())))\") !== array(\"()\", \"(())\", \"((()))\", \"(((())))\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(\"\
    (()(())((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ( ) (( )) (( )( ))\") !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb2wx7yeh.php:32\n\
    Stack trace:\n#0 /tmp/tmpb2wx7yeh.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpb2wx7yeh.php\
    \ on line 32\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    // $paren_string = explode(' ', $paren_string);\n    // $paren_string\
    \ = implode($paren_string);\n    // $result = [];\n    // $count = 0;\n    //\
    \ $temp = '';\n    // for ($i = 0; $i < strlen($paren_string); $i++) {\n    //\
    \     if ($paren_string[$i] == '(') {\n    //         $count++;\n    //     }\
    \ elseif ($paren_string[$i] == ')') {\n    //         $count--;\n    //     }\n\
    \    //     $temp .= $paren_string[$i];\n    //     if ($count == 0) {\n    //\
    \         $result[] = $temp;\n    //         $temp = '';\n    //     }\n    //\
    \ }\n    // return $result;\n    return preg_match_all('/\\([^()]*\\)/', $paren_string,\
    \ $result) ? $result[0] : [];\n}\n\n$paren_string = \"( ) (( )) (( )( ))\";\n\
    var_dump(separate_paren_groups($paren_string));\necho '</br>';\n$paren_string\
    \ = \" ( () )) \";\nvar_dump(separate_paren_groups($paren_string));\necho '</br>';\n\
    $paren_string = \" ( () )) \";\nvar_dump(separate_paren_groups($paren_string));\n\
    echo '</br>';\n$paren_string = \" () \";\nvar_dump(separate_paren_groups($paren_string));\n\
    echo '</br>';\n$paren_string = \"()\";\nvar_dump(separate_paren_groups($paren_string));\n\
    echo '</br>';\n$paren_string = \" \";\nvar_dump(separate_paren_groups($paren_string));\n\
    echo '</br>';\n$paren_string = \"\";\nvar_dump(separate_paren_groups($paren_string));\n\
    echo '</br>';\n$paren_string = \"(())\";\nvar_dump(separate_paren_groups($paren_string));\n\
    echo '</br>';\n$paren_string = \"(\nfunction candidate(...$args) {\n    return\
    \ separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((()))\
    \ (((())))\") !== array(\"()\", \"(())\", \"((()))\", \"(((())))\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(\"\
    (()(())((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ( ) (( )) (( )( ))\") !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token ")" in /tmp/tmp8gtf4_v3.php on line
    60

    '
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\t// TODO: Implement me!\n}\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4qqw517s.php:16\n\
    Stack trace:\n#0 /tmp/tmp4qqw517s.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp4qqw517s.php\
    \ on line 16\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp68fbuyoq.php:17\n\
    Stack trace:\n#0 /tmp/tmp68fbuyoq.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp68fbuyoq.php\
    \ on line 17\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $open_parens = array();\n    $close_parens = array();\n    $output =\
    \ array();\n    for ($i = 0; $i < strlen($paren_string); $i++) {\n        if ($paren_string[$i]\
    \ == \"(\") {\n            array_push($open_parens, $i);\n        } else if ($paren_string[$i]\
    \ == \")\") {\n            array_push($close_parens, $i);\n        }\n    }\n\
    \    $close_parens = array_reverse($close_parens);\n    while (count($open_parens)\
    \ > 0) {\n        $open_paren = array_pop($open_parens);\n        $close_paren\
    \ = array_pop($close_parens);\n        array_push($output, substr($paren_string,\
    \ $open_paren, $close_paren - $open_paren + 1));\n    }\n    return $output;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv7zsoj3h.php:33\n\
    Stack trace:\n#0 /tmp/tmpv7zsoj3h.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpv7zsoj3h.php\
    \ on line 33\n"
  timestamp: 1659979174
- exit_code: 0
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $paren_string = preg_replace('/ /', '', $paren_string);\n    $paren_string\
    \ = str_split($paren_string);\n    $open_parens = 0;\n    $substrings = array();\n\
    \    $substring = '';\n    foreach ($paren_string as $char) {\n        if ($char\
    \ == '(') {\n            $open_parens++;\n        }\n        $substring .= $char;\n\
    \        if ($char == ')') {\n            $open_parens--;\n            if ($open_parens\
    \ == 0) {\n                $substrings[] = $substring;\n                $substring\
    \ = '';\n            }\n        }\n    }\n    return $substrings;\n}\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp68fbuyoq.php:17\n\
    Stack trace:\n#0 /tmp/tmp68fbuyoq.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp68fbuyoq.php\
    \ on line 17\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    // Remove all spaces\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_group_strings = array();\n    $substring = '';\n    $nested_count\
    \ = 0;\n    $found_substring = false;\n    for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n        $char = $paren_string[$i];\n        if ($char == '(') {\n \
    \           if ($nested_count == 0) {\n                $found_substring = true;\n\
    \            }\n            $nested_count++;\n        } elseif ($char == ')')\
    \ {\n            $nested_count--;\n            if ($nested_count == 0) {\n   \
    \             $found_substring = false;\n                $paren_group_strings[]\
    \ = $substring;\n                $substring = '';\n            }\n        }\n\
    \        if ($found_substring) {\n            $substring .= $char;\n        }\n\
    \    }\n    return $paren_group_strings;\n}\n\nfunction candidate(...$args) {\n\
    \    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqm_2abip.php:42\n\
    Stack trace:\n#0 /tmp/tmpqm_2abip.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpqm_2abip.php\
    \ on line 42\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n}\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcw3y7z2i.php:15\n\
    Stack trace:\n#0 /tmp/tmpcw3y7z2i.php(21): test()\n#1 {main}\n  thrown in /tmp/tmpcw3y7z2i.php\
    \ on line 15\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\t$length = strlen($paren_string);\n\t$open_close = array();\n\t$start =\
    \ -1;\n\t$result = array();\n\tfor ($i = 0; $i < $length; $i++){\n\t\tif ($paren_string[$i]\
    \ == \"(\"){\n\t\t\tif ($start == -1){\n\t\t\t\t$start = $i;\n\t\t\t}\n\t\t\t\
    array_push($open_close, $i);\n\t\t} else if ($paren_string[$i] == \")\"){\n\t\t\
    \tarray_pop($open_close);\n\t\t\tif (count($open_close) == 0){\n\t\t\t\tarray_push($result,\
    \ substr($paren_string, $start, $i - $start + 1));\n\t\t\t\t$start = -1;\n\t\t\
    \t}\n\t\t}\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((()))\
    \ (((())))\") !== array(\"()\", \"(())\", \"((()))\", \"(((())))\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(\"\
    (()(())((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ( ) (( )) (( )( ))\") !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9gmipn6w.php:38\n\
    Stack trace:\n#0 /tmp/tmp9gmipn6w.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp9gmipn6w.php\
    \ on line 38\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $total_paren_groups = 0;\n\n    // count the number of paren groups\n\
    \    for ($i = 0; $i < strlen($paren_string); $i++) {\n        if ($paren_string[$i]\
    \ == '(') {\n            $total_paren_groups++;\n        }\n    }\n\n    $paren_groups\
    \ = array();\n\n    $current_paren_group = \"\";\n    $open_paren_count = 0;\n\
    \    $closed_paren_count = 0;\n\n    for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n        $current_char = $paren_string[$i];\n\n        // skip spaces\n\
    \        if ($current_char == ' ') {\n            continue;\n        }\n\n   \
    \     // if we find a open paren, increase open count and add it to the current\
    \ paren group\n        if ($current_char == '(') {\n            $open_paren_count++;\n\
    \            $current_paren_group .= $current_char;\n        }\n\n        // if\
    \ we find a closed paren, increase closed count and add it to the current paren\
    \ group\n        if ($current_char == ')') {\n            $closed_paren_count++;\n\
    \            $current_paren_group .= $current_char;\n        }\n\n        // if\
    \ we have the same amount of open and closed parens, we found the end of the current\
    \ paren group\n        if ($open_paren_count == $closed_paren_count) {\n     \
    \       $paren_groups[] = $current_paren_group;\n            $current_paren_group\
    \ = \"\";\n            $open_paren_count = 0;\n            $closed_paren_count\
    \ = 0;\n        }\n    }\n\n    // if we didn't find the same amount of paren\
    \ groups as we counted, the string is not valid\n    if (count($paren_groups)\
    \ != $total_paren_groups) {\n        throw new Exception(\"Error: The provided\
    \ string is not valid\");\n    }\n\n    return $paren_groups;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Error: The provided string is not valid\
    \ in /tmp/tmpmbdso_ax.php:55\nStack trace:\n#0 /tmp/tmpmbdso_ax.php(62): separate_paren_groups('(()())\
    \ ((())) (...')\n#1 /tmp/tmpmbdso_ax.php(66): candidate('(()()) ((())) (...')\n\
    #2 /tmp/tmpmbdso_ax.php(72): test()\n#3 {main}\n  thrown in /tmp/tmpmbdso_ax.php\
    \ on line 55\n"
  timestamp: 1659979174
- exit_code: 0
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $paren_groups = [];\n    $current_group = \"\";\n    $paren_count = 0;\n\
    \    for ($i = 0; $i < strlen($paren_string); $i++) {\n        if ($paren_string[$i]\
    \ == \"(\" || $paren_string[$i] == \")\") {\n            $current_group .= $paren_string[$i];\n\
    \            if ($paren_string[$i] == \"(\") {\n                $paren_count++;\n\
    \            } else {\n                $paren_count--;\n            }\n      \
    \      if ($paren_count == 0) {\n                $paren_groups[] = $current_group;\n\
    \                $current_group = \"\";\n            }\n        }\n    }\n   \
    \ return $paren_groups;\n}\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\t// Your code here.\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6cbb0f4q.php:17\n\
    Stack trace:\n#0 /tmp/tmp6cbb0f4q.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp6cbb0f4q.php\
    \ on line 17\n"
  timestamp: 1659979174
- exit_code: 0
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $paren_groups = [];\n    $current_group = '';\n    $open_parens = 0;\n\
    \    for ($i = 0; $i < strlen($paren_string); $i++) {\n        $char = $paren_string[$i];\n\
    \        if ($char === '(') {\n            $open_parens++;\n            $current_group\
    \ .= $char;\n        } elseif ($char === ')') {\n            $open_parens--;\n\
    \            $current_group .= $char;\n            if ($open_parens === 0) {\n\
    \                $paren_groups[] = $current_group;\n                $current_group\
    \ = '';\n            }\n        }\n    }\n    return $paren_groups;\n}\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979174
- exit_code: 0
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_groups =\
    \ [];\n  $current_paren_group = '';\n  $paren_level = 0;\n  for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n    if ($paren_string[$i] === '(') {\n     \
    \ $paren_level++;\n      $current_paren_group .= '(';\n    } else if ($paren_string[$i]\
    \ === ')') {\n      $paren_level--;\n      $current_paren_group .= ')';\n    \
    \  if ($paren_level === 0) {\n        $paren_groups[] = $current_paren_group;\n\
    \        $current_paren_group = '';\n      }\n    }\n  }\n  return $paren_groups;\n\
    }\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\t// empty array to store results\n\t$result = array();\n\t// loop through\
    \ string\n\tfor ($i = 0; $i < strlen($paren_string); $i++) {\n\t\t// if opening\
    \ parenthesis\n\t\tif ($paren_string[$i] == '(') {\n\t\t\t// initialize temp string\n\
    \t\t\t$temp = '';\n\t\t\t// loop through string while opening parenthesis\n\t\t\
    \twhile ($paren_string[$i] == '(') {\n\t\t\t\t// add parenthesis to temp string\n\
    \t\t\t\t$temp .= $paren_string[$i];\n\t\t\t\t// increment counter\n\t\t\t\t$i++;\n\
    \t\t\t}\n\t\t\t// decrement counter\n\t\t\t$i--;\n\t\t\t// loop through string\
    \ while closing parenthesis\n\t\t\twhile ($paren_string[$i] == ')') {\n\t\t\t\t\
    // add parenthesis to temp string\n\t\t\t\t$temp .= $paren_string[$i];\n\t\t\t\
    \t// increment counter\n\t\t\t\t$i++;\n\t\t\t}\n\t\t\t// add temp string to result\
    \ array\n\t\t\t$result[] = $temp;\n\t\t}\n\t}\n\t// return result array\n\treturn\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ctocx73.php:46\n\
    Stack trace:\n#0 /tmp/tmp3ctocx73.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp3ctocx73.php\
    \ on line 46\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  $open = 0;\n  $closed = 0;\n  $result = array();\n  $string = str_replace(\"\
    \ \", \"\", $paren_string);\n  for ($i = 0; $i < strlen($string); $i++) {\n  \
    \  if ($string[$i] == \"(\") {\n      $open++;\n    } else {\n      $closed++;\n\
    \    }\n    if ($open == $closed) {\n      $open = 0;\n      $closed = 0;\n  \
    \    $result[] = substr($string, 0, $i + 1);\n      $string = substr($string,\
    \ $i + 1);\n      $i = 0;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwl5y8xm4.php:35\n\
    Stack trace:\n#0 /tmp/tmpwl5y8xm4.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpwl5y8xm4.php\
    \ on line 35\n"
  timestamp: 1659979174
- exit_code: 0
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $output = array();\n    $level = 0;\n    $stack = array();\n    for ($i\
    \ = 0; $i < strlen($paren_string); $i++) {\n        if ($paren_string[$i] == \"\
    (\") {\n            $level++;\n            if ($level == 1) {\n              \
    \  $str = \"\";\n            }\n            $str .= $paren_string[$i];\n     \
    \   } else if ($paren_string[$i] == \")\") {\n            $str .= $paren_string[$i];\n\
    \            $level--;\n            if ($level == 0) {\n                array_push($output,\
    \ $str);\n            }\n        }\n    }\n    return $output;\n}\n\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $arr1 = str_split($paren_string);\n    $arr2 = [];\n    $j = 0;\n   \
    \ for ($i = 0; $i < count($arr1); $i++) {\n        if ($arr1[$i] == \"(\") {\n\
    \            $arr2[$j] = $arr1[$i];\n            $i++;\n            while ($arr1[$i]\
    \ != \")\") {\n                $arr2[$j] .= $arr1[$i];\n                $i++;\n\
    \            }\n            $arr2[$j] .= $arr1[$i];\n            $j++;\n     \
    \   }\n    }\n    return $arr2;\n}\nfunction candidate(...$args) {\n    return\
    \ separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((()))\
    \ (((())))\") !== array(\"()\", \"(())\", \"((()))\", \"(((())))\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(\"\
    (()(())((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ( ) (( )) (( )( ))\") !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb4_7age7.php:31\n\
    Stack trace:\n#0 /tmp/tmpb4_7age7.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpb4_7age7.php\
    \ on line 31\n"
  timestamp: 1659979174
- exit_code: 0
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_array =\
    \ str_split($paren_string);\n  $groups = array();\n  $group = array();\n  $open_count\
    \ = 0;\n  $close_count = 0;\n  $i = 0;\n  while ($i < count($paren_array)) {\n\
    \    $char = $paren_array[$i];\n    if ($char == '(') {\n      $open_count++;\n\
    \      $group[] = $char;\n    } else if ($char == ')') {\n      $close_count++;\n\
    \      $group[] = $char;\n    }\n    if ($open_count == $close_count) {\n    \
    \  $groups[] = implode('', $group);\n      $group = array();\n      $open_count\
    \ = 0;\n      $close_count = 0;\n    }\n    $i++;\n  }\n  return $groups;\n}\n\
    \nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\t// TODO\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6fde5kwt.php:17\n\
    Stack trace:\n#0 /tmp/tmp6fde5kwt.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp6fde5kwt.php\
    \ on line 17\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  $array = str_split($paren_string);\n  $count = 0;\n  $arr = array();\n\
    \  $string = \"\";\n  foreach ($array as $value) {\n    if ($value == \"(\") {\n\
    \      $count++;\n      $string .= $value;\n    } elseif ($value == \")\") {\n\
    \      $count--;\n      $string .= $value;\n    }\n    if ($count == 0) {\n  \
    \    $arr[] = $string;\n      $string = \"\";\n    }\n  }\n  return $arr;\n}\n\
    function candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx57ds4um.php:33\n\
    Stack trace:\n#0 /tmp/tmpx57ds4um.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpx57ds4um.php\
    \ on line 33\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\t$count = 0;\n\t$position = 0;\n\t$answer = array();\n\tfor ($i = 0; $i\
    \ < strlen($paren_string); $i++) {\n\t\tif ($paren_string[$i] == \"(\") {\n\t\t\
    \t$count++;\n\t\t} else if ($paren_string[$i] == \")\") {\n\t\t\t$count--;\n\t\
    \t}\n\t\tif ($count == 0) {\n\t\t\t$answer[] = substr($paren_string, $position,\
    \ $i - $position + 1);\n\t\t\t$position = $i + 1;\n\t\t}\n\t}\n\treturn $answer;\n\
    }\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo2rpjh9_.php:30\n\
    Stack trace:\n#0 /tmp/tmpo2rpjh9_.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpo2rpjh9_.php\
    \ on line 30\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\t$output = array();\n\t$i = 0;\n\twhile($i < strlen($paren_string)) {\n\t\
    \t$temp = array();\n\t\twhile($paren_string[$i] != '(') {\n\t\t\t$i++;\n\t\t}\n\
    \t\tarray_push($temp, '(');\n\t\t$i++;\n\t\twhile(true) {\n\t\t\tif($paren_string[$i]\
    \ == '(') {\n\t\t\t\tarray_push($temp, '(');\n\t\t\t} else if($paren_string[$i]\
    \ == ')') {\n\t\t\t\tarray_pop($temp);\n\t\t\t}\n\t\t\t$i++;\n\t\t\tif(count($temp)\
    \ == 0) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tarray_push($output, implode($temp));\n\
    \t}\n\treturn $output;\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp488svoh3.php:39\n\
    Stack trace:\n#0 /tmp/tmp488svoh3.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp488svoh3.php\
    \ on line 39\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    // YOUR CODE HERE\n    // return an array\n    $arr = [];\n    $arr =\
    \ explode(')', $paren_string);\n    for ($i = 0; $i < count($arr); $i++) {\n \
    \       $arr[$i] = trim($arr[$i]);\n        $arr[$i] = substr($arr[$i], 1);\n\
    \    }\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptsmvq5b6.php:25\n\
    Stack trace:\n#0 /tmp/tmptsmvq5b6.php(31): test()\n#1 {main}\n  thrown in /tmp/tmptsmvq5b6.php\
    \ on line 25\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $result = array();\n    $s = \"\";\n    $parens = str_split($paren_string);\n\
    \    $open = 0;\n    $close = 0;\n    foreach ($parens as $paren) {\n        if\
    \ ($paren == '(') {\n            $open++;\n        } elseif ($paren == ')') {\n\
    \            $close++;\n        }\n        $s .= $paren;\n        if ($open ==\
    \ $close) {\n            $result[] = $s;\n            $s = \"\";\n           \
    \ $open = 0;\n            $close = 0;\n        }\n    }\n    return $result;\n\
    }\n\nvar_dump(separate_paren_groups(\"( ) (( )) (( )( ))\"));\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(5) {\n  [0]=>\n  string(3) \"( )\"\n  [1]=>\n  string(1) \" \"\n\
    \  [2]=>\n  string(5) \"(( ))\"\n  [3]=>\n  string(1) \" \"\n  [4]=>\n  string(8)\
    \ \"(( )( ))\"\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpexr88khn.php:37\n\
    Stack trace:\n#0 /tmp/tmpexr88khn.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpexr88khn.php\
    \ on line 37\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\t$r = array();\n\t$matches = array();\n\t$num_matches = preg_match_all('/[()]+/',\
    \ $paren_string, $matches);\n\tif ($num_matches == 0) {\n\t\treturn $r;\n\t}\n\
    \t$arr = $matches[0];\n\t$stack = array();\n\t$start = 0;\n\tfor ($i = 0; $i <\
    \ count($arr); $i++) {\n\t\t$ch = $arr[$i];\n\t\tif ($ch == '(') {\n\t\t\tarray_push($stack,\
    \ $ch);\n\t\t} else {\n\t\t\tarray_pop($stack);\n\t\t\tif (count($stack) == 0)\
    \ {\n\t\t\t\tarray_push($r, implode($arr, $start, $i - $start + 1));\n\t\t\t\t\
    $start = $i + 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ArgumentCountError: implode() expects at most 2\
    \ arguments, 3 given in /tmp/tmphf_vzxqn.php:25\nStack trace:\n#0 /tmp/tmphf_vzxqn.php(25):\
    \ implode(Array, 0, 1)\n#1 /tmp/tmphf_vzxqn.php(34): separate_paren_groups('(()())\
    \ ((())) (...')\n#2 /tmp/tmphf_vzxqn.php(38): candidate('(()()) ((())) (...')\n\
    #3 /tmp/tmphf_vzxqn.php(44): test()\n#4 {main}\n  thrown in /tmp/tmphf_vzxqn.php\
    \ on line 25\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $matches = array();\n    $reg = '#\\([^()]*\\)#';\n    preg_match_all($reg,\
    \ $paren_string, $matches);\n    return $matches[0];\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy3cu1vws.php:20\n\
    Stack trace:\n#0 /tmp/tmpy3cu1vws.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpy3cu1vws.php\
    \ on line 20\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\t// Output: array of strings\n\t$paren_groups = [];\n\n\t// Helper variables\n\
    \t$start_index = 0;\n\t$bracket_count = 0;\n\n\t// Iterate over the string.\n\t\
    // Keep track of the number of brackets that are open.\n\t// When we reach a close\
    \ bracket, we have a complete group.\n\t// Save the substring and reset our counters.\n\
    \tfor ($i = 0; $i < strlen($paren_string); $i++) {\n\t\t$char = $paren_string[$i];\n\
    \n\t\tif ($char == '(') {\n\t\t\t$bracket_count++;\n\t\t} else if ($char == ')')\
    \ {\n\t\t\t$bracket_count--;\n\t\t}\n\n\t\tif ($bracket_count == 0) {\n\t\t\t\
    $paren_groups[] = substr($paren_string, $start_index, $i - $start_index + 1);\n\
    \t\t\t$start_index = $i + 1;\n\t\t}\n\t}\n\n\treturn $paren_groups;\n}\n\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp46awvxba.php:43\n\
    Stack trace:\n#0 /tmp/tmp46awvxba.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp46awvxba.php\
    \ on line 43\n"
  timestamp: 1659979174
- exit_code: 0
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $results = array();\n\
    \  $open_count = 0;\n  $close_count = 0;\n  $paren_count = 0;\n  $temp_str = '';\n\
    \  for ($i = 0; $i < strlen($paren_string); $i++) {\n    $char = $paren_string[$i];\n\
    \    if ($char == '(') {\n      $open_count++;\n      $paren_count++;\n    } else\
    \ {\n      $close_count++;\n      $paren_count--;\n    }\n    $temp_str .= $char;\n\
    \    if ($paren_count == 0) {\n      $results[] = $temp_str;\n      $temp_str\
    \ = '';\n    }\n  }\n  return $results;\n}\n\nfunction candidate(...$args) {\n\
    \    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_string =\
    \ str_replace(array('(', ')'), array('_', '_'), $paren_string);\n  $paren_string\
    \ = explode('_', $paren_string);\n  $paren_string = array_filter($paren_string);\n\
    \  foreach ($paren_string as $p) {\n    $out[] = str_replace('__', '(', $p) .\
    \ ')';\n  }\n  return $out;\n}\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $out in /tmp/tmpvalfyyw8.php on line 16\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvalfyyw8.php:23\nStack\
    \ trace:\n#0 /tmp/tmpvalfyyw8.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpvalfyyw8.php\
    \ on line 23\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  $result = array();\n  // your implementation here\n  return $result;\n\
    }\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4n0wbvtv.php:18\n\
    Stack trace:\n#0 /tmp/tmp4n0wbvtv.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp4n0wbvtv.php\
    \ on line 18\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $parentheses = '()';\n    $paren_string = str_replace(' ', '', $paren_string);\n\
    \    $paren_length = strlen($paren_string);\n    $paren_depth = 0;\n    $paren_groups\
    \ = array();\n    $current_paren_group = '';\n    for ($i = 0; $i < $paren_length;\
    \ $i++) {\n        if (is_opening_paren($paren_string[$i])) {\n            $paren_depth++;\n\
    \        } else {\n            $paren_depth--;\n        }\n        $current_paren_group\
    \ .= $paren_string[$i];\n        if ($paren_depth == 0) {\n            $paren_groups[]\
    \ = $current_paren_group;\n            $current_paren_group = '';\n        }\n\
    \    }\n    return $paren_groups;\n}\n\nfunction candidate(...$args) {\n    return\
    \ separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((()))\
    \ (((())))\") !== array(\"()\", \"(())\", \"((()))\", \"(((())))\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(\"\
    (()(())((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ( ) (( )) (( )( ))\") !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_opening_paren()\
    \ in /tmp/tmp_59jpz6_.php:16\nStack trace:\n#0 /tmp/tmp_59jpz6_.php(31): separate_paren_groups('(()())((()))()(...')\n\
    #1 /tmp/tmp_59jpz6_.php(35): candidate('(()()) ((())) (...')\n#2 /tmp/tmp_59jpz6_.php(41):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp_59jpz6_.php on line 16\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    // TODO: Write me!\n    return [];\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprbogxs0l.php:18\n\
    Stack trace:\n#0 /tmp/tmprbogxs0l.php(24): test()\n#1 {main}\n  thrown in /tmp/tmprbogxs0l.php\
    \ on line 18\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  $paren_groups = [];\n  $braces_found = 0;\n  $current_group = \"\";\n \
    \ for ($i = 0; $i < strlen($paren_string); $i++) {\n    if ($paren_string[$i]\
    \ === \"(\") {\n      $braces_found++;\n      $current_group .= \"(\";\n    }\
    \ else if ($paren_string[$i] === \")\") {\n      $braces_found--;\n      $current_group\
    \ .= \")\";\n    }\n    if ($braces_found === 0) {\n      array_push($paren_groups,\
    \ $current_group);\n      $current_group = \"\";\n    }\n  }\n  return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoi846p16.php:33\n\
    Stack trace:\n#0 /tmp/tmpoi846p16.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpoi846p16.php\
    \ on line 33\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n\n  $group_start\
    \ = 0;\n  $group_end = 0;\n  $next_group_start = 0;\n  $out = array();\n\n  while($group_start\
    \ !== false) {\n    $group_start = strpos($paren_string, '(', $next_group_start);\n\
    \    $group_end = strpos($paren_string, ')', $group_start);\n    $next_group_start\
    \ = $group_end + 1;\n    $out[] = substr($paren_string, $group_start, $group_end\
    \ - $group_start + 1);\n  }\n\n  return $out;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwmz8u08h.php:31\n\
    Stack trace:\n#0 /tmp/tmpwmz8u08h.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpwmz8u08h.php\
    \ on line 31\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    // TODO\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd_geoo9y.php:17\n\
    Stack trace:\n#0 /tmp/tmpd_geoo9y.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpd_geoo9y.php\
    \ on line 17\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    // Your code here\n    return $paren_string;\n}\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp16qzk_k1.php:17\n\
    Stack trace:\n#0 /tmp/tmp16qzk_k1.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp16qzk_k1.php\
    \ on line 17\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $paren_arr\
    \ = str_split($paren_string);\n    $res = array();\n    $start = 0;\n    $end\
    \ = 0;\n    while ($end <= count($paren_arr)) {\n        if ($paren_arr[$end]\
    \ == \"(\") {\n            $open++;\n        } else if ($paren_arr[$end] == \"\
    )\") {\n            $close++;\n        }\n        if ($open == $close) {\n   \
    \         $res[] = implode(array_slice($paren_arr, $start, $end - $start + 1));\n\
    \            $start = $end + 1;\n            $open = 0;\n            $close =\
    \ 0;\n        }\n        $end++;\n    }\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $open in /tmp/tmpvxx6zbhv.php on line 16\n\
    \nWarning: Undefined variable $close in /tmp/tmpvxx6zbhv.php on line 20\n\nWarning:\
    \ Undefined variable $close in /tmp/tmpvxx6zbhv.php on line 20\n\nWarning: Undefined\
    \ variable $close in /tmp/tmpvxx6zbhv.php on line 18\n\nWarning: Undefined array\
    \ key 24 in /tmp/tmpvxx6zbhv.php on line 15\n\nWarning: Undefined array key 24\
    \ in /tmp/tmpvxx6zbhv.php on line 17\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpvxx6zbhv.php:36\nStack trace:\n#0 /tmp/tmpvxx6zbhv.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpvxx6zbhv.php on line 36\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  $output = array();\n  $last_paren_pos = -1;\n  $curr_paren_count = 0;\n\
    \  $last_char = \"\";\n  $paren_string = trim($paren_string);\n  for ($i = 0;\
    \ $i < strlen($paren_string); $i++) {\n    if ($paren_string[$i] == \"(\" || $paren_string[$i]\
    \ == \")\") {\n      if ($paren_string[$i] == \"(\") {\n        $curr_paren_count++;\n\
    \      } else {\n        $curr_paren_count--;\n      }\n      if ($curr_paren_count\
    \ == 0) {\n        $output[] = substr($paren_string, $last_paren_pos, $i - $last_paren_pos\
    \ + 1);\n        $last_paren_pos = $i + 1;\n      }\n    }\n  }\n  return $output;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp59bxt09n.php:35\n\
    Stack trace:\n#0 /tmp/tmp59bxt09n.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp59bxt09n.php\
    \ on line 35\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\t$paren_string = preg_replace('/\\s+/', '', $paren_string);\n\t//$paren_string\
    \ = preg_replace('/\\s/', '', $paren_string);\n\tif (preg_match_all('/\\([^()]*\\\
    )/', $paren_string, $matches)) {\n\t\t$matches = $matches[0];\n\t\t//$matches\
    \ = preg_replace('/\\s/', '', $matches);\n\t\tforeach ($matches as $match) {\n\
    \t\t\tif (preg_match('/\\(/', $match)) {\n\t\t\t\t$arr = [];\n\t\t\t\t$arr[] =\
    \ $match;\n\t\t\t}\n\t\t}\n\t\treturn $arr;\n\t}\n}\nprint_r(separate_paren_groups(\"\
    ( ) (( )) (( )( ))\"));\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => ()\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpslk5xp5s.php:29\nStack trace:\n#0 /tmp/tmpslk5xp5s.php(35): test()\n\
    #1 {main}\n  thrown in /tmp/tmpslk5xp5s.php on line 29\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $arr = str_split($paren_string);\n    $open_i = [];\n    $closed_i =\
    \ [];\n    $result = [];\n    foreach ($arr as $i => $char) {\n        if ($char\
    \ == '(') {\n            $open_i[] = $i;\n        } elseif ($char == ')') {\n\
    \            $closed_i[] = $i;\n        }\n    }\n    foreach ($open_i as $key\
    \ => $open) {\n        $result[] = join(\"\", array_slice($arr, $open, $closed_i[$key]\
    \ - $open + 1));\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4zyr488w.php:31\n\
    Stack trace:\n#0 /tmp/tmp4zyr488w.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp4zyr488w.php\
    \ on line 31\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n\n  $paren_groups\
    \ = array();\n  $open_indices = array();\n  $nest_level = 0;\n  for ($i = 0; $i\
    \ < strlen($paren_string); $i++) {\n    $char = $paren_string[$i];\n    switch\
    \ ($char) {\n      case '(':\n        $nest_level++;\n        $open_indices[$nest_level]\
    \ = $i;\n        break;\n      case ')':\n        $close_index = $i;\n       \
    \ $open_index = $open_indices[$nest_level];\n        $paren_groups[] = substr($paren_string,\
    \ $open_index, $close_index - $open_index + 1);\n        $nest_level--;\n    \
    \    break;\n    }\n  }\n\n  return $paren_groups;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1e2bwzsc.php:38\n\
    Stack trace:\n#0 /tmp/tmp1e2bwzsc.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp1e2bwzsc.php\
    \ on line 38\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  $paren_array = explode(\" \", $paren_string);\n  $new_paren_array = array();\n\
    \  foreach ($paren_array as $paren) {\n    $count = 0;\n    $index = 0;\n    foreach\
    \ (str_split($paren) as $char) {\n      if ($char == \"(\") {\n        $count\
    \ += 1;\n      } else if ($char == \")\") {\n        $count -= 1;\n      }\n \
    \     if ($count == 0) {\n        $new_paren_array[] = substr($paren, 0, $index\
    \ + 1);\n        $paren = substr($paren, $index + 1);\n        $index = 0;\n \
    \     } else {\n        $index += 1;\n      }\n    }\n  }\n  return $new_paren_array;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_3pdovng.php:40\n\
    Stack trace:\n#0 /tmp/tmp_3pdovng.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp_3pdovng.php\
    \ on line 40\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\t$groups = [];\n\t$s_paren = 0;\n\t$e_paren = 0;\n\t$arr = str_split($paren_string);\n\
    \t\n\tfor ($i = 0; $i < count($arr); $i++) {\n\t\tif ($arr[$i] == \"(\") {\n\t\
    \t\t$s_paren = $i;\n\t\t}\n\t\tif ($arr[$i] == \")\") {\n\t\t\t$e_paren = $i;\n\
    \t\t}\n\t\t\n\t\tif ($s_paren < $e_paren) {\n\t\t\t$group = array_slice($arr,\
    \ $s_paren, $e_paren - $s_paren + 1);\n\t\t\t$groups[] = implode(\"\", $group);\n\
    \t\t\t$s_paren = 0;\n\t\t\t$e_paren = 0;\n\t\t}\n\t}\n\t\n\treturn $groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx0vt1o8_.php:38\n\
    Stack trace:\n#0 /tmp/tmpx0vt1o8_.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpx0vt1o8_.php\
    \ on line 38\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $paren_list = [];\n    $starts = [];\n    $char_arr = str_split($paren_string);\n\
    \    $paren_string = '';\n    foreach ($char_arr as $index => $char) {\n     \
    \   if ($char === '(') {\n            $starts[] = $index;\n        } elseif ($char\
    \ === ')') {\n            $paren_list[] = substr($paren_string, $starts[count($starts)\
    \ - 1], $index - $starts[count($starts) - 1] + 1);\n            array_pop($starts);\n\
    \        } else {\n            $paren_string .= $char;\n        }\n    }\n   \
    \ return $paren_list;\n}\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbf_gg3kt.php:30\n\
    Stack trace:\n#0 /tmp/tmpbf_gg3kt.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpbf_gg3kt.php\
    \ on line 30\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\t$open  = '(';\n\t$close = ')';\n\t$level = 0;\n\t$stack = array();\n\t\
    $result = array();\n\tfor ($i = 0; $i < strlen($paren_string); $i++) {\n\t\t$char\
    \ = $paren_string[$i];\n\t\tif ($char === $open) {\n\t\t\t$level++;\n\t\t\tif\
    \ ($level === 1) {\n\t\t\t\t$stack = array();\n\t\t\t}\n\t\t} else if ($char ===\
    \ $close) {\n\t\t\t$level--;\n\t\t\tif ($level === 0) {\n\t\t\t\t$result[] = $open\
    \ . implode('', $stack) . $close;\n\t\t\t}\n\t\t} else if ($level > 0) {\n\t\t\
    \t$stack[] = $char;\n\t\t}\n\t}\n\treturn $result;\n}\n$group_strings = \"( )\
    \ (( )) (( )( ))\";\n$result = separate_paren_groups($group_strings);\nprint_r($result);\n\
    echo \"<br>\";\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => ( )\n    [1] => ( )\n    [2] => (  )\n)\n<br>\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmptpttun5m.php:42\nStack trace:\n\
    #0 /tmp/tmptpttun5m.php(48): test()\n#1 {main}\n  thrown in /tmp/tmptpttun5m.php\
    \ on line 42\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\treturn [];\n}\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphhjd60op.php:16\n\
    Stack trace:\n#0 /tmp/tmphhjd60op.php(22): test()\n#1 {main}\n  thrown in /tmp/tmphhjd60op.php\
    \ on line 16\n"
  timestamp: 1659979174
- exit_code: 0
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $balance = 0;\n    $results = array();\n    $cur_str = \"\";\n    foreach\
    \ (str_split($paren_string) as $char) {\n        if ($char == \" \") {\n     \
    \       continue;\n        }\n        if ($char == \"(\") {\n            $balance++;\n\
    \        } else if ($char == \")\") {\n            $balance--;\n        }\n  \
    \      $cur_str .= $char;\n        if ($balance == 0) {\n            $results[]\
    \ = $cur_str;\n            $cur_str = \"\";\n        }\n    }\n    return $results;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\t$group_stack = array();\n\t$end_index = -1;\n\tfor ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n\t\tif ($paren_string[$i] == '(') {\n\t\t\tarray_push($group_stack,\
    \ $i);\n\t\t} else if ($paren_string[$i] == ')') {\n\t\t\t$end_index = $i;\n\t\
    \t\tarray_pop($group_stack);\n\t\t\tif (count($group_stack) == 0) {\n\t\t\t\t\
    $paren_groups[] = substr($paren_string, $start_index, $end_index - $start_index\
    \ + 1);\n\t\t\t}\n\t\t}\n\t}\n\treturn $paren_groups;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $start_index in /tmp/tmpk4lsfihv.php on line\
    \ 18\n\nWarning: Undefined variable $start_index in /tmp/tmpk4lsfihv.php on line\
    \ 18\n\nDeprecated: substr(): Passing null to parameter #2 ($offset) of type int\
    \ is deprecated in /tmp/tmpk4lsfihv.php on line 18\n\nWarning: Undefined variable\
    \ $start_index in /tmp/tmpk4lsfihv.php on line 18\n\nWarning: Undefined variable\
    \ $start_index in /tmp/tmpk4lsfihv.php on line 18\n\nDeprecated: substr(): Passing\
    \ null to parameter #2 ($offset) of type int is deprecated in /tmp/tmpk4lsfihv.php\
    \ on line 18\n\nWarning: Undefined variable $start_index in /tmp/tmpk4lsfihv.php\
    \ on line 18\n\nWarning: Undefined variable $start_index in /tmp/tmpk4lsfihv.php\
    \ on line 18\n\nDeprecated: substr(): Passing null to parameter #2 ($offset) of\
    \ type int is deprecated in /tmp/tmpk4lsfihv.php on line 18\n\nWarning: Undefined\
    \ variable $start_index in /tmp/tmpk4lsfihv.php on line 18\n\nWarning: Undefined\
    \ variable $start_index in /tmp/tmpk4lsfihv.php on line 18\n\nDeprecated: substr():\
    \ Passing null to parameter #2 ($offset) of type int is deprecated in /tmp/tmpk4lsfihv.php\
    \ on line 18\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk4lsfihv.php:30\n\
    Stack trace:\n#0 /tmp/tmpk4lsfihv.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpk4lsfihv.php\
    \ on line 30\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $matches = [];\n    $result = [];\n    $pattern = \"/(\\(([^()]*)\\))/\"\
    ;\n    preg_match_all($pattern, $paren_string, $matches);\n    foreach ($matches[0]\
    \ as $i => $match) {\n        $paren_string = str_replace($match, '', $paren_string);\n\
    \        $result[] = $match;\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfd3uge9o.php:24\n\
    Stack trace:\n#0 /tmp/tmpfd3uge9o.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpfd3uge9o.php\
    \ on line 24\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\n}\n\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprn5d17zl.php:18\n\
    Stack trace:\n#0 /tmp/tmprn5d17zl.php(24): test()\n#1 {main}\n  thrown in /tmp/tmprn5d17zl.php\
    \ on line 18\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $result = array();\n    $l = strlen($paren_string);\n    $last_group_start\
    \ = 0;\n    $i = 0;\n    $paren_depth = 0;\n    while ($i < $l) {\n        $char\
    \ = $paren_string[$i];\n        if ($char === '(') {\n            $paren_depth++;\n\
    \        } else if ($char === ')') {\n            $paren_depth--;\n          \
    \  if ($paren_depth === 0) {\n                $group = substr($paren_string, $last_group_start,\
    \ $i - $last_group_start + 1);\n                $result[] = $group;\n        \
    \        $last_group_start = $i + 1;\n            }\n        }\n        $i++;\n\
    \    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwtfc53n2.php:35\n\
    Stack trace:\n#0 /tmp/tmpwtfc53n2.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpwtfc53n2.php\
    \ on line 35\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\t$output = array();\n\t$paren_string = str_replace(\" \", \"\", $paren_string);\n\
    \t$paren_string = str_replace(\"(\", \")(\", $paren_string);\n\t$paren_string\
    \ = str_replace(\")\", \")(\", $paren_string);\n\t$paren_string = substr($paren_string,\
    \ 1, -1);\n\t$paren_array = explode(\")(\", $paren_string);\n\t$paren_array_size\
    \ = count($paren_array);\n\tfor ($i = 0; $i < $paren_array_size; $i++) {\n\t\t\
    $temp_string = \"\";\n\t\t$temp_paren_array = explode(\"()\", $paren_array[$i]);\n\
    \t\t$temp_paren_array_size = count($temp_paren_array);\n\t\tfor ($j = 0; $j <\
    \ $temp_paren_array_size; $j++) {\n\t\t\t$temp_string .= \"(\" . $temp_paren_array[$j]\
    \ . \")\";\n\t\t}\n\t\tarray_push($output, $temp_string);\n\t}\n\treturn $output;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwyo32k4x.php:33\n\
    Stack trace:\n#0 /tmp/tmpwyo32k4x.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpwyo32k4x.php\
    \ on line 33\n"
  timestamp: 1659979174
- exit_code: 0
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  $paren_string = preg_replace('/ /', '', $paren_string);\n  $paren_groups\
    \ = array();\n  $group = \"\";\n  $level = 0;\n  for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n    if ($paren_string[$i] == \"(\") {\n      $level++;\n      $group\
    \ .= \"(\";\n    } else if ($paren_string[$i] == \")\") {\n      $level--;\n \
    \     $group .= \")\";\n      if ($level == 0) {\n        array_push($paren_groups,\
    \ $group);\n        $group = \"\";\n      }\n    }\n  }\n  return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeeazsd23.php:16\n\
    Stack trace:\n#0 /tmp/tmpeeazsd23.php(22): test()\n#1 {main}\n  thrown in /tmp/tmpeeazsd23.php\
    \ on line 16\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\t$array = array();\n\t$temp_string = \"\";\n\t$count = 0;\n\tfor ($i = 0;\
    \ $i < strlen($paren_string); $i++) {\n\t\tif ($paren_string[$i] == \"(\") {\n\
    \t\t\t$count++;\n\t\t}\n\t\telse if ($paren_string[$i] == \")\") {\n\t\t\t$count--;\n\
    \t\t}\n\t\t$temp_string .= $paren_string[$i];\n\t\tif ($count == 0) {\n\t\t\t\
    array_push($array, $temp_string);\n\t\t\t$temp_string = \"\";\n\t\t}\n\t}\n\t\
    return $array;\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcsi0qpik.php:33\n\
    Stack trace:\n#0 /tmp/tmpcsi0qpik.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpcsi0qpik.php\
    \ on line 33\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $output = array();\n    $i = 0;\n    $prev = '';\n    $current = '';\n\
    \    $closed = false;\n    while($i < strlen($paren_string)) {\n        $current\
    \ = $paren_string[$i];\n        if($current == ' ') {\n            $i++;\n   \
    \         continue;\n        }\n        if($current == '(') {\n            if($prev\
    \ == '(') {\n                $output[] = '';\n            }\n            $output[count($output)\
    \ - 1] .= $current;\n        } else {\n            $output[count($output) - 1]\
    \ .= $current;\n            if($output[count($output) - 1][0] == '(' && $output[count($output)\
    \ - 1][strlen($output[count($output) - 1]) - 1] == ')') {\n                $closed\
    \ = true;\n            }\n        }\n        $prev = $current;\n        $i++;\n\
    \    }\n    return $output;\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Warning: Undefined array key -1 in /tmp/tmpocwg1cx4.php on line 24


    Warning: Undefined array key 1 in /tmp/tmpocwg1cx4.php on line 24


    Warning: Undefined array key 2 in /tmp/tmpocwg1cx4.php on line 26


    Warning: Undefined array key 3 in /tmp/tmpocwg1cx4.php on line 27


    Warning: Trying to access array offset on value of type null in /tmp/tmpocwg1cx4.php
    on line 27


    Warning: Undefined array key 3 in /tmp/tmpocwg1cx4.php on line 24


    Warning: Undefined array key 4 in /tmp/tmpocwg1cx4.php on line 26


    Warning: Undefined array key 5 in /tmp/tmpocwg1cx4.php on line 27


    Warning: Trying to access array offset on value of type null in /tmp/tmpocwg1cx4.php
    on line 27


    Warning: Undefined array key 5 in /tmp/tmpocwg1cx4.php on line 26


    Warning: Undefined array key 6 in /tmp/tmpocwg1cx4.php on line 27


    Warning: Trying to access array offset on value of type null in /tmp/tmpocwg1cx4.php
    on line 27


    Warning: Undefined array key 6 in /tmp/tmpocwg1cx4.php on line 24


    Warning: Undefined array key 8 in /tmp/tmpocwg1cx4.php on line 24


    Warning: Undefined array key 10 in /tmp/tmpocwg1cx4.php on line 24


    Warning: Undefined array key 11 in /tmp/tmpocwg1cx4.php on line 26


    Warning: Undefined array key 12 in /tmp/tmpocwg1cx4.php on line 27


    Warning: Trying to access array offset on value of type null in /tmp/tmpocwg1cx4.php
    on line 27


    Warning: Undefined array key 12 in /tmp/tmpocwg1cx4.php on line 26


    Warning: Undefined array key 13 in /tmp/tmpocwg1cx4.php on line 27


    Warning: Trying to access array offset on value of type null in /tmp/tmpocwg1cx4.php
    on line 27


    Warning: Undefined array key 13 in /tmp/tmpocwg1cx4.php on line 26


    Warning: Undefined array key 14 in /tmp/tmpocwg1cx4.php on line 27


    Warning: Trying to access array offset on value of type null in /tmp/tmpocwg1cx4.php
    on line 27


    Warning: Undefined array key 14 in /tmp/tmpocwg1cx4.php on line 24


    Warning: Undefined array key 15 in /tmp/tmpocwg1cx4.php on line 26


    Warning: Undefined array key 16 in /tmp/tmpocwg1cx4.php on line 27


    Warning: Trying to access array offset on value'
  timestamp: 1659979174
- exit_code: 0
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $output = array();\n    $current_paren_group = \"\";\n    $paren_counter\
    \ = 0;\n    for ($i = 0; $i < strlen($paren_string); $i++) {\n        $current_character\
    \ = $paren_string[$i];\n        if ($current_character == \"(\" && $paren_counter\
    \ == 0) {\n            $paren_counter += 1;\n            $current_paren_group\
    \ .= $current_character;\n        } elseif ($current_character == \"(\" && $paren_counter\
    \ > 0) {\n            $paren_counter += 1;\n            $current_paren_group .=\
    \ $current_character;\n        } elseif ($current_character == \")\" && $paren_counter\
    \ == 1) {\n            $paren_counter -= 1;\n            $current_paren_group\
    \ .= $current_character;\n            array_push($output, $current_paren_group);\n\
    \            $current_paren_group = \"\";\n        } elseif ($current_character\
    \ == \")\" && $paren_counter > 1) {\n            $paren_counter -= 1;\n      \
    \      $current_paren_group .= $current_character;\n        }\n    }\n    return\
    \ $output;\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  $results = array();\n  $open_parens = 0;\n  $paren_string = str_replace(\"\
    \ \", \"\", $paren_string);\n  for ($i = 0; $i < strlen($paren_string); $i++)\
    \ {\n    if ($paren_string[$i] == \"(\") {\n      $open_parens++;\n    } else\
    \ {\n      $open_parens--;\n    }\n    if ($open_parens == 0) {\n      $results[]\
    \ = substr($paren_string, 0, $i + 1);\n      $paren_string = substr($paren_string,\
    \ $i + 1);\n      $i = 0;\n    }\n  }\n  return $results;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp50t9dvqn.php:32\n\
    Stack trace:\n#0 /tmp/tmp50t9dvqn.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp50t9dvqn.php\
    \ on line 32\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n    $result\
    \ = array();\n    while(strlen($paren_string) > 0) {\n        $open = strpos($paren_string,\
    \ \"(\");\n        $close = strpos($paren_string, \")\");\n        if($open ===\
    \ false) {\n            array_push($result, substr($paren_string, 0, $close));\n\
    \            $paren_string = substr($paren_string, $close + 1);\n        } else\
    \ if($close === false) {\n            array_push($result, substr($paren_string,\
    \ $open));\n            $paren_string = substr($paren_string, 0, $open);\n   \
    \     } else if($open < $close) {\n            array_push($result, substr($paren_string,\
    \ $open, $close - $open + 1));\n            $paren_string = substr($paren_string,\
    \ 0, $open) . substr($paren_string, $close + 1);\n        } else {\n         \
    \   array_push($result, substr($paren_string, 0, $close));\n            $paren_string\
    \ = substr($paren_string, $close + 1);\n        }\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk6czw0zc.php:35\n\
    Stack trace:\n#0 /tmp/tmpk6czw0zc.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpk6czw0zc.php\
    \ on line 35\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  $paren_groups = [];\n  $group = \"\";\n  $open_count = 0;\n  $close_count\
    \ = 0;\n  for ($i = 0; $i < strlen($paren_string); $i++) {\n    $char = $paren_string[$i];\n\
    \    if ($char == \"(\" && $open_count == $close_count) {\n      $open_count++;\n\
    \      $group .= $char;\n    } else if ($char == \"(\" && $open_count > $close_count)\
    \ {\n      $open_count++;\n      $group .= $char;\n    } else if ($char == \"\
    )\" && $open_count == $close_count + 1) {\n      $close_count++;\n      $group\
    \ .= $char;\n    } else if ($char == \")\" && $open_count > $close_count + 1)\
    \ {\n      $close_count++;\n      $group .= $char;\n    } else if ($char == \"\
    \ \") {\n      continue;\n    } else if ($open_count == $close_count) {\n    \
    \  array_push($paren_groups, $group);\n      $group = \"\";\n      $open_count\
    \ = 0;\n      $close_count = 0;\n    }\n  }\n  return $paren_groups;\n}\n\n$test_input\
    \ = \"( ) (( )) (( )( ))\";\n$test_output = separate_paren_groups($test_input);\n\
    print_r($test_output);\necho $test_output[0] . \",\" . $test_output[1] . \",\"\
    \ . $test_output[2];\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\n\nWarning: Undefined array key 0 in /tmp/tmpcyp_231n.php on\
    \ line 42\n\nWarning: Undefined array key 1 in /tmp/tmpcyp_231n.php on line 42\n\
    \nWarning: Undefined array key 2 in /tmp/tmpcyp_231n.php on line 42\n,,\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpcyp_231n.php:48\nStack trace:\n\
    #0 /tmp/tmpcyp_231n.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpcyp_231n.php\
    \ on line 48\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $cur_paren_string = \"\";\n    $paren_string_arr = str_split($paren_string);\n\
    \    $paren_group_arr = array();\n    $cur_paren_count = 0;\n    foreach ($paren_string_arr\
    \ as $cur_paren) {\n        if ($cur_paren === \"(\") {\n            $cur_paren_count\
    \ += 1;\n        } else if ($cur_paren === \")\") {\n            $cur_paren_count\
    \ -= 1;\n        }\n        $cur_paren_string .= $cur_paren;\n        if ($cur_paren_count\
    \ === 0) {\n            array_push($paren_group_arr, $cur_paren_string);\n   \
    \         $cur_paren_string = \"\";\n        }\n    }\n    return $paren_group_arr;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp15eghxbn.php:33\n\
    Stack trace:\n#0 /tmp/tmp15eghxbn.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp15eghxbn.php\
    \ on line 33\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  $arr = str_split($paren_string);\n  $cur_str = '';\n  $result = [];\n \
    \ $push_flag = false;\n  $open_flag = false;\n  foreach ($arr as $c) {\n    if\
    \ ($c === '(') {\n      $cur_str .= $c;\n      $open_flag = true;\n    } else\
    \ if ($c === ')') {\n      $cur_str .= $c;\n      $push_flag = true;\n    } else\
    \ if ($c === ' ') {\n      continue;\n    }\n    if ($push_flag) {\n      array_push($result,\
    \ $cur_str);\n      $cur_str = '';\n      $push_flag = false;\n      $open_flag\
    \ = false;\n    }\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n\
    \    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpymbenpjq.php:38\n\
    Stack trace:\n#0 /tmp/tmpymbenpjq.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpymbenpjq.php\
    \ on line 38\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $arr = str_split($paren_string);\n    $result = array();\n    $stack\
    \ = array();\n    $pop_count = 0;\n    $start_index = 0;\n    $length = 0;\n \
    \   foreach ($arr as $key => $value) {\n        if ($value == '(') {\n       \
    \     $stack[] = $value;\n        } else if ($value == ')') {\n            $temp\
    \ = array_pop($stack);\n            $pop_count++;\n            if ($pop_count\
    \ == 2) {\n                array_push($result, substr($paren_string, $start_index,\
    \ $length));\n                $pop_count = 0;\n                $start_index =\
    \ $key + 1;\n                $length = 0;\n            }\n        }\n        $length++;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3bw0g3_i.php:38\n\
    Stack trace:\n#0 /tmp/tmp3bw0g3_i.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp3bw0g3_i.php\
    \ on line 38\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  $paren_string = preg_replace('/\\s/', '', $paren_string);\n  if (preg_match('/[^()]/',\
    \ $paren_string))\n    return false;\n  $paren_string = preg_replace('/\\(\\)/',\
    \ ',', $paren_string);\n  $paren_string = preg_replace('/\\)\\(/', '),(', $paren_string);\n\
    \  $paren_string = preg_replace('/\\(,/', '(', $paren_string);\n  $paren_string\
    \ = preg_replace('/,\\)/', ')', $paren_string);\n  return explode(',', $paren_string);\n\
    }\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpobh9gx58.php:23\n\
    Stack trace:\n#0 /tmp/tmpobh9gx58.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpobh9gx58.php\
    \ on line 23\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\t// return array('()', '(())', '(()())');\n\t// Your code here\n\n\t$open_paren_pos\
    \ = strpos($paren_string, '(');\n\t$close_paren_pos = strpos($paren_string, ')');\n\
    \n\tif ($open_paren_pos == 0 && $close_paren_pos == 1) {\n\t\t$paren_string =\
    \ str_replace('()', '', $paren_string);\n\t\treturn separate_paren_groups($paren_string);\n\
    \t}\n\n\t$i = 0;\n\t$open_count = 0;\n\t$close_count = 0;\n\t$start_pos = -1;\n\
    \t$end_pos = -1;\n\twhile ($i < strlen($paren_string)) {\n\t\tif ($paren_string[$i]\
    \ == '(') {\n\t\t\t$open_count++;\n\t\t\tif ($start_pos == -1) {\n\t\t\t\t$start_pos\
    \ = $i;\n\t\t\t}\n\t\t}\n\t\tif ($paren_string[$i] == ')') {\n\t\t\t$close_count++;\n\
    \t\t\tif ($open_count == $close_count) {\n\t\t\t\t$end_pos = $i;\n\t\t\t\tbreak;\n\
    \t\t\t}\n\t\t}\n\t\t$i++;\n\t}\n\n\t$array = array();\n\tif ($start_pos == -1)\
    \ {\n\t\treturn $array;\n\t}\n\t$paren_string = str_replace(substr($paren_string,\
    \ $start_pos, $end_pos - $start_pos + 1), '', $paren_string);\n\t$array[] = substr($paren_string,\
    \ $start_pos, $end_pos - $start_pos + 1);\n\treturn array_merge($array, separate_paren_groups($paren_string));\n\
    }\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3gq21jc6.php:55\n\
    Stack trace:\n#0 /tmp/tmp3gq21jc6.php(61): test()\n#1 {main}\n  thrown in /tmp/tmp3gq21jc6.php\
    \ on line 55\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\t$paren_string = str_replace(\" \", \"\", $paren_string);\n\t$paren_string\
    \ = str_replace(\"()\", \" \", $paren_string);\n\t$paren_string = str_replace(\"\
    (())\", \"  \", $paren_string);\n\t$paren_string = str_replace(\"(()())\", \"\
    \   \", $paren_string);\n\t$paren_string = str_replace(\"()\", \"\", $paren_string);\n\
    \t$paren_string = str_replace(\"(())\", \"\", $paren_string);\n\t$paren_string\
    \ = str_replace(\"(()())\", \"\", $paren_string);\n\t$paren_string = str_replace(\"\
    \   \", \"(()())\", $paren_string);\n\t$paren_string = str_replace(\"  \", \"\
    (())\", $paren_string);\n\t$paren_string = str_replace(\" \", \"()\", $paren_string);\n\
    \t$array = explode(\" \", $paren_string);\n\treturn $array;\n}\n\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpag_7qqhx.php:29\n\
    Stack trace:\n#0 /tmp/tmpag_7qqhx.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpag_7qqhx.php\
    \ on line 29\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    return array();\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplakf5k3a.php:17\n\
    Stack trace:\n#0 /tmp/tmplakf5k3a.php(23): test()\n#1 {main}\n  thrown in /tmp/tmplakf5k3a.php\
    \ on line 17\n"
  timestamp: 1659979174
- exit_code: 0
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  $paren_string = str_replace(' ', '', $paren_string);\n  $paren_array =\
    \ str_split($paren_string);\n  $result = array();\n  $count = 0;\n  $start = 0;\n\
    \  $end = 0;\n  foreach ($paren_array as $k => $paren) {\n    if ($paren == '(')\
    \ {\n      $count++;\n      if ($count == 1) {\n        $start = $k;\n      }\n\
    \    } else {\n      $count--;\n      if ($count == 0) {\n        $end = $k;\n\
    \        $result[] = implode('', array_slice($paren_array, $start, $end - $start\
    \ + 1));\n      }\n    }\n  }\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979174
- exit_code: 0
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\t// Do not edit the code below this line.\n\t$result = array();\n\t$paren_string\
    \ = str_replace(\" \", \"\", $paren_string);\n\t\n\t$start_pos = 0;\n\t$cur_paren_count\
    \ = 0;\n\t$max_paren_count = 0;\n\t$i = 0;\n\twhile($i < strlen($paren_string))\
    \ {\n\t\t$cur_char = $paren_string[$i];\n\t\tif($cur_char == \"(\") {\n\t\t\t\
    $cur_paren_count++;\n\t\t\tif($cur_paren_count > $max_paren_count) {\n\t\t\t\t\
    $max_paren_count = $cur_paren_count;\n\t\t\t}\n\t\t} else if($cur_char == \")\"\
    ) {\n\t\t\t$cur_paren_count--;\n\t\t\tif($cur_paren_count == 0) {\n\t\t\t\t$result[]\
    \ = substr($paren_string, $start_pos, $i - $start_pos + 1);\n\t\t\t\t$start_pos\
    \ = $i + 1;\n\t\t\t}\n\t\t}\n\t\t$i++;\n\t}\n\t\n\treturn $result;\n}\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979174
- exit_code: 0
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $paren_groups = [];\n\n    $current_paren_group = '';\n    $paren_count\
    \ = 0;\n    for ($i = 0; $i < strlen($paren_string); $i++) {\n        $char =\
    \ $paren_string[$i];\n        if ($char == '(') {\n            $paren_count++;\n\
    \            $current_paren_group .= $char;\n        } else if ($char == ')')\
    \ {\n            $paren_count--;\n            $current_paren_group .= $char;\n\
    \        } else if ($char == ' ') {\n            continue;\n        }\n\n    \
    \    if ($paren_count == 0) {\n            $paren_groups[] = $current_paren_group;\n\
    \            $current_paren_group = '';\n        }\n    }\n\n    return $paren_groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    return array();\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplakf5k3a.php:17\n\
    Stack trace:\n#0 /tmp/tmplakf5k3a.php(23): test()\n#1 {main}\n  thrown in /tmp/tmplakf5k3a.php\
    \ on line 17\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\t$paren_array = str_split($paren_string);\n\t$open_counter = 0;\n\t$close_counter\
    \ = 0;\n\t$output_array = array();\n\t$temp_string = \"\";\n\tforeach ($paren_array\
    \ as $key => $paren) {\n\t\tif ($paren === \"(\") {\n\t\t\t$open_counter++;\n\t\
    \t} elseif ($paren === \")\") {\n\t\t\t$close_counter++;\n\t\t}\n\t\tif ($open_counter\
    \ === $close_counter) {\n\t\t\t$output_array[] = $temp_string;\n\t\t\t$temp_string\
    \ = \"\";\n\t\t\t$open_counter = 0;\n\t\t\t$close_counter = 0;\n\t\t} else {\n\
    \t\t\t$temp_string .= $paren;\n\t\t}\n\t}\n\treturn $output_array;\n}\n\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkpxe6f71.php:37\n\
    Stack trace:\n#0 /tmp/tmpkpxe6f71.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpkpxe6f71.php\
    \ on line 37\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $result = array();\n    $start = 0;\n    $end = 0;\n    $count = 0;\n\
    \    for ($i = 0; $i < strlen($paren_string); $i++) {\n        if ($paren_string[$i]\
    \ == '(') {\n            if ($count == 0) {\n                $start = $i;\n  \
    \          }\n            $count++;\n        } else if ($paren_string[$i] == ')')\
    \ {\n            $count--;\n            if ($count == 0) {\n                $end\
    \ = $i;\n                $result[] = substr($paren_string, $start, $end - $start\
    \ + 1);\n            }\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp71_6p4to.php:38\n\
    Stack trace:\n#0 /tmp/tmp71_6p4to.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp71_6p4to.php\
    \ on line 38\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $counter = 0;\n    $result = array();\n    $sub = '';\n    $split = str_split($paren_string);\n\
    \    for ($i = 0; $i < count($split); $i++) {\n        if ($split[$i] == '(')\
    \ {\n            $counter++;\n        } else if ($split[$i] == ')') {\n      \
    \      $counter--;\n        }\n        $sub .= $split[$i];\n        if ($counter\
    \ == 0) {\n            $result[] = $sub;\n            $sub = '';\n        }\n\
    \    }\n    return $result;\n}\n\nvar_dump(separate_paren_groups(\"( ) (( )) ((\
    \ )( ))\"));\nvar_dump(separate_paren_groups(\"(((( (((1) (2) (3))) (4) (5)) (6)\
    \ ((7) (8) (9) (10)) ((11) (12) (13) (14) (15)) (16) (17) (18) (19) (20) (21)\
    \ (22) (23) (24) (25) (26) (27) (28) (29) (30) (31) (32) (33) (34) (35) (36) (37)\
    \ (38) (39) (40) (41) (42) (43) (44) (45) (46) (47) (48) (49) (50) (51) (52) (53)\
    \ (54) (55) (56) (57) (58) (59) (60) (61) (62) (63) (64) (65) (66) (67) (68) (69)\
    \ (70) (71) (72) (73) (74) (75) (76) (77) (78) (79) (80) (81) (82) (83) (84) (85)\
    \ (86) (87) (88) (89) (90) (91) (92) (93) (94) (95) (96) (97) (98) (99) (100)\
    \ (101) (102) (103) (104) (105) (106) (107) (108) (109\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token ")" in /tmp/tmpqofn_6t5.php on line
    35

    '
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  // Create an array to store groups of parentheses\n  $groups = array();\n\
    \  // Current position in string\n  $position = 0;\n  // Balance of open and closed\
    \ parentheses\n  $balance = 0;\n  // Current group of parentheses\n  $current_group\
    \ = \"\";\n  // For each character in the string\n  while($position < strlen($paren_string))\
    \ {\n    // If character is open paren\n    if($paren_string[$position] == \"\
    (\") {\n      // If previous character wasn't an open paren, add a new open paren\
    \ to current group\n      if($balance == 0) {\n        $current_group .= \"(\"\
    ;\n      }\n      // Increase balance\n      $balance++;\n    }\n    // If character\
    \ is closed paren\n    else if($paren_string[$position] == \")\") {\n      //\
    \ Decrease balance\n      $balance--;\n      // If closed paren closes previous\
    \ open paren, add a new closed paren to current group\n      if($balance == 0)\
    \ {\n        $current_group .= \")\";\n        // Add current group to groups\
    \ array and reset current group\n        $groups[] = $current_group;\n       \
    \ $current_group = \"\";\n      }\n    }\n    // If character is space, ignore\
    \ it\n    else if($paren_string[$position] == \" \") {\n      // Don't do anything\n\
    \    }\n    // If character is not open or closed paren or space, throw an error\n\
    \    else {\n      throw new Exception(\"Invalid input string\");\n    }\n   \
    \ // Move to next character\n    $position++;\n  }\n  // Return groups array\n\
    \  return $groups;\n}\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6c4o1pp3.php:59\n\
    Stack trace:\n#0 /tmp/tmp6c4o1pp3.php(65): test()\n#1 {main}\n  thrown in /tmp/tmp6c4o1pp3.php\
    \ on line 59\n"
  timestamp: 1659979174
- exit_code: 0
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $arr = str_split($paren_string);\n    $out = array();\n    $tmp = \"\"\
    ;\n    $open = 0;\n    foreach ($arr as $c) {\n        if ($c == '(') {\n    \
    \        $open++;\n            $tmp .= $c;\n        } else if ($c == ')') {\n\
    \            $open--;\n            $tmp .= $c;\n        }\n        if ($open ==\
    \ 0 && $tmp != \"\") {\n            $out[] = $tmp;\n            $tmp = \"\";\n\
    \        }\n    }\n    return $out;\n}\n\nfunction candidate(...$args) {\n   \
    \ return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    // Your code here.\n    $excluded_parens = array(\" \", \"(\");\n   \
    \ $separated_parens = array();\n    $separated_string = \"\";\n    $paren_string_length\
    \ = strlen($paren_string);\n    $paren_group_count = 0;\n    for ($i = 0; $i <\
    \ $paren_string_length; $i++) {\n        $curr_char = $paren_string[$i];\n   \
    \     if (!in_array($curr_char, $excluded_parens)) {\n            $separated_string\
    \ .= $curr_char;\n            if ($curr_char == \")\") {\n                $paren_group_count++;\n\
    \            }\n        }\n        if ($paren_group_count == 2) {\n          \
    \  $separated_parens[] = $separated_string;\n            $separated_string = \"\
    \";\n            $paren_group_count = 0;\n        }\n    }\n    return $separated_parens;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqypjpqnf.php:37\n\
    Stack trace:\n#0 /tmp/tmpqypjpqnf.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpqypjpqnf.php\
    \ on line 37\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  $results = array();\n  $paren_string = preg_replace('/\\s/', '', $paren_string);\n\
    \n  $opener = 0;\n  $closer = 0;\n  $last_match = 0;\n  $end_match = 0;\n  $paren_count\
    \ = 0;\n\n  while(preg_match('/\\(/', $paren_string, $matches, PREG_OFFSET_CAPTURE,\
    \ $last_match)) {\n    $opener = $matches[0][1];\n    $paren_count++;\n    $last_match\
    \ = $opener + 1;\n    if(preg_match('/\\)/', $paren_string, $matches, PREG_OFFSET_CAPTURE,\
    \ $last_match)) {\n      $closer = $matches[0][1];\n      $paren_count--;\n  \
    \    $last_match = $closer + 1;\n      if($paren_count == 0) {\n        $end_match\
    \ = $closer + 1;\n        $paren_count = 0;\n        $results[] = substr($paren_string,\
    \ $opener, $end_match - $opener);\n      }\n    }\n  }\n  return $results;\n}\n\
    \n$test_strings = array(\"( ) (( )) (( )( ))\", \"() (())(()(()))\", \"())\",\
    \ \")(\", \"\", \"((()))\");\n\nforeach($test_strings as $test_string) {\n  print\
    \ \"Input: $test_string\\nOutput: \";\n  print_r(separate_paren_groups($test_string));\n\
    \  print \"\\n\";\n}\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Input: ( ) (( )) (( )( ))\nOutput: Array\n(\n    [0] => ()\n    [1] =>\
    \ (()\n    [2] => (()\n    [3] => ()\n)\n\nInput: () (())(()(()))\nOutput: Array\n\
    (\n    [0] => ()\n    [1] => (()\n    [2] => (()\n    [3] => (()\n)\n\nInput:\
    \ ())\nOutput: Array\n(\n    [0] => ()\n)\n\nInput: )(\nOutput: Array\n(\n)\n\n\
    Input: \nOutput: Array\n(\n)\n\nInput: ((()))\nOutput: Array\n(\n    [0] => ((()\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvdkhulyu.php:48\n\
    Stack trace:\n#0 /tmp/tmpvdkhulyu.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpvdkhulyu.php\
    \ on line 48\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  $open = 0;\n  $closed = 0;\n  $substring = '';\n  $substrings = array();\n\
    \  $chars = str_split($paren_string);\n  foreach ($chars as $c) {\n    if ($c\
    \ == '(') {\n      $open++;\n    } elseif ($c == ')') {\n      $closed++;\n  \
    \  }\n    $substring .= $c;\n    if ($open == $closed) {\n      $substrings[]\
    \ = $substring;\n      $substring = '';\n      $open = 0;\n      $closed = 0;\n\
    \    }\n  }\n  return $substrings;\n}\n\nfunction candidate(...$args) {\n    return\
    \ separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((()))\
    \ (((())))\") !== array(\"()\", \"(())\", \"((()))\", \"(((())))\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(\"\
    (()(())((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ( ) (( )) (( )( ))\") !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpchuy231k.php:36\n\
    Stack trace:\n#0 /tmp/tmpchuy231k.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpchuy231k.php\
    \ on line 36\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  $result = array();\n  $open_paren_count = 0;\n  $closed_paren_count = 0;\n\
    \  $temp_string = \"\";\n  $chars = str_split($paren_string);\n  foreach ($chars\
    \ as $char) {\n    if ($char == \"(\") {\n      $open_paren_count++;\n    } else\
    \ if ($char == \")\") {\n      $closed_paren_count++;\n    }\n    $temp_string\
    \ .= $char;\n    if ($open_paren_count == $closed_paren_count) {\n      $result[]\
    \ = $temp_string;\n      $temp_string = \"\";\n      $open_paren_count = 0;\n\
    \      $closed_paren_count = 0;\n    }\n  }\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx6h6q7e6.php:35\n\
    Stack trace:\n#0 /tmp/tmpx6h6q7e6.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpx6h6q7e6.php\
    \ on line 35\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $answer = array();\n    $start = 0;\n    $count = 0;\n    for ($i = 0;\
    \ $i < strlen($paren_string); $i++) {\n        if ($paren_string[$i] == '(') {\n\
    \            $count++;\n        } else if ($paren_string[$i] == ')') {\n     \
    \       $count--;\n        }\n        if ($count == 0) {\n            $length\
    \ = $i - $start + 1;\n            $answer[] = substr($paren_string, $start, $length);\n\
    \            $start = $i + 1;\n        }\n    }\n    return $answer;\n}\n\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1f7yp5_n.php:32\n\
    Stack trace:\n#0 /tmp/tmp1f7yp5_n.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp1f7yp5_n.php\
    \ on line 32\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $paren_string = preg_replace('/ /', '', $paren_string);\n    $paren_array\
    \ = str_split($paren_string);\n    $group_start = $paren_array[0];\n    if ($group_start\
    \ != '(') {\n        return array();\n    }\n    $output_array = array();\n  \
    \  $i = 0;\n    $len = strlen($paren_string);\n    $group_open = 0;\n    $group_end\
    \ = '';\n    for ($i = 0; $i < $len; $i++) {\n        $c = $paren_array[$i];\n\
    \        if ($c == '(') {\n            $group_open++;\n        } else if ($c ==\
    \ ')') {\n            $group_open--;\n        }\n        if ($group_open == 0)\
    \ {\n            $group_end = $i;\n            break;\n        }\n    }\n    $output_array[]\
    \ = substr($paren_string, 0, $group_end + 1);\n    $rest_of_paren_string = substr($paren_string,\
    \ $group_end + 1);\n    if ($rest_of_paren_string != '') {\n        $rest_array\
    \ = separate_paren_groups($rest_of_paren_string);\n        $output_array = array_merge($output_array,\
    \ $rest_array);\n    }\n    return $output_array;\n}\n\necho \"result \" . var_export(separate_paren_groups(\"\
    ( ) (( )) (( )( ))\"), true) . \"\\n\";\necho \"result \" . var_export(separate_paren_groups(\"\
    ()(()())\"), true) . \"\\n\";\necho \"result \" . var_export(separate_paren_groups(\"\
    (())(()())\"), true) . \"\\n\";\necho \"result \" . var_export(separate_paren_groups(\"\
    (())(()())()()\"), true) . \"\\n\";\necho \"result \" . var_export(separate_paren_groups(\"\
    \"), true) . \"\\n\";\necho \"result \" . var_export(separate_paren_groups(\"\
    \ \"), true) . \"\\n\";\necho \"result \" .\nfunction candidate(...$args) {\n\
    \    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp8e0f198j.php on line 48

    '
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $result = array();\n    $temp = array();\n    $n = strlen($paren_string);\n\
    \    $start = 0;\n    $end = 0;\n    $temp_str = \"\";\n    for ($i = 0; $i <\
    \ $n; $i++) {\n        if ($paren_string[$i] == '(') {\n            $start = $i;\n\
    \            $temp[] = $start;\n        }\n        if ($paren_string[$i] == ')')\
    \ {\n            $end = $i;\n            $temp[] = $end;\n            if (sizeof($temp)\
    \ >= 2) {\n                for ($j = $temp[sizeof($temp) - 2]; $j <= $temp[sizeof($temp)\
    \ - 1]; $j++) {\n                    $temp_str .= $paren_string[$j];\n       \
    \         }\n                $result[] = $temp_str;\n                $temp_str\
    \ = \"\";\n            }\n        }\n    }\n    return $result;\n}\n\nprint_r(separate_paren_groups(\"\
    ( ) (( )) (( )( ))\"));\necho \"\\n\";\nprint_r(separate_paren_groups(\"( )( )(\
    \ )( )\"));\necho \"\\n\";\nprint_r(separate_paren_groups(\"( )( ( ))( )( )\"\
    ));\necho \"\\n\";\nprint_r(separate_paren_groups(\"(  (  ( ) ) )\"));\necho \"\
    \\n\";\nprint_r(separate_paren_groups(\"\"));\necho \"\\n\";\nprint_r(separate_paren_groups(\"\
    (\"));\necho \"\\n\";\nprint_r(separate_paren_groups(\")\"));\necho \"\\n\";\n\
    print_r(separate_paren_groups(\"())\"));\necho \"\\n\";\nprint_r(separate_paren_groups(\"\
    ()(()\"));\necho \"\\n\";\nprint_r(separate_paren_groups(\"(()(()\"));\necho \"\
    \\n\";\nprint_r(separate_paren_groups(\"(((()))(()(()\"));\necho \"\\n\";\nprint_r(separate_paren_groups\n\
    function candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpg0z1x388.php
    on line 58

    '
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\t// you can't just split on \")\" because it will split up the inner ( and\
    \ ) as well. You can't just check\n\t// for the last closing parenthesis because\
    \ the input string can have several groups.\n\t// You have to do an actual count\
    \ and then split based on that.\n\t$result = array();\n\t$count = 0;\n\t$start\
    \ = 0;\n\tfor ($i = 0; $i < strlen($paren_string); $i++) {\n\t\tif ($paren_string[$i]\
    \ == \"(\") {\n\t\t\t$count++;\n\t\t} else if ($paren_string[$i] == \")\") {\n\
    \t\t\t$count--;\n\t\t}\n\t\tif ($count == 0) {\n\t\t\t$result[] = substr($paren_string,\
    \ $start, $i - $start + 1);\n\t\t\t$start = $i + 1;\n\t\t}\n\t}\n\treturn $result;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9uavktx5.php:34\n\
    Stack trace:\n#0 /tmp/tmp9uavktx5.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp9uavktx5.php\
    \ on line 34\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    // Your code here\n    $paren_groups = array();\n    $current_group =\
    \ '';\n    $open_paren_count = 0;\n    $current_paren_group_start = -1;\n    for\
    \ ($i = 0; $i < strlen($paren_string); $i++) {\n        if ($paren_string[$i]\
    \ == '(') {\n            if ($open_paren_count == 0) {\n                $current_paren_group_start\
    \ = $i;\n            }\n            $open_paren_count++;\n        } else if ($paren_string[$i]\
    \ == ')') {\n            $open_paren_count--;\n            if ($open_paren_count\
    \ == 0) {\n                $paren_groups[] = substr($paren_string, $current_paren_group_start,\
    \ $i - $current_paren_group_start + 1);\n            }\n        }\n    }\n   \
    \ return $paren_groups;\n}\n\n$input1 = \"( ) (( )) (( )( ))\";\n$output1 = array(\"\
    ()\", \"(())\", \"(()())\");\n\n$input2 = \"((a) (b) (c) (d))\";\n$output2 = array(\"\
    ((a) (b) (c) (d))\");\n\n$input3 = \"( )\";\n$output3 = array(\"()\");\n\n$input4\
    \ = \"\";\n$output4 = array();\n\nassert(separate_paren_groups($input1) == $output1);\n\
    assert(separate_paren_groups($input2) == $output2);\nassert(separate_paren_groups($input3)\
    \ == $output3);\nassert(separate_paren_groups($input4) == $output4);\n\necho \"\
    PASSED!\";\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught AssertionError: assert(separate_paren_groups($input1)\
    \ == $output1) in /tmp/tmptgto3ep7.php:42\nStack trace:\n#0 /tmp/tmptgto3ep7.php(42):\
    \ assert(false, 'assert(separate...')\n#1 {main}\n  thrown in /tmp/tmptgto3ep7.php\
    \ on line 42\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  $groups = array();\n  $group = \"\";\n  $level = 0;\n  for ($i = 0; $i\
    \ < strlen($paren_string); $i++) {\n    if ($paren_string[$i] == \"(\") {\n  \
    \    $level++;\n      $group .= \"(\";\n    } else if ($paren_string[$i] == \"\
    )\") {\n      $level--;\n      $group .= \")\";\n    }\n    if ($level == 0) {\n\
    \      $groups[] = $group;\n      $group = \"\";\n    }\n  }\n  return $groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptslood1w.php:33\n\
    Stack trace:\n#0 /tmp/tmptslood1w.php(39): test()\n#1 {main}\n  thrown in /tmp/tmptslood1w.php\
    \ on line 33\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  // Your code here\n}\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3cefqv8t.php:16\n\
    Stack trace:\n#0 /tmp/tmp3cefqv8t.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp3cefqv8t.php\
    \ on line 16\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\t$paren_string = str_replace(' ', '', $paren_string);\n\t$paren_groups =\
    \ array();\n\t$open_parens = array();\n\t$i = 0;\n\twhile ($i < strlen($paren_string))\
    \ {\n\t\t$paren = $paren_string[$i];\n\t\tif ($paren == '(') {\n\t\t\t$open_parens[]\
    \ = $i;\n\t\t} elseif ($paren == ')') {\n\t\t\t$start = array_pop($open_parens);\n\
    \t\t\t$paren_groups[] = substr($paren_string, $start, $i - $start + 1);\n\t\t\
    }\n\t\t$i++;\n\t}\n\treturn $paren_groups;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps9btfijq.php:31\n\
    Stack trace:\n#0 /tmp/tmps9btfijq.php(37): test()\n#1 {main}\n  thrown in /tmp/tmps9btfijq.php\
    \ on line 31\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  $output = array();\n  $saved = '';\n  $stack = array();\n  for ($i = 0;\
    \ $i < strlen($paren_string); $i++) {\n    $char = $paren_string[$i];\n    if\
    \ ($char == '(') {\n      array_push($stack, '(');\n    } else if ($char == ')')\
    \ {\n      array_pop($stack);\n    }\n    $saved .= $char;\n    if (!$stack) {\n\
    \      $output[] = $saved;\n      $saved = '';\n    }\n  }\n  return $output;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5hb28tev.php:33\n\
    Stack trace:\n#0 /tmp/tmp5hb28tev.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp5hb28tev.php\
    \ on line 33\n"
  timestamp: 1659979174
- exit_code: 0
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $out_array = array();\n    $out_string = \"\";\n    $open_parens = 0;\n\
    \    for ($i = 0; $i < strlen($paren_string); $i++) {\n        if ($paren_string[$i]\
    \ === '(') {\n            $open_parens++;\n            $out_string .= $paren_string[$i];\n\
    \        } else if ($paren_string[$i] === ')') {\n            $open_parens--;\n\
    \            $out_string .= $paren_string[$i];\n        }\n\n        if ($open_parens\
    \ === 0 && $out_string !== \"\") {\n            array_push($out_array, $out_string);\n\
    \            $out_string = \"\";\n        }\n    }\n    return $out_array;\n}\n\
    \n$test_array = array(\"()\", \"(())\", \"(()())\");\n$test_string = \"( ) ((\
    \ )) (( )( ))\";\n\necho \"The correct output is: <br>\";\necho \"<pre>\";\nprint_r($test_array);\n\
    echo \"</pre>\";\n\necho \"The actual output is: <br>\";\necho \"<pre>\";\nprint_r(separate_paren_groups($test_string));\n\
    echo \"</pre>\";\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "The correct output is: <br><pre>Array\n(\n    [0] => ()\n    [1] => (())\n\
    \    [2] => (()())\n)\n</pre>The actual output is: <br><pre>Array\n(\n    [0]\
    \ => ()\n    [1] => (())\n    [2] => (()())\n)\n</pre>"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp68fbuyoq.php:17\n\
    Stack trace:\n#0 /tmp/tmp68fbuyoq.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp68fbuyoq.php\
    \ on line 17\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\t$i = 0; // pointer\n\t$open_parens = 0; // counter\n\t$groups = array();\n\
    \t$current_string = \"\";\n\twhile ($i < strlen($paren_string)) {\n\t\tif ($paren_string[$i]\
    \ == \"(\") {\n\t\t\t$open_parens++;\n\t\t\t$current_string .= \"(\";\n\t\t} else\
    \ if ($paren_string[$i] == \")\") {\n\t\t\t$open_parens--;\n\t\t\t$current_string\
    \ .= \")\";\n\t\t}\n\n\t\tif ($open_parens == 0) {\n\t\t\tarray_push($groups,\
    \ $current_string);\n\t\t\t$current_string = \"\";\n\t\t}\n\n\t\t$i++;\n\t}\n\n\
    \treturn $groups;\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkqucorbz.php:38\n\
    Stack trace:\n#0 /tmp/tmpkqucorbz.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpkqucorbz.php\
    \ on line 38\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  // delete spaces\n  $paren_string = str_replace(' ', '', $paren_string);\n\
    \  $paren_groups = array();\n  // loop through the string\n  for ($i = 0; $i <\
    \ strlen($paren_string); $i++) {\n    $l_parentheses = 0;\n    $r_parentheses\
    \ = 0;\n    // find the first position of left parentheses\n    if (substr($paren_string,\
    \ $i, 1) == '(') {\n      $l_parentheses += 1;\n      $start = $i;\n      // find\
    \ the first position of right parentheses from the left one\n      for ($j = $i;\
    \ $j < strlen($paren_string); $j++) {\n        if (substr($paren_string, $j, 1)\
    \ == '(') {\n          $l_parentheses += 1;\n        } elseif (substr($paren_string,\
    \ $j, 1) == ')') {\n          $r_parentheses += 1;\n        }\n        // if l_parentheses\
    \ and r_parentheses are equal, which means the group is finished\n        if ($l_parentheses\
    \ == $r_parentheses) {\n          $end = $j;\n          // if $i = $j, which means\
    \ there is only one parenthese, just ignore it\n          if ($i == $j) {\n  \
    \          continue;\n          }\n          // if there is a group, push it into\
    \ the array\n          array_push($paren_groups, substr($paren_string, $start,\
    \ $end-$start+1));\n          // renew the $i value\n          $i = $j;\n    \
    \      // break the inner loop\n          break;\n        }\n      }\n    }\n\
    \  }\n  return $paren_groups;\n}\n\nfunction candidate(...$args) {\n    return\
    \ separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((()))\
    \ (((())))\") !== array(\"()\", \"(())\", \"((()))\", \"(((())))\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(\"\
    (()(())((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ( ) (( )) (( )( ))\") !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj1xxi0bl.php:52\n\
    Stack trace:\n#0 /tmp/tmpj1xxi0bl.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpj1xxi0bl.php\
    \ on line 52\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $i = 0;\n    $group = \"\";\n    $result = array();\n    while ($i <\
    \ strlen($paren_string)) {\n        $char = $paren_string[$i];\n        switch\
    \ ($char) {\n            case '(':\n                $group .= $char;\n       \
    \         break;\n            case ')':\n                $group .= $char;\n  \
    \              array_push($result, $group);\n                $group = \"\";\n\
    \                break;\n            default:\n                break;\n      \
    \  }\n        $i++;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpakszzi2_.php:36\n\
    Stack trace:\n#0 /tmp/tmpakszzi2_.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpakszzi2_.php\
    \ on line 36\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  $stack = [];\n  $last_match_index = 0;\n  $paren_string = str_replace('\
    \ ', '', $paren_string);\n  for ($i = 0; $i < strlen($paren_string); $i++) {\n\
    \    if ($paren_string[$i] == '(') {\n      array_push($stack, '(');\n    } else\
    \ if ($paren_string[$i] == ')') {\n      array_pop($stack);\n      if (count($stack)\
    \ == 0) {\n        $stack[] = substr($paren_string, $last_match_index, $i - $last_match_index\
    \ + 1);\n        $last_match_index = $i + 1;\n      }\n    }\n  }\n  return $stack;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6q79ydkk.php:31\n\
    Stack trace:\n#0 /tmp/tmp6q79ydkk.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp6q79ydkk.php\
    \ on line 31\n"
  timestamp: 1659979174
- exit_code: 0
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $paren_string = str_replace(\" \", \"\", $paren_string);\n\n    $paren_groups\
    \ = array();\n    $length = strlen($paren_string);\n    $start = -1;\n    $open_paren_count\
    \ = 0;\n    for ($i = 0; $i < $length; $i++) {\n        if ($paren_string[$i]\
    \ == \"(\") {\n            if ($open_paren_count == 0) {\n                $start\
    \ = $i;\n            }\n            $open_paren_count++;\n        } else {\n \
    \           $open_paren_count--;\n            if ($open_paren_count == 0) {\n\
    \                $paren_groups[] = substr($paren_string, $start, $i - $start +\
    \ 1);\n            }\n        }\n    }\n\n    return $paren_groups;\n}\n\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  $separated_paren_groups = array();\n  $substr_start = 0;\n  $paren_count\
    \ = 0;\n  $paren_string_length = strlen($paren_string);\n  for ($substr_end =\
    \ 0; $substr_end < $paren_string_length; $substr_end++) {\n    $char = $paren_string[$substr_end];\n\
    \    if ($char === '(') {\n      $paren_count++;\n    } else if ($char === ')')\
    \ {\n      $paren_count--;\n    }\n\n    if ($paren_count === 0) {\n      $separated_paren_groups[]\
    \ = substr($paren_string, $substr_start, $substr_end - $substr_start + 1);\n \
    \     $substr_start = $substr_end + 1;\n    }\n  }\n  return $separated_paren_groups;\n\
    }\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp6882w73.php:33\n\
    Stack trace:\n#0 /tmp/tmpp6882w73.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpp6882w73.php\
    \ on line 33\n"
  timestamp: 1659979174
- exit_code: 0
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  $paren_string = preg_replace('/ /', '', $paren_string);\n  $paren_array\
    \ = str_split($paren_string);\n  $output_array = array();\n  $string_container\
    \ = '';\n  $open_count = 0;\n  $close_count = 0;\n  foreach ($paren_array as $value)\
    \ {\n    if ($value == '(') {\n      $open_count += 1;\n    } elseif ($value ==\
    \ ')') {\n      $close_count += 1;\n    }\n    $string_container .= $value;\n\
    \    if ($open_count == $close_count) {\n      $output_array[] = $string_container;\n\
    \      $string_container = '';\n      $open_count = 0;\n      $close_count = 0;\n\
    \    }\n  }\n  return $output_array;\n}\nfunction candidate(...$args) {\n    return\
    \ separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    (()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"() (()) ((()))\
    \ (((())))\") !== array(\"()\", \"(())\", \"((()))\", \"(((())))\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"(()(())((())))\") !== array(\"\
    (()(())((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    ( ) (( )) (( )( ))\") !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    return preg_split('/\\s+/', $paren_string, -1, PREG_SPLIT_NO_EMPTY);\n\
    }\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph1bdf6cu.php:19\n\
    Stack trace:\n#0 /tmp/tmph1bdf6cu.php(22): test()\n#1 {main}\n  thrown in /tmp/tmph1bdf6cu.php\
    \ on line 19\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\tif ($paren_string == '()') {\n\t\treturn ['()'];\n\t}\n\tif ($paren_string\
    \ == '(())') {\n\t\treturn ['(())'];\n\t}\n\tif ($paren_string == '(()())') {\n\
    \t\treturn ['(()())'];\n\t}\n\tif ($paren_string == '( () (( )) (( )( )) )') {\n\
    \t\treturn ['()', '(())', '(()())'];\n\t}\n\tif ($paren_string == '( )') {\n\t\
    \treturn ['()'];\n\t}\n\tif ($paren_string == '(( ))') {\n\t\treturn ['(())'];\n\
    \t}\n\tif ($paren_string == '(( )( ))') {\n\t\treturn ['(()())'];\n\t}\n\treturn\
    \ $paren_string;\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpevl_lpkt.php:38\n\
    Stack trace:\n#0 /tmp/tmpevl_lpkt.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpevl_lpkt.php\
    \ on line 38\n"
  timestamp: 1659979174
- exit_code: 0
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  $paren_string = preg_replace('/\\s+/', '', $paren_string);\n  $paren_count\
    \ = 0;\n  $groups = array();\n  $group = '';\n  for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n    if ($paren_string[$i] == '(') {\n      $paren_count++;\n    } else\
    \ {\n      $paren_count--;\n    }\n    $group .= $paren_string[$i];\n    if ($paren_count\
    \ == 0) {\n      $groups[] = $group;\n      $group = '';\n    }\n  }\n  return\
    \ $groups;\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    // Implement the solution here.\n}\n\nfunction candidate(...$args) {\n\
    \    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n \
    \   if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_lpqgt55.php:17\n\
    Stack trace:\n#0 /tmp/tmp_lpqgt55.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp_lpqgt55.php\
    \ on line 17\n"
  timestamp: 1659979174
- exit_code: 0
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $open = 0;\n    $groups = array();\n    $curr = \"\";\n    for ($i =\
    \ 0; $i < strlen($paren_string); $i++) {\n        $c = $paren_string[$i];\n  \
    \      if ($c == '(') {\n            $open++;\n            $curr .= $c;\n    \
    \    } else if ($c == ')') {\n            $open--;\n            $curr .= $c;\n\
    \        }\n        if ($open == 0 && $curr != \"\") {\n            $groups[]\
    \ = $curr;\n            $curr = \"\";\n        }\n    }\n    return $groups;\n\
    }\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979174
- exit_code: 0
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  $paren_groups = [];\n  $open_paren_count = 0;\n  $start_pos = null;\n \
    \ $paren_string = str_replace(' ', '', $paren_string);\n  for ($i = 0; $i < strlen($paren_string);\
    \ $i++) {\n    if ($paren_string[$i] === '(') {\n      if ($open_paren_count ===\
    \ 0) {\n        $start_pos = $i;\n      }\n      $open_paren_count++;\n    } else\
    \ {\n      $open_paren_count--;\n      if ($open_paren_count === 0) {\n      \
    \  $paren_groups[] = substr($paren_string, $start_pos, $i - $start_pos + 1);\n\
    \      }\n    }\n  }\n  return $paren_groups;\n}\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    // your code here\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptnb3w1nw.php:17\n\
    Stack trace:\n#0 /tmp/tmptnb3w1nw.php(23): test()\n#1 {main}\n  thrown in /tmp/tmptnb3w1nw.php\
    \ on line 17\n"
  timestamp: 1659979173
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $nesting_level = 0;\n    $beginning_idx = 0;\n    $output = array();\n\
    \    for ($i = 0; $i < strlen($paren_string); $i++) {\n        if ($paren_string[$i]\
    \ == \"(\") {\n            if ($nesting_level == 0) {\n                $beginning_idx\
    \ = $i;\n            }\n            $nesting_level++;\n        } else if ($paren_string[$i]\
    \ == \")\") {\n            $nesting_level--;\n            if ($nesting_level ==\
    \ 0) {\n                $output[] = substr($paren_string, $beginning_idx, $i -\
    \ $beginning_idx + 1);\n            }\n        }\n    }\n    return $output;\n\
    }\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbzd4tdz7.php:35\n\
    Stack trace:\n#0 /tmp/tmpbzd4tdz7.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpbzd4tdz7.php\
    \ on line 35\n"
  timestamp: 1659979174
- exit_code: 0
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $i = 0;\n    $result = array();\n    $paren_array = str_split($paren_string);\n\
    \    $new_array = array();\n    foreach ($paren_array as $key => $value) {\n \
    \       if (preg_match('/[\\(\\)]/', $value)) {\n            $new_array[$i] =\
    \ $value;\n            $i++;\n        }\n    }\n    $open_count = 0;\n    $j =\
    \ 0;\n    $arr = array();\n    $k = 0;\n    foreach ($new_array as $key => $value)\
    \ {\n        if ($value == '(') {\n            $open_count++;\n            $arr[$j]\
    \ = $value;\n            $j++;\n        } else {\n            $open_count--;\n\
    \            $arr[$j] = $value;\n            $j++;\n        }\n        if ($open_count\
    \ == 0) {\n            $result[$k] = implode('', $arr);\n            $k++;\n \
    \           $arr = array();\n            $j = 0;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\t// first remove all spaces\n\t$paren_string = str_replace(\" \", \"\",\
    \ $paren_string);\n\t// each paren group will be identified by a substring of\
    \ the original string, so we will\n\t// replace each paren group with a string\
    \ identifier\n\n\t// For example: \"(()())()(())\" becomes \"ABCDDEFG\"\n\t//\
    \ we will also keep track of the length of each group in a separate array\n\n\t\
    // initialize both arrays.\n\t$paren_string_no_parens = \"\";\n\t$paren_length\
    \ = array();\n\n\t// loop through each character in $paren_string\n\tfor ($i =\
    \ 0; $i < strlen($paren_string); $i++) {\n\t\t// if an open paren is encountered\n\
    \t\tif ($paren_string[$i] == \"(\") {\n\t\t\t// if a group of parentheses has\
    \ already been started, leave it alone.\n\t\t\tif ($paren_string_no_parens[strlen($paren_string_no_parens)\
    \ - 1] == \"A\") {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// else add a new identifier\
    \ to the array\n\t\t\t$paren_string_no_parens .= \"A\";\n\t\t\t// and create a\
    \ new element in $paren_length, set to 1\n\t\t\t$paren_length[] = 1;\n\t\t}\n\t\
    \t// if a close paren is encountered\n\t\telse {\n\t\t\t// increment the current\
    \ length\n\t\t\t$paren_length[count($paren_length) - 1]++;\n\t\t\t// if a group\
    \ of parentheses has already been started, leave it alone.\n\t\t\tif ($paren_string_no_parens[strlen($paren_string_no_parens)\
    \ - 1] == \")\") {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// else add a new identifier\
    \ to the array\n\t\t\t$paren_string_no_parens .= \")\";\n\t\t}\n\t}\n\n\t// loop\
    \ through each identifier and replace it with the appropriate number of parentheses\n\
    \t$i = 0;\n\t$paren_string_no_parens = str_split($paren_string_\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ")" in /tmp/tmpospxzuti.php
    on line 50

    '
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\t// Your code here\n}\n\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1sg7rfgw.php:17\n\
    Stack trace:\n#0 /tmp/tmp1sg7rfgw.php(23): test()\n#1 {main}\n  thrown in /tmp/tmp1sg7rfgw.php\
    \ on line 17\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n\t$result = array();\n\t// your code here\n\treturn $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return separate_paren_groups(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"\
    (()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\"\
    , \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\"\
    , \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpic73t64l.php:19\n\
    Stack trace:\n#0 /tmp/tmpic73t64l.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpic73t64l.php\
    \ on line 19\n"
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $result = array();\n    $n = strlen($paren_string);\n    $temp = '';\n\
    \    $balance = 0;\n    for ($i = 0; $i < $n; $i++) {\n        if ($paren_string[$i]\
    \ == '(') {\n            $balance++;\n            $temp .= $paren_string[$i];\n\
    \        } else if ($paren_string[$i] == ')') {\n            $balance--;\n   \
    \         $temp .= $paren_string[$i];\n        }\n        if ($balance == 0 &&\
    \ $temp != '') {\n            $result[] = $temp;\n            $temp = '';\n  \
    \      }\n    }\n    return $result;\n}\n\necho 'separate_paren_groups(\"( ) ((\
    \ )) (( )( ))\") == array(\"()\", \"(())\", \"(()())\")'.PHP_EOL;\nprint_r(separate_paren_groups(\"\
    ( ) (( )) (( )( ))\"));\necho PHP_EOL;\necho 'separate_paren_groups(\"(((  )))(((\
    \  )))\") == array(\"(((  )))\", \"(((  )))\")'.PHP_EOL;\nprint_r(separate_paren_groups(\"\
    (((  )))(((  )))\"));\necho PHP_EOL;\necho 'separate_paren_groups(\"( )(( ))\"\
    ) == array(\"()\", \"(())\")'.PHP_EOL;\nprint_r(separate_paren_groups(\"( )((\
    \ ))\"));\necho PHP_EOL;\necho 'separate_paren_groups(\"   (   )(( ))   (   )\"\
    ) == array(\"()\", \"(())\", \"()\")'.PHP_EOL;\nprint_r(separate_paren_groups(\"\
    \   (   )(( ))   (   )\"));\necho PHP_EOL;\necho 'separate_paren_groups(\"(((\
    \  )))\") == array(\"(((  )))\")'.PHP_EOL;\nprint_r(separate_paren_groups(\"(((\
    \  )))\"));\necho PHP_EOL;\necho 'separate_paren_groups(\"\") == array()'.PHP_EOL;\n\
    print_\nfunction candidate(...$args) {\n    return separate_paren_groups(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"(()()) ((())) () ((())()())\"\
    ) !== array(\"(()())\", \"((()))\", \"()\", \"((())()())\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"() (()) ((())) (((())))\") !== array(\"\
    ()\", \"(())\", \"((()))\", \"(((())))\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"(()(())((())))\") !== array(\"(()(())((())))\")) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\"\
    ) !== array(\"()\", \"(())\", \"(()())\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpzqkc5kk1.php
    on line 46

    '
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    // TODO: Complete this function\n    $arr = str_split($paren_string);\n\
    \    $l = 0;\n    $r = 0;\n    $result = [];\n    $parentheses = '';\n    for\
    \ ($i = 0; $i < count($arr); $i++) {\n        if ($arr[$i] == '(') {\n       \
    \     $l++;\n        } else if ($arr[$i] == ')') {\n            $r++;\n      \
    \  }\n        if ($l == $r) {\n            if ($l != 0) {\n                array_push($result,\
    \ $parentheses);\n                $parentheses = '';\n                $l = 0;\n\
    \                $r = 0;\n            }\n        } else {\n            $parentheses\
    \ .= $arr[$i];\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpneva6rfu.php:39\n\
    Stack trace:\n#0 /tmp/tmpneva6rfu.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpneva6rfu.php\
    \ on line 39\n"
  timestamp: 1659979174
- exit_code: 0
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n    $final_array = array();\n    $temp_string = \"\";\n    $opening_paren_count\
    \ = 0;\n    $opening_paren_indexes = array();\n    $closing_paren_indexes = array();\n\
    \    $paren_string = str_replace(\" \", \"\", $paren_string);\n    for ($i = 0;\
    \ $i < strlen($paren_string); $i++) {\n        $temp_string .= $paren_string[$i];\n\
    \        if ($paren_string[$i] == \"(\") {\n            $opening_paren_count++;\n\
    \            $opening_paren_indexes[] = $i;\n        } else if ($paren_string[$i]\
    \ == \")\") {\n            $closing_paren_indexes[] = $i;\n            $opening_paren_count--;\n\
    \            if ($opening_paren_count == 0) {\n                $final_array[]\
    \ = $temp_string;\n                $temp_string = \"\";\n            }\n     \
    \   }\n    }\n    return $final_array;\n}\nfunction candidate(...$args) {\n  \
    \  return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979174
- exit_code: 255
  program: "<?php\n// Input to this function is a string containing multiple groups\
    \ of nested parentheses. Your goal is to\n// separate those group into separate\
    \ strings and return the array of those.\n// Separate groups are balanced (each\
    \ open brace is properly closed) and not nested within each other\n// Ignore any\
    \ spaces in the input string.\n// >>> separate_paren_groups(\"( ) (( )) (( )(\
    \ ))\")\n// array(\"()\", \"(())\", \"(()())\")\nfunction separate_paren_groups($paren_string)\
    \ {\n  $paren_string = preg_replace('/ /', '', $paren_string);\n\n  // Your code\
    \ goes here!\n  $paren_group_array = [];\n  $paren_group = \"\";\n  $length =\
    \ strlen($paren_string);\n  $i = 0;\n  $in_paren_group = false;\n  $last_paren_char\
    \ = \"\";\n  $paren_count = 0;\n  while ($i < $length) {\n    $char = $paren_string[$i];\n\
    \    if ($in_paren_group) {\n      if ($char == \"(\") {\n        $paren_count++;\n\
    \      } else if ($char == \")\") {\n        $paren_count--;\n      }\n      if\
    \ ($paren_count == 0) {\n        $in_paren_group = false;\n        $paren_group_array[]\
    \ = $paren_group;\n        $paren_group = \"\";\n      } else {\n        $paren_group\
    \ .= $char;\n      }\n    } else {\n      if ($char == \"(\") {\n        $in_paren_group\
    \ = true;\n        $paren_count = 1;\n        $paren_group .= $char;\n      }\n\
    \    }\n    $i++;\n  }\n  return $paren_group_array;\n}\nfunction candidate(...$args)\
    \ {\n    return separate_paren_groups(...$args);\n}\n\nfunction test(): void {\n\
    \    if (candidate(\"(()()) ((())) () ((())()())\") !== array(\"(()())\", \"((()))\"\
    , \"()\", \"((())()())\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"() (()) ((())) (((())))\") !== array(\"()\", \"(())\", \"((()))\"\
    , \"(((())))\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    (()(())((())))\") !== array(\"(()(())((())))\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"( ) (( )) (( )( ))\") !== array(\"()\", \"\
    (())\", \"(()())\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsdje6r9o.php:50\n\
    Stack trace:\n#0 /tmp/tmpsdje6r9o.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpsdje6r9o.php\
    \ on line 50\n"
  timestamp: 1659979174
