language: php
name: HumanEval_149_sorted_list_sum
results:
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $res = array();\n  foreach ($lst\
    \ as $word) {\n    $word_len = strlen($word);\n    if ($word_len % 2 == 0) {\n\
    \      $res[] = $word;\n    }\n  }\n  sort($res);\n  return $res;\n}\n\necho json_encode(sorted_list_sum(array(\"\
    aa\", \"a\", \"aaa\")));\necho \"\\n\";\necho json_encode(sorted_list_sum(array(\"\
    ab\", \"a\", \"aaa\", \"cd\")));\necho \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "[\"aa\"]\n[\"ab\",\"cd\"]\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpp_ioxozl.php:45\nStack trace:\n#0 /tmp/tmpp_ioxozl.php(48): test()\n\
    #1 {main}\n  thrown in /tmp/tmpp_ioxozl.php on line 45\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $new_lst = [];\n  for ($i = 0;\
    \ $i < count($lst); $i++) {\n    if (strlen($lst[$i]) % 2 == 0) {\n      array_push($new_lst,\
    \ $lst[$i]);\n    }\n  }\n  sort($new_lst);\n  return $new_lst;\n}\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7rtkfwab.php:38\n\
    Stack trace:\n#0 /tmp/tmp7rtkfwab.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp7rtkfwab.php\
    \ on line 38\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $sorted_lst = array();\n    foreach\
    \ ($lst as $item) {\n        array_push($sorted_lst, $item);\n    }\n    return\
    \ $sorted_lst;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgzac706r.php:30\n\
    Stack trace:\n#0 /tmp/tmpgzac706r.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpgzac706r.php\
    \ on line 30\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $result = array();\n  for ($i =\
    \ 0; $i < count($lst); $i++) {\n    if (strlen($lst[$i]) % 2 === 0) {\n      array_push($result,\
    \ $lst[$i]);\n    }\n  }\n  // For the same length sort alphabetically\n  function\
    \ cmp($a, $b) {\n    $cmp = strlen($a) - strlen($b);\n    if ($cmp === 0) {\n\
    \      return strcmp($a, $b);\n    }\n    return $cmp;\n  }\n  usort($result,\
    \ \"cmp\");\n  return $result;\n}\n\n$test_list = array(\"aa\", \"a\", \"aaa\"\
    );\n$test_list2 = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($test_list));\n\
    print_r(sorted_list_sum($test_list2));\nfunction candidate(...$args) {\n    return\
    \ sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nFatal error: Cannot redeclare cmp() (previously\
    \ declared in /tmp/tmppgys1v4n.php:25) in /tmp/tmppgys1v4n.php on line 25\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  foreach ($lst as $key => $val)\
    \ {\n    if (strlen($val) % 2 == 1) {\n      unset($lst[$key]);\n    }\n  }\n\
    \  sort($lst);\n  return $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwn61vrd.php:43\n\
    Stack trace:\n#0 /tmp/tmpuwn61vrd.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpuwn61vrd.php\
    \ on line 43\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $result = array();\n    for ($i\
    \ = 0; $i < count($lst); $i++) {\n        $x = $lst[$i];\n        for ($j = 0;\
    \ $j < count($result); $j++) {\n            $y = $result[$j];\n            if\
    \ (strlen($x) < strlen($y)) {\n                array_splice($result, $j, 0, $x);\n\
    \                $i++;\n                continue 2;\n            } else if (strlen($x)\
    \ == strlen($y)) {\n                if ($x < $y) {\n                    array_splice($result,\
    \ $j, 0, $x);\n                    $i++;\n                    continue 2;\n  \
    \              }\n            }\n        }\n        $result[] = $x;\n    }\n \
    \   return $result;\n}\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2bdlrfr2.php:44\n\
    Stack trace:\n#0 /tmp/tmp2bdlrfr2.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp2bdlrfr2.php\
    \ on line 44\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $lst2 = array();\n  foreach ($lst\
    \ as $str) {\n    if (strlen($str) % 2 == 0) {\n      $lst2[] = $str;\n    }\n\
    \  }\n  return $lst2;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptaslu8ej.php:33\n\
    Stack trace:\n#0 /tmp/tmptaslu8ej.php(41): test()\n#1 {main}\n  thrown in /tmp/tmptaslu8ej.php\
    \ on line 33\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $lst = array_filter($lst, function($x)\
    \ {\n    return (strlen($x) % 2 == 0);\n  });\n  asort($lst);\n  return $lst;\n\
    }\n$test = array(\"aa\", \"a\", \"aaa\");\nvar_dump(sorted_list_sum($test));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(1) {\n  [0]=>\n  string(2) \"aa\"\n}\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp3qa8thnh.php:32\nStack trace:\n#0 /tmp/tmp3qa8thnh.php(40):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp3qa8thnh.php on line 32\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $words = explode(',', $lst);\n\
    \    $words_lens = array_map('strlen', $words);\n    sort($words_lens);\n    $words_order\
    \ = array_flip($words_lens);\n    $sorted_words = array();\n    foreach ($words\
    \ as $word) {\n        $len = strlen($word);\n        if (array_key_exists($len,\
    \ $words_order)) {\n            array_push($sorted_words, $word);\n          \
    \  unset($words_order[$len]);\n        }\n    }\n    return $sorted_words;\n}\n\
    \n$ret = sorted_list_sum('aa,a,aaa');\nprint_r($ret);\necho \"\\n\";\n$ret = sorted_list_sum('ab,a,aaa,cd');\n\
    print_r($ret);\necho \"\\n\";\n$ret = sorted_list_sum('ab,a,aaa,cd,abc,abd,bb,dd');\n\
    print_r($ret);\necho \"\\n\";\n$ret = sorted_list_sum('ab,a,aaa,cd,abc,abd,bb,dd,ab');\n\
    print_r($ret);\necho \"\\n\";\n$ret = sorted_list_sum('ab,a,aaa,cd,abc,abd,bb,dd,ab,ab,ab,ab,bb,bb,bb,bb,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "ab,a,aaa,cd,abc,abd,bb,dd,ab,a..."
    in /tmp/tmpjom1epg8.php on line 45

    '
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $res = array();\n  foreach ($lst\
    \ as $val) {\n    if (!($val % 2)) {\n      $res[] = $val;\n    }\n  }\n  return\
    \ $res;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: string %\
    \ int in /tmp/tmp0d2mk5ys.php:20\nStack trace:\n#0 /tmp/tmp0d2mk5ys.php(28): sorted_list_sum(Array)\n\
    #1 /tmp/tmp0d2mk5ys.php(32): candidate(Array)\n#2 /tmp/tmp0d2mk5ys.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmp0d2mk5ys.php on line 20\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($lst); $j++) {\n            if\
    \ (strlen($lst[$i]) > strlen($lst[$j])) {\n                $temp = $lst[$i];\n\
    \                $lst[$i] = $lst[$j];\n                $lst[$j] = $temp;\n   \
    \         }\n        }\n    }\n    return $lst;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3fc0g463.php:35\n\
    Stack trace:\n#0 /tmp/tmp3fc0g463.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp3fc0g463.php\
    \ on line 35\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $even = [];\n    $odd = [];\n\
    \    foreach ($lst as $l) {\n        if (strlen($l) % 2 == 0) {\n            $even[]\
    \ = $l;\n        } else {\n            $odd[] = $l;\n        }\n    }\n    sort($even);\n\
    \    return $even;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1efh_c8j.php:42\n\
    Stack trace:\n#0 /tmp/tmp1efh_c8j.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp1efh_c8j.php\
    \ on line 42\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  // input: array\n  // output: array\
    \ with integer sum\n  // strategy: get the sum\n  $sum = 0;\n  foreach ($lst as\
    \ $ele) {\n    $sum += $ele;\n  }\n  return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: int + string\
    \ in /tmp/tmpn6hqe2s0.php:23\nStack trace:\n#0 /tmp/tmpn6hqe2s0.php(29): sorted_list_sum(Array)\n\
    #1 /tmp/tmpn6hqe2s0.php(33): candidate(Array)\n#2 /tmp/tmpn6hqe2s0.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpn6hqe2s0.php on line 23\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst_sum = array();\n    foreach\
    \ ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n            array_push($lst_sum,\
    \ $item);\n        }\n    }\n    sort($lst_sum);\n    return $lst_sum;\n}\n\n\
    $list = [\"aa\", \"a\", \"aaa\"];\nprint_r(sorted_list_sum($list));\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpkwnz20wb.php:41\nStack trace:\n#0 /tmp/tmpkwnz20wb.php(44): test()\n\
    #1 {main}\n  thrown in /tmp/tmpkwnz20wb.php on line 41\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $odd = 0;\n    $even = 0;\n \
    \   $number = 0;\n    while ($number < count($lst)) {\n        if ($lst[$number]\
    \ % 2 == 0) {\n            $even += $lst[$number];\n        } else {\n       \
    \     $odd += $lst[$number];\n        }\n        $number++;\n    }\n    return\
    \ $even - $odd;\n}\n\nprint(sorted_list_sum(array(1,2,3,4,5,6,7,8,9,10)) . \"\\\
    n\");\nprint(sorted_list_sum(array(1,3,5,7,9)) . \"\\n\");\nprint(sorted_list_sum(array(2,4,6,8,10))\
    \ . \"\\n\");\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "5\n-25\n30\n\nFatal error: Uncaught TypeError: Unsupported operand types:\
    \ string % int in /tmp/tmp0hhxn1cc.php:22\nStack trace:\n#0 /tmp/tmp0hhxn1cc.php(36):\
    \ sorted_list_sum(Array)\n#1 /tmp/tmp0hhxn1cc.php(40): candidate(Array)\n#2 /tmp/tmp0hhxn1cc.php(49):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0hhxn1cc.php on line 22\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $lst = array_filter($lst, function($w)\
    \ {\n    return strlen($w) % 2 == 0;\n  });\n  // $lst = array_unique($lst);\n\
    \  sort($lst);\n  return $lst;\n}\n\n$a = array(\"aa\", \"a\", \"aaa\");\n$a =\
    \ array(\"ab\", \"a\", \"aaa\", \"cd\");\n\necho \"<pre>\";\nprint_r(sorted_list_sum($a));\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => ab\n    [1] => cd\n)\n</pre>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpz2gdfp36.php:43\nStack trace:\n#0 /tmp/tmpz2gdfp36.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpz2gdfp36.php on line 43\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $sorted_list = sort_list($lst);\n\
    \    $even_len_words = [];\n    foreach ($sorted_list as $key => $value) {\n \
    \       if (strlen($value) % 2 == 0) {\n            array_push($even_len_words,\
    \ $value);\n        }\n    }\n    return $even_len_words;\n}\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_list() in\
    \ /tmp/tmpvzjymbvr.php:18\nStack trace:\n#0 /tmp/tmpvzjymbvr.php(28): sorted_list_sum(Array)\n\
    #1 /tmp/tmpvzjymbvr.php(32): candidate(Array)\n#2 /tmp/tmpvzjymbvr.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpvzjymbvr.php on line 18\n"
  timestamp: 1659823661
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $ret = array();\n    foreach\
    \ ($lst as $i) {\n        if (strlen($i) % 2 === 0) {\n            $ret[] = $i;\n\
    \        }\n    }\n    $ret = array_unique($ret);\n    usort($ret, function($a,\
    \ $b) {\n        if (strlen($a) === strlen($b)) {\n            return strnatcmp($a,\
    \ $b);\n        }\n        return strlen($a) - strlen($b);\n    });\n    return\
    \ $ret;\n}\necho implode(', ', sorted_list_sum(array(\"aa\", \"a\", \"aaa\")))\
    \ . '<br>';\necho implode(', ', sorted_list_sum(array(\"ab\", \"a\", \"aaa\",\
    \ \"cd\"))) . '<br>';\necho implode(', ', sorted_list_sum(array(\"ab\", \"cd\"\
    , \"aa\", \"a\", \"aaa\"))) . '<br>';\nfunction candidate(...$args) {\n    return\
    \ sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: aa<br>ab, cd<br>aa, ab, cd<br>
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $lengths = array();\n  foreach\
    \ ($lst as $word) {\n    $lengths[] = strlen($word);\n  }\n  $res = array();\n\
    \  $idx = 0;\n  while (count($res) < count($lst)) {\n    $smallest = min($lengths);\n\
    \    if ($smallest % 2 == 0) {\n      $res[] = $lst[$idx];\n    }\n    $lengths[$idx]\
    \ = $smallest + 1;\n    $idx++;\n  }\n  return $res;\n}\necho '<p>' . implode(',\
    \ ', sorted_list_sum(array(\"aa\", \"a\", \"aaa\"))) . '</p>';\necho '<p>' . implode(',\
    \ ', sorted_list_sum(array(\"ab\", \"a\", \"aaa\", \"cd\"))) . '</p>';\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 3 in /tmp/tmp9gmlaqro.php on line 27\n\n\
    Warning: Undefined array key 4 in /tmp/tmp9gmlaqro.php on line 27\n<p>aaa, , </p>\n\
    Warning: Undefined array key 4 in /tmp/tmp9gmlaqro.php on line 27\n\nWarning:\
    \ Undefined array key 5 in /tmp/tmp9gmlaqro.php on line 27\n<p>aaa, cd, , </p>\n\
    Warning: Undefined array key 3 in /tmp/tmp9gmlaqro.php on line 27\n\nWarning:\
    \ Undefined array key 4 in /tmp/tmp9gmlaqro.php on line 27\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp9gmlaqro.php:41\nStack trace:\n#0 /tmp/tmp9gmlaqro.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp9gmlaqro.php on line 41\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  if (count($lst) == 0) {\n    return\
    \ 0;\n  }\n  return $lst[0] + sorted_list_sum(array_slice($lst, 1));\n}\n$list\
    \ = array(\"aa\", \"a\", \"aaa\");\necho sorted_list_sum($list);\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: string +\
    \ int in /tmp/tmpy372vc8z.php:21\nStack trace:\n#0 /tmp/tmpy372vc8z.php(21): sorted_list_sum(Array)\n\
    #1 /tmp/tmpy372vc8z.php(21): sorted_list_sum(Array)\n#2 /tmp/tmpy372vc8z.php(24):\
    \ sorted_list_sum(Array)\n#3 {main}\n  thrown in /tmp/tmpy372vc8z.php on line\
    \ 21\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $result = array();\n    $temp\
    \ = array();\n    foreach ($lst as $string) {\n        $len = strlen($string);\n\
    \        if ($len % 2 == 0) {\n            $result[] = $string;\n        } else\
    \ {\n            $temp[] = $string;\n        }\n    }\n    sort($result);\n  \
    \  sort($temp);\n    return array_merge($result, $temp);\n}\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv5s_m3c7.php:37\n\
    Stack trace:\n#0 /tmp/tmpv5s_m3c7.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpv5s_m3c7.php\
    \ on line 37\n"
  timestamp: 1659979917
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $len = count($lst);\n  if ($len\
    \ == 0) {\n    return array();\n  } else if ($len == 1) {\n    return $lst;\n\
    \  }\n  $mid = $len / 2;\n  $left = array_slice($lst, 0, $mid);\n  $right = array_slice($lst,\
    \ $mid);\n  $left = sorted_list_sum($left);\n  $right = sorted_list_sum($right);\n\
    \  return sorted_list_merge($left, $right);\n}\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: Implicit conversion from float 1.5 to int loses precision\
    \ in /tmp/tmphfi3mjd6.php on line 25\n\nDeprecated: Implicit conversion from float\
    \ 1.5 to int loses precision in /tmp/tmphfi3mjd6.php on line 26\n\nFatal error:\
    \ Uncaught Error: Call to undefined function sorted_list_merge() in /tmp/tmphfi3mjd6.php:29\n\
    Stack trace:\n#0 /tmp/tmphfi3mjd6.php(28): sorted_list_sum(Array)\n#1 /tmp/tmphfi3mjd6.php(33):\
    \ sorted_list_sum(Array)\n#2 /tmp/tmphfi3mjd6.php(37): candidate(Array)\n#3 /tmp/tmphfi3mjd6.php(46):\
    \ test()\n#4 {main}\n  thrown in /tmp/tmphfi3mjd6.php on line 29\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $odds = [];\n    $sorted_lst\
    \ = [];\n    foreach ($lst as $str) {\n        if (strlen($str) % 2 !== 0) {\n\
    \            array_push($odds, $str);\n        }\n    }\n    sort($odds);\n  \
    \  foreach ($lst as $str) {\n        if (strlen($str) % 2 == 0) {\n          \
    \  array_push($sorted_lst, $str);\n        }\n    }\n    foreach ($odds as $str)\
    \ {\n        array_push($sorted_lst, $str);\n    }\n    return $sorted_lst;\n\
    }\n\n$words = array(\"aa\", \"a\", \"aaa\");\n$words2 = array(\"ab\", \"a\", \"\
    aaa\", \"cd\");\nprint_r(sorted_list_sum($words));\nprint_r(sorted_list_sum($words2));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n    [1] => a\n    [2] => aaa\n)\nArray\n(\n  \
    \  [0] => ab\n    [1] => cd\n    [2] => a\n    [3] => aaa\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpsu85rjh7.php:46\nStack trace:\n#0 /tmp/tmpsu85rjh7.php(55):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpsu85rjh7.php on line 46\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  return $lst;\n}\n\n$my_array =\
    \ array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($my_array));\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n    [1] => a\n    [2] => aaa\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp6jj3668h.php:28\nStack trace:\n\
    #0 /tmp/tmp6jj3668h.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp6jj3668h.php\
    \ on line 28\n"
  timestamp: 1659979917
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    foreach ($lst as $val) {\n  \
    \      $newarr[] = strlen($val);\n    }\n    $newarr = array_unique($newarr);\n\
    \    sort($newarr);\n    foreach ($newarr as $len) {\n        foreach ($lst as\
    \ $key => $val) {\n            if (strlen($val) == $len) {\n                $newlst[]\
    \ = $val;\n                unset($lst[$key]);\n            }\n        }\n    }\n\
    \    return $newlst;\n}\n\necho implode(', ', sorted_list_sum(array(\"ab\", \"\
    a\", \"aaa\", \"cd\")));\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "a, ab, cd, aaa\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8t2h2l0m.php:40\n\
    Stack trace:\n#0 /tmp/tmp8t2h2l0m.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp8t2h2l0m.php\
    \ on line 40\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    //$lst = ['aa', 'a', 'aaa'];\n\
    \    //$lst = ['ab', 'a', 'aaa', 'cd'];\n    $temp = $lst;\n    foreach ($lst\
    \ as $item) {\n        if(strlen($item) % 2 != 0) {\n            $index = array_search($item,\
    \ $temp);\n            unset($temp[$index]);\n        }\n    }\n    sort($temp);\n\
    \    return $temp;\n}\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe_2j4w4t.php:41\n\
    Stack trace:\n#0 /tmp/tmpe_2j4w4t.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpe_2j4w4t.php\
    \ on line 41\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  for ($i = 0; $i < sizeof($lst);\
    \ $i++) {\n    for ($j = $i + 1; $j < sizeof($lst); $j++) {\n      if (strlen($lst[$i])\
    \ > strlen($lst[$j])) {\n        $temp = $lst[$i];\n        $lst[$i] = $lst[$j];\n\
    \        $lst[$j] = $temp;\n      }\n    }\n  }\n  return $lst;\n}\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6py2mdqp.php:34\n\
    Stack trace:\n#0 /tmp/tmp6py2mdqp.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp6py2mdqp.php\
    \ on line 34\n"
  timestamp: 1659979917
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $odd_lst = array();\n    $even_lst\
    \ = array();\n    $duplicate_even_lst = array();\n    foreach ($lst as $item)\
    \ {\n        if (strlen($item) % 2 == 0) {\n            $even_lst[] = $item;\n\
    \        } else {\n            $odd_lst[] = $item;\n        }\n    }\n    // Use\
    \ built in PHP sorting functions to sort array.\n    sort($even_lst);\n    sort($odd_lst);\n\
    \    // Since PHP sort is in-place, items need to be added to array to make duplicate.\n\
    \    foreach ($even_lst as $even_item) {\n        $duplicate_even_lst[] = $even_item;\n\
    \    }\n    // Add even list to odd list and remove duplicates.\n    $odd_lst\
    \ = array_merge($odd_lst, $duplicate_even_lst);\n    $odd_lst = array_unique($odd_lst);\n\
    \    return $odd_lst;\n}\n\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\necho\
    \ implode(\", \", sorted_list_sum($lst));\nfunction candidate(...$args) {\n  \
    \  return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "a, aaa, ab, cd\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwr4q7r9s.php:48\n\
    Stack trace:\n#0 /tmp/tmpwr4q7r9s.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpwr4q7r9s.php\
    \ on line 48\n"
  timestamp: 1659979917
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n\t// $n = 1;\n\t// $m = 2;\n\t//\
    \ if($lst[$n] < $lst[$m]) {\n\t// \t$lst[$n] = $lst[$m];\n\t// }\n\t// elseif($lst[$n]\
    \ > $lst[$m]) {\n\t// \t$lst[$n] = $lst[$m];\n\t// }\n\t// else {\n\t// \t$lst[$n]\
    \ = $lst[$m];\n\t// }\n\t// return $lst;\n\t$n = 0;\n\tforeach($lst as $key) {\n\
    \t\tforeach($lst as $key) {\n\t\t\tif($lst[$n] < $lst[$n+1]) {\n\t\t\t\t$lst[$n]\
    \ = $lst[$n+1];\n\t\t\t}\n\t\t\telseif($lst[$n] > $lst[$n+1]) {\n\t\t\t\t$lst[$n]\
    \ = $lst[$n+1];\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$lst[$n] = $lst[$n+1];\n\t\t\t\
    }\n\t\t\t$n += 1;\n\t\t}\n\t}\n\treturn $lst;\n}\n\necho \"Here is your sorted\
    \ list: \".PHP_EOL;\nprint_r(sorted_list_sum(array(\"aa\", \"a\", \"aaa\")));\n\
    echo PHP_EOL;\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Here is your sorted list: \n\nWarning: Undefined array key 3 in /tmp/tmps4odl365.php\
    \ on line 33\n\nWarning: Undefined array key 3 in /tmp/tmps4odl365.php on line\
    \ 36\n\nWarning: Undefined array key 3 in /tmp/tmps4odl365.php on line 37\n\n\
    Warning: Undefined array key 3 in /tmp/tmps4odl365.php on line 33\n\nWarning:\
    \ Undefined array key 4 in /tmp/tmps4odl365.php on line 33\n\nWarning: Undefined\
    \ array key 3 in /tmp/tmps4odl365.php on line 36\n\nWarning: Undefined array key\
    \ 4 in /tmp/tmps4odl365.php on line 36\n\nWarning: Undefined array key 4 in /tmp/tmps4odl365.php\
    \ on line 40\n\nWarning: Undefined array key 4 in /tmp/tmps4odl365.php on line\
    \ 33\n\nWarning: Undefined array key 5 in /tmp/tmps4odl365.php on line 33\n\n\
    Warning: Undefined array key 4 in /tmp/tmps4odl365.php on line 36\n\nWarning:\
    \ Undefined array key 5 in /tmp/tmps4odl365.php on line 36\n\nWarning: Undefined\
    \ array key 5 in /tmp/tmps4odl365.php on line 40\n\nWarning: Undefined array key\
    \ 5 in /tmp/tmps4odl365.php on line 33\n\nWarning: Undefined array key 6 in /tmp/tmps4odl365.php\
    \ on line 33\n\nWarning: Undefined array key 5 in /tmp/tmps4odl365.php on line\
    \ 36\n\nWarning: Undefined array key 6 in /tmp/tmps4odl365.php on line 36\n\n\
    Warning: Undefined array key 6 in /tmp/tmps4odl365.php on line 40\n\nWarning:\
    \ Undefined array key 6 in /tmp/tmps4odl365.php on line 33\n\nWarning: Undefined\
    \ array key 7 in /tmp/tmps4odl365.php on line 33\n\nWarning: Undefined array key\
    \ 6 in /tmp/tmps4odl365.php on line 36\n\nWarning: Undefined array key 7 in /tmp/tmps4odl365.php\
    \ on line 36\n\nWarning: Undefined array key 7 in /tmp/tmps4odl365.php on line\
    \ 40\n\nWarning: Undefined array key 7 in /tmp/tmps4odl365.php on line 33\n\n\
    Warning: Undefined array key 8 in /tmp/tmps4odl365.php on line 33\n\nWarning:\
    \ Undefined array key 7 in /tmp/tmps4odl365.php on line 36\n\nWarning: Undefined\
    \ array key 8 in /tmp/tmps4odl365.php on line 36\n\nWarning: Undefined array key\
    \ 8 in /tmp/tmps4odl365.php on line 40\n\nWarning: Undefined array key 8 in /tmp/tmps4odl365.php\
    \ on line 33\n\nWarning: Undefined array key 9 in /tmp/tmps4odl365.php on line\
    \ 33\n\nWarning: U"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    // $lst = array_unique($lst);\n\
    \    $arr = array();\n    $arr_len = array();\n    foreach ($lst as $elem) {\n\
    \        $arr[] = $elem;\n        $arr_len[] = strlen($elem);\n    }\n    array_multisort($arr_len,\
    \ $arr);\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv7a_qcze.php:34\n\
    Stack trace:\n#0 /tmp/tmpv7a_qcze.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpv7a_qcze.php\
    \ on line 34\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $results = array();\n    $len\
    \ = strlen($lst[0]);\n    $i = 0;\n    while ($i < count($lst)) {\n        if\
    \ ($lst[$i] !== null) {\n            $results[] = $lst[$i];\n            $j =\
    \ $i + 1;\n            while ($j < count($lst)) {\n                if ($lst[$j]\
    \ !== null && strlen($lst[$j]) === $len) {\n                    $results[] = $lst[$j];\n\
    \                    $lst[$j] = null;\n                }\n                $j++;\n\
    \            }\n        }\n        $i++;\n    }\n    return $results;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8mfyca02.php:43\n\
    Stack trace:\n#0 /tmp/tmp8mfyca02.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp8mfyca02.php\
    \ on line 43\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $str_array = [];\n    $res =\
    \ [];\n    foreach ($lst as $str) {\n        $str_array[strlen($str)] = $str;\n\
    \    }\n    ksort($str_array);\n    $str_array = array_values($str_array);\n \
    \   foreach ($str_array as $str) {\n        if (strlen($str) % 2 == 0) {\n   \
    \         $res[] = $str;\n        }\n    }\n    return $res;\n}\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw4ob5v59.php:40\n\
    Stack trace:\n#0 /tmp/tmpw4ob5v59.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpw4ob5v59.php\
    \ on line 40\n"
  timestamp: 1659979917
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  sort($lst);\n  return $lst;\n}\n\
    $output = sorted_list_sum(array(\"c\", \"aa\", \"a\", \"aaa\"));\nprint_r($output);\n\
    echo \"<br>\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => a\n    [1] => aa\n    [2] => aaa\n    [3] => c\n)\n\
    <br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpywa_t7ni.php:29\n\
    Stack trace:\n#0 /tmp/tmpywa_t7ni.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpywa_t7ni.php\
    \ on line 29\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $result = array();\n  foreach ($lst\
    \ as $item) {\n    if (strlen($item) % 2 === 0) {\n      $result[] = $item;\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptn13a94f.php:33\n\
    Stack trace:\n#0 /tmp/tmptn13a94f.php(41): test()\n#1 {main}\n  thrown in /tmp/tmptn13a94f.php\
    \ on line 33\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    return array_reduce($lst, function($acc,\
    \ $el) {\n        if (is_int($el)) {\n            return $acc + $el;\n       \
    \ } else {\n            return $acc;\n        }\n    }, 0);\n}\necho sorted_list_sum(array(1,\
    \ 'a', 2, 'b'));\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "3\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxwxsk2sn.php:32\n\
    Stack trace:\n#0 /tmp/tmpxwxsk2sn.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpxwxsk2sn.php\
    \ on line 32\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $cnt = count($lst);\n    $res\
    \ = array();\n    $map = array();\n    for ($i = 0; $i < $cnt; $i++) {\n     \
    \   $len = strlen($lst[$i]);\n        if (!isset($map[$len])) {\n            $map[$len]\
    \ = array();\n        }\n        $map[$len][] = $lst[$i];\n    }\n    ksort($map);\n\
    \    foreach ($map as $key => $ele) {\n        if (count($ele) > 1) {\n      \
    \      sort($ele);\n        }\n        $res = array_merge($res, $ele);\n    }\n\
    \    return $res;\n}\n\n$lst = array(\"a\", \"ab\", \"aa\", \"aa\", \"cd\", \"\
    aaa\");\n$lst = sorted_list_sum($lst);\nprint_r($lst);\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => a\n    [1] => aa\n    [2] => aa\n    [3] => ab\n \
    \   [4] => cd\n    [5] => aaa\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpj3gs5wlo.php:46\nStack trace:\n#0 /tmp/tmpj3gs5wlo.php(55): test()\n\
    #1 {main}\n  thrown in /tmp/tmpj3gs5wlo.php on line 46\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $output = array();\n  foreach ($lst\
    \ as $value) {\n    $output = array_merge($output, $value);\n  }\n  return $output;\n\
    }\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: array_merge(): Argument #2 must be of\
    \ type array, string given in /tmp/tmp2ihe9m3y.php:20\nStack trace:\n#0 /tmp/tmp2ihe9m3y.php(20):\
    \ array_merge(Array, 'aa')\n#1 /tmp/tmp2ihe9m3y.php(25): sorted_list_sum(Array)\n\
    #2 /tmp/tmp2ihe9m3y.php(29): candidate(Array)\n#3 /tmp/tmp2ihe9m3y.php(38): test()\n\
    #4 {main}\n  thrown in /tmp/tmp2ihe9m3y.php on line 20\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_diff($lst, array_filter($lst,\
    \ function($str) {\n        return strlen($str) % 2;\n    }));\n    asort($lst);\n\
    \    return $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\necho \">>> list_sort(array(\\\
    \"aa\\\", \\\"a\\\", \\\"aaa\\\"))\\n\";\nvar_dump(sorted_list_sum($lst));\n\n\
    $lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\necho \">>> list_sort(array(\\\"\
    ab\\\", \\\"a\\\", \\\"aaa\\\", \\\"cd\\\"))\\n\";\nvar_dump(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: ">>> list_sort(array(\"aa\", \"a\", \"aaa\"))\narray(1) {\n  [0]=>\n  string(2)\
    \ \"aa\"\n}\n>>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\narray(2) {\n\
    \  [0]=>\n  string(2) \"ab\"\n  [3]=>\n  string(2) \"cd\"\n}\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpec366vy1.php:38\nStack trace:\n#0 /tmp/tmpec366vy1.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpec366vy1.php on line 38\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  sort($lst);\n  $lst_new = array();\n\
    \  for ($i = 0; $i < count($lst); $i++) {\n    if ($i % 2 == 0) {\n      $lst_new[]\
    \ = $lst[$i];\n    }\n  }\n  return $lst_new;\n}\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc0j3z4_q.php:32\n\
    Stack trace:\n#0 /tmp/tmpc0j3z4_q.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpc0j3z4_q.php\
    \ on line 32\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    // Your Code Here\n    $length\
    \ = count($lst);\n    $odd = array();\n    for ($i = 0; $i < $length; $i++) {\n\
    \        if (strlen($lst[$i]) % 2 == 0) {\n            array_push($odd, $lst[$i]);\n\
    \        }\n    }\n    sort($odd);\n    return $odd;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl4_jmm5k.php:41\n\
    Stack trace:\n#0 /tmp/tmpl4_jmm5k.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpl4_jmm5k.php\
    \ on line 41\n"
  timestamp: 1659979918
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $res = array();\n  foreach ($lst\
    \ as $l) {\n    if (strlen($l) % 2 === 0) {\n      $res[] = $l;\n    }\n  }\n\
    \  // Sorting array by length\n  usort($res, function($a, $b) {\n    if (strlen($a)\
    \ === strlen($b)) {\n      return strcmp($a, $b);\n    }\n    return strlen($a)\
    \ - strlen($b);\n  });\n  return $res;\n}\nprint_r(sorted_list_sum(array(\"aa\"\
    , \"a\", \"aaa\")));\nprint_r(sorted_list_sum(array(\"ab\", \"a\", \"aaa\", \"\
    cd\")));\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $newlst = array();\n    for ($i\
    \ = 0; $i < count($lst); $i++) {\n        if (strlen($lst[$i]) % 2 == 0) {\n \
    \           array_push($newlst, $lst[$i]);\n        }\n    }\n    return $newlst;\n\
    }\n$list1 = array(\"aa\", \"a\", \"aaa\");\necho sorted_list_sum($list1);\necho\
    \ \"<br>\";\n$list2 = array(\"ab\", \"a\", \"aaa\", \"cd\");\necho sorted_list_sum($list2);\n\
    \nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpj35kbzff.php on line 27\n\
    Array<br>\nWarning: Array to string conversion in /tmp/tmpj35kbzff.php on line\
    \ 30\nArray\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj35kbzff.php:38\n\
    Stack trace:\n#0 /tmp/tmpj35kbzff.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpj35kbzff.php\
    \ on line 38\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $result = array();\n  // Sort by\
    \ length\n  usort($lst, function($a, $b) {\n    if (strlen($a) == strlen($b))\
    \ {\n      return $a < $b ? -1 : 1;\n    }\n    return strlen($a) < strlen($b)\
    \ ? -1 : 1;\n  });\n  // Sum list\n  $prev = null;\n  $count = 0;\n  foreach ($lst\
    \ as $item) {\n    if ($prev !== null && $prev !== $item) {\n      $result[] =\
    \ array(\n        'val' => $prev,\n        'count' => $count,\n      );\n    \
    \  $count = 0;\n    }\n    $prev = $item;\n    $count++;\n  }\n  if ($prev !==\
    \ null) {\n    $result[] = array(\n      'val' => $prev,\n      'count' => $count,\n\
    \    );\n  }\n  // Sort by count\n  usort($result, function($a, $b) {\n    if\
    \ ($a['count'] == $b['count']) {\n      return $a['val'] < $b['val'] ? -1 : 1;\n\
    \    }\n    return $a['count'] < $b['count'] ? -1 : 1;\n  });\n  // Flat result\n\
    \  $result = array_map(function($item) {\n    return $item['val'];\n  }, $result);\n\
    \  return $result;\n}\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4k3ee0nn.php:64\n\
    Stack trace:\n#0 /tmp/tmp4k3ee0nn.php(73): test()\n#1 {main}\n  thrown in /tmp/tmp4k3ee0nn.php\
    \ on line 64\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst_odd = array();\n    $lst_even\
    \ = array();\n    $ret = array();\n    foreach ($lst as $element) {\n        if\
    \ (strlen($element) % 2 == 0) {\n            array_push($lst_even, $element);\n\
    \        } else {\n            array_push($lst_odd, $element);\n        }\n  \
    \  }\n    sort($lst_even);\n    sort($lst_odd);\n    $ret = array_merge($lst_even,\
    \ $lst_odd);\n    return $ret;\n}\n$list_test = array(\"a\", \"ab\", \"aaa\",\
    \ \"aaaaa\", \"b\", \"bb\", \"bbb\", \"bbbb\");\nprint_r(sorted_list_sum($list_test));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => ab\n    [1] => bb\n    [2] => bbbb\n    [3] => a\n\
    \    [4] => aaa\n    [5] => aaaaa\n    [6] => b\n    [7] => bbb\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpx2m25jw5.php:40\nStack trace:\n\
    #0 /tmp/tmpx2m25jw5.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpx2m25jw5.php\
    \ on line 40\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $arr = [];\n    foreach ($lst\
    \ as $val) {\n        if (strlen($val) % 2 == 0) {\n            $arr[] = $val;\n\
    \        }\n    }\n    usort($arr, function ($a, $b) {\n        return strcmp($a,\
    \ $b);\n    });\n    return $arr;\n}\n\n$lst = [\"aa\", \"a\", \"aaa\"];\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpwdda91dl.php:43\nStack trace:\n#0 /tmp/tmpwdda91dl.php(46): test()\n\
    #1 {main}\n  thrown in /tmp/tmpwdda91dl.php on line 43\n"
  timestamp: 1659979918
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $sort_string = function($a, $b)\
    \ {\n        $len_a = strlen($a);\n        $len_b = strlen($b);\n        if ($len_a\
    \ == $len_b) {\n            return strcmp($a, $b);\n        }\n        return\
    \ $len_a - $len_b;\n    };\n    $new_list = array_filter($lst, function($x) {\n\
    \        return strlen($x) % 2 == 0;\n    });\n    usort($new_list, $sort_string);\n\
    \    return $new_list;\n}\n$list = array(\"ab\", \"a\", \"aaa\", \"cd\");\nvar_dump(sorted_list_sum($list));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(2) {\n  [0]=>\n  string(2) \"ab\"\n  [1]=>\n  string(2) \"cd\"\n\
    }\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst_alnum = array_filter($lst,\
    \ 'ctype_alnum');\n    $lst_count = array_count_values($lst_alnum);\n    $lst_count_sort\
    \ = $lst_count;\n    asort($lst_count_sort);\n    $top_items = array_keys(array_slice($lst_count_sort,\
    \ -1, 1, true));\n    $top_item = $top_items[0];\n    $top_item_length = strlen($top_item);\n\
    \    $tuple_array = array();\n    for ($i = 0; $i < count($lst); $i++) {\n   \
    \     if (ctype_alnum($lst[$i])) {\n            if (strlen($lst[$i]) == $top_item_length)\
    \ {\n                if ($lst[$i] == $top_item) {\n                    $lst[$i]\
    \ = \"\";\n                }\n            }\n        }\n    }\n    $lst_fltr =\
    \ array_filter($lst);\n    $lst_fltr_non_alnum = array_filter($lst_fltr, function($str)\
    \ { return !ctype_alnum($str); });\n    $lst_fltr_alnum = array_filter($lst_fltr,\
    \ 'ctype_alnum');\n    asort($lst_fltr_alnum);\n    $lst_fltr_alnum_multi_append\
    \ = array();\n    foreach ($lst_fltr_alnum as $key => $value) {\n        for ($i\
    \ = 0; $i < $lst_count[$value]; $i++) {\n            array_push($lst_fltr_alnum_multi_append,\
    \ $value);\n        }\n    }\n    $lst_fltr_alnum_multi_append_sorted = $lst_fltr_alnum_multi_append;\n\
    \    asort($lst_fltr_alnum_multi_append_sorted);\n    $lst_fltr_alnum_multi_append_sorted_arr\
    \ = array();\n    foreach\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "(" in /tmp/tmp064zwaga.php
    on line 49

    '
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $sorted_list = $lst;\n  $length\
    \ = count($sorted_list);\n  $flag = 0;\n  while ($flag == 0) {\n    $flag = 1;\n\
    \    for ($i = 0; $i < $length - 1; $i++) {\n      if ($sorted_list[$i] > $sorted_list[$i\
    \ + 1]) {\n        $temp = $sorted_list[$i];\n        $sorted_list[$i] = $sorted_list[$i\
    \ + 1];\n        $sorted_list[$i + 1] = $temp;\n        $flag = 0;\n      }\n\
    \    }\n  }\n  return $sorted_list;\n}\n\nfunction candidate(...$args) {\n   \
    \ return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqys2z38p.php:40\n\
    Stack trace:\n#0 /tmp/tmpqys2z38p.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpqys2z38p.php\
    \ on line 40\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $res = [];\n    foreach ($lst\
    \ as $x) {\n        if (strlen($x) % 2 == 0) {\n            $res[] = $x;\n   \
    \     }\n    }\n    sort($res);\n    return $res;\n}\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4zox3zht.php:38\n\
    Stack trace:\n#0 /tmp/tmp4zox3zht.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp4zox3zht.php\
    \ on line 38\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($a)\
    \ { return strlen($a) % 2 == 0; });\n    sort($lst);\n    return $lst;\n}\nprint_r(sorted_list_sum([\"\
    aa\", \"a\", \"aaa\"]));\nprint_r(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"\
    cd\"]));\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr0bv_iox.php:35\nStack\
    \ trace:\n#0 /tmp/tmpr0bv_iox.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpr0bv_iox.php\
    \ on line 35\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $sorted_list = array();\n   \
    \ foreach ($lst as $str) {\n        if (strlen($str) % 2 == 0) {\n           \
    \ array_push($sorted_list, $str);\n        }\n    }\n    sort($sorted_list);\n\
    \    return $sorted_list;\n}\necho json_encode(sorted_list_sum(array(\"aa\", \"\
    a\", \"aaa\")));\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "[\"aa\"]\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprrx_4xyz.php:39\n\
    Stack trace:\n#0 /tmp/tmprrx_4xyz.php(42): test()\n#1 {main}\n  thrown in /tmp/tmprrx_4xyz.php\
    \ on line 39\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $newLst = array();\n    foreach\
    \ ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n            array_push($newLst,\
    \ $item);\n        }\n    }\n    return $newLst;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprtq5ktgo.php:33\n\
    Stack trace:\n#0 /tmp/tmprtq5ktgo.php(41): test()\n#1 {main}\n  thrown in /tmp/tmprtq5ktgo.php\
    \ on line 33\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $sorted_lst = array();\n    foreach\
    \ ($lst as $word) {\n        if (strlen($word) % 2 == 0) {\n            array_push($sorted_lst,\
    \ $word);\n        }\n    }\n    sort($sorted_lst);\n    return $sorted_lst;\n\
    }\nprint_r(sorted_list_sum(array(\"aa\", \"a\", \"aaa\")));\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpm4e_qwwv.php:39\nStack trace:\n#0 /tmp/tmpm4e_qwwv.php(42): test()\n\
    #1 {main}\n  thrown in /tmp/tmpm4e_qwwv.php on line 39\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $a = 0;\n    foreach ($lst as\
    \ $v) {\n        $a += $v;\n    }\n    return $a;\n}\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: int + string\
    \ in /tmp/tmpdue3ujk3.php:20\nStack trace:\n#0 /tmp/tmpdue3ujk3.php(25): sorted_list_sum(Array)\n\
    #1 /tmp/tmpdue3ujk3.php(29): candidate(Array)\n#2 /tmp/tmpdue3ujk3.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpdue3ujk3.php on line 20\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $out = array();\n    foreach\
    \ ($lst as $value) {\n        $out[] = strlen($value);\n    }\n    sort($out);\n\
    \    return $out;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoukcmjy_.php:31\n\
    Stack trace:\n#0 /tmp/tmpoukcmjy_.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpoukcmjy_.php\
    \ on line 31\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  // put code here\n  $odd_arr =\
    \ array();\n  for ($i = 0; $i < count($lst); $i++) {\n    if (strlen($lst[$i])\
    \ % 2 == 0) {\n      array_push($odd_arr, $lst[$i]);\n    }\n  }\n  sort($odd_arr);\n\
    \  return $odd_arr;\n}\n\n$example_input = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($example_input));\n\
    \nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpvs0bzqsu.php:43\nStack trace:\n#0 /tmp/tmpvs0bzqsu.php(46): test()\n\
    #1 {main}\n  thrown in /tmp/tmpvs0bzqsu.php on line 43\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $new_lst = array();\n    $tmp_lst\
    \ = array();\n    // loop over the array and get length of each element\n    foreach\
    \ ($lst as $key => $value) {\n        // if length is even, then store it in temp\
    \ array\n        if (strlen($value) % 2 == 0) {\n            $tmp_lst[$key] =\
    \ $value;\n        }\n    }\n    // sort the temp array alphabetically\n    sort($tmp_lst);\n\
    \    // add temp array to new array\n    foreach ($tmp_lst as $key => $value)\
    \ {\n        $new_lst[] = $value;\n    }\n    return $new_lst;\n}\n\n$a = array(\"\
    a\", \"aa\", \"aaa\", \"bb\", \"bbb\", \"ccc\", \"dddd\");\nprint_r(sorted_list_sum($a));\n\
    \nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n    [1] => bb\n    [2] => dddd\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpkolpcamw.php:50\nStack trace:\n\
    #0 /tmp/tmpkolpcamw.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpkolpcamw.php\
    \ on line 50\n"
  timestamp: 1659979918
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($i)\
    \ {\n        return strlen($i) % 2 == 0;\n    });\n    usort($lst, function($a,\
    \ $b) {\n        return strlen($a) == strlen($b) ? strcmp($a, $b) : strlen($a)\
    \ - strlen($b);\n    });\n    return $lst;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $sorted_list = array();\n   \
    \ $sorted_lengths = array();\n    $char_counter = 0;\n    $sorted_lengths = array_map('strlen',\
    \ $lst);\n    sort($sorted_lengths);\n    $sorted_lengths = array_unique($sorted_lengths);\n\
    \    $sorted_lengths = array_values($sorted_lengths);\n    foreach ($sorted_lengths\
    \ as $key => $value) {\n        $word_group = array();\n        $word_group =\
    \ array_filter($lst, function($item) use ($value) {\n            return strlen($item)\
    \ == $value;\n        });\n        sort($word_group);\n        foreach ($word_group\
    \ as $key => $value) {\n            array_push($sorted_list, $value);\n      \
    \  }\n    }\n    return $sorted_list;\n}\n$array = array(\"a\", \"aa\", \"aaa\"\
    , \"b\", \"ab\", \"cd\");\necho \"The array <pre>\";\nprint_r($array);\necho \"\
    </pre> is sorted by length then by alphabetical order to <pre>\";\nprint_r(sorted_list_sum($array));\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "The array <pre>Array\n(\n    [0] => a\n    [1] => aa\n    [2] => aaa\n\
    \    [3] => b\n    [4] => ab\n    [5] => cd\n)\n</pre> is sorted by length then\
    \ by alphabetical order to <pre>Array\n(\n    [0] => a\n    [1] => b\n    [2]\
    \ => aa\n    [3] => ab\n    [4] => cd\n    [5] => aaa\n)\n</pre>\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpc2yfrrct.php:48\nStack trace:\n\
    #0 /tmp/tmpc2yfrrct.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpc2yfrrct.php\
    \ on line 48\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $sort_func = function($a, $b)\
    \ {\n        if (strlen($a) == strlen($b)) {\n            return $a == $b ? 0\
    \ : ($a < $b ? -1 : 1);\n        }\n        return strlen($a) - strlen($b);\n\
    \    };\n    usort($lst, $sort_func);\n    return $lst;\n}\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpew6a79yq.php:32\n\
    Stack trace:\n#0 /tmp/tmpew6a79yq.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpew6a79yq.php\
    \ on line 32\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    return array_sum($lst);\n}\n\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpju92dlv7.php:26\n\
    Stack trace:\n#0 /tmp/tmpju92dlv7.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpju92dlv7.php\
    \ on line 26\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  // $lst = array_unique($lst);\n\
    \  $a = array();\n  foreach ($lst as $item) {\n    $item = str_split($item);\n\
    \    sort($item);\n    $str = implode($item);\n    $a[] = $str;\n  }\n  sort($a);\n\
    \  array_unshift($a, 0);\n  $sum = array_sum($a);\n  return $sum;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprrg70_iu.php:37\n\
    Stack trace:\n#0 /tmp/tmprrg70_iu.php(46): test()\n#1 {main}\n  thrown in /tmp/tmprrg70_iu.php\
    \ on line 37\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $arr = array();\n  foreach ($lst\
    \ as $str) {\n    if (strlen($str) % 2 == 0) {\n      array_push($arr, $str);\n\
    \    }\n  }\n  sort($arr);\n  return $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu5jp_rx6.php:39\n\
    Stack trace:\n#0 /tmp/tmpu5jp_rx6.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpu5jp_rx6.php\
    \ on line 39\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    sort($lst);\n    $sum = 0;\n\
    \    for ($i = 0; $i < count($lst); $i++) {\n        $sum += $lst[$i];\n    }\n\
    \    return $sum;\n}\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: int + string\
    \ in /tmp/tmp7e7qk3a7.php:21\nStack trace:\n#0 /tmp/tmp7e7qk3a7.php(26): sorted_list_sum(Array)\n\
    #1 /tmp/tmp7e7qk3a7.php(30): candidate(Array)\n#2 /tmp/tmp7e7qk3a7.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmp7e7qk3a7.php on line 21\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  foreach ($lst as $element) {\n\
    \    if (is_array($element)) {\n      $lst_new = sorted_list_sum($element);\n\
    \      echo $lst_new;\n    } else {\n      echo $element;\n    }\n  }\n}\n\nsorted_list_sum([[10,\
    \ -5], [1, -1], [2, -2]]);\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "10-51-12-2aaaaaa\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_wu4s_14.php:34\n\
    Stack trace:\n#0 /tmp/tmp_wu4s_14.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp_wu4s_14.php\
    \ on line 34\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $new_lst = array();\n    $num_lst\
    \ = array();\n    foreach ($lst as $v) {\n        $new_lst[$v] = (strlen($v)%2==0);\n\
    \        $num_lst[$v] = strlen($v);\n    }\n    asort($num_lst);\n    $new_lst\
    \ = array_filter($new_lst);\n    $new_lst = array_keys($new_lst);\n    asort($new_lst);\n\
    \    return $new_lst;\n}\n\n$list = array(\"aa\", \"a\", \"aaa\");\necho \"<pre>\"\
    ;\nprint_r(sorted_list_sum($list));\necho \"</pre>\";\n\n$list = array(\"ab\"\
    , \"a\", \"aaa\", \"cd\");\necho \"<pre>\";\nprint_r(sorted_list_sum($list));\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => aa\n)\n</pre><pre>Array\n(\n    [0] => ab\n \
    \   [1] => cd\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3mwdv0qk.php:46\n\
    Stack trace:\n#0 /tmp/tmp3mwdv0qk.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp3mwdv0qk.php\
    \ on line 46\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    //sort array by length\n    $lst\
    \ = array_map('strlen', $lst);\n    array_multisort($lst, SORT_ASC, SORT_NUMERIC,\
    \ $lst);\n    //remove odd length elements\n    $lst = array_filter($lst, 'is_even');\n\
    \    return $lst;\n}\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: array_filter(): Argument #2 ($callback)\
    \ must be a valid callback or null, function \"is_even\" not found or invalid\
    \ function name in /tmp/tmptbnfko8_.php:22\nStack trace:\n#0 /tmp/tmptbnfko8_.php(22):\
    \ array_filter(Array, 'is_even')\n#1 /tmp/tmptbnfko8_.php(26): sorted_list_sum(Array)\n\
    #2 /tmp/tmptbnfko8_.php(30): candidate(Array)\n#3 /tmp/tmptbnfko8_.php(39): test()\n\
    #4 {main}\n  thrown in /tmp/tmptbnfko8_.php on line 22\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $arr = array();\n    foreach\
    \ ($lst as $v) {\n        if (strlen($v) % 2 == 0) {\n            $arr[] = $v;\n\
    \        }\n    }\n    sort($arr);\n    return $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6e8u_xkd.php:39\n\
    Stack trace:\n#0 /tmp/tmp6e8u_xkd.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp6e8u_xkd.php\
    \ on line 39\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $result = [];\n  $len = sizeof($lst);\n\
    \  for ($i = 0; $i < $len; $i++) {\n    if (strlen($lst[$i]) % 2 == 0) {\n   \
    \   array_push($result, $lst[$i]);\n    }\n  }\n  usort($result, 'sort_by_length');\n\
    \  return $result;\n}\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: usort(): Argument #2 ($callback) must\
    \ be a valid callback, function \"sort_by_length\" not found or invalid function\
    \ name in /tmp/tmpp3oik1lz.php:25\nStack trace:\n#0 /tmp/tmpp3oik1lz.php(25):\
    \ usort(Array, 'sort_by_length')\n#1 /tmp/tmpp3oik1lz.php(29): sorted_list_sum(Array)\n\
    #2 /tmp/tmpp3oik1lz.php(33): candidate(Array)\n#3 /tmp/tmpp3oik1lz.php(42): test()\n\
    #4 {main}\n  thrown in /tmp/tmpp3oik1lz.php on line 25\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $ret = array();\n    foreach\
    \ ($lst as $elt) {\n        $len = strlen($elt);\n        if (!array_key_exists($len,\
    \ $ret)) {\n            $ret[$len] = array();\n        }\n        $ret[$len][]\
    \ = $elt;\n    }\n    return $ret;\n}\nfunction candidate(...$args) {\n    return\
    \ sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa5bhnjj3.php:33\n\
    Stack trace:\n#0 /tmp/tmpa5bhnjj3.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpa5bhnjj3.php\
    \ on line 33\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $sum = 0;\n    for ($i = 0; $i\
    \ < count($lst); $i++) {\n        $sum += $lst[$i];\n    }\n    return $sum;\n\
    }\n\n$lst = array(1, 2, 3, 4, 5);\necho sorted_list_sum($lst) . \"\\n\";\n\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n\nFatal error: Uncaught TypeError: Unsupported operand types: int +\
    \ string in /tmp/tmp7t4u4_pm.php:20\nStack trace:\n#0 /tmp/tmp7t4u4_pm.php(29):\
    \ sorted_list_sum(Array)\n#1 /tmp/tmp7t4u4_pm.php(33): candidate(Array)\n#2 /tmp/tmp7t4u4_pm.php(42):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp7t4u4_pm.php on line 20\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    return array_sum($lst);\n}\n\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpju92dlv7.php:26\n\
    Stack trace:\n#0 /tmp/tmpju92dlv7.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpju92dlv7.php\
    \ on line 26\n"
  timestamp: 1659979918
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $even_lst = [];\n    foreach\
    \ ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n            $even_lst[]\
    \ = $item;\n        }\n    }\n    // \u6309\u957F\u5EA6\u6392\u5E8F\uFF0C\u957F\
    \u5EA6\u76F8\u540C\u6309\u5B57\u5178\u6392\u5E8F\n    usort($even_lst, function\
    \ ($a, $b) {\n        if (strlen($a) == strlen($b)) {\n            return strcmp($a,\
    \ $b);\n        }\n        return strlen($a) - strlen($b);\n    });\n    return\
    \ $even_lst;\n}\n\n$list = array(\"aa\", \"a\", \"aaa\");\n$list2 = array(\"ab\"\
    , \"a\", \"aaa\", \"cd\");\n\nprint_r(sorted_list_sum($list));\nprint_r(sorted_list_sum($list2));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    // Implement me.\n    $lst1 =\
    \ [];\n    for ($i = 0; $i < count($lst); $i++) {\n        if (strlen($lst[$i])\
    \ % 2 == 0) {\n            array_push($lst1, $lst[$i]);\n        }\n    }\n  \
    \  sort($lst1);\n    return $lst1;\n}\nfunction candidate(...$args) {\n    return\
    \ sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp049ww2t5.php:39\n\
    Stack trace:\n#0 /tmp/tmp049ww2t5.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp049ww2t5.php\
    \ on line 39\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $sorted = asort($lst);\n  foreach\
    \ ($lst as $val) {\n    return $val;\n  }\n}\nfunction candidate(...$args) {\n\
    \    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsv8nj090.php:28\n\
    Stack trace:\n#0 /tmp/tmpsv8nj090.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpsv8nj090.php\
    \ on line 28\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst_length = count($lst);\n\
    \    if ($lst_length < 2) {\n        return $lst;\n    }\n    else {\n       \
    \ $mid = $lst_length / 2;\n        $left = array_slice($lst, 0, $mid);\n     \
    \   $right = array_slice($lst, $mid);\n        $sorted_left = sorted_list_sum($left);\n\
    \        $sorted_right = sorted_list_sum($right);\n        return sorted_merge($sorted_left,\
    \ $sorted_right);\n    }\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: Implicit conversion from float 1.5 to int loses precision\
    \ in /tmp/tmplrfj5ry8.php on line 24\n\nDeprecated: Implicit conversion from float\
    \ 1.5 to int loses precision in /tmp/tmplrfj5ry8.php on line 25\n\nFatal error:\
    \ Uncaught Error: Call to undefined function sorted_merge() in /tmp/tmplrfj5ry8.php:28\n\
    Stack trace:\n#0 /tmp/tmplrfj5ry8.php(27): sorted_list_sum(Array)\n#1 /tmp/tmplrfj5ry8.php(33):\
    \ sorted_list_sum(Array)\n#2 /tmp/tmplrfj5ry8.php(37): candidate(Array)\n#3 /tmp/tmplrfj5ry8.php(46):\
    \ test()\n#4 {main}\n  thrown in /tmp/tmplrfj5ry8.php on line 28\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n\t$max_len = 0;\n\t$sum = 0;\n\t\
    for ($i = 0; $i < count($lst); $i++) {\n\t\tif (strlen($lst[$i]) > $max_len) {\n\
    \t\t\t$max_len = strlen($lst[$i]);\n\t\t}\n\t}\n\tfor ($i = 0; $i < count($lst);\
    \ $i++) {\n\t\tif (strlen($lst[$i]) < $max_len) {\n\t\t\t$sum = $sum + $lst[$i];\n\
    \t\t}\n\t}\n\treturn $sum;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: int + string\
    \ in /tmp/tmpdoh_9p3p.php:27\nStack trace:\n#0 /tmp/tmpdoh_9p3p.php(34): sorted_list_sum(Array)\n\
    #1 /tmp/tmpdoh_9p3p.php(38): candidate(Array)\n#2 /tmp/tmpdoh_9p3p.php(47): test()\n\
    #3 {main}\n  thrown in /tmp/tmpdoh_9p3p.php on line 27\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $sorted = array();\n  foreach ($lst\
    \ as $element) {\n    if (array_key_exists($element, $sorted)) {\n      $sorted[$element]++;\n\
    \    } else {\n      $sorted[$element] = 1;\n    }\n  }\n  ksort($sorted);\n \
    \ return $sorted;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpql3rl6q8.php:35\n\
    Stack trace:\n#0 /tmp/tmpql3rl6q8.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpql3rl6q8.php\
    \ on line 35\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $odds = array();\n    $evens\
    \ = array();\n    foreach ($lst as $elem) {\n        if (strlen($elem) % 2 ==\
    \ 0) {\n            $evens[] = $elem;\n        } else {\n            $odds[] =\
    \ $elem;\n        }\n    }\n    sort($evens);\n    return $evens;\n}\n$data =\
    \ array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($data));\necho \"</br>\"\
    ;\n\n$data = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($data));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n</br>Array\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq18qxi_s.php:47\n\
    Stack trace:\n#0 /tmp/tmpq18qxi_s.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpq18qxi_s.php\
    \ on line 47\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $oddLengths = array();\n  for ($i\
    \ = 0; $i < count($lst); $i++) {\n    if (strlen($lst[$i]) % 2 != 0) {\n     \
    \ $oddLengths[] = $lst[$i];\n    }\n  }\n  return $oddLengths;\n}\n\n$str = array(\"\
    aa\", \"a\", \"aaa\");\n$str = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($str));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => a\n    [1] => aaa\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmphhclkbst.php:35\nStack trace:\n#0 /tmp/tmphhclkbst.php(44):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmphhclkbst.php on line 35\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_map(function($element)\
    \ {\n        return strlen($element);\n    }, $lst);\n    return array_sum($lst);\n\
    }\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp419rlu55.php:29\n\
    Stack trace:\n#0 /tmp/tmp419rlu55.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp419rlu55.php\
    \ on line 29\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $ret = [];\n    $odds = array_filter($lst,\
    \ function($v) { return (strlen($v) % 2); });\n    if (!empty($odds)) {\n    \
    \    foreach ($odds as $v) {\n            if (in_array($v, $lst)) {\n        \
    \        $nk = array_search($v, $lst);\n                array_splice($lst, $nk,\
    \ 1);\n            }\n        }\n    }\n    // Sort the list by lenght and alphabet\n\
    \    // First by lenght ascending\n    $ret = $lst;\n    asort($ret);\n    //\
    \ array_multisort($ret, SORT_NUMERIC, SORT_ASC);\n    // Then by alphabet, in\
    \ case of same lenght\n    $oldlen = 0;\n    foreach ($ret as $k => $v) {\n  \
    \      if (strlen($v) == $oldlen) {\n            $ret[$k] = strtolower($v);\n\
    \        }\n        $oldlen = strlen($v);\n    }\n    asort($ret);\n    // usort($ret,\
    \ function($a, $b) {\n    //     return (strlen($a) < strlen($b)) || ((strlen($a)\
    \ == strlen($b)) && ($a < $b));\n    // });\n    return $ret;\n}\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcbc7l0wp.php:53\n\
    Stack trace:\n#0 /tmp/tmpcbc7l0wp.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpcbc7l0wp.php\
    \ on line 53\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  // write code here\n}\n\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp18y2nkq9.php:26\n\
    Stack trace:\n#0 /tmp/tmp18y2nkq9.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp18y2nkq9.php\
    \ on line 26\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    // Your code here\n    return\
    \ sort_string($lst);\n}\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_string()\
    \ in /tmp/tmp69e7dh9b.php:19\nStack trace:\n#0 /tmp/tmp69e7dh9b.php(22): sorted_list_sum(Array)\n\
    #1 /tmp/tmp69e7dh9b.php(26): candidate(Array)\n#2 /tmp/tmp69e7dh9b.php(35): test()\n\
    #3 {main}\n  thrown in /tmp/tmp69e7dh9b.php on line 19\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  for ($i = 0; $i < sizeof($lst);\
    \ $i++) {\n    for ($j = 0; $j < sizeof($lst); $j++) {\n      $tmp = 0;\n    \
    \  if ($lst[$i] % 2 != 0 && $lst[$j] % 2 != 0) {\n        if ($lst[$i] > $lst[$j])\
    \ {\n          $tmp = $lst[$i];\n          $lst[$i] = $lst[$j];\n          $lst[$j]\
    \ = $tmp;\n        }\n      }\n    }\n  }\n  return array_sum($lst);\n}\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: string %\
    \ int in /tmp/tmp_7dp46kq.php:21\nStack trace:\n#0 /tmp/tmp_7dp46kq.php(33): sorted_list_sum(Array)\n\
    #1 /tmp/tmp_7dp46kq.php(37): candidate(Array)\n#2 /tmp/tmp_7dp46kq.php(46): test()\n\
    #3 {main}\n  thrown in /tmp/tmp_7dp46kq.php on line 21\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($lst); $j++) {\n            if\
    \ (strlen($lst[$i]) > strlen($lst[$j])) {\n                $tmp = $lst[$i];\n\
    \                $lst[$i] = $lst[$j];\n                $lst[$j] = $tmp;\n    \
    \        }\n        }\n    }\n    $cnt = 0;\n    $ans = array();\n    for ($i\
    \ = 0; $i < count($lst); $i++) {\n        if (strlen($lst[$i]) % 2 == 0) {\n \
    \           $ans[$cnt] = $lst[$i];\n            $cnt++;\n        }\n    }\n  \
    \  return $ans;\n}\n\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\n$lst = sorted_list_sum($lst);\n\
    for ($i = 0; $i < count($lst); $i++) {\n    echo $lst[$i] . \"\\n\";\n}\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "ab\ncd\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp33n574ls.php:54\n\
    Stack trace:\n#0 /tmp/tmp33n574ls.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp33n574ls.php\
    \ on line 54\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $count = 0;\n  foreach ($lst as\
    \ $key => $value) {\n    if(strlen($value) % 2 == 0) {\n      $count++;\n    }\n\
    \  }\n  $arr = array();\n  $arr2 = array();\n  for ($i=0; $i < $count; $i++) {\n\
    \    $arr[] = $lst[$i];\n  }\n  for ($i=$count; $i < count($lst); $i++) {\n  \
    \  $arr2[] = $lst[$i];\n  }\n  sort($arr);\n  sort($arr2);\n  foreach ($arr2 as\
    \ $key => $value) {\n    $arr[] = $value;\n  }\n  return $arr;\n}\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiuy_gyyl.php:44\n\
    Stack trace:\n#0 /tmp/tmpiuy_gyyl.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpiuy_gyyl.php\
    \ on line 44\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $odd_length = function($str)\
    \ { return (strlen($str) & 1) == 1; };\n    $sort_by_length = function($str1,\
    \ $str2) {\n                           $a = strlen($str1);\n                 \
    \          $b = strlen($str2);\n                           if ($a == $b) {\n \
    \                              return strcmp($str1, $str2);\n                \
    \           }\n                           return $a - $b;\n                  \
    \     };\n    $filter_odd_length = function($lst) use ($odd_length) {\n      \
    \                       return array_filter($lst, $odd_length);\n            \
    \             };\n    $sort_by_length_and_alphabet = function($lst) use ($sort_by_length)\
    \ {\n                                        usort($lst, $sort_by_length);\n \
    \                                       return $lst;\n                       \
    \             };\n    $remove_odd_length = function($lst) use ($filter_odd_length)\
    \ {\n                             return $filter_odd_length($lst);\n         \
    \                };\n    $sort_by_length_and_alphabet_then_delete_odd_length =\n\
    \        function($lst) use ($sort_by_length_and_alphabet, $remove_odd_length)\
    \ {\n            return $remove_odd_length($sort_by_length_and_alphabet($lst));\n\
    \        };\n    return $sort_by_length_and_alphabet_then_delete_odd_length($lst);\n\
    }\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiev5w3fx.php:49\n\
    Stack trace:\n#0 /tmp/tmpiev5w3fx.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpiev5w3fx.php\
    \ on line 49\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n\t$lst = array_unique($lst);\n\t\
    $lst = array_values($lst);\n\t$lst_size = count($lst);\n\t$sum = 0;\n\tfor ($i\
    \ = 0; $i < $lst_size; $i++) {\n\t\t$sum += strlen($lst[$i]);\n\t}\n\treturn $sum;\n\
    }\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp81py0gw_.php:33\n\
    Stack trace:\n#0 /tmp/tmp81py0gw_.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp81py0gw_.php\
    \ on line 33\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    return array_sum($lst);\n}\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoe04r4dd.php:25\n\
    Stack trace:\n#0 /tmp/tmpoe04r4dd.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpoe04r4dd.php\
    \ on line 25\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    return join('', $lst);\n}\n\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwrd_d3ro.php:26\n\
    Stack trace:\n#0 /tmp/tmpwrd_d3ro.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpwrd_d3ro.php\
    \ on line 26\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $return_list = array();\n   \
    \ for ($i = 0; $i < count($lst); $i++) {\n        if (strlen($lst[$i]) % 2 ==\
    \ 0) {\n            array_push($return_list, $lst[$i]);\n        }\n    }\n  \
    \  sort($return_list);\n    return $return_list;\n}\n$test = array(\"aa\", \"\
    a\", \"aaa\");\nprint_r(sorted_list_sum($test));\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpflu80iqn.php:40\nStack trace:\n#0 /tmp/tmpflu80iqn.php(43): test()\n\
    #1 {main}\n  thrown in /tmp/tmpflu80iqn.php on line 40\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $re_lst = array();\n    foreach\
    \ ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n            array_push($re_lst,\
    \ $item);\n        }\n    }\n    return $re_lst;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4h69lezq.php:33\n\
    Stack trace:\n#0 /tmp/tmp4h69lezq.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp4h69lezq.php\
    \ on line 33\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $sorted_lst = array();\n    foreach\
    \ ($lst as $word) {\n        if (strlen($word) % 2 != 0) {\n            $sorted_lst[$word]\
    \ = strlen($word);\n        }\n    }\n    arsort($sorted_lst);\n    return array_keys($sorted_lst);\n\
    }\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplclri7y1.php:32\n\
    Stack trace:\n#0 /tmp/tmplclri7y1.php(41): test()\n#1 {main}\n  thrown in /tmp/tmplclri7y1.php\
    \ on line 32\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  // Sort the array by the length\
    \ of the string\n  // then alphabetically.\n  usort($lst, \"length_cmp\");\n \
    \ return array_values($lst);\n}\n\nfunction candidate(...$args) {\n    return\
    \ sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: usort(): Argument #2 ($callback) must\
    \ be a valid callback, function \"length_cmp\" not found or invalid function name\
    \ in /tmp/tmp4kwrid3k.php:20\nStack trace:\n#0 /tmp/tmp4kwrid3k.php(20): usort(Array,\
    \ 'length_cmp')\n#1 /tmp/tmp4kwrid3k.php(25): sorted_list_sum(Array)\n#2 /tmp/tmp4kwrid3k.php(29):\
    \ candidate(Array)\n#3 /tmp/tmp4kwrid3k.php(38): test()\n#4 {main}\n  thrown in\
    \ /tmp/tmp4kwrid3k.php on line 20\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $sum = 0;\n  while (count($lst)\
    \ > 0) {\n    $sum += array_shift($lst);\n  }\n  return $sum;\n}\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: int + string\
    \ in /tmp/tmpt_opu27v.php:20\nStack trace:\n#0 /tmp/tmpt_opu27v.php(25): sorted_list_sum(Array)\n\
    #1 /tmp/tmpt_opu27v.php(29): candidate(Array)\n#2 /tmp/tmpt_opu27v.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmpt_opu27v.php on line 20\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $sum = 0;\n    foreach ($lst\
    \ as $key => $value) {\n        $sum += $value;\n    }\n    return $sum;\n}\n\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: int + string\
    \ in /tmp/tmpge0_dkdg.php:20\nStack trace:\n#0 /tmp/tmpge0_dkdg.php(26): sorted_list_sum(Array)\n\
    #1 /tmp/tmpge0_dkdg.php(30): candidate(Array)\n#2 /tmp/tmpge0_dkdg.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpge0_dkdg.php on line 20\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    // $return = array();\n    $return\
    \ = '';\n    foreach ($lst as $key => $lst_num) {\n        if (strlen($lst_num)\
    \ % 2 == 0) {\n            // $return[] = $lst_num;\n            $return .= $lst_num;\n\
    \        }\n    }\n    return $return;\n}\n\nfunction candidate(...$args) {\n\
    \    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx2ujd6nj.php:34\n\
    Stack trace:\n#0 /tmp/tmpx2ujd6nj.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpx2ujd6nj.php\
    \ on line 34\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $new_array = array();\n  $new_arr\
    \ = array();\n  $length = count($lst);\n  for ($i = 0; $i < $length; $i++) {\n\
    \    $word = $lst[$i];\n    $sorted_string = str_split($word);\n    sort($sorted_string);\n\
    \    $sorted_word = implode(\"\", $sorted_string);\n    $new_array[$sorted_word]\
    \ = $word;\n  }\n  ksort($new_array);\n  $new_arr = array_values($new_array);\n\
    \  return $new_arr;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpohxbxx8w.php:38\n\
    Stack trace:\n#0 /tmp/tmpohxbxx8w.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpohxbxx8w.php\
    \ on line 38\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $result = [];\n    foreach ($lst\
    \ as $value) {\n        $length = strlen($value);\n        if ($length % 2 ==\
    \ 0) {\n            $result[] = $value;\n        }\n    }\n    asort($result);\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpabgupxef.php:35\n\
    Stack trace:\n#0 /tmp/tmpabgupxef.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpabgupxef.php\
    \ on line 35\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    // your code here\n}\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplu36wcyn.php:25\n\
    Stack trace:\n#0 /tmp/tmplu36wcyn.php(34): test()\n#1 {main}\n  thrown in /tmp/tmplu36wcyn.php\
    \ on line 25\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    foreach ($lst as $key => $value)\
    \ {\n        $lst[$key] = strlen($value);\n    }\n    sort($lst);\n    return\
    \ $lst;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1cuj29cq.php:30\n\
    Stack trace:\n#0 /tmp/tmp1cuj29cq.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp1cuj29cq.php\
    \ on line 30\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $sorted_lst = array();\n    foreach\
    \ ($lst as $word) {\n        if (strlen($word) % 2 == 0) {\n            array_push($sorted_lst,\
    \ $word);\n        }\n    }\n    return $sorted_lst;\n}\necho '<pre>';\nprint_r(sorted_list_sum(array(\"\
    aa\", \"a\", \"aaa\")));\necho '</pre>';\n\necho '<pre>';\nprint_r(sorted_list_sum(array(\"\
    ab\", \"a\", \"aaa\", \"cd\")));\necho '</pre>';\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => aa\n)\n</pre><pre>Array\n(\n    [0] => ab\n \
    \   [1] => cd\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnp3nh19n.php:39\n\
    Stack trace:\n#0 /tmp/tmpnp3nh19n.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpnp3nh19n.php\
    \ on line 39\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $ret = [];\n  foreach ($lst as\
    \ $val) {\n    if (strlen($val) % 2 == 0) {\n      $ret[] = $val;\n    }\n  }\n\
    \  sort($ret);\n  return $ret;\n}\necho print_r(sorted_list_sum(array(\"aa\",\
    \ \"a\", \"aaa\")), true) . \"\\n\";\necho print_r(sorted_list_sum(array(\"ab\"\
    , \"a\", \"aaa\", \"cd\")), true) . \"\\n\";\n\nfunction candidate(...$args) {\n\
    \    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmp2mogif.php:41\n\
    Stack trace:\n#0 /tmp/tmpmp2mogif.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpmp2mogif.php\
    \ on line 41\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $new_list = [];\n  foreach ($lst\
    \ as $value) {\n    if (is_string($value)) {\n      if (strlen($value) % 2 ==\
    \ 0) {\n        array_push($new_list, $value);\n      }\n    }\n  }\n  sort($new_list);\n\
    \  return $new_list;\n}\n\n$num1 = array(\"aa\", \"a\", \"aaa\");\n$num2 = array(\"\
    ab\", \"a\", \"aaa\", \"cd\");\necho implode(', ', sorted_list_sum($num1));\n\
    echo '<br>';\necho implode(', ', sorted_list_sum($num2));\necho '<br>';\n\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "aa<br>ab, cd<br>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp408xftrr.php:48\n\
    Stack trace:\n#0 /tmp/tmp408xftrr.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp408xftrr.php\
    \ on line 48\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $lst = array_diff($lst, array_filter($lst,\
    \ function($v) { return strlen($v) % 2 == 1; }));\n  sort($lst);\n  return $lst;\n\
    }\n\nif (isset($_POST['Submit'])) {\n  $in_str_array = explode(',', $_POST['str_list']);\n\
    \  $out_str_array = sorted_list_sum($in_str_array);\n  echo '<h2>The result is:</h2>';\n\
    \  echo '<h3>Input:</h3>';\n  echo '<p>' . $_POST['str_list'] . '</p>';\n  echo\
    \ '<h3>Output:</h3>';\n  echo '<p>' . implode(',', $out_str_array) . '</p>';\n\
    }\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxav6_ktc.php:43\n\
    Stack trace:\n#0 /tmp/tmpxav6_ktc.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpxav6_ktc.php\
    \ on line 43\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $return_lst = array();\n  foreach\
    \ ($lst as $str) {\n    $return_lst[strlen($str)] = $str;\n  }\n  ksort($return_lst);\n\
    \  $return_lst = array_values($return_lst);\n  return $return_lst;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnn2j6jjs.php:32\n\
    Stack trace:\n#0 /tmp/tmpnn2j6jjs.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpnn2j6jjs.php\
    \ on line 32\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  return array_map('sum', $lst);\n\
    }\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: array_map(): Argument #1 ($callback)\
    \ must be a valid callback or null, function \"sum\" not found or invalid function\
    \ name in /tmp/tmp7okfon37.php:18\nStack trace:\n#0 /tmp/tmp7okfon37.php(18):\
    \ array_map('sum', Array)\n#1 /tmp/tmp7okfon37.php(22): sorted_list_sum(Array)\n\
    #2 /tmp/tmp7okfon37.php(26): candidate(Array)\n#3 /tmp/tmp7okfon37.php(35): test()\n\
    #4 {main}\n  thrown in /tmp/tmp7okfon37.php on line 18\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $odd_elems = array_filter($lst,\
    \ function($elem) {\n    return strlen($elem) % 2 != 0;\n  });\n  sort($odd_elems);\n\
    \  return $odd_elems;\n}\nprint_r(sorted_list_sum(array(\"aa\", \"a\", \"aaa\"\
    )));\necho \"\\n\";\nprint_r(sorted_list_sum(array(\"ab\", \"a\", \"aaa\", \"\
    cd\")));\necho \"\\n\";\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => a\n    [1] => aaa\n)\n\nArray\n(\n    [0] => a\n \
    \   [1] => aaa\n)\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp38mn3huq.php:34\n\
    Stack trace:\n#0 /tmp/tmp38mn3huq.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp38mn3huq.php\
    \ on line 34\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lengths = array();\n    $newlst\
    \ = array();\n    foreach ($lst as $item) {\n        $lengths[] = strlen($item);\n\
    \    }\n    sort($lengths);\n    foreach ($lengths as $len) {\n        foreach\
    \ ($lst as $item) {\n            if (strlen($item) == $len) {\n              \
    \  $newlst[] = $item;\n            }\n        }\n    }\n    return $newlst;\n\
    }\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8t1txhgy.php:38\n\
    Stack trace:\n#0 /tmp/tmp8t1txhgy.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp8t1txhgy.php\
    \ on line 38\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $res = [];\n    foreach ($lst\
    \ as $item) {\n        if (strlen($item) % 2 == 0) {\n            $res[] = $item;\n\
    \        }\n    }\n    sort($res);\n    return $res;\n}\n\n$test_array = [\"ab\"\
    , \"a\", \"aaa\", \"cd\"];\nprint_r(sorted_list_sum($test_array));\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => ab\n    [1] => cd\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpszm2rzax.php:41\nStack trace:\n#0 /tmp/tmpszm2rzax.php(44):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpszm2rzax.php on line 41\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $arr = array();\n    foreach\
    \ ($lst as $val) {\n        if (strlen($val) % 2 == 0) {\n            array_push($arr,\
    \ $val);\n        }\n    }\n    sort($arr);\n    return $arr;\n}\n$arr = array(\"\
    aa\", \"a\", \"aaa\");\n$arr2 = array(\"ab\", \"a\", \"aaa\", \"cd\");\nvar_dump(sorted_list_sum($arr));\n\
    var_dump(sorted_list_sum($arr2));\nfunction candidate(...$args) {\n    return\
    \ sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(1) {\n  [0]=>\n  string(2) \"aa\"\n}\narray(2) {\n  [0]=>\n  string(2)\
    \ \"ab\"\n  [1]=>\n  string(2) \"cd\"\n}\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpw_l0odhx.php:42\nStack trace:\n#0 /tmp/tmpw_l0odhx.php(45):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpw_l0odhx.php on line 42\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $result = [];\n  foreach ($lst\
    \ as $index => $value) {\n    if (strlen($value) % 2 == 0) {\n      $result[]\
    \ = $value;\n    }\n  }\n  usort($result, 'strcmp');\n  return $result;\n}\n\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy151yoe5.php:39\n\
    Stack trace:\n#0 /tmp/tmpy151yoe5.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpy151yoe5.php\
    \ on line 39\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    return array_sum($lst);\n}\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoe04r4dd.php:25\n\
    Stack trace:\n#0 /tmp/tmpoe04r4dd.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpoe04r4dd.php\
    \ on line 25\n"
  timestamp: 1659979918
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $new_lst = array();\n    $count\
    \ = 0;\n    foreach ($lst as $val) {\n        if (strlen($val) % 2 == 0) {\n \
    \           $new_lst[$count] = $val;\n            $count++;\n        }\n    }\n\
    \    $new_lst = array_unique($new_lst);\n    $new_lst = array_values($new_lst);\n\
    \    $value = array();\n    foreach ($new_lst as $key => $val) {\n        $value[$key]\
    \ = strlen($val);\n    }\n    array_multisort($value, SORT_ASC, $new_lst);\n \
    \   return $new_lst;\n}\necho \"<br>\\n\";\nvar_dump(sorted_list_sum(array(\"\
    aa\", \"a\", \"aaa\")));\nvar_dump(sorted_list_sum(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\")));\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<br>\narray(1) {\n  [0]=>\n  string(2) \"aa\"\n}\narray(2) {\n  [0]=>\n\
    \  string(2) \"ab\"\n  [1]=>\n  string(2) \"cd\"\n}\n"
  timestamp: 1659979918
- exit_code: -1
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n\tif ($lst === NULL) {\n\t\treturn\
    \ 0;\n\t}\n\treturn $lst[0] + sorted_list_sum(array_slice($lst, 1));\n}\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: 'b''\nWarning: Undefined array key 0 in /tmp/tmp153mlq9m.php on line 21\n\nWarning:
    Undefined array key 0 in /tmp/tmp153mlq9m.php on line 21\n\nWarning: Undefined
    array key 0 in /tmp/tmp153mlq9m.php on line 21\n\nWarning: Undefined array key
    0 in /tmp/tmp153mlq9m.php on line 21\n\nWarning: Undefined array key 0 in /tmp/tmp153mlq9m.php
    on line 21\n\nWarning: Undefined array key 0 in /tmp/tmp153mlq9m.php on line 21\n\nWarning:
    Undefined array key 0 in /tmp/tmp153mlq9m.php on line 21\n\nWarning: Undefined
    array key 0 in /tmp/tmp153mlq9m.php on line 21\n\nWarning: Undefined array key
    0 in /tmp/tmp153mlq9m.php on line 21\n\nWarning: Undefined array key 0 in /tmp/tmp153mlq9m.php
    on line 21\n\nWarning: Undefined array key 0 in /tmp/tmp153mlq9m.php on line 21\n\nWarning:
    Undefined array key 0 in /tmp/tmp153mlq9m.php on line 21\n\nWarning: Undefined
    array key 0 in /tmp/tmp153mlq9m.php on line 21\n\nWarning: Undefined array key
    0 in /tmp/tmp153mlq9m.php on line 21\n\nWarning: Undefined array key 0 in /tmp/tmp153mlq9m.php
    on line 21\n\nWarning: Undefined array key 0 in /tmp/tmp153mlq9m.php on line 21\n\nWarning:
    Undefined array key 0 in /tmp/tmp153mlq9m.php on line 21\n\nWarning: Undefined
    array key 0 in /tmp/tmp153mlq9m.php on line 21\n\nWarning: Undefined array key
    0 in /tmp/tmp153mlq9m.php on line 21\n\nWarning: Undefined array key 0 in /tmp/tmp153mlq9m.php
    on line 21\n\nWarning: Undefined array key 0 in /tmp/tmp153mlq9m.php on line 21\n\nWarning:
    Undefined array key 0 in /tmp/tmp153mlq9m.php on line 21\n\nWarning: Undefined
    array key 0 in /tmp/tmp153mlq9m.php on line 21\n\nWarning: Undefined array key
    0 in /tmp/tmp153mlq9m.php on line 21\n\nWarning: Undefined array key 0 in /tmp/tmp153mlq9m.php
    on line 21\n\nWarning: Undefined array key 0 in /tmp/tmp153mlq9m.php on line 21\n\nWarning:
    Undefined array key 0 in /tmp/tmp153mlq9m.php on line 21\n\nWarning: Undefined
    array key 0 in /tmp/tmp153mlq9m.php on line 21\n\nWarning: Undefined array key
    0 in /tmp/tmp153mlq9m.php on line 21\n\nWarning: Undefined array key 0 in /tmp/tmp1'
  timestamp: 1659979923
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $odd_string = array();\n    foreach\
    \ ($lst as $l) {\n        if (strlen($l) % 2 == 0) {\n            array_push($odd_string,\
    \ $l);\n        }\n    }\n    sort($odd_string);\n    return $odd_string;\n}\n\
    $lst = array(\"aa\", \"a\", \"aaa\");\n$lst2 = array(\"ab\", \"a\", \"aaa\", \"\
    cd\");\necho \"Expected: aa\\n\";\necho \"Answer: \";\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\necho \"Expected: ab, cd\\n\";\necho \"Answer: \";\nprint_r(sorted_list_sum($lst2));\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Expected: aa\nAnswer: Array\n(\n    [0] => aa\n)\n\nExpected: ab, cd\n\
    Answer: Array\n(\n    [0] => ab\n    [1] => cd\n)\n\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp5f8oqhsb.php:48\nStack trace:\n#0 /tmp/tmp5f8oqhsb.php(51):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp5f8oqhsb.php on line 48\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $sorted = $sorted_with_odds = $odds\
    \ = [];\n  foreach ($lst as $elem) {\n    if (strlen($elem) % 2 === 0) {\n   \
    \   $sorted[] = $elem;\n    } else {\n      $odds[] = $elem;\n    }\n  }\n  sort($sorted);\n\
    \  sort($odds);\n  $sorted_with_odds = array_merge($sorted, $odds);\n  return\
    \ $sorted_with_odds;\n}\n\n$a = [\"Aa\", \"a\", \"aaa\"];\n$b = [\"ab\", \"a\"\
    , \"aaa\", \"cd\"];\n$c = [\"aaa\", \"bbb\", \"ccc\", \"ddd\", \"eee\", \"fff\"\
    , \"ggg\", \"hhh\", \"iii\", \"jjj\", \"kkk\", \"lll\", \"mmm\", \"nnn\", \"ooo\"\
    , \"ppp\", \"qqq\", \"rrr\", \"sss\", \"ttt\", \"uuu\", \"vvv\", \"www\", \"xxx\"\
    , \"yyy\", \"zzz\"];\n\nvar_dump(sorted_list_sum($a));\nvar_dump(sorted_list_sum($b));\n\
    var_dump(sorted_list_sum($c));\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(3) {\n  [0]=>\n  string(2) \"Aa\"\n  [1]=>\n  string(1) \"a\"\n \
    \ [2]=>\n  string(3) \"aaa\"\n}\narray(4) {\n  [0]=>\n  string(2) \"ab\"\n  [1]=>\n\
    \  string(2) \"cd\"\n  [2]=>\n  string(1) \"a\"\n  [3]=>\n  string(3) \"aaa\"\n\
    }\narray(26) {\n  [0]=>\n  string(3) \"aaa\"\n  [1]=>\n  string(3) \"bbb\"\n \
    \ [2]=>\n  string(3) \"ccc\"\n  [3]=>\n  string(3) \"ddd\"\n  [4]=>\n  string(3)\
    \ \"eee\"\n  [5]=>\n  string(3) \"fff\"\n  [6]=>\n  string(3) \"ggg\"\n  [7]=>\n\
    \  string(3) \"hhh\"\n  [8]=>\n  string(3) \"iii\"\n  [9]=>\n  string(3) \"jjj\"\
    \n  [10]=>\n  string(3) \"kkk\"\n  [11]=>\n  string(3) \"lll\"\n  [12]=>\n  string(3)\
    \ \"mmm\"\n  [13]=>\n  string(3) \"nnn\"\n  [14]=>\n  string(3) \"ooo\"\n  [15]=>\n\
    \  string(3) \"ppp\"\n  [16]=>\n  string(3) \"qqq\"\n  [17]=>\n  string(3) \"\
    rrr\"\n  [18]=>\n  string(3) \"sss\"\n  [19]=>\n  string(3) \"ttt\"\n  [20]=>\n\
    \  string(3) \"uuu\"\n  [21]=>\n  string(3) \"vvv\"\n  [22]=>\n  string(3) \"\
    www\"\n  [23]=>\n  string(3) \"xxx\"\n  [24]=>\n  string(3) \"yyy\"\n  [25]=>\n\
    \  string(3) \"zzz\"\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3k59amhr.php:44\n\
    Stack trace:\n#0 /tmp/tmp3k59amhr.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp3k59amhr.php\
    \ on line 44\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $len_to_words = array();\n  foreach\
    \ ($lst as $word) {\n    $len = strlen($word);\n    if (!isset($len_to_words[$len]))\
    \ {\n      $len_to_words[$len] = array();\n    }\n    $len_to_words[$len][] =\
    \ $word;\n  }\n  ksort($len_to_words);\n  $sorted_list = array();\n  foreach ($len_to_words\
    \ as $len => $words) {\n    sort($words);\n    $sorted_list = array_merge($sorted_list,\
    \ $words);\n  }\n  return $sorted_list;\n}\n\nfunction candidate(...$args) {\n\
    \    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7hw5mugo.php:40\n\
    Stack trace:\n#0 /tmp/tmp7hw5mugo.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp7hw5mugo.php\
    \ on line 40\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $odd_sum = 0;\n    $even_sum\
    \ = 0;\n    foreach ($lst as $num) {\n        if ($num % 2) {\n            $odd_sum\
    \ += $num;\n        } else {\n            $even_sum += $num;\n        }\n    }\n\
    \    return array($odd_sum, $even_sum);\n}\n\n$a = array(1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9, 10);\n$b = sorted_list_sum($a);\necho \"Sum of odd numbers is: \" . $b[0]\
    \ . \"\\n\";\necho \"Sum of even numbers is: \" . $b[1] . \"\\n\";\n\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Sum of odd numbers is: 25\nSum of even numbers is: 30\n\nFatal error: Uncaught\
    \ TypeError: Unsupported operand types: string % int in /tmp/tmpbvrp0s87.php:21\n\
    Stack trace:\n#0 /tmp/tmpbvrp0s87.php(36): sorted_list_sum(Array)\n#1 /tmp/tmpbvrp0s87.php(40):\
    \ candidate(Array)\n#2 /tmp/tmpbvrp0s87.php(49): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpbvrp0s87.php on line 21\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $odd_lst = [];\n    foreach ($lst\
    \ as $word) {\n        if (strlen($word) % 2 === 1) {\n            $odd_lst[]\
    \ = $word;\n        }\n    }\n    return $odd_lst;\n}\n\n$test_odd_word = sorted_list_sum(array(\"\
    aa\", \"a\", \"aaa\"));\n\nforeach ($test_odd_word as $t_o_w) {\n    echo \"<p>$t_o_w</p>\"\
    ;\n}\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<p>a</p><p>aaa</p>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy_jhdfo2.php:37\n\
    Stack trace:\n#0 /tmp/tmpy_jhdfo2.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpy_jhdfo2.php\
    \ on line 37\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n\t// your code here\n}\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj2rdw19l.php:25\n\
    Stack trace:\n#0 /tmp/tmpj2rdw19l.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpj2rdw19l.php\
    \ on line 25\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $new_lst = [];\n    foreach ($lst\
    \ as $v) {\n        if (strlen($v) % 2 == 0) {\n            $new_lst[] = $v;\n\
    \        }\n    }\n    sort($new_lst);\n    return $new_lst;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3epadkfn.php:39\n\
    Stack trace:\n#0 /tmp/tmp3epadkfn.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp3epadkfn.php\
    \ on line 39\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $temp = array();\n  foreach ($lst\
    \ as $item) {\n    if (strlen($item) % 2 == 0) {\n      array_push($temp, $item);\n\
    \    }\n  }\n  sort($temp);\n  return $temp;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2zsputhe.php:39\n\
    Stack trace:\n#0 /tmp/tmp2zsputhe.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp2zsputhe.php\
    \ on line 39\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $arr = [];\n  foreach ($lst as\
    \ $item) {\n    $new_item = array_sum(str_split($item));\n    $arr[] = $new_item;\n\
    \  }\n  return $arr;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb7i0fqjf.php:31\n\
    Stack trace:\n#0 /tmp/tmpb7i0fqjf.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpb7i0fqjf.php\
    \ on line 31\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $filtered_lst = array_filter($lst,\
    \ function($str) {\n    return strlen($str) % 2 == 0;\n  });\n  sort($filtered_lst);\n\
    \  return $filtered_lst;\n}\necho \"Array \" . implode(\", \", sorted_list_sum(array(\"\
    aa\", \"a\", \"aaa\"))) . \" should be array(\\\"aa\\\")\\n\";\necho \"Array \"\
    \ . implode(\", \", sorted_list_sum(array(\"ab\", \"a\", \"aaa\", \"cd\"))) .\
    \ \" should be array(\\\"ab\\\", \\\"cd\\\")\\n\";\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array aa should be array(\"aa\")\nArray ab, cd should be array(\"ab\",\
    \ \"cd\")\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbxx3eb35.php:37\n\
    Stack trace:\n#0 /tmp/tmpbxx3eb35.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpbxx3eb35.php\
    \ on line 37\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $odd_lst = [];\n    $even_lst\
    \ = [];\n    foreach ($lst as $word) {\n        if (strlen($word) % 2 === 0) {\n\
    \            $even_lst[] = $word;\n        } else {\n            $odd_lst[] =\
    \ $word;\n        }\n    }\n    sort($even_lst);\n    return $even_lst;\n}\n\n\
    $to_sort = array(\"aa\", \"a\", \"aaa\");\nvar_dump(sorted_list_sum($to_sort));\n\
    $to_sort = array(\"ab\", \"a\", \"aaa\", \"cd\");\nvar_dump(sorted_list_sum($to_sort));\n\
    \nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(1) {\n  [0]=>\n  string(2) \"aa\"\n}\narray(2) {\n  [0]=>\n  string(2)\
    \ \"ab\"\n  [1]=>\n  string(2) \"cd\"\n}\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpb64b65_5.php:47\nStack trace:\n#0 /tmp/tmpb64b65_5.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpb64b65_5.php on line 47\n"
  timestamp: 1659979918
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $result = array();\n    foreach\
    \ ($lst as $item) {\n        if(strlen($item) % 2 == 0) {\n            $result[]\
    \ = $item;\n        }\n    }\n    usort($result, function($first, $second) {\n\
    \        if(strlen($first) === strlen($second)) {\n            return strcmp($first,\
    \ $second);\n        }\n        return strlen($first) - strlen($second);\n   \
    \ });\n    return $result;\n}\n\n$arr = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($arr));\n\
    $arr = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($arr));\n\
    $arr = array(\"ab\", \"a\", \"a\", \"cd\");\nprint_r(sorted_list_sum($arr));\n\
    \nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    Array\n(\n    [0] => ab\n    [1] => cd\n)\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $odd_length_string = [];\n  \
    \  foreach ($lst as $string) {\n        if (strlen($string) % 2 !== 0) {\n   \
    \         array_push($odd_length_string, $string);\n        }\n    }\n    return\
    \ sort($odd_length_string);\n}\n\nvar_dump(sorted_list_sum(array(\"aa\", \"a\"\
    , \"aaa\")));\nvar_dump(sorted_list_sum(array(\"ab\", \"a\", \"aaa\", \"cd\")));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "bool(true)\nbool(true)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmprrssegra.php:34\nStack trace:\n#0 /tmp/tmprrssegra.php(43): test()\n\
    #1 {main}\n  thrown in /tmp/tmprrssegra.php on line 34\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_unique($lst);\n\
    \    $lst = array_filter($lst, function($word) {\n        return strlen($word)\
    \ % 2 == 0;\n    });\n    usort($lst, function($a, $b) {\n        $len_a = strlen($a);\n\
    \        $len_b = strlen($b);\n        return $len_a == $len_b ? strcmp($a, $b)\
    \ : $len_a - $len_b;\n    });\n    return $lst;\n}\necho PHP_EOL . implode(',\
    \ ', sorted_list_sum([\"aa\", \"a\", \"aaa\"]));\necho PHP_EOL . implode(', ',\
    \ sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]));\necho PHP_EOL . implode(',\
    \ ', sorted_list_sum([\"John\", \"Adam\", \"James\", \"Jane\", \"Tom\", \"Tom\"\
    , \"Tom\", \"Sam\", \"Sam\", \"Sam\", \"Maria\", \"Peter\", \"Peter\", \"Peter\"\
    , \"Peter\", \"John\", \"John\", \"John\", \"James\", \"Jane\", \"Adam\", \"Adam\"\
    , \"Adam\", \"Tom\", \"Tom\", \"Tom\", \"Sam\", \"Sam\", \"Sam\", \"Maria\", \"\
    Maria\", \"Maria\", \"Maria\", \"Peter\", \"Peter\", \"Peter\", \"Peter\", \"\
    John\", \"John\", \"John\", \"James\", \"Jane\", \"Adam\", \"Adam\", \"Adam\"\
    , \"Tom\", \"Tom\", \"Tom\", \"Sam\", \"Sam\", \"Sam\", \"Maria\", \"Maria\",\
    \ \"Maria\", \"Maria\", \"Peter\", \"Peter\", \"Peter\", \"Peter\", \"John\",\
    \ \"John\", \"John\", \"James\", \"Jane\", \"Adam\", \"Adam\", \"Adam\", \"Tom\"\
    , \"Tom\", \"Tom\", \"Sam\", \"Sam\", \"Sam\", \"Maria\", \"Maria\", \"Maria\"\
    , \"Maria\", \"Peter\", \"Peter\", \"Peter\", \"Peter\", \"John\", \"John\", \"\
    John\", \"James\", \"Jane\", \"Adam\", \"Adam\", \"Adam\", \"Tom\", \"Tom\", \"\
    Tom\", \"Sam\", \"Sam\", \"Sam\", \"Maria\", \"Maria\", \"Maria\", \"Maria\",\
    \ \"Peter\", \"Peter\", \"\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "aa", expecting "]" in /tmp/tmpaqrbc0w2.php
    on line 37

    '
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $odds = array();\n    foreach\
    \ ($lst as $num) {\n        if ($num % 2 == 1) {\n            array_push($odds,\
    \ $num);\n        }\n    }\n    return array_sum($odds);\n}\n$numbers = [4, 6,\
    \ 1, 3, 5, 7, 25];\necho sorted_list_sum($numbers);\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "41\n\nFatal error: Uncaught TypeError: Unsupported operand types: string\
    \ % int in /tmp/tmpjynytwtg.php:20\nStack trace:\n#0 /tmp/tmpjynytwtg.php(30):\
    \ sorted_list_sum(Array)\n#1 /tmp/tmpjynytwtg.php(34): candidate(Array)\n#2 /tmp/tmpjynytwtg.php(43):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpjynytwtg.php on line 20\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $lst_b = array();\n  for ($i =\
    \ 0; $i < count($lst); $i++) {\n    if (strlen($lst[$i]) % 2 == 0) {\n      array_push($lst_b,\
    \ $lst[$i]);\n    }\n  }\n  sort($lst_b);\n  return $lst_b;\n}\n$lst = array(\"\
    aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpjvlg1yxy.php:40\nStack trace:\n#0 /tmp/tmpjvlg1yxy.php(43): test()\n\
    #1 {main}\n  thrown in /tmp/tmpjvlg1yxy.php on line 40\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $result = array();\n  foreach ($lst\
    \ as $value) {\n    if (strlen($value) % 2 == 0) {\n      array_push($result,\
    \ $value);\n    }\n  }\n  asort($result);\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp38ulau78.php:33\n\
    Stack trace:\n#0 /tmp/tmp38ulau78.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp38ulau78.php\
    \ on line 33\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    if ($lst === []) {\n        return\
    \ NULL;\n    }\n    $len = count($lst);\n    $sum = array_sum($lst);\n    if ($len\
    \ === 1) {\n        return $sum;\n    }\n    $len_min = min($lst);\n    $idx =\
    \ array_search($len_min, $lst);\n    $lst_1 = array_slice($lst, 0, $idx);\n  \
    \  $lst_2 = array_slice($lst, $idx + 1);\n    $lst_1 = sorted_list_sum($lst_1);\n\
    \    $lst_2 = sorted_list_sum($lst_2);\n    return $lst_1 + $lst_2 + $len_min;\n\
    }\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: int + string\
    \ in /tmp/tmp7bqwks6m.php:32\nStack trace:\n#0 /tmp/tmp7bqwks6m.php(35): sorted_list_sum(Array)\n\
    #1 /tmp/tmp7bqwks6m.php(39): candidate(Array)\n#2 /tmp/tmp7bqwks6m.php(48): test()\n\
    #3 {main}\n  thrown in /tmp/tmp7bqwks6m.php on line 32\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $even_count = 0;\n  $odd_count\
    \ = 0;\n  $total_count = 0;\n  foreach ($lst as $item) {\n    if ($item % 2 ==\
    \ 0) {\n      $even_count += $item;\n    } else {\n      $odd_count += $item;\n\
    \    }\n    $total_count += $item;\n  }\n  return array($even_count, $odd_count,\
    \ $total_count);\n}\nprint_r(sorted_list_sum(array(1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10)));\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 30\n    [1] => 25\n    [2] => 55\n)\n\nFatal error:\
    \ Uncaught TypeError: Unsupported operand types: string % int in /tmp/tmpgvw80x0d.php:22\n\
    Stack trace:\n#0 /tmp/tmpgvw80x0d.php(33): sorted_list_sum(Array)\n#1 /tmp/tmpgvw80x0d.php(37):\
    \ candidate(Array)\n#2 /tmp/tmpgvw80x0d.php(46): test()\n#3 {main}\n  thrown in\
    \ /tmp/tmpgvw80x0d.php on line 22\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $result = array();\n    foreach\
    \ ($lst as $key => $word) {\n        $word_length = strlen($word);\n        if\
    \ ($word_length % 2 == 0) {\n            $result[] = $word;\n        }\n    }\n\
    \    sort($result);\n    return $result;\n}\n\n$arr = array(\"aa\", \"a\", \"\
    aaa\");\nvar_dump(sorted_list_sum($arr));\nfunction candidate(...$args) {\n  \
    \  return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(1) {\n  [0]=>\n  string(2) \"aa\"\n}\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp6v1rlp3c.php:42\nStack trace:\n#0 /tmp/tmp6v1rlp3c.php(45):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp6v1rlp3c.php on line 42\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $lst_keys = array_keys($lst);\n\
    \  $output = array();\n  foreach ($lst_keys as $key) {\n    if (strlen($lst[$key])\
    \ % 2 === 0) {\n      $output[] = $lst[$key];\n    }\n  }\n  sort($output);\n\
    \  return $output;\n}\necho implode(sorted_list_sum(array(\"aa\", \"a\", \"aaa\"\
    )), \" \") . PHP_EOL;\necho implode(sorted_list_sum(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\")), \" \") . PHP_EOL;\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: implode(): Argument #2 ($array) must\
    \ be of type ?array, string given in /tmp/tmprxz8fsx_.php:28\nStack trace:\n#0\
    \ /tmp/tmprxz8fsx_.php(28): implode(Array, ' ')\n#1 {main}\n  thrown in /tmp/tmprxz8fsx_.php\
    \ on line 28\n"
  timestamp: 1659979918
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    // Write code here:\n    $sorted_words\
    \ = array();\n    $sorted_words_length = array();\n    $length = count($lst);\n\
    \    for ($i = 0; $i < $length; $i++) {\n        $current_word = $lst[$i];\n \
    \       $current_word_length = strlen($current_word);\n        if ($current_word_length\
    \ % 2 == 0) {\n            array_push($sorted_words, $current_word);\n       \
    \     array_push($sorted_words_length, $current_word_length);\n        }\n   \
    \ }\n    array_multisort($sorted_words_length, $sorted_words);\n    return $sorted_words;\n\
    }\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $sorted = [];\n    foreach ($lst\
    \ as $key => $element) {\n        $sorted[$key] = $element;\n    }\n    sort($sorted);\n\
    \    return $sorted;\n}\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp956y587g.php:30\n\
    Stack trace:\n#0 /tmp/tmp956y587g.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp956y587g.php\
    \ on line 30\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $odd_lst = [];\n    $even_lst\
    \ = [];\n    foreach ($lst as $key => $value) {\n        if ($key % 2 == 0) {\n\
    \            $odd_lst[] = $value;\n        } else {\n            $even_lst[] =\
    \ $value;\n        }\n    }\n    sort($odd_lst);\n    sort($even_lst);\n    return\
    \ array_merge($odd_lst, $even_lst);\n}\n\nprint_r(sorted_list_sum(array(4, 15,\
    \ 7, 8, 22, 10, 9, 17, 2, 11)));\nprint_r(sorted_list_sum(array(1, 5, 2, 7, 9,\
    \ 0, 6, 8, 4, 3)));\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 2\n    [1] => 4\n    [2] => 7\n    [3] => 9\n    [4]\
    \ => 22\n    [5] => 8\n    [6] => 10\n    [7] => 11\n    [8] => 15\n    [9] =>\
    \ 17\n)\nArray\n(\n    [0] => 1\n    [1] => 2\n    [2] => 4\n    [3] => 6\n  \
    \  [4] => 9\n    [5] => 0\n    [6] => 3\n    [7] => 5\n    [8] => 7\n    [9] =>\
    \ 8\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3k6ef4_t.php:40\n\
    Stack trace:\n#0 /tmp/tmp3k6ef4_t.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp3k6ef4_t.php\
    \ on line 40\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $result = array();\n  foreach ($lst\
    \ as $v) {\n    if (is_array($v)) {\n      $result = array_merge($result, sorted_list_sum($v));\n\
    \    } else {\n      $result[] = $v;\n    }\n  }\n  sort($result);\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxo8cpmlr.php:35\n\
    Stack trace:\n#0 /tmp/tmpxo8cpmlr.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpxo8cpmlr.php\
    \ on line 35\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  return array_sum(array_unique(array_filter($lst,\
    \ function($str) {\n    return strlen($str) % 2 == 0;\n  })));\n}\n\nassert_options(ASSERT_BAIL,\
    \ 1);\nassert(sorted_list_sum([\"aa\", \"a\", \"aaa\"]) == 0);\nassert(sorted_list_sum([\"\
    ab\", \"a\", \"aaa\", \"cd\"]) == 27);\nassert(sorted_list_sum([\"ab\", \"a\"\
    , \"aaa\", \"cd\", \"bbbb\"]) == 55);\nassert(sorted_list_sum([\"abc\", \"a\"\
    , \"aaa\", \"cd\", \"bbbb\"]) == 55);\nassert(sorted_list_sum([\"a\", \"a\", \"\
    aaa\", \"cd\", \"bbbb\"]) == 55);\nassert(sorted_list_sum([\"a\", \"aa\", \"aaa\"\
    , \"cd\", \"bbbb\"]) == 57);\nassert(sorted_list_sum([\"ab\", \"a\", \"aaa\",\
    \ \"cd\", \"bbbb\", \"a\", \"aaa\", \"cd\", \"bbbb\"]) == 110);\necho \"OK\\n\"\
    ;\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught AssertionError: assert(sorted_list_sum(['ab', 'a',\
    \ 'aaa', 'cd']) == 27) in /tmp/tmp1wl3bwpw.php:25\nStack trace:\n#0 /tmp/tmp1wl3bwpw.php(25):\
    \ assert(false, 'assert(sorted_l...')\n#1 {main}\n  thrown in /tmp/tmp1wl3bwpw.php\
    \ on line 25\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_unique($lst);\n\
    \    $sorted_list = array();\n    foreach ($lst as $val) {\n        $cnt = 0;\n\
    \        for ($i = 0; $i < strlen($val); $i++) {\n            $cnt += ord($val[$i]);\n\
    \        }\n        $sorted_list[] = $cnt;\n    }\n    sort($sorted_list);\n \
    \   return $sorted_list;\n}\n$lst = array(\"aa\", \"a\", \"aaa\");\necho print_r(sorted_list_sum($lst),\
    \ true);\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 97\n    [1] => 194\n    [2] => 291\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpdnmtjojn.php:37\nStack trace:\n\
    #0 /tmp/tmpdnmtjojn.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpdnmtjojn.php\
    \ on line 37\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $s = 1;\n  foreach ($lst as $e)\
    \ {\n    $s += $e;\n  }\n  return $s;\n}\n\nfunction candidate(...$args) {\n \
    \   return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: int + string\
    \ in /tmp/tmp984ha335.php:20\nStack trace:\n#0 /tmp/tmp984ha335.php(26): sorted_list_sum(Array)\n\
    #1 /tmp/tmp984ha335.php(30): candidate(Array)\n#2 /tmp/tmp984ha335.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmp984ha335.php on line 20\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $odd = function($elem) {\n    return\
    \ (strlen($elem) % 2 == 1);\n  };\n  $odd_len_strs = array_filter($lst, $odd);\n\
    \  $odd_len_strs = array_unique($odd_len_strs);\n  $sort_by_len = function($a,\
    \ $b) {\n    if (strlen($a) == strlen($b)) {\n      return strcmp($a, $b);\n \
    \   }\n    return strlen($a) - strlen($b);\n  };\n  usort($odd_len_strs, $sort_by_len);\n\
    \  return $odd_len_strs;\n}\n\necho \"\\nsorted_list_sum([\\\"aa\\\", \\\"a\\\"\
    , \\\"aaa\\\"]) = \";\nvar_dump(sorted_list_sum([\"aa\", \"a\", \"aaa\"]));\n\
    echo \"\\nsorted_list_sum([\\\"ab\\\", \\\"a\\\", \\\"aaa\\\", \\\"cd\\\"]) =\
    \ \";\nvar_dump(sorted_list_sum([\"ab\", \"a\", \"aaa\", \"cd\"]));\necho \"\\\
    nsorted_list_sum([\\\"aa\\\", \\\"a\\\", \\\"aaa\\\", \\\"aaa\\\", \\\"a\\\",\
    \ \\\"aa\\\"]) = \";\nvar_dump(sorted_list_sum([\"aa\", \"a\", \"aaa\", \"aaa\"\
    , \"a\", \"aa\"]));\necho \"\\nsorted_list_sum([\\\"aa\\\", \\\"aaaa\\\", \\\"\
    aaaaa\\\", \\\"aaa\\\", \\\"a\\\", \\\"aa\\\"]) = \";\nvar_dump(sorted_list_sum([\"\
    aa\", \"aaaa\", \"aaaaa\", \"aaa\", \"a\", \"aa\"]));\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nsorted_list_sum([\"aa\", \"a\", \"aaa\"]) = array(2) {\n  [0]=>\n  string(1)\
    \ \"a\"\n  [1]=>\n  string(3) \"aaa\"\n}\n\nsorted_list_sum([\"ab\", \"a\", \"\
    aaa\", \"cd\"]) = array(2) {\n  [0]=>\n  string(1) \"a\"\n  [1]=>\n  string(3)\
    \ \"aaa\"\n}\n\nsorted_list_sum([\"aa\", \"a\", \"aaa\", \"aaa\", \"a\", \"aa\"\
    ]) = array(2) {\n  [0]=>\n  string(1) \"a\"\n  [1]=>\n  string(3) \"aaa\"\n}\n\
    \nsorted_list_sum([\"aa\", \"aaaa\", \"aaaaa\", \"aaa\", \"a\", \"aa\"]) = array(3)\
    \ {\n  [0]=>\n  string(1) \"a\"\n  [1]=>\n  string(3) \"aaa\"\n  [2]=>\n  string(5)\
    \ \"aaaaa\"\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9hq7im5t.php:47\n\
    Stack trace:\n#0 /tmp/tmp9hq7im5t.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp9hq7im5t.php\
    \ on line 47\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $ret_lst = [];\n    $numb_lst\
    \ = [];\n    foreach ($lst as $val) {\n        if (!is_string($val)) {\n     \
    \       $numb_lst[] = $val;\n        } else {\n            $ret_lst[] = $val;\n\
    \        }\n    }\n    sort($ret_lst);\n    sort($numb_lst);\n    foreach ($numb_lst\
    \ as $val) {\n        $ret_lst[] = $val;\n    }\n    return $ret_lst;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfk_1q111.php:40\n\
    Stack trace:\n#0 /tmp/tmpfk_1q111.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpfk_1q111.php\
    \ on line 40\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $odd_length_array = [];\n  $even_length_array\
    \ = [];\n  for ($i = 0; $i < count($lst); $i++) {\n    if (strlen($lst[$i]) %\
    \ 2 == 0) {\n      array_push($even_length_array, $lst[$i]);\n    } else {\n \
    \     array_push($odd_length_array, $lst[$i]);\n    }\n  }\n  sort($even_length_array);\n\
    \  return $even_length_array;\n}\n\n$x = array(\"aa\", \"a\", \"aaa\");\n$y =\
    \ array(\"ab\", \"a\", \"aaa\", \"cd\");\necho \"<pre>\";\nprint_r(sorted_list_sum($x));\n\
    echo \"</pre>\";\necho \"<pre>\";\nprint_r(sorted_list_sum($y));\necho \"</pre>\"\
    ;\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => aa\n)\n</pre><pre>Array\n(\n    [0] => ab\n \
    \   [1] => cd\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps7e_nmtn.php:51\n\
    Stack trace:\n#0 /tmp/tmps7e_nmtn.php(54): test()\n#1 {main}\n  thrown in /tmp/tmps7e_nmtn.php\
    \ on line 51\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $res = array();\n  foreach ($lst\
    \ as $item) {\n    if (strlen($item) % 2 == 0) {\n      $res[] = $item;\n    }\n\
    \  }\n  usort($res, function($a, $b) {\n    if (strlen($a) == strlen($b)) {\n\
    \      return 0;\n    }\n    if (strlen($a) < strlen($b)) {\n      return -1;\n\
    \    }\n    return 1;\n  });\n  return $res;\n}\n\n$a = array(\"aa\", \"a\", \"\
    aaa\");\n$b = array(\"ab\", \"a\", \"aaa\", \"cd\");\n\necho json_encode(sorted_list_sum($a))\
    \ . \"\\n\";\necho json_encode(sorted_list_sum($b)) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "[\"aa\"]\n[\"ab\",\"cd\"]\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpmgvlgatn.php:49\nStack trace:\n#0 /tmp/tmpmgvlgatn.php(55): test()\n\
    #1 {main}\n  thrown in /tmp/tmpmgvlgatn.php on line 49\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $sum = 0;\n    foreach ($lst\
    \ as $item) {\n        $sum += $item;\n    }\n    return $sum;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: int + string\
    \ in /tmp/tmpnmn3vvz2.php:20\nStack trace:\n#0 /tmp/tmpnmn3vvz2.php(26): sorted_list_sum(Array)\n\
    #1 /tmp/tmpnmn3vvz2.php(30): candidate(Array)\n#2 /tmp/tmpnmn3vvz2.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpnmn3vvz2.php on line 20\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $len_func = function($item) {\n\
    \    return strlen($item);\n  };\n  $sort_func = function($a, $b) {\n    if ($a\
    \ === $b) {\n      return 0;\n    }\n    return ($a < $b) ? -1 : 1;\n  };\n  $comp_func\
    \ = function($a, $b) {\n    if ($a[0] === $b[0]) {\n      return strcmp($a[1],\
    \ $b[1]);\n    }\n    return ($a[0] < $b[0]) ? -1 : 1;\n  };\n  $sort_list = array_map(function($item)\
    \ use ($len_func) {\n    return array($len_func($item), $item);\n  }, $lst);\n\
    \  usort($sort_list, $comp_func);\n  $sorted_list = array_map(function($item)\
    \ use ($sort_func) {\n    return $item[1];\n  }, $sort_list);\n  return $sorted_list;\n\
    }\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzr62juur.php:47\n\
    Stack trace:\n#0 /tmp/tmpzr62juur.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpzr62juur.php\
    \ on line 47\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $output = array();\n    if (empty($lst))\
    \ {\n        return $output;\n    }\n    $lst = array_unique($lst);\n    foreach\
    \ ($lst as $i) {\n        if (strlen($i) % 2 == 0) {\n            $output[] =\
    \ $i;\n        }\n    }\n    sort($output);\n    return $output;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq2gvg7nb.php:43\n\
    Stack trace:\n#0 /tmp/tmpq2gvg7nb.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpq2gvg7nb.php\
    \ on line 43\n"
  timestamp: 1659979918
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $return_lst = array();\n    foreach\
    \ ($lst as $el) {\n        if (strlen($el) % 2 == 0) {\n            $return_lst[]\
    \ = $el;\n        }\n    }\n    usort($return_lst, function($a, $b) {\n      \
    \  if (strlen($a) == strlen($b)) {\n            return strcmp($a, $b);\n     \
    \   }\n        return strlen($a) > strlen($b);\n    });\n    return $return_lst;\n\
    }\necho \"The sorted list is:\\n\";\nprint_r(sorted_list_sum(array(\"aa\", \"\
    a\", \"aaa\")));\necho \"\\n\";\nprint_r(sorted_list_sum(array(\"ab\", \"a\",\
    \ \"aaa\", \"cd\")));\necho \"\\n\";\nprint_r(sorted_list_sum(array(\"ab\", \"\
    a\", \"aaa\", \"cd\", \"d\")));\necho \"\\n\";\nprint_r(sorted_list_sum(array(\"\
    ab\", \"a\", \"aaa\", \"cd\", \"d\", \"bb\")));\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "The sorted list is:\nArray\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] =>\
    \ ab\n    [1] => cd\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\nArray\n\
    (\n    [0] => ab\n    [1] => bb\n    [2] => cd\n)\n\n\nDeprecated: usort(): Returning\
    \ bool from comparison function is deprecated, return an integer less than, equal\
    \ to, or greater than zero in /tmp/tmpu8zumda1.php on line 29\n\nDeprecated: usort():\
    \ Returning bool from comparison function is deprecated, return an integer less\
    \ than, equal to, or greater than zero in /tmp/tmpu8zumda1.php on line 29\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $ret = array();\n    foreach\
    \ ($lst as $val) {\n        if (strlen($val) % 2 != 0) {\n            $ret[] =\
    \ $val;\n        }\n    }\n    sort($ret);\n    return $ret;\n}\n$lst = array(\"\
    aa\", \"a\", \"aaa\");\nvar_dump(sorted_list_sum($lst));\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(2) {\n  [0]=>\n  string(1) \"a\"\n  [1]=>\n  string(3) \"aaa\"\n\
    }\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6ge706yo.php:34\n\
    Stack trace:\n#0 /tmp/tmp6ge706yo.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp6ge706yo.php\
    \ on line 34\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $string = \"\";\n    $new_lst\
    \ = array();\n    foreach ($lst as $item) {\n        $string .= $item;\n    }\n\
    \    $i = 0;\n    while ($i < strlen($string)) {\n        $new_lst[] = $string[$i];\n\
    \        $i++;\n    }\n    return $new_lst;\n}\nfunction candidate(...$args) {\n\
    \    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbu012h1y.php:35\n\
    Stack trace:\n#0 /tmp/tmpbu012h1y.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpbu012h1y.php\
    \ on line 35\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  // your code here\n  $length =\
    \ count($lst);\n  for ($i = 0; $i < $length; $i++) {\n    if (strlen($lst[$i])\
    \ % 2 == 1) {\n      unset($lst[$i]);\n    }\n  }\n  sort($lst);\n  return $lst;\n\
    }\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp46iadttx.php:39\n\
    Stack trace:\n#0 /tmp/tmp46iadttx.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp46iadttx.php\
    \ on line 39\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $arr = [];\n    foreach ($lst\
    \ as $val) {\n        if (strlen($val) % 2 != 0) {\n            array_push($arr,\
    \ $val);\n        }\n    }\n    sort($arr);\n    return $arr;\n}\n\nprint_r(sorted_list_sum(array(\"\
    aa\", \"a\", \"aaa\")));\nprint_r(sorted_list_sum(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\")));\nprint_r(sorted_list_sum(array(\"a\", \"ab\", \"cd\", \"aaa\")));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => a\n    [1] => aaa\n)\nArray\n(\n    [0] => a\n   \
    \ [1] => aaa\n)\nArray\n(\n    [0] => a\n    [1] => aaa\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpeis0qiz0.php:36\nStack trace:\n#0 /tmp/tmpeis0qiz0.php(45):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpeis0qiz0.php on line 36\n"
  timestamp: 1659979918
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $arr = array();\n    foreach\
    \ ($lst as $k) {\n        $l = strlen($k);\n        if ($l % 2 === 0) {\n    \
    \        if (!isset($arr[$l])) {\n                $arr[$l] = array();\n      \
    \      }\n            $arr[$l][] = $k;\n        }\n    }\n    ksort($arr);\n \
    \   $ret = array();\n    foreach ($arr as $k) {\n        sort($k);\n        $ret\
    \ = array_merge($ret, $k);\n    }\n    return $ret;\n}\nprint_r(sorted_list_sum(array(\"\
    aa\", \"a\", \"aaa\")));\nprint_r(sorted_list_sum(array(\"ab\", \"a\", \"aaa\"\
    , \"cd\")));\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $str_lst = [];\n    foreach ($lst\
    \ as $v) {\n        if (is_string($v)) {\n            $str_lst[] = $v;\n     \
    \   }\n    }\n    $lst = $str_lst;\n    $new_lst = [];\n    foreach ($lst as $v)\
    \ {\n        if (strlen($v) % 2 == 0) {\n            $new_lst[] = $v;\n      \
    \  }\n    }\n    sort($new_lst);\n    return $new_lst;\n}\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm440q1qz.php:45\n\
    Stack trace:\n#0 /tmp/tmpm440q1qz.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpm440q1qz.php\
    \ on line 45\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $sort_lst = sort_list($lst);\n\
    \  $sum = 0;\n  foreach ($sort_lst as $val) {\n    $sum += $val;\n  }\n  return\
    \ $sum;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_list() in\
    \ /tmp/tmpacuoli1w.php:18\nStack trace:\n#0 /tmp/tmpacuoli1w.php(27): sorted_list_sum(Array)\n\
    #1 /tmp/tmpacuoli1w.php(31): candidate(Array)\n#2 /tmp/tmpacuoli1w.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpacuoli1w.php on line 18\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $length = count($lst);\n    $sum\
    \ = 0;\n    for ($i = 0; $i < $length; $i += 1) {\n        $sum += $lst[$i];\n\
    \    }\n    return $sum;\n}\n\n$list_str = array(\"ab\", \"a\", \"aaa\", \"cd\"\
    );\n\n$list_str_result = sorted_list_sum($list_str);\n\nprint_r($list_str_result);\n\
    \nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !==\
    \ array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: int + string\
    \ in /tmp/tmpvm06lxng.php:21\nStack trace:\n#0 /tmp/tmpvm06lxng.php(28): sorted_list_sum(Array)\n\
    #1 {main}\n  thrown in /tmp/tmpvm06lxng.php on line 21\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $odd_lst = [];\n    $res = [];\n\
    \    $ans = [];\n    foreach ($lst as $elem) {\n        if (strlen($elem) % 2\
    \ !== 0) {\n            array_push($odd_lst, $elem);\n        }\n    }\n    foreach\
    \ ($lst as $elem) {\n        if (!in_array($elem, $odd_lst)) {\n            array_push($res,\
    \ $elem);\n        }\n    }\n    sort($res);\n    foreach ($res as $elem) {\n\
    \        if (strlen($elem) !== strlen($res[0])) {\n            array_push($ans,\
    \ $elem);\n        }\n    }\n    return $ans;\n}\necho sorted_list_sum(array(\"\
    aa\", \"a\", \"aaa\"));\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpw2lnoq0n.php on line 39\n\
    Array\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw2lnoq0n.php:45\n\
    Stack trace:\n#0 /tmp/tmpw2lnoq0n.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpw2lnoq0n.php\
    \ on line 45\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $list = array();\n  foreach ($lst\
    \ as $val) {\n    if (strlen($val) % 2 == 0) {\n      array_push($list, $val);\n\
    \    }\n  }\n  sort($list);\n  return $list;\n}\n$arr = array(\"aa\", \"a\", \"\
    aaa\");\nvar_dump(sorted_list_sum($arr));\n$arr = array(\"ab\", \"a\", \"aaa\"\
    , \"cd\");\nvar_dump(sorted_list_sum($arr));\n\nfunction candidate(...$args) {\n\
    \    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(1) {\n  [0]=>\n  string(2) \"aa\"\n}\narray(2) {\n  [0]=>\n  string(2)\
    \ \"ab\"\n  [1]=>\n  string(2) \"cd\"\n}\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpx7dr8je2.php:43\nStack trace:\n#0 /tmp/tmpx7dr8je2.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpx7dr8je2.php on line 43\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst_odd = array();\n    $lst_even\
    \ = array();\n    $lst_ret = array();\n    for ($i = 0; $i < count($lst); $i++)\
    \ {\n        if (strlen($lst[$i]) % 2 != 0) {\n            array_push($lst_odd,\
    \ $lst[$i]);\n        } else {\n            array_push($lst_even, $lst[$i]);\n\
    \        }\n    }\n    sort($lst_even);\n    for ($i = 0; $i < count($lst_even);\
    \ $i++) {\n        array_push($lst_ret, $lst_even[$i]);\n    }\n    return $lst_ret;\n\
    }\n\n$lst = array(\"aa\", \"a\", \"aaa\");\n$lst_ret = sorted_list_sum($lst);\n\
    print_r($lst_ret);\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpy07c91_2.php:49\nStack trace:\n#0 /tmp/tmpy07c91_2.php(52): test()\n\
    #1 {main}\n  thrown in /tmp/tmpy07c91_2.php on line 49\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $output = array();\n  foreach ($lst\
    \ as $item) {\n    if (strlen($item) % 2 == 0) {\n      $output[] = $item;\n \
    \   }\n  }\n  sort($output);\n  return $output;\n}\n\n$lst = array(\"aa\", \"\
    a\", \"aaa\");\necho sorted_list_sum($lst);\nfunction candidate(...$args) {\n\
    \    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpogmkjan_.php on line 29\n\
    Array\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpogmkjan_.php:41\n\
    Stack trace:\n#0 /tmp/tmpogmkjan_.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpogmkjan_.php\
    \ on line 41\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n\t$lst = array_filter($lst, function($item)\
    \ { return strlen($item) % 2 === 0; });\n\tasort($lst);\n\treturn $lst;\n}\n\n\
    $test_case = array(\"test\", \"aa\", \"a\", \"aaaa\", \"aaaaa\", \"ab\");\n$test_case_res\
    \ = array(\"aa\", \"aaaa\", \"ab\");\n$res = sorted_list_sum($test_case);\nif\
    \ ($res === $test_case_res) {\n\techo \"Test Case is Successful!\";\n} else {\n\
    \techo \"Test Case is Failed!\";\n}\nfunction candidate(...$args) {\n    return\
    \ sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Test Case is Failed!\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmp4rnw3chg.php:37\nStack trace:\n#0 /tmp/tmp4rnw3chg.php(45): test()\n\
    #1 {main}\n  thrown in /tmp/tmp4rnw3chg.php on line 37\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $oddLengths = array();\n    $evenLengths\
    \ = array();\n    foreach ($lst as $str) {\n        if (strlen($str) % 2 == 0)\
    \ {\n            array_push($evenLengths, $str);\n        } else {\n         \
    \   array_push($oddLengths, $str);\n        }\n    }\n    sort($evenLengths);\n\
    \    sort($oddLengths);\n    return array_merge($evenLengths, $oddLengths);\n\
    }\n$arr = array(\"a\", \"aa\", \"aaa\", \"b\", \"bb\", \"bbb\", \"c\", \"cc\"\
    , \"ccc\");\nvar_dump(sorted_list_sum($arr));\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(9) {\n  [0]=>\n  string(2) \"aa\"\n  [1]=>\n  string(2) \"bb\"\n\
    \  [2]=>\n  string(2) \"cc\"\n  [3]=>\n  string(1) \"a\"\n  [4]=>\n  string(3)\
    \ \"aaa\"\n  [5]=>\n  string(1) \"b\"\n  [6]=>\n  string(3) \"bbb\"\n  [7]=>\n\
    \  string(1) \"c\"\n  [8]=>\n  string(3) \"ccc\"\n}\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpwyjn4obr.php:39\nStack trace:\n#0 /tmp/tmpwyjn4obr.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpwyjn4obr.php on line 39\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $output = [];\n  foreach ($lst\
    \ as $str) {\n    if (strlen($str) % 2 == 0) {\n      $output[] = $str;\n    }\n\
    \  }\n  sort($output);\n  return $output;\n}\n$lst = array(\"aa\", \"a\", \"aaa\"\
    );\necho var_dump(sorted_list_sum($lst));\necho \"<br>\";\n$lst = array(\"ab\"\
    , \"a\", \"aaa\", \"cd\");\necho var_dump(sorted_list_sum($lst));\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(1) {\n  [0]=>\n  string(2) \"aa\"\n}\n<br>array(2) {\n  [0]=>\n \
    \ string(2) \"ab\"\n  [1]=>\n  string(2) \"cd\"\n}\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp8brfv89j.php:43\nStack trace:\n#0 /tmp/tmp8brfv89j.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp8brfv89j.php on line 43\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $arr_len = count($lst);\n  $final_arr\
    \ = array();\n  $alpha_arr = array();\n  for ($i = 0; $i < $arr_len; $i++) {\n\
    \    if (strlen($lst[$i]) % 2 === 0) {\n      $final_arr[] = $lst[$i];\n    }\n\
    \  }\n  sort($final_arr);\n  return $final_arr;\n}\n\n$my_lst = array(\"aa\",\
    \ \"a\", \"aaa\");\n$my_lst2 = array(\"ab\", \"a\", \"aaa\", \"cd\");\n\nprint_r(sorted_list_sum($my_lst));\n\
    print_r(sorted_list_sum($my_lst2));\n\nfunction candidate(...$args) {\n    return\
    \ sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\nArray\n(\n    [0] => ab\n    [1] => cd\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf2owuws5.php:47\nStack\
    \ trace:\n#0 /tmp/tmpf2owuws5.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpf2owuws5.php\
    \ on line 47\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $sum = 0;\n  foreach ($lst as $num)\
    \ {\n    $sum += $num;\n  }\n  return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: int + string\
    \ in /tmp/tmp088p8yqg.php:20\nStack trace:\n#0 /tmp/tmp088p8yqg.php(26): sorted_list_sum(Array)\n\
    #1 /tmp/tmp088p8yqg.php(30): candidate(Array)\n#2 /tmp/tmp088p8yqg.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmp088p8yqg.php on line 20\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $output = [];\n    foreach ($lst\
    \ as $key => $value) {\n        if (strlen($value) % 2 == 0) {\n            $output[]\
    \ = $value;\n        }\n    }\n    asort($output);\n    return $output;\n}\nprint_r(sorted_list_sum([\"\
    aa\", \"a\", \"aaa\"]));\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpkv3g1g9m.php:34\nStack trace:\n#0 /tmp/tmpkv3g1g9m.php(42): test()\n\
    #1 {main}\n  thrown in /tmp/tmpkv3g1g9m.php on line 34\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $sorted_list = [];\n    foreach\
    \ ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n            $sorted_list[]\
    \ = $item;\n        }\n    }\n    sort($sorted_list);\n    return $sorted_list;\n\
    }\n\n$lst = [\"aa\", \"a\", \"aaa\"];\n$even_list = sorted_list_sum($lst);\nvar_dump($even_list);\n\
    \n$lst = [\"ab\", \"a\", \"aaa\", \"cd\"];\n$even_list = sorted_list_sum($lst);\n\
    var_dump($even_list);\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(1) {\n  [0]=>\n  string(2) \"aa\"\n}\narray(2) {\n  [0]=>\n  string(2)\
    \ \"ab\"\n  [1]=>\n  string(2) \"cd\"\n}\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpmt_zunzx.php:46\nStack trace:\n#0 /tmp/tmpmt_zunzx.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpmt_zunzx.php on line 46\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n\t$ans = array();\n\tif ($lst ==\
    \ NULL)\n\t\treturn $ans;\n\tforeach ($lst as $i) {\n\t\tif (count($i) % 2 ==\
    \ 0)\n\t\t\tarray_push($ans, $i);\n\t}\n\tsort($ans);\n\treturn $ans;\n}\necho\
    \ \"Test with: array(\\\"aa\\\", \\\"a\\\", \\\"aaa\\\")\\n\";\necho \"Result\
    \ should be: array(\\\"aa\\\")\\n\";\necho \"Result: \";\nvar_dump(sorted_list_sum(array(\"\
    aa\", \"a\", \"aaa\")));\necho \"\\nTest with: array(\\\"ab\\\", \\\"a\\\", \\\
    \"aaa\\\", \\\"cd\\\")\\n\";\necho \"Result should be: array(\\\"ab\\\", \\\"\
    cd\\\")\\n\";\necho \"Result: \";\nvar_dump(sorted_list_sum(array(\"ab\", \"a\"\
    , \"aaa\", \"cd\")));\necho \"\\n\\n\";\nfunction candidate(...$args) {\n    return\
    \ sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Test with: array(\"aa\", \"a\", \"aaa\")\nResult should be: array(\"aa\"\
    )\nResult: \nFatal error: Uncaught TypeError: count(): Argument #1 ($value) must\
    \ be of type Countable|array, string given in /tmp/tmp_mmt_k7a.php:22\nStack trace:\n\
    #0 /tmp/tmp_mmt_k7a.php(31): sorted_list_sum(Array)\n#1 {main}\n  thrown in /tmp/tmp_mmt_k7a.php\
    \ on line 22\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n\t$sorted_list = [];\n\tforeach ($lst\
    \ as $item) {\n\t\t$sorted_list[$item] = strlen($item);\n\t}\n\tasort($sorted_list);\n\
    \treturn array_keys($sorted_list);\n}\n\nfunction candidate(...$args) {\n    return\
    \ sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5xec0wii.php:31\n\
    Stack trace:\n#0 /tmp/tmp5xec0wii.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp5xec0wii.php\
    \ on line 31\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $counter = 0;\n  foreach ($lst\
    \ as $key => $value) {\n    if (strlen($value) % 2 == 0) {\n      $counter++;\n\
    \    }\n  }\n  return $counter;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw88gy83l.php:32\n\
    Stack trace:\n#0 /tmp/tmpw88gy83l.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpw88gy83l.php\
    \ on line 32\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $list_length = sizeof($lst);\n\
    \    $list_sum = 0;\n    foreach ($lst as $value) {\n        $list_sum += $value;\n\
    \    }\n    return $list_sum;\n}\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: int + string\
    \ in /tmp/tmpwuljug5o.php:21\nStack trace:\n#0 /tmp/tmpwuljug5o.php(26): sorted_list_sum(Array)\n\
    #1 /tmp/tmpwuljug5o.php(30): candidate(Array)\n#2 /tmp/tmpwuljug5o.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpwuljug5o.php on line 21\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($str)\
    \ {\n        return strlen($str) % 2 == 0;\n    });\n    sort($lst);\n    return\
    \ $lst;\n}\n\nvar_dump(sorted_list_sum(array(\"aa\", \"a\", \"aaa\")));\nvar_dump(sorted_list_sum(array(\"\
    ab\", \"a\", \"aaa\", \"cd\")));\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(1) {\n  [0]=>\n  string(2) \"aa\"\n}\narray(2) {\n  [0]=>\n  string(2)\
    \ \"ab\"\n  [1]=>\n  string(2) \"cd\"\n}\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpb2mwlloi.php:38\nStack trace:\n#0 /tmp/tmpb2mwlloi.php(41):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpb2mwlloi.php on line 38\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $new_lst = [];\n  $new_str = \"\
    \";\n  for ($i = 0; $i < count($lst); $i++) {\n    $new_str = \"\";\n    for ($j\
    \ = 0; $j < strlen($lst[$i]); $j++) {\n      $new_str .= $lst[$i][$j];\n    }\n\
    \    if (strlen($new_str) % 2 == 0) {\n      array_push($new_lst, $new_str);\n\
    \    }\n  }\n  return $new_lst;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp47fr0gml.php:38\n\
    Stack trace:\n#0 /tmp/tmp47fr0gml.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp47fr0gml.php\
    \ on line 38\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $result = [];\n    foreach ($lst\
    \ as $val) {\n        if (strlen($val) % 2 == 0) {\n            $result[] = $val;\n\
    \        }\n    }\n    sort($result);\n    return $result;\n}\n\n$list = array(\"\
    a\", \"aa\", \"aaa\", \"b\", \"ab\", \"ba\", \"baa\", \"c\", \"ac\", \"bac\",\
    \ \"aaac\");\nprint_r(sorted_list_sum($list));\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n    [1] => aaac\n    [2] => ab\n    [3] => ac\n\
    \    [4] => ba\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpta_wgfzl.php:42\n\
    Stack trace:\n#0 /tmp/tmpta_wgfzl.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpta_wgfzl.php\
    \ on line 42\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst = array_filter($lst, function($v)\
    \ {\n        return (strlen($v) % 2 == 0);\n    });\n    $lst = array_unique($lst);\n\
    \    sort($lst);\n    return $lst;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpley7fxy1.php:37\n\
    Stack trace:\n#0 /tmp/tmpley7fxy1.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpley7fxy1.php\
    \ on line 37\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n\t$lst = (array) $lst;\n\t$result\
    \ = array();\n\tforeach ($lst as $key => $value) {\n\t\tif (strlen($value) % 2\
    \ == 0) {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\tsort($result);\n\treturn $result;\n\
    }\necho \"<pre>\";\necho implode(\",\", sorted_list_sum(array(\"aa\", \"a\", \"\
    aaa\")));\necho \"</pre>\";\n\necho \"<pre>\";\necho implode(\",\", sorted_list_sum(array(\"\
    ab\", \"a\", \"aaa\", \"cd\")));\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>aa</pre><pre>ab,cd</pre>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpf4khmt9p.php:46\nStack trace:\n#0 /tmp/tmpf4khmt9p.php(49): test()\n\
    #1 {main}\n  thrown in /tmp/tmpf4khmt9p.php on line 46\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n\t$temp = [];\n\t$list = [];\n\t\
    foreach ($lst as $item) {\n\t\t$item_length = strlen($item);\n\t\tif (!isset($temp[$item_length]))\
    \ {\n\t\t\t$temp[$item_length] = [];\n\t\t}\n\t\t$temp[$item_length][] = $item;\n\
    \t}\n\tksort($temp);\n\tforeach ($temp as $i) {\n\t\tsort($i);\n\t\t$list = array_merge($list,\
    \ $i);\n\t}\n\treturn $list;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph4otarbh.php:40\n\
    Stack trace:\n#0 /tmp/tmph4otarbh.php(49): test()\n#1 {main}\n  thrown in /tmp/tmph4otarbh.php\
    \ on line 40\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n\t$lengths = array();\n\tforeach\
    \ ($lst as $key => $value) {\n\t\t$lengths[$key] = strlen($value);\n\t}\n\tarray_multisort($lengths,\
    \ SORT_ASC, SORT_NUMERIC, $lst);\n\treturn $lst;\n}\n\n$lst = array(\"cd\", \"\
    cc\", \"aa\", \"bb\", \"ccc\", \"cccc\", \"a\", \"ab\", \"abc\", \"b\", \"bbb\"\
    , \"bbbb\");\nprint_r(sorted_list_sum($lst));\nfunction candidate(...$args) {\n\
    \    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => a\n    [1] => b\n    [2] => aa\n    [3] => ab\n  \
    \  [4] => bb\n    [5] => cc\n    [6] => cd\n    [7] => abc\n    [8] => bbb\n \
    \   [9] => ccc\n    [10] => bbbb\n    [11] => cccc\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp41mljwe8.php:33\nStack trace:\n#0 /tmp/tmp41mljwe8.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp41mljwe8.php on line 33\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $new_lst = [];\n  foreach ($lst\
    \ as $item) {\n    if (strlen($item) % 2 == 0) {\n      $new_lst[] = $item;\n\
    \    }\n  }\n  return $new_lst;\n}\n\nfunction candidate(...$args) {\n    return\
    \ sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9gli7a7n.php:33\n\
    Stack trace:\n#0 /tmp/tmp9gli7a7n.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp9gli7a7n.php\
    \ on line 33\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  // your code goes here\n}\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptq9yy18h.php:25\n\
    Stack trace:\n#0 /tmp/tmptq9yy18h.php(34): test()\n#1 {main}\n  thrown in /tmp/tmptq9yy18h.php\
    \ on line 25\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $odd_lst = [];\n    foreach ($lst\
    \ as $el) {\n        if (strlen($el) % 2 == 1) {\n            $odd_lst[] = $el;\n\
    \        }\n    }\n    sort($odd_lst);\n    return $odd_lst;\n}\n$my_array = array(\"\
    aa\", \"a\", \"aaa\");\nvar_dump(sorted_list_sum($my_array));\necho \"<br>\";\n\
    $my_array = array(\"ab\", \"a\", \"aaa\", \"cd\");\nvar_dump(sorted_list_sum($my_array));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(2) {\n  [0]=>\n  string(1) \"a\"\n  [1]=>\n  string(3) \"aaa\"\n\
    }\n<br>array(2) {\n  [0]=>\n  string(1) \"a\"\n  [1]=>\n  string(3) \"aaa\"\n\
    }\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzxp9ni8h.php:37\n\
    Stack trace:\n#0 /tmp/tmpzxp9ni8h.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpzxp9ni8h.php\
    \ on line 37\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $odd_list = array();\n    $even_list\
    \ = array();\n    foreach ($lst as $value) {\n        if (strlen($value) % 2 ==\
    \ 0) {\n            array_push($even_list, $value);\n        } else {\n      \
    \      array_push($odd_list, $value);\n        }\n    }\n    sort($even_list);\n\
    \    sort($odd_list);\n    return $even_list;\n}\n\nprint_r(sorted_list_sum(array(\"\
    aa\", \"a\", \"aaa\")));\necho PHP_EOL;\nprint_r(sorted_list_sum(array(\"ab\"\
    , \"a\", \"aaa\", \"cd\")));\necho PHP_EOL;\nfunction candidate(...$args) {\n\
    \    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkba7zfbz.php:47\n\
    Stack trace:\n#0 /tmp/tmpkba7zfbz.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpkba7zfbz.php\
    \ on line 47\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    if (count($lst) == 0) {\n   \
    \     return array();\n    } else {\n        $ordered = $lst;\n        $length\
    \ = count($lst);\n        for ($i = 0; $i < $length; $i++) {\n            for\
    \ ($j = $i + 1; $j < $length; $j++) {\n                if (strlen($ordered[$i])\
    \ > strlen($ordered[$j])) {\n                    $tmp = $ordered[$i];\n      \
    \              $ordered[$i] = $ordered[$j];\n                    $ordered[$j]\
    \ = $tmp;\n                }\n            }\n        }\n        return $ordered;\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpinz953q2.php:41\n\
    Stack trace:\n#0 /tmp/tmpinz953q2.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpinz953q2.php\
    \ on line 41\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    foreach ($lst as $value) {\n\
    \        if (strlen($value) % 2 == 0) {\n            $newlist[] = $value;\n  \
    \      }\n    }\n    sort($newlist);\n    return $newlist;\n}\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: sort(): Argument #1 ($array) must be\
    \ of type array, null given in /tmp/tmpedw0kenv.php:23\nStack trace:\n#0 /tmp/tmpedw0kenv.php(23):\
    \ sort(NULL)\n#1 /tmp/tmpedw0kenv.php(27): sorted_list_sum(Array)\n#2 /tmp/tmpedw0kenv.php(33):\
    \ candidate(Array)\n#3 /tmp/tmpedw0kenv.php(40): test()\n#4 {main}\n  thrown in\
    \ /tmp/tmpedw0kenv.php on line 23\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $all = [];\n    $re = [];\n \
    \   // Calculate the sum of all elements in $lst.\n    foreach ($lst as $value)\
    \ {\n        $all = array_merge($all, $value);\n    }\n    sort($all);\n    $n\
    \ = 0;\n    $pre = '';\n    foreach ($all as $value) {\n        if ($pre !== $value)\
    \ {\n            $n = 1;\n            $pre = $value;\n        } else {\n     \
    \       $n++;\n        }\n        if ($n > 1) {\n            array_push($re, $value);\n\
    \        }\n    }\n    // Return the sum.\n    return $re;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: array_merge(): Argument #2 must be of\
    \ type array, string given in /tmp/tmpk_g92n_p.php:22\nStack trace:\n#0 /tmp/tmpk_g92n_p.php(22):\
    \ array_merge(Array, 'aa')\n#1 /tmp/tmpk_g92n_p.php(43): sorted_list_sum(Array)\n\
    #2 /tmp/tmpk_g92n_p.php(47): candidate(Array)\n#3 /tmp/tmpk_g92n_p.php(56): test()\n\
    #4 {main}\n  thrown in /tmp/tmpk_g92n_p.php on line 22\n"
  timestamp: 1659979918
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $len_map = [];\n  $new_lst = [];\n\
    \  foreach ($lst as $val) {\n    $val_len = strlen($val);\n    if (array_key_exists($val_len,\
    \ $len_map)) {\n      $len_map[$val_len][] = $val;\n    } else {\n      $len_map[$val_len]\
    \ = [$val];\n    }\n  }\n  ksort($len_map);\n  foreach ($len_map as $k => $v)\
    \ {\n    if ($k % 2 == 0) {\n      sort($v);\n      $new_lst = array_merge($new_lst,\
    \ $v);\n    }\n  }\n  return $new_lst;\n}\necho \"<h1>Sorted List Sum</h1>\";\n\
    print_r(sorted_list_sum([\"aa\", \"a\", \"aaa\"]));\necho \"<br>\";\nprint_r(sorted_list_sum([\"\
    ab\", \"a\", \"aaa\", \"cd\"]));\necho \"<br>\";\nprint_r(sorted_list_sum([\"\
    c\", \"b\", \"a\"]));\necho \"<br>\";\nprint_r(sorted_list_sum([\"a\", \"b\",\
    \ \"c\"]));\necho \"<br>\";\necho \"<hr>\";\n\nfunction candidate(...$args) {\n\
    \    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<h1>Sorted List Sum</h1>Array\n(\n    [0] => aa\n)\n<br>Array\n(\n    [0]\
    \ => ab\n    [1] => cd\n)\n<br>Array\n(\n)\n<br>Array\n(\n)\n<br><hr>"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $ret_list = array();\n  foreach\
    \ ($lst as $item) {\n    if(strlen($item) % 2 == 0) {\n      array_push($ret_list,\
    \ $item);\n    }\n  }\n  sort($ret_list);\n  return $ret_list;\n}\n$test1 = array(\"\
    aa\", \"a\", \"aaa\");\n$test2 = array(\"ab\", \"a\", \"aaa\", \"cd\");\necho\
    \ \"test1: \";\nvar_dump(sorted_list_sum($test1));\necho \"test2: \";\nvar_dump(sorted_list_sum($test2));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "test1: array(1) {\n  [0]=>\n  string(2) \"aa\"\n}\ntest2: array(2) {\n\
    \  [0]=>\n  string(2) \"ab\"\n  [1]=>\n  string(2) \"cd\"\n}\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpmp7164bf.php:44\nStack trace:\n#0 /tmp/tmpmp7164bf.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpmp7164bf.php on line 44\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $lst = array_filter($lst, function($x)\
    \ { return strlen($x) % 2 == 0; });\n  asort($lst);\n  return $lst;\n}\n\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwhiwr5cg.php:29\n\
    Stack trace:\n#0 /tmp/tmpwhiwr5cg.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpwhiwr5cg.php\
    \ on line 29\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    sort($lst);\n    $lst = array_unique($lst);\n\
    \    $sum = 0;\n    foreach ($lst as $val) {\n        $sum += $val;\n    }\n \
    \   return $sum;\n}\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: int + string\
    \ in /tmp/tmpwr67c9d9.php:22\nStack trace:\n#0 /tmp/tmpwr67c9d9.php(27): sorted_list_sum(Array)\n\
    #1 /tmp/tmpwr67c9d9.php(31): candidate(Array)\n#2 /tmp/tmpwr67c9d9.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmpwr67c9d9.php on line 22\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    if (count($lst) == 0) {\n   \
    \     return 0;\n    }\n    $c = $lst[0];\n    unset($lst[0]);\n    return $c\
    \ + sorted_list_sum($lst);\n}\n\necho sorted_list_sum(array(1, 2, 3));\n\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Warning: Undefined array key 0 in /tmp/tmpe6tfdkan.php on line 21


    Warning: Undefined array key 0 in /tmp/tmpe6tfdkan.php on line 21


    Warning: Undefined array key 0 in /tmp/tmpe6tfdkan.php on line 21


    Warning: Undefined array key 0 in /tmp/tmpe6tfdkan.php on line 21


    Warning: Undefined array key 0 in /tmp/tmpe6tfdkan.php on line 21


    Warning: Undefined array key 0 in /tmp/tmpe6tfdkan.php on line 21


    Warning: Undefined array key 0 in /tmp/tmpe6tfdkan.php on line 21


    Warning: Undefined array key 0 in /tmp/tmpe6tfdkan.php on line 21


    Warning: Undefined array key 0 in /tmp/tmpe6tfdkan.php on line 21


    Warning: Undefined array key 0 in /tmp/tmpe6tfdkan.php on line 21


    Warning: Undefined array key 0 in /tmp/tmpe6tfdkan.php on line 21


    Warning: Undefined array key 0 in /tmp/tmpe6tfdkan.php on line 21


    Warning: Undefined array key 0 in /tmp/tmpe6tfdkan.php on line 21


    Warning: Undefined array key 0 in /tmp/tmpe6tfdkan.php on line 21


    Warning: Undefined array key 0 in /tmp/tmpe6tfdkan.php on line 21


    Warning: Undefined array key 0 in /tmp/tmpe6tfdkan.php on line 21


    Warning: Undefined array key 0 in /tmp/tmpe6tfdkan.php on line 21


    Warning: Undefined array key 0 in /tmp/tmpe6tfdkan.php on line 21


    Warning: Undefined array key 0 in /tmp/tmpe6tfdkan.php on line 21


    Warning: Undefined array key 0 in /tmp/tmpe6tfdkan.php on line 21


    Warning: Undefined array key 0 in /tmp/tmpe6tfdkan.php on line 21


    Warning: Undefined array key 0 in /tmp/tmpe6tfdkan.php on line 21


    Warning: Undefined array key 0 in /tmp/tmpe6tfdkan.php on line 21


    Warning: Undefined array key 0 in /tmp/tmpe6tfdkan.php on line 21


    Warning: Undefined array key 0 in /tmp/tmpe6tfdkan.php on line 21


    Warning: Undefined array key 0 in /tmp/tmpe6tfdkan.php on line 21


    Warning: Undefined array key 0 in /tmp/tmpe6tfdkan.php on line 21


    Warning: Undefined array key 0 in /tmp/tmpe6tfdkan.php on line 21


    Warning: Undefined array key 0 in /tmp/tmpe6tfdkan.php on line 21


    Warning: Undefined array key 0 in /tmp/tmpe6tfdkan.php on line 21


    Warning: Undefined array key 0 in /tm'
  timestamp: 1659979921
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    if (empty($lst)) {\n        return\
    \ array();\n    } else {\n        return sorted_list_sum(take_odd_length($lst));\n\
    \    }\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function take_odd_length()\
    \ in /tmp/tmp5i6yk2ui.php:21\nStack trace:\n#0 /tmp/tmp5i6yk2ui.php(26): sorted_list_sum(Array)\n\
    #1 /tmp/tmp5i6yk2ui.php(30): candidate(Array)\n#2 /tmp/tmp5i6yk2ui.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmp5i6yk2ui.php on line 21\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  return sort($lst);\n}\n$result\
    \ = sorted_list_sum(array(\"ab\", \"a\", \"aaa\", \"cd\"));\necho \"<br>\";\n\
    echo \"<br>\";\necho \"output :\";\nprint_r ($result);\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<br><br>output :1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo7e828ln.php:30\n\
    Stack trace:\n#0 /tmp/tmpo7e828ln.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpo7e828ln.php\
    \ on line 30\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $odds = [];\n  $evens = [];\n \
    \ foreach ($lst as $elem) {\n    $len = strlen($elem);\n    if ($len % 2 == 0)\
    \ {\n      $evens[] = $elem;\n    } else {\n      $odds[] = $elem;\n    }\n  }\n\
    \  sort($evens);\n  return $evens;\n}\n$result = sorted_list_sum(array(\"ab\"\
    , \"a\", \"aaa\", \"cd\"));\nprint_r($result);\nfunction candidate(...$args) {\n\
    \    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => ab\n    [1] => cd\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp1uhb__l2.php:44\nStack trace:\n#0 /tmp/tmp1uhb__l2.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp1uhb__l2.php on line 44\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $output = [];\n  foreach ($lst\
    \ as $word) {\n    if (strlen($word) % 2 == 0) {\n      $output[] = $word;\n \
    \   }\n  }\n  sort($output);\n  return $output;\n}\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbl5015gg.php:38\n\
    Stack trace:\n#0 /tmp/tmpbl5015gg.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpbl5015gg.php\
    \ on line 38\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $count = count($lst);\n    $output\
    \ = [];\n    for ($i = 0; $i < $count; $i++) {\n        $count = count($lst);\n\
    \        for ($j = 0; $j < $count; $j++) {\n            if ($lst[$i] < $lst[$j])\
    \ {\n                $tmp = $lst[$i];\n                $lst[$i] = $lst[$j];\n\
    \                $lst[$j] = $tmp;\n            }\n        }\n    }\n    for ($i\
    \ = 0; $i < $count; $i++) {\n        if (isset($lst[$i + 1])) {\n            if\
    \ ($lst[$i] == $lst[$i + 1]) {\n                $i++;\n            }\n       \
    \ }\n        array_push($output, $lst[$i]);\n    }\n    return $output;\n}\n\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4v1wgmd5.php:46\n\
    Stack trace:\n#0 /tmp/tmp4v1wgmd5.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp4v1wgmd5.php\
    \ on line 46\n"
  timestamp: 1659979918
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $remove_elements = [];\n    foreach\
    \ ($lst as $key => $value) {\n        if (strlen($value) % 2 != 0) {\n       \
    \     array_push($remove_elements, $key);\n        }\n    }\n    // rsort($remove_elements);\n\
    \    foreach ($remove_elements as $key => $value) {\n        unset($lst[$value]);\n\
    \    }\n    sort($lst);\n    return $lst;\n}\n$case = array(\"aa\", \"a\", \"\
    aaa\");\necho \"CASE: \";\necho implode(\", \", $case);\necho \"\\n\";\necho \"\
    ANSWER: \";\necho implode(\", \", sorted_list_sum($case));\necho \"\\n\";\n$case\
    \ = array(\"ab\", \"a\", \"aaa\", \"cd\");\necho \"CASE: \";\necho implode(\"\
    , \", $case);\necho \"\\n\";\necho \"ANSWER: \";\necho implode(\", \", sorted_list_sum($case));\n\
    echo \"\\n\";\n$case = array(\"ab\", \"a\", \"aaa\", \"cd\", \"ba\", \"ef\", \"\
    abc\");\necho \"CASE: \";\necho implode(\", \", $case);\necho \"\\n\";\necho \"\
    ANSWER: \";\necho implode(\", \", sorted_list_sum($case));\necho \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "CASE: aa, a, aaa\nANSWER: aa\nCASE: ab, a, aaa, cd\nANSWER: ab, cd\nCASE:\
    \ ab, a, aaa, cd, ba, ef, abc\nANSWER: ab, ba, cd, ef\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp6rdmeck2.php:63\nStack trace:\n#0 /tmp/tmp6rdmeck2.php(66):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp6rdmeck2.php on line 63\n"
  timestamp: 1659979918
