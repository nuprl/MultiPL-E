language: php
name: HumanEval_149_sorted_list_sum
results:
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $res = array();\n  foreach ($lst\
    \ as $word) {\n    $word_len = strlen($word);\n    if ($word_len % 2 == 0) {\n\
    \      $res[] = $word;\n    }\n  }\n  sort($res);\n  return $res;\n}\n\necho json_encode(sorted_list_sum(array(\"\
    aa\", \"a\", \"aaa\")));\necho \"\\n\";\necho json_encode(sorted_list_sum(array(\"\
    ab\", \"a\", \"aaa\", \"cd\")));\necho \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "[\"aa\"]\n[\"ab\",\"cd\"]\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpp_ioxozl.php:45\nStack trace:\n#0 /tmp/tmpp_ioxozl.php(48): test()\n\
    #1 {main}\n  thrown in /tmp/tmpp_ioxozl.php on line 45\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $new_lst = [];\n  for ($i = 0;\
    \ $i < count($lst); $i++) {\n    if (strlen($lst[$i]) % 2 == 0) {\n      array_push($new_lst,\
    \ $lst[$i]);\n    }\n  }\n  sort($new_lst);\n  return $new_lst;\n}\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7rtkfwab.php:38\n\
    Stack trace:\n#0 /tmp/tmp7rtkfwab.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp7rtkfwab.php\
    \ on line 38\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $sorted_lst = array();\n    foreach\
    \ ($lst as $item) {\n        array_push($sorted_lst, $item);\n    }\n    return\
    \ $sorted_lst;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgzac706r.php:30\n\
    Stack trace:\n#0 /tmp/tmpgzac706r.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpgzac706r.php\
    \ on line 30\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $result = array();\n  for ($i =\
    \ 0; $i < count($lst); $i++) {\n    if (strlen($lst[$i]) % 2 === 0) {\n      array_push($result,\
    \ $lst[$i]);\n    }\n  }\n  // For the same length sort alphabetically\n  function\
    \ cmp($a, $b) {\n    $cmp = strlen($a) - strlen($b);\n    if ($cmp === 0) {\n\
    \      return strcmp($a, $b);\n    }\n    return $cmp;\n  }\n  usort($result,\
    \ \"cmp\");\n  return $result;\n}\n\n$test_list = array(\"aa\", \"a\", \"aaa\"\
    );\n$test_list2 = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($test_list));\n\
    print_r(sorted_list_sum($test_list2));\nfunction candidate(...$args) {\n    return\
    \ sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nFatal error: Cannot redeclare cmp() (previously\
    \ declared in /tmp/tmppgys1v4n.php:25) in /tmp/tmppgys1v4n.php on line 25\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  foreach ($lst as $key => $val)\
    \ {\n    if (strlen($val) % 2 == 1) {\n      unset($lst[$key]);\n    }\n  }\n\
    \  sort($lst);\n  return $lst;\n}\n\n$lst = array(\"aa\", \"a\", \"aaa\");\nprint_r(sorted_list_sum($lst));\n\
    echo \"\\n\";\n$lst = array(\"ab\", \"a\", \"aaa\", \"cd\");\nprint_r(sorted_list_sum($lst));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nArray\n(\n    [0] => ab\n    [1] => cd\n\
    )\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuwn61vrd.php:43\n\
    Stack trace:\n#0 /tmp/tmpuwn61vrd.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpuwn61vrd.php\
    \ on line 43\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $result = array();\n    for ($i\
    \ = 0; $i < count($lst); $i++) {\n        $x = $lst[$i];\n        for ($j = 0;\
    \ $j < count($result); $j++) {\n            $y = $result[$j];\n            if\
    \ (strlen($x) < strlen($y)) {\n                array_splice($result, $j, 0, $x);\n\
    \                $i++;\n                continue 2;\n            } else if (strlen($x)\
    \ == strlen($y)) {\n                if ($x < $y) {\n                    array_splice($result,\
    \ $j, 0, $x);\n                    $i++;\n                    continue 2;\n  \
    \              }\n            }\n        }\n        $result[] = $x;\n    }\n \
    \   return $result;\n}\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2bdlrfr2.php:44\n\
    Stack trace:\n#0 /tmp/tmp2bdlrfr2.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp2bdlrfr2.php\
    \ on line 44\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $lst2 = array();\n  foreach ($lst\
    \ as $str) {\n    if (strlen($str) % 2 == 0) {\n      $lst2[] = $str;\n    }\n\
    \  }\n  return $lst2;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptaslu8ej.php:33\n\
    Stack trace:\n#0 /tmp/tmptaslu8ej.php(41): test()\n#1 {main}\n  thrown in /tmp/tmptaslu8ej.php\
    \ on line 33\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $lst = array_filter($lst, function($x)\
    \ {\n    return (strlen($x) % 2 == 0);\n  });\n  asort($lst);\n  return $lst;\n\
    }\n$test = array(\"aa\", \"a\", \"aaa\");\nvar_dump(sorted_list_sum($test));\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(1) {\n  [0]=>\n  string(2) \"aa\"\n}\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp3qa8thnh.php:32\nStack trace:\n#0 /tmp/tmp3qa8thnh.php(40):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp3qa8thnh.php on line 32\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $words = explode(',', $lst);\n\
    \    $words_lens = array_map('strlen', $words);\n    sort($words_lens);\n    $words_order\
    \ = array_flip($words_lens);\n    $sorted_words = array();\n    foreach ($words\
    \ as $word) {\n        $len = strlen($word);\n        if (array_key_exists($len,\
    \ $words_order)) {\n            array_push($sorted_words, $word);\n          \
    \  unset($words_order[$len]);\n        }\n    }\n    return $sorted_words;\n}\n\
    \n$ret = sorted_list_sum('aa,a,aaa');\nprint_r($ret);\necho \"\\n\";\n$ret = sorted_list_sum('ab,a,aaa,cd');\n\
    print_r($ret);\necho \"\\n\";\n$ret = sorted_list_sum('ab,a,aaa,cd,abc,abd,bb,dd');\n\
    print_r($ret);\necho \"\\n\";\n$ret = sorted_list_sum('ab,a,aaa,cd,abc,abd,bb,dd,ab');\n\
    print_r($ret);\necho \"\\n\";\n$ret = sorted_list_sum('ab,a,aaa,cd,abc,abd,bb,dd,ab,ab,ab,ab,bb,bb,bb,bb,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,ab,\n\
    function candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "ab,a,aaa,cd,abc,abd,bb,dd,ab,a..."
    in /tmp/tmpjom1epg8.php on line 45

    '
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $res = array();\n  foreach ($lst\
    \ as $val) {\n    if (!($val % 2)) {\n      $res[] = $val;\n    }\n  }\n  return\
    \ $res;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: string %\
    \ int in /tmp/tmp0d2mk5ys.php:20\nStack trace:\n#0 /tmp/tmp0d2mk5ys.php(28): sorted_list_sum(Array)\n\
    #1 /tmp/tmp0d2mk5ys.php(32): candidate(Array)\n#2 /tmp/tmp0d2mk5ys.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmp0d2mk5ys.php on line 20\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        for ($j = $i + 1; $j < count($lst); $j++) {\n            if\
    \ (strlen($lst[$i]) > strlen($lst[$j])) {\n                $temp = $lst[$i];\n\
    \                $lst[$i] = $lst[$j];\n                $lst[$j] = $temp;\n   \
    \         }\n        }\n    }\n    return $lst;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3fc0g463.php:35\n\
    Stack trace:\n#0 /tmp/tmp3fc0g463.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp3fc0g463.php\
    \ on line 35\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $even = [];\n    $odd = [];\n\
    \    foreach ($lst as $l) {\n        if (strlen($l) % 2 == 0) {\n            $even[]\
    \ = $l;\n        } else {\n            $odd[] = $l;\n        }\n    }\n    sort($even);\n\
    \    return $even;\n}\n\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1efh_c8j.php:42\n\
    Stack trace:\n#0 /tmp/tmp1efh_c8j.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp1efh_c8j.php\
    \ on line 42\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  // input: array\n  // output: array\
    \ with integer sum\n  // strategy: get the sum\n  $sum = 0;\n  foreach ($lst as\
    \ $ele) {\n    $sum += $ele;\n  }\n  return $sum;\n}\n\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: int + string\
    \ in /tmp/tmpn6hqe2s0.php:23\nStack trace:\n#0 /tmp/tmpn6hqe2s0.php(29): sorted_list_sum(Array)\n\
    #1 /tmp/tmpn6hqe2s0.php(33): candidate(Array)\n#2 /tmp/tmpn6hqe2s0.php(42): test()\n\
    #3 {main}\n  thrown in /tmp/tmpn6hqe2s0.php on line 23\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $lst_sum = array();\n    foreach\
    \ ($lst as $item) {\n        if (strlen($item) % 2 == 0) {\n            array_push($lst_sum,\
    \ $item);\n        }\n    }\n    sort($lst_sum);\n    return $lst_sum;\n}\n\n\
    $list = [\"aa\", \"a\", \"aaa\"];\nprint_r(sorted_list_sum($list));\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => aa\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpkwnz20wb.php:41\nStack trace:\n#0 /tmp/tmpkwnz20wb.php(44): test()\n\
    #1 {main}\n  thrown in /tmp/tmpkwnz20wb.php on line 41\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $odd = 0;\n    $even = 0;\n \
    \   $number = 0;\n    while ($number < count($lst)) {\n        if ($lst[$number]\
    \ % 2 == 0) {\n            $even += $lst[$number];\n        } else {\n       \
    \     $odd += $lst[$number];\n        }\n        $number++;\n    }\n    return\
    \ $even - $odd;\n}\n\nprint(sorted_list_sum(array(1,2,3,4,5,6,7,8,9,10)) . \"\\\
    n\");\nprint(sorted_list_sum(array(1,3,5,7,9)) . \"\\n\");\nprint(sorted_list_sum(array(2,4,6,8,10))\
    \ . \"\\n\");\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "5\n-25\n30\n\nFatal error: Uncaught TypeError: Unsupported operand types:\
    \ string % int in /tmp/tmp0hhxn1cc.php:22\nStack trace:\n#0 /tmp/tmp0hhxn1cc.php(36):\
    \ sorted_list_sum(Array)\n#1 /tmp/tmp0hhxn1cc.php(40): candidate(Array)\n#2 /tmp/tmp0hhxn1cc.php(49):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp0hhxn1cc.php on line 22\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $lst = array_filter($lst, function($w)\
    \ {\n    return strlen($w) % 2 == 0;\n  });\n  // $lst = array_unique($lst);\n\
    \  sort($lst);\n  return $lst;\n}\n\n$a = array(\"aa\", \"a\", \"aaa\");\n$a =\
    \ array(\"ab\", \"a\", \"aaa\", \"cd\");\n\necho \"<pre>\";\nprint_r(sorted_list_sum($a));\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return sorted_list_sum(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\"))\
    \ !== array(\"aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => ab\n    [1] => cd\n)\n</pre>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpz2gdfp36.php:43\nStack trace:\n#0 /tmp/tmpz2gdfp36.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpz2gdfp36.php on line 43\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $sorted_list = sort_list($lst);\n\
    \    $even_len_words = [];\n    foreach ($sorted_list as $key => $value) {\n \
    \       if (strlen($value) % 2 == 0) {\n            array_push($even_len_words,\
    \ $value);\n        }\n    }\n    return $even_len_words;\n}\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function sort_list() in\
    \ /tmp/tmpvzjymbvr.php:18\nStack trace:\n#0 /tmp/tmpvzjymbvr.php(28): sorted_list_sum(Array)\n\
    #1 /tmp/tmpvzjymbvr.php(32): candidate(Array)\n#2 /tmp/tmpvzjymbvr.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpvzjymbvr.php on line 18\n"
  timestamp: 1659823661
- exit_code: 0
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n    $ret = array();\n    foreach\
    \ ($lst as $i) {\n        if (strlen($i) % 2 === 0) {\n            $ret[] = $i;\n\
    \        }\n    }\n    $ret = array_unique($ret);\n    usort($ret, function($a,\
    \ $b) {\n        if (strlen($a) === strlen($b)) {\n            return strnatcmp($a,\
    \ $b);\n        }\n        return strlen($a) - strlen($b);\n    });\n    return\
    \ $ret;\n}\necho implode(', ', sorted_list_sum(array(\"aa\", \"a\", \"aaa\")))\
    \ . '<br>';\necho implode(', ', sorted_list_sum(array(\"ab\", \"a\", \"aaa\",\
    \ \"cd\"))) . '<br>';\necho implode(', ', sorted_list_sum(array(\"ab\", \"cd\"\
    , \"aa\", \"a\", \"aaa\"))) . '<br>';\nfunction candidate(...$args) {\n    return\
    \ sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"school\", \"AI\", \"asdf\", \"b\")) !== array(\"\
    AI\", \"asdf\", \"school\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\"))\
    \ !== array(\"abcd\", \"dcba\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"\
    au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: aa<br>ab, cd<br>aa, ab, cd<br>
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  $lengths = array();\n  foreach\
    \ ($lst as $word) {\n    $lengths[] = strlen($word);\n  }\n  $res = array();\n\
    \  $idx = 0;\n  while (count($res) < count($lst)) {\n    $smallest = min($lengths);\n\
    \    if ($smallest % 2 == 0) {\n      $res[] = $lst[$idx];\n    }\n    $lengths[$idx]\
    \ = $smallest + 1;\n    $idx++;\n  }\n  return $res;\n}\necho '<p>' . implode(',\
    \ ', sorted_list_sum(array(\"aa\", \"a\", \"aaa\"))) . '</p>';\necho '<p>' . implode(',\
    \ ', sorted_list_sum(array(\"ab\", \"a\", \"aaa\", \"cd\"))) . '</p>';\nfunction\
    \ candidate(...$args) {\n    return sorted_list_sum(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"\
    aa\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    school\", \"AI\", \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    b\", \"c\", \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(array(\"d\", \"dcba\", \"abcd\", \"a\")) !== array(\"abcd\"\
    , \"dcba\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    AI\", \"ai\", \"au\")) !== array(\"AI\", \"ai\", \"au\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"a\", \"b\", \"b\", \"c\", \"c\"\
    , \"a\")) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    aaaa\", \"bbbb\", \"dd\", \"cc\")) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\"\
    )) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 3 in /tmp/tmp9gmlaqro.php on line 27\n\n\
    Warning: Undefined array key 4 in /tmp/tmp9gmlaqro.php on line 27\n<p>aaa, , </p>\n\
    Warning: Undefined array key 4 in /tmp/tmp9gmlaqro.php on line 27\n\nWarning:\
    \ Undefined array key 5 in /tmp/tmp9gmlaqro.php on line 27\n<p>aaa, cd, , </p>\n\
    Warning: Undefined array key 3 in /tmp/tmp9gmlaqro.php on line 27\n\nWarning:\
    \ Undefined array key 4 in /tmp/tmp9gmlaqro.php on line 27\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp9gmlaqro.php:41\nStack trace:\n#0 /tmp/tmp9gmlaqro.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp9gmlaqro.php on line 41\n"
  timestamp: 1659823661
- exit_code: 255
  program: "<?php\n// Write a function that accepts an array of strings as a parameter,\n\
    // deletes the strings that have odd lengths from it,\n// and returns the resulted\
    \ array with a sorted order,\n// The array is always an array of strings and never\
    \ an array of numbers,\n// and it may contain duplicates.\n// The order of the\
    \ array should be ascending by length of each word, and you\n// should return\
    \ the array sorted by that rule.\n// If two words have the same length, sort the\
    \ array alphabetically.\n// The function should return an array of strings in\
    \ sorted order.\n// You may assume that all words will have the same length.\n\
    // For example:\n// >>> list_sort(array(\"aa\", \"a\", \"aaa\"))\n// array(\"\
    aa\")\n// >>> list_sort(array(\"ab\", \"a\", \"aaa\", \"cd\"))\n// array(\"ab\"\
    , \"cd\")\nfunction sorted_list_sum($lst) {\n  if (count($lst) == 0) {\n    return\
    \ 0;\n  }\n  return $lst[0] + sorted_list_sum(array_slice($lst, 1));\n}\n$list\
    \ = array(\"aa\", \"a\", \"aaa\");\necho sorted_list_sum($list);\nfunction candidate(...$args)\
    \ {\n    return sorted_list_sum(...$args);\n}\n\nfunction test(): void {\n   \
    \ if (candidate(array(\"aa\", \"a\", \"aaa\")) !== array(\"aa\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"school\", \"AI\",\
    \ \"asdf\", \"b\")) !== array(\"AI\", \"asdf\", \"school\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"d\", \"b\", \"c\", \"a\")) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"d\", \"\
    dcba\", \"abcd\", \"a\")) !== array(\"abcd\", \"dcba\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"AI\", \"ai\", \"au\")) !== array(\"\
    AI\", \"ai\", \"au\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    a\", \"b\", \"b\", \"c\", \"c\", \"a\")) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"aaaa\", \"bbbb\", \"dd\", \"cc\"\
    )) !== array(\"cc\", \"dd\", \"aaaa\", \"bbbb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: Unsupported operand types: string +\
    \ int in /tmp/tmpy372vc8z.php:21\nStack trace:\n#0 /tmp/tmpy372vc8z.php(21): sorted_list_sum(Array)\n\
    #1 /tmp/tmpy372vc8z.php(21): sorted_list_sum(Array)\n#2 /tmp/tmpy372vc8z.php(24):\
    \ sorted_list_sum(Array)\n#3 {main}\n  thrown in /tmp/tmpy372vc8z.php on line\
    \ 21\n"
  timestamp: 1659823661
