name: HumanEval_70_strange_sort_list
language: php
prompt: "<?php\n// Given array of integers, return array in strange order.\n// Strange\
  \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
  \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list(array(1,\
  \ 2, 3, 4))\n// array(1, 4, 2, 3)\n// >>> strange_sort_list(array(5, 5, 5, 5))\n\
  // array(5, 5, 5, 5)\n// >>> strange_sort_list(array())\n// array()\nfunction strange_sort_list($lst)\
  \ {\n"
tests: "function candidate(...$args) {\n    return strange_sort_list(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
  \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
  \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
  \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
  \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
  \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
  \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $min = min($lst);\n  $max = max($lst);\n  $new = array();\n  $min_loc\
    \ = array_search($min, $lst);\n  $max_loc = array_search($max, $lst);\n  unset($lst[$min_loc]);\n\
    \  unset($lst[$max_loc]);\n  array_unshift($new, $min);\n  array_push($new, $max);\n\
    \  return $new;\n}\n", "\t// Probably not the best time complexity, but there\
    \ is a pattern\n\t// and it's not that bad.\n\t// Instead of reallocating memory\
    \ each time, we could just remove\n\t// the first and last elements of the array.\n\
    \t$lst_new = array();\n\twhile (count($lst) > 0) {\n\t\t$lst_new[] = min($lst);\n\
    \t\t$lst_new[] = max($lst);\n\t\t$lst = array_diff($lst, array(min($lst), max($lst)));\n\
    \t}\n\treturn $lst_new;\n}\n", "    if (count($lst) < 2) {\n        return $lst;\n\
    \    }\n    $sorted_lst = array();\n    $lst_count = count($lst);\n    for ($i\
    \ = 0; $i < $lst_count; $i++) {\n        if ($i % 2 == 0) {\n            array_push($sorted_lst,\
    \ min($lst));\n        } else {\n            array_push($sorted_lst, max($lst));\n\
    \        }\n        $index = array_search($sorted_lst[$i], $lst);\n        unset($lst[$index]);\n\
    \    }\n    return $sorted_lst;\n}", "\t$nums = array();\n\t$indexes = array();\n\
    \t$even = TRUE;\n\t$count = count($lst);\n\twhile ($count > 0) {\n\t\tif ($even)\
    \ {\n\t\t\t$min = min($lst);\n\t\t\t$key = array_search($min, $lst);\n\t\t\t$nums[]\
    \ = $min;\n\t\t\t$indexes[] = $key;\n\t\t\tunset($lst[$key]);\n\t\t} else {\n\t\
    \t\t$max = max($lst);\n\t\t\t$key = array_search($max, $lst);\n\t\t\t$nums[] =\
    \ $max;\n\t\t\t$indexes[] = $key;\n\t\t\tunset($lst[$key]);\n\t\t}\n\t\t$even\
    \ = !$even;\n\t\t$count--;\n\t}\n\treturn $nums;\n}\n", "    if (empty($lst))\
    \ {\n        return array();\n    }\n\n    $min = min($lst);\n    $max = max($lst);\n\
    \    $sorted = array($min);\n    $remaining = array_diff($lst, array($min));\n\
    \n    while (count($remaining) > 0) {\n        if (count($remaining) > 1) {\n\
    \            $sorted[] = max($remaining);\n            $remaining = array_diff($remaining,\
    \ array(max($remaining)));\n        }\n        $sorted[] = min($remaining);\n\
    \        $remaining = array_diff($remaining, array(min($remaining)));\n    }\n\
    \n    return $sorted;\n}\n", "    if (!is_array($lst)) {\n        throw new InvalidArgumentException(\"\
    Input should be an array.\");\n    }\n    if (empty($lst)) {\n        return array();\n\
    \    }\n    sort($lst);\n    $result = array();\n    $min = 0;\n    $max = count($lst)\
    \ - 1;\n    while ($min <= $max) {\n        $result[] = $lst[$min];\n        $min++;\n\
    \        if ($min <= $max) {\n            $result[] = $lst[$max];\n          \
    \  $max--;\n        }\n    }\n    return $result;\n}\n\necho '<pre>';\nprint_r(strange_sort_list(array(5,5,5,5)));\n\
    echo '</pre>';", "  if (!empty($lst)) {\n    if (count($lst) % 2 == 0) {\n   \
    \   // even number\n      $x = 0;\n      $y = count($lst) - 1;\n      $arr = array();\n\
    \      while ($x < $y) {\n        array_push($arr, $lst[$x]);\n        array_push($arr,\
    \ $lst[$y]);\n        $x++;\n        $y--;\n      }\n      return $arr;\n    }\
    \ else {\n      // odd number\n      $x = 0;\n      $y = count($lst) - 1;\n  \
    \    $arr = array();\n      while ($x < $y) {\n        array_push($arr, $lst[$x]);\n\
    \        array_push($arr, $lst[$y]);\n        $x++;\n        $y--;\n      }\n\
    \      array_push($arr, $lst[$x]);\n      return $arr;\n    }\n  } else {\n  \
    \  return $lst;\n  }\n}\n", "    $newList = [];\n    $min = min($lst);\n    $max\
    \ = max($lst);\n    $minIndex = 0;\n    $maxIndex = count($lst)-1;\n    while\
    \ (count($newList) < count($lst)) {\n        if ($minIndex < $maxIndex) {\n  \
    \          $newList[] = $min;\n            $minIndex++;\n            $newList[]\
    \ = $max;\n            $maxIndex--;\n        } else {\n            $newList[]\
    \ = $min;\n        }\n    }\n    return $newList;\n}\n\nprint(strange_sort_list([1,\
    \ 2, 3, 4]));", "  $min_lst = array();\n  $max_lst = array();\n  $remaining_lst\
    \ = $lst;\n  while (count($remaining_lst) > 0) {\n    $min = min($remaining_lst);\n\
    \    $max = max($remaining_lst);\n    $min_lst[] = $min;\n    $max_lst[] = $max;\n\
    \    $remaining_lst = array_diff($remaining_lst, array($min, $max));\n  }\n  $sorted_lst\
    \ = array();\n  while (count($min_lst) > 0) {\n    $sorted_lst[] = array_shift($min_lst);\n\
    \    if (count($max_lst) > 0) {\n      $sorted_lst[] = array_pop($max_lst);\n\
    \    }\n  }\n  return $sorted_lst;\n}\n\n$lst = array(1,2,3,4);\nprint_r(strange_sort_list($lst));",
  "    if (count($lst) <= 1) return $lst;\n    sort($lst);\n    $return = array($lst[0]);\n\
    \    $index = 1;\n    while (count($lst) > 0) {\n        if (count($lst) == 1)\
    \ {\n            array_push($return, $lst[0]);\n            break;\n        }\n\
    \        $index = count($lst) - $index;\n        if ($index < 0) $index = 0;\n\
    \        array_push($return, $lst[$index]);\n        unset($lst[$index]);\n  \
    \      $lst = array_values($lst);\n    }\n    return $return;\n}\necho implode(\"\
    \ \", strange_sort_list(array(1, 2, 3, 4))) . PHP_EOL;\necho implode(\" \", strange_sort_list(array(5,\
    \ 5, 5, 5))) . PHP_EOL;\necho implode(\" \", strange_sort_list(array())) . PHP_EOL;\n\
    echo implode(\" \", strange_sort_list(array(16, 15, 14, 13, 12, 11, 10, 9, 8,\
    \ 7, 6, 5, 4, 3, 2, 1))) . PHP_EOL;\necho implode(\" \", strange_sort_list(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))) . PHP_EOL;\necho implode(\"\
    \ \", strange_sort_list(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17))) . PHP_EOL;\necho implode(\" \", strange_sort_list(array(17, 16, 15,\
    \ 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1))) . PHP_EOL;\necho implode(\"\
    \ \", strange_sort_list(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18))) . PHP_EOL;", "  if(empty($lst)) {\n    return $lst;\n  }\n\n \
    \ $min = $lst[0];\n  $max = $lst[0];\n  $minPos = 0;\n  $maxPos = 0;\n  for($i\
    \ = 0; $i < count($lst); $i++) {\n    if($lst[$i] < $min) {\n      $min = $lst[$i];\n\
    \      $minPos = $i;\n    }\n    if($lst[$i] > $max) {\n      $max = $lst[$i];\n\
    \      $maxPos = $i;\n    }\n  }\n\n  $res = array();\n  $res[] = $min;\n  if($minPos\
    \ < $maxPos) {\n    $lst = array_splice($lst, $minPos+1);\n  } else {\n    $lst\
    \ = array_splice($lst, $minPos+1, $maxPos-$minPos-1);\n  }\n  $lst[] = $max;\n\
    \  $res = array_merge($res, strange_sort_list($lst));\n  return $res;\n}\n\nprint_r(strange_sort_list(array(1,\
    \ 2, 3, 4)));\necho \"\\n\";\nprint_r(strange_sort_list(array(5, 5, 5, 5)));\n\
    echo \"\\n\";\nprint_r(strange_sort_list(array()));\necho \"\\n\";\nprint_r(strange_sort_list(array(3,\
    \ 2, 1, 4)));\necho \"\\n\";\nprint_r(strange_sort_list(array(5, 1, 5, 5)));\n\
    echo \"\\n\";\nprint_r(strange_sort_list(array(5, 5, 1, 5)));\necho \"\\n\";\n\
    print_r(strange_sort_list(array(5, 5, 5, 1)));\necho \"\\n\";", "    $ret = array();\n\
    \    $min = min($lst);\n    $max = max($lst);\n    $lst = array_flip($lst);\n\
    \    $lst = array_keys($lst);\n    while (count($lst) > 0) {\n        $ret[] =\
    \ array_shift($lst);\n        if (count($lst) > 0) {\n            $ret[] = array_pop($lst);\n\
    \        }\n    }\n    return $ret;\n}\n", "    sort($lst);\n    $result = [];\n\
    \    for ($i = 0; $i < count($lst); $i += 2) {\n        if ($i+1 < count($lst))\
    \ {\n            $result[] = $lst[$i];\n            $result[] = $lst[$i+1];\n\
    \        } else {\n            $result[] = $lst[$i];\n        }\n    }\n    return\
    \ $result;\n}\n", "  $sorted_list = array();\n  $sub_array = $lst;\n  while (count($sub_array)\
    \ > 0) {\n    $sub_array = array_values($sub_array);\n    $min = $sub_array[0];\n\
    \    $max = $sub_array[0];\n    foreach ($sub_array as $val) {\n      if ($val\
    \ < $min) {\n        $min = $val;\n      }\n      if ($val > $max) {\n       \
    \ $max = $val;\n      }\n    }\n    $key = array_search($min, $sub_array);\n \
    \   unset($sub_array[$key]);\n    $sorted_list[] = $min;\n    $key = array_search($max,\
    \ $sub_array);\n    unset($sub_array[$key]);\n    $sorted_list[] = $max;\n  }\n\
    \  return $sorted_list;\n}\n\n$array = array(1,2,3,4,5,6,7,8,9,10);\n$result =\
    \ strange_sort_list($array);\nprint_r($result);", "    $result = [];\n    while\
    \ (count($lst) > 0) {\n        $result[] = min($lst);\n        $lst = array_filter($lst,\
    \ function($e) {\n            return $e != min($lst);\n        });\n        if\
    \ (count($lst) > 0) {\n            $result[] = max($lst);\n            $lst =\
    \ array_filter($lst, function($e) {\n                return $e != max($lst);\n\
    \            });\n        }\n    }\n    return $result;\n}\nprint_r(strange_sort_list([2,\
    \ 1, 3, 4]));", "  if (empty($lst)) return $lst;\n  $temp = $lst;\n  rsort($temp);\n\
    \  $odd = array_slice($temp, 0, count($temp) / 2);\n  $even = array_slice($temp,\
    \ count($temp) / 2);\n  for ($i = 0; $i < count($lst); $i++) {\n    if ($i % 2\
    \ == 0) {\n      $lst[$i] = array_pop($odd);\n    } else {\n      $lst[$i] = array_pop($even);\n\
    \    }\n  }\n  return $lst;\n}\necho \"\\nStrange sorted list is: \";\nprint_r(strange_sort_list(array(1,\
    \ 2, 3, 4)));\necho \"\\nStrange sorted list is: \";\nprint_r(strange_sort_list(array(5,\
    \ 5, 5, 5)));\necho \"\\nStrange sorted list is: \";\nprint_r(strange_sort_list(array()));\n\
    echo \"\\n\";", "    if (count($lst) < 2) return $lst;\n    sort($lst);\n    return\
    \ array_merge(array($lst[0]), strange_sort_list(array_slice($lst, 2)), array($lst[1]));\n\
    }\n\n$test_list = array(1, 2, 3, 4);\nprint_r(strange_sort_list($test_list));\n\
    \n$test_list = array(1, 2, 3, 4, 5);\nprint_r(strange_sort_list($test_list));\n\
    \n$test_list = array(10, 20, 30, 40, 50, 60, 70, 80, 90, 100);\nprint_r(strange_sort_list($test_list));\n\
    \n$test_list = array(5, 5, 5, 5);\nprint_r(strange_sort_list($test_list));\n\n\
    $test_list = array();\nprint_r(strange_sort_list($test_list));\n\n$test_list =\
    \ array(5);\nprint_r(strange_sort_list($test_list));\n\n$test_list = array(12,\
    \ 21, 213, 232, 24, 2456, 456, 543, 65, 765, 765, 7);\nprint_r(strange_sort_list($test_list));\n",
  "  if (empty($lst)) {\n    return $lst;\n  }\n  $min = min($lst);\n  $max = max($lst);\n\
    \  $out = array($min);\n  $pos = 0;\n  foreach ($lst as $val) {\n    if ($val\
    \ != $min && $val != $max) {\n      $out[] = $val;\n    }\n  }\n  $out[] = $max;\n\
    \  return $out;\n}\n", "    $l = count($lst);\n    if ($l <= 1) return $lst;\n\
    \    $ret = array($lst[0]);\n    $lst[0] = \"skip\";\n    $cur = 1;\n    while\
    \ (count($ret) < $l) {\n        if ($cur) {\n            $max = 0;\n         \
    \   $maxi = -1;\n            for ($i = 0; $i < $l; $i++) {\n                if\
    \ ($lst[$i] == \"skip\") continue;\n                if ($lst[$i] > $max) {\n \
    \                   $max = $lst[$i];\n                    $maxi = $i;\n      \
    \          }\n            }\n            $ret[] = $max;\n            $lst[$maxi]\
    \ = \"skip\";\n        } else {\n            $min = PHP_INT_MAX;\n           \
    \ $mini = -1;\n            for ($i = 0; $i < $l; $i++) {\n                if ($lst[$i]\
    \ == \"skip\") continue;\n                if ($lst[$i] < $min) {\n           \
    \         $min = $lst[$i];\n                    $mini = $i;\n                }\n\
    \            }\n            $ret[] = $min;\n            $lst[$mini] = \"skip\"\
    ;\n        }\n        $cur = !$cur;\n    }\n    return $ret;\n}\n\nprint_r(strange_sort_list(array(1,\
    \ 2, 3, 4)));\nprint_r(strange_sort_list(array(5, 5, 5, 5)));\nprint_r(strange_sort_list(array()));",
  "    if (empty($lst)) {\n        return $lst;\n    }\n    sort($lst);\n    $l =\
    \ count($lst);\n    $result = [];\n    for ($i = 0; $i < $l; $i++) {\n       \
    \ if ($i % 2 == 0) {\n            $result[] = array_shift($lst);\n        } else\
    \ {\n            $result[] = array_pop($lst);\n        }\n    }\n    return $result;\n\
    }\necho implode(', ', strange_sort_list([1,2,3,4,5])).PHP_EOL;\necho implode(',\
    \ ', strange_sort_list([1,2,3,4])).PHP_EOL;\necho implode(', ', strange_sort_list([5,5,5,5])).PHP_EOL;\n\
    echo implode(', ', strange_sort_list([])).PHP_EOL;"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
