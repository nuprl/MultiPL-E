name: HumanEval_70_strange_sort_list
language: php
prompt: "<?php\n// Given array of integers, return array in strange order.\n// Strange\
  \ sorting, is when you start with the minimum value,\n// then maximum of the remaining\
  \ integers, then minimum and so on.\n// Examples:\n// >>> strange_sort_list(array(1,\
  \ 2, 3, 4))\n// array(1, 4, 2, 3)\n// >>> strange_sort_list(array(5, 5, 5, 5))\n\
  // array(5, 5, 5, 5)\n// >>> strange_sort_list(array())\n// array()\nfunction strange_sort_list($lst)\
  \ {\n"
tests: "function candidate(...$args) {\n    return strange_sort_list(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
  \ 4, 2, 3)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
  \ 6, 7, 8, 9)) !== array(5, 9, 6, 8, 7)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1, 2, 3, 4, 5)) !== array(1, 5, 2, 4, 3)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 6, 7, 8, 9, 1))\
  \ !== array(1, 9, 5, 8, 6, 7)) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(5, 5, 5, 5)) !== array(5, 5, 5, 5)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array()) !== array()) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4, 5, 6, 7, 8)) !== array(1,\
  \ 8, 2, 7, 3, 6, 4, 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(0,\
  \ 2, 2, 2, 5, 5, -5, -5)) !== array(-5, 5, -5, 5, 0, 2, 2, 2)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(111111)) !== array(111111)) { throw\
  \ new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $min = min($lst);\n  $max = max($lst);\n  $new = array();\n  $min_loc\
    \ = array_search($min, $lst);\n  $max_loc = array_search($max, $lst);\n  unset($lst[$min_loc]);\n\
    \  unset($lst[$max_loc]);\n  array_unshift($new, $min);\n  array_push($new, $max);\n\
    \  return $new;\n}\n", "\t// Probably not the best time complexity, but there\
    \ is a pattern\n\t// and it's not that bad.\n\t// Instead of reallocating memory\
    \ each time, we could just remove\n\t// the first and last elements of the array.\n\
    \t$lst_new = array();\n\twhile (count($lst) > 0) {\n\t\t$lst_new[] = min($lst);\n\
    \t\t$lst_new[] = max($lst);\n\t\t$lst = array_diff($lst, array(min($lst), max($lst)));\n\
    \t}\n\treturn $lst_new;\n}\n", "    if (count($lst) < 2) {\n        return $lst;\n\
    \    }\n    $sorted_lst = array();\n    $lst_count = count($lst);\n    for ($i\
    \ = 0; $i < $lst_count; $i++) {\n        if ($i % 2 == 0) {\n            array_push($sorted_lst,\
    \ min($lst));\n        } else {\n            array_push($sorted_lst, max($lst));\n\
    \        }\n        $index = array_search($sorted_lst[$i], $lst);\n        unset($lst[$index]);\n\
    \    }\n    return $sorted_lst;\n}", "\t$nums = array();\n\t$indexes = array();\n\
    \t$even = TRUE;\n\t$count = count($lst);\n\twhile ($count > 0) {\n\t\tif ($even)\
    \ {\n\t\t\t$min = min($lst);\n\t\t\t$key = array_search($min, $lst);\n\t\t\t$nums[]\
    \ = $min;\n\t\t\t$indexes[] = $key;\n\t\t\tunset($lst[$key]);\n\t\t} else {\n\t\
    \t\t$max = max($lst);\n\t\t\t$key = array_search($max, $lst);\n\t\t\t$nums[] =\
    \ $max;\n\t\t\t$indexes[] = $key;\n\t\t\tunset($lst[$key]);\n\t\t}\n\t\t$even\
    \ = !$even;\n\t\t$count--;\n\t}\n\treturn $nums;\n}\n", "    if (empty($lst))\
    \ {\n        return array();\n    }\n\n    $min = min($lst);\n    $max = max($lst);\n\
    \    $sorted = array($min);\n    $remaining = array_diff($lst, array($min));\n\
    \n    while (count($remaining) > 0) {\n        if (count($remaining) > 1) {\n\
    \            $sorted[] = max($remaining);\n            $remaining = array_diff($remaining,\
    \ array(max($remaining)));\n        }\n        $sorted[] = min($remaining);\n\
    \        $remaining = array_diff($remaining, array(min($remaining)));\n    }\n\
    \n    return $sorted;\n}\n", "    if (!is_array($lst)) {\n        throw new InvalidArgumentException(\"\
    Input should be an array.\");\n    }\n    if (empty($lst)) {\n        return array();\n\
    \    }\n    sort($lst);\n    $result = array();\n    $min = 0;\n    $max = count($lst)\
    \ - 1;\n    while ($min <= $max) {\n        $result[] = $lst[$min];\n        $min++;\n\
    \        if ($min <= $max) {\n            $result[] = $lst[$max];\n          \
    \  $max--;\n        }\n    }\n    return $result;\n}\n\necho '<pre>';\nprint_r(strange_sort_list(array(5,5,5,5)));\n\
    echo '</pre>';", "  if (!empty($lst)) {\n    if (count($lst) % 2 == 0) {\n   \
    \   // even number\n      $x = 0;\n      $y = count($lst) - 1;\n      $arr = array();\n\
    \      while ($x < $y) {\n        array_push($arr, $lst[$x]);\n        array_push($arr,\
    \ $lst[$y]);\n        $x++;\n        $y--;\n      }\n      return $arr;\n    }\
    \ else {\n      // odd number\n      $x = 0;\n      $y = count($lst) - 1;\n  \
    \    $arr = array();\n      while ($x < $y) {\n        array_push($arr, $lst[$x]);\n\
    \        array_push($arr, $lst[$y]);\n        $x++;\n        $y--;\n      }\n\
    \      array_push($arr, $lst[$x]);\n      return $arr;\n    }\n  } else {\n  \
    \  return $lst;\n  }\n}\n", "    $newList = [];\n    $min = min($lst);\n    $max\
    \ = max($lst);\n    $minIndex = 0;\n    $maxIndex = count($lst)-1;\n    while\
    \ (count($newList) < count($lst)) {\n        if ($minIndex < $maxIndex) {\n  \
    \          $newList[] = $min;\n            $minIndex++;\n            $newList[]\
    \ = $max;\n            $maxIndex--;\n        } else {\n            $newList[]\
    \ = $min;\n        }\n    }\n    return $newList;\n}\n\nprint(strange_sort_list([1,\
    \ 2, 3, 4]));", "  $min_lst = array();\n  $max_lst = array();\n  $remaining_lst\
    \ = $lst;\n  while (count($remaining_lst) > 0) {\n    $min = min($remaining_lst);\n\
    \    $max = max($remaining_lst);\n    $min_lst[] = $min;\n    $max_lst[] = $max;\n\
    \    $remaining_lst = array_diff($remaining_lst, array($min, $max));\n  }\n  $sorted_lst\
    \ = array();\n  while (count($min_lst) > 0) {\n    $sorted_lst[] = array_shift($min_lst);\n\
    \    if (count($max_lst) > 0) {\n      $sorted_lst[] = array_pop($max_lst);\n\
    \    }\n  }\n  return $sorted_lst;\n}\n\n$lst = array(1,2,3,4);\nprint_r(strange_sort_list($lst));",
  "    if (count($lst) <= 1) return $lst;\n    sort($lst);\n    $return = array($lst[0]);\n\
    \    $index = 1;\n    while (count($lst) > 0) {\n        if (count($lst) == 1)\
    \ {\n            array_push($return, $lst[0]);\n            break;\n        }\n\
    \        $index = count($lst) - $index;\n        if ($index < 0) $index = 0;\n\
    \        array_push($return, $lst[$index]);\n        unset($lst[$index]);\n  \
    \      $lst = array_values($lst);\n    }\n    return $return;\n}\necho implode(\"\
    \ \", strange_sort_list(array(1, 2, 3, 4))) . PHP_EOL;\necho implode(\" \", strange_sort_list(array(5,\
    \ 5, 5, 5))) . PHP_EOL;\necho implode(\" \", strange_sort_list(array())) . PHP_EOL;\n\
    echo implode(\" \", strange_sort_list(array(16, 15, 14, 13, 12, 11, 10, 9, 8,\
    \ 7, 6, 5, 4, 3, 2, 1))) . PHP_EOL;\necho implode(\" \", strange_sort_list(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))) . PHP_EOL;\necho implode(\"\
    \ \", strange_sort_list(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17))) . PHP_EOL;\necho implode(\" \", strange_sort_list(array(17, 16, 15,\
    \ 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1))) . PHP_EOL;\necho implode(\"\
    \ \", strange_sort_list(array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16, 17, 18))) . PHP_EOL;", "  if(empty($lst)) {\n    return $lst;\n  }\n\n \
    \ $min = $lst[0];\n  $max = $lst[0];\n  $minPos = 0;\n  $maxPos = 0;\n  for($i\
    \ = 0; $i < count($lst); $i++) {\n    if($lst[$i] < $min) {\n      $min = $lst[$i];\n\
    \      $minPos = $i;\n    }\n    if($lst[$i] > $max) {\n      $max = $lst[$i];\n\
    \      $maxPos = $i;\n    }\n  }\n\n  $res = array();\n  $res[] = $min;\n  if($minPos\
    \ < $maxPos) {\n    $lst = array_splice($lst, $minPos+1);\n  } else {\n    $lst\
    \ = array_splice($lst, $minPos+1, $maxPos-$minPos-1);\n  }\n  $lst[] = $max;\n\
    \  $res = array_merge($res, strange_sort_list($lst));\n  return $res;\n}\n\nprint_r(strange_sort_list(array(1,\
    \ 2, 3, 4)));\necho \"\\n\";\nprint_r(strange_sort_list(array(5, 5, 5, 5)));\n\
    echo \"\\n\";\nprint_r(strange_sort_list(array()));\necho \"\\n\";\nprint_r(strange_sort_list(array(3,\
    \ 2, 1, 4)));\necho \"\\n\";\nprint_r(strange_sort_list(array(5, 1, 5, 5)));\n\
    echo \"\\n\";\nprint_r(strange_sort_list(array(5, 5, 1, 5)));\necho \"\\n\";\n\
    print_r(strange_sort_list(array(5, 5, 5, 1)));\necho \"\\n\";", "    $ret = array();\n\
    \    $min = min($lst);\n    $max = max($lst);\n    $lst = array_flip($lst);\n\
    \    $lst = array_keys($lst);\n    while (count($lst) > 0) {\n        $ret[] =\
    \ array_shift($lst);\n        if (count($lst) > 0) {\n            $ret[] = array_pop($lst);\n\
    \        }\n    }\n    return $ret;\n}\n", "    sort($lst);\n    $result = [];\n\
    \    for ($i = 0; $i < count($lst); $i += 2) {\n        if ($i+1 < count($lst))\
    \ {\n            $result[] = $lst[$i];\n            $result[] = $lst[$i+1];\n\
    \        } else {\n            $result[] = $lst[$i];\n        }\n    }\n    return\
    \ $result;\n}\n", "  $sorted_list = array();\n  $sub_array = $lst;\n  while (count($sub_array)\
    \ > 0) {\n    $sub_array = array_values($sub_array);\n    $min = $sub_array[0];\n\
    \    $max = $sub_array[0];\n    foreach ($sub_array as $val) {\n      if ($val\
    \ < $min) {\n        $min = $val;\n      }\n      if ($val > $max) {\n       \
    \ $max = $val;\n      }\n    }\n    $key = array_search($min, $sub_array);\n \
    \   unset($sub_array[$key]);\n    $sorted_list[] = $min;\n    $key = array_search($max,\
    \ $sub_array);\n    unset($sub_array[$key]);\n    $sorted_list[] = $max;\n  }\n\
    \  return $sorted_list;\n}\n\n$array = array(1,2,3,4,5,6,7,8,9,10);\n$result =\
    \ strange_sort_list($array);\nprint_r($result);", "    $result = [];\n    while\
    \ (count($lst) > 0) {\n        $result[] = min($lst);\n        $lst = array_filter($lst,\
    \ function($e) {\n            return $e != min($lst);\n        });\n        if\
    \ (count($lst) > 0) {\n            $result[] = max($lst);\n            $lst =\
    \ array_filter($lst, function($e) {\n                return $e != max($lst);\n\
    \            });\n        }\n    }\n    return $result;\n}\nprint_r(strange_sort_list([2,\
    \ 1, 3, 4]));", "  if (empty($lst)) return $lst;\n  $temp = $lst;\n  rsort($temp);\n\
    \  $odd = array_slice($temp, 0, count($temp) / 2);\n  $even = array_slice($temp,\
    \ count($temp) / 2);\n  for ($i = 0; $i < count($lst); $i++) {\n    if ($i % 2\
    \ == 0) {\n      $lst[$i] = array_pop($odd);\n    } else {\n      $lst[$i] = array_pop($even);\n\
    \    }\n  }\n  return $lst;\n}\necho \"\\nStrange sorted list is: \";\nprint_r(strange_sort_list(array(1,\
    \ 2, 3, 4)));\necho \"\\nStrange sorted list is: \";\nprint_r(strange_sort_list(array(5,\
    \ 5, 5, 5)));\necho \"\\nStrange sorted list is: \";\nprint_r(strange_sort_list(array()));\n\
    echo \"\\n\";", "    if (count($lst) < 2) return $lst;\n    sort($lst);\n    return\
    \ array_merge(array($lst[0]), strange_sort_list(array_slice($lst, 2)), array($lst[1]));\n\
    }\n\n$test_list = array(1, 2, 3, 4);\nprint_r(strange_sort_list($test_list));\n\
    \n$test_list = array(1, 2, 3, 4, 5);\nprint_r(strange_sort_list($test_list));\n\
    \n$test_list = array(10, 20, 30, 40, 50, 60, 70, 80, 90, 100);\nprint_r(strange_sort_list($test_list));\n\
    \n$test_list = array(5, 5, 5, 5);\nprint_r(strange_sort_list($test_list));\n\n\
    $test_list = array();\nprint_r(strange_sort_list($test_list));\n\n$test_list =\
    \ array(5);\nprint_r(strange_sort_list($test_list));\n\n$test_list = array(12,\
    \ 21, 213, 232, 24, 2456, 456, 543, 65, 765, 765, 7);\nprint_r(strange_sort_list($test_list));\n",
  "  if (empty($lst)) {\n    return $lst;\n  }\n  $min = min($lst);\n  $max = max($lst);\n\
    \  $out = array($min);\n  $pos = 0;\n  foreach ($lst as $val) {\n    if ($val\
    \ != $min && $val != $max) {\n      $out[] = $val;\n    }\n  }\n  $out[] = $max;\n\
    \  return $out;\n}\n", "    $l = count($lst);\n    if ($l <= 1) return $lst;\n\
    \    $ret = array($lst[0]);\n    $lst[0] = \"skip\";\n    $cur = 1;\n    while\
    \ (count($ret) < $l) {\n        if ($cur) {\n            $max = 0;\n         \
    \   $maxi = -1;\n            for ($i = 0; $i < $l; $i++) {\n                if\
    \ ($lst[$i] == \"skip\") continue;\n                if ($lst[$i] > $max) {\n \
    \                   $max = $lst[$i];\n                    $maxi = $i;\n      \
    \          }\n            }\n            $ret[] = $max;\n            $lst[$maxi]\
    \ = \"skip\";\n        } else {\n            $min = PHP_INT_MAX;\n           \
    \ $mini = -1;\n            for ($i = 0; $i < $l; $i++) {\n                if ($lst[$i]\
    \ == \"skip\") continue;\n                if ($lst[$i] < $min) {\n           \
    \         $min = $lst[$i];\n                    $mini = $i;\n                }\n\
    \            }\n            $ret[] = $min;\n            $lst[$mini] = \"skip\"\
    ;\n        }\n        $cur = !$cur;\n    }\n    return $ret;\n}\n\nprint_r(strange_sort_list(array(1,\
    \ 2, 3, 4)));\nprint_r(strange_sort_list(array(5, 5, 5, 5)));\nprint_r(strange_sort_list(array()));",
  "    if (empty($lst)) {\n        return $lst;\n    }\n    sort($lst);\n    $l =\
    \ count($lst);\n    $result = [];\n    for ($i = 0; $i < $l; $i++) {\n       \
    \ if ($i % 2 == 0) {\n            $result[] = array_shift($lst);\n        } else\
    \ {\n            $result[] = array_pop($lst);\n        }\n    }\n    return $result;\n\
    }\necho implode(', ', strange_sort_list([1,2,3,4,5])).PHP_EOL;\necho implode(',\
    \ ', strange_sort_list([1,2,3,4])).PHP_EOL;\necho implode(', ', strange_sort_list([5,5,5,5])).PHP_EOL;\n\
    echo implode(', ', strange_sort_list([])).PHP_EOL;", "    if (sizeof($lst) < 1)\
    \ {\n        return $lst;\n    }\n    sort($lst);\n    $result = array();\n  \
    \  $mid = ceil(sizeof($lst) / 2);\n    for ($i = 0; $i < $mid; $i++) {\n     \
    \   $result[] = $lst[$i];\n        if ($i + $mid < sizeof($lst)) {\n         \
    \   $result[] = $lst[$i + $mid];\n        }\n    }\n    return $result;\n}\n",
  "\t$max_lst = array();\n\t$min_lst = array();\n\t$len = count($lst);\n\tif ($len\
    \ === 0) {\n\t\treturn $lst;\n\t}\n\tif ($len === 1) {\n\t\treturn $lst;\n\t}\n\
    \tif ($len === 2) {\n\t\tif ($lst[0] > $lst[1]) {\n\t\t\treturn array($lst[1],\
    \ $lst[0]);\n\t\t}\n\t\telse {\n\t\t\treturn $lst;\n\t\t}\n\t}\n\twhile (count($lst)\
    \ > 0) {\n\t\t$min = min($lst);\n\t\t$max = max($lst);\n\t\tarray_push($min_lst,\
    \ $min);\n\t\t$i = array_search($min, $lst);\n\t\tunset($lst[$i]);\n\t\t$lst =\
    \ array_values($lst);\n\t\tarray_push($max_lst, $max);\n\t\t$i = array_search($max,\
    \ $lst);\n\t\tunset($lst[$i]);\n\t\t$lst = array_values($lst);\n\t}\n\t$len =\
    \ count($min_lst);\n\tfor ($i = 0; $i < $len; $i++) {\n\t\tarray_push($lst, $min_lst[$i]);\n\
    \t\tarray_push($lst, $max_lst[$i]);\n\t}\n\treturn $lst;\n}", "    if (!$lst)\
    \ {\n        return $lst;\n    }\n    sort($lst);\n    $min = $lst[0];\n    $lst\
    \ = array_slice($lst, 1);\n    $res = [$min];\n    while ($lst) {\n        if\
    \ (count($lst) == 1) {\n            $res[] = $lst[0];\n            break;\n  \
    \      }\n        $max = array_pop($lst);\n        $min = array_shift($lst);\n\
    \        $res[] = $max;\n        $res[] = $min;\n    }\n    return $res;\n}\n\n\
    if (__FILE__ == $_SERVER['SCRIPT_FILENAME']) {\n    // Test cases:\n    $cases\
    \ = [\n        [array(1, 2, 3, 4), array(1, 4, 2, 3)],\n        [array(5, 5, 5,\
    \ 5), array(5, 5, 5, 5)],\n        [array(), array()],\n        [array(2, 3, 4,\
    \ 5, 6, 1), array(1, 6, 2, 5, 3, 4)],\n        [array(1, 1, 1, 1), array(1, 1,\
    \ 1, 1)],\n        [array(2, 3, 1, 4, 5, 6), array(1, 6, 2, 5, 3, 4)],\n     \
    \   [array(2, 3, 1, 4, 5, 6, 7), array(1, 7, 2, 6, 3, 5, 4)],\n        [array(1,\
    \ 1, 2, 2, 3, 3, 4, 4), array(1, 4, 2, 3, 1, 4, 2, 3)],\n        [array(1, 1,\
    \ 2, 2, 2, 3, 3, 4, 4), array(1, 4, 2, 3, 1, 4, 2, 2, 3)],\n        [array(2,\
    \ 2, 3, 3, 4, 4, 1, 1), array(1, 4, 2, 3, 1, 4, 2, 3)],\n        [array(1, 2,\
    \ 3, 4, 5, 6, 7, 8,", "    if(count($lst) <= 1) return $lst;\n    $min = min($lst);\n\
    \    $min_ind = array_search($min, $lst);\n    $max = max($lst);\n    $max_ind\
    \ = array_search($max, $lst);\n    $out = array($min);\n    $out[] = $max;\n \
    \   for($i = 0; $i < count($lst); $i++) {\n        if($i != $min_ind && $i !=\
    \ $max_ind) {\n            $out[] = $lst[$i];\n        }\n    }\n    return $out;\n\
    }", "    if (sizeof($lst) == 0) return $lst;\n    $first = min($lst);\n    $lst\
    \ = array_diff($lst, array($first));\n    $second = max($lst);\n    $lst = array_diff($lst,\
    \ array($second));\n    $res = array($first, $second);\n    while (sizeof($lst)\
    \ > 0) {\n        $first = min($lst);\n        $lst = array_diff($lst, array($first));\n\
    \        $second = max($lst);\n        $lst = array_diff($lst, array($second));\n\
    \        array_push($res, $first, $second);\n    }\n    return $res;\n}\n$lst\
    \ = array(5,5,5,5);\nprint_r(strange_sort_list($lst));", "    if (count($lst)\
    \ === 0) {\n        return array();\n    }\n    sort($lst);\n    $midpoint = ceil(count($lst)\
    \ / 2);\n    $result = array();\n    $left = array_slice($lst, 0, $midpoint);\n\
    \    $right = array_slice($lst, $midpoint);\n    while ($left && $right) {\n \
    \       $result[] = array_shift($left);\n        $result[] = array_pop($right);\n\
    \    }\n    return array_merge($result, $left, $right);\n}\n", "\t$sortedList\
    \ = array();\n\t$min = min($lst);\n\t$max = max($lst);\n\t$listLength = count($lst);\n\
    \t$start = 0;\n\twhile ($start <= $listLength) {\n\t\tif ($start === 0) {\n\t\t\
    \tarray_push($sortedList, $min);\n\t\t\tunset($lst[array_search($min, $lst)]);\n\
    \t\t\t$start++;\n\t\t} elseif ($start === $listLength) {\n\t\t\tarray_push($sortedList,\
    \ $max);\n\t\t\tunset($lst[array_search($max, $lst)]);\n\t\t\t$start++;\n\t\t\
    } else {\n\t\t\tarray_push($sortedList, $max);\n\t\t\tunset($lst[array_search($max,\
    \ $lst)]);\n\t\t\t$max = max($lst);\n\t\t\tarray_push($sortedList, $min);\n\t\t\
    \tunset($lst[array_search($min, $lst)]);\n\t\t\t$min = min($lst);\n\t\t\t$start\
    \ += 2;\n\t\t}\n\t}\n\treturn $sortedList;\n}", "    if (!$lst) return $lst;\n\
    \    $out = array();\n    $head = $lst[0];\n    $remaining = array_splice($lst,\
    \ 1);\n    while ($remaining) {\n        $max = max($remaining);\n        $min\
    \ = min($remaining);\n        $out[] = $head;\n        $out[] = $max;\n      \
    \  $out[] = $min;\n        $head = min($remaining);\n        $remaining = array_diff($remaining,\
    \ array($max, $min));\n    }\n    $out[] = $head;\n    return $out;\n}\n\n$tests\
    \ = array(\n    array(1, 2, 3, 4),\n    array(5, 5, 5, 5),\n    array(),\n);\n\
    \nforeach ($tests as $test) {\n    print_r(strange_sort_list($test));\n}", " \
    \   if (count($lst) == 0) return array();\n    $ret = array();\n    $sorted =\
    \ $lst;\n    sort($sorted);\n    $begin = 0;\n    $end = count($sorted) - 1;\n\
    \    $dir = 1;\n    for ($i = 0; $i < count($sorted); $i++) {\n        if ($dir\
    \ == 1) {\n            $ret[] = $sorted[$begin];\n            $begin++;\n    \
    \    } else {\n            $ret[] = $sorted[$end];\n            $end--;\n    \
    \    }\n        $dir *= -1;\n    }\n    return $ret;\n}", "    $result = [];\n\
    \    $lst = array_unique($lst);\n    sort($lst);\n    $size = count($lst);\n \
    \   for ($i = 0; $i < $size; $i++) {\n        if ($i % 2 === 0) {\n          \
    \  $result[] = $lst[$i / 2];\n        } else {\n            $result[] = $lst[$size\
    \ - $i / 2 - 1];\n        }\n    }\n    return $result;\n}\n", "\tif (empty($lst))\
    \ {\n\t\treturn $lst;\n\t}\n\t$res = array();\n\tsort($lst);\n\t$flag = true;\n\
    \t$len = count($lst);\n\t$j = 0;\n\tfor ($i = 0; $i < $len; $i++) {\n\t\tif ($flag\
    \ == true) {\n\t\t\t$res[] = $lst[$j];\n\t\t\t$j++;\n\t\t\t$flag = false;\n\t\t\
    } else {\n\t\t\t$res[] = $lst[$len - $j];\n\t\t\t$flag = true;\n\t\t}\n\t}\n\t\
    return $res;\n}\n\nprint_r(strange_sort_list(array(1, 2, 3, 4)));", "  if (count($lst)\
    \ == 0) {\n    return $lst;\n  }\n\n  $res = array();\n  $copy = $lst;\n  asort($copy);\n\
    \  $sorted = array_values($copy);\n  $res[] = $sorted[0];\n  array_splice($sorted,\
    \ 0, 1);\n\n  while (count($sorted) > 0) {\n    if (count($sorted) == 1) {\n \
    \     $res[] = $sorted[0];\n      array_splice($sorted, 0, 1);\n    } else {\n\
    \      $res[] = $sorted[count($sorted) - 1];\n      array_splice($sorted, count($sorted)\
    \ - 1, 1);\n      $res[] = $sorted[0];\n      array_splice($sorted, 0, 1);\n \
    \   }\n  }\n\n  return $res;\n}\n\nclass StrangeSortListTest extends \\PHPUnit_Framework_TestCase\
    \ {\n  protected function setUp() {\n    parent::setUp();\n  }\n\n  protected\
    \ function tearDown() {\n    parent::tearDown();\n  }\n\n  public function test_it_should_return_an_empty_array_when_given_empty_array()\
    \ {\n    $this->assertEquals(array(), strange_sort_list(array()));\n  }\n\n  public\
    \ function test_it_should_return_the_same_array_when_given_an_array_of_identical_values()\
    \ {\n    $this->assertEquals(array(5, 5, 5, 5), strange_sort_list(array(5, 5,\
    \ 5, 5)));\n  }\n\n  public function test_it_should_return_a_strange_sorted_array_when_given_an_array_of_integers()\
    \ {\n    $this->assertEquals(array(1, 4, 2, 3), strange_sort_list(array(1, 2,\
    \ 3, 4)));\n  }\n}", "  if(!empty($lst)) {\n    sort($lst);\n    $min = $lst[0];\n\
    \    $max = $lst[count($lst) - 1];\n    $i = 0;\n    $result = array();\n    for\
    \ ($i = 0; $i < count($lst); $i++) {\n      if ($i % 2 == 0) {\n        array_push($result,\
    \ $min);\n        array_splice($lst, 0, 1);\n      } else {\n        array_push($result,\
    \ $max);\n        array_splice($lst, count($lst) - 1, 1);\n      }\n    }\n  \
    \  return $result;\n  } else {\n    return array();\n  }\n}\n", "    $new_lst\
    \ = array();\n    $even_num = 0;\n    $odd_num = 0;\n    if (empty($lst)) {\n\
    \        return $new_lst;\n    }\n    sort($lst);\n    while (count($lst) > 0)\
    \ {\n        $even_num++;\n        $odd_num++;\n        if ($even_num % 2 == 0)\
    \ {\n            $new_lst[] = array_shift($lst);\n        } else {\n         \
    \   $new_lst[] = array_pop($lst);\n        }\n    }\n    return $new_lst;\n}",
  "    $is_sorted = false;\n    $count = count($lst);\n    while ($is_sorted == false)\
    \ {\n        $is_sorted = true;\n        for ($i = 0; $i < $count - 1; $i++) {\n\
    \            if ($lst[$i] > $lst[$i + 1]) {\n                $tmp = $lst[$i];\n\
    \                $lst[$i] = $lst[$i + 1];\n                $lst[$i + 1] = $tmp;\n\
    \                $is_sorted = false;\n            }\n        }\n    }\n    for\
    \ ($i = 0; $i < $count; $i++) {\n        if ($i % 2 == 0) {\n            $odd_lst[]\
    \ = $lst[$i];\n        } else {\n            $even_lst[] = $lst[$i];\n       \
    \ }\n    }\n    $even_lst = array_reverse($even_lst);\n    return array_merge($odd_lst,\
    \ $even_lst);\n}\n", "    sort($lst);\n    $res = [];\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        if ($i % 2 == 0) {\n            $res[] = $lst[$i];\n      \
    \  } else {\n            array_unshift($res, $lst[$i]);\n        }\n    }\n  \
    \  return $res;\n}\necho json_encode(strange_sort_list([1, 2, 3, 4, 5, 6]));",
  "    $lstc = $lst;\n    $dizi = [];\n    while(count($lstc)>0){\n        sort($lstc);\n\
    \        array_push($dizi, $lstc[0]);\n        array_push($dizi, end($lstc));\n\
    \        array_shift($lstc);\n        array_pop($lstc);\n    }\n    return $dizi;\n\
    }\n", "  if (count($lst) == 0) {\n    return array();\n  }\n  sort($lst);\n  $output\
    \ = array();\n  $start = 0;\n  $end = count($lst) - 1;\n  $descending = FALSE;\n\
    \  while ($start <= $end) {\n    if ($descending) {\n      $output[] = $lst[$end];\n\
    \      $end--;\n    } else {\n      $output[] = $lst[$start];\n      $start++;\n\
    \    }\n    $descending = !$descending;\n  }\n  return $output;\n}\n\nprint_r(strange_sort_list(array(1,\
    \ 2, 3, 4)));\nprint_r(strange_sort_list(array(5, 5, 5, 5)));\nprint_r(strange_sort_list(array()));",
  "    $sorted_lst = sort_list($lst);\n    $strange_lst = array();\n    $strange_min\
    \ = array_shift($sorted_lst);\n    $strange_max = array_pop($sorted_lst);\n  \
    \  $strange_lst[] = $strange_min;\n    while (!empty($sorted_lst)) {\n       \
    \ $strange_lst[] = $strange_max;\n        $strange_lst[] = array_shift($sorted_lst);\n\
    \        $strange_max = array_pop($sorted_lst);\n    }\n    if (!empty($strange_max))\
    \ {\n        $strange_lst[] = $strange_max;\n    }\n    return $strange_lst;\n\
    }\n", "  if (count($lst) <= 1) return $lst;\n  sort($lst);\n  $i = count($lst)\
    \ - 1;\n  while ($i > 0) {\n    $tmp = $lst[$i];\n    unset($lst[$i]);\n    array_splice($lst,\
    \ $i / 2, 0, $tmp);\n    $i -= 2;\n  }\n  return $lst;\n}\n\n$lst = array(1, 2,\
    \ 3, 4);\nprint_r(strange_sort_list($lst));", "\tsort($lst);\n\tfor ($i = 0; $i\
    \ < sizeof($lst); $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\t$even[] = $lst[$i];\n\
    \t\t} else {\n\t\t\t$odd[] = $lst[$i];\n\t\t}\n\t}\n\tif ($i % 2 == 0) {\n\t\t\
    return array_merge($even, array_reverse($odd));\n\t} else {\n\t\treturn array_merge($even,\
    \ $odd);\n\t}\n}\n", "\t$sorted = array();\n\t$min = null;\n\t$max = null;\n\t\
    $minPos = null;\n\t$maxPos = null;\n\twhile (count($lst) > 0) {\n\t\t$min = null;\n\
    \t\t$max = null;\n\t\t$minPos = null;\n\t\t$maxPos = null;\n\t\tforeach ($lst\
    \ as $key => $value) {\n\t\t\tif ($min === null || $value < $min) {\n\t\t\t\t\
    $min = $value;\n\t\t\t\t$minPos = $key;\n\t\t\t}\n\t\t\tif ($max === null || $value\
    \ > $max) {\n\t\t\t\t$max = $value;\n\t\t\t\t$maxPos = $key;\n\t\t\t}\n\t\t}\n\
    \t\t$sorted[] = $min;\n\t\tif ($minPos !== $maxPos) {\n\t\t\t$sorted[] = $max;\n\
    \t\t}\n\t\tunset($lst[$minPos]);\n\t\tunset($lst[$maxPos]);\n\t}\n\treturn $sorted;\n\
    }", "    $sorted = sort_list($lst);\n    $result = [];\n    $len = count($sorted);\n\
    \    $half = (int) ($len / 2);\n    for ($i = 0; $i < $half; $i++) {\n       \
    \ $result[] = $sorted[$i];\n        $result[] = $sorted[$len - $i - 1];\n    }\n\
    \    if ($len % 2 == 1) {\n        $result[] = $sorted[$half];\n    }\n    return\
    \ $result;\n}\n", "    $sorted_list = array();\n    $min = min($lst);\n    $max\
    \ = max($lst);\n    $incr = 0;\n    $decr = 0;\n    while (count($lst) > 0) {\n\
    \        if ($min != $max) {\n            $sorted_list[] = $min;\n           \
    \ $min = min(array_diff($lst, $sorted_list));\n            $sorted_list[] = $max;\n\
    \            $max = max(array_diff($lst, $sorted_list));\n        } else {\n \
    \           if ($incr < $decr) {\n                $sorted_list[] = $min;\n   \
    \             $incr++;\n            } else {\n                $sorted_list[] =\
    \ $max;\n                $decr++;\n            }\n        }\n    }\n    return\
    \ $sorted_list;\n}\n\necho \">>> strange_sort_list(array(1, 2, 3, 4))\\n\";\n\
    var_dump(strange_sort_list(array(1, 2, 3, 4)));\necho \">>> strange_sort_list(array(5,\
    \ 5, 5, 5))\\n\";\nvar_dump(strange_sort_list(array(5, 5, 5, 5)));\necho \">>>\
    \ strange_sort_list(array())\\n\";\nvar_dump(strange_sort_list(array()));", " \
    \ $sorted = sort($lst);\n  $result = [];\n  $i = 0;\n  $j = count($lst) - 1;\n\
    \  while ($i <= $j) {\n    $result[] = $lst[$i];\n    $i++;\n    if ($i > $j)\
    \ {\n      break;\n    }\n    $result[] = $lst[$j];\n    $j--;\n  }\n  return\
    \ $result;\n}\n", "    $size = count($lst);\n    if ($size < 2) return $lst;\n\
    \    sort($lst);\n    $i = 0;\n    $j = $size - 1;\n    $ret = array();\n    while\
    \ ($i < $j) {\n        $ret[] = $lst[$i];\n        $ret[] = $lst[$j];\n      \
    \  $i++;\n        $j--;\n    }\n    if ($i == $j) $ret[] = $lst[$i];\n    return\
    \ $ret;\n}\n", "    $my_array = [];\n    for ($i = 0; $i < count($lst); $i++)\
    \ {\n        $my_array[$i] = $lst[$i];\n    }\n    sort($my_array);\n    $new_array\
    \ = [];\n    $g = 0;\n    for ($i = 0; $i < count($my_array); $i++) {\n      \
    \  if ($i % 2 == 0) {\n            $new_array[$i] = $my_array[$g];\n         \
    \   $g++;\n        } else {\n            $new_array[$i] = $my_array[count($my_array)\
    \ - $g];\n        }\n    }\n    return $new_array;\n}\n\n$a = strange_sort_list(array(1,\
    \ 2, 3, 4));\nvar_dump($a);", "    $newlst = array();\n    while (!empty($lst))\
    \ {\n        $newlst[] = min($lst);\n        unset($lst[array_search(min($lst),\
    \ $lst)]);\n        if (!empty($lst)) {\n            $newlst[] = max($lst);\n\
    \            unset($lst[array_search(max($lst), $lst)]);\n        }\n    }\n \
    \   return $newlst;\n}\n\nprint_r(strange_sort_list(array(1, 2, 3, 4)));\nprint_r(strange_sort_list(array(5,\
    \ 5, 5, 5)));\nprint_r(strange_sort_list(array()));", "  $strange = array();\n\
    \  if (!empty($lst)) {\n    // Only sort if there is at least one item in the\
    \ list.\n    while (!empty($lst)) {\n      $min = min($lst);\n      $max = max($lst);\n\
    \      // Remove minimum and maximum values.\n      $lst = array_diff($lst, array($min,\
    \ $max));\n      // Then add them to the strange list.\n      $strange[] = $min;\n\
    \      $strange[] = $max;\n    }\n  }\n  return $strange;\n}", "  if (count($lst)\
    \ < 1) return $lst;\n  $lst = sort_numbers($lst);\n  $r = array();\n  $i = 0;\n\
    \  while (count($lst) > 0) {\n    $s = $i % 2 ? array_pop($lst) : array_shift($lst);\n\
    \    $r[] = $s;\n    $i++;\n  }\n  return $r;\n}", "  $arr = array();\n  if (empty($lst))\
    \ {\n    return $arr;\n  }\n  sort($lst);\n  $arr[0] = $lst[0];\n  $max = count($lst)\
    \ - 1;\n  for ($i = 1; $i < $max; $i++) {\n    if ($i % 2 === 0) {\n      $arr[$i]\
    \ = $lst[$i];\n    } else {\n      $arr[$i] = $lst[$max];\n      $max -= 1;\n\
    \    }\n  }\n  $arr[$max] = $lst[$max];\n  return $arr;\n}\n", "  $lst_new = [];\n\
    \  for ($i = 0; $i < count($lst); $i++) {\n    $min = min($lst);\n    $max = max($lst);\n\
    \    if ($i % 2 == 0) {\n      $lst_new[] = $min;\n      $lst = array_diff($lst,\
    \ [$min]);\n    } else {\n      $lst_new[] = $max;\n      $lst = array_diff($lst,\
    \ [$max]);\n    }\n  }\n  return $lst_new;\n}\n", "    // your code here\n}\n",
  "  if (empty($lst)) {\n    return $lst;\n  }\n\n  $sorted_lst = [];\n  $lst_length\
    \ = count($lst);\n  sort($lst);\n  for ($i = 0; $i < $lst_length; $i++) {\n  \
    \  if ($i % 2 == 0) {\n      $sorted_lst[] = array_shift($lst);\n    } else {\n\
    \      $sorted_lst[] = array_pop($lst);\n    }\n  }\n\n  return $sorted_lst;\n\
    }\n", "    $lst_sorted = $lst;\n    sort($lst_sorted);\n    $lst_ret = array();\n\
    \    $lst_small = array();\n    $lst_big = array();\n    foreach ($lst_sorted\
    \ as $v) {\n        if (count($lst_small) > count($lst_big)) {\n            $lst_big[]\
    \ = $v;\n        } else {\n            $lst_small[] = $v;\n        }\n    }\n\
    \    foreach ($lst_small as $v) {\n        $lst_ret[] = $v;\n        $lst_ret[]\
    \ = array_pop($lst_big);\n    }\n    return $lst_ret;\n}\necho implode(', ', strange_sort_list(array(1,\
    \ 2, 3, 4))) . \"\\n\";\necho implode(', ', strange_sort_list(array(5, 5, 5, 5)))\
    \ . \"\\n\";\necho implode(', ', strange_sort_list(array())) . \"\\n\";", "  \
    \  if (count($lst) == 0) {\n        return $lst;\n    }\n    $max = max($lst);\n\
    \    $min = min($lst);\n    $res = array($min);\n    $lst = array_diff($lst, [$min]);\n\
    \    while (count($lst) > 0) {\n        $min = min($lst);\n        $max = max($lst);\n\
    \        if (count($lst) == 1) {\n            $res[] = $max;\n            $lst\
    \ = array_diff($lst, [$max]);\n        } else {\n            $res[] = $max;\n\
    \            $res[] = $min;\n            $lst = array_diff($lst, [$max, $min]);\n\
    \        }\n    }\n    return $res;\n}\n", "    // Your code goes here.\n}\n",
  "    if (empty($lst)) {\n        return array();\n    }\n\n    $min = min($lst);\n\
    \    $max = max($lst);\n    $odd = array();\n    $even = array();\n\n    foreach\
    \ ($lst as $val) {\n        if (($val === $min) || ($val === $max)) {\n      \
    \      $odd[] = $val;\n        } else {\n            $even[] = $val;\n       \
    \ }\n    }\n\n    $new_lst = array();\n    while (!empty($odd) || !empty($even))\
    \ {\n        $new_lst[] = array_shift($odd);\n        $new_lst[] = array_pop($even);\n\
    \    }\n\n    return $new_lst;\n}\n", "    if (count($lst) <= 1) {\n        return\
    \ $lst;\n    }\n    sort($lst);\n    $middle = count($lst) / 2;\n    $left = array_slice($lst,\
    \ 0, $middle);\n    $right = array_slice($lst, $middle);\n    $left = strange_sort_list($left);\n\
    \    $right = strange_sort_list($right);\n    return merge($left, $right);\n}\n",
  "    if (empty($lst)) {\n        return array();\n    }\n    $result = array();\n\
    \    $lst = array_unique($lst);\n    $min = min($lst);\n    $max = max($lst);\n\
    \    $lst_len = count($lst);\n    $taken = array($min, $max);\n    $result[] =\
    \ $min;\n    $result[] = $max;\n    while ($lst_len > 2) {\n        foreach ($lst\
    \ as $value) {\n            if (!in_array($value, $taken)) {\n               \
    \ $result[] = $value;\n                $taken[] = $value;\n                break;\n\
    \            }\n        }\n        $lst_len--;\n    }\n    return $result;\n}\n\
    $a = array(1, 2, 3, 4);\n$result = strange_sort_list($a);\necho \"Input: array(1,\
    \ 2, 3, 4) \\n\";\necho \"Output: array(1, 4, 2, 3) \\n\";\necho \"Your output:\
    \ \";\nprint_r($result);\necho \"\\n\";\necho \"Expected result: \";\nprint_r(array(1,\
    \ 4, 2, 3));\necho \"\\n\";\necho \"**********************\\n\";\n$a = array(5,\
    \ 5, 5, 5);\n$result = strange_sort_list($a);\necho \"Input: array(5, 5, 5, 5)\
    \ \\n\";\necho \"Output: array(5, 5, 5, 5) \\n\";\necho \"Your output: \";\nprint_r($result);\n\
    echo \"\\n\";\necho \"Expected result: \";\nprint_r(array(5, 5, 5, 5));\necho\
    \ \"\\n\";\necho \"**********************\\n\";\n$a = array();\n$result = strange_sort_list($a);\n\
    echo \"Input: array() \\n\";\necho \"Output: array() \\n\";\necho \"Your output:\
    \ \";\nprint_r($result);\necho \"\\n\";\necho \"Expected result: \";\nprint_r(array());\n\
    echo \"\\n\";\necho \"", "  if (!count($lst)) return $lst;\n  $min_val = min($lst);\n\
    \  $max_val = max($lst);\n  $min_val_pos = array_search($min_val, $lst);\n  $max_val_pos\
    \ = array_search($max_val, $lst);\n  $lst = array_diff($lst, array($min_val, $max_val));\n\
    \  $lst = array_values($lst);\n  $sorted_lst = array();\n  if ($min_val_pos <\
    \ $max_val_pos) {\n    for ($i = 0; $i < count($lst); $i++) {\n      if ($i %\
    \ 2 == 0) {\n        $sorted_lst[] = array_shift($lst);\n      } else {\n    \
    \    $sorted_lst[] = array_pop($lst);\n      }\n    }\n    array_unshift($sorted_lst,\
    \ $min_val);\n    array_push($sorted_lst, $max_val);\n  } else {\n    for ($i\
    \ = 0; $i < count($lst); $i++) {\n      if ($i % 2 == 0) {\n        $sorted_lst[]\
    \ = array_pop($lst);\n      } else {\n        $sorted_lst[] = array_shift($lst);\n\
    \      }\n    }\n    array_unshift($sorted_lst, $max_val);\n    array_push($sorted_lst,\
    \ $min_val);\n  }\n  return $sorted_lst;\n}\n\n$lst = array(1, 2, 3, 4);\necho\
    \ implode(\", \", strange_sort_list($lst)) . \"\\n\";\n\n$lst = array(5, 5, 5,\
    \ 5);\necho implode(\", \", strange_sort_list($lst)) . \"\\n\";\n\n$lst = array();\n\
    echo implode(\", \", strange_sort_list($lst)) . \"\\n\";\n\n$lst = array(5, 2,\
    \ 3, 4);\necho implode(\", \", strange", "\tif (!is_array($lst))\n\t\treturn array();\n\
    \t$lst_len = count($lst);\n\tif ($lst_len == 0)\n\t\treturn array();\n\t$new_lst\
    \ = array();\n\t$min = $lst[0];\n\t$max = $lst[0];\n\tfor ($i = 0; $i < $lst_len;\
    \ $i++) {\n\t\tif ($lst[$i] < $min)\n\t\t\t$min = $lst[$i];\n\t\tif ($lst[$i]\
    \ > $max)\n\t\t\t$max = $lst[$i];\n\t}\n\twhile (count($new_lst) < $lst_len) {\n\
    \t\t$new_lst[] = $min;\n\t\t$new_lst[] = $max;\n\t\t$min++;\n\t\t$max--;\n\t}\n\
    \treturn $new_lst;\n}\n", "  sort($lst);\n  $n = count($lst);\n  $res = array();\n\
    \  $i = 0;\n  $j = $n - 1;\n  while ($i <= $j) {\n    $res[] = $lst[$i];\n   \
    \ if ($i != $j) {\n      $res[] = $lst[$j];\n    }\n    $i++;\n    $j--;\n  }\n\
    \  return $res;\n}", "    sort($lst);\n    $output = [];\n    $lower_pointer =\
    \ 0;\n    $upper_pointer = count($lst) - 1;\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        if ($i % 2 === 0) {\n            $output[] = $lst[$lower_pointer];\n\
    \            $lower_pointer++;\n        } else {\n            $output[] = $lst[$upper_pointer];\n\
    \            $upper_pointer--;\n        }\n    }\n    return $output;\n}\n\nvar_dump(strange_sort_list(array(1,\
    \ 2, 3, 4)));\nvar_dump(strange_sort_list(array(5, 5, 5, 5)));\nvar_dump(strange_sort_list(array()));",
  "  if (count($lst) == 0) return $lst;\n  $idx = 0;\n  $prev = $lst[$idx];\n  $result\
    \ = array($prev);\n  $length = count($lst);\n  while (count($result) < $length)\
    \ {\n    $min_idx = 0;\n    $max_idx = 0;\n    $min = $lst[0];\n    $max = $lst[0];\n\
    \    for ($i = 0; $i < $length; $i++) {\n      if ($lst[$i] < $min && $lst[$i]\
    \ > $prev) {\n        $min = $lst[$i];\n        $min_idx = $i;\n      }\n    \
    \  if ($lst[$i] > $max && $lst[$i] < $prev) {\n        $max = $lst[$i];\n    \
    \    $max_idx = $i;\n      }\n    }\n    $result[] = $min;\n    $result[] = $max;\n\
    \    $prev = $min;\n    unset($lst[$min_idx]);\n    unset($lst[$max_idx]);\n \
    \   $lst = array_values($lst);\n  }\n  return $result;\n}\n", "\tif (empty($lst))\
    \ {\n\t\treturn array();\n\t}\n\t$lst_len = count($lst);\n\tsort($lst);\n\t$strange_lst\
    \ = array();\n\t$strange_lst[] = $lst[0];\n\t$strange_lst[] = $lst[$lst_len -\
    \ 1];\n\tfor ($i = 1; $i < $lst_len - 1; $i++) {\n\t\tif ($i % 2 == 0) {\n\t\t\
    \t$strange_lst[] = $lst[$i];\n\t\t} else {\n\t\t\tarray_unshift($strange_lst,\
    \ $lst[$i]);\n\t\t}\n\t}\n\treturn $strange_lst;\n}", "  sort($lst);\n\n  $res\
    \ = [];\n  $i = 0;\n  $inc = 1;\n  while (count($lst) > 0) {\n    $res[] = $lst[$i];\n\
    \    unset($lst[$i]);\n    $lst = array_values($lst);\n    $i += $inc;\n    if\
    \ ($i < 0 || $i >= count($lst)) {\n      $inc *= -1;\n      $i += $inc;\n    }\n\
    \  }\n  return $res;\n}\n", "    if(!$lst) return array();\n    // Min\n    $min\
    \ = min($lst);\n    $min_i = array_search($min, $lst);\n    unset($lst[$min_i]);\n\
    \    $lst = array_values($lst);\n    // Max\n    $max = max($lst);\n    $max_i\
    \ = array_search($max, $lst);\n    unset($lst[$max_i]);\n    $lst = array_values($lst);\n\
    \    return array_merge(array($min, $max), strange_sort_list($lst));\n}\n\necho\
    \ '<pre>';\nprint_r(strange_sort_list(array(1, 2, 3, 4)));\nprint_r(strange_sort_list(array(5,\
    \ 5, 5, 5)));\nprint_r(strange_sort_list(array()));\necho '</pre>';", "    //\
    \ TODO\n}\n", "    // YOUR CODE GOES HERE\n}", "    $res = array();\n    $cnt\
    \ = count($lst);\n    if ($cnt === 0) return $res;\n    while ($cnt > 0) {\n \
    \       $tmp = array_keys($lst, min($lst));\n        $res[] = min($lst);\n   \
    \     array_splice($lst, $tmp[0], 1);\n        $cnt--;\n        if ($cnt === 0)\
    \ break;\n        $tmp = array_keys($lst, max($lst));\n        $res[] = max($lst);\n\
    \        array_splice($lst, $tmp[0], 1);\n        $cnt--;\n    }\n    return $res;\n\
    }\n", "  $arr = array();\n  $n = count($lst);\n  for ($i = 0; $i < $n; $i += 2)\
    \ {\n    $min = min($lst);\n    $arr[] = $min;\n    $key = array_search($min,\
    \ $lst);\n    unset($lst[$key]);\n    if (count($lst) > 0) {\n      $max = max($lst);\n\
    \      $arr[] = $max;\n      $key = array_search($max, $lst);\n      unset($lst[$key]);\n\
    \    }\n  }\n  return $arr;\n}\n\nassert(strange_sort_list(array(1, 2, 3, 4))\
    \ == array(1, 4, 2, 3));\nassert(strange_sort_list(array(5, 5, 5, 5)) == array(5,\
    \ 5, 5, 5));\nassert(strange_sort_list(array()) == array());\nassert(strange_sort_list(array(0,\
    \ 0, 0, 0)) == array(0, 0, 0, 0));\nassert(strange_sort_list(array(0, 0, 0, 0,\
    \ 0)) == array(0, 0, 0, 0, 0));\nassert(strange_sort_list(array(0, 0, 0, 0, 0,\
    \ 1)) == array(0, 1, 0, 0, 0, 0));\nassert(strange_sort_list(array(1, 2, 3, 1,\
    \ 2, 3)) == array(1, 3, 1, 3, 2, 2));\nassert(strange_sort_list(array(3, 2, 1,\
    \ 3, 2, 1)) == array(1, 3, 1, 3, 2, 2));", "    if (count($lst) <= 0) return array();\n\
    \    if (count($lst) == 1) return $lst;\n    if (count($lst) == 2) return array_reverse($lst);\n\
    \    $min = $lst[0];\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i]\
    \ < $min) {\n            $min = $lst[$i];\n        }\n    }\n    $lst = array_values(array_diff($lst,\
    \ array($min)));\n    $arr = array($min);\n    while (count($lst) > 0) {\n   \
    \     $max = $lst[0];\n        for ($i = 1; $i < count($lst); $i++) {\n      \
    \      if ($lst[$i] > $max) {\n                $max = $lst[$i];\n            }\n\
    \        }\n        $lst = array_values(array_diff($lst, array($max)));\n    \
    \    $arr[] = $max;\n        if (count($lst) == 0) break;\n        $min = $lst[0];\n\
    \        for ($i = 1; $i < count($lst); $i++) {\n            if ($lst[$i] < $min)\
    \ {\n                $min = $lst[$i];\n            }\n        }\n        $lst\
    \ = array_values(array_diff($lst, array($min)));\n        $arr[] = $min;\n   \
    \ }\n    return $arr;\n}\n", "  if (count($lst) == 0) return $lst;\n  if (count($lst)\
    \ == 1) return $lst;\n  sort($lst);\n  $n = count($lst);\n  $a = array();\n  for\
    \ ($i = 0; $i < $n; $i++) {\n    $a[] = $lst[$i];\n    $a[] = $lst[$n-$i-1];\n\
    \  }\n  array_pop($a);\n  return $a;\n}\necho \"strange_sort_list(array(1, 2,\
    \ 3, 4)):\";\nprint_r(strange_sort_list(array(1, 2, 3, 4)));\necho \"strange_sort_list(array(5,\
    \ 5, 5, 5)):\";\nprint_r(strange_sort_list(array(5, 5, 5, 5)));\necho \"strange_sort_list(array()):\"\
    ;\nprint_r(strange_sort_list(array()));", "    if (empty($lst)) {\n        return\
    \ array();\n    }\n    $asc = sort($lst);\n    $i = 0;\n    $j = count($lst) -\
    \ 1;\n    $count = count($lst);\n    $arr = array();\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        if ($i % 2 == 0) {\n            $arr[] = $lst[$i];\n      \
    \  } else {\n            $arr[] = $lst[$j];\n            $j--;\n        }\n  \
    \  }\n    return $arr;\n}\n\n$lst = [1, 2, 3, 4];\nprint_r(strange_sort_list($lst));",
  "    if (empty($lst)) {\n        return array();\n    }\n    sort($lst);\n    $iterations\
    \ = ceil(count($lst) / 2);\n    $offset = 0;\n    $result = array();\n    for\
    \ ($i = 0; $i < $iterations; $i++) {\n        if (count($lst) > 0) {\n       \
    \     $result[] = array_shift($lst);\n        }\n        if (count($lst) > 0)\
    \ {\n            $result[] = array_pop($lst);\n        }\n    }\n    return $result;\n\
    }\n", "    $arr = $lst;\n    $result = [];\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        if ($i % 2 == 0) {\n            array_push($result, min($arr));\n\
    \        } else {\n            array_push($result, max($arr));\n        }\n  \
    \      $key = array_search(($i % 2 == 0) ? min($arr) : max($arr), $arr);\n   \
    \     unset($arr[$key]);\n    }\n    return $result;\n}\nprint_r(strange_sort_list(array(1,\
    \ 2, 3, 4)));", "    $result = [];\n    $i = 0;\n    $j = count($lst) - 1;\n \
    \   sort($lst);\n    while ($i <= $j) {\n        $result[] = $lst[$i];\n     \
    \   $i++;\n        if ($i <= $j) {\n            $result[] = $lst[$j];\n      \
    \      $j--;\n        }\n    }\n    return $result;\n}", "    if (empty($lst))\
    \ {\n        return $lst;\n    }\n    sort($lst);\n    $midpoint = (count($lst))\
    \ / 2;\n    $first_half = array_slice($lst, 0, $midpoint);\n    $second_half =\
    \ array_slice($lst, $midpoint);\n    $result = array();\n    for ($i = 0; $i <\
    \ count($first_half); $i++) {\n        $result[] = $first_half[$i];\n        $result[]\
    \ = $second_half[$i];\n    }\n    return $result;\n}", "  if(empty($lst)) {\n\
    \    return $lst;\n  }\n  $min = min($lst);\n  $max = max($lst);\n  $result =\
    \ [];\n  while(count($lst) > 0) {\n    $result[] = $min;\n    unset($lst[array_search($min,\
    \ $lst)]);\n    if(count($lst) > 0) {\n      $result[] = $max;\n      unset($lst[array_search($max,\
    \ $lst)]);\n    }\n    $min = min($lst);\n    $max = max($lst);\n  }\n  return\
    \ $result;\n}", "    if (empty($lst)) {\n        return $lst;\n    }\n\n    $count\
    \ = count($lst);\n    $strange = [];\n    $min = $max = $lst[0];\n    for ($i\
    \ = 1; $i < $count; $i++) {\n        if ($lst[$i] < $min) {\n            $min\
    \ = $lst[$i];\n        }\n        if ($lst[$i] > $max) {\n            $max = $lst[$i];\n\
    \        }\n    }\n\n    $i = $max;\n    $j = $min;\n    while (count($strange)\
    \ < $count) {\n        if (in_array($i, $lst)) {\n            $strange[] = $i;\n\
    \        }\n        if (in_array($j, $lst)) {\n            $strange[] = $j;\n\
    \        }\n        $i--;\n        $j++;\n    }\n\n    return $strange;\n}\n\n\
    echo implode(', ', strange_sort_list([1, 2, 3, 4])) . \"\\n\"; // 1, 4, 2, 3\n\
    echo implode(', ', strange_sort_list([5, 5, 5, 5])) . \"\\n\"; // 5, 5, 5, 5\n\
    echo implode(', ', strange_sort_list([])) . \"\\n\"; // ''", "    $sorted = array();\n\
    \    $n = count($lst);\n    for ($i = 0; $i < $n; $i++) {\n        $m = min($lst);\n\
    \        $sorted[] = $m;\n        $lst = array_diff($lst, array($m));\n      \
    \  if ($i + 1 == $n) {\n            break;\n        }\n        $M = max($lst);\n\
    \        $sorted[] = $M;\n        $lst = array_diff($lst, array($M));\n    }\n\
    \    return $sorted;\n}\n$lst = array(1, 2, 3, 4);\necho \">>> strange_sort_list(array(1,\
    \ 2, 3, 4))\\n\";\nprint_r(strange_sort_list($lst));\necho \">>> strange_sort_list(array(5,\
    \ 5, 5, 5))\\n\";\nprint_r(strange_sort_list(array(5, 5, 5, 5)));\necho \">>>\
    \ strange_sort_list(array())\\n\";\nprint_r(strange_sort_list(array()));", " \
    \ if (empty($lst)) return $lst;\n  if (count($lst) == 1) return $lst;\n  sort($lst);\n\
    \  $min_head = array_shift($lst);\n  $max_head = array_pop($lst);\n  $res = array($min_head,\
    \ $max_head);\n  $len = count($lst);\n  for ($i = 0; $i < $len; $i++) {\n    if\
    \ ($i % 2 == 0) {\n      $res[] = array_shift($lst);\n    } else {\n      $res[]\
    \ = array_pop($lst);\n    }\n  }\n  return $res;\n}\n\n$a = array(1, 2, 3, 4);\n\
    $b = array(5, 5, 5, 5);\n$c = array();\n$d = array(1);\n$e = array(1, 2);\n$f\
    \ = array(1, 2, 3);\n\n$res_a = strange_sort_list($a);\n$res_b = strange_sort_list($b);\n\
    $res_c = strange_sort_list($c);\n$res_d = strange_sort_list($d);\n$res_e = strange_sort_list($e);\n\
    $res_f = strange_sort_list($f);\n\necho \"\\n\";\n\nvar_dump($res_a);\nvar_dump($res_b);\n\
    var_dump($res_c);\nvar_dump($res_d);\nvar_dump($res_e);\nvar_dump($res_f);\n\n\
    echo \"\\n\";", "    if (count($lst) <= 1) {\n        return $lst;\n    }\n  \
    \  $min = $lst[0];\n    $max = $lst[0];\n    $lst_copy = $lst;\n    sort($lst_copy);\n\
    \    if ($lst_copy[0] === $lst_copy[count($lst_copy) - 1]) {\n        return $lst_copy;\n\
    \    }\n    $min = array_shift($lst_copy);\n    $max = array_pop($lst_copy);\n\
    \    $res = array();\n    $i = 0;\n    while(true) {\n        $res[] = $min;\n\
    \        $min = array_shift($lst_copy);\n        if (empty($lst_copy)) {\n   \
    \         break;\n        }\n        $res[] = $max;\n        $max = array_pop($lst_copy);\n\
    \        if (empty($lst_copy)) {\n            break;\n        }\n    }\n    return\
    \ $res;\n}\n$lst = array(1, 2, 3, 4);\n$lst = array(5, 5, 5, 5);\n$lst = array();\n\
    $lst = array(6, 0, 7, 10, 10, 2, 1, 10, 10, 6, 4, 2, 8, 6, 9, 0, 0, 6, 7, 8, 0,\
    \ 6, 9, 10, 10, 5, 7, 3, 4, 0, 9, 10, 10, 8, 9, 8, 6, 10, 9, 8, 8, 6, 0, 10, 10,\
    \ 5, 9, 0, 5, 6, 7, 10, 0, 5, 9, 9, 6, 5, 9, 0, 6, 5, 7, 10, 5, 4, 4, 0, 0, 5,\
    \ 9, 8, 4, 5, 9, 4, 0, 5, 10, 4, 8, 10, 0, 10, 10, 0, 9, 10, 10, 6, 0, 8, 8, 4,\
    \ 7, 8, 4, 3, 7, 4, 4, 2, 7, 10, 6, 4, 7, 0, 6", "    $ret_val = [];\n    $len\
    \ = count($lst);\n    $from_start = true;\n    while($len > 0) {\n        if($from_start)\
    \ {\n            $ret_val[] = array_shift($lst);\n        } else {\n         \
    \   $ret_val[] = array_pop($lst);\n        }\n        $from_start = !$from_start;\n\
    \        $len--;\n    }\n    return $ret_val;\n}", "  $l = count($lst);\n  if\
    \ ($l == 0) {\n    return $lst;\n  }\n  sort($lst);\n  $low = 0;\n  $high = $l\
    \ - 1;\n  $res = array();\n  while ($low <= $high) {\n    if ($low == $high) {\n\
    \      $res[] = $lst[$low];\n      $low++;\n    } else {\n      $res[] = $lst[$low];\n\
    \      $res[] = $lst[$high];\n      $low++;\n      $high--;\n    }\n  }\n  return\
    \ $res;\n}\n", "    if (empty($lst)) return $lst;\n    $result = array();\n  \
    \  $n = sizeof($lst);\n    for ($i = 0; $i < $n; $i++) {\n        if ($i % 2)\
    \ {\n            $result[] = max($lst);\n            unset($lst[array_search(max($lst),\
    \ $lst)]);\n        } else {\n            $result[] = min($lst);\n           \
    \ unset($lst[array_search(min($lst), $lst)]);\n        }\n    }\n    return $result;\n\
    }\n\n$result = strange_sort_list(array(5, 5, 5, 5));\necho \"<pre>\";\nprint_r($result);\n\
    echo \"</pre>\";", "    $result = [];\n    sort($lst);\n    for ($i = 0; $i <\
    \ count($lst); $i++) {\n        if ($i % 2 == 0) {\n            $result[] = $lst[$i];\n\
    \        } else {\n            $result[] = $lst[count($lst) - $i];\n        }\n\
    \    }\n    return $result;\n}\n\n$data = [1, 2, 3, 4];\nprint_r(strange_sort_list($data));",
  "\tif (count($lst) == 0) return array();\n\tasort($lst);\n\t$lst = array_values($lst);\n\
    \t$result = array($lst[0]);\n\t$index = 0;\n\twhile (count($lst) > 1) {\n\t\t\
    $index = $index == 0 ? 1 : 0;\n\t\tarray_push($result, $lst[$index]);\n\t\tarray_splice($lst,\
    \ $index, 1);\n\t}\n\tarray_push($result, $lst[0]);\n\treturn $result;\n}\n",
  "\tif (empty($lst)) {\n\t\treturn array();\n\t}\n\tsort($lst);\n\t$min = array_shift($lst);\n\
    \t$max = array_pop($lst);\n\t$odd = true;\n\t$result = array($min);\n\twhile (!empty($lst))\
    \ {\n\t\tif ($odd) {\n\t\t\t$result[] = array_pop($lst);\n\t\t} else {\n\t\t\t\
    $result[] = array_shift($lst);\n\t\t}\n\t\t$odd = !$odd;\n\t}\n\t$result[] = $max;\n\
    \treturn $result;\n}\n\necho implode(', ', strange_sort_list(array(1, 2, 3, 4)));\n\
    echo \"\\n\";\necho implode(', ', strange_sort_list(array(5, 5, 5, 5)));\necho\
    \ \"\\n\";\necho implode(', ', strange_sort_list(array()));\necho \"\\n\";", "\t\
    $sorted = [];\n\t$size = count($lst);\n\tsort($lst);\n\tfor ($i = 0; $i < $size;\
    \ $i++) {\n\t\tif ($i % 2 === 0) {\n\t\t\t$sorted[] = array_shift($lst);\n\t\t\
    } else {\n\t\t\t$sorted[] = array_pop($lst);\n\t\t}\n\t}\n\treturn $sorted;\n\
    }\n", "  if (empty($lst)) return $lst;\n  $lst = sort($lst);\n  $i = 0;\n  $j\
    \ = count($lst) - 1;\n  $result = array();\n  while ($i < $j) {\n    $result[]\
    \ = $lst[$i];\n    $result[] = $lst[$j];\n    $i++;\n    $j--;\n  }\n  if ($i\
    \ == $j) {\n    $result[] = $lst[$i];\n  }\n  return $result;\n}\n", "    if(empty($lst))\
    \ {\n        return $lst;\n    }\n\n    $min = min($lst);\n    $max = max($lst);\n\
    \    $first = min($lst);\n    $second = max($lst);\n    $len = count($lst);\n\
    \    $strange = array();\n    $strange[] = $first;\n    for($i = 0; $i < $len\
    \ - 1; $i++) {\n        if($second == $max) {\n            $second = min($lst);\n\
    \        } else {\n            $second = max($lst);\n        }\n        $strange[]\
    \ = $second;\n    }\n    return $strange;\n}", "\t// first sort the list.\n\t\
    sort($lst);\n\t$min_max = array();\n\t$min_max_counter = 0;\n\t$list_length =\
    \ count($lst);\n\t// get first min and max value.\n\t$min_max[$min_max_counter]\
    \ = $lst[0];\n\t$min_max_counter++;\n\t$min_max[$min_max_counter] = $lst[$list_length\
    \ - 1];\n\t$min_max_counter++;\n\t// remove first and last element from $lst.\n\
    \tunset($lst[0]);\n\tunset($lst[$list_length - 1]);\n\t// apply strange_sort()\
    \ on remaining list and then concatenate that with\n\t// $min_max\n\treturn array_merge($min_max,\
    \ strange_sort($lst));\n}\n", "    // First, sort the list\n    $orig_lst = $lst;\n\
    \    sort($lst);\n    // Do the strange sorting.\n    $result = array();\n   \
    \ $high = count($lst) - 1;\n    $low = 0;\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        if ($i % 2 == 0) {\n            $result[] = $lst[$low];\n \
    \           $low++;\n        } else {\n            $result[] = $lst[$high];\n\
    \            $high--;\n        }\n    }\n    return $result;\n}\n", "    if(!$lst)\
    \ return $lst;\n    asort($lst);\n    $ret = array();\n    for($i = 0; $i < count($lst)\
    \ / 2; $i++) {\n        $ret[] = $lst[$i];\n        $ret[] = $lst[count($lst)\
    \ - $i - 1];\n    }\n    if(count($lst) % 2) {\n        $ret[] = $lst[count($lst)\
    \ / 2];\n    }\n    return $ret;\n}\n", "\t$result = array();\n\t$min = min($lst);\n\
    \t$max = max($lst);\n\t$middle = floor(($min + $max) / 2);\n\t$curr_max = $max;\n\
    \t$curr_min = $min;\n\t$start = 0;\n\t$end = count($lst) - 1;\n\twhile ($end >=\
    \ $start) {\n\t\tif ($start <= $end) {\n\t\t\t$result[$start] = $min;\n\t\t\t\
    $start++;\n\t\t}\n\t\tif ($start <= $end) {\n\t\t\t$result[$end] = $max;\n\t\t\
    \t$end--;\n\t\t}\n\t\tif ($start <= $end) {\n\t\t\t$result[$start] = $middle;\n\
    \t\t\t$start++;\n\t\t}\n\t\tif ($start <= $end) {\n\t\t\t$result[$end] = $curr_max;\n\
    \t\t\t$end--;\n\t\t\t$curr_max = $curr_max == $max ? $middle : $max;\n\t\t}\n\t\
    \tif ($start <= $end) {\n\t\t\t$result[$start] = $curr_min;\n\t\t\t$start++;\n\
    \t\t\t$curr_min = $curr_min == $min ? $middle : $min;\n\t\t}\n\t}\n\treturn $result;\n\
    }\n", "    $new_lst = array();\n    sort($lst);\n    $l = 0;\n    $r = count($lst)\
    \ - 1;\n    while ($l <= $r) {\n        $new_lst[] = $lst[$l];\n        $l++;\n\
    \        if ($l <= $r) {\n            $new_lst[] = $lst[$r];\n            $r--;\n\
    \        }\n    }\n    return $new_lst;\n}\necho \"Expected: 1, 4, 2, 3\\n\";\n\
    echo \"Result: \";\nprint_r(strange_sort_list(array(1, 2, 3, 4)));\necho \"\\\
    n\";\necho \"Expected: 5, 5, 5, 5\\n\";\necho \"Result: \";\nprint_r(strange_sort_list(array(5,\
    \ 5, 5, 5)));\necho \"\\n\";\necho \"Expected: \\n\";\necho \"Result: \";\nprint_r(strange_sort_list(array()));\n\
    echo \"\\n\";\necho \"Expected: -1, 4, -2, 3\\n\";\necho \"Result: \";\nprint_r(strange_sort_list(array(-1,\
    \ -2, 3, 4)));\necho \"\\n\";\necho \"Expected: -2, -3, 3, 4\\n\";\necho \"Result:\
    \ \";\nprint_r(strange_sort_list(array(-2, -3, 3, 4)));\necho \"\\n\";\necho \"\
    Expected: -3, -3, 3, 4\\n\";\necho \"Result: \";\nprint_r(strange_sort_list(array(-3,\
    \ -3, 3, 4)));\necho \"\\n\";", "    if (empty($lst)) {\n        return array();\n\
    \    }\n\n    $return_list = array();\n    $len = count($lst);\n    $min = min($lst);\n\
    \    $max = max($lst);\n    $pos = 0;\n    $return_list[$pos] = $min;\n    $pos++;\n\
    \    if ($min == $max) {\n        while ($pos < $len) {\n            $return_list[$pos]\
    \ = $min;\n            $pos++;\n        }\n        return $return_list;\n    }\n\
    \n    $return_list[$pos] = $max;\n    $pos++;\n    $lst = array_diff($lst, array($min,\
    \ $max));\n    while (!empty($lst)) {\n        $min = min($lst);\n        $max\
    \ = max($lst);\n        $return_list[$pos] = $min;\n        $pos++;\n        $return_list[$pos]\
    \ = $max;\n        $pos++;\n        $lst = array_diff($lst, array($min, $max));\n\
    \    }\n    return $return_list;\n}\n\nprint_r(strange_sort_list(array(1, 2, 3,\
    \ 4)));\nprint_r(strange_sort_list(array(5, 5, 5, 5)));\nprint_r(strange_sort_list(array()));",
  "  if (count($lst) == 0) return $lst;\n  $sorted = array();\n  sort($lst);\n  $min\
    \ = $lst[0];\n  $sorted[] = $min;\n  $lst = array_diff($lst, array($min));\n \
    \ while(count($lst) > 0) {\n    $max = max($lst);\n    $sorted[] = $max;\n   \
    \ $lst = array_diff($lst, array($max));\n    if (count($lst) == 0) break;\n  \
    \  $min = min($lst);\n    $sorted[] = $min;\n    $lst = array_diff($lst, array($min));\n\
    \  }\n  return $sorted;\n}\n\n$lst = range(1, 100);\nshuffle($lst);\nprint_r(strange_sort_list($lst));",
  "  $length = count($lst);\n  if ($length === 0) return array();\n  if ($length ===\
    \ 1) return $lst;\n  sort($lst);\n  $a = array_slice($lst, 0, ceil($length / 2));\n\
    \  $b = array_slice($lst, ceil($length / 2));\n  return array_merge(strange_sort_list($a),\
    \ strange_sort_list($b));\n}", "  if (!$lst) return array();\n  $sorted = $lst;\n\
    \  sort($sorted);\n  $len = count($sorted);\n  $res = array();\n  for ($i = 0;\
    \ $i < $len; $i++) {\n    $res[] = $sorted[$i];\n    $res[] = $sorted[$len - $i\
    \ - 1];\n  }\n  return $res;\n}\n", "    $n = count($lst);\n    $res = array();\n\
    \    $sorted = $lst;\n    sort($sorted);\n    $i = 0;\n    while ($i < $n) {\n\
    \        if ($i % 2) {\n            $res[] = array_pop($sorted);\n        } else\
    \ {\n            $res[] = array_shift($sorted);\n        }\n        $i++;\n  \
    \  }\n    return $res;\n}\necho \">>>>> TESTING strange_sort_list(array(1, 2,\
    \ 3, 4))\\n\";\nprint_r(strange_sort_list(array(1, 2, 3, 4)));\necho \">>>>> TESTING\
    \ strange_sort_list(array(5, 5, 5, 5))\\n\";\nprint_r(strange_sort_list(array(5,\
    \ 5, 5, 5)));\necho \">>>>> TESTING strange_sort_list(array())\\n\";\nprint_r(strange_sort_list(array()));\n",
  "\t$sorted_lst = [$lst[0]];\n\tunset($lst[0]);\n\tsort($lst);\n\t$len = count($lst);\n\
    \tfor ($i = 0; $i < $len; $i++) {\n\t\t$sorted_lst[] = ($i % 2 == 0) ? min($lst)\
    \ : max($lst);\n\t\tunset($lst[array_search(($i % 2 == 0) ? min($lst) : max($lst),\
    \ $lst)]);\n\t}\n\treturn $sorted_lst;\n}\necho \"<h3>Strange sorting</h3>\";\n\
    $lst = [5, 5, 5, 5];\necho \"<h4>Given array:</h4>\";\nprint_r($lst);\necho \"\
    <h4>Strange sorting:</h4>\";\nprint_r(strange_sort_list($lst));", "    if (!$lst)\
    \ {\n        return $lst;\n    }\n    $sorted = array();\n    $i = 0;\n    $min\
    \ = min($lst);\n    $max = max($lst);\n    while (count($lst) > 0) {\n       \
    \ if ($i % 2 == 0) {\n            $pop = $min;\n            unset($lst[array_search($min,\
    \ $lst)]);\n            if ($lst) {\n                $min = min($lst);\n     \
    \       }\n        } else {\n            $pop = $max;\n            unset($lst[array_search($max,\
    \ $lst)]);\n            if ($lst) {\n                $max = max($lst);\n     \
    \       }\n        }\n        $sorted[] = $pop;\n        $i++;\n    }\n    return\
    \ $sorted;\n}\n", "    if (empty($lst)) {\n        return $lst;\n    }\n\n   \
    \ asort($lst);\n    $sorted = array_values($lst);\n    $max = count($sorted);\n\
    \    $n = $max;\n    $sorted2 = array();\n    for ($i = 0; $i < $max; $i++) {\n\
    \        if ($i % 2 == 0) {\n            $sorted2[] = $sorted[$i];\n        }\
    \ else {\n            $sorted2[] = $sorted[$n - 1];\n            $n--;\n     \
    \   }\n    }\n    return $sorted2;\n}\n", "    $even_lst = $odd_lst = [];\n  \
    \  sort($lst);\n    $n = sizeof($lst);\n    $i = 0;\n    while ($i < $n) {\n \
    \       if ($i < $n - 1) {\n            $even_lst[] = $lst[$i++];\n        }\n\
    \        if ($i < $n) {\n            $odd_lst[] = $lst[$i++];\n        }\n   \
    \ }\n    return array_merge($even_lst, array_reverse($odd_lst));\n}\n", "\tif(!$lst)\
    \ return $lst;\n\t$even = $odd = array();\n\tsort($lst);\n\tforeach($lst as $i\
    \ => $val) {\n\t\tif($i%2==0) {\n\t\t\t$even[] = $val;\n\t\t} else {\n\t\t\t$odd[]\
    \ = $val;\n\t\t}\n\t}\n\treturn array_merge($even, array_reverse($odd));\n}\n",
  "\tif (!is_array($lst)) return FALSE;\n\tsort($lst);\n\t$lst2 = array();\n\twhile\
    \ (count($lst)>0) {\n\t\t$val1 = array_shift($lst);\n\t\tif (count($lst)>0) {\n\
    \t\t\t$val2 = array_pop($lst);\n\t\t\t$lst2[] = $val1;\n\t\t\t$lst2[] = $val2;\n\
    \t\t} else $lst2[] = $val1;\n\t}\n\treturn $lst2;\n}\n\nprint_r(strange_sort_list(array(1,\
    \ 2, 3, 4)));\nprint_r(strange_sort_list(array(5, 5, 5, 5)));\nprint_r(strange_sort_list(array()));",
  "\tif (empty($lst)) {\n\t\treturn $lst;\n\t}\n\n\tsort($lst);\n\t$arr_len = count($lst);\n\
    \t$half_arr_len = ceil($arr_len / 2);\n\t$first_half = array_slice($lst, 0, $half_arr_len);\n\
    \t$second_half = array_slice($lst, $half_arr_len);\n\t\n\tfor ($i = 0; $i < $half_arr_len;\
    \ $i++) {\n\t\t$res[] = $first_half[$i];\n\t\tif (isset($second_half[$i])) {\n\
    \t\t\t$res[] = $second_half[$i];\n\t\t}\n\t}\n\treturn $res;\n}\n\necho '<pre>';\n\
    print_r(strange_sort_list(array(1, 2, 3, 4)));\nprint_r(strange_sort_list(array(5,\
    \ 5, 5, 5)));\nprint_r(strange_sort_list(array()));\necho '</pre>';", "    //\
    \ Your code here\n    $newArr = [];\n    $max = max($lst);\n    $min = min($lst);\n\
    \    if (sizeof($lst) % 2 != 0) {\n        for ($i = 0; $i < sizeof($lst); $i++)\
    \ {\n            if ($i % 2 == 0) {\n                array_push($newArr, $min);\n\
    \            } else {\n                array_push($newArr, $max);\n          \
    \  }\n        }\n    } else {\n        for ($i = 0; $i < sizeof($lst); $i++) {\n\
    \            if ($i % 2 == 0) {\n                array_push($newArr, $max);\n\
    \            } else {\n                array_push($newArr, $min);\n          \
    \  }\n        }\n    }\n    return $newArr;\n}\n", "    // your code here\n  \
    \  return [];\n}", "    $tmp = [];\n    $min = min($lst);\n    $max = max($lst);\n\
    \    $cnt = count($lst);\n    $i = 0;\n    while (count($tmp) < $cnt) {\n    \
    \    if ($i % 2 == 0) {\n            $tmp[] = $min;\n            $lst = array_diff($lst,\
    \ [$min]);\n            $min = min($lst);\n        } else {\n            $tmp[]\
    \ = $max;\n            $lst = array_diff($lst, [$max]);\n            $max = max($lst);\n\
    \        }\n        $i++;\n    }\n    return $tmp;\n}\n\n$lst = [3,4,2,3,2,4,1,2,1,4,3,1];\n\
    print_r(strange_sort_list($lst));", "    $arr = [];\n    $min = min($lst);\n \
    \   $max = max($lst);\n    $result = [];\n    $i = 0;\n    while (count($lst)\
    \ > 0) {\n        if ($i % 2 == 0) {\n            $min = min($lst);\n        \
    \    $key = array_search($min, $lst);\n            $result[] = $min;\n       \
    \     unset($lst[$key]);\n        } else {\n            $max = max($lst);\n  \
    \          $key = array_search($max, $lst);\n            $result[] = $max;\n \
    \           unset($lst[$key]);\n        }\n        $i++;\n    }\n    return $result;\n\
    }\n\nprint_r(strange_sort_list([1, 2, 3, 4]));", "  // Fill in the code and return\
    \ array in strange order.\n}\n", "\tif(!$lst) return $lst;\n\tif(count($lst) ==\
    \ 1) return $lst;\n\t$lst_res = [];\n\t$i = 0;\n\tsort($lst);\n\t$lst_min = $lst;\n\
    \t$lst_max = $lst;\n\t$min = array_shift($lst_min);\n\t$max = array_pop($lst_max);\n\
    \twhile(count($lst_min) > 0 || count($lst_max) > 0) {\n\t\tif($i % 2 == 0) {\n\
    \t\t\t$lst_res[] = $min;\n\t\t\t$min = array_shift($lst_min);\n\t\t} else {\n\t\
    \t\t$lst_res[] = $max;\n\t\t\t$max = array_pop($lst_max);\n\t\t}\n\t\t$i++;\n\t\
    }\n\t$lst_res[] = $min;\n\t$lst_res[] = $max;\n\treturn $lst_res;\n}\nprint_r(strange_sort_list([1,\
    \ 2, 3, 4])); // [1, 4, 2, 3]\nprint_r(strange_sort_list([5, 5, 5, 5])); // [5,\
    \ 5, 5, 5]\nprint_r(strange_sort_list([])); // []", "    $lstLength = count($lst);\n\
    \    if ($lstLength == 0) {\n        return array();\n    } else if ($lstLength\
    \ == 1) {\n        return $lst;\n    } else {\n        sort($lst);\n        $evenArray\
    \ = array();\n        $oddArray = array();\n        foreach($lst as $index =>\
    \ $value) {\n            if ($index % 2 == 0) {\n                $evenArray[]\
    \ = $value;\n            } else {\n                $oddArray[] = $value;\n   \
    \         }\n        }\n        return array_merge($evenArray, array_reverse($oddArray));\n\
    \    }\n}\n\n$result = strange_sort_list(array(1, 2, 3, 4));\necho \"Test Case\
    \ 1: \";\nvar_dump($result == array(1, 4, 2, 3));\n$result = strange_sort_list(array(5,\
    \ 5, 5, 5));\necho \"Test Case 2: \";\nvar_dump($result == array(5, 5, 5, 5));\n\
    $result = strange_sort_list(array());\necho \"Test Case 3: \";\nvar_dump($result\
    \ == array());", "\tif (count($lst) == 0) return $lst;\n\tsort($lst);\n\t$sublist_right\
    \ = array_slice($lst, ceil(count($lst)/2));\n\t$sublist_left = array_slice($lst,\
    \ 0, ceil(count($lst)/2));\n\t$first_part = array();\n\t$second_part = array();\n\
    \twhile (!empty($sublist_left) && !empty($sublist_right)) {\n\t\t$first_part[]\
    \ = array_shift($sublist_left);\n\t\t$second_part[] = array_pop($sublist_right);\n\
    \t}\n\treturn array_merge($first_part, $second_part);\n}\n\nvar_dump(strange_sort_list(array(1,\
    \ 2, 3, 4)));\nvar_dump(strange_sort_list(array(5, 5, 5, 5)));\nvar_dump(strange_sort_list(array()));",
  "  if(count($lst) == 0) return array();\n  $min = min($lst);\n  $max = max($lst);\n\
    \  $sorted = array($min);\n  $remainder = array_values(array_diff($lst, array($min)));\n\
    \  $cnt = 0;\n  while(count($remainder) > 0) {\n    if($cnt % 2 == 0) {\n    \
    \  $tmp = max($remainder);\n    } else {\n      $tmp = min($remainder);\n    }\n\
    \    $sorted[] = $tmp;\n    $remainder = array_values(array_diff($remainder, array($tmp)));\n\
    \    $cnt++;\n  }\n  return $sorted;\n}\n$lst = array(1,2,3,4);\nprint_r(strange_sort_list($lst));\n\
    $lst = array(5,5,5,5);\nprint_r(strange_sort_list($lst));\n$lst = array();\nprint_r(strange_sort_list($lst));",
  "    sort($lst);\n    for ($i = 0; $i < count($lst) - 1; $i += 2) {\n        list($lst[$i],\
    \ $lst[$i + 1]) = array($lst[$i + 1], $lst[$i]);\n    }\n    return $lst;\n}\n",
  "  if (count($lst) < 2) return $lst;\n  sort($lst);\n  $odds = array_filter($lst,\
    \ function($x) { return $x % 2 == 1; });\n  $evens = array_filter($lst, function($x)\
    \ { return $x % 2 == 0; });\n  return array_merge(array_reverse($odds), array_reverse($evens));\n\
    }\n", "\t$sorted_arr = array();\n\t$lst_count = count($lst);\n\tif ($lst_count\
    \ > 0) {\n\t\tasort($lst);\n\t\t$sorted_arr = array();\n\t\t$incr = true;\n\t\t\
    while (count($lst) > 0) {\n\t\t\tif ($incr) {\n\t\t\t\t$sorted_arr[] = array_shift($lst);\n\
    \t\t\t} else {\n\t\t\t\t$sorted_arr[] = array_pop($lst);\n\t\t\t}\n\t\t\t$incr\
    \ = !$incr;\n\t\t}\n\t}\n\treturn $sorted_arr;\n}", "    $sorted = sort_list($lst);\n\
    \    $odds = array();\n    $evens = array();\n    for ($i = 0; $i < count($sorted);\
    \ $i++) {\n        if ($i % 2 === 0) {\n            $evens[] = $sorted[$i];\n\
    \        } else {\n            $odds[] = $sorted[$i];\n        }\n    }\n    return\
    \ array_merge($evens, array_reverse($odds));\n}", "    if (empty($lst)) return\
    \ array();\n    $n = count($lst);\n    $c = 0;\n    $res = array();\n    sort($lst);\n\
    \    $res[] = $lst[0];\n    unset($lst[0]);\n    $c++;\n    $lst = array_values($lst);\n\
    \    $n = count($lst);\n    for ($i = 0; $i < $n; $i++) {\n        $m = ($i %\
    \ 2 === 0) ? $c : $c - 1;\n        $res[] = $lst[$m];\n        unset($lst[$m]);\n\
    \        $lst = array_values($lst);\n        $n = count($lst);\n        $c++;\n\
    \    }\n    return $res;\n}\n", "\n}\n\n$test1 = array(1, 2, 3, 4);\n$test2 =\
    \ array(5, 5, 5, 5);\n$test3 = array();\n\nprint_r(strange_sort_list($test1));\n\
    print_r(strange_sort_list($test2));\nprint_r(strange_sort_list($test3));", " \
    \   if (count($lst) <= 0) return $lst;\n    sort($lst);\n    $min = $lst[0];\n\
    \    $max = $lst[count($lst) - 1];\n    $result = array($min);\n    while ($min\
    \ != $max) {\n        if (count($lst) == 1) {\n            $result[] = $max;\n\
    \            break;\n        }\n        $min++;\n        $index = array_search($min,\
    \ $lst);\n        $result[] = $lst[$index];\n        unset($lst[$index]);\n  \
    \      sort($lst);\n        $min = $lst[0];\n        $max = $lst[count($lst) -\
    \ 1];\n        $result[] = $max;\n        unset($lst[array_search($max, $lst)]);\n\
    \        sort($lst);\n    }\n    return $result;\n}\nprint_r(strange_sort_list(array(1,\
    \ 2, 3, 4)));\nprint_r(strange_sort_list(array(5, 5, 5, 5)));\nprint_r(strange_sort_list(array()));",
  "  // return array();\n  $sorted_array = [];\n  sort($lst);\n  $num_elements = count($lst);\n\
    \  for ($i = 0; $i < $num_elements; $i++) {\n    if ($i % 2 == 0) {\n      $sorted_array[]\
    \ = $lst[$i];\n    } else {\n      $sorted_array[] = $lst[$num_elements - $i -\
    \ 1];\n    }\n  }\n  return $sorted_array;\n}\n$answer = strange_sort_list(array(1,\
    \ 2, 3, 4));\nprint_r($answer);\necho \"\\n\";\n$answer = strange_sort_list(array(5,\
    \ 5, 5, 5));\nprint_r($answer);\necho \"\\n\";\n$answer = strange_sort_list(array());\n\
    print_r($answer);\necho \"\\n\";", "\tif (empty($lst)) return array();\n\t$length\
    \ = count($lst);\n\tif ($length == 1) return $lst;\n\tsort($lst);\n\t$arr1 = array_slice($lst,\
    \ 0, $length/2);\n\t$arr2 = array_slice($lst, $length/2);\n\t$result = array();\n\
    \tfor ($i = 0; $i < $length/2; $i++) {\n\t\tarray_push($result, $arr1[$i]);\n\t\
    \tarray_push($result, $arr2[$i]);\n\t}\n\treturn $result;\n}", "  sort($lst);\n\
    \  return ($lst);\n}\nprint_r(strange_sort_list(array(1, 2, 3, 4)));", "    if\
    \ (empty($lst)) return array();\n    sort($lst);\n    $result = array();\n   \
    \ while (count($lst) > 0) {\n        $result[] = array_shift($lst);\n        if\
    \ (count($lst) > 0) {\n            $result[] = array_pop($lst);\n        }\n \
    \   }\n    return $result;\n}\n", "\t$sorted_list = [];\n\t$lst_cnt = count($lst);\n\
    \tif ($lst_cnt == 0) {\n\t\treturn $sorted_list;\n\t}\n\t$sorted_list[] = min($lst);\n\
    \t$lst = array_diff($lst, $sorted_list);\n\twhile (count($lst) > 0) {\n\t\t$lst_copy\
    \ = $lst;\n\t\t$sorted_list[] = max($lst_copy);\n\t\t$lst = array_diff($lst, $sorted_list);\n\
    \t\tif (count($lst) == 0) {\n\t\t\tbreak;\n\t\t}\n\t\t$lst_copy = $lst;\n\t\t\
    $sorted_list[] = min($lst_copy);\n\t\t$lst = array_diff($lst, $sorted_list);\n\
    \t}\n\treturn $sorted_list;\n}\n", "    if (empty($lst)) {\n        return array();\n\
    \    }\n    $n = count($lst);\n    sort($lst);\n    $a = $b = array();\n    for\
    \ ($i = 0; $i < $n / 2; $i++) {\n        $a[] = $lst[$i];\n        $b[] = $lst[$n\
    \ - $i - 1];\n    }\n    return array_merge($a, $b);\n}\n\n$a = array(1,2,3,4);\n\
    print_r(strange_sort_list($a));", "  if (empty($lst)) {\n    return $lst;\n  }\n\
    \n  sort($lst);\n  $res = array();\n  for ($i = 0; $i < count($lst); $i++) {\n\
    \    if ($i % 2 == 0) {\n      $res[] = $lst[$i];\n    } else {\n      array_unshift($res,\
    \ $lst[$i]);\n    }\n  }\n  return $res;\n}\n\nvar_dump(strange_sort_list(array(1,\
    \ 2, 3, 4)));", "    sort($lst);\n    $final = [];\n    $count = count($lst);\n\
    \    if($count % 2 == 0) {\n        $count = $count / 2;\n    } else {\n     \
    \   $count = ($count - 1) / 2;\n    }\n    for($i = 0; $i < $count; $i++) {\n\
    \        $final[] = $lst[$i];\n        $final[] = $lst[(count($lst) - $i - 1)];\n\
    \    }\n    if(count($lst) % 2 == 1) {\n        $final[] = $lst[$count];\n   \
    \ }\n    return $final;\n}\n", "\n}\n", "\t$new = [];\n\tsort($lst);\n\twhile\
    \ (count($lst) > 0) {\n\t\t$new[] = array_shift($lst);\n\t\tif (count($lst) >\
    \ 0) {\n\t\t\t$new[] = array_pop($lst);\n\t\t}\n\t}\n\treturn $new;\n}\n\n$lst\
    \ = [1, 2, 3, 4];\nprint_r(strange_sort_list($lst));\necho \"\\n\";\n\n$lst =\
    \ [5, 5, 5, 5];\nprint_r(strange_sort_list($lst));\necho \"\\n\";\n\n$lst = [];\n\
    print_r(strange_sort_list($lst));\necho \"\\n\";", "    if(empty($lst)){\n   \
    \     return $lst;\n    }\n    $min = min($lst);\n    $max = max($lst);\n    $result\
    \ = [];\n    while (count($lst) > 0) {\n        $result[] = $min;\n        unset($lst[array_search($min,\
    \ $lst)]);\n        if(empty($lst)){\n            break;\n        }\n        $result[]\
    \ = $max;\n        unset($lst[array_search($max, $lst)]);\n        if(empty($lst)){\n\
    \            break;\n        }\n        $min = min($lst);\n        $max = max($lst);\n\
    \    }\n    return $result;\n}\necho implode(\", \", strange_sort_list(array(1,\
    \ 2, 3, 4))).\"\\n\";\necho implode(\", \", strange_sort_list(array(5, 5, 5, 5))).\"\
    \\n\";\necho implode(\", \", strange_sort_list(array())).\"\\n\";", "  if(empty($lst))\
    \ return $lst;\n  sort($lst);\n  $result = array();\n  $x = 0;\n  $y = count($lst)\
    \ - 1;\n  while($x <= $y) {\n    $result[] = $lst[$x];\n    if($x != $y) $result[]\
    \ = $lst[$y];\n    $x++;\n    $y--;\n  }\n  return $result;\n}\n\n$lst = array(1,\
    \ 2, 3, 4);\nvar_dump(strange_sort_list($lst));\n$lst = array(5, 5, 5, 5);\nvar_dump(strange_sort_list($lst));\n\
    $lst = array();\nvar_dump(strange_sort_list($lst));", "\tif(!$lst) return array();\n\
    \t$len = count($lst);\n\tsort($lst);\n\t$res = array();\n\tfor($i = 0; $i < $len;\
    \ $i++) {\n\t\t$res[] = $lst[$i];\n\t\t$res[] = $lst[$len - $i - 1];\n\t}\n\t\
    sort($res);\n\treturn $res;\n}\nprint_r(strange_sort_list(array(1, 2, 3, 4)));\n\
    print_r(strange_sort_list(array(5, 5, 5, 5)));\nprint_r(strange_sort_list(array()));",
  "    $res = array();\n    $count = count($lst);\n    for ($i = 0; $i < $count; $i++)\
    \ {\n        if ($i % 2 == 0) {\n            $res[] = min($lst);\n        } else\
    \ {\n            $res[] = max($lst);\n        }\n        $lst = array_diff($lst,\
    \ array($res[$i]));\n    }\n    return $res;\n}\necho '<pre>';\nprint_r(strange_sort_list(array(1,\
    \ 2, 3, 4)));\necho '</pre>';\n\necho '<pre>';\nprint_r(strange_sort_list(array(5,\
    \ 5, 5, 5)));\necho '</pre>';\n\necho '<pre>';\nprint_r(strange_sort_list(array()));\n\
    echo '</pre>';", "    $newList = array();\n    $count = count($lst);\n    while\
    \ ($count > 0) {\n        $min = min($lst);\n        $max = max($lst);\n     \
    \   $index = array_search($min, $lst);\n        array_push($newList, $min);\n\
    \        array_splice($lst, $index, 1);\n        $index = array_search($max, $lst);\n\
    \        array_push($newList, $max);\n        array_splice($lst, $index, 1);\n\
    \        $count -= 2;\n    }\n    return $newList;\n}\n", "    if (count($lst)\
    \ == 0) {\n        return $lst;\n    }\n    // Find the minimum and maximum values\n\
    \    $min_val = min($lst);\n    $max_val = max($lst);\n    // Initialize the result\
    \ array\n    $res = array();\n    // Initialize the starting point of the loop\n\
    \    $start = $min_val;\n    $min_used = false;\n    $max_used = false;\n    while\
    \ (true) {\n        // Add the value to the result array\n        $res[] = $start;\n\
    \        // If we haven't used the minimum value yet\n        if (!$min_used)\
    \ {\n            // We have used the minimum value now\n            $min_used\
    \ = true;\n            // So we should start with the maximum value\n        \
    \    $start = $max_val;\n        } else if (!$max_used) {\n            // If we\
    \ haven't used the maximum value yet\n            // We have used the maximum\
    \ value now\n            $max_used = true;\n            // So we should start\
    \ with the minimum value\n            $start = $min_val;\n        } else {\n \
    \           // Start with the maximum value of the remaining\n            // values\
    \ in the original array\n            $start = max(array_diff($lst, $res));\n \
    \       }\n        // If the result array has the same length as the original\
    \ array\n        if (count($res) == count($lst)) {\n            // Return the\
    \ result array\n            return $res;\n        }\n    }\n}", "\tsort($lst);\n\
    \t$max=count($lst);\n\t$flag=1;\n\t$result=[];\n\tfor($i=0;$i<$max;$i++){\n\t\t\
    if($flag==1){\n\t\t\t$result[]=$lst[$i];\n\t\t\t$flag=0;\n\t\t}\n\t\telse{\n\t\
    \t\t$result[]=$lst[$max-$i-1];\n\t\t\t$flag=1;\n\t\t}\n\t}\n\treturn $result;\n\
    }\nvar_dump(strange_sort_list(array(1, 2, 3, 4)));\nvar_dump(strange_sort_list(array(5,\
    \ 5, 5, 5)));\nvar_dump(strange_sort_list(array()));", "  if(count($lst) < 2)\
    \ return $lst;\n  sort($lst);\n  $b = [];\n  $i = 0;\n  $j = count($lst) - 1;\n\
    \  while($i < $j) {\n    $b[] = $lst[$i];\n    $b[] = $lst[$j];\n    $i++;\n \
    \   $j--;\n  }\n  if($i == $j) $b[] = $lst[$i];\n  return $b;\n}\necho \"<pre>\"\
    ;\nprint_r(strange_sort_list([]));\nprint_r(strange_sort_list([1, 2, 3, 4]));\n\
    print_r(strange_sort_list([5, 5, 5, 5]));\necho \"</pre>\";", "  $lst_len = count($lst);\n\
    \  if ($lst_len == 0) {\n    return $lst;\n  }\n  else if ($lst_len == 1) {\n\
    \    return $lst;\n  }\n  else {\n    $sorted_lst = array();\n    $i = 1;\n  \
    \  while (count($lst) > 0) {\n      if ($i % 2 == 1) {\n        $sorted_lst[]\
    \ = min($lst);\n        $lst = array_diff($lst, array(min($lst)));\n      }\n\
    \      else {\n        $sorted_lst[] = max($lst);\n        $lst = array_diff($lst,\
    \ array(max($lst)));\n      }\n      $i++;\n    }\n    return $sorted_lst;\n \
    \ }\n}\n", "    if(!$lst) return array();\n    sort($lst);\n    $odds = $evens\
    \ = array();\n    $max = count($lst);\n    foreach($lst as $k => $v) {\n     \
    \   if($k % 2) $odds[] = $v;\n        else $evens[] = $v;\n    }\n    return array_merge($evens,\
    \ array_reverse($odds));\n}\n", "\t//if ($lst is empty), return empty array\n\t\
    if(empty($lst)){\n\t\treturn $lst;\n\t}\n\t//$keys = keys of $lst\n\t$keys = array_keys($lst);\n\
    \t//$values = values of $lst\n\t$values = array_values($lst);\n\t//loop through\
    \ $keys and $values\n\tforeach ($keys as $i => $key) {\n\t\t//if ($lst is even\
    \ index)\n\t\tif($i % 2 == 0){\n\t\t\t//retrieve min $value\n\t\t\t$min = min($values);\n\
    \t\t\t//replace min $value with $max\n\t\t\t$max = max($values);\n\t\t\t//replace\
    \ max $value with $min\n\t\t\t$values[array_search($max, $values)] = $min;\n\t\
    \t\t//add $min to the list at $i\n\t\t\t$list[$i] = $min;\n\t\t\t//remove $min\
    \ from $values\n\t\t\tunset($values[array_search($min, $values)]);\n\t\t} else\
    \ {\n\t\t\t//retrieve max $value\n\t\t\t$max = max($values);\n\t\t\t//replace\
    \ max $value with $min\n\t\t\t$min = min($values);\n\t\t\t//replace min $value\
    \ with $max\n\t\t\t$values[array_search($min, $values)] = $max;\n\t\t\t//add $max\
    \ to the list at $i\n\t\t\t$list[$i] = $max;\n\t\t\t//remove $max from $values\n\
    \t\t\tunset($values[array_search($max, $values)]);\n\t\t}\n\t}\n\t//sort $list\n\
    \tsort($list);\n\t//return $list\n\treturn $list;\n}", "  if(count($lst) < 2)\
    \ return $lst;\n  $temp = $lst;\n  $min = min($temp);\n  $max = max($temp);\n\
    \  $res = array();\n  array_push($res, $min);\n  $index = array_search($min, $temp);\n\
    \  unset($temp[$index]);\n  array_push($res, $max);\n  $index = array_search($max,\
    \ $temp);\n  unset($temp[$index]);\n  while(count($temp) > 0) {\n    $min = min($temp);\n\
    \    $max = max($temp);\n    $res[] = $min;\n    $index = array_search($min, $temp);\n\
    \    unset($temp[$index]);\n    $res[] = $max;\n    $index = array_search($max,\
    \ $temp);\n    unset($temp[$index]);\n  }\n  return $res;\n}", "    $tmp = $lst;\n\
    \    sort($tmp);\n    $res = [];\n    $l = count($tmp);\n    $left = 0;\n    $right\
    \ = $l - 1;\n    for ($i = 0; $i < $l; $i++) {\n        if ($i % 2 === 0) {\n\
    \            $res[] = $tmp[$left];\n            $left++;\n        } else {\n \
    \           $res[] = $tmp[$right];\n            $right--;\n        }\n    }\n\
    \    return $res;\n}", "    $maxs = array();\n    $mins = array();\n    $final\
    \ = array();\n    $tmp_list = $lst;\n    $flag = true;\n    while (!empty($tmp_list))\
    \ {\n        if ($flag) {\n            $min = min($tmp_list);\n            $mins[]\
    \ = $min;\n            unset($tmp_list[array_search($min, $tmp_list)]);\n    \
    \    } else {\n            $max = max($tmp_list);\n            $maxs[] = $max;\n\
    \            unset($tmp_list[array_search($max, $tmp_list)]);\n        }\n   \
    \     $flag = !$flag;\n    }\n    $maxs = array_reverse($maxs);\n    for ($i =\
    \ 0; $i < count($mins); $i++) {\n        $final[] = $mins[$i];\n        if (isset($maxs[$i]))\n\
    \            $final[] = $maxs[$i];\n    }\n    return $final;\n}\n", "    $sorted_list\
    \ = [];\n    $lst_length = count($lst);\n    for ($i = 0; $i < $lst_length; $i++)\
    \ {\n        $max_min = ($i % 2 == 0) ? max($lst) : min($lst);\n        $sorted_list[]\
    \ = $max_min;\n        $lst = array_diff($lst, [$max_min]);\n    }\n    return\
    \ $sorted_list;\n}\n", "  sort($lst);\n  $result = [];\n  $left = 0;\n  $right\
    \ = count($lst) - 1;\n  while ($left <= $right) {\n    if ($left == $right) {\n\
    \      $result[] = $lst[$left];\n      $left++;\n    } else {\n      $result[]\
    \ = $lst[$left];\n      $result[] = $lst[$right];\n      $left++;\n      $right--;\n\
    \    }\n  }\n  return $result;\n}\n$data = [1, 2, 3, 4];\nvar_dump(strange_sort_list($data));\n\
    $data = [5, 5, 5, 5];\nvar_dump(strange_sort_list($data));\n$data = [];\nvar_dump(strange_sort_list($data));",
  "    sort($lst);\n    $i = 0;\n    $j = count($lst) - 1;\n    $res = array();\n\
    \    while ($i <= $j) {\n        $res[] = $lst[$i];\n        $i++;\n        if\
    \ ($i <= $j) {\n            $res[] = $lst[$j];\n            $j--;\n        }\n\
    \    }\n    return $res;\n}\necho 'strange_sort_list(array(1, 2, 3, 4)) = ';\n\
    var_dump(strange_sort_list(array(1, 2, 3, 4)));\necho 'strange_sort_list(array(5,\
    \ 5, 5, 5)) = ';\nvar_dump(strange_sort_list(array(5, 5, 5, 5)));\necho 'strange_sort_list(array())\
    \ = ';\nvar_dump(strange_sort_list(array()));\necho \"\\n\";", "  $sorted_list\
    \ = sort_list($lst);\n  $sorted_list_length = count($sorted_list);\n  $strange_sorted_list\
    \ = array();\n  for ($i = 0; $i < $sorted_list_length; $i++) {\n    if ($i % 2\
    \ === 0) {\n      array_push($strange_sorted_list, array_shift($sorted_list));\n\
    \    } else {\n      array_push($strange_sorted_list, array_pop($sorted_list));\n\
    \    }\n  }\n  return $strange_sorted_list;\n}\n", "    $length = count($lst);\n\
    \    $even = array();\n    $odd = array();\n    $new_lst = array();\n    if ($length\
    \ <= 0) {\n        return $lst;\n    } elseif ($length == 1) {\n        return\
    \ $lst;\n    } else {\n        sort($lst);\n        foreach ($lst as $key => $value)\
    \ {\n            if ($key % 2 == 0) {\n                $even[] = $value;\n   \
    \         } else {\n                $odd[] = $value;\n            }\n        }\n\
    \        $new_lst = array_merge($even, array_reverse($odd));\n        return $new_lst;\n\
    \    }\n}", "\tif (empty($lst)) return array();\n\tif (count($lst) == 1) return\
    \ $lst;\n\t$result = array();\n\t$min = min($lst);\n\t$max = max($lst);\n\t$k\
    \ = count($lst);\n\t$i = 0;\n\t$j = $k-1;\n\twhile($k > 0) {\n\t\tif ($i == $j)\
    \ {\n\t\t\t$result[] = $lst[$i];\n\t\t\tbreak;\n\t\t}\n\t\tif ($k % 2 == 0) {\n\
    \t\t\t$result[] = $lst[$i];\n\t\t\t$i++;\n\t\t} else {\n\t\t\t$result[] = $lst[$j];\n\
    \t\t\t$j--;\n\t\t}\n\t\t$k--;\n\t}\n\treturn $result;\n}\n\necho \"Test #1: \"\
    \ . (implode(',', strange_sort_list(array(1, 2, 3, 4))) == '1,4,2,3' ? 'OK' :\
    \ 'FAIL') . \"\\n\";\necho \"Test #2: \" . (implode(',', strange_sort_list(array(5,\
    \ 5, 5, 5))) == '5,5,5,5' ? 'OK' : 'FAIL') . \"\\n\";\necho \"Test #3: \" . (implode(',',\
    \ strange_sort_list(array())) == '' ? 'OK' : 'FAIL') . \"\\n\";\necho \"Test #4:\
    \ \" . (implode(',', strange_sort_list(array(1, 1, 1, 1))) == '1,1,1,1' ? 'OK'\
    \ : 'FAIL') . \"\\n\";", "    $lst = array_unique($lst);\n    sort($lst);\n  \
    \  $len = count($lst);\n    if($len == 0 || $len == 1) {\n        return $lst;\n\
    \    } else {\n        $result = array();\n        $index = 0;\n        $pivot\
    \ = $len / 2;\n        $limit = $len - 1;\n        for($i = 0; $i < $pivot; $i++)\
    \ {\n            $result[$index] = $lst[$i];\n            $index++;\n        \
    \    $result[$index] = $lst[$limit - $i];\n            $index++;\n        }\n\
    \        if($len % 2 == 1) {\n            $result[$index] = $lst[$pivot];\n  \
    \      }\n        return $result;\n    }\n}\n", "    $min = min($lst);\n    $max\
    \ = max($lst);\n    $new_lst = array();\n    $count = count($lst);\n    for ($i\
    \ = 0; $i < $count; $i++) {\n        if ($i % 2 == 0) {\n            $new_lst[]\
    \ = $min;\n            unset($lst[array_search($min, $lst)]);\n            $min\
    \ = min($lst);\n        } else {\n            $new_lst[] = $max;\n           \
    \ unset($lst[array_search($max, $lst)]);\n            $max = max($lst);\n    \
    \    }\n    }\n    return $new_lst;\n}\n\n$input = array(1, 2, 3, 4);\n$result\
    \ = strange_sort_list($input);\nprint_r($result);\n", "  $min = min($lst);\n \
    \ $max = max($lst);\n  $result = [];\n  $start = true;\n  while (count($lst) >\
    \ 0) {\n    if ($start) {\n      $result[] = $min;\n      unset($lst[array_search($min,\
    \ $lst)]);\n      $start = false;\n    } else {\n      $result[] = $max;\n   \
    \   unset($lst[array_search($max, $lst)]);\n      $start = true;\n    }\n    $min\
    \ = min($lst);\n    $max = max($lst);\n  }\n  return $result;\n}\n\nprint_r(strange_sort_list([1,\
    \ 2, 3, 4]));\nprint_r(strange_sort_list([5, 5, 5, 5]));\nprint_r(strange_sort_list([]));",
  "  if(count($lst) == 0) return $lst;\n  $sorted = array();\n  sort($lst);\n  $taken\
    \ = 0;\n  while(count($lst) > 0) {\n    if($taken % 2 == 0) {\n      $sorted[]\
    \ = $lst[0];\n      array_shift($lst);\n    } else {\n      $sorted[] = $lst[count($lst)\
    \ - 1];\n      array_pop($lst);\n    }\n    $taken += 1;\n  }\n  return $sorted;\n\
    }", "   if (count($lst) == 0) {\n      return $lst;\n   }\n   $sorted = array_values($lst);\n\
    \   sort($sorted);\n   $left = array();\n   $right = array();\n   $middle = array_shift($sorted);\n\
    \   $left = array_reverse($sorted);\n   $right = array_reverse($sorted);\n   return\
    \ array_merge(array($middle), array_merge($left, $right));\n}\n\n$x = strange_sort_list(array(1,\
    \ 2, 3, 4));\n\nvar_dump($x);", "    if (sizeof($lst) < 1) {\n        return $lst;\n\
    \    }\n    sort($lst);\n    $i = 0;\n    $j = sizeof($lst) - 1;\n    $res = array();\n\
    \    while ($i < $j) {\n        $res[] = $lst[$i];\n        $res[] = $lst[$j];\n\
    \        $i++;\n        $j--;\n    }\n    if ($i == $j) {\n        $res[] = $lst[$i];\n\
    \    }\n    return $res;\n}\n", "    $result = [];\n    $count = count($lst);\n\
    \    for ($i = 0; $i < $count; $i++) {\n        $min = min($lst);\n        $result[]\
    \ = $min;\n        $index = array_search($min, $lst);\n        unset($lst[$index]);\n\
    \        $max = max($lst);\n        $result[] = $max;\n        $index = array_search($max,\
    \ $lst);\n        unset($lst[$index]);\n    }\n    return $result;\n}\n", "  if\
    \ (empty($lst)) return array();\n  $even = array();\n  $odd = array();\n  foreach\
    \ ($lst as $num) {\n    if ($num % 2 == 0) {\n      $even[] = $num;\n    } else\
    \ {\n      $odd[] = $num;\n    }\n  }\n  sort($even);\n  sort($odd);\n  $even\
    \ = array_reverse($even);\n  $result = array();\n  while (!empty($even) || !empty($odd))\
    \ {\n    if (!empty($even)) {\n      $result[] = array_pop($even);\n    }\n  \
    \  if (!empty($odd)) {\n      $result[] = array_pop($odd);\n    }\n  }\n  return\
    \ $result;\n}\nprint_r(strange_sort_list(array(1, 2, 3, 4)));\nprint_r(strange_sort_list(array(5,\
    \ 5, 5, 5)));\nprint_r(strange_sort_list(array()));\n", "\tsort($lst);\n\t$res\
    \ = [];\n\t$n = count($lst);\n\t$i = 0;\n\t$j = $n - 1;\n\twhile ($i < $j) {\n\
    \t\t$res[] = $lst[$i];\n\t\t$res[] = $lst[$j];\n\t\t$i++;\n\t\t$j--;\n\t}\n\t\
    if ($i == $j) {\n\t\t$res[] = $lst[$i];\n\t}\n\treturn $res;\n}\n", "  if (empty($lst))\
    \ {\n    return $lst;\n  }\n  sort($lst);\n  $lst = array_values($lst);\n  $max\
    \ = count($lst);\n  $result = array();\n  for ($i = 0; $i < $max / 2; $i++) {\n\
    \    $result[] = $lst[$i];\n    $result[] = $lst[$max - $i - 1];\n  }\n  if ($max\
    \ % 2 != 0) {\n    $result[] = $lst[$max / 2];\n  }\n  return $result;\n}\n\n\
    var_dump(strange_sort_list(array(1, 2, 3, 4)));\nvar_dump(strange_sort_list(array(5,\
    \ 5, 5, 5)));\nvar_dump(strange_sort_list(array()));", "    if(empty($lst)) return\
    \ array();\n    sort($lst);\n    $min = array_shift($lst);\n    $max = array_pop($lst);\n\
    \    $ret = array($min, $max);\n    return array_merge($ret, strange_sort_list($lst));\n\
    }\n\nvar_dump(strange_sort_list(array(1, 2, 3, 4)));\nvar_dump(strange_sort_list(array(5,\
    \ 5, 5, 5)));\nvar_dump(strange_sort_list(array()));", "\t$result = array();\n\
    \tif (!empty($lst)) {\n\t\t$sorted_lst = $lst;\n\t\tsort($sorted_lst);\n\t\t$result[]\
    \ = $sorted_lst[0];\n\t\t$remaining_lst = array_slice($sorted_lst, 1);\n\t\tif\
    \ (!empty($remaining_lst)) {\n\t\t\t$remaining_lst = array_reverse($remaining_lst);\n\
    \t\t\t$result = array_merge($result, strange_sort_list($remaining_lst));\n\t\t\
    }\n\t}\n\treturn $result;\n}\n", "    $result = [];\n    $len = count($lst);\n\
    \    if ($len == 0) return $result;\n    $min = min($lst);\n    $max = max($lst);\n\
    \    if ($min == $max) return $lst;\n    $lo = 0;\n    $hi = $len - 1;\n    $len\
    \ -= 1;\n    $is_min = true;\n    while ($lo <= $hi) {\n        if ($is_min) {\n\
    \            $min = min($lst);\n            $result[] = $min;\n            $lst[array_search($min,\
    \ $lst)] = null;\n            $lo++;\n        } else {\n            $max = max($lst);\n\
    \            $result[] = $max;\n            $lst[array_search($max, $lst)] = null;\n\
    \            $hi--;\n        }\n        $is_min = !$is_min;\n    }\n    return\
    \ $result;\n}\nprint_r(strange_sort_list([1, 2, 3, 4]));\nprint_r(strange_sort_list([5,\
    \ 5, 5, 5]));\nprint_r(strange_sort_list([]));", "\t$result = array();\n\t$odd\
    \ = true;\n\n\twhile(count($lst) != 0) {\n\t\t$max = max($lst);\n\t\t$min = min($lst);\n\
    \n\t\tif($odd) {\n\t\t\t$result[] = $min;\n\t\t\t$odd = false;\n\t\t} else {\n\
    \t\t\t$result[] = $max;\n\t\t\t$odd = true;\n\t\t}\n\n\t\tunset($lst[array_search($max,\
    \ $lst)]);\n\t\tunset($lst[array_search($min, $lst)]);\n\t}\n\n\treturn $result;\n\
    }\n", "    if (!$lst) {\n        return $lst;\n    }\n    $index = 0;\n    $increment\
    \ = 1;\n    while ($index < count($lst)) {\n        $min_index = $index;\n   \
    \     $max_index = $index;\n        for ($i = $index; $i < count($lst); $i++)\
    \ {\n            if ($lst[$i] < $lst[$min_index]) {\n                $min_index\
    \ = $i;\n            }\n            if ($lst[$i] > $lst[$max_index]) {\n     \
    \           $max_index = $i;\n            }\n        }\n        // find all indices\n\
    \        $min_indices = array();\n        for ($i = $index; $i < count($lst);\
    \ $i++) {\n            if ($lst[$i] == $lst[$min_index]) {\n                $min_indices[]\
    \ = $i;\n            }\n        }\n        $max_indices = array();\n        for\
    \ ($i = $index; $i < count($lst); $i++) {\n            if ($lst[$i] == $lst[$max_index])\
    \ {\n                $max_indices[] = $i;\n            }\n        }\n        $min_end\
    \ = max($min_indices);\n        $max_end = max($max_indices);\n        if ($min_end\
    \ <= $max_end) {\n            for ($i = $index; $i <= $min_end; $i++) {\n    \
    \            $temp = $lst[$i];\n                $lst[$i] = $lst[$min_index];\n\
    \                $lst[$min_index] = $temp;\n                $min_index++;\n  \
    \          }\n            $index = $min_end + 1;\n        } else {\n         \
    \   for ($i = $index; $i <= $max_end; $i++) {\n                $temp = $lst[$i];\n\
    \                $lst[$i] = $lst[$max_index];\n                $lst[$max_index]\
    \ = $temp;\n                $max_", "    if (count($lst) == 0) {\n        return\
    \ $lst;\n    }\n    $list = $lst;\n    $sorted = [];\n    $desc = true;\n    while\
    \ (count($list) > 0) {\n        if ($desc) {\n            $sorted[] = max($list);\n\
    \            $key = array_search(max($list), $list);\n            unset($list[$key]);\n\
    \            $desc = false;\n        } else {\n            $sorted[] = min($list);\n\
    \            $key = array_search(min($list), $list);\n            unset($list[$key]);\n\
    \            $desc = true;\n        }\n    }\n    return $sorted;\n}\n$lst = [1,\
    \ 2, 3, 4];\necho implode(\", \", strange_sort_list($lst)) . \"\\n\";\n$lst =\
    \ [5, 5, 5, 5];\necho implode(\", \", strange_sort_list($lst)) . \"\\n\";\n$lst\
    \ = [];\necho implode(\", \", strange_sort_list($lst)) . \"\\n\";", "  // implement\
    \ function here\n  return $lst;\n}\n", "    sort($lst);\n    for ($i = 0; $i <\
    \ count($lst) - 1; $i += 2) {\n        array_splice($lst, $i, 0, array_pop($lst));\n\
    \    }\n    return $lst;\n}\n\nprint_r(strange_sort_list(array(1, 2, 3, 4)));\n\
    print_r(strange_sort_list(array(5, 5, 5, 5)));\nprint_r(strange_sort_list(array()));",
  "    $lst_res = [];\n    $len = count($lst);\n    $lst_res[0] = min($lst);\n   \
    \ $key = array_search($lst_res[0], $lst);\n    unset($lst[$key]);\n    $lst =\
    \ array_values($lst);\n    $i = 1;\n    $j = 1;\n    while ($i < $len) {\n   \
    \     if ($j % 2 != 0) {\n            $lst_res[$i] = max($lst);\n            $key\
    \ = array_search($lst_res[$i], $lst);\n            unset($lst[$key]);\n      \
    \      $lst = array_values($lst);\n        } else {\n            $lst_res[$i]\
    \ = min($lst);\n            $key = array_search($lst_res[$i], $lst);\n       \
    \     unset($lst[$key]);\n            $lst = array_values($lst);\n        }\n\
    \        $i++;\n        $j++;\n    }\n    return $lst_res;\n}\n", "  $min = min($lst);\n\
    \  $max = max($lst);\n  $n = count($lst);\n  $result = array();\n  for ($i = 0;\
    \ $i < $n; $i++){\n    $result[] = $min;\n    $result[] = $max;\n    $min = min(array_diff($lst,\
    \ $result));\n    $max = max(array_diff($lst, $result));\n  }\n  return $result;\n\
    }\n", "  // TODO: Implement strange_sort_list.\n}\n", "  if (empty($lst)) return\
    \ $lst;\n  sort($lst);\n  $sorted = [];\n  $len = count($lst);\n  for ($i = 0;\
    \ $i < $len; $i++) {\n    if ($i % 2 == 0) {\n      $sorted[] = array_shift($lst);\n\
    \    } else {\n      $sorted[] = array_pop($lst);\n    }\n  }\n  return $sorted;\n\
    }\n", "\t$count = count($lst);\n\tif($count == 0) {\n\t\treturn array();\n\t}\n\
    \t$sorted = array();\n\t$min = $lst[0];\n\t$min_i = 0;\n\tfor($i = 1; $i < $count;\
    \ $i++) {\n\t\tif($lst[$i] < $min) {\n\t\t\t$min = $lst[$i];\n\t\t\t$min_i = $i;\n\
    \t\t}\n\t}\n\tarray_push($sorted, $min);\n\t$max = $lst[$min_i + 1];\n\t$max_i\
    \ = $min_i + 1;\n\tfor($i = $min_i + 2; $i < $count; $i++) {\n\t\tif($lst[$i]\
    \ > $max) {\n\t\t\t$max = $lst[$i];\n\t\t\t$max_i = $i;\n\t\t}\n\t}\n\tarray_push($sorted,\
    \ $max);\n\t$min_i = 0;\n\tfor($i = 0; $i < $count; $i++) {\n\t\tif($i != $max_i)\
    \ {\n\t\t\tarray_push($sorted, $lst[$i]);\n\t\t}\n\t}\n\treturn $sorted;\n}\n\
    $lst = array(1, 2, 3, 4);\n$sorted = strange_sort_list($lst);\nfor($i = 0; $i\
    \ < count($sorted); $i++) {\n\techo $sorted[$i];\n}\necho \"<br>\";\n$lst = array(5,\
    \ 5, 5, 5);\n$sorted = strange_sort_list($lst);\nfor($i = 0; $i < count($sorted);\
    \ $i++) {\n\techo $sorted[$i];\n}\necho \"<br>\";\n$lst = array();\n$sorted =\
    \ strange_sort_list($lst);\nfor($i = 0; $i < count($sorted); $i++) {\n\techo $sorted[$i];\n\
    }\necho \"<br>", "  if(empty($lst)) {\n    return array();\n  }\n\n  sort($lst);\n\
    \  $lst_len = count($lst);\n  $half_len = floor($lst_len / 2);\n  $sorted_lst\
    \ = array();\n  for($i = 0; $i < $half_len; $i++) {\n    $sorted_lst[] = $lst[$i];\n\
    \    $sorted_lst[] = $lst[$lst_len - $i - 1];\n  }\n\n  if($lst_len % 2 == 1)\
    \ {\n    $sorted_lst[] = $lst[$half_len];\n  }\n\n  return $sorted_lst;\n}\n\n\
    $i = array(1, 2, 3, 4);\n$o = array(1, 4, 2, 3);\nif(strange_sort_list($i) ==\
    \ $o) {\n  echo \"ok\";\n}\nelse {\n  echo \"fail\";\n}\n\necho \"\\n\";\n\n$i\
    \ = array(5, 5, 5, 5);\n$o = array(5, 5, 5, 5);\nif(strange_sort_list($i) == $o)\
    \ {\n  echo \"ok\";\n}\nelse {\n  echo \"fail\";\n}\n\necho \"\\n\";\n\n$i = array();\n\
    $o = array();\nif(strange_sort_list($i) == $o) {\n  echo \"ok\";\n}\nelse {\n\
    \  echo \"fail\";\n}\n\necho \"\\n\";\n\n$i = array(1, 2, 3, 4, 5);\n$o = array(1,\
    \ 5, 2, 4, 3);\nif(strange_sort_list($i) == $o) {\n  echo \"ok\";\n}\nelse {\n\
    \  echo \"fail\";\n}\n\necho \"\\n\";\n\n$i = array(5, 4, 3, 2, 1);\n$o = array(5,\
    \ 1, 4, 2, 3);\nif(strange_sort_list($i) == $o) {\n  echo \"ok\";\n}\nelse {\n",
  "    if (empty($lst)) {\n        return $lst;\n    }\n    $ans = array();\n    $left\
    \ = 0;\n    $right = count($lst) - 1;\n    while ($left <= $right) {\n       \
    \ $ans[] = $lst[$left];\n        if ($left != $right) {\n            $ans[] =\
    \ $lst[$right];\n        }\n        $left++;\n        $right--;\n    }\n    return\
    \ $ans;\n}\n\n$cases = array(\n    array(1, 2, 3, 4),\n    array(5, 5, 5, 5),\n\
    \    array(),\n);\n\nforeach ($cases as $case) {\n    echo \"Input: \" . implode(',\
    \ ', $case) . PHP_EOL;\n    echo \"Output: \" . implode(', ', strange_sort_list($case))\
    \ . PHP_EOL;\n}", "\n}", "\t$len = count($lst);\n\t$i = 0;\n\t$ret = array();\n\
    \twhile($i < $len) {\n\t\t$min = min($lst);\n\t\t$ret[] = $min;\n\t\t$lst = array_diff($lst,\
    \ array($min));\n\t\tif(count($lst) == 0) {\n\t\t\tbreak;\n\t\t}\n\t\t$max = max($lst);\n\
    \t\t$ret[] = $max;\n\t\t$lst = array_diff($lst, array($max));\n\t\t$i += 2;\n\t\
    }\n\treturn $ret;\n}\nprint_r(strange_sort_list(array(1, 2, 3, 4)));\nprint_r(strange_sort_list(array(5,\
    \ 5, 5, 5)));\nprint_r(strange_sort_list(array()));", "    $lst = sort_array($lst);\n\
    \    $lst = array_reverse($lst);\n    $reversed = array();\n    for ($i = 0; $i\
    \ < count($lst); $i++) {\n        if ($i % 2 == 0) {\n            array_push($reversed,\
    \ array_pop($lst));\n        } else {\n            array_unshift($reversed, array_pop($lst));\n\
    \        }\n    }\n    return $reversed;\n}", "    $result = [];\n    while (count($lst)\
    \ > 0) {\n        $min = min($lst);\n        array_push($result, $min);\n    \
    \    $lst = array_diff($lst, [$min]);\n        if (count($lst) > 0) {\n      \
    \      $max = max($lst);\n            array_push($result, $max);\n           \
    \ $lst = array_diff($lst, [$max]);\n        }\n    }\n    return $result;\n}\n\
    var_dump(strange_sort_list([1, 2, 3, 4])); // [1, 4, 2, 3]\nvar_dump(strange_sort_list([5,\
    \ 5, 5, 5])); // [5, 5, 5, 5]\nvar_dump(strange_sort_list([])); // []", "    $rst\
    \ = array();\n    sort($lst);\n    $i = 0;\n    while (count($lst) > 0) {\n  \
    \      if ($i % 2 == 0) {\n            $rst[] = array_shift($lst);\n        }\
    \ else {\n            $rst[] = array_pop($lst);\n        }\n        $i++;\n  \
    \  }\n    return $rst;\n}\n", "    $min = min($lst);\n    $max = max($lst);\n\
    \    $n = count($lst);\n    $i = 0;\n    $pos = array_search($min, $lst);\n  \
    \  unset($lst[$pos]);\n    $result = array();\n    $result[$i] = $min;\n    $i++;\n\
    \    while ($i < $n) {\n        $result[$i] = array_search($max, $lst);\n    \
    \    unset($lst[$pos]);\n        $i++;\n        $result[$i] = array_search($min,\
    \ $lst);\n        unset($lst[$pos]);\n        $i++;\n    }\n    return $result;\n\
    }\n\necho strange_sort_list(array(1, 2, 3, 4));\necho strange_sort_list(array(5,\
    \ 5, 5, 5));\necho strange_sort_list(array());", "\t// TODO: implement this function\n\
    }\n", "    if (!is_array($lst)) {\n        return array();\n    }\n    sort($lst);\n\
    \    $result = array();\n    $left = 0;\n    $right = count($lst) - 1;\n    $i\
    \ = 0;\n    while ($left <= $right) {\n        $result[$i++] = $lst[$left++];\n\
    \        if ($left <= $right) {\n            $result[$i++] = $lst[$right--];\n\
    \        }\n    }\n    return $result;\n}\n\nif (isset($_POST['data'])) {\n  \
    \  $input = $_POST['data'];\n    $res = strange_sort_list($input);\n    print_r($res);\n\
    }\n", "  $minVal = $lst[0];\n  $maxVal = $lst[0];\n  $minValPosition = 0;\n  $maxValPosition\
    \ = 0;\n  $normalizedList = [];\n  $result = [];\n  //get minVal and maxVal\n\
    \  for ($i = 0; $i < count($lst); $i++) {\n    if ($lst[$i] < $minVal) {\n   \
    \   $minVal = $lst[$i];\n      $minValPosition = $i;\n    } else if ($lst[$i]\
    \ > $maxVal) {\n      $maxVal = $lst[$i];\n      $maxValPosition = $i;\n    }\n\
    \  }\n  //normalize list by removing minVal and maxVal.\n  for ($i = 0; $i < count($lst);\
    \ $i++) {\n    if ($i != $minValPosition && $i != $maxValPosition) {\n      array_push($normalizedList,\
    \ $lst[$i]);\n    }\n  }\n  //fill the result array with minVal and maxVal.\n\
    \  $result[0] = $minVal;\n  $result[count($lst) - 1] = $maxVal;\n  //sort the\
    \ normalized list.\n  sort($normalizedList);\n  //fill the rest of the result\
    \ array.\n  for ($i = 1; $i < count($lst) - 1; $i++) {\n    if ($i % 2 == 0) {\n\
    \      $result[$i] = $normalizedList[$i / 2];\n    } else {\n      $result[$i]\
    \ = $normalizedList[count($normalizedList) - ($i / 2) - 1];\n    }\n  }\n  return\
    \ $result;\n}\n$test1 = strange_sort_list(array(1, 2, 3, 4));\n$test2 = strange_sort_list(array(5,\
    \ 5, 5, 5));\n$test3 = strange_sort_list(array());\nprint_r($test1);\nprint_r($test2);\n\
    print_r($test3);", "    if (!$lst) return $lst;\n    sort($lst);\n    $odd = array_slice($lst,\
    \ (int)(count($lst) / 2), count($lst));\n    $even = array_slice($lst, 0, (int)(count($lst)\
    \ / 2));\n    $i = 0;\n    $res = [];\n    while (isset($odd[$i]) || isset($even[$i]))\
    \ {\n        if (isset($odd[$i])) array_push($res, $odd[$i]);\n        if (isset($even[$i]))\
    \ array_push($res, $even[$i]);\n        $i++;\n    }\n    return $res;\n}\n",
  "    if (count($lst) < 2) {\n        return $lst;\n    }\n    $asc_list = $lst;\n\
    \    $desc_list = $lst;\n    sort($asc_list);\n    rsort($desc_list);\n    $mixed_list\
    \ = [];\n    $i = 0;\n    foreach ($asc_list as $asc_item) {\n        $j = $i\
    \ % 2 == 0 ? $i : $i + 1;\n        $mixed_list[$j] = $asc_item;\n        $i++;\n\
    \    }\n    $i = 1;\n    foreach ($desc_list as $desc_item) {\n        $j = $i\
    \ % 2 == 0 ? $i : $i + 1;\n        $mixed_list[$j] = $desc_item;\n        $i++;\n\
    \    }\n    return $mixed_list;\n}\n", "    $num_lst = count($lst);\n    $lst_tmp\
    \ = [];\n    $mid = round($num_lst / 2);\n    if ($num_lst == 0) {\n        return\
    \ $lst;\n    }\n    for ($i = 0; $i < $mid; $i++) {\n        $min = $i;\n    \
    \    $max = $i;\n        for ($j = $i; $j < $num_lst; $j++) {\n            if\
    \ ($lst[$j] < $lst[$min]) {\n                $min = $j;\n            }\n     \
    \       if ($lst[$j] > $lst[$max]) {\n                $max = $j;\n           \
    \ }\n        }\n        $lst_tmp[$i] = $lst[$min];\n        $lst_tmp[$num_lst\
    \ - $i - 1] = $lst[$max];\n        $lst[$min] = $lst[$i];\n        $lst[$max]\
    \ = $lst[$num_lst - $i - 1];\n    }\n    if ($num_lst % 2 != 0) {\n        $lst_tmp[$mid]\
    \ = $lst[$mid];\n    }\n    return $lst_tmp;\n}\n\nprint_r(strange_sort_list(array(1,\
    \ 2, 3, 4)));\necho \"<br>\";\nprint_r(strange_sort_list(array(5, 5, 5, 5)));\n\
    echo \"<br>\";\nprint_r(strange_sort_list(array()));\necho \"<br>\";\nprint_r(strange_sort_list(array(1,\
    \ 2, 3, 4, 5)));\necho \"<br>\";\nprint_r(strange_sort_list(array(5, 5, 5, 5,\
    \ 5)));\necho \"<br>\";\nprint_r(strange_sort_list(array(1, 3, 5, 7, 9)));\necho\
    \ \"<br>\";", "\tif (count($lst) < 2) {\n\t\treturn $lst;\n\t}\n\t$sort_lst =\
    \ array();\n\tsort($lst);\n\t$lst_len = count($lst);\n\t$min_pos = 0;\n\t$max_pos\
    \ = $lst_len - 1;\n\tfor ($i = 0; $i < $lst_len; $i++) {\n\t\tif ($i % 2 == 0)\
    \ {\n\t\t\t$sort_lst[] = $lst[$min_pos];\n\t\t\t$min_pos++;\n\t\t} else {\n\t\t\
    \t$sort_lst[] = $lst[$max_pos];\n\t\t\t$max_pos--;\n\t\t}\n\t}\n\treturn $sort_lst;\n\
    }\n", "    if (sizeof($lst) == 0) return $lst;\n    $even_lst = array();\n   \
    \ $odd_lst = array();\n    sort($lst);\n    for ($i = 0; $i < sizeof($lst); $i++)\
    \ {\n        if ($i % 2 == 0) {\n            array_push($even_lst, $lst[$i]);\n\
    \        } else {\n            array_push($odd_lst, $lst[$i]);\n        }\n  \
    \  }\n    return array_merge($even_lst, array_reverse($odd_lst));\n}\n\nprint_r(strange_sort_list(array(1,\
    \ 2, 3, 4)));\nprint_r(strange_sort_list(array(5, 5, 5, 5)));\nprint_r(strange_sort_list(array()));\n",
  "  if (empty($lst)) {\n    return array();\n  }\n  sort($lst);\n  $a = array();\n\
    \  $i = 0;\n  $n = count($lst);\n  if ($n % 2 == 0) {\n    for ($j = 0; $j < $n;\
    \ $j += 2) {\n      $a[$i++] = $lst[$j];\n      $a[$i++] = $lst[$n - $j - 1];\n\
    \    }\n  } else {\n    for ($j = 0; $j < $n - 1; $j += 2) {\n      $a[$i++] =\
    \ $lst[$j];\n      $a[$i++] = $lst[$n - $j - 1];\n    }\n    $a[$i] = $lst[$n\
    \ - 1];\n  }\n  return $a;\n}\n\n$a = array(1, 2, 3, 4);\nprint_r(strange_sort_list($a));\n\
    \n$a = array(5, 5, 5, 5);\nprint_r(strange_sort_list($a));\n\n$a = array();\n\
    print_r(strange_sort_list($a));\n", "  $lst1 = $lst;\n  $result = [];\n  sort($lst1);\n\
    \  $mid = count($lst1) / 2;\n  $left = $mid - 1;\n  $right = $mid;\n  while ($left\
    \ >= 0 || $right < count($lst1)) {\n    if ($left >= 0) {\n      $result[] = $lst1[$left];\n\
    \      $left--;\n    }\n    if ($right < count($lst1)) {\n      $result[] = $lst1[$right];\n\
    \      $right++;\n    }\n  }\n  return $result;\n}\n", "    $length = count($lst);\n\
    \    if ($length == 0) {\n        return array();\n    } else if ($length == 1)\
    \ {\n        return $lst;\n    }\n    $max = max($lst);\n    $min = min($lst);\n\
    \    $first = false;\n    $res = array();\n    while (count($res) < $length) {\n\
    \        if (!$first) {\n            $res[] = $min;\n            $first = true;\n\
    \        } else {\n            $res[] = $max;\n            $first = false;\n \
    \       }\n    }\n    return $res;\n}\n$lst = array(1, 2, 3, 4);\n$res = strange_sort_list($lst);\n\
    foreach ($res as $num) {\n    echo $num . \" \";\n}\necho \"\\n\";\n$lst = array(5,\
    \ 5, 5, 5);\n$res = strange_sort_list($lst);\nforeach ($res as $num) {\n    echo\
    \ $num . \" \";\n}\necho \"\\n\";\n$lst = array();\n$res = strange_sort_list($lst);\n\
    foreach ($res as $num) {\n    echo $num . \" \";\n}\necho \"\\n\";", "  sort($lst);\n\
    \  $head = array_splice($lst, 0, count($lst) / 2);\n  $tail = array_reverse($lst);\n\
    \  $result = array();\n  while (count($head) > 0 || count($tail) > 0) {\n    if\
    \ (count($head) > 0) {\n      $result[] = array_shift($head);\n    }\n    if (count($tail)\
    \ > 0) {\n      $result[] = array_shift($tail);\n    }\n  }\n  return $result;\n\
    }\nprint_r(strange_sort_list(array(1, 2, 3, 4)));\nprint_r(strange_sort_list(array(5,\
    \ 5, 5, 5)));\nprint_r(strange_sort_list(array()));", "    if(!empty($lst)) {\n\
    \        $return = [];\n        sort($lst);\n        for($i = 0; $i < count($lst);\
    \ $i++) {\n            $return[] = $lst[$i];\n            if(!empty($lst)) {\n\
    \                array_pop($lst);\n            }\n            if(!empty($lst))\
    \ {\n                $last = array_pop($lst);\n                array_unshift($lst,\
    \ $last);\n            }\n        }\n        return $return;\n    }\n    return\
    \ $lst;\n}\nvar_dump(strange_sort_list(array(1, 2, 3, 4)));\nvar_dump(strange_sort_list(array(5,\
    \ 5, 5, 5)));\nvar_dump(strange_sort_list(array()));"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
