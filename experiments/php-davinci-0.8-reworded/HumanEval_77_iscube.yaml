name: HumanEval_77_iscube
language: php
prompt: "<?php\n// Write a function that takes an integer a and returns true \n//\
  \ if this ingeger is a cube of some integer number.\n// Note: you may assume the\
  \ input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>> iscube(2)\n\
  // false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n// >>> iscube(0)\n\
  // true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n"
tests: "function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n  \
  \  if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729)\
  \ !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    return (pow($a, 1/3) - floor(pow($a, 1/3)) == 0);\n}\necho iscube(180);",
  "    $x = sqrt($a);\n    return $x * $x * $x == $a;\n}", "\tif($a == 0 || $a ==\
    \ 1 || $a == -1)\n\t\treturn \"true\";\n\telse {\n\t\t$root = pow($a, 1/3);\n\t\
    \tif($root - floor($root) == 0)\n\t\t\treturn \"true\";\n\t\telse \n\t\t\treturn\
    \ \"false\";\n\t}\n}\necho iscube(4);", "  if ($a == 0) {\n    return true;\n\
    \  }\n  elseif ($a < 0) {\n    $a = -$a;\n  }\n  for ($i = 1; $i < $a; $i++) {\n\
    \    if ($i * $i * $i == $a) {\n      return true;\n    }\n  }\n  return false;\n\
    }\n\nif (iscube(1)) {\n  echo \"true\";\n}\nelse {\n  echo \"false\";\n}", " \
    \   return $a == round(pow($a, 1/3));\n}\nfor ($i = -100; $i < 100; $i++) {\n\
    \    if (iscube($i)) {\n        echo \"$i\\n\";\n    }\n}", "\treturn ($a == (int)pow(pow($a,\
    \ 1/3), 3));\n}\n\necho iscube(1);\necho \"\\n\";\necho iscube(2);\necho \"\\\
    n\";\necho iscube(-1);\necho \"\\n\";\necho iscube(64);\necho \"\\n\";\necho iscube(0);\n\
    echo \"\\n\";\necho iscube(180);\necho \"\\n\";", "    // TODO\n}", "  $i = 1;\n\
    \  while ( $i * $i * $i < $a) {\n    $i = $i + 1;\n  }\n  if ($i * $i * $i ==\
    \ $a) {\n    return true;\n  } else {\n    return false;\n  }\n}\necho iscube(1)\
    \ . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64)\
    \ . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";", "\treturn\
    \ ((int) pow($a, 1/3) == pow($a, 1/3));\n}\n", "    if ($a === 0) return true;\n\
    \    if ($a < 0) return iscube(-1 * $a);\n    $root = 0;\n    $absA = abs($a);\n\
    \    while ($root * $root * $root < $absA) {\n        $root++;\n    }\n    return\
    \ $root * $root * $root === $absA;\n}\n", "    if ($a == 0) {\n        return\
    \ true;\n    }\n    if ($a < 0) {\n        $a = -$a;\n    }\n    $root = round(pow($a,\
    \ 1 / 3));\n    return $root * $root * $root == $a;\n}\necho iscube(1) . PHP_EOL;\n\
    echo iscube(2) . PHP_EOL;\necho iscube(-1) . PHP_EOL;\necho iscube(64) . PHP_EOL;\n\
    echo iscube(0) . PHP_EOL;\necho iscube(180) . PHP_EOL;", "\t$num = (int) pow($a,\
    \ (1/3));\n\tif ($num * $num * $num == $a) {\n\t\treturn \"true\";\n\t} else {\n\
    \t\treturn \"false\";\n\t}\n}\n\necho iscube(1) . \"<br>\";\necho iscube(2) .\
    \ \"<br>\";\necho iscube(-1) . \"<br>\";\necho iscube(64) . \"<br>\";\necho iscube(0)\
    \ . \"<br>\";\necho iscube(180) . \"<br>\";", "\t$root = sqrt($a);\n\tif ($root\
    \ % 1 != 0) {\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}\n\necho\
    \ \"iscube(1) = \" . iscube(1) . \"\\n\";\necho \"iscube(2) = \" . iscube(2) .\
    \ \"\\n\";\necho \"iscube(-1) = \" . iscube(-1) . \"\\n\";\necho \"iscube(64)\
    \ = \" . iscube(64) . \"\\n\";\necho \"iscube(0) = \" . iscube(0) . \"\\n\";\n\
    echo \"iscube(180) = \" . iscube(180) . \"\\n\";\n", "\t$result = false;\n\t$x\
    \ = 0;\n\twhile($x * $x * $x <= $a) {\n\t\tif ($x * $x * $x == $a) {\n\t\t\t$result\
    \ = true;\n\t\t\tbreak;\n\t\t}\n\t\t$x++;\n\t}\n\treturn $result;\n}\n", "   \
    \ $temp = $a;\n    if ($a<0) {\n        $temp = -$a;\n    }\n    $root = pow($temp,\
    \ 1/3);\n    if (round($root, 0) == $root) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\n", "\t// convert $a to a string and compare\
    \ it with it's cubed root\n\t$a = (string)$a;\n\t$cubed = $a[0];\n\tfor ($i =\
    \ 1; $i < strlen($a); $i++) {\n\t\t$cubed = $cubed.\"0\";\n\t}\n\t$cubed = (int)$cubed;\n\
    \t$cubed = $cubed * $cubed * $cubed;\n\tif ($cubed == $a) {\n\t\treturn \"true\"\
    ;\n\t} else {\n\t\treturn \"false\";\n\t}\n}\necho iscube(1);\necho iscube(2);\n\
    echo iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);", "\treturn\
    \ is_int(cbrt($a));\n}\n", "\t// WRITE YOUR CODE HERE\n}", "\tfor ($i = 0; $i\
    \ <= $a; $i++) {\n\t\tif ($i*$i*$i == $a) {\n\t\t\treturn true;\n\t\t}\n\t}\n\t\
    return false;\n}\necho iscube(0);", "\t$base = pow($a, 1/3);\n\treturn $base ==\
    \ floor($base);\n}\n", "    $a = abs($a);\n    for ($i = 0; $i <= $a; $i++) {\n\
    \        if ($i*$i*$i == $a) {\n            return true;\n        }\n    }\n \
    \   return false;\n}\n$result = iscube(-1);\nif ($result == true) {\n    echo\
    \ \"true\";\n} else {\n    echo \"false\";\n}", "    if ($a == 0) {\n        return\
    \ true;\n    } else if ($a < 0) {\n        return (floatval(sqrt($a * -1)) ==\
    \ intval(sqrt($a * -1)));\n    } else {\n        return (floatval(sqrt($a)) ==\
    \ intval(sqrt($a)));\n    }\n}\n", "    if ($a == 0) return true;\n    if ($a\
    \ < 0) $a = abs($a);\n    return (is_int(pow($a, 1/3)));\n}\n", "    if ($a >\
    \ 0) {\n        return is_int(pow($a, 1/3));\n    } else {\n        return false;\n\
    \    }\n}\necho iscube(64) . PHP_EOL;", "\t// your code here\n\treturn false;\n\
    }\n", "  // Your code here\n}", "    $b = pow($a, 1/3);\n    if (is_int($b)) {\n\
    \        return true;\n    } else {\n        return false;\n    }\n}\necho \"\
    The number is \" . iscube(6) . \"<br>\";\necho \"The number is \" . iscube(2)\
    \ . \"<br>\";\necho \"The number is \" . iscube(-1) . \"<br>\";\necho \"The number\
    \ is \" . iscube(64) . \"<br>\";\necho \"The number is \" . iscube(0) . \"<br>\"\
    ;\necho \"The number is \" . iscube(180) . \"<br>\";", "    $c = (int)cbrt($a);\n\
    \    return $c * $c * $c == $a;\n}", "\t$num = 0;\n\twhile ($num * $num * $num\
    \ < $a) {\n\t\t$num++;\n\t}\n\treturn $num * $num * $num == $a;\n}", "\t$b = sqrt($a);\n\
    \tif($b != 0 && $b == floor($b)) {\n\t\t$c = pow($b, 3);\n\t\tif($c == $a) {\n\
    \t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n", "\t$c = pow($a, 1/3);\n\
    \tif (is_int($c)) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n\
    }\n", "\treturn (pow($a, 1/3) == round(pow($a, 1/3)));\n}\necho \"iscube(1) =\
    \ \".iscube(1).\"\\n\";\necho \"iscube(2) = \".iscube(2).\"\\n\";\necho \"iscube(-1)\
    \ = \".iscube(-1).\"\\n\";\necho \"iscube(64) = \".iscube(64).\"\\n\";\necho \"\
    iscube(0) = \".iscube(0).\"\\n\";\necho \"iscube(180) = \".iscube(180).\"\\n\"\
    ;\n", "    // Write your code here\n    // To print results to the standard output\
    \ you can use print\n    // Example: print \"Hello world!\";\n    $b = pow($a,1/3);\n\
    \    $c = round($b);\n    if($b == $c){\n        return true;\n    }else{\n  \
    \      return false;\n    }\n}\n", "    return pow($a, 1/3) % 1 == 0;\n}\necho\
    \ iscube(180);", "\t$b = $a;\n\t$c = 1;\n\t$d = 1;\n\twhile ($a>=$c) {\n\t\t$c=$c*$d;\n\
    \t\t$d++;\n\t}\n\treturn $c==$b;\n}\necho iscube(180);", "\tif ($a < 0) {\n\t\t\
    $a = -$a;\n\t}\n\t$i = 1;\n\twhile ($i * $i * $i <= $a) {\n\t\tif ($i * $i * $i\
    \ == $a) {\n\t\t\treturn true;\n\t\t}\n\t\t$i++;\n\t}\n\treturn false;\n}\n",
  "    return ($a%2 == 1 ? (is_int(pow($a, 1/3))) : false);\n}\n\n$a = $_GET['a'];\n\
    echo iscube($a);", "\t$root = pow($a, 1/3);\n\tif ($root - floor($root) != 0)\n\
    \t\treturn false;\n\telse\n\t\treturn true;\n}\n", "\treturn is_int(cbrt($a));\n\
    }", "    // Write your code here\n    $x = sqrt($a);\n    if($x*$x*$x == $a) {\n\
    \    \treturn TRUE;\n    }\n    else {\n    \treturn FALSE;\n    }\n}", "    $x\
    \ = 0;\n    while ($x * $x * $x < abs($a)) {\n        $x = $x + 1;\n    }\n  \
    \  if ($x * $x * $x != abs($a)) {\n        return false;\n    }\n    return true;\n\
    }\n\necho iscube(1) . \"<br>\";\necho iscube(2) . \"<br>\";\necho iscube(-1) .\
    \ \"<br>\";\necho iscube(64) . \"<br>\";\necho iscube(0) . \"<br>\";\necho iscube(180)\
    \ . \"<br>\";\n", "  if ($a == 0) {\n    return true;\n  }\n  if ($a < 0) {\n\
    \    $a = -$a;\n  }\n  $n = (int)pow($a, 1/3);\n  return pow($n, 3) == $a;\n}\n\
    \nprint iscube(1);\nprint iscube(2);\nprint iscube(-1);\nprint iscube(64);\nprint\
    \ iscube(0);\nprint iscube(180);\n", "  // must use double equals because if single\
    \ equals, then will automatically turn into true.\n  if ($a == 0) {\n    return\
    \ true;\n  } elseif ($a > 0) {\n    $x = sqrt($a);\n    $x = round($x);\n    $x\
    \ *= $x * $x;\n    if ($x == $a) {\n      return true;\n    } else {\n      return\
    \ false;\n    }\n  } else {\n    $x = sqrt(abs($a));\n    $x = round($x);\n  \
    \  $x *= $x * $x;\n    if ($x == abs($a)) {\n      return true;\n    } else {\n\
    \      return false;\n    }\n  }\n}\n", "    // your code goes here\n}", "   \
    \ $c = $a ** 1/3;\n    if (round($c) == $c) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}", "  $cubes = array(1, 8, 27, 64, 125, 216,\
    \ 343, 512, 729, 1000, 1331, 1728, 2197, 2744, 3375, 4096, 4913, 5832, 6859, 8000,\
    \ 9261);\n  if (in_array($a, $cubes)) {\n    return true;\n  } else {\n    return\
    \ false;\n  }\n}\n", "  $n = 1;\n  while ($n * $n * $n < $a) {\n    $n++;\n  }\n\
    \  return $n * $n * $n == $a;\n}\n\nprint_r(iscube(1)); // true\nprint_r(iscube(2));\
    \ // false\nprint_r(iscube(-1)); // true\nprint_r(iscube(64)); // true\nprint_r(iscube(0));\
    \ // true\nprint_r(iscube(180)); // false", "    if ($a == 0) {\n        return\
    \ true;\n    }\n    $x = abs($a);\n    $divisor = abs($a);\n    while ($divisor\
    \ > 1) {\n        $divisor = $divisor / 2;\n        $square = $divisor * $divisor\
    \ * $divisor;\n        if ($square == $x) {\n            return true;\n      \
    \  }\n    }\n    return false;\n}\n", "\t$n = $a;\n\twhile ($n > 0) {\n\t\tif\
    \ ($n ** 3 == $a) {\n\t\t\treturn true;\n\t\t}\n\t\t$n--;\n\t}\n\treturn false;\n\
    }\n\necho \"iscube(1)\\n\";\necho iscube(1) . \"\\n\";\necho \"iscube(2)\\n\"\
    ;\necho iscube(2) . \"\\n\";\necho \"iscube(-1)\\n\";\necho iscube(-1) . \"\\\
    n\";\necho \"iscube(64)\\n\";\necho iscube(64) . \"\\n\";\necho \"iscube(0)\\\
    n\";\necho iscube(0) . \"\\n\";\necho \"iscube(180)\\n\";\necho iscube(180) .\
    \ \"\\n\";", "\treturn is_numeric(pow($a,1/3));\n}\n", "    // Your code here\n\
    }", "\treturn pow($a,1/3)==round(pow($a,1/3))?true:false;\n}\necho iscube(2);",
  "\t$b = 0;\n\t$c = 0;\n\tif($a == 0) {\n\t\treturn true;\n\t} else {\n\t\twhile($c\
    \ <= $a) {\n\t\t\t$c = $b*$b*$b;\n\t\t\tif($c == $a) {\n\t\t\t\treturn true;\n\
    \t\t\t}\n\t\t\t$b++;\n\t\t}\n\t\treturn false;\n\t}\n}", "    if ($a === 0) {\n\
    \        return true;\n    } elseif ($a < 0) {\n        $a = -$a;\n    }\n   \
    \ for ($i = 1; $i * $i * $i <= $a; $i++) {\n        if ($i * $i * $i === $a) {\n\
    \            return true;\n        }\n    }\n    return false;\n}\n\necho iscube(180)\
    \ . PHP_EOL;\necho iscube(1) . PHP_EOL;\necho iscube(0) . PHP_EOL;\necho iscube(-1)\
    \ . PHP_EOL;\necho iscube(64) . PHP_EOL;\necho iscube(2) . PHP_EOL;", "  if ($a\
    \ == 0) return true;\n  $i = 1;\n  $i3 = $i * $i * $i;\n  while ($i3 <= abs($a))\
    \ {\n    if ($i3 == abs($a)) return true;\n    $i++;\n    $i3 = $i * $i * $i;\n\
    \  }\n  return false;\n}\n", "\t$count = 0;\n\tfor ($i = 0; $i <= $a; $i++) {\n\
    \t\tif ($i * $i * $i == $a) {\n\t\t\t$count += 1;\n\t\t}\n\t}\n\tif ($count >\
    \ 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho (iscube(1));",
  "\tif($a == 0) return true;\n\t$b = floor(pow($a, 1/3));\n\treturn ($b * $b * $b\
    \ == $a);\n}\n", "    if ($a < 0) {\n        $a = -$a;\n    }\n    for ($i = 0;\
    \ $i < $a; $i++) {\n        if ($i * $i * $i == $a) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\necho iscube(1) . \"\\n\";\necho iscube(2)\
    \ . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0)\
    \ . \"\\n\";\necho iscube(180) . \"\\n\";", "\tif($a < 0) {\n\t\t$a = -$a;\n\t\
    }\n\tif($a === 0) {\n\t\treturn true;\n\t}\n\tfor($i = 1; $i <= $a; $i++) {\n\t\
    \tif($i * $i * $i == $a) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n\
    }\necho iscube(1) ? \"true <br>\" : \"false <br>\";\necho iscube(2) ? \"true <br>\"\
    \ : \"false <br>\";\necho iscube(-1) ? \"true <br>\" : \"false <br>\";\necho iscube(64)\
    \ ? \"true <br>\" : \"false <br>\";\necho iscube(0) ? \"true <br>\" : \"false\
    \ <br>\";\necho iscube(180) ? \"true <br>\" : \"false <br>\";\n", "    $x = sqrt($a);\n\
    \    if($x == round($x)) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}", "  return $a == 0 or abs($a) == bcpow(abs(bcroot($a, 3)),\
    \ 3);\n}\n\necho iscube(27) . \"\\n\";\necho iscube(28) . \"\\n\";\necho iscube(64)\
    \ . \"\\n\";\necho iscube(64.1) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(-125)\
    \ . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(180) . \"\\n\";", "\tif\
    \ ($a == 0) {\n\t\treturn true;\n\t}\n\tif ($a < 0) {\n\t\t$a = -$a;\n\t}\n\t\
    for ($i = 1; $i <= $a; $i++) {\n\t\tif (pow($i, 3) == $a) {\n\t\t\treturn true;\n\
    \t\t}\n\t}\n\treturn false;\n}\n", "    return is_int(pow($a, 1 / 3));\n}\necho\
    \ iscube(1);\necho iscube(2);\necho iscube(-1);\necho iscube(64);\necho iscube(0);\n\
    echo iscube(180);\n", "  return !($a % sqrt($a)) ? true : false;\n}", "    return\
    \ cbrt($a) == intval(cbrt($a));\n}\n\necho iscube(0) ? \"true\\n\" : \"false\\\
    n\";\necho iscube(1) ? \"true\\n\" : \"false\\n\";\necho iscube(2) ? \"true\\\
    n\" : \"false\\n\";\necho iscube(3) ? \"true\\n\" : \"false\\n\";\necho iscube(8)\
    \ ? \"true\\n\" : \"false\\n\";\necho iscube(27) ? \"true\\n\" : \"false\\n\"\
    ;\necho iscube(64) ? \"true\\n\" : \"false\\n\";\necho iscube(125) ? \"true\\\
    n\" : \"false\\n\";\necho iscube(1000) ? \"true\\n\" : \"false\\n\";\necho iscube(5000)\
    \ ? \"true\\n\" : \"false\\n\";\necho iscube(729) ? \"true\\n\" : \"false\\n\"\
    ;\necho iscube(2281) ? \"true\\n\" : \"false\\n\";", "\t// your code here\n\t\
    $n = pow($a,1/3);\n\tif(($n - floor($n)) == 0) {\n\t\treturn true;\n\t}\n\telse\
    \ {\n\t\treturn false;\n\t}\n}\n", "\t// $c = $a^(1/3);\n\t// return (round($c)\
    \ == $c) ? true : false;\n\n\t//$c = round(pow($a, 1/3));\n\t$c = (int)round(pow($a,\
    \ 1/3));\n\treturn $c * $c * $c == $a;\n}", "    if($a == 0 || $a == 1 || $a ==\
    \ -1) {\n        return true;\n    } else {\n        $i = 0;\n        while($i\
    \ * $i * $i < $a) {\n            $i++;\n        }\n        if($i * $i * $i ==\
    \ $a) {\n            return true;\n        } else {\n            return false;\n\
    \        }\n    }\n}\n", "  if ($a == 0) {\n    return true;\n  }\n  if ($a <\
    \ 0) {\n    $a = $a * -1;\n  }\n  for ($i = 1; $i < $a; $i++) {\n    if ($i *\
    \ $i * $i == $a) {\n      return true;\n    }\n  }\n  return false;\n}\necho iscube(1)\
    \ . PHP_EOL;\necho iscube(2) . PHP_EOL;\necho iscube(-1) . PHP_EOL;\necho iscube(64)\
    \ . PHP_EOL;\necho iscube(0) . PHP_EOL;\necho iscube(180) . PHP_EOL;", "    if\
    \ ($a < 0) {\n        $a = -$a;\n    }\n    $root = pow($a, 1 / 3);\n    return\
    \ $root == floor($root);\n}\n\n$a = -1;\necho \"Is \" . $a . \" a cube number?\
    \ \" . iscube($a) . \"\\n\";\n$a = 2;\necho \"Is \" . $a . \" a cube number? \"\
    \ . iscube($a) . \"\\n\";\n$a = -1;\necho \"Is \" . $a . \" a cube number? \"\
    \ . iscube($a) . \"\\n\";\n$a = 64;\necho \"Is \" . $a . \" a cube number? \"\
    \ . iscube($a) . \"\\n\";\n$a = 0;\necho \"Is \" . $a . \" a cube number? \" .\
    \ iscube($a) . \"\\n\";\n$a = 180;\necho \"Is \" . $a . \" a cube number? \" .\
    \ iscube($a) . \"\\n\";", "\tif($a==1){\n\t\treturn true;\n\t}\n\tfor($i=1;$i<=$a;$i++){\n\
    \t\tif($i*$i*$i==$a){\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n$num\
    \ = 7;\necho $num,\" is cube or not: \",iscube($num);", "\t$b = round(pow($a,\
    \ 1 / 3));\n\tif ($b * $b * $b == $a) {\n\t\treturn true;\n\t} else {\n\t\treturn\
    \ false;\n\t}\n}\nvar_dump(iscube(1));\nvar_dump(iscube(2));\nvar_dump(iscube(-1));\n\
    var_dump(iscube(64));\nvar_dump(iscube(0));\nvar_dump(iscube(180));", "    return\
    \ is_numeric($a) && (($a % 3) == 0) && ($a > 0);\n}\n", "    $b = abs($a);\n \
    \   $i = 1;\n    while ($i * $i * $i < $b) {\n        $i++;\n    }\n    return\
    \ $i * $i * $i == $b;\n}\necho iscube(64);", "    return $a == round(pow($a, 1/3));\n\
    }\n", "    // Your code here\n}\n\n$is = iscube(1);\n\necho \"1 \";\necho ($is)\
    \ ? \"true\" : \"false\";\necho PHP_EOL;\n\n$is = iscube(2);\n\necho \"2 \";\n\
    echo ($is) ? \"true\" : \"false\";\necho PHP_EOL;\n\n$is = iscube(-1);\n\necho\
    \ \"-1 \";\necho ($is) ? \"true\" : \"false\";\necho PHP_EOL;\n\n$is = iscube(64);\n\
    \necho \"64 \";\necho ($is) ? \"true\" : \"false\";\necho PHP_EOL;\n\n$is = iscube(0);\n\
    \necho \"0 \";\necho ($is) ? \"true\" : \"false\";\necho PHP_EOL;\n\n$is = iscube(180);\n\
    \necho \"180 \";\necho ($is) ? \"true\" : \"false\";\necho PHP_EOL;", "\t$cubes\
    \ = array();\n\tfor ($i = 0; $i < 3 * $a; $i++) {\n\t\t$cubes[] = $i * $i * $i;\n\
    \t}\n\treturn in_array($a, $cubes);\n}\n", "\t$x = 1;\n\twhile (1) {\n\t\tif ($x\
    \ * $x * $x == $a) {\n\t\t\treturn \"true\";\n\t\t}\n\t\telseif ($x * $x * $x\
    \ > $a) {\n\t\t\treturn \"false\";\n\t\t}\n\t\t$x++;\n\t}\n}\necho iscube(-1);",
  "    if ($a < 0) {\n        $a = -$a;\n    }\n    if ($a < 1) {\n        return\
    \ true;\n    }\n    $i = 1;\n    while ($i * $i * $i < $a) {\n        $i++;\n\
    \    }\n    if ($i * $i * $i == $a) {\n        return true;\n    }\n    return\
    \ false;\n}\n", "    if ($a == 0) {\n        return true;\n    } elseif ($a <\
    \ 0) {\n        $a = -$a;\n    }\n\n    $root = cbrt($a);\n    return $root -\
    \ (int)$root == 0;\n}\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\n\
    echo iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\\
    n\";\necho iscube(180) . \"\\n\";", "  $a = abs($a);\n  if ($a == 0) return true;\n\
    \  $low = 1;\n  $high = $a;\n  while ($low <= $high) {\n    $mid = floor(($low\
    \ + $high) / 2);\n    $mid3 = $mid * $mid * $mid;\n    if ($mid3 == $a) return\
    \ true;\n    else if ($mid3 < $a) $low = $mid + 1;\n    else $high = $mid - 1;\n\
    \  }\n  return false;\n}\necho (iscube(1) == true) ? \"PASS\\n\" : \"FAIL\\n\"\
    ;\necho (iscube(2) == false) ? \"PASS\\n\" : \"FAIL\\n\";\necho (iscube(-1) ==\
    \ true) ? \"PASS\\n\" : \"FAIL\\n\";\necho (iscube(64) == true) ? \"PASS\\n\"\
    \ : \"FAIL\\n\";\necho (iscube(0) == true) ? \"PASS\\n\" : \"FAIL\\n\";\necho\
    \ (iscube(180) == false) ? \"PASS\\n\" : \"FAIL\\n\";", "    $result = false;\n\
    \    if ($a == 0) {\n        $result = true;\n    } elseif ($a > 0) {\n      \
    \  for ($i = 1; $i < $a; $i++) {\n            if ($i*$i*$i == $a) {\n        \
    \        $result = true;\n                break;\n            }\n        }\n \
    \   } else {\n        for ($i = -1; $i > $a; $i--) {\n            if ($i*$i*$i\
    \ == $a) {\n                $result = true;\n                break;\n        \
    \    }\n        }\n    }\n    return $result;\n}\n\necho \"18 is a cube: \".iscube(18).\"\
    \\n\";\necho \"64 is a cube: \".iscube(64).\"\\n\";\necho \"80 is a cube: \".iscube(80).\"\
    \\n\";\necho \"1 is a cube: \".iscube(1).\"\\n\";\necho \"0 is a cube: \".iscube(0).\"\
    \\n\";\necho \"-27 is a cube: \".iscube(-27).\"\\n\";\necho \"-14 is a cube: \"\
    .iscube(-14).\"\\n\";", "\treturn  pow(abs($a),1/3)==round(pow(abs($a),1/3));\n\
    }\n\nvar_dump(iscube(1));\nvar_dump(iscube(2));\nvar_dump(iscube(-1));\nvar_dump(iscube(64));\n\
    var_dump(iscube(0));\nvar_dump(iscube(180));", "\tif($a<0)\n\t\t$a=-$a;\n\tfor($i=0;$i<=$a;$i++)\n\
    \t{\n\t\tif($i*$i*$i==$a)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\n\necho\
    \ iscube(64);\necho \"<br>\";\necho iscube(180);", "  $a = abs($a);\n  $s = sqrt($a);\n\
    \  return $s*$s*$s === $a;\n}\nvar_dump(iscube(1));\nvar_dump(iscube(2));\nvar_dump(iscube(-1));\n\
    var_dump(iscube(64));\nvar_dump(iscube(0));\nvar_dump(iscube(180));", "    if\
    \ (pow($a, 1/3) - floor(pow($a, 1/3)) == 0) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\necho iscube(1) . \"\\n\";\necho iscube(2)\
    \ . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0)\
    \ . \"\\n\";\necho iscube(180) . \"\\n\";", "\t$num = round(cbrt($a));\n\tif ($num*$num*$num\
    \ == $a) {\n\t\treturn \"true\";\n\t}\n\telse {\n\t\treturn \"false\";\n\t}\n\
    }\necho iscube(1);\necho \"<br>\";\necho iscube(2);\necho \"<br>\";\necho iscube(-1);\n\
    echo \"<br>\";\necho iscube(64);\necho \"<br>\";\necho iscube(0);\necho \"<br>\"\
    ;\necho iscube(180);", "    $a = abs($a);\n    $i = 0;\n    while ($i * $i * $i\
    \ < $a) {\n        $i++;\n    }\n    return $i * $i * $i == $a;\n}\nfor ($i =\
    \ -10; $i < 11; $i++) {\n    echo \"iscube($i)=\" . iscube($i) . \"\\n\";\n}\n",
  "\tif ($a == 1 || $a == -1 || $a == 0) {\n\t\treturn true;\n\t} else {\n\t\t$result\
    \ = false;\n\t\t$n = 1;\n\t\twhile ($result == false) {\n\t\t\t$n++;\n\t\t\tif\
    \ ($n * $n * $n == $a) {\n\t\t\t\t$result = true;\n\t\t\t}\n\t\t}\n\t\treturn\
    \ $result;\n\t}\n}", "\t$i = 1;\n\t$result = true;\n\twhile($i<$a) {\n\t\tif($i**3==$a)\
    \ {\n\t\t\t$result = true;\n\t\t\treturn $result;\n\t\t} else {\n\t\t\t$result\
    \ = false;\n\t\t}\n\t\t$i++;\n\t}\n\treturn $result;\n}\necho iscube(0);", " \
    \   return ($a === 0 || is_int(pow($a, 1/3)));\n}\n", "    // Your code here\n\
    \    $i = 1;\n    while ($i < $a) {\n        $cube = $i * $i * $i;\n        if\
    \ ($cube == $a) {\n            return true;\n        }\n        $i++;\n    }\n\
    \    return false;\n}", "  $cube = 0;\n  for ($i = 0; $i < $a; $i++) {\n    $cube\
    \ = $i * $i * $i;\n    if ($cube == $a) {\n      return true;\n    }\n  }\n  return\
    \ false;\n}\n\nvar_dump(iscube(64));\necho \"<br/>\";\necho \"<br/>\";\necho \"\
    <br/>\";\necho \"<br/>\";", "    if ($a >= 0) {\n        return (pow(round(pow($a,\
    \ 1/3)), 3) == $a);\n    } else {\n        return (pow(round(pow($a, 1/3)), 3)\
    \ == -$a);\n    }\n}", "\t$i = 0;\n\twhile (pow($i, 3) <= $a) {\n\t\tif (pow($i,\
    \ 3) == $a) {\n\t\t\treturn true;\n\t\t}\n\t\t$i++;\n\t}\n\treturn false;\n}\n",
  "  $b = sqrt($a);\n  $c = $b * $b * $b;\n  if ($c == $a) {\n    return true;\n \
    \ } else {\n    return false;\n  }\n}", "\treturn (($a == 0 || $a == 1 || $a ==\
    \ -1) || ($a != 0 && $a % pow($a,1/3) == 0));\n}\n\necho iscube(1) . \"\\n\";\n\
    echo iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\\
    n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";", "    if($a < 0)\
    \ {\n        $a = -$a;\n    }\n    $i = 0;\n    while($i*$i*$i < $a) {\n     \
    \   $i++;\n    }\n    if($i*$i*$i == $a) {\n        return true;\n    }\n    return\
    \ false;\n}\n$n = 64;\necho iscube($n);", "    return is_int(cbrt($a));\n}\n",
  "    if ($a >= 0) {\n        $a = sqrt($a);\n        $b = sqrt($a);\n        if\
    \ ($a == $b) {\n            echo \"true\";\n        } else {\n            echo\
    \ \"false\";\n        }\n    } else {\n        $a = abs($a);\n        $a = sqrt($a);\n\
    \        $b = sqrt($a);\n        if ($a == $b) {\n            echo \"true\";\n\
    \        } else {\n            echo \"false\";\n        }\n    }\n}\niscube(1);",
  "  return (abs($a) == cbrt(abs($a)) * cbrt(abs($a)) * cbrt(abs($a)));\n}\n", " \
    \   if ($a == 0 || $a == 1) {\n        return true;\n    } elseif ($a < 0) {\n\
    \        return iscube(- $a);\n    } else {\n        $x = $a ** (1/3);\n     \
    \   return ((int)$x == $x);\n    }\n}\necho iscube(125) . \"\\n\";\necho iscube(122)\
    \ . \"\\n\";\necho iscube(180) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(64)\
    \ . \"\\n\";\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1)\
    \ . \"\\n\";", "    $cube = pow($a, 1/3);\n    $integ = (int)$cube;\n    if ($cube\
    \ == $integ) {\n        return true;\n    } else {\n        return false;\n  \
    \  }\n}\n$a = pow(-1, 1/3);\necho iscube($a);", "\t$c = ceil( pow($a, 1/3) );\n\
    \treturn $c * $c * $c == $a;\n}\necho iscube(180) ? \"true\\n\" : \"false\\n\"\
    ;", "    if($a === 0) {\n        return true;\n    }\n    if($a < 0) {\n     \
    \   $a = -$a;\n    }\n    $r = 1;\n    while($r * $r * $r < $a) {\n        $r\
    \ += 1;\n    }\n    return $r * $r * $r === $a;\n}\n$a = (int)fgets(STDIN);\n\
    echo iscube($a) ? \"true\" : \"false\";", "  // Write your code here...\n}\n",
  "    if ($a == 0) {\n        return true;\n    } else if ($a < 0) {\n        $n\
    \ = -1 * $a;\n        $res = pow($n, (1/3));\n        if ($res % 1 == 0) {\n \
    \           return true;\n        } else {\n            return false;\n      \
    \  }\n    } else {\n        $res = pow($a, (1/3));\n        if ($res % 1 == 0)\
    \ {\n            return true;\n        } else {\n            return false;\n \
    \       }\n    }\n}", "\tif ($a == 0) return true;\n\tif ($a < 0) $a = -$a;\n\t\
    $root = 1;\n\twhile ($root*$root*$root < $a) {\n\t\t$root++;\n\t}\n\tif ($root*$root*$root\
    \ == $a) return true;\n\treturn false;\n}\n\necho iscube(64) . \"\\n\";\necho\
    \ iscube(60) . \"\\n\";", "    if(abs($a) == 0) {\n        return true;\n    }\n\
    \    if(abs($a) > 0) {\n        $cube_num = 0;\n        while($cube_num * $cube_num\
    \ * $cube_num < abs($a)) {\n            $cube_num++;\n        }\n        if($cube_num\
    \ * $cube_num * $cube_num == abs($a)) {\n            return true;\n        } else\
    \ {\n            return false;\n        }\n    }\n}\n", "\t$i = 1;\n\t$result\
    \ = 0;\n\tdo {\n\t\t$result = $i * $i * $i;\n\t\tif ($result == $a) {\n\t\t\t\
    return true;\n\t\t}\n\t\t$i++;\n\t} while ($result < $a);\n\treturn false;\n}\n\
    \necho iscube(180);", "\t$b = 1;\n\twhile ($b*$b*$b < $a) {\n\t\t$b++;\n\t}\n\t\
    return $b*$b*$b == $a;\n}\necho iscube(1).\"\\n\";\necho iscube(2).\"\\n\";\n\
    echo iscube(-1).\"\\n\";\necho iscube(64).\"\\n\";\necho iscube(0).\"\\n\";\n\
    echo iscube(180).\"\\n\";", "    if ($a == 0) {\n        return true;\n    } elseif\
    \ ($a % 2 == 0) {\n        $a = abs($a);\n        $x = pow($a, 1/3);\n       \
    \ if ($x % 1 == 0) {\n            return true;\n        } else {\n           \
    \ return false;\n        }\n    } else {\n        return false;\n    }\n}\n\n\
    echo iscube(1);\necho iscube(2);\necho iscube(-1);\necho iscube(64);\necho iscube(0);\n\
    echo iscube(180);", "    if ($a == 0) {\n        return true;\n    }\n    if ($a\
    \ < 0) {\n        $a = -$a;\n    }\n    $b = log($a, 3);\n    return $b == round($b);\n\
    }\necho iscube(1);\necho iscube(2);\necho iscube(-1);\necho iscube(64);\necho\
    \ iscube(0);\necho iscube(180);", "    $i = 1;\n    $result = 0;\n    while ($result\
    \ <= $a) {\n        $result = $i * $i * $i;\n        if ($result == $a) {\n  \
    \          return true;\n        }\n        $i++;\n    }\n    return false;\n}",
  "\t// we just need to check if the cube root of $a is an integer number\n\treturn\
    \ is_int(pow($a, 1/3));\n}", "    return $a == pow(intval(pow($a, 1 / 3) + 0.1),\
    \ 3);\n}\n\necho iscube(180);", "\t$counter = 0;\n\tfor ($i = 1; $i <= $a; $i++)\
    \ {\n\t\t$counter += $i;\n\t\tif ($counter == $a) {\n\t\t\treturn true;\n\t\t\
    }\n\t}\n\treturn false;\n}\n\necho iscube(1) . PHP_EOL;\necho iscube(2) . PHP_EOL;\n\
    echo iscube(-1) . PHP_EOL;\necho iscube(64) . PHP_EOL;\necho iscube(0) . PHP_EOL;\n\
    echo iscube(180) . PHP_EOL;", "\treturn is_numeric(pow($a, 1/3));\n}\nprint(iscube(1)\
    \ . \"\\n\");\nprint(iscube(2) . \"\\n\");\nprint(iscube(-1) . \"\\n\");\nprint(iscube(64)\
    \ . \"\\n\");\nprint(iscube(0) . \"\\n\");\nprint(iscube(180) . \"\\n\");", " \
    \   if ($a<0) {\n        $a = -$a;\n    }\n    if ($a == 0) {\n        return\
    \ true;\n    }\n    $i = 1;\n    while ($i*$i*$i <= $a) {\n        if ($i*$i*$i\
    \ == $a) {\n            return true;\n        }\n        $i++;\n    }\n    return\
    \ false;\n}\n", "    return $a == round(pow($a, 1/3));\n}\n", "    $cube = cbrt($a);\n\
    \    if (is_int($cube)) {\n        return true;\n    } else {\n        return\
    \ false;\n    }\n}\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho\
    \ iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\"\
    ;\necho iscube(180) . \"\\n\";", "  if ($a === 0 || $a === 1) {\n    return true;\n\
    \  }\n  if ($a < 0) {\n    $a = abs($a);\n  }\n  $start = 0;\n  $end = $a;\n \
    \ while ($start <= $end) {\n    $mid = ($start + $end) / 2;\n    $square = $mid\
    \ * $mid * $mid;\n    if ($square === $a) {\n      return true;\n    } else if\
    \ ($square < $a) {\n      $start = $mid + 1;\n    } else {\n      $end = $mid\
    \ - 1;\n    }\n  }\n  return false;\n}\n", "\t$i = 1;\n\twhile ($i*$i*$i < $a)\
    \ {\n\t\t$i++;\n\t}\n\treturn $i*$i*$i == $a;\n}\necho iscube(1).'<br>';\necho\
    \ iscube(2).'<br>';\necho iscube(-1).'<br>';\necho iscube(64).'<br>';\necho iscube(0).'<br>';\n\
    echo iscube(180).'<br>';", "\tif($a == 0) {\n\t\treturn true;\n\t}\n\tif($a >\
    \ 0) {\n\t\t$b = sqrt($a);\n\t\tif($b == round($b)) {\n\t\t\treturn true;\n\t\t\
    }\n\t}\n\tif($a < 0) {\n\t\t$b = sqrt(abs($a));\n\t\tif($b == round($b)) {\n\t\
    \t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}", "\treturn $a == pow(ceil(pow($a,\
    \ 1/3)), 3);\n}\n\necho iscube(1).\"\\n\";\necho iscube(2).\"\\n\";\necho iscube(-1).\"\
    \\n\";\necho iscube(64).\"\\n\";\necho iscube(0).\"\\n\";\necho iscube(180).\"\
    \\n\";\n", "    return is_int(pow($a, 1/3));\n}\n", "\t// calculate the cube root\
    \ of $a and store it in the variable $b\n\t$b = \n\t// multiply $b by itself and\
    \ multiply by $b\n\t$c = \n\t// if $c is the same as $a then return true\n\tif\
    \ ($c == $a) {\n\t\treturn true;\n\t}\n\t// otherwise, return false\n\telse {\n\
    \t\treturn false;\n\t}\n}\n\necho iscube(1) . PHP_EOL;\necho iscube(2) . PHP_EOL;\n\
    echo iscube(-1) . PHP_EOL;\necho iscube(64) . PHP_EOL;\necho iscube(0) . PHP_EOL;\n\
    echo iscube(180) . PHP_EOL;", "  return is_int(cbrt($a));\n}", "    if ($a ==\
    \ 0) return true;\n    if ($a < 0) return iscube(-1 * $a);\n    return is_int(pow($a,\
    \ 1/3));\n}\n", "    $root = pow($a, 1/3);\n    if (is_int($root)) {\n       \
    \ return true;\n    } else {\n        return false;\n    }\n}\necho iscube(1);\n\
    echo iscube(2);\necho iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);",
  "    if ($a < 0) {\n        $a = $a * -1;\n    }\n\n    for ($i = 0; $i < $a; $i++)\
    \ {\n        if ($i ** 3 == $a) {\n            return true;\n        }\n    }\n\
    \    return false;\n}\n", "    if (pow(ceil(pow($a, 1 / 3)), 3) == $a) {\n   \
    \     return true;\n    } else {\n        return false;\n    }\n}\necho iscube(3);\n\
    echo \"\\n\";\necho iscube(8);\necho \"\\n\";\necho iscube(27);\necho \"\\n\"\
    ;\necho iscube(64);\necho \"\\n\";", "    return (pow((int)sqrt($a), 3) == $a);\n\
    }\necho iscube(1) ? \"true\" : \"false\";\necho \"\\n\";\necho iscube(2) ? \"\
    true\" : \"false\";\necho \"\\n\";\necho iscube(-1) ? \"true\" : \"false\";\n\
    echo \"\\n\";\necho iscube(64) ? \"true\" : \"false\";\necho \"\\n\";\necho iscube(0)\
    \ ? \"true\" : \"false\";\necho \"\\n\";\necho iscube(180) ? \"true\" : \"false\"\
    ;\necho \"\\n\";", "\tif (pow($a, 2) % 2 == 0) {\n\t\treturn true;\n\t} else {\n\
    \t\treturn false;\n\t}\n}\nvar_dump(iscube(180));\n", "    if ($a <= 0) {\n  \
    \      return true;\n    }\n    $i = 1;\n    while($i < $a) {\n        $i *= 2;\n\
    \    }\n    return $i === $a;\n}\n\n$a = array(1, 2, -1, 64, 0, 180);\nforeach\
    \ ($a as $v) {\n    var_dump(iscube($v));\n}", "\t$root = round(pow($a, 1/3));\n\
    \treturn $root * $root * $root == $a;\n}\n", "\t$cube = false;\n\tif ($a == 0)\
    \ {\n\t\t$cube = true;\n\t} elseif ($a > 0) {\n\t\t$root = round(pow($a, 1/3));\n\
    \t\tif (pow($root, 3) == $a) {\n\t\t\t$cube = true;\n\t\t}\n\t} else {\n\t\t$root\
    \ = round(pow(abs($a), 1/3));\n\t\tif (pow($root, 3) == abs($a)) {\n\t\t\t$cube\
    \ = true;\n\t\t}\n\t}\n\treturn $cube;\n}\n\n$a = 0;\n\necho iscube($a);", " \
    \   // Write your code here...\n    if(pow($a,1/3)-round(pow($a,1/3)) == 0) {\n\
    \        return true;\n    }\n    else {\n        return false;\n    }\n}\n",
  "    return $a == 1 || ($a < 0 && ($a * -1) == pow(round(pow($a * -1, 1/3)), 3));\n\
    }\n\nfor ($i=0; $i<=64; $i++) {\n    $res = iscube($i);\n    echo \"<br>$i - $res\"\
    ;\n}", "\tif ($a == 0) return true;\n\t$b = abs($a);\n\t$t = 0;\n\tfor($i = 1;\
    \ $i < $b; $i++) {\n\t\t$t = $i * $i * $i;\n\t\tif ($t == $b) {\n\t\t\treturn\
    \ true;\n\t\t}\n\t}\n\treturn false;\n}\n\necho iscube(1);\necho iscube(0);\n\
    echo iscube(64);\necho iscube(180);", "  // Your code here\n  if($a == 0){\n \
    \   return true;\n  }\n  if($a < 0){\n    $a = -$a;\n  }\n  $r = 1;\n  while($r\
    \ < $a){\n    $r = $r * 3;\n  }\n  if($r == $a){\n    return true;\n  }\n  return\
    \ false;\n}\n", "  $root = (round(abs($a) ** (1/3)));\n  if ($root ** 3 == $a)\
    \ {\n    return true;\n  } else {\n    return false;\n  }\n}\n\necho \"The number\
    \ is \" . (iscube(1) ? \"a cube\" : \"not a cube\") . \".\\n\";\necho \"The number\
    \ is \" . (iscube(2) ? \"a cube\" : \"not a cube\") . \".\\n\";\necho \"The number\
    \ is \" . (iscube(-1) ? \"a cube\" : \"not a cube\") . \".\\n\";\necho \"The number\
    \ is \" . (iscube(64) ? \"a cube\" : \"not a cube\") . \".\\n\";\necho \"The number\
    \ is \" . (iscube(0) ? \"a cube\" : \"not a cube\") . \".\\n\";\necho \"The number\
    \ is \" . (iscube(180) ? \"a cube\" : \"not a cube\") . \".\\n\";\n", "\tif($a\
    \ == 1 || $a == 0 || $a == -1) {\n\t\treturn true;\n\t}\n\t$i = 1;\n\twhile($i\
    \ * $i * $i < $a) {\n\t\t$i++;\n\t}\n\tif($i * $i * $i == $a) {\n\t\treturn true;\n\
    \t}\n\treturn false;\n}\n", "\tif ($a == 0) {\n\t\treturn true;\n\t} else {\n\t\
    \tfor ($i = 1; $i <= abs($a); $i++) {\n\t\t\tif ($i*$i*$i == $a) {\n\t\t\t\treturn\
    \ true;\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n}\n$a = 1;\necho iscube($a);",
  "    if ($a < 0) {\n        $a = -$a;\n    }\n    $cnt = 0;\n    while ($a > 0)\
    \ {\n        $a -= ++$cnt * 2 - 1;\n    }\n    return $a == 0;\n}\n\nforeach (range(1,\
    \ 10) as $n) {\n    echo $n.\"\\t\".iscube($n).\"\\n\";\n}", "    $a = abs($a);\n\
    \    $b = round(cbrt($a));\n    return $a == $b * $b * $b;\n}", "\t$x = $a**(1/3);\n\
    \tif (floor($x) == $x) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t\
    }\n}", "\tif ($a < 0) {\n\t\t$a = -$a;\n\t}\n\tif (intval(pow($a, 1/3)) == pow($a,\
    \ 1/3)) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho iscube(1).PHP_EOL;\n\
    echo iscube(2).PHP_EOL;\necho iscube(-1).PHP_EOL;\necho iscube(64).PHP_EOL;\n\
    echo iscube(0).PHP_EOL;\necho iscube(180).PHP_EOL;", "    $square = pow($a, 2);\n\
    \    $cube = pow($a, 3);\n    if ($a == 0) {\n        return true;\n    }\n  \
    \  if ($a > 0) {\n        if ($cube % $square == 0) {\n            return true;\n\
    \        }\n    }\n    if ($a < 0) {\n        if ($cube % $square == 0) {\n  \
    \          return true;\n        }\n    }\n    return false;\n}", "\tif ($a<0)\
    \ {\n\t\t$a = $a * -1;\n\t}\n\tif (pow(round(pow($a, 1/3)), 3) == $a) {\n\t\t\
    return true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}", "\t$b = 1;\n\twhile ($b\
    \ * $b * $b < $a) {\n\t\t$b++;\n\t}\n\tif ($b * $b * $b == $a) {\n\t\treturn true;\n\
    \t} else {\n\t\treturn false;\n\t}\n}\n\n$testcases = array(\n\t1 => true,\n\t\
    2 => false,\n\t-1 => true,\n\t64 => true,\n\t0 => true,\n\t180 => false,\n);\n\
    \n$passed = 0;\n$failed = 0;\n\nforeach ($testcases as $key => $value) {\n\tif\
    \ (iscube($key) == $value) {\n\t\t$passed++;\n\t} else {\n\t\t$failed++;\n\t}\n\
    }\n\necho \"Passed: \" . $passed . \"; Failed: \" . $failed . \"\\n\";\n", " \
    \   if ($a == 0) {\n        return true;\n    }\n    elseif (is_int($a) && $a\
    \ > 0) {\n        $b = sqrt($a);\n        $b = (int)$b;\n        $cube = $b *\
    \ $b * $b;\n        if ($cube == $a) {\n            return true;\n        }\n\
    \        else {\n            return false;\n        }\n    }\n    elseif (is_int($a)\
    \ && $a < 0) {\n        $a = abs($a);\n        $b = sqrt($a);\n        $b = (int)$b;\n\
    \        $cube = $b * $b * $b;\n        if ($cube == $a) {\n            return\
    \ true;\n        }\n        else {\n            return false;\n        }\n   \
    \ }\n    else {\n        return false;\n    }\n}\necho iscube(64);", "    if (pow(round(pow($a,\
    \ 1 / 3)), 3) == $a) {\n        return true;\n    } else {\n        return false;\n\
    \    }\n}\n", "    if($a == 0) {\n        return true;\n    }\n    elseif($a <\
    \ 0) {\n        $a = -$a;\n    }\n    for($i = 1; $i * $i * $i <= $a; $i++) {\n\
    \        if($i * $i * $i == $a) {\n            return true;\n        }\n    }\n\
    \    return false;\n}\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\n\
    echo iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\\
    n\";\necho iscube(180) . \"\\n\";", "    // your code here\n    return is_int(pow($a,\
    \ 1/3));\n}\n", "\t$b = pow($a, 1/3);\n\tif ($b == round($b)) {\n\t\treturn true;\n\
    \t} else {\n\t\treturn false;\n\t}\n}\n\necho iscube(1);\necho \"\\n\";\necho\
    \ iscube(2);\necho \"\\n\";\necho iscube(-1);\necho \"\\n\";\necho iscube(64);\n\
    echo \"\\n\";\necho iscube(0);\necho \"\\n\";\necho iscube(180);\necho \"\\n\"\
    ;", "\t//your code here\n}", "\t// your code here\n}\n", "\tif($a == 0) {\n\t\t\
    return true;\n\t}\n\t$a = abs($a);\n\t$x = 1;\n\twhile(($x*$x*$x)<=$a) {\n\t\t\
    if(($x*$x*$x) == $a) {\n\t\t\treturn true;\n\t\t}\n\t\t$x++;\n\t}\n\treturn false;\n\
    }", "\treturn (pow($a,1/3)%1==0);\n}\necho \"iscube(1)=\".(iscube(1)?\"true\"\
    :\"false\").\"\\n\";\necho \"iscube(2)=\".(iscube(2)?\"true\":\"false\").\"\\\
    n\";\necho \"iscube(-1)=\".(iscube(-1)?\"true\":\"false\").\"\\n\";\necho \"iscube(64)=\"\
    .(iscube(64)?\"true\":\"false\").\"\\n\";\necho \"iscube(0)=\".(iscube(0)?\"true\"\
    :\"false\").\"\\n\";\necho \"iscube(180)=\".(iscube(180)?\"true\":\"false\").\"\
    \\n\";", "    return is_numeric($a) && ($a == pow((int)pow($a, 1/3), 3));\n}\n",
  "\t$i = 0;\n\t$b = 0;\n\twhile ($b <= $a) {\n\t\t$b = $i * $i * $i;\n\t\tif ($b\
    \ == $a) {\n\t\t\treturn true;\n\t\t}\n\t\t$i += 1;\n\t}\n\treturn false;\n}\n",
  "\t// write your code here\n}\n", "\t// Use the formula: a = n^3\n\t// Since we\
    \ are given a, we can solve for n\n\t// n = (a^1/3)\n\t// Convert to integer by\
    \ rounding down\n\t$n = intval(pow($a, 1 / 3));\n\t\n\t// If a is the cube of\
    \ n, the cube of n will be equal to a\n\tif (pow($n, 3) == $a) {\n\t\treturn true;\n\
    \t} else {\n\t\treturn false;\n\t}\n}", "    $a = (int) $a;\n    if ($a < 0) {\n\
    \        $a = abs($a);\n    }\n    for ($i = 1; $i < $a; $i++) {\n        if ($i*$i*$i\
    \ === $a) {\n            return true;\n        }\n    }\n    return false;\n}\n\
    echo iscube(180);", "    return ($a < 0) ? (abs($a) == pow(-1, 1/3)) : pow($a,\
    \ 1/3) == (int)pow($a, 1/3);\n}", "\t$a = (int)$a;\n\tif ($a < 0) {\n\t\t$a =\
    \ abs($a);\n\t}\n\tif ($a == 0) {\n\t\treturn true;\n\t}\n\t$check = ceil(pow($a,\
    \ 1/3));\n\tif ($check * $check * $check == $a) {\n\t\treturn true;\n\t}\n\treturn\
    \ false;\n}\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1)\
    \ . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180)\
    \ . \"\\n\";", "    return is_numeric($a) && !fmod($a,1) && is_int(cbrt($a));\n\
    }\necho iscube(1);\necho iscube(2);\necho iscube(-1);\necho iscube(64);\necho\
    \ iscube(0);\necho iscube(180);", "    $r = $a;\n    $r = abs($r);\n    if ($r\
    \ == 0) {\n        return true;\n    }\n    while ($r % 3 == 0) {\n        $r\
    \ = $r / 3;\n    }\n    if ($r == 1) {\n        return true;\n    }\n    return\
    \ false;\n}", "  if ($a == 0) return true;\n  $b = sqrt($a);\n  return ($b*$b*$b\
    \ == $a);\n}\necho iscube(1), \"<br/>\";\necho iscube(2), \"<br/>\";\necho iscube(-1),\
    \ \"<br/>\";\necho iscube(64), \"<br/>\";\necho iscube(0), \"<br/>\";\necho iscube(180),\
    \ \"<br/>\";", "    if($a < 0) {\n        $a = -1 * $a;\n    }\n    if($a == 0)\
    \ {\n        return true;\n    } else {\n        $x = 1;\n        while($x * $x\
    \ * $x < $a) {\n            $x = $x + 1;\n        }\n        if($x * $x * $x ==\
    \ $a) {\n            return true;\n        } else {\n            return false;\n\
    \        }\n    }\n}", "    $cube = ceil(pow($a, 1/3));\n    return $cube * $cube\
    \ * $cube == $a;\n}\n", "    // Your code here.\n    return pow($a, 1/3) == floor(pow($a,\
    \ 1/3));\n}\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1)\
    \ . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180)\
    \ . \"\\n\";", "\treturn false;\n}\necho assertTrue(iscube(1));\necho assertTrue(iscube(-1));\n\
    echo assertTrue(iscube(64));\necho assertTrue(iscube(0));\necho assertFalse(iscube(2));\n\
    echo assertFalse(iscube(180));\necho assertFalse(iscube(9));", "    return cbrt($a)\
    \ == floor(cbrt($a));\n}\nprint_r(iscube(1).\"\\n\");\nprint_r(iscube(2).\"\\\
    n\");\nprint_r(iscube(-1).\"\\n\");\nprint_r(iscube(64).\"\\n\");\nprint_r(iscube(0).\"\
    \\n\");\nprint_r(iscube(180).\"\\n\");", "    if ($a >= 0) {\n        $cube =\
    \ round(pow($a, 1 / 3));\n        if (pow($cube, 3) == $a) {\n            return\
    \ true;\n        } else {\n            return false;\n        }\n    } else {\n\
    \        return true;\n    }\n}\n\necho iscube(1);", "  return ($a>=0 && pow($a,\
    \ 1/3) == round(pow($a, 1/3)));\n}", "\t$i = 1;\n\twhile ($i * $i * $i < $a) {\n\
    \t\t$i++;\n\t}\n\treturn $i * $i * $i == $a;\n}\n\necho iscube(1);\necho \"\\\
    n\";\necho iscube(2);\necho \"\\n\";\necho iscube(-1);\necho \"\\n\";\necho iscube(64);\n\
    echo \"\\n\";\necho iscube(0);\necho \"\\n\";\necho iscube(180);\necho \"\\n\"\
    ;\n", "\tif ($a > 0) {\n\t\tfor ($i = 0; $i <= $a; $i++) {\n\t\t\tif ($i * $i\
    \ * $i == $a) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfor ($i\
    \ = 0; $i >= $a; $i--) {\n\t\t\tif ($i * $i * $i == $a) {\n\t\t\t\treturn true;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn false;\n}", "    if($a > 0){\n        $b = pow($a,\
    \ 1/3);\n        return is_int($b);\n    }\n    return true;\n}\n\nprint(iscube(180));\n",
  "    // your code goes here\n}", "  if ($a < 0) {\n    $a = -$a;\n  }\n  for ($i\
    \ = 0; $i <= $a; $i++) {\n    if ($i * $i * $i == $a) {\n      return true;\n\
    \    }\n  }\n  return false;\n}\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\
    \\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0)\
    \ . \"\\n\";\necho iscube(180) . \"\\n\";", "    $num = pow($a, 1/3);\n    if\
    \ (pow($num, 3) == $a) {\n        return true;\n    }\n    return false;\n}\n\
    print_r(iscube(1));\nprint_r(iscube(2));\nprint_r(iscube(-1));\nprint_r(iscube(64));\n\
    print_r(iscube(0));\nprint_r(iscube(180));", "\treturn pow($a,1/3) == round(pow($a,1/3));\n\
    }\necho iscube(1);", "\tif ($a == 0 || $a == 1) {\n\t\treturn true;\n\t} else\
    \ if ($a > 0) {\n\t\tfor ($i = 2; $i < $a; $i++) {\n\t\t\tif ($i * $i * $i ==\
    \ $a) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfor ($i = -2; $i\
    \ > $a; $i--) {\n\t\t\tif ($i * $i * $i == $a) {\n\t\t\t\treturn true;\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn false;\n}\n\necho iscube(1);", "    if ($a === 0) {\n\
    \        return true;\n    }\n    if ($a < 0) {\n        $a = abs($a);\n    }\n\
    \    $x = pow($a, 1/3);\n    if ($x == floor($x)) {\n        return true;\n  \
    \  }\n    return false;\n}\necho iscube(1) . \"<br>\";\necho iscube(2) . \"<br>\"\
    ;\necho iscube(-1) . \"<br>\";\necho iscube(64) . \"<br>\";\necho iscube(0) .\
    \ \"<br>\";\necho iscube(180) . \"<br>\";", "    // Write your code here\n   \
    \ // To print results to the standard output you can use print\n    // Example:\
    \ print \"Hello world!\";\n    if ($a == 0) {\n        return true;\n    }\n \
    \   if ($a < 0) {\n        $a = -1 * $a;\n    }\n    $i = 0;\n    while ($i *\
    \ $i * $i < $a) {\n        $i++;\n    }\n    if ($i * $i * $i == $a) {\n     \
    \   return true;\n    }\n    return false;\n}\n$line = readline();\nif(iscube($line)){\n\
    \    print \"true\";\n}else{\n    print \"false\";\n}", "    $check = sqrt($a);\n\
    \    $b = pow($check,3);\n    if ($a == $b) {\n        return true;\n    }\n \
    \   else {\n        return false;\n    }\n}\necho iscube(1);\necho \"<br>\";\n\
    echo iscube(2);\necho \"<br>\";\necho iscube(-1);\necho \"<br>\";\necho iscube(64);\n\
    echo \"<br>\";\necho iscube(0);\necho \"<br>\";\necho iscube(180);\necho \"<br>\"\
    ;", "\tif($a==0){\n\t\treturn true;\n\t}\n\tif($a<0){\n\t\t$a=-$a;\n\t}\n\t$k=cbrt($a);\n\
    \tif(floor($k)==$k){\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n}\n\
    echo iscube(0);", "\t$r = array_map(function($x) use ($a) {\n\t\treturn $x * $x\
    \ * $x;\n\t}, range(1, 1000));\n\treturn in_array($a, $r);\n}\n", "    if ($a\
    \ == 0) {\n        return true;\n    }\n    else if ($a < 0) {\n        $a = abs($a);\n\
    \    }\n    for ($i = 1; $i < $a; $i++) {\n        if ($i * $i * $i == $a) {\n\
    \            return true;\n        }\n    }\n    return false;\n}\n\necho iscube(1)\
    \ . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64)\
    \ . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";", "\tif ($a\
    \ < 0) $a = abs($a);\n\tif ($a == 0) return true;\n\tif ($a % 3 == 0) return true;\n\
    \treturn false;\n}\n", "\tif ($a <= 0) {\n\t\t$a = abs($a);\n\t}\n\t$num = 0;\n\
    \twhile ($num ** 3 < $a) {\n\t\t$num++;\n\t}\n\tif ($num ** 3 == $a) {\n\t\treturn\
    \ true;\n\t} else {\n\t\treturn false;\n\t}\n}\n", "\tif($a==0) {\n\t\treturn\
    \ true;\n\t}\n\tif($a<0) {\n\t\t$a = -$a;\n\t}\n\t$upper = ceil(pow($a, 1/3));\n\
    \tfor($i=1; $i<=$upper; $i++) {\n\t\tif($i*$i*$i == $a) {\n\t\t\treturn true;\n\
    \t\t}\n\t}\n\treturn false;\n}\n", "    if ($a <= 0) {\n        return true;\n\
    \    } elseif (pow(round(pow($a, 1/3)), 3) == $a) {\n        return true;\n  \
    \  } else {\n        return false;\n    }\n}", "    // $root is the cube root\
    \ of $a (if it exists)\n    $root = round(pow($a, 1/3));\n    // cube of $root\
    \ should equal $a\n    return pow($root, 3) == $a;\n}", "    return (pow($a, 1/3)\
    \ == round(pow($a, 1/3)));\n}\n\nprint iscube(64);", "\t$c = $a;\n\t$s = 0;\n\t\
    while($a > 0) {\n\t\t$s += $a % 10;\n\t\t$a = floor($a / 10);\n\t}\n\tif($s *\
    \ $s * $s == $c) {\n\t\treturn true;\n\t}\n\treturn false;\n}\n\n$result = iscube(1);\n\
    print($result);\necho \"<br>\";\n$result = iscube(2);\nprint($result);\necho \"\
    <br>\";\n$result = iscube(-1);\nprint($result);\necho \"<br>\";\n$result = iscube(64);\n\
    print($result);\necho \"<br>\";\n$result = iscube(0);\nprint($result);\necho \"\
    <br>\";\n$result = iscube(180);\nprint($result);", "  if ($a==0) return True;\n\
    \  return is_int(pow($a, 1/3));\n}\n\nforeach (range(0, 100) as $i) {\n  if (iscube($i))\
    \ {\n    echo \"$i is cube\\n\";\n  }\n}", "    if ($a >= 0) {\n        return\
    \ is_int(pow($a, 1 / 3));\n    } else {\n        return is_int(-pow(- $a, 1 /\
    \ 3));\n    }\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
