name: HumanEval_127_intersection
language: php
prompt: "<?php\n// You are given two intervals,\n// where each interval is a pair\
  \ of integers. For example, interval = (start, end) = (1, 2).\n// The given intervals\
  \ are closed which means that the interval (start, end)\n// includes both start\
  \ and end.\n// For each given interval, it is assumed that its start is less or\
  \ equal its end.\n// Your task is to determine whether the length of intersection\
  \ of these two \n// intervals is a prime number.\n// Example, the intersection of\
  \ the intervals (1, 3), (2, 4) is (2, 3)\n// which its length is 1, which not a\
  \ prime number.\n// If the length of the intersection is a prime number, return\
  \ \"YES\",\n// otherwise, return \"NO\".\n// If the two intervals don't intersect,\
  \ return \"NO\".\n// [input/output] samples:\n// >>> intersection(array(1, 2), array(2,\
  \ 3))\n// \"NO\"\n// >>> intersection(array(-1, 1), array(0, 4))\n// \"NO\"\n//\
  \ >>> intersection(array(-3, -1), array(-5, 5))\n// \"YES\"\nfunction intersection($interval1,\
  \ $interval2) {\n"
tests: "function candidate(...$args) {\n    return intersection(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(array(1, 2), array(2, 3)) !== \"NO\"\
  ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, 1), array(0,\
  \ 4)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-3,\
  \ -1), array(-5, 5)) !== \"YES\") { throw new Exception(\"Test failed!\"); }\n \
  \   if (candidate(array(-2, 2), array(-4, 0)) !== \"YES\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(-11, 2), array(-1, -1)) !== \"NO\")\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2), array(3,\
  \ 5)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 2), array(1, 2)) !== \"NO\") { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(-2, -2), array(-3, -2)) !== \"NO\") { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["  // Write your code here\n  // Good luck!\n  $intersection = array_intersect($interval1,\
    \ $interval2);\n  $x = array_search(max($intersection), $intersection);\n  $y\
    \ = array_search(min($intersection), $intersection);\n  $dif = $x - $y;\n  if($dif\
    \ > 1){\n    for($i = 2; $i < sqrt($dif); $i++){\n      if($dif % $i == 0){\n\
    \        return \"NO\";\n      }\n    }\n    return \"YES\";\n  }else if($dif\
    \ == 1){\n    return \"NO\";\n  }else{\n    return \"NO\";\n  }\n}", "    if (max($interval1)\
    \ < min($interval2) || max($interval2) < min($interval1)) {\n        return \"\
    NO\";\n    }\n    $intersection = new Interval(max(min($interval1), min($interval2)),\
    \ min(max($interval1), max($interval2)));\n    if ($intersection->length == 0)\
    \ {\n        return \"NO\";\n    }\n    return $intersection->isPrime() ? \"YES\"\
    \ : \"NO\";\n}\n\nclass Interval {\n    public $length;\n    public function __construct($a,\
    \ $b) {\n        $this->length = $b - $a;\n    }\n    public function isPrime()\
    \ {\n        for ($i = 2; $i < $this->length; $i++) {\n            if ($this->length\
    \ % $i == 0) {\n                return false;\n            }\n        }\n    \
    \    return true;\n    }\n}\n", "  $intersections = [];\n  for ($i = 0; $i < count($interval1);\
    \ $i++) {\n    for ($j = 0; $j < count($interval2); $j++) {\n      if (($interval1[$i]\
    \ >= $interval2[$j] && $interval1[$i] <= $interval2[$j + 1])\n        || ($interval1[$i\
    \ + 1] >= $interval2[$j] && $interval1[$i + 1] <= $interval2[$j + 1])) {\n   \
    \     array_push($intersections, $interval1[$i]);\n        array_push($intersections,\
    \ $interval1[$i + 1]);\n      }\n    }\n  }\n  if (count($intersections) == 0)\
    \ {\n    return \"NO\";\n  }\n  sort($intersections);\n  $len = $intersections[count($intersections)\
    \ - 1] - $intersections[0];\n  $prime = true;\n  for ($i = 2; $i < $len; $i++)\
    \ {\n    if ($len % $i == 0) {\n      $prime = false;\n      break;\n    }\n \
    \ }\n  if ($prime) {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n\
    }\n\n$interval1 = array(1, 2);\n$interval2 = array(2, 3);\n$interval3 = array(-1,\
    \ 1);\n$interval4 = array(0, 4);\n$interval5 = array(-3, -1);\n$interval6 = array(-5,\
    \ 5);\necho intersection($interval1, $interval2) . \"\\n\";\necho intersection($interval3,\
    \ $interval4) . \"\\n\";\necho intersection($interval5, $interval6) . \"\\n\";",
  "  $intersection = array_intersect(range($interval1[0], $interval1[1]), range($interval2[0],\
    \ $interval2[1]));\n  $length = count($intersection);\n  if ($length === 0) {\n\
    \    return \"NO\";\n  }\n  return checkPrime($length) ? \"YES\" : \"NO\";\n}\n",
  "  $start = $interval1[0] > $interval2[0] ? $interval1[0] : $interval2[0];\n  $end\
    \ = $interval1[1] < $interval2[1] ? $interval1[1] : $interval2[1];\n  $length\
    \ = abs($end - $start);\n  $primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  if ($length < 2)\
    \ return \"NO\";\n  foreach ($primes as $prime) {\n    if ($prime == $length)\
    \ return \"YES\";\n  }\n  return \"NO\";\n}", "  $num1 = max($interval1[0], $interval2[0]);\n\
    \  $num2 = min($interval1[1], $interval2[1]);\n  return $num1 <= $num2 ? isPrime($num2\
    \ - $num1 + 1) ? \"YES\" : \"NO\" : \"NO\";\n}", "    $intersectionLength = 0;\n\
    \    $intersectionLength = min($interval1[1], $interval2[1]) - max($interval1[0],\
    \ $interval2[0]);\n    if ($intersectionLength < 0) {\n        return \"NO\";\n\
    \    }\n    if ($intersectionLength <= 2) {\n        return \"NO\";\n    }\n \
    \   for ($i = 2; $i < $intersectionLength; $i++) {\n        if ($intersectionLength\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}\n\n$interval1 = array(-1, 4);\n$interval2 = array(2, 3);\nprint_r(intersection($interval1,\
    \ $interval2));", "  $intervalsIntersection = array_filter($interval1, function($n)\
    \ use ($interval2) {\n    return in_array($n, $interval2);\n  });\n  if (!empty($intervalsIntersection))\
    \ {\n    $intervalsIntersectionLength = count($intervalsIntersection);\n    if\
    \ ($intervalsIntersectionLength === 1) {\n      return 'YES';\n    }\n    for\
    \ ($i = 2; $i < $intervalsIntersectionLength; $i++) {\n      if ($intervalsIntersectionLength\
    \ % $i === 0) {\n        return 'NO';\n      }\n    }\n    return 'YES';\n  }\n\
    \  return 'NO';\n}\n", "  $interval1Start = $interval1[0];\n  $interval1End =\
    \ $interval1[1];\n  $interval2Start = $interval2[0];\n  $interval2End = $interval2[1];\n\
    \  if (($interval1Start >= $interval2Start && $interval1Start <= $interval2End)\n\
    \  || ($interval1End >= $interval2Start && $interval1End <= $interval2End)) {\n\
    \    $intersection = array();\n    $intersection[0] = max($interval1Start, $interval2Start);\n\
    \    $intersection[1] = min($interval1End, $interval2End);\n    $length = $intersection[1]\
    \ - $intersection[0] + 1;\n    if ($length > 1) {\n      if ($length % 2 === 0)\
    \ {\n        return \"NO\";\n      }\n      for ($i = 2; $i < sqrt($length); $i++)\
    \ {\n        if ($length % $i === 0) {\n          return \"NO\";\n        }\n\
    \      }\n    }\n    return \"YES\";\n  }\n  return \"NO\";\n}\n", "  \n}\n\n\
    echo intersection(array(1, 2), array(2, 3));\necho intersection(array(-1, 1),\
    \ array(0, 4));\necho intersection(array(-3, -1), array(-5, 5));\n", "    $intersection1\
    \ = ($interval1[0] < $interval2[0]) ? \n        [$interval2[0], $interval1[1]]\
    \ : [$interval1[0], $interval2[1]];\n    $intersection2 = ($interval1[0] < $interval2[0])\
    \ ? \n        [$interval1[0], $interval2[1]] : [$interval2[0], $interval1[1]];\n\
    \    $intersection = ($intersection1[1] - $intersection1[0] > 0) ? \n        $intersection1\
    \ : $intersection2;\n    return (isPrime($intersection[1] - $intersection[0]))\
    \ ? \n        \"YES\" : \"NO\";\n}", "  $arr = [max($interval1[0], $interval2[0]),\
    \ min($interval1[1], $interval2[1])];\n  if ($arr[0] > $arr[1]) {\n    return\
    \ \"NO\";\n  }\n  $dif = $arr[1] - $arr[0];\n  if ($dif <= 1) {\n    return \"\
    NO\";\n  }\n  for ($i = 2; $i <= sqrt($dif); $i++) {\n    if ($dif % $i == 0)\
    \ {\n      return \"NO\";\n    }\n  }\n  return \"YES\";\n}", "  // your code\
    \ here\n}", "    if ($interval1[0] > $interval2[1] || $interval2[0] > $interval1[1])\
    \ {\n        return \"NO\";\n    }\n    $start = max($interval1[0], $interval2[0]);\n\
    \    $end = min($interval1[1], $interval2[1]);\n    $length = $end - $start +\
    \ 1;\n    return (isPrime($length)) ? \"YES\" : \"NO\";\n}", "    $from = max($interval1[0],\
    \ $interval2[0]);\n    $to = min($interval1[1], $interval2[1]);\n    if ($from\
    \ > $to) {\n        return \"NO\";\n    }\n    return (isPrime($to - $from + 1))\
    \ ? \"YES\" : \"NO\";\n}", "\t$intersection = array_intersect($interval1, $interval2);\n\
    \tif (count($intersection) < 2) {\n\t\treturn \"NO\";\n\t}\n\t$p = array_pop($intersection);\n\
    \t$q = array_pop($intersection);\n\t$n = abs($p - $q) + 1;\n\t$isPrime = true;\n\
    \tfor ($i = 2; $i < $n; $i++) {\n\t\tif ($n % $i == 0) {\n\t\t\t$isPrime = false;\n\
    \t\t\tbreak;\n\t\t}\n\t}\n\treturn $isPrime ? \"YES\" : \"NO\";\n}\necho intersection(array(1,\
    \ 2), array(2, 3)) . \"\\n\";\necho intersection(array(-1, 1), array(0, 4)) .\
    \ \"\\n\";\necho intersection(array(-3, -1), array(-5, 5)) . \"\\n\";\necho intersection(array(1,\
    \ 5), array(5, 9)) . \"\\n\";\necho intersection(array(1, 5), array(5, 11)) .\
    \ \"\\n\";\necho intersection(array(1, 5), array(5, 7)) . \"\\n\";\necho intersection(array(1,\
    \ 5), array(5, 5)) . \"\\n\";\necho intersection(array(1, 5), array(6, 7)) . \"\
    \\n\";\necho intersection(array(1, 5), array(6, 6)) . \"\\n\";\necho intersection(array(1,\
    \ 5), array(6, 6)) . \"\\n\";\necho intersection(array(1, 5), array(6, 8)) . \"\
    \\n\";\necho intersection(array(1, 5), array(6, 9)) . \"\\n\";\necho intersection(array(1,\
    \ 5), array(6, 10)) . \"\\n\";\necho intersection(array(1, 5), array(6, 11)) .\
    \ \"\\n\";\necho intersection(array(1, 5), array(6, 15)) . \"\\n\";\necho intersection(array(1,\
    \ 10), array(6, 15)) . \"\\n\";\necho intersection(array(1, 15), array(6, 15))\
    \ . \"\\n\";\necho intersection(array(1, 16), array", "  $start = max($interval1[0],\
    \ $interval2[0]);\n  $end = min($interval1[1], $interval2[1]);\n  if ($start >\
    \ $end) {\n    return \"NO\";\n  }\n  $length = $end - $start + 1;\n  if ($length\
    \ < 2) {\n    return \"NO\";\n  }\n  $primes = array(2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97);\n  return\
    \ in_array($length, $primes) ? \"YES\" : \"NO\";\n}", "    // your code here\n\
    }\n", "  //your code here.\n}", "    $start = max($interval1[0], $interval2[0]);\n\
    \    $end = min($interval1[1], $interval2[1]);\n    if ($start > $end) {\n   \
    \     return \"NO\";\n    }\n    $diff = $end - $start + 1;\n    if (isPrime($diff))\
    \ {\n        return \"YES\";\n    }\n    return \"NO\";\n}", "  $min = max($interval1[0],\
    \ $interval2[0]);\n  $max = min($interval1[1], $interval2[1]);\n  if ($min <=\
    \ $max) {\n    $length = $max - $min + 1;\n    if ($length > 2) {\n      for ($i\
    \ = 2; $i < sqrt($length); $i++) {\n        if ($length % $i == 0) {\n       \
    \   return \"NO\";\n        }\n      }\n    }\n    return \"YES\";\n  }\n  return\
    \ \"NO\";\n}\n\n$sol = intersection(array(-3, -1), array(-5, 5));\necho $sol;",
  "    $length = min($interval1[1], $interval2[1]) - max($interval1[0], $interval2[0]);\n\
    \    return $length <= 0 ? \"NO\" : (isPrime($length) ? \"YES\" : \"NO\");\n}\n",
  "    $a_intersect_b = max($interval1[0], $interval2[0]);\n    $b_intersect_b = min($interval1[1],\
    \ $interval2[1]);\n    if ($a_intersect_b > $b_intersect_b) {\n        return\
    \ \"NO\";\n    }\n    $prime_numbers = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n    if (in_array($b_intersect_b\
    \ - $a_intersect_b + 1, $prime_numbers)) {\n        return \"YES\";\n    }\n \
    \   return \"NO\";\n}", "  $intersect = [\n    \"start\" => max($interval1[\"\
    start\"], $interval2[\"start\"]),\n    \"end\" => min($interval1[\"end\"], $interval2[\"\
    end\"])\n  ];\n  $length = $intersect[\"end\"] - $intersect[\"start\"];\n  if\
    \ ($length <= 0) {\n    return \"NO\";\n  }\n  $isPrime = true;\n  for ($i = 2;\
    \ $i < $length; $i++) {\n    if ($length % $i == 0) {\n      $isPrime = false;\n\
    \      break;\n    }\n  }\n  return $isPrime ? \"YES\" : \"NO\";\n}\n\necho intersection(array(1,\
    \ 2), array(2, 3));\necho \"<br>\";\necho intersection(array(-1, 1), array(0,\
    \ 4));\necho \"<br>\";\necho intersection(array(-3, -1), array(-5, 5));\necho\
    \ \"<br>\";\necho intersection(array(1, 3), array(2, 4));\necho \"<br>\";\necho\
    \ intersection(array(0, 0), array(0, 0));\necho \"<br>\";\necho intersection(array(0,\
    \ 100), array(0, 1000));\necho \"<br>\";\necho intersection(array(0, 100), array(0,\
    \ 10000));\necho \"<br>\";\necho intersection(array(0, 100), array(0, 100000));\n\
    echo \"<br>\";\necho intersection(array(0, 100), array(0, 1000000));\necho \"\
    <br>\";\necho intersection(array(0, 100), array(0, 10000000));\necho \"<br>\"\
    ;\necho intersection(array(0, 100), array(0, 100000000));\necho \"<br>\";\necho\
    \ intersection(array(0, 100), array(0, 1000000000));\necho \"<br>\";\necho intersection(array(0,\
    \ 100), array(0, 10000000000));\necho \"<br>\";\necho intersection(array(0, 100),\
    \ array(0, 100000000000));\necho \"<br>\";\necho intersection(array(0, 100), array(0,\
    \ 1000000000000));\necho \"<br>\";\necho intersection(array(0", "    $newInterval\
    \ = array(max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1]));\n\
    \    if ($newInterval[0] > $newInterval[1]) return \"NO\";\n    $diff = $newInterval[1]\
    \ - $newInterval[0];\n    if ($diff == 1) return \"NO\";\n    return isPrime($diff)\
    \ ? \"YES\" : \"NO\";\n}\n", "    $result = \"NO\";\n    $arr = array();\n   \
    \ if($interval1[0] >= $interval2[0] && $interval1[0] <= $interval2[1]) {\n   \
    \     $arr[] = $interval1[0];\n    } else if($interval2[0] >= $interval1[0] &&\
    \ $interval2[0] <= $interval1[1]) {\n        $arr[] = $interval2[0];\n    }\n\
    \    if($interval1[1] >= $interval2[0] && $interval1[1] <= $interval2[1]) {\n\
    \        $arr[] = $interval1[1];\n    } else if($interval2[1] >= $interval1[0]\
    \ && $interval2[1] <= $interval1[1]) {\n        $arr[] = $interval2[1];\n    }\n\
    \    if(count($arr) == 2) {\n        $len = $arr[1] - $arr[0];\n        if($len\
    \ > 1) {\n            for($i = 2; $i < $len; $i++) {\n                if($len\
    \ % $i == 0) {\n                    break;\n                }\n            }\n\
    \            if($i == $len) {\n                $result = \"YES\";\n          \
    \  }\n        }\n    }\n    return $result;\n}\n", "  $start1 = $interval1[0];\n\
    \  $end1 = $interval1[1];\n  $start2 = $interval2[0];\n  $end2 = $interval2[1];\n\
    \  if ($start1 > $end1 || $start2 > $end2) {\n    return \"NO\";\n  }\n  if ($start1\
    \ > $start2) {\n    $start1 = $interval2[0];\n    $end1 = $interval2[1];\n   \
    \ $start2 = $interval1[0];\n    $end2 = $interval1[1];\n  }\n  if ($start2 > $end1)\
    \ {\n    return \"NO\";\n  }\n  if ($end2 > $end1) {\n    $end2 = $end1;\n  }\n\
    \  $count = 0;\n  $j = $start2;\n  while ($j <= $end2) {\n    $count++;\n    $j++;\n\
    \  }\n  if ($count <= 2) {\n    return \"NO\";\n  }\n  for ($i = 2; $i < $count;\
    \ $i++) {\n    if ($count % $i == 0) {\n      return \"NO\";\n    }\n  }\n  return\
    \ \"YES\";\n}", "  // TODO: implement\n}\n", "    // your code\n}", "    // your\
    \ code goes here\n}", "    // Write your code here\n    // To print results to\
    \ the standard output you can use print\n    // Example: print \"Hello world!\"\
    ;\n}", "    $small = min($interval1[0], $interval2[0]);\n    $big = max($interval1[1],\
    \ $interval2[1]);\n    if ($small > $big) return \"NO\";\n    if ($small === $big)\
    \ return \"YES\";\n    $intersection = array($small, $big);\n    if ($intersection[1]\
    \ - $intersection[0] < 2) return \"NO\";\n    if (isPrime($intersection[1] - $intersection[0]))\
    \ return \"YES\";\n    return \"NO\";\n}", "    $firstStart = $interval1[0];\n\
    \    $firstEnd = $interval1[1];\n    $secondStart = $interval2[0];\n    $secondEnd\
    \ = $interval2[1];\n    $result = [];\n    $result[] = max($firstStart, $secondStart);\n\
    \    $result[] = min($firstEnd, $secondEnd);\n    if ($result[0] <= $result[1])\
    \ {\n        $length = $result[1] - $result[0] + 1;\n        if (isPrime($length))\
    \ {\n            return \"YES\";\n        }\n    }\n    return \"NO\";\n}\n",
  "    //Write your code here\n}", "  $intersection = [];\n  if ($interval1[0] <=\
    \ $interval2[0] && $interval1[1] >= $interval2[0]) {\n    $intersection[] = $interval2[0];\n\
    \  }\n  if ($interval1[0] <= $interval2[1] && $interval1[1] >= $interval2[1])\
    \ {\n    $intersection[] = $interval2[1];\n  }\n  if ($interval2[0] <= $interval1[0]\
    \ && $interval2[1] >= $interval1[0]) {\n    $intersection[] = $interval1[0];\n\
    \  }\n  if ($interval2[0] <= $interval1[1] && $interval2[1] >= $interval1[1])\
    \ {\n    $intersection[] = $interval1[1];\n  }\n  sort($intersection);\n  if (count($intersection)\
    \ === 2) {\n    $length = $intersection[1] - $intersection[0];\n    if ($length\
    \ <= 1) {\n      return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n\
    \      if ($length % $i === 0) {\n        return \"NO\";\n      }\n    }\n   \
    \ return \"YES\";\n  }\n  return \"NO\";\n}\n", "    $start = max($interval1[0],\
    \ $interval2[0]);\n    $end = min($interval1[1], $interval2[1]);\n    $length\
    \ = max($end - $start, 0);\n    if ($length == 0) {\n        return \"NO\";\n\
    \    }\n    $prime = true;\n    for ($i = 2; $i < $length; $i++) {\n        if\
    \ ($length % $i == 0) {\n            $prime = false;\n            break;\n   \
    \     }\n    }\n    return $prime ? \"YES\" : \"NO\";\n}\n", "  $intersection_length\
    \ = min($interval1[1], $interval2[1]) - max($interval1[0], $interval2[0]);\n \
    \ $primes = array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53,\
    \ 59, 61, 67, 71, 73, 79, 83, 89, 97);\n  if ($intersection_length == 0) {\n \
    \   return \"NO\";\n  }\n  foreach ($primes as $prime) {\n    if ($prime == $intersection_length)\
    \ {\n      return \"YES\";\n    }\n  }\n  return \"NO\";\n}", "  $interval1 =\
    \ new Interval($interval1);\n  $interval2 = new Interval($interval2);\n  $intersection\
    \ = new Interval(\n    array_filter(\n      array($interval1->start, $interval1->end,\
    \ $interval2->start, $interval2->end),\n      function($value) use ($interval1,\
    \ $interval2) {\n        return $interval1->start <= $value && $value <= $interval1->end\
    \ ||\n          $interval2->start <= $value && $value <= $interval2->end;\n  \
    \    }\n    )\n  );\n  return is_prime($intersection->length()) ? \"YES\" : \"\
    NO\";\n}\n\nclass Interval {\n  public $start;\n  public $end;\n\n  public function\
    \ __construct($points) {\n    $this->start = min($points);\n    $this->end = max($points);\n\
    \  }\n\n  public function length() {\n    return $this->end - $this->start;\n\
    \  }\n}\n", "  $endpoints = array_merge($interval1, $interval2);\n  sort($endpoints);\n\
    \  $length = $endpoints[2] - $endpoints[1];\n  if ($length > 0) {\n    for ($i\
    \ = 2; $i < $length; $i++) {\n      if ($length % $i == 0) {\n        return \"\
    NO\";\n      }\n    }\n    return \"YES\";\n  }\n  return \"NO\";\n}\n", "   \
    \ $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1], $interval2[1]);\n\
    \    if ($start > $end) return \"NO\";\n    $intersectionLength = $end - $start\
    \ + 1;\n    if (isPrime($intersectionLength)) return \"YES\";\n    return \"NO\"\
    ;\n}", "    $s1 = $interval1[0];\n    $e1 = $interval1[1];\n    $s2 = $interval2[0];\n\
    \    $e2 = $interval2[1];\n    if ($s1 > $e1) {\n        $s1 = $s1 + $e1;\n  \
    \      $e1 = $s1 - $e1;\n        $s1 = $s1 - $e1;\n    }\n    if ($s2 > $e2) {\n\
    \        $s2 = $s2 + $e2;\n        $e2 = $s2 - $e2;\n        $s2 = $s2 - $e2;\n\
    \    }\n    $arr = [];\n    if (($s1 <= $s2 && $s2 <= $e1) || ($s2 <= $s1 && $s1\
    \ <= $e2)) {\n        if ($s1 <= $s2) {\n            $arr[] = $s2;\n        }\
    \ else {\n            $arr[] = $s1;\n        }\n        if ($e1 <= $e2) {\n  \
    \          $arr[] = $e1;\n        } else {\n            $arr[] = $e2;\n      \
    \  }\n    }\n    if (empty($arr)) {\n        return \"NO\";\n    }\n    $num =\
    \ $arr[1] - $arr[0];\n    if ($num <= 1) {\n        return \"NO\";\n    }\n  \
    \  $div = $num;\n    $isPrime = true;\n    while ($div > 1) {\n        if ($num\
    \ % $div == 0) {\n            $isPrime = false;\n            break;\n        }\n\
    \        $div--;\n    }\n    if ($isPrime) {\n        return \"YES\";\n    } else\
    \ {\n        return \"NO\";\n    }\n}\n$interval1 = array(1, 2);\n$interval2 =\
    \ array(2, 3);\n$interval3 = array(-1, 1);\n$interval4 = array(0, 4);\n$interval5\
    \ = array(-3, -1);\n$interval6 = array(-5, 5);\necho intersection", "    $intersection\
    \ = range(max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1]));\n\
    \    $length = count($intersection);\n    if ($length == 0) {\n        return\
    \ \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n        if ($length\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}", "  $interval1End = $interval1[1];\n  $interval2End = $interval2[1];\n \
    \ $interval1Start = $interval1[0];\n  $interval2Start = $interval2[0];\n  $lowerInterval\
    \ = ($interval1Start > $interval2Start) ? $interval1Start : $interval2Start;\n\
    \  $upperInterval = ($interval1End < $interval2End) ? $interval1End : $interval2End;\n\
    \  $length = $upperInterval - $lowerInterval;\n  $primes = array(2, 3, 5, 7, 11,\
    \ 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89,\
    \ 97);\n  if ($lowerInterval > $upperInterval) {\n    return \"NO\";\n  }\n  else\
    \ {\n    if (in_array($length, $primes)) {\n      return \"YES\";\n    }\n   \
    \ else {\n      return \"NO\";\n    }\n  }\n}", "  $f = min($interval1[0], $interval2[0]);\n\
    \  $e = max($interval1[1], $interval2[1]);\n  return ($e-$f < 2) ? \"NO\" : isPrime($e-$f)\
    \ ? \"YES\" : \"NO\";\n}\n", "    $max1 = max($interval1);\n    $min1 = min($interval1);\n\
    \    $max2 = max($interval2);\n    $min2 = min($interval2);\n    if($max1 < $min2\
    \ || $max2 < $min1) {\n        return \"NO\";\n    }\n    $intersection = array($min1,\
    \ $max1);\n    if($min2 > $min1) {\n        $intersection[0] = $min2;\n    }\n\
    \    if($max2 < $max1) {\n        $intersection[1] = $max2;\n    }\n    $length\
    \ = $intersection[1] - $intersection[0];\n    $length += 2;\n    $isPrime = true;\n\
    \    for($i = 2; $i < sqrt($length); $i++) {\n        if($length % $i == 0) {\n\
    \            $isPrime = false;\n            break;\n        }\n    }\n    if($isPrime)\
    \ {\n        return \"YES\";\n    }\n    return \"NO\";\n}\n\necho intersection(array(1,2),\
    \ array(2,3)) . \"\\n\";\necho intersection(array(-1,1), array(0,4)) . \"\\n\"\
    ;\necho intersection(array(-3,-1), array(-5,5)) . \"\\n\";\necho intersection(array(2,3),\
    \ array(2,3)) . \"\\n\";\necho intersection(array(1,3), array(2,4)) . \"\\n\"\
    ;\necho intersection(array(2,4), array(1,3)) . \"\\n\";\necho intersection(array(2,4),\
    \ array(1,5)) . \"\\n\";\necho intersection(array(2,4), array(5,5)) . \"\\n\"\
    ;\necho intersection(array(5,5), array(2,4)) . \"\\n\";\necho intersection(array(3,3),\
    \ array(3,3)) . \"\\n\";\necho intersection(array(1,1), array(2,2)) . \"\\n\"\
    ;\necho intersection(array(2,2), array(1,1)) . \"\\n\";\necho intersection(array(1,1),\
    \ array(1,1", "    $int1Start = $interval1[0];\n    $int1End = $interval1[1];\n\
    \    $int2Start = $interval2[0];\n    $int2End = $interval2[1];\n    $int1 = [$int1Start,\
    \ $int1End];\n    $int2 = [$int2Start, $int2End];\n    $intersection = array_intersect($int1,\
    \ $int2);\n    if(empty($intersection)) {\n        return \"NO\";\n    }\n   \
    \ if(in_array($int1Start, $int2)) {\n        $intersectionStart = $int1Start;\n\
    \    } else if(in_array($int2Start, $int1)) {\n        $intersectionStart = $int2Start;\n\
    \    } else {\n        return \"NO\";\n    }\n    if(in_array($int1End, $int2))\
    \ {\n        $intersectionEnd = $int1End;\n    } else if(in_array($int2End, $int1))\
    \ {\n        $intersectionEnd = $int2End;\n    } else {\n        return \"NO\"\
    ;\n    }\n    $intLength = $intersectionEnd - $intersectionStart;\n    $primes\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97];\n    if(in_array($intLength, $primes)) {\n        return\
    \ \"YES\";\n    } else {\n        return \"NO\";\n    }\n}\n", "  // your code\
    \ goes here...\n}\necho intersection(array(1, 2), array(2, 3)); // \"NO\"\necho\
    \ intersection(array(-1, 1), array(0, 4)); // \"NO\"\necho intersection(array(-3,\
    \ -1), array(-5, 5)); // \"YES\"", "    $interval = array();\n    $interval[0]\
    \ = (int)max($interval1[0], $interval2[0]);\n    $interval[1] = (int)min($interval1[1],\
    \ $interval2[1]);\n    $length = $interval[1] - $interval[0];\n    if ($length\
    \ == 0) {\n        return \"NO\";\n    }\n    for ($i = 2; $i <= sqrt($length);\
    \ $i++) {\n        if ($length % $i == 0) {\n            return \"NO\";\n    \
    \    }\n    }\n    return \"YES\";\n}\necho intersection(array(1, 2), array(2,\
    \ 3)) . \"\\n\";\necho intersection(array(-1, 1), array(0, 4)) . \"\\n\";\necho\
    \ intersection(array(-3, -1), array(-5, 5)) . \"\\n\";\necho intersection(array(1,\
    \ 2), array(3, 5)) . \"\\n\";\necho intersection(array(11, 19), array(19, 21))\
    \ . \"\\n\";\necho intersection(array(0, 3), array(1, 5)) . \"\\n\";", "    $intersect\
    \ = [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n\
    \    if ($intersect[0] > $intersect[1]) {\n        return \"NO\";\n    }\n   \
    \ $length = $intersect[1] - $intersect[0] + 1;\n    for ($i = 2; $i <= sqrt($length);\
    \ $i++) {\n        if ($length % $i == 0) {\n            return \"NO\";\n    \
    \    }\n    }\n    return \"YES\";\n}", "  $intersection = array();\n  if ($interval1[0]\
    \ > $interval2[0]) {\n    $big = $interval1;\n    $small = $interval2;\n  } else\
    \ {\n    $big = $interval2;\n    $small = $interval1;\n  }\n  for ($i = $small[0];\
    \ $i <= $small[1]; $i++) {\n    for ($j = $big[0]; $j <= $big[1]; $j++) {\n  \
    \    if ($i == $j) {\n        $intersection[] = $i;\n      }\n    }\n  }\n  $length\
    \ = count($intersection);\n  if ($length == 0) {\n    return \"NO\";\n  }\n  $isPrime\
    \ = false;\n  for ($i = 2; $i < $length; $i++) {\n    if ($length % $i == 0) {\n\
    \      $isPrime = true;\n    }\n  }\n  if ($isPrime) {\n    return \"YES\";\n\
    \  } else {\n    return \"NO\";\n  }\n}", "  $result = \"\";\n  if ($interval1[0]\
    \ > $interval2[1] || $interval2[0] > $interval1[1]) {\n    $result = \"NO\";\n\
    \  } else {\n    $max1 = max($interval1);\n    $min1 = min($interval1);\n    $max2\
    \ = max($interval2);\n    $min2 = min($interval2);\n    $result = ($max1 - $min2)\
    \ > 1 ? \"NO\" : \"YES\";\n  }\n  return $result;\n}\n", "    $start = max($interval1[0],\
    \ $interval2[0]);\n    $end = min($interval1[1], $interval2[1]);\n    if ($start\
    \ > $end) return \"NO\";\n    $length = $end - $start + 1;\n    if (isPrime($length))\
    \ return \"YES\";\n    return \"NO\";\n}\n", "  $intersection = array();\n  $intersection[0]\
    \ = max($interval1[0], $interval2[0]);\n  $intersection[1] = min($interval1[1],\
    \ $interval2[1]);\n  return primeLength($intersection) ? \"YES\" : \"NO\";\n}\n",
  "    $result = \"NO\";\n    $intervals = [$interval1, $interval2];\n    $min = max($intervals[0][0],\
    \ $intervals[1][0]);\n    $max = min($intervals[0][1], $intervals[1][1]);\n  \
    \  if ($min <= $max) {\n        $result = isPrime($max - $min + 1) ? \"YES\" :\
    \ \"NO\";\n    }\n    return $result;\n}", "    $from = max($interval1[0], $interval2[0]);\n\
    \    $to = min($interval1[1], $interval2[1]);\n    if ($from > $to) {\n      \
    \  return \"NO\";\n    }\n    $intersectionLength = $to - $from + 1;\n    return\
    \ ($intersectionLength == 1 or $intersectionLength == 2) ? \"NO\" : \"YES\";\n\
    }\n", "\t// your code here\n\t$start = max($interval1[0], $interval2[0]);\n\t\
    $end = min($interval1[1], $interval2[1]);\n\t$distance = $end - $start;\n\tif\
    \ ($distance < 1) {\n\t\treturn \"NO\";\n\t}\n\tfor ($i = 2; $i < $distance; $i++)\
    \ {\n\t\tif ($distance % $i == 0) {\n\t\t\treturn \"NO\";\n\t\t}\n\t}\n\treturn\
    \ \"YES\";\n}", "    list($start1, $end1) = $interval1;\n    list($start2, $end2)\
    \ = $interval2;\n    if ($start1 <= $start2 && $start2 <= $end1) {\n        $start\
    \ = $start2;\n    } else if ($start2 <= $start1 && $start1 <= $end2) {\n     \
    \   $start = $start1;\n    } else {\n        return \"NO\";\n    }\n    if ($start1\
    \ <= $end2 && $end2 <= $end1) {\n        $end = $end2;\n    } else if ($start2\
    \ <= $end1 && $end1 <= $end2) {\n        $end = $end1;\n    } else {\n       \
    \ return \"NO\";\n    }\n    $len = $end - $start + 1;\n    if ($len <= 1) {\n\
    \        return \"NO\";\n    }\n    for ($i = 2; $i < $len; $i++) {\n        if\
    \ ($len % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return\
    \ \"YES\";\n}\n", "    $result = array_intersect($interval1, $interval2);\n  \
    \  if (count($result) == 0) return \"NO\";\n    $start = $result[0];\n    $end\
    \ = $result[count($result) - 1];\n    if ($start == $end) return \"NO\";\n   \
    \ for ($x = $start; $x <= $end; $x++) {\n        if ($x == $start || $x == $end)\
    \ continue;\n        if (isPrime($x)) return \"YES\";\n    }\n    return \"NO\"\
    ;\n}", "  $start = max($interval1[0], $interval2[0]);\n  $end = min($interval1[1],\
    \ $interval2[1]);\n  if ($start > $end) {\n    return \"NO\";\n  }\n  if ($start\
    \ == $end) {\n    return \"YES\";\n  }\n  $length = $end - $start;\n  $output\
    \ = \"NO\";\n  for ($i = 2; $i <= sqrt($length); $i++) {\n    if ($length % $i\
    \ == 0) {\n      return $output;\n    }\n  }\n  $output = \"YES\";\n  return $output;\n\
    }", "    $numbers = [\n        $interval1[0],\n        $interval1[1],\n      \
    \  $interval2[0],\n        $interval2[1]\n    ];\n    sort($numbers);\n    $intersectionStart\
    \ = $numbers[1];\n    $intersectionEnd = $numbers[2];\n    $intersectionLength\
    \ = $intersectionEnd - $intersectionStart;\n    return isPrime($intersectionLength)\
    \ ? \"YES\" : \"NO\";\n}", "    $intersection_1 = $interval1[0] > $interval2[0]\
    \ ? \n    $interval1[0] : $interval2[0];\n    $intersection_2 = $interval1[1]\
    \ < $interval2[1] ? \n    $interval1[1] : $interval2[1];\n    $length = $intersection_2\
    \ - $intersection_1;\n    if ($length < 0) {\n        return \"NO\";\n    }\n\
    \    if ($length == 0) {\n        return \"YES\";\n    }\n    if ($length == 1)\
    \ {\n        return \"NO\";\n    }\n    for ($i = 2; $i < $length; $i++) {\n \
    \       if ($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}\n$interval1 = array(-3, -1);\n$interval2 = array(-5, 5);\n\
    echo intersection($interval1, $interval2);", "\t// the intervals are the same\n\
    \tif (($interval1[0] == $interval2[0]) && ($interval1[1] == $interval2[1])) {\n\
    \t\treturn \"YES\";\n\t}\n\t\n\t// if no intersection\n\tif (($interval1[1] <\
    \ $interval2[0]) || ($interval2[1] < $interval1[0])) {\n\t\treturn \"NO\";\n\t\
    }\n\t\n\t// if the first interval is fully contained in the second\n\tif (($interval1[0]\
    \ >= $interval2[0]) && ($interval1[1] <= $interval2[1])) {\n\t\tif (isPrime($interval1[1]\
    \ - $interval1[0] + 1)) {\n\t\t\treturn \"YES\";\n\t\t}\n\t\treturn \"NO\";\n\t\
    }\n\t\n\t// if the second interval is fully contained in the first\n\tif (($interval2[0]\
    \ >= $interval1[0]) && ($interval2[1] <= $interval1[1])) {\n\t\tif (isPrime($interval2[1]\
    \ - $interval2[0] + 1)) {\n\t\t\treturn \"YES\";\n\t\t}\n\t\treturn \"NO\";\n\t\
    }\n\t\n\t// if the first interval is not fully contained in the second\n\tif (($interval1[0]\
    \ < $interval2[0]) && ($interval1[1] < $interval2[1])) {\n\t\tif (isPrime($interval1[1]\
    \ - $interval2[0] + 1)) {\n\t\t\treturn \"YES\";\n\t\t}\n\t\treturn \"NO\";\n\t\
    }\n\t\n\t// if the second interval is not fully contained in the first\n\tif (($interval2[0]\
    \ < $interval1[0]) && ($interval2[1] < $interval1[1])) {\n\t\tif (isPrime($interval2[1]\
    \ - $interval1[0] + 1)) {\n\t\t\treturn \"YES\";\n\t\t}\n\t\treturn \"NO\";\n\t\
    }", "\t$intersect = array_intersect(range($interval1[0], $interval1[1]), range($interval2[0],\
    \ $interval2[1]));\n\t$count = count($intersect);\n\tif ($count > 1) {\n\t\tfor\
    \ ($i = 2; $i < $count; $i++) {\n\t\t\tif ($count % $i == 0) {\n\t\t\t\treturn\
    \ \"NO\";\n\t\t\t}\n\t\t}\n\t\treturn \"YES\";\n\t}\n\treturn \"NO\";\n}\n", " \
    \   $start1 = $interval1[0];\n    $end1 = $interval1[1];\n    $start2 = $interval2[0];\n\
    \    $end2 = $interval2[1];\n    $intersection = [max($start1, $start2), min($end1,\
    \ $end2)];\n    if ($intersection[0] > $intersection[1]) {\n        return \"\
    NO\";\n    }\n    $number = $intersection[1] - $intersection[0] + 1;\n    return\
    \ isPrime($number) ? \"YES\" : \"NO\";\n}\n", "    // make sure the second interval\
    \ starts after the first\n    if ($interval1[0] > $interval2[0]) {\n        $temp\
    \ = $interval1;\n        $interval1 = $interval2;\n        $interval2 = $temp;\n\
    \    }\n    // make sure the intervals overlap (intersect)\n    if ($interval1[1]\
    \ < $interval2[0]) {\n        return \"NO\";\n    }\n    // define the starting\
    \ and ending points of the resulting interval\n    $interval_start = $interval2[0];\n\
    \    $interval_end = $interval1[1];\n    if ($interval1[1] >= $interval2[1]) {\n\
    \        $interval_end = $interval2[1];\n    }\n    // calculate the difference\
    \ between the end and the start\n    $interval_diff = $interval_end - $interval_start;\n\
    \    // determine if the difference is a prime number\n    if (gmp_prob_prime($interval_diff)\
    \ == 2) {\n        return \"YES\";\n    }\n    return \"NO\";\n}\necho \"<pre>\"\
    ;\necho intersection(array(1, 2), array(2, 3));\necho \"<br>\";\necho intersection(array(-1,\
    \ 1), array(0, 4));\necho \"<br>\";\necho intersection(array(-3, -1), array(-5,\
    \ 5));\necho \"</pre>\";", "\t$intersection = array();\n\tif ($interval1[0] >\
    \ $interval2[0]) {\n\t\t$b = $interval1;\n\t\t$s = $interval2;\n\t} else {\n\t\
    \t$b = $interval2;\n\t\t$s = $interval1;\n\t}\n\tif ($b[0] <= $s[1]) {\n\t\t$intersection[0]\
    \ = $b[0];\n\t\t$intersection[1] = $s[1];\n\t} else {\n\t\treturn 'NO';\n\t}\n\
    \t$diff = $intersection[1] - $intersection[0];\n\t$counter = 0;\n\tif ($diff >\
    \ 1) {\n\t\tfor ($i = 2; $i <= $diff; $i++) {\n\t\t\tif ($diff % $i == 0) {\n\t\
    \t\t\t$counter++;\n\t\t\t}\n\t\t}\n\t}\n\tif ($counter == 0) {\n\t\treturn 'YES';\n\
    \t} else {\n\t\treturn 'NO';\n\t}\n}\n\necho intersection(array(1, 2), array(2,\
    \ 3));\necho \"\\n\";\necho intersection(array(-1, 1), array(0, 4));\necho \"\\\
    n\";\necho intersection(array(-3, -1), array(-5, 5));\necho \"\\n\";", "    if\
    \ ($interval1[0] <= $interval2[0] && $interval2[0] <= $interval1[1]) {\n     \
    \   $intersectionStart = $interval2[0];\n    } elseif ($interval2[0] <= $interval1[0]\
    \ && $interval1[0] <= $interval2[1]) {\n        $intersectionStart = $interval1[0];\n\
    \    } else {\n        return \"NO\";\n    }\n    if ($interval1[0] <= $interval2[1]\
    \ && $interval2[1] <= $interval1[1]) {\n        $intersectionEnd = $interval2[1];\n\
    \    } elseif ($interval2[0] <= $interval1[1] && $interval1[1] <= $interval2[1])\
    \ {\n        $intersectionEnd = $interval1[1];\n    } else {\n        return \"\
    NO\";\n    }\n    $intersectionLength = $intersectionEnd - $intersectionStart\
    \ + 1;\n    if ($intersectionLength == 1) {\n        return \"NO\";\n    }\n \
    \   $isPrime = true;\n    for ($i = 2; $i < $intersectionLength; $i++) {\n   \
    \     if ($intersectionLength % $i == 0) {\n            $isPrime = false;\n  \
    \          break;\n        }\n    }\n    if ($isPrime) {\n        return \"YES\"\
    ;\n    } else {\n        return \"NO\";\n    }\n}\n\nprint_r(intersection(array(1,\
    \ 2), array(2, 3)));\nprint_r(intersection(array(-1, 1), array(0, 4)));\nprint_r(intersection(array(-3,\
    \ -1), array(-5, 5)));", "\t// Given start and end point of two intervals\n\t\
    // Find intersection length,\n\t// if length is a prime number, return 'YES',\n\
    \t// else, return 'NO'\n\t// if two intervals don't intersect, return 'NO'\n\t\
    $lower = max($interval1[0], $interval2[0]);\n\t$upper = min($interval1[1], $interval2[1]);\n\
    \t$diff = $upper - $lower;\n\tif ($diff <= 0) {\n\t\treturn 'NO';\n\t} elseif\
    \ (isPrime($diff)) {\n\t\treturn 'YES';\n\t} else {\n\t\treturn 'NO';\n\t}\n}\n",
  "    // Your code here\n}", "\t\n\t$intervals = [\n\t\t[$interval1[0], $interval1[1]],\n\
    \t\t[$interval2[0], $interval2[1]]\n\t];\n\t\n\tsort($intervals);\n\t\n\tif ($intervals[0][1]\
    \ < $intervals[1][0]) {\n\t\treturn \"NO\";\n\t} elseif ($intervals[0][1] >= $intervals[1][0])\
    \ {\n\t\t$intersection = [$intervals[1][0], $intervals[0][1]];\n\t\t$length =\
    \ $intersection[1] - $intersection[0] + 1;\n\t\t\n\t\tif (isPrime($length)) {\n\
    \t\t\treturn \"YES\";\n\t\t} else {\n\t\t\treturn \"NO\";\n\t\t}\n\t}\n}\n", " \
    \   $maxStart = max($interval1[0], $interval2[0]);\n    $minEnd = min($interval1[1],\
    \ $interval2[1]);\n    $length = $minEnd - $maxStart;\n    if ($length <= 0) return\
    \ \"NO\";\n    if ($length == 1) return \"NO\";\n    for ($i = 2; $i < $length;\
    \ $i++) {\n        if ($length % $i == 0) return \"NO\";\n    }\n    return \"\
    YES\";\n}\n\necho intersection(array(1, 2), array(2, 3)) . \"\\n\";\necho intersection(array(-1,\
    \ 1), array(0, 4)) . \"\\n\";\necho intersection(array(-3, -1), array(-5, 5))\
    \ . \"\\n\";", "    $intersect = [-1, -1];\n    $intersect[0] = $interval1[0]\
    \ >= $interval2[0] ? $interval1[0] : $interval2[0];\n    $intersect[1] = $interval1[1]\
    \ <= $interval2[1] ? $interval1[1] : $interval2[1];\n    if($intersect[0] > $intersect[1])\
    \ {\n        return \"NO\";\n    }\n    return isPrime($intersect[1] - $intersect[0]\
    \ + 1) ? \"YES\" : \"NO\";\n}", "    $first_start = $interval1[0];\n    $first_end\
    \ = $interval1[1];\n    $second_start = $interval2[0];\n    $second_end = $interval2[1];\n\
    \    $start = max($first_start, $second_start);\n    $end = min($first_end, $second_end);\n\
    \    if ($start > $end) {\n        return \"NO\";\n    }\n    $length = $end -\
    \ $start + 1;\n    return is_prime($length) ? \"YES\" : \"NO\";\n}\n", "    $interval\
    \ = $interval1;\n    if($interval2[0] > $interval1[0]){\n        $interval = $interval2;\n\
    \    }\n    if($interval1[1] < $interval2[0] || $interval2[1] < $interval1[0]){\n\
    \        return \"NO\";\n    }\n    $intLen = $interval[1] - $interval[0];\n \
    \   if($intLen == 0){\n        return \"NO\";\n    }\n    for($i = 2; $i <= $intLen;\
    \ $i++){\n        if($intLen % $i == 0){\n            return \"NO\";\n       \
    \ }\n    }\n    return \"YES\";\n}\necho intersection(array(1, 2), array(2, 3));\n\
    echo \"\\n\";\necho intersection(array(-1, 1), array(0, 4));\necho \"\\n\";\n\
    echo intersection(array(-3, -1), array(-5, 5));\necho \"\\n\";", "\t$intersection\
    \ = null;\n\tif($interval1[0] >= $interval2[0] && $interval1[0] <= $interval2[1]){\n\
    \t\t$intersection = array($interval1[0], $interval2[1]);\n\t}else if($interval1[1]\
    \ >= $interval2[0] && $interval1[1] <= $interval2[1]){\n\t\t$intersection = array($interval2[0],\
    \ $interval1[1]);\n\t}else if($interval2[0] >= $interval1[0] && $interval2[0]\
    \ <= $interval1[1]){\n\t\t$intersection = array($interval2[0], $interval1[1]);\n\
    \t}else if($interval2[1] >= $interval1[0] && $interval2[1] <= $interval1[1]){\n\
    \t\t$intersection = array($interval1[0], $interval2[1]);\n\t}\n\tif($intersection\
    \ != null){\n\t\treturn ($intersection[1] - $intersection[0] == 2) ? \"YES\" :\
    \ \"NO\";\n\t}else{\n\t\treturn \"NO\";\n\t}\n}\n", "  // Find the intersection\n\
    \  $intersection = getIntersection($interval1, $interval2);\n  // If we don't\
    \ have an intersection, return NO.\n  if (count($intersection) == 0) {\n    return\
    \ \"NO\";\n  }\n  // Check if the length of the intersection is a prime number.\n\
    \  $length = abs($intersection[0] - $intersection[1]);\n  // A prime number is\
    \ a number greater than 1\n  // whose only two whole-number factors are 1 and\
    \ itself.\n  // \n  // We can return false, if we find any number that divides\
    \ our number\n  // for (i = 2; i <= length / 2; i++) {\n  //   if (length % i\
    \ == 0)\n  //     return false;\n  // }\n  // If we can't return false, the number\
    \ is prime!\n  // return true;\n  // \n  // OR\n  // We can return true, if we\
    \ find any number that divides our number\n  // if (length <= 1)\n  //   return\
    \ false;\n  // if (length == 2)\n  //   return true;\n  // if (length % 2 == 0)\n\
    \  //   return false;\n  // for (i = 3; i <= Math.sqrt(length); i += 2) {\n  //\
    \   if (length % i == 0)\n  //     return false;\n  // }\n  // return true;\n\
    \  // \n  // OR\n  // We can check if the number is within our lookup array.\n\
    \  // $prime_lookup = array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97);\n  // if (in_array($length, $prime_lookup))\
    \ {\n  //   return \"YES\";\n  // }\n  // return \"NO\";\n  // \n  // We can now\
    \ reduce our lookup table size by keeping only half the values\n  // and mirroring\
    \ the array;\n  // $prime_lookup = array(2, 3, 5, 7, 11, 13, 17, 19, 23,", "\t\
    if (max($interval1) < min($interval2) || max($interval2) < min($interval1)) {\n\
    \t\treturn \"NO\";\n\t} else {\n\t\t$intersection = array(max(min($interval1),\
    \ min($interval2)), min(max($interval1), max($interval2)));\n\t\t$length = abs($intersection[0]\
    \ - $intersection[1]);\n\t\treturn isPrime($length) ? \"YES\" : \"NO\";\n\t}\n\
    }", "  $sortedIntervals = array($interval1, $interval2);\n  sort($sortedIntervals);\n\
    \  $interval1 = $sortedIntervals[0];\n  $interval2 = $sortedIntervals[1];\n  $intersectionInterval\
    \ = [];\n  if ($interval1[1] < $interval2[0]) {\n    return 'NO';\n  }\n  $intersectionInterval[0]\
    \ = max($interval1[0], $interval2[0]);\n  $intersectionInterval[1] = min($interval1[1],\
    \ $interval2[1]);\n  $intersectionLength = $intersectionInterval[1] - $intersectionInterval[0];\n\
    \  if ($intersectionLength <= 1) {\n    return 'NO';\n  }\n  for ($i = 2; $i <\
    \ $intersectionLength; $i++) {\n    if ($intersectionLength % $i == 0) {\n   \
    \   return 'NO';\n    }\n  }\n  return 'YES';\n}\n\nprint_r(intersection(array(2,\
    \ 3), array(1, 2)));", "    $start = max($interval1[0], $interval2[0]);\n    $end\
    \ = min($interval1[1], $interval2[1]);\n    if($start > $end) return \"NO\";\n\
    \    $len = $end - $start + 1;\n    if($len == 1) return \"NO\";\n    if($len\
    \ == 2) return \"YES\";\n    $prime = true;\n    for($i = 2; $i < $len; $i++)\
    \ {\n        if($len % $i == 0) {\n            $prime = false;\n            break;\n\
    \        }\n    }\n    return $prime ? \"YES\" : \"NO\";\n}\n", "  if (empty($interval1)\
    \ || empty($interval2)) return \"NO\";\n  $min = max($interval1[0], $interval2[0]);\n\
    \  $max = min($interval1[1], $interval2[1]);\n  $length = $max - $min;\n  return\
    \ isPrime($length) ? \"YES\" : \"NO\";\n}\n", "    $start = max($interval1[0],\
    \ $interval2[0]);\n    $end = min($interval1[1], $interval2[1]);\n    $number\
    \ = $end - $start;\n    if($number == 0) return \"NO\";\n    for($i = 2; $i <=\
    \ sqrt($number); $i++) {\n        if($number % $i == 0) return \"NO\";\n    }\n\
    \    return \"YES\";\n}", "  $interval = count($interval1) > count($interval2)\
    \ ? $interval1 : $interval2;\n  $interval = count($interval1) < count($interval2)\
    \ ? $interval1 : $interval2;\n  $intersection = [];\n  $start = null;\n  $end\
    \ = null;\n  foreach ($interval as $value) {\n    if ($value > $interval[0] &&\
    \ $value < $interval[1]) {\n      if ($start == null) {\n        $start = $value;\n\
    \      }\n      $end = $value;\n    }\n  }\n  if ($start != null && $end != null)\
    \ {\n    $intersection = [$start, $end];\n  } else {\n    return \"NO\";\n  }\n\
    \  $length = $intersection[1] - $intersection[0];\n  $isPrime = true;\n  for ($i\
    \ = $length; $i > 1; $i--) {\n    if ($length % $i == 0) {\n      $isPrime = false;\n\
    \      break;\n    }\n  }\n  return $isPrime ? \"YES\" : \"NO\";\n}", "  $intersect\
    \ = [max($interval1[0], $interval2[0]), min($interval1[1], $interval2[1])];\n\
    \  $len = $intersect[1] - $intersect[0];\n  $prime = true;\n  if ($len < 1) return\
    \ 'NO';\n  for ($i = 2; $i < $len; $i++) {\n    if ($len % $i == 0) {\n      $prime\
    \ = false;\n      break;\n    }\n  }\n  return $prime ? 'YES' : 'NO';\n}\n", " \
    \ $a = $interval1[0];\n  $b = $interval1[1];\n  $c = $interval2[0];\n  $d = $interval2[1];\n\
    \  $intersect = NULL;\n  if ($a <= $c && $c <= $b) {\n    $intersect = array($c,\
    \ $b <= $d ? $b : $d);\n  } else if ($c <= $a && $a <= $d) {\n    $intersect =\
    \ array($a, $d <= $b ? $d : $b);\n  }\n  if ($intersect === NULL) {\n    return\
    \ \"NO\";\n  }\n  $length = $intersect[1] - $intersect[0] + 1;\n  return isPrime($length)\
    \ ? \"YES\" : \"NO\";\n}", "  $s1 = $interval1[0];\n  $e1 = $interval1[1];\n \
    \ $s2 = $interval2[0];\n  $e2 = $interval2[1];\n  $s = max($s1, $s2);\n  $e =\
    \ min($e1, $e2);\n  if ($s <= $e) {\n    return (isPrime($e - $s)) ? \"YES\" :\
    \ \"NO\";\n  }\n  return \"NO\";\n}\n", "    list($start1, $end1) = $interval1;\n\
    \    list($start2, $end2) = $interval2;\n    $intersect = array(\n        max($start1,\
    \ $start2),\n        min($end1, $end2)\n    );\n    if ($intersect[0] <= $intersect[1])\
    \ {\n        $length = $intersect[1] - $intersect[0] + 1;\n        for ($i = 2;\
    \ $i < $length; $i++) {\n            if ($length % $i == 0) {\n              \
    \  return \"NO\";\n            }\n        }\n        return \"YES\";\n    }\n\
    \    return \"NO\";\n}", "    $start = ($interval1[0] > $interval2[0]) ? $interval1[0]\
    \ : $interval2[0];\n    $end = ($interval1[1] < $interval2[1]) ? $interval1[1]\
    \ : $interval2[1];\n    $interval = array($start, $end);\n    if ($interval[0]\
    \ > $interval[1]) {\n        return \"NO\";\n    }\n    $length = $interval[1]\
    \ - $interval[0] + 1;\n    if ($length == 1) {\n        return \"NO\";\n    }\n\
    \    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i == 0) {\n  \
    \          return \"NO\";\n        }\n    }\n    return \"YES\";\n}", "    $start\
    \ = $interval1[0] > $interval2[0] ? $interval1[0] : $interval2[0];\n    $end =\
    \ $interval1[1] < $interval2[1] ? $interval1[1] : $interval2[1];\n    if($start\
    \ > $end) {\n        return \"NO\";\n    }\n    $result = ($end - $start + 1);\n\
    \    if($result == 1) {\n        return \"NO\";\n    }\n    for($i = 2; $i < $result;\
    \ $i++) {\n        if($result % $i == 0) {\n            return \"NO\";\n     \
    \   }\n    }\n    return \"YES\";\n}\n\necho intersection(array(1, 2), array(2,\
    \ 3));\necho \"<br>\";\necho intersection(array(-1, 1), array(0, 4));\necho \"\
    <br>\";\necho intersection(array(-3, -1), array(-5, 5));\necho \"<br>\";\necho\
    \ intersection(array(3, 5), array(4, 6));\necho \"<br>\";\necho intersection(array(3,\
    \ 7), array(4, 6));\necho \"<br>\";", "    $start = max($interval1[0], $interval2[0]);\n\
    \    $end = min($interval1[1], $interval2[1]);\n    if ($start > $end) {\n   \
    \     return \"NO\";\n    }\n    $length = $end - $start + 1;\n    $arr = range(2,\
    \ $length);\n    foreach ($arr as $val) {\n        if ($length % $val == 0) {\n\
    \            return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n", "  \
    \  // find lowest and highest of the two intervals\n    $start = min($interval1[0],\
    \ $interval2[0]);\n    $end = max($interval1[1], $interval2[1]);\n    // check\
    \ if the lengths of the intervals are prime numbers\n    if (isPrime($interval1[1]\
    \ - $interval1[0]) &&\n        isPrime($interval2[1] - $interval2[0])) {\n   \
    \     return \"YES\";\n    }\n    // check if the intervals intersect\n    if\
    \ ($interval1[0] < $interval2[1] && $interval2[0] < $interval1[1]) {\n       \
    \ // check if the length of the intersection is a prime number\n        if (isPrime($interval2[1]\
    \ - $interval1[0]) ||\n            isPrime($interval1[1] - $interval2[0])) {\n\
    \            return \"YES\";\n        }\n    }\n    return \"NO\";\n}", "    if\
    \ ( $interval1[0] <= $interval2[0] ) {\n        $small = $interval1;\n       \
    \ $big = $interval2;\n    } else {\n        $small = $interval2;\n        $big\
    \ = $interval1;\n    }\n    if ( $small[1] < $big[0] ) {\n        return \"NO\"\
    ;\n    }\n    if ( $small[1] >= $big[0] && $small[1] <= $big[1] ) {\n        $intersection\
    \ = $small[1] - $big[0] + 1;\n    } else {\n        $intersection = $big[1] -\
    \ $big[0] + 1;\n    }\n    $isPrime = false;\n    for ($i = 2; $i < $intersection;\
    \ $i++) {\n        if ( $intersection % $i == 0 ) {\n            $isPrime = true;\n\
    \            break;\n        }\n    }\n    if ( $isPrime ) {\n        return \"\
    YES\";\n    } else {\n        return \"NO\";\n    }\n}\n\n$interval1 = array(rand(-100,\
    \ 100), rand(-100, 100));\n$interval2 = array(rand(-100, 100), rand(-100, 100));\n\
    \nprint_r($interval1);\nprint_r($interval2);\necho intersection($interval1, $interval2);",
  "  $start = max($interval1[0], $interval2[0]);\n  $end = min($interval1[1], $interval2[1]);\n\
    \  $length = $end - $start;\n  if($length < 1) return \"NO\";\n  if($length ==\
    \ 1) return \"YES\";\n  for($i = 2; $i < sqrt($length); $i++) {\n    if($length\
    \ % $i == 0) return \"NO\";\n  }\n  return \"YES\";\n}", "    $intersectionLength\
    \ = $interval1[1] - $interval2[0];\n    if ($intersectionLength < 0) {\n     \
    \   return \"NO\";\n    }\n    if ($intersectionLength == 0) {\n        return\
    \ \"YES\";\n    }\n    if ($intersectionLength == 1) {\n        return \"NO\"\
    ;\n    }\n    for ($i = 2; $i < $intersectionLength; $i++) {\n        if ($intersectionLength\
    \ % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return \"YES\"\
    ;\n}", "  $intervals = array($interval1, $interval2);\n  $lowest_start = NULL;\n\
    \  $highest_end = NULL;\n  foreach ($intervals as $interval) {\n    if (is_null($lowest_start)\
    \ || $interval[0] < $lowest_start) {\n      $lowest_start = $interval[0];\n  \
    \  }\n    if (is_null($highest_end) || $interval[1] > $highest_end) {\n      $highest_end\
    \ = $interval[1];\n    }\n  }\n  $intersection = array($lowest_start, $highest_end);\n\
    \  return ($intersection[0] < $intersection[1]) && is_prime($intersection[1] -\
    \ $intersection[0]) ? \"YES\" : \"NO\";\n}", "    $start = max($interval1[0],\
    \ $interval2[0]);\n    $end = min($interval1[1], $interval2[1]);\n    if ($start\
    \ > $end) {\n        return \"NO\";\n    }\n    return isPrime($end - $start)\
    \ ? \"YES\" : \"NO\";\n}\n", "\t$start = max($interval1[0], $interval2[0]);\n\t\
    $end = min($interval1[1], $interval2[1]);\n\tif ($start <= $end) {\n\t\treturn\
    \ isPrime($end - $start + 1) ? \"YES\" : \"NO\";\n\t}\n\treturn \"NO\";\n}", "\t\
    $intersectionLength = 0;\n\t$intersectionStart = 0;\n\t$intersectionEnd = 0;\n\
    \t$start1 = $interval1[0];\n\t$end1 = $interval1[1];\n\t$start2 = $interval2[0];\n\
    \t$end2 = $interval2[1];\n\t\n\t// check if intervals intersect\n\tif ($start1\
    \ > $end2 || $start2 > $end1) {\n\t\treturn \"NO\";\n\t}\n\t\n\t// check for intersection\
    \ length\n\tif ($start1 <= $start2 && $end1 >= $end2) {\n\t\t$intersectionLength\
    \ = $end2 - $start2;\n\t\t$intersectionStart = $start2;\n\t\t$intersectionEnd\
    \ = $end2;\n\t} else if ($start1 >= $start2 && $end1 <= $end2) {\n\t\t$intersectionLength\
    \ = $end1 - $start1;\n\t\t$intersectionStart = $start1;\n\t\t$intersectionEnd\
    \ = $end1;\n\t} else if ($start1 >= $start2 && $end1 >= $end2) {\n\t\t$intersectionLength\
    \ = $end2 - $start1;\n\t\t$intersectionStart = $start1;\n\t\t$intersectionEnd\
    \ = $end2;\n\t} else if ($start1 <= $start2 && $end1 <= $end2) {\n\t\t$intersectionLength\
    \ = $end1 - $start2;\n\t\t$intersectionStart = $start2;\n\t\t$intersectionEnd\
    \ = $end1;\n\t}\n\t\n\t// check if intersection length is prime\n\tif ($intersectionLength\
    \ == 1) {\n\t\treturn \"NO\";\n\t}\n\t\n\tfor ($i = 2; $i < $intersectionLength;\
    \ $i++) {\n\t\tif ($intersectionLength % $i == 0) {\n\t\t\treturn \"NO\";\n\t\t\
    }\n\t}\n\t\n\treturn \"YES\";\n}", "  $start = max($interval1[0], $interval2[0]);\n\
    \  $end = min($interval1[1], $interval2[1]);\n  if ($start > $end) {\n    return\
    \ \"NO\";\n  }\n  return isPrime($end - $start + 1) ? \"YES\" : \"NO\";\n}\n",
  "    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) {\n        return \"NO\";\n    }\n \
    \   $len = $end - $start + 1;\n    for ($i = 2; $i < $len; $i++) {\n        if\
    \ ($len % $i == 0) {\n            return \"NO\";\n        }\n    }\n    return\
    \ \"YES\";\n}\n\nvar_dump(intersection(array(1, 2), array(2, 3)));\nvar_dump(intersection(array(-1,\
    \ 1), array(0, 4)));\nvar_dump(intersection(array(-3, -1), array(-5, 5)));", " \
    \   //coding and coding..\n}\necho intersection(array(1, 2), array(2, 3));\necho\
    \ \"<br>\";\necho intersection(array(-1, 1), array(0, 4));\necho \"<br>\";\necho\
    \ intersection(array(-3, -1), array(-5, 5));\necho \"<br>\";\necho intersection(array(0,\
    \ 5), array(2, 4));\necho \"<br>\";\necho intersection(array(1, 2), array(0, 4));\n\
    echo \"<br>\";\necho intersection(array(1, 3), array(2, 4));\necho \"<br>\";\n\
    echo intersection(array(1, 3), array(3, 5));\necho \"<br>\";\necho intersection(array(2,\
    \ 3), array(3, 4));\necho \"<br>\";\necho intersection(array(0, 10), array(5,\
    \ 10));\necho \"<br>\";\necho intersection(array(0, 10), array(5, 12));\necho\
    \ \"<br>\";\necho intersection(array(3, 6), array(4, 5));\necho \"<br>\";\necho\
    \ intersection(array(1, 2), array(1, 2));\necho \"<br>\";\necho intersection(array(1,\
    \ 3), array(2, 3));\necho \"<br>\";\necho intersection(array(1, 2), array(2, 4));\n\
    echo \"<br>\";\necho intersection(array(0, 10), array(4, 5));\necho \"<br>\";\n\
    echo intersection(array(0, 10), array(4, 5));\necho \"<br>\";\necho intersection(array(0,\
    \ 10), array(4, 6));\necho \"<br>\";\necho intersection(array(0, 10), array(2,\
    \ 6));\necho \"<br>\";\necho intersection(array(0, 10), array(0, 11));\necho \"\
    <br>\";\necho intersection(array(1, 10), array(0, 11));\necho \"<br>\";\necho\
    \ intersection(array(0, 11), array(0, 11));\necho \"<br>\";\necho intersection(array(0,\
    \ 10), array(0, 10));\necho \"<br>\";\necho intersection(array(0, 10), array(2,\
    \ 5));\n", "    $firstInterval = [$interval1[0], $interval1[1]];\n    $secondInterval\
    \ = [$interval2[0], $interval2[1]];\n    asort($firstInterval);\n    asort($secondInterval);\n\
    \    $intersection = [\n        max($firstInterval[0], $secondInterval[0]),\n\
    \        min($firstInterval[1], $secondInterval[1])\n    ];\n    if ($intersection[0]\
    \ >= $intersection[1]) {\n        return \"NO\";\n    }\n    $length = abs($intersection[0]\
    \ - $intersection[1]) + 1;\n    $isPrime = true;\n    for ($i = 2; $i < $length;\
    \ $i++) {\n        if ($length % $i == 0) {\n            $isPrime = false;\n \
    \           break;\n        }\n    }\n    return $isPrime ? \"YES\" : \"NO\";\n\
    }", "  $length = max(min($interval1[1], $interval2[1]) - max($interval1[0], $interval2[0]),\
    \ 0);\n  return isPrime($length) ? \"YES\" : \"NO\";\n}\n", "\t// sort intervals\n\
    \tif ($interval1[0] > $interval1[1]) {\n\t\t$temp = $interval1[0];\n\t\t$interval1[0]\
    \ = $interval1[1];\n\t\t$interval1[1] = $temp;\n\t}\n\tif ($interval2[0] > $interval2[1])\
    \ {\n\t\t$temp = $interval2[0];\n\t\t$interval2[0] = $interval2[1];\n\t\t$interval2[1]\
    \ = $temp;\n\t}\n\t// find intersection\n\t$intersection = array(max($interval1[0],\
    \ $interval2[0]),\n\t\t\t\t\t\t  min($interval1[1], $interval2[1]));\n\tif ($intersection[0]\
    \ > $intersection[1]) {\n\t\treturn \"NO\";\n\t}\n\t// check if prime number\n\
    \t$length = $intersection[1] - $intersection[0] + 1;\n\tif ($length < 2) {\n\t\
    \treturn \"NO\";\n\t}\n\t$half = $length / 2;\n\tfor ($i = 2; $i <= $half; $i++)\
    \ {\n\t\tif ($length % $i == 0) {\n\t\t\treturn \"NO\";\n\t\t}\n\t}\n\treturn\
    \ \"YES\";\n}", "    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start > $end) return \"NO\";\n    return isPrime($end\
    \ - $start + 1) ? \"YES\" : \"NO\";\n}", "  $interval3 = array();\n  $interval3[0]\
    \ = $interval1[0] < $interval2[0] ? $interval2[0] : $interval1[0];\n  $interval3[1]\
    \ = $interval1[1] < $interval2[1] ? $interval1[1] : $interval2[1];\n  if ($interval3[0]\
    \ > $interval3[1]) {\n    return \"NO\";\n  }\n  $length = $interval3[1] - $interval3[0]\
    \ + 1;\n  if ($length == 1) {\n    return \"NO\";\n  }\n  return $length == 2\
    \ || $length == 3 || $length == 5 || $length == 7 ? \"YES\" : \"NO\";\n}\n", " \
    \ list($start1, $end1) = $interval1;\n  list($start2, $end2) = $interval2;\n \
    \ // If the intervals do not intersect, return \"NO\".\n  if (($start1 < $start2\
    \ && $end1 < $start2) ||\n      ($start1 > $end2 && $end1 > $end2)) {\n    return\
    \ \"NO\";\n  }\n  $start = max($start1, $start2);\n  $end = min($end1, $end2);\n\
    \  $length = $end - $start + 1;\n  if ($length <= 1) {\n    return \"NO\";\n \
    \ }\n  for ($i = 2; $i < $length; $i++) {\n    if ($length % $i == 0) {\n    \
    \  return \"NO\";\n    }\n  }\n  return \"YES\";\n}", "    $intersectStart = max($interval1[0],\
    \ $interval2[0]);\n    $intersectEnd = min($interval1[1], $interval2[1]);\n  \
    \  if ($intersectStart > $intersectEnd) {\n        return \"NO\";\n    }\n   \
    \ if ($intersectStart == $intersectEnd) {\n        return isPrime($intersectStart)\
    \ ? \"YES\" : \"NO\";\n    }\n    return isPrime($intersectEnd - $intersectStart\
    \ + 1) ? \"YES\" : \"NO\";\n}", "  $arr = [$interval1[0], $interval1[1], $interval2[0],\
    \ $interval2[1]];\n  sort($arr);\n  if($arr[1] < $arr[2]) {\n    $intersect =\
    \ $arr[2] - $arr[1];\n    if($intersect == 1) {\n      return \"NO\";\n    }\n\
    \    for($i = 2; $i < $intersect; $i++) {\n      if($intersect % $i == 0) {\n\
    \        return \"NO\";\n      }\n    }\n    return \"YES\";\n  }\n  return \"\
    NO\";\n}\n\necho intersection([1, 2], [2, 3]);\necho \"\\n\";\necho intersection([-1,\
    \ 1], [0, 4]);\necho \"\\n\";\necho intersection([-3, -1], [-5, 5]);\necho \"\\\
    n\";\necho intersection([2, 3], [0, 1]);\necho \"\\n\";\necho intersection([1,\
    \ 2], [0, 1]);\necho \"\\n\";\necho intersection([0, 1], [0, 4]);\necho \"\\n\"\
    ;\necho intersection([1, 1], [0, 0]);\necho \"\\n\";\necho intersection([2, 3],\
    \ [0, 2]);\necho \"\\n\";\necho intersection([2, 3], [0, 3]);\necho \"\\n\";\n\
    echo intersection([1, 2], [0, 2]);\necho \"\\n\";\necho intersection([1, 2], [0,\
    \ 1]);\necho \"\\n\";\necho intersection([2, 3], [0, 1]);\necho \"\\n\";\necho\
    \ intersection([2, 3], [1, 2]);\necho \"\\n\";\necho intersection([2, 3], [1,\
    \ 3]);\necho \"\\n\";\necho intersection([1, 2], [1, 2]);\necho \"\\n\";\necho\
    \ intersection([1, 3], [1, 3]);\necho \"\\n\";\necho intersection([-3, -1], [-3,\
    \ -1]);\necho \"\\n\";\necho intersection([-3, -1], [-2, -1]);\necho \"\\n\";\n\
    echo intersection([-3, -1], [-1, 0]);\necho \"\\n\";\necho intersection([-", " \
    \ $a = $interval1[0];\n  $b = $interval1[1];\n  $c = $interval2[0];\n  $d = $interval2[1];\n\
    \  $p = 2;\n  if($b < $c || $a > $d) return \"NO\";\n  $e = max($a, $c);\n  $f\
    \ = min($b, $d);\n  $g = $f - $e + 1;\n  if($g <= 1) return \"NO\";\n  while($p\
    \ < $g){\n    if($g % $p == 0) return \"NO\";\n    $p++;\n  }\n  return \"YES\"\
    ;\n}\necho intersection(array(1, 2), array(2, 3));\necho \"<br>\";\necho intersection(array(-1,\
    \ 1), array(0, 4));\necho \"<br>\";\necho intersection(array(-3, -1), array(-5,\
    \ 5));", "  $length1 = abs($interval1[0] - $interval1[1]);\n  $length2 = abs($interval2[0]\
    \ - $interval2[1]);\n  $intervalMax = [max($interval1[0], $interval2[0]), min($interval1[1],\
    \ $interval2[1])];\n  $length3 = abs($intervalMax[0] - $intervalMax[1]);\n  $interval\
    \ = [min($interval1[0], $interval2[0]), max($interval1[1], $interval2[1])];\n\
    \  $length = abs($interval[0] - $interval[1]);\n  if($length1 == 0 || $length2\
    \ == 0) return \"NO\";\n  if($length3 == 0) return \"NO\";\n  if($length % 2 ==\
    \ 0) return \"NO\";\n  for($i = 3; $i <= sqrt($length); $i++){\n    if($length\
    \ % $i == 0) return \"NO\";\n  }\n  return \"YES\";\n}", "    // Your code here\n\
    }", "  // your code here\n  $intersect = range(max($interval1[0], $interval2[0]),\
    \ min($interval1[1], $interval2[1]));\n  return check($intersect);\n}\n", "\t\
    $start1 = $interval1[0];\n\t$end1 = $interval1[1];\n\t$start2 = $interval2[0];\n\
    \t$end2 = $interval2[1];\n\tif(($start1 >= $end2) || ($start2 >= $end1)) {\n\t\
    \treturn \"NO\";\n\t} else if ((($start1 <= $start2) && ($end1 <= $end2)) || (($start2\
    \ <= $start1) && ($end2 <= $end1))) {\n\t\t$result = $start2 - $start1;\n\t\t\
    if($result <= 0) {\n\t\t\t$result = $start1 - $start2;\n\t\t}\n\t\treturn isPrime($result)\
    \ ? \"YES\" : \"NO\";\n\t} else if(($start1 <= $start2) && ($end1 >= $end2)) {\n\
    \t\t$result = $end2 - $start2;\n\t\treturn isPrime($result) ? \"YES\" : \"NO\"\
    ;\n\t} else if(($start2 <= $start1) && ($end2 >= $end1)) {\n\t\t$result = $end1\
    \ - $start1;\n\t\treturn isPrime($result) ? \"YES\" : \"NO\";\n\t}\n}\n", "  $start\
    \ = max($interval1[0], $interval2[0]);\n  $end = min($interval1[1], $interval2[1]);\n\
    \  $length = $end - $start;\n  if ($length > 0) {\n    if (isPrime($length)) {\n\
    \      return \"YES\";\n    }\n  }\n  return \"NO\";\n}\n", "    $range1 = range($interval1[0],\
    \ $interval1[1]);\n    $range2 = range($interval2[0], $interval2[1]);\n    $intersection\
    \ = array_intersect($range1, $range2);\n    $length = count($intersection);\n\
    \    if ($length == 0) {\n        return \"NO\";\n    } else if ($length == 1)\
    \ {\n        return \"NO\";\n    } else {\n        $primeFlag = true;\n      \
    \  for ($i = 2; $i < $length; $i++) {\n            if ($length % $i == 0) {\n\
    \                $primeFlag = false;\n                break;\n            }\n\
    \        }\n        if ($primeFlag) {\n            return \"YES\";\n        }\
    \ else {\n            return \"NO\";\n        }\n    }\n}", "    $min = max($interval1[0],\
    \ $interval2[0]);\n    $max = min($interval1[1], $interval2[1]);\n    $result\
    \ = \"NO\";\n    if ($min <= $max) {\n        if ($min == 1 || $min == 2) {\n\
    \            $result = \"YES\";\n        } else {\n            for ($i = 2; $i\
    \ < $min; $i++) {\n                if ($min % $i == 0) {\n                   \
    \ break;\n                }\n            }\n            if ($i == $min) {\n  \
    \              $result = \"YES\";\n            }\n        }\n    }\n    return\
    \ $result;\n}", "  $new_array = array();\n  $new_array[] = $interval1[0];\n  $new_array[]\
    \ = $interval1[1];\n  $new_array[] = $interval2[0];\n  $new_array[] = $interval2[1];\n\
    \  sort($new_array);\n  $new_array = array_unique($new_array);\n  $diff = count($new_array)\
    \ - 2;\n  if($diff == 0){\n    return \"NO\";\n  }else{\n    $result = checkPrime($diff);\n\
    \    if($result == 1){\n      return \"YES\";\n    }else{\n      return \"NO\"\
    ;\n    }\n  }\n}", "    $interval1 = range($interval1[0], $interval1[1]);\n  \
    \  $interval2 = range($interval2[0], $interval2[1]);\n    $intersection = array_intersect($interval1,\
    \ $interval2);\n    return count($intersection) > 0 && isPrime(count($intersection))\
    \ ? 'YES' : 'NO';\n}\n", "    $list = array_unique(array_merge($interval1, $interval2));\n\
    \    sort($list);\n    $start = 0;\n    $end = 0;\n    for ($i = 0; $i < count($list)\
    \ - 1; $i++) {\n        if (in_array($list[$i], $interval1) && in_array($list[$i\
    \ + 1], $interval1)) {\n            $start = $list[$i];\n            $end = $list[$i\
    \ + 1];\n        }\n    }\n    $length = abs($start - $end) + 1;\n    if ($length\
    \ == 1) return \"NO\";\n    if ($length == 2) return \"YES\";\n    for ($i = 2;\
    \ $i < sqrt($length); $i++) {\n        if ($length % $i == 0) return \"NO\";\n\
    \    }\n    return \"YES\";\n}\n\nprint(intersection(array(1, 2), array(2, 3))\
    \ . \"\\n\");\nprint(intersection(array(-1, 1), array(0, 4)) . \"\\n\");\nprint(intersection(array(-3,\
    \ -1), array(-5, 5)) . \"\\n\");", "\t$start1 = $interval1[0];\n\t$end1 = $interval1[1];\n\
    \t$start2 = $interval2[0];\n\t$end2 = $interval2[1];\n\tif($start1 >= $end2 ||\
    \ $start2 >= $end1) {\n\t\treturn \"NO\";\n\t}\n\t$minStart = min($start1, $start2);\n\
    \t$maxEnd = max($end1, $end2);\n\t$num = 0;\n\tfor($i = $minStart; $i <= $maxEnd;\
    \ $i++) {\n\t\tif($i >= $start1 && $i <= $end1 && $i >= $start2 && $i <= $end2)\
    \ {\n\t\t\t$num++;\n\t\t}\n\t}\n\t$flag = true;\n\tfor($i = 2; $i < $num; $i++)\
    \ {\n\t\tif($num % $i == 0) {\n\t\t\t$flag = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\
    \tif($flag) {\n\t\treturn \"YES\";\n\t}\n\treturn \"NO\";\n}", "    $a = max($interval1[0],\
    \ $interval2[0]);\n    $b = min($interval1[1], $interval2[1]);\n    $length =\
    \ $b - $a;\n    if ($length < 0) {\n        return \"NO\";\n    } else if ($length\
    \ == 1 || $length == 2) {\n        return \"YES\";\n    } else {\n        for\
    \ ($i = 2; $i < $length; $i++) {\n            if ($length % $i == 0) {\n     \
    \           return \"NO\";\n            }\n        }\n        return \"YES\";\n\
    \    }\n}\n", "    // Your code here\n    // var_dump($interval1);\n    // var_dump($interval2);\n\
    \    // $inter = array_intersect($interval1, $interval2);\n    // $len = count($inter);\n\
    \    // if ($len == 0) {\n    //     return \"NO\";\n    // }\n    // $i = 2;\n\
    \    // while ($i <= $len) {\n    //     if ($len % $i == 0) {\n    //       \
    \  return \"NO\";\n    //     }\n    //     $i++;\n    // }\n    // return \"\
    YES\";\n    list($a, $b) = $interval1;\n    list($c, $d) = $interval2;\n    if\
    \ ($b <= $c || $d <= $a) {\n        return \"NO\";\n    }\n    $len = min($b,\
    \ $d) - max($a, $c);\n    if ($len <= 1) {\n        return \"NO\";\n    }\n  \
    \  for ($i = 2; $i < $len; $i++) {\n        if ($len % $i == 0) {\n          \
    \  return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\necho intersection(array(1,\
    \ 2), array(2, 3)) . \"\\n\";\necho intersection(array(-1, 1), array(0, 4)) .\
    \ \"\\n\";\necho intersection(array(-3, -1), array(-5, 5)) . \"\\n\";\necho intersection(array(0,\
    \ 4), array(1, 2)) . \"\\n\";\necho intersection(array(1, 3), array(2, 4)) . \"\
    \\n\";\necho intersection(array(3, 9), array(4, 8)) . \"\\n\";\necho intersection(array(1,\
    \ 10), array(11, 20)) . \"\\n\";\necho intersection(array(100, 200), array(100,\
    \ 200)) . \"\\n\";\necho intersection(array(1, 5), array(3, 7)) . \"\\n\";\necho\
    \ intersection(array(1, 2), array(3, 4)) . \"\\n\";\necho intersection(array(1,\
    \ 5), array(7, 9)) . \"\\n\";\necho intersection", "    $intervals = func_get_args();\n\
    \    $x = min(call_user_func_array('max', $intervals));\n    $y = max(call_user_func_array('min',\
    \ $intervals));\n    $length = $x - $y;\n    $res = 'NO';\n    if($length > 0)\
    \ {\n        for($i = 2; $i < $length; $i++) {\n            if($length % $i ==\
    \ 0) {\n                $res = 'NO';\n                break;\n            } else\
    \ {\n                $res = 'YES';\n            }\n        }\n    }\n    return\
    \ $res;\n}\necho intersection(array(1, 2), array(2, 3));\necho \"\\n\";\necho\
    \ intersection(array(-1, 1), array(0, 4));\necho \"\\n\";\necho intersection(array(-3,\
    \ -1), array(-5, 5));\necho \"\\n\";", "    $min = max($interval1[0], $interval2[0]);\n\
    \    $max = min($interval1[1], $interval2[1]);\n    $length = $max - $min;\n \
    \   if($length < 1) {\n        return \"NO\";\n    }\n    if(isPrime($length))\
    \ {\n        return \"YES\";\n    }\n    return \"NO\";\n}", "  $interval1Start\
    \ = $interval1[0];\n  $interval1End = $interval1[1];\n  $interval2Start = $interval2[0];\n\
    \  $interval2End = $interval2[1];\n  if ($interval1Start > $interval1End || $interval2Start\
    \ > $interval2End) {\n    return \"NO\";\n  }\n  if ($interval1Start <= $interval2Start\
    \ && $interval2Start <= $interval1End && $interval1End <= $interval2End) {\n \
    \   $intersectionLength = $interval1End - $interval2Start + 1;\n  } else if ($interval2Start\
    \ <= $interval1Start && $interval1Start <= $interval2End && $interval2End <= $interval1End)\
    \ {\n    $intersectionLength = $interval2End - $interval1Start + 1;\n  } else\
    \ if ($interval1Start <= $interval2Start && $interval2End <= $interval1End) {\n\
    \    $intersectionLength = $interval2End - $interval2Start + 1;\n  } else if ($interval2Start\
    \ <= $interval1Start && $interval1End <= $interval2End) {\n    $intersectionLength\
    \ = $interval1End - $interval1Start + 1;\n  } else {\n    return \"NO\";\n  }\n\
    \  if ($intersectionLength <= 1) {\n    return \"NO\";\n  }\n  for ($i = 2; $i\
    \ < $intersectionLength; $i++) {\n    if ($intersectionLength % $i == 0) {\n \
    \     return \"NO\";\n    }\n  }\n  return \"YES\";\n}", "\t// $interval1 = array(1,\
    \ 2);\n\t// $interval2 = array(2, 3);\n\t// $interval1 = array(-1, 1);\n\t// $interval2\
    \ = array(0, 4);\n\t// $interval1 = array(-3, -1);\n\t// $interval2 = array(-5,\
    \ 5);\n\t$arr = array();\n\t$start = max($interval1[0], $interval2[0]);\n\t$end\
    \ = min($interval1[1], $interval2[1]);\n\t// If end < start (i.e. end is less\
    \ than start), \n\t// there is no intersection.\n\tif ($end < $start) {\n\t\t\
    return \"NO\";\n\t}\n\t// If the two intervals don't intersect, return \"NO\"\
    .\n\t// $start and $end are the same\n\tif ($start == $end) {\n\t\treturn \"NO\"\
    ;\n\t}\n\n\t$arr = range($start, $end);\n\t$count = count($arr);\n\t$arr = isPrime($count);\n\
    \tif ($arr) {\n\t\treturn \"YES\";\n\t}\n\treturn \"NO\";\n}\n", "  $count1 =\
    \ $interval1[1] - $interval1[0];\n  $count2 = $interval2[1] - $interval2[0];\n\
    \  $count3 = 0;\n  $start = array($interval1[0], $interval2[0]);\n  $end = array($interval1[1],\
    \ $interval2[1]);\n  sort($start);\n  sort($end);\n  $start = array_unique($start);\n\
    \  $end = array_unique($end);\n  if ($end[0] < $start[1]) return \"NO\";\n  if\
    \ (max($start) < min($end)) {\n    $count3 = (min($end) - max($start));\n  }\n\
    \  $total = $count1 + $count2 - $count3;\n  if ($total < 2) return \"NO\";\n \
    \ if ($total == 2) return \"YES\";\n  for ($i = 2; $i < sqrt($total); $i++) {\n\
    \    if ($total % $i == 0) return \"NO\";\n  }\n  return \"YES\";\n}", "    if\
    \ ($interval1[0] > $interval2[1] || $interval2[0] > $interval1[1])\n        return\
    \ \"NO\";\n    $minIntersect = max($interval1[0], $interval2[0]);\n    $maxIntersect\
    \ = min($interval1[1], $interval2[1]);\n    $lenIntersect = $maxIntersect - $minIntersect\
    \ + 1;\n    $num = 1;\n    for ($i = 2; $i <= sqrt($lenIntersect); $i++) {\n \
    \       if ($lenIntersect % $i == 0) {\n            $num++;\n        }\n    }\n\
    \    if ($num <= 2)\n        return \"YES\";\n    return \"NO\";\n}", "    $interval_a\
    \ = max($interval1[0], $interval2[0]);\n    $interval_b = min($interval1[1], $interval2[1]);\n\
    \    if (($interval_b - $interval_a) < 0) {\n        return \"NO\";\n    }\n \
    \   return is_prime($interval_b - $interval_a) ? \"YES\" : \"NO\";\n}\n", "  $left\
    \ = max($interval1[0], $interval2[0]);\n  $right = min($interval1[1], $interval2[1]);\n\
    \  $length = $right - $left;\n  if ($length < 0) {\n    return \"NO\";\n  }\n\
    \  for ($i = 2; $i <= $length; $i++) {\n    if ($length % $i == 0) {\n      return\
    \ \"NO\";\n    }\n  }\n  return \"YES\";\n}\necho intersection(array(1, 2), array(2,\
    \ 3)) . \"\\n\";\necho intersection(array(-1, 1), array(0, 4)) . \"\\n\";\necho\
    \ intersection(array(-3, -1), array(-5, 5)) . \"\\n\";", "\tif ($interval1[0]\
    \ <= $interval2[0] && $interval2[0] <= $interval1[1]) {\n\t\t$intersection = ($interval1[1]\
    \ - $interval2[0]) + 1;\n\t} elseif ($interval2[0] <= $interval1[0] && $interval1[0]\
    \ <= $interval2[1]) {\n\t\t$intersection = ($interval2[1] - $interval1[0]) + 1;\n\
    \t} else {\n\t\treturn \"NO\";\n\t}\n\tif (isPrime($intersection)) {\n\t\treturn\
    \ \"YES\";\n\t} else {\n\t\treturn \"NO\";\n\t}\n}", "  $start = max($interval1[0],\
    \ $interval2[0]);\n  $end = min($interval1[1], $interval2[1]);\n  $diff = $end\
    \ - $start;\n  if ($diff < 0) return \"NO\";\n  $i = 2;\n  $isPrime = true;\n\
    \  while ($i < $diff) {\n    if ($diff % $i == 0) {\n      $isPrime = false;\n\
    \      break;\n    }\n    $i++;\n  }\n  return $isPrime ? \"YES\" : \"NO\";\n}",
  "    $intervals = array($interval1, $interval2);\n    $min_start = min(array_column($intervals,\
    \ 0));\n    $max_end = max(array_column($intervals, 1));\n    $intersection =\
    \ array($min_start, $max_end);\n    $width = $intersection[1] - $intersection[0];\n\
    \    if ($width <= 0) {\n        return \"NO\";\n    }\n    return is_prime($width)\
    \ ? \"YES\" : \"NO\";\n}", "    $min = max($interval1[0], $interval2[0]);\n  \
    \  $max = min($interval1[1], $interval2[1]);\n    if ($min > $max) {\n       \
    \ return \"NO\";\n    }\n    if (isPrime($max - $min + 1)) {\n        return \"\
    YES\";\n    }\n    return \"NO\";\n}", "  // your code here.\n  // when are intervals\
    \ intersecting?\n  // rules:\n  // if interval1[0] < interval2[0] and interval1[1]\
    \ > interval2[0]\n  // then they are intersecting\n  // if interval1[0] > interval2[0]\
    \ and interval1[0] < interval2[1]\n  // then they are intersecting\n  // otherwise\
    \ they are not intersecting.\n  // if they are intersecting, find the length of\
    \ the intersection\n  // check if the length is a prime number, if so return \"\
    YES\",\n  // if not, return \"NO\".\n  // if they are not intersecting, return\
    \ \"NO\".\n  if ($interval1[0] < $interval2[0] && $interval1[1] > $interval2[0])\
    \ {\n    $intersection = [$interval2[0], $interval1[1]];\n  } else if ($interval1[0]\
    \ > $interval2[0] && $interval1[0] < $interval2[1]) {\n    $intersection = [$interval1[0],\
    \ $interval2[1]];\n  } else {\n    return \"NO\";\n  }\n  // now that we have\
    \ an intersection, let's figure out its length\n  $length = $intersection[1] -\
    \ $intersection[0];\n  // now let's check if the length is a prime number, if\
    \ so return \"YES\",\n  // if not, return \"NO\".\n  // we can use the isPrime()\
    \ function, which we have already defined\n  // in previous exercises.\n  if (isPrime($length))\
    \ {\n    return \"YES\";\n  } else {\n    return \"NO\";\n  }\n}\n", "  // Your\
    \ code here\n}\n\necho \"\\n\";\necho intersection(array(1, 2), array(2, 3));\
    \ // NO\necho \"\\n\";\necho intersection(array(-1, 1), array(0, 4)); // NO\n\
    echo \"\\n\";\necho intersection(array(-3, -1), array(-5, 5)); // YES\necho \"\
    \\n\";\necho intersection(array(1, 3), array(2, 4)); // YES\necho \"\\n\";\n",
  "    $interval1 = (array) $interval1;\n    $interval2 = (array) $interval2;\n  \
    \  $s = array();\n    $e = array();\n    if($interval1[0] < $interval2[0]) {\n\
    \        $s = $interval1;\n        $e = $interval2;\n    } else {\n        $s\
    \ = $interval2;\n        $e = $interval1;\n    }\n    if($s[1] >= $e[0]) {\n \
    \       $i = array($e[0], $s[1]);\n        $l = ($i[1] - $i[0] + 1);\n       \
    \ return isPrime($l) ? \"YES\" : \"NO\";\n    }\n    return \"NO\";\n}", "  $intersection\
    \ = array();\n  $intersection[] = max($interval1[0], $interval2[0]);\n  $intersection[]\
    \ = min($interval1[1], $interval2[1]);\n  if ($intersection[0] >= $intersection[1])\
    \ return \"NO\";\n  $length = $intersection[1] - $intersection[0];\n  if (isPrime($length))\
    \ return \"YES\";\n  return \"NO\";\n}", "    // Write your code here\n    //\
    \ To print results to the standard output you can use print\n    // Example: print\
    \ \"Hello world!\";\n    $newInterval = array();\n    $newInterval[0] = max($interval1[0],\
    \ $interval2[0]);\n    $newInterval[1] = min($interval1[1], $interval2[1]);\n\
    \    if($newInterval[0] > $newInterval[1])\n        return \"NO\";\n    $i = $newInterval[0];\n\
    \    $isPrime = true;\n    while($i <= $newInterval[1]){\n        if($i > 1){\n\
    \            $j = 2;\n            while($j < $i){\n                if($i % $j\
    \ == 0){\n                    $isPrime = false;\n                    break;\n\
    \                }\n                $j++;\n            }\n        }\n        if($isPrime){\n\
    \            return \"YES\";\n        }\n        $i++;\n    }\n    return \"NO\"\
    ;\n}\necho intersection(array(1, 2), array(2, 3));", "\t\n\t$start = max($interval1[0],\
    \ $interval2[0]);\n\t$end = min($interval1[1], $interval2[1]);\n\t\n\tif ($start\
    \ > $end) {\n\t\treturn \"NO\";\n\t}\n\t\n\t$length = $end - $start + 1;\n\t\n\
    \t$isPrime = true;\n\tfor ($i = 2; $i <= ceil($length / 2); $i++) {\n\t\tif ($length\
    \ % $i == 0) {\n\t\t\t$isPrime = false;\n\t\t\tbreak;\n\t\t}\n\t}\n\t\n\treturn\
    \ $isPrime ? \"YES\" : \"NO\";\n}\n", "    if ($interval1[0] > $interval2[1] ||\
    \ $interval2[0] > $interval1[1]) {\n        return \"NO\";\n    }\n    $intersection\
    \ = array_values(array_unique(array_merge($interval1, $interval2)));\n    $distance\
    \ = (int) abs($intersection[0] - $intersection[1]);\n    $i = 2;\n    while ($i\
    \ <= $distance / 2) {\n        if ($distance % $i == 0) {\n            return\
    \ \"NO\";\n        }\n        $i++;\n    }\n    return \"YES\";\n}", "  $newInterval\
    \ = [];\n  $newInterval[0] = max($interval1[0], $interval2[0]);\n  $newInterval[1]\
    \ = min($interval1[1], $interval2[1]);\n  $length = $newInterval[1] - $newInterval[0];\n\
    \  if ($length < 0) return \"NO\";\n  $primes = [2, 3, 5, 7, 11, 13, 17, 19, 23,\
    \ 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97];\n  return in_array($length,\
    \ $primes) ? \"YES\" : \"NO\";\n}", "    //---add code---\n    if($interval1[0]>$interval2[1]\
    \ || $interval2[0]>$interval1[1]){\n      return \"NO\";\n    }\n    $length =\
    \ abs($interval1[0]-$interval2[0]);\n    if($length>1 && isPrime($length)){\n\
    \      return \"YES\";\n    }\n    $length = abs($interval1[1]-$interval2[1]);\n\
    \    if($length>1 && isPrime($length)){\n      return \"YES\";\n    }\n    return\
    \ \"NO\";\n}", "\t$intersection = array();\n\t$intersection[0] = max($interval1[0],\
    \ $interval2[0]);\n\t$intersection[1] = min($interval1[1], $interval2[1]);\n\t\
    $length = $intersection[1] - $intersection[0];\n\tif ($length < 0) {\n\t\treturn\
    \ \"NO\";\n\t}\n\tfor ($i = 2; $i < $length; $i++) {\n\t\tif ($length % $i ==\
    \ 0) {\n\t\t\treturn \"NO\";\n\t\t}\n\t}\n\treturn \"YES\";\n}\n", "  $result\
    \ = \"NO\";\n  $start1 = $interval1[0];\n  $end1 = $interval1[1];\n  $start2 =\
    \ $interval2[0];\n  $end2 = $interval2[1];\n  if ($start1 > $end1) {\n    list($start1,\
    \ $end1) = [$end1, $start1];\n  }\n  if ($start2 > $end2) {\n    list($start2,\
    \ $end2) = [$end2, $start2];\n  }\n  if ($start1 <= $end2 && $start2 <= $end1)\
    \ {\n    $start = max($start1, $start2);\n    $end = min($end1, $end2);\n    $length\
    \ = $end - $start + 1;\n    if ($length > 1) {\n      for ($i = 2; $i < $length;\
    \ $i++) {\n        if ($length % $i == 0) {\n          break;\n        }\n   \
    \   }\n      if ($i == $length) {\n        $result = \"YES\";\n      }\n    }\n\
    \  }\n  return $result;\n}", "  // Input a start time, an end time,\n  // and\
    \ an array of intervals.\n  // Return the length of the intersection of the given\
    \ interval with the intervals.\n  // If the two intervals don't intersect, return\
    \ \"NO\".\n  // If the length of the intersection is a prime number, return \"\
    YES\",\n  // otherwise, return \"NO\".\n  // If the given interval's start is\
    \ greater than its end,\n  // or if any of the intervals' starts is greater than\
    \ its end,\n  // return \"INVALID INPUT\".\n  $minStart = max($interval1[0], $interval2[0]);\n\
    \  $maxEnd = min($interval1[1], $interval2[1]);\n  if ($minStart > $maxEnd) {\n\
    \    return \"NO\";\n  }\n  $intersectionLength = $maxEnd - $minStart + 1;\n \
    \ return isPrime($intersectionLength) ? \"YES\" : \"NO\";\n}\n", "\t$array1 =\
    \ range($interval1[0], $interval1[1]);\n\t$array2 = range($interval2[0], $interval2[1]);\n\
    \t$intersection = array_intersect($array1, $array2);\n\tif (count($intersection)\
    \ == 0) {\n\t\treturn \"NO\";\n\t}\n\t$s = $intersection[0];\n\t$e = end($intersection);\n\
    \tif (isPrime($e - $s + 1)) {\n\t\treturn \"YES\";\n\t}\n\treturn \"NO\";\n}\n",
  "    // compare the start and end of both intervals\n    // if the first interval\
    \ is not between the start and end of the second interval,\n    // there is no\
    \ intersection\n    if ($interval1[0] < $interval2[0] && $interval1[1] < $interval2[0])\
    \ {\n        return \"NO\";\n    }\n    if ($interval1[0] > $interval2[1] && $interval1[1]\
    \ > $interval2[1]) {\n        return \"NO\";\n    }\n    // the intersection is\
    \ the two numbers which are not less than the \n    // smaller number and not\
    \ greater than the larger number\n    $intersection = array(max($interval1[0],\
    \ $interval2[0]), min($interval1[1], $interval2[1]));\n    // calculate the difference\
    \ between the two numbers\n    $length = $intersection[1] - $intersection[0];\n\
    \    // test if the length is prime\n    if (isPrime($length)) {\n        return\
    \ \"YES\";\n    }\n    return \"NO\";\n}\n", "    $a = max($interval1[0], $interval2[0]);\n\
    \    $b = min($interval1[1], $interval2[1]);\n    if ($a > $b) {\n        return\
    \ \"NO\";\n    }\n    if ($a == $b) {\n        return \"YES\";\n    }\n    $i\
    \ = 2;\n    $sqrt = sqrt($b - $a + 1);\n    while ($i <= $sqrt) {\n        if\
    \ (($b - $a + 1) % $i == 0) {\n            return \"NO\";\n        }\n       \
    \ $i++;\n    }\n    return \"YES\";\n}", "\t$intersect_len = min($interval1[1],\
    \ $interval2[1]) - max($interval1[0], $interval2[0]);\n\t\n\tif ($intersect_len\
    \ <= 0) {\n\t\treturn \"NO\";\n\t}\n\t\n\tfor ($i = 2; $i <= sqrt($intersect_len);\
    \ $i++) {\n\t\tif ($intersect_len % $i == 0) {\n\t\t\treturn \"NO\";\n\t\t}\n\t\
    }\n\t\n\treturn \"YES\";\n}\n\nfor ($i = 0; $i < count($tests); $i++) {\n\t$interval1\
    \ = $tests[$i][\"interval1\"];\n\t$interval2 = $tests[$i][\"interval2\"];\n\t\
    $expected = $tests[$i][\"expected\"];\n\t\n\t$result = intersection($interval1,\
    \ $interval2);\n\t\n\tif ($result == $expected) {\n\t\techo \"Test $i: SUCCESS<br>\"\
    ;\n\t} else {\n\t\techo \"Test $i: FAILED<br>\";\n\t}\n}", "  if($interval1[0]\
    \ > $interval2[1] || $interval2[0] > $interval1[1]) {\n    return \"NO\";\n  }\
    \ else {\n    $length = abs($interval1[0] - $interval2[1]);\n    $primeNumbers\
    \ = array(1, 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,\
    \ 67, 71, 73, 79, 83, 89, 97);\n    if(in_array($length, $primeNumbers)) {\n \
    \     return \"YES\";\n    } else {\n      return \"NO\";\n    }\n  }\n}", "\t\
    $int1 = $interval1[1] - $interval1[0];\n\t$int2 = $interval2[1] - $interval2[0];\n\
    \t$int = min($interval1[1], $interval2[1]) - max($interval1[0], $interval2[0]);\n\
    \tif ($int <= 0) {\n\t\treturn \"NO\";\n\t}\n\treturn isPrime($int) ? \"YES\"\
    \ : \"NO\";\n}\n", "  $primeArr = array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97);\n  $a = max($interval1[0],\
    \ $interval2[0]);\n  $b = min($interval1[1], $interval2[1]);\n  $len = $b - $a\
    \ + 1;\n  if($len <= 0) {\n    return \"NO\";\n  } else {\n    return in_array($len,\
    \ $primeArr) ? \"YES\" : \"NO\";\n  }\n}", "    $start = max($interval1[0], $interval2[0]);\n\
    \    $end = min($interval1[1], $interval2[1]);\n    $intersection = ($end - $start)\
    \ + 1;\n    if ($intersection < 0) return \"NO\";\n    if ($intersection < 2)\
    \ return \"NO\";\n    for ($i = 2; $i < $intersection; $i++) {\n        if ($intersection\
    \ % $i == 0) return \"NO\";\n    }\n    return \"YES\";\n}", "    // your code\
    \ here\n}\n", "  $intersection = [max($interval1[0], $interval2[0]), min($interval1[1],\
    \ $interval2[1])];\n  if($intersection[0] > $intersection[1]) return \"NO\";\n\
    \  $length = $intersection[1] - $intersection[0] + 1;\n  if($length === 1) return\
    \ \"NO\";\n  for($i = 2; $i <= sqrt($length); $i++) {\n    if($length % $i ===\
    \ 0) return \"NO\";\n  }\n  return \"YES\";\n}\n\necho intersection([-3, -1],\
    \ [-5, 5]);", "    $i1 = range($interval1[0], $interval1[1]);\n    $i2 = range($interval2[0],\
    \ $interval2[1]);\n    $intersected = array_intersect($i1, $i2);\n    if (count($intersected)\
    \ == 0) {\n        return \"NO\";\n    }\n    $length = count($intersected);\n\
    \    if ($length < 2) {\n        return \"YES\";\n    }\n    for ($i = 2; $i <\
    \ $length; $i++) {\n        if ($length % $i == 0) {\n            return \"NO\"\
    ;\n        }\n    }\n    return \"YES\";\n}", "    $a = $interval1[0];\n    $b\
    \ = $interval1[1];\n    $c = $interval2[0];\n    $d = $interval2[1];\n    if($a\
    \ < $c) {\n        $e = $b;\n        $f = $d;\n    } else {\n        $e = $d;\n\
    \        $f = $b;\n    }\n    $inter = $e - $f;\n    if($inter <= 0) {\n     \
    \   return \"NO\";\n    }\n    $flag = \"NO\";\n    for($i = 2; $i < $inter; $i++)\
    \ {\n        if($inter % $i == 0) {\n            $flag = \"YES\";\n          \
    \  break;\n        }\n    }\n    return $flag;\n}", "  $intersection = array_intersect($interval1,\
    \ $interval2);\n  if (empty($intersection)) {\n    return \"NO\";\n  }\n  $length\
    \ = abs($intersection[0] - $intersection[1]);\n  return isPrime($length) ? \"\
    YES\" : \"NO\";\n}", "\t$intersect = array();\n\tif ($interval1[0] > $interval2[0])\
    \ {\n\t\t$intersect[] = $interval1[0];\n\t} else {\n\t\t$intersect[] = $interval2[0];\n\
    \t}\n\tif ($interval1[1] < $interval2[1]) {\n\t\t$intersect[] = $interval1[1];\n\
    \t} else {\n\t\t$intersect[] = $interval2[1];\n\t}\n\tif ($intersect[0] <= $intersect[1])\
    \ {\n\t\tif ($intersect[1] - $intersect[0] > 1) {\n\t\t\t$primes = [];\n\t\t\t\
    for ($i = $intersect[0]; $i <= $intersect[1]; $i++) {\n\t\t\t\tif ($i < 2) {\n\
    \t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (count($primes) == 0) {\n\t\t\t\t\t\
    $primes[] = $i;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\t$is_prime = true;\n\t\
    \t\t\tforeach ($primes as $prime) {\n\t\t\t\t\tif ($i % $prime == 0) {\n\t\t\t\
    \t\t\t$is_prime = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\
    if ($is_prime) {\n\t\t\t\t\t$primes[] = $i;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn\
    \ in_array($intersect[1] - $intersect[0], $primes) ? \"YES\" : \"NO\";\n\t\t}\
    \ else {\n\t\t\treturn \"NO\";\n\t\t}\n\t} else {\n\t\treturn \"NO\";\n\t}\n}",
  "    list($start1, $end1) = $interval1;\n    list($start2, $end2) = $interval2;\n\
    \    $intersectStart = max($start1, $start2);\n    $intersectEnd = min($end1,\
    \ $end2);\n    if ($intersectStart <= $intersectEnd) {\n        return isPrime($intersectEnd\
    \ - $intersectStart + 1) ? \"YES\" : \"NO\";\n    }\n    return \"NO\";\n}", " \
    \ $intersections = array();\n  if(($interval1[0] >= $interval2[0] && $interval1[0]\
    \ <= $interval2[1]) || ($interval1[1] >= $interval2[0] && $interval1[1] <= $interval2[1])){\n\
    \    $intersections[] = $interval1[0];\n    $intersections[] = $interval1[1];\n\
    \  }\n  elseif(($interval2[0] >= $interval1[0] && $interval2[0] <= $interval1[1])\
    \ || ($interval2[1] >= $interval1[0] && $interval2[1] <= $interval1[1])){\n  \
    \  $intersections[] = $interval2[0];\n    $intersections[] = $interval2[1];\n\
    \  }\n  else {\n    return \"NO\";\n  }\n  $start = min($intersections);\n  $end\
    \ = max($intersections);\n  $count = $end - $start;\n  $count = $count + 1;\n\
    \  return ($count == 2 ? \"YES\" : \"NO\");\n}\n\necho intersection(array(1, 2),\
    \ array(2, 3)) . \"\\n\";\necho intersection(array(-1, 1), array(0, 4)) . \"\\\
    n\";\necho intersection(array(-3, -1), array(-5, 5)) . \"\\n\";", "  $start1 =\
    \ $interval1[0];\n  $end1 = $interval1[1];\n  $start2 = $interval2[0];\n  $end2\
    \ = $interval2[1];\n  $newStart = max($start1, $start2);\n  $newEnd = min($end1,\
    \ $end2);\n  if ($newStart > $newEnd) {\n    return \"NO\";\n  }\n  if (isPrime($newEnd\
    \ - $newStart + 1)) {\n    return \"YES\";\n  }\n  return \"NO\";\n}\n", "  $start1\
    \ = $interval1[0];\n  $end1 = $interval1[1];\n  $start2 = $interval2[0];\n  $end2\
    \ = $interval2[1];\n  $minStart = $start1 > $start2 ? $start1 : $start2;\n  $maxEnd\
    \ = $end1 < $end2 ? $end1 : $end2;\n  $intersection = $maxEnd - $minStart;\n \
    \ if ($intersection < 0) {\n    return \"NO\";\n  }\n  if (isPrime($intersection))\
    \ {\n    return \"YES\";\n  }\n  return \"NO\";\n}\n", "    $intersection = [max($interval1[0],\
    \ $interval2[0]), min($interval1[1], $interval2[1])];\n    if ($intersection[0]\
    \ > $intersection[1]) return \"NO\";\n    $len = $intersection[1] - $intersection[0]\
    \ + 1;\n    if ($len < 2) return \"NO\";\n    if ($len == 2) return \"YES\";\n\
    \    if ($len == 3) return \"YES\";\n    if ($len % 2 == 0) return \"NO\";\n \
    \   if ($len % 3 == 0) return \"NO\";\n    if ($len % 5 == 0) return \"NO\";\n\
    \    if ($len % 7 == 0) return \"NO\";\n    return \"YES\";\n}\n", "  $start =\
    \ max($interval1[0], $interval2[0]);\n  $end = min($interval1[1], $interval2[1]);\n\
    \  $len = $end - $start;\n  if ($len < 0) return \"NO\";\n  if ($len == 0) return\
    \ \"YES\";\n  if ($len == 1) return \"NO\";\n  for ($i = 2; $i < $len; $i++) {\n\
    \    if ($len % $i == 0) return \"NO\";\n  }\n  return \"YES\";\n}", "    if(empty($interval1)\
    \ || empty($interval2)) return false;\n    $intervals = [$interval1, $interval2];\n\
    \    $result = [0, 0];\n    sort($intervals);\n    for($i = 0; $i < 2; $i++) {\n\
    \        if($intervals[0][0] <= $intervals[1][0] && $intervals[0][1] >= $intervals[1][0])\
    \ {\n            $result[0] = $intervals[1][0];\n        } else {\n          \
    \  $result[0] = $intervals[0][0];\n        }\n        if($intervals[0][1] >= $intervals[1][1]\
    \ && $intervals[0][0] <= $intervals[1][1]) {\n            $result[1] = $intervals[1][1];\n\
    \        } else {\n            $result[1] = $intervals[0][1];\n        }\n   \
    \ }\n    $intersection = $result[1] - $result[0];\n    if($intersection <= 0)\
    \ return \"NO\";\n    for($i = 2; $i < $intersection; $i++) {\n        if($intersection\
    \ % $i == 0) return \"NO\";\n    }\n    return \"YES\";\n}\n", "    if ($interval1[0]\
    \ > $interval2[1] || $interval2[0] > $interval1[1]) {\n        return \"NO\";\n\
    \    }\n    $intersect = array(\n        max($interval1[0], $interval2[0]),\n\
    \        min($interval1[1], $interval2[1])\n    );\n    $length = $intersect[1]\
    \ - $intersect[0] + 1;\n    if ($length < 2) {\n        return \"NO\";\n    }\n\
    \    for ($i = 2; $i <= sqrt($length); $i++) {\n        if ($length % $i == 0)\
    \ {\n            return \"NO\";\n        }\n    }\n    return \"YES\";\n}", " \
    \ if (abs($interval1[0] - $interval2[0]) > $interval1[1] - $interval1[0] + $interval2[1]\
    \ - $interval2[0])\n  {\n    return \"NO\";\n  }\n  else if ($interval1[0] > $interval2[0])\n\
    \  {\n    $temp = $interval1;\n    $interval1 = $interval2;\n    $interval2 =\
    \ $temp;\n  }\n  $start = $interval1[1] > $interval2[0] ? $interval2[0] : $interval1[1];\n\
    \  $end = $interval1[1] > $interval2[0] ? $interval1[1] : $interval2[1];\n  if\
    \ (isPrime($end - $start + 1))\n  {\n    return \"YES\";\n  }\n  else\n  {\n \
    \   return \"NO\";\n  }\n}\n", "    $intersect_len = array_reduce(\n        array_map(\n\
    \            function($a, $b) { return abs($a - $b); },\n            array_slice($interval1,\
    \ 1, 1),\n            array_slice($interval2, 0, 1)\n        ),\n        function($carry,\
    \ $value) { return $carry + $value; }\n    );\n    return is_prime($intersect_len)\
    \ ? \"YES\" : \"NO\";\n}\n", "    // write your code here\n}\n\nprint (intersection([1,\
    \ 2], [2, 3]));\nprint (intersection([-1, 1], [0, 4]));\nprint (intersection([-3,\
    \ -1], [-5, 5]));", "    $result = [];\n    for ($i = $interval1[0]; $i <= $interval1[1];\
    \ $i++) {\n        if ($i >= $interval2[0] && $i <= $interval2[1]) {\n       \
    \     $result[] = $i;\n        }\n    }\n    if (count($result) === 0) {\n   \
    \     return \"NO\";\n    }\n    $prime = [\n        2, 3, 5, 7, 11, 13, 17, 19,\
    \ 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103,\
    \ 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191,\
    \ 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277,\
    \ 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379,\
    \ 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467,\
    \ 479, 487, 491, 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587,\
    \ 593, 599, 601, 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677,\
    \ 683, 691, 701, 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797,\
    \ 809, 811, 821, 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907,\
    \ 911, 919, 929, 937, 941, 947, 953, 967, 971, 977, 983, 9", "\t$x = max($interval1[0],\
    \ $interval2[0]);\n\t$y = min($interval1[1], $interval2[1]);\n\tif ($x <= $y)\
    \ {\n\t\treturn isPrime($y - $x + 1) ? \"YES\" : \"NO\";\n\t}\n\treturn \"NO\"\
    ;\n}\n", "    if (count($interval1) != 2 || count($interval2) != 2) {\n      \
    \  return 'invalid input';\n    }\n    $maxInterval = max($interval1);\n    $minInterval\
    \ = min($interval1);\n    $maxInterval2 = max($interval2);\n    $minInterval2\
    \ = min($interval2);\n    if (($maxInterval >= $minInterval2 && $maxInterval <=\
    \ $maxInterval2)\n        || ($minInterval >= $minInterval2 && $minInterval <=\
    \ $maxInterval2)) {\n        $intersection1 = $maxInterval - $minInterval2;\n\
    \        $intersection2 = $maxInterval2 - $minInterval;\n        if (isPrime($intersection1)\
    \ || isPrime($intersection2)) {\n            return 'YES';\n        }\n      \
    \  return 'NO';\n    }\n    return 'NO';\n}\n", "    $intLeft = max($interval1[0],\
    \ $interval2[0]);\n    $intRight = min($interval1[1], $interval2[1]);\n    $intLeng\
    \ = $intRight - $intLeft;\n    if ($intLeng < 0) {\n        return \"NO\";\n \
    \   }\n    if ($intLeng < 2) {\n        return \"NO\";\n    }\n    for ($i = 2;\
    \ $i < $intLeng; $i++) {\n        if ($intLeng % $i == 0) {\n            return\
    \ \"NO\";\n        }\n    }\n    return \"YES\";\n}\necho \"<pre>\";\nprint_r(intersection(array(1,\
    \ 2), array(2, 3)));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(intersection(array(-1,\
    \ 1), array(0, 4)));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(intersection(array(-3,\
    \ -1), array(-5, 5)));\necho \"</pre>\";", "    $res = [];\n    $min_start = $interval1[0]\
    \ > $interval2[0] ? $interval1[0] : $interval2[0];\n    $max_end = $interval1[1]\
    \ < $interval2[1] ? $interval1[1] : $interval2[1];\n    if($min_start <= $max_end){\n\
    \        $res = [$min_start, $max_end];\n    } else {\n        return \"NO\";\n\
    \    }\n    return check_prime($res[1] - $res[0] + 1) ? \"YES\" : \"NO\";\n}\n",
  "    $intersection = array();\n    $intersection[0] = max($interval1[0], $interval2[0]);\n\
    \    $intersection[1] = min($interval1[1], $interval2[1]);\n    if ($intersection[0]\
    \ <= $intersection[1]) {\n        $intersection_length = $intersection[1] - $intersection[0]\
    \ + 1;\n        return is_prime($intersection_length) ? \"YES\" : \"NO\";\n  \
    \  }\n    return \"NO\";\n}", "    $int1 = ($interval1[1] - $interval1[0]) + 1;\n\
    \    $int2 = ($interval2[1] - $interval2[0]) + 1;\n    $length = lcm($int1, $int2);\n\
    \    return (isPrime($length)) ? \"YES\" : \"NO\";\n}\n", "    $a = $interval1[0];\n\
    \    $b = $interval1[1];\n    $c = $interval2[0];\n    $d = $interval2[1];\n \
    \   $start = min($a, $c);\n    $end = max($b, $d);\n    $interval = array($start,\
    \ $end);\n    $length = $end - $start;\n    $prime = true;\n    for ($i = 2; $i\
    \ < $length; $i++) {\n        if ($length % $i == 0) {\n            $prime = false;\n\
    \            break;\n        }\n    }\n    if ($prime) {\n        return \"YES\"\
    ;\n    } else {\n        return \"NO\";\n    }\n}\nprint_r(intersection(array(1,\
    \ 2), array(2, 3)));", "    $intervals = [];\n    $intervals[] = $interval1;\n\
    \    $intervals[] = $interval2;\n    sort($intervals);\n    if ($intervals[0][1]\
    \ <= $intervals[1][0]) {\n        return \"NO\";\n    } else {\n        $a = ($intervals[0][1]\
    \ >= $intervals[1][1]) ?\n            $intervals[1][1] : $intervals[0][1];\n \
    \       $b = ($intervals[0][0] >= $intervals[1][0]) ?\n            $intervals[0][0]\
    \ : $intervals[1][0];\n        return isPrime($a - $b) ? \"YES\" : \"NO\";\n \
    \   }\n}", "  $interval_min = max($interval1[0], $interval2[0]);\n  $interval_max\
    \ = min($interval1[1], $interval2[1]);\n  $interval_length = $interval_max - $interval_min;\n\
    \  if ($interval_length <= 0) {\n    return \"NO\";\n  }\n  $is_prime = true;\n\
    \  for ($i = 2; $i < $interval_length; $i++) {\n    if ($interval_length % $i\
    \ == 0) {\n      $is_prime = false;\n      break;\n    }\n  }\n  return $is_prime\
    \ ? \"YES\" : \"NO\";\n}", "  $result = array();\n  $interval1 = array_filter($interval1);\n\
    \  $interval2 = array_filter($interval2);\n  if (count($interval1) && count($interval2))\
    \ {\n    $result = array_intersect($interval1, $interval2);\n  }\n  if (count($result)\
    \ == 1) {\n    return \"YES\";\n  }\n  $min = min($result);\n  $max = max($result);\n\
    \  $n = 0;\n  for ($i = $min; $i <= $max; $i++) {\n    $n++;\n  }\n  if (isPrime($n))\
    \ {\n    return \"YES\";\n  }\n  return \"NO\";\n}\n", "    if($interval1[0] >\
    \ $interval2[1] || $interval2[0] > $interval1[1]) {\n        return \"NO\";\n\
    \    }\n    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    $length = $end - $start + 1;\n    if($length < 2) {\n \
    \       return \"NO\";\n    }\n    for($i = 2; $i < sqrt($length); $i++) {\n \
    \       if($length % $i == 0) {\n            return \"NO\";\n        }\n    }\n\
    \    return \"YES\";\n}", "    $interval1_start = min($interval1[0], $interval1[1]);\n\
    \    $interval1_end = max($interval1[0], $interval1[1]);\n    $interval2_start\
    \ = min($interval2[0], $interval2[1]);\n    $interval2_end = max($interval2[0],\
    \ $interval2[1]);\n    if ($interval1_start <= $interval2_start && $interval2_start\
    \ <= $interval1_end\n        && $interval1_start <= $interval2_end && $interval2_end\
    \ <= $interval1_end) {\n        $start = $interval2_start;\n        $end = $interval2_end;\n\
    \    } else if ($interval2_start <= $interval1_start && $interval1_start <= $interval2_end\n\
    \        && $interval2_start <= $interval1_end && $interval1_end <= $interval2_end)\
    \ {\n        $start = $interval1_start;\n        $end = $interval1_end;\n    }\
    \ else {\n        return \"NO\";\n    }\n    $len = $end - $start + 1;\n    for\
    \ ($i = 2; $i <= $len / 2; $i++) {\n        if ($len % $i == 0) {\n          \
    \  return \"NO\";\n        }\n    }\n    return \"YES\";\n}\n\necho intersection(array(1,\
    \ 2), array(2, 3)) . \"\\n\";\necho intersection(array(-1, 1), array(0, 4)) .\
    \ \"\\n\";\necho intersection(array(-3, -1), array(-5, 5)) . \"\\n\";", "    $len1\
    \ = $interval1[1] - $interval1[0];\n    $len2 = $interval2[1] - $interval2[0];\n\
    \    $min = min($interval1[0], $interval2[0]);\n    $max = max($interval1[1],\
    \ $interval2[1]);\n    if ($min > $max) return \"NO\";\n    $intersect = $max\
    \ - $min;\n    return isPrime($intersect) ? \"YES\" : \"NO\";\n}\n", "\t$array_first\
    \ = array($interval1[0], $interval1[1]);\n\t$array_second = array($interval2[0],\
    \ $interval2[1]);\n\tif ($array_first[0] > $array_first[1]) {\n\t\t$tmp = $array_first[0];\n\
    \t\t$array_first[0] = $array_first[1];\n\t\t$array_first[1] = $tmp;\n\t}\n\tif\
    \ ($array_second[0] > $array_second[1]) {\n\t\t$tmp = $array_second[0];\n\t\t\
    $array_second[0] = $array_second[1];\n\t\t$array_second[1] = $tmp;\n\t}\n\tif\
    \ (($array_first[0] > $array_second[1]) ||\n\t\t($array_second[0] > $array_first[1]))\
    \ {\n\t\treturn 'NO';\n\t}\n\t$arr = array();\n\tfor ($i = $array_first[0]; $i\
    \ <= $array_first[1]; $i++) {\n\t\t$arr[] = $i;\n\t}\n\tfor ($i = $array_second[0];\
    \ $i <= $array_second[1]; $i++) {\n\t\t$arr[] = $i;\n\t}\n\t$arr = array_unique($arr);\n\
    \tsort($arr);\n\t$count = count($arr);\n\tif ($count == 1) {\n\t\treturn 'NO';\n\
    \t}\n\tif ($count == 2) {\n\t\tif (($arr[0] == $arr[1]) && ($arr[0] == 0)) {\n\
    \t\t\treturn 'NO';\n\t\t}\n\t}\n\tfor ($i = 2; $i < $count; $i++) {\n\t\tif ($arr[$i]\
    \ != $arr[$i - 1] + 1) {\n\t\t\treturn 'NO';\n\t\t}\n\t}\n\treturn 'YES';\n}",
  "    sort($interval1);\n    sort($interval2);\n    $start = max($interval1[0], $interval2[0]);\n\
    \    $end = min($interval1[1], $interval2[1]);\n    if ($start > $end) {\n   \
    \     return \"NO\";\n    }\n    $length = $end - $start + 1;\n    $primes = [2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97];\n    if (in_array($length, $primes)) {\n        return \"YES\"\
    ;\n    }\n    return \"NO\";\n}\n", "\t$intersection = $intersectionLength = array();\n\
    \tfor ($i = $interval1[0]; $i <= $interval1[1]; $i++) {\n\t\tfor ($j = $interval2[0];\
    \ $j <= $interval2[1]; $j++) {\n\t\t\tif ($i == $j) {\n\t\t\t\t$intersection[]\
    \ = $i;\n\t\t\t}\n\t\t}\n\t}\n\tif (!empty($intersection)) {\n\t\t$intersectionLength\
    \ = array_pop($intersection) - array_shift($intersection);\n\t\tif (isPrime($intersectionLength))\
    \ {\n\t\t\treturn \"YES\";\n\t\t}\n\t}\n\treturn \"NO\";\n}", "\t$arr = [];\n\t\
    $arr = [\n\t\t$interval1[0],\n\t\t$interval1[1],\n\t\t$interval2[0],\n\t\t$interval2[1]\n\
    \t];\n\tsort($arr);\n\t$min = $arr[1];\n\t$max = $arr[2];\n\tif ($min > $max)\
    \ {\n\t\treturn \"NO\";\n\t} else {\n\t\t$c = 0;\n\t\tfor ($i = 2; $i <= $max;\
    \ $i++) {\n\t\t\tif ($max % $i == 0) {\n\t\t\t\t$c++;\n\t\t\t}\n\t\t}\n\t\tif\
    \ ($c == 1) {\n\t\t\treturn \"YES\";\n\t\t} else {\n\t\t\treturn \"NO\";\n\t\t\
    }\n\t}\n}\n", "  $result = \"NO\";\n  if($interval1[0] > $interval2[0]) {\n  \
    \  $temp = $interval1;\n    $interval1 = $interval2;\n    $interval2 = $temp;\n\
    \  }\n  if($interval1[1] > $interval2[0]) {\n    if($interval1[1] <= $interval2[1])\
    \ {\n      $result = isPrime($interval1[1] - $interval2[0]) ? \"YES\" : \"NO\"\
    ;\n    } else {\n      $result = isPrime($interval2[1] - $interval2[0]) ? \"YES\"\
    \ : \"NO\";\n    }\n  }\n  return $result;\n}\n", "\tif ($interval1[0] > $interval2[1]\
    \ || $interval2[0] > $interval1[1])\n\t\treturn \"NO\";\n\t$range = range(max($interval1[0],\
    \ $interval2[0]), min($interval1[1], $interval2[1]));\n\treturn (count($range)\
    \ == 1) ? \"YES\" : \"NO\";\n}\n\necho intersection(array(1, 2), array(2, 3))\
    \ . \"\\n\";\necho intersection(array(-1, 1), array(0, 4)) . \"\\n\";\necho intersection(array(-3,\
    \ -1), array(-5, 5)) . \"\\n\";", "    if(!is_array($interval1) || !is_array($interval2))\
    \ {\n        return false;\n    }\n    if(!isset($interval1[0]) || !isset($interval1[1])\
    \ || !isset($interval2[0]) || !isset($interval2[1])) {\n        return false;\n\
    \    }\n    if($interval1[0] > $interval1[1] || $interval2[0] > $interval2[1])\
    \ {\n        return false;\n    }\n    if($interval1[0] == $interval1[1] || $interval2[0]\
    \ == $interval2[1]) {\n        return false;\n    }\n    if($interval1[0] == $interval2[0]\
    \ && $interval1[1] == $interval2[1]) {\n        return false;\n    }\n    if($interval1[0]\
    \ > $interval2[1] || $interval2[0] > $interval1[1]) {\n        return false;\n\
    \    }\n    $a = max($interval1[0], $interval2[0]);\n    $b = min($interval1[1],\
    \ $interval2[1]);\n    $interval3 = array($a, $b);\n    if($interval3[0] == $interval3[1])\
    \ {\n        return false;\n    }\n    $is_prime = true;\n    for($i = 2; $i <\
    \ $interval3[1]; $i++) {\n        if($interval3[1] % $i == 0) {\n            $is_prime\
    \ = false;\n            break;\n        }\n    }\n    if($is_prime == true) {\n\
    \        return 'YES';\n    } else {\n        return 'NO';\n    }\n}", "    if\
    \ ($interval1[0] >= $interval2[1] || $interval2[0] >= $interval1[1]) {\n     \
    \   return \"NO\";\n    }\n\n    $start = max($interval1[0], $interval2[0]);\n\
    \    $end = min($interval1[1], $interval2[1]);\n    $length = $end - $start;\n\
    \n    for ($i = 2; $i <= $length; $i++) {\n        if ($length % $i == 0) {\n\
    \            return \"NO\";\n        }\n    }\n\n    return \"YES\";\n}\n\necho\
    \ intersection(array(1, 2), array(2, 3)) . \"\\n\";\necho intersection(array(-1,\
    \ 1), array(0, 4)) . \"\\n\";\necho intersection(array(-3, -1), array(-5, 5))\
    \ . \"\\n\";", "    // write your code here...\n    $result = [];\n    for ($i=$interval1[0];\
    \ $i <= $interval1[1]; $i++) { \n        for ($j=$interval2[0]; $j <= $interval2[1];\
    \ $j++) { \n            if ($i == $j) $result[] = $i;\n        }\n    }\n    if\
    \ (empty($result)) {\n        return \"NO\";\n    } else {\n        $len = count($result);\n\
    \        for ($i=2; $i < $len; $i++) { \n            if ($len % $i == 0) {\n \
    \               return \"NO\";\n            }\n        }\n        return \"YES\"\
    ;\n    }\n}\n$result = intersection(array(-3, -1), array(-5, 5));\necho $result\
    \ . \"\\n\";", "    $start = max($interval1[0], $interval2[0]);\n    $end = min($interval1[1],\
    \ $interval2[1]);\n    if ($start >= $end) return \"NO\";\n    $length = $end\
    \ - $start;\n    for ($i = 2; $i < $length; $i++) {\n        if ($length % $i\
    \ == 0) return \"NO\";\n    }\n    return \"YES\";\n}", "    $intersection = getIntersection($interval1,\
    \ $interval2);\n    if (empty($intersection)) {\n        return \"NO\";\n    }\n\
    \    return isPrime($intersection[1] - $intersection[0]) ? \"YES\" : \"NO\";\n\
    }", "\t$result = find_intersection($interval1, $interval2);\n\tif ($result ==\
    \ NULL) {\n\t\treturn \"NO\";\n\t} else {\n\t\tif (is_prime($result[1] - $result[0]\
    \ + 1)) {\n\t\t\treturn \"YES\";\n\t\t} else {\n\t\t\treturn \"NO\";\n\t\t}\n\t\
    }\n}\n", "    $interval1 = range($interval1[0], $interval1[1]);\n    $interval2\
    \ = range($interval2[0], $interval2[1]);\n    $intersection = array_intersect($interval1,\
    \ $interval2);\n    $result = count($intersection) % 2 == 0 ? 'NO' : 'YES';\n\
    \    echo $result;\n}\nintersection([1, 2], [2, 3]);\necho '<br>';\nintersection([-1,\
    \ 1], [0, 4]);\necho '<br>';\nintersection([-3, -1], [-5, 5]);\n", "    $intersection\
    \ = 0;\n    // Check if intervals are intersected\n    if ($interval1[0] <= $interval2[0]\
    \ && $interval1[1] >= $interval2[0]) {\n        // Check if length of intersection\
    \ is prime number\n        $intersection = $interval1[1] - $interval2[0];\n  \
    \      if ($intersection <= 1) {\n            return \"NO\";\n        }\n    \
    \    for ($i = 2; $i < $intersection; $i++) {\n            if ($intersection %\
    \ $i == 0) {\n                return \"NO\";\n            }\n        }\n     \
    \   return \"YES\";\n    } else if ($interval1[0] >= $interval2[0] && $interval1[0]\
    \ <= $interval2[1]) {\n        // Check if length of intersection is prime number\n\
    \        $intersection = $interval2[1] - $interval1[0];\n        if ($intersection\
    \ <= 1) {\n            return \"NO\";\n        }\n        for ($i = 2; $i < $intersection;\
    \ $i++) {\n            if ($intersection % $i == 0) {\n                return\
    \ \"NO\";\n            }\n        }\n        return \"YES\";\n    } else {\n \
    \       return \"NO\";\n    }\n}", "\t$interval = [max($interval1[0], $interval2[0]),\
    \ min($interval1[1], $interval2[1])];\n\tif ($interval[0] >= $interval[1]) return\
    \ \"NO\";\n\t$len = $interval[1] - $interval[0] + 1;\n\t$primes = [2, 3, 5, 7,\
    \ 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83,\
    \ 89, 97];\n\treturn (in_array($len, $primes)) ? \"YES\" : \"NO\";\n}\n\nvar_dump(intersection([1,\
    \ 2], [2, 3]));\nvar_dump(intersection([-1, 1], [0, 4]));\nvar_dump(intersection([-3,\
    \ -1], [-5, 5]));"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
