name: HumanEval_19_sort_numbers
language: php
prompt: "<?php\n// Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
  // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
  \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest to\
  \ largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\nfunction\
  \ sort_numbers($numbers) {\n"
tests: "function candidate(...$args) {\n    return sort_numbers(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"three\") !== \"three\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"three five nine\") !== \"three five nine\"\
  ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"five zero four\
  \ seven nine eight\") !== \"zero four five seven eight nine\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"six five four three two one zero\") !==\
  \ \"zero one two three four five six\") { throw new Exception(\"Test failed!\");\
  \ }\n}\n\ntest();"
completions: ["\t$words = explode(\" \", $numbers);\n\tforeach ($words as $i => $word)\
    \ {\n\t\tswitch ($word) {\n\t\t\tcase 'zero':\n\t\t\t\t$numbers[$i] = 0;\n\t\t\
    \t\tbreak;\n\t\t\tcase 'one':\n\t\t\t\t$numbers[$i] = 1;\n\t\t\t\tbreak;\n\t\t\
    \tcase 'two':\n\t\t\t\t$numbers[$i] = 2;\n\t\t\t\tbreak;\n\t\t\tcase 'three':\n\
    \t\t\t\t$numbers[$i] = 3;\n\t\t\t\tbreak;\n\t\t\tcase 'four':\n\t\t\t\t$numbers[$i]\
    \ = 4;\n\t\t\t\tbreak;\n\t\t\tcase 'five':\n\t\t\t\t$numbers[$i] = 5;\n\t\t\t\t\
    break;\n\t\t\tcase 'six':\n\t\t\t\t$numbers[$i] = 6;\n\t\t\t\tbreak;\n\t\t\tcase\
    \ 'seven':\n\t\t\t\t$numbers[$i] = 7;\n\t\t\t\tbreak;\n\t\t\tcase 'eight':\n\t\
    \t\t\t$numbers[$i] = 8;\n\t\t\t\tbreak;\n\t\t\tcase 'nine':\n\t\t\t\t$numbers[$i]\
    \ = 9;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\tsort($numbers);\n\tforeach ($numbers as\
    \ $i => $number) {\n\t\tswitch ($number) {\n\t\t\tcase 0:\n\t\t\t\t$numbers[$i]\
    \ = 'zero';\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\t$numbers[$i] = 'one';\n\t\t\
    \t\tbreak;\n\t\t\tcase 2:\n\t\t\t\t$numbers[$i] = 'two';\n\t\t\t\tbreak;\n\t\t\
    \tcase 3:\n\t\t\t\t$numbers[$i] = 'three';\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\
    \t\t$numbers[$i] = '", "    $numbers = explode(\" \", $numbers);\n    foreach\
    \ ($numbers as $key => $value) {\n        switch ($value) {\n            case\
    \ 'zero':\n                $numbers[$key] = 0;\n                break;\n     \
    \       case 'one':\n                $numbers[$key] = 1;\n                break;\n\
    \            case 'two':\n                $numbers[$key] = 2;\n              \
    \  break;\n            case 'three':\n                $numbers[$key] = 3;\n  \
    \              break;\n            case 'four':\n                $numbers[$key]\
    \ = 4;\n                break;\n            case 'five':\n                $numbers[$key]\
    \ = 5;\n                break;\n            case 'six':\n                $numbers[$key]\
    \ = 6;\n                break;\n            case 'seven':\n                $numbers[$key]\
    \ = 7;\n                break;\n            case 'eight':\n                $numbers[$key]\
    \ = 8;\n                break;\n            case 'nine':\n                $numbers[$key]\
    \ = 9;\n                break;\n        }\n    }\n    sort($numbers);\n    foreach\
    \ ($numbers as $key => $value) {\n        switch ($value) {\n            case\
    \ 0:\n                $numbers[$key] = 'zero';\n                break;\n     \
    \       case 1:\n                $numbers[$key] = 'one';\n                break;\n\
    \            case 2:\n                $numbers[$key] = 'two';\n              \
    \  break;\n            case 3:\n                $numbers[$key] = 'three';\n  \
    \              break;\n            case 4:\n                $numbers[$key] = 'four';\n\
    \                break;\n            case 5:\n                $numbers[$key] =\
    \ 'five';\n                break;\n            case 6:\n                $numbers[$key]\
    \ = 'six';\n                break;\n            case 7:\n                $numbers[$key]\
    \ = 'seven';\n                break;\n            case 8:\n                $numbers[$key]\
    \ = 'eight';\n                break;\n            case 9:\n                $numbers[$key]\
    \ = 'nine';\n                break;\n       ", "  $num_map = ['zero' => 0, 'one'\
    \ => 1, 'two' => 2, 'three' => 3, 'four' => 4, 'five' => 5, 'six' => 6, 'seven'\
    \ => 7, 'eight' => 8, 'nine' => 9];\n  $number_words = explode(' ', $numbers);\n\
    \  $number_ints = [];\n  $sorted_numbers = [];\n  foreach ($number_words as $word)\
    \ {\n    $number_ints[] = $num_map[$word];\n  }\n  asort($number_ints);\n  foreach\
    \ ($number_ints as $number => $key) {\n    $sorted_numbers[] = array_search($key,\
    \ $num_map);\n  }\n  return implode(' ', $sorted_numbers);\n}\n", "    $numbers\
    \ = explode(\" \", $numbers);\n    $result = [];\n    foreach ($numbers as $num)\
    \ {\n        switch($num) {\n            case 'zero':\n                $result[]\
    \ = 0;\n                break;\n            case 'one':\n                $result[]\
    \ = 1;\n                break;\n            case 'two':\n                $result[]\
    \ = 2;\n                break;\n            case 'three':\n                $result[]\
    \ = 3;\n                break;\n            case 'four':\n                $result[]\
    \ = 4;\n                break;\n            case 'five':\n                $result[]\
    \ = 5;\n                break;\n            case 'six':\n                $result[]\
    \ = 6;\n                break;\n            case 'seven':\n                $result[]\
    \ = 7;\n                break;\n            case 'eight':\n                $result[]\
    \ = 8;\n                break;\n            case 'nine':\n                $result[]\
    \ = 9;\n                break;\n        }\n    }\n    sort($result);\n    foreach\
    \ ($result as $key => $num) {\n        switch($num) {\n            case 0:\n \
    \               $result[$key] = 'zero';\n                break;\n            case\
    \ 1:\n                $result[$key] = 'one';\n                break;\n       \
    \     case 2:\n                $result[$key] = 'two';\n                break;\n\
    \            case 3:\n                $result[$key] = 'three';\n             \
    \   break;\n            case 4:\n                $result[$key] = 'four';\n   \
    \             break;\n            case 5:\n                $result[$key] = 'five';\n\
    \                break;\n            case 6:\n                $result[$key] =\
    \ 'six';\n                break;\n            case 7:\n                $result[$key]\
    \ = 'seven';\n                break;\n            case 8:\n                $result[$key]\
    \ = 'eight';\n                break;\n            case 9:\n                $result[$key]\
    \ = 'nine';\n                break;\n        }\n    }\n    return implode(\" \"\
    , $result);\n}\n", "\t$nums = explode(\" \", $numbers);\n\t$dict = array(\"zero\"\
    \ => 0, \"one\" => 1, \"two\" => 2, \"three\" => 3, \"four\" => 4, \"five\" =>\
    \ 5, \"six\" => 6, \"seven\" => 7, \"eight\" => 8, \"nine\" => 9);\n\tsort($nums);\n\
    \tforeach ($nums as $key => $value) {\n\t\t$nums[$key] = $dict[$value];\n\t}\n\
    \tsort($nums);\n\tforeach ($nums as $key => $value) {\n\t\t$nums[$key] = array_search($value,\
    \ $dict);\n\t}\n\treturn implode(\" \", $nums);\n}\n", "    $values = explode(\"\
    \ \", $numbers);\n    $nums_to_ints = array(\n        'zero' => 0,\n        'one'\
    \ => 1,\n        'two' => 2,\n        'three' => 3,\n        'four' => 4,\n  \
    \      'five' => 5,\n        'six' => 6,\n        'seven' => 7,\n        'eight'\
    \ => 8,\n        'nine' => 9\n    );\n    $ints_to_nums = array_flip($nums_to_ints);\n\
    \    $ints = array();\n    foreach ($values as $v) {\n        $ints[] = $nums_to_ints[$v];\n\
    \    }\n    sort($ints);\n    $strings = array();\n    foreach ($ints as $i) {\n\
    \        $strings[] = $ints_to_nums[$i];\n    }\n    return implode(\" \", $strings);\n\
    }\n", "\tif(empty($numbers)) {\n\t\treturn '';\n\t}\n\n\t$numberals = ['zero',\
    \ 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'];\n\t\
    $num_array = explode(' ', $numbers);\n\t$num_values = [];\n\tforeach($num_array\
    \ as $number) {\n\t\t$num_values[] = array_search($number, $numberals);\n\t}\n\
    \tasort($num_values);\n\tforeach($num_values as $key => $value) {\n\t\t$num_values[$key]\
    \ = $numberals[$value];\n\t}\n\treturn implode(' ', $num_values);\n}", "    $numbers_arr\
    \ = explode(\" \", $numbers);\n    $numbers_digit = array();\n    foreach ($numbers_arr\
    \ as $number) {\n        $numbers_digit[] = strlen($number);\n    }\n    sort($numbers_digit);\n\
    \    $numbers_sorted = array();\n    foreach ($numbers_digit as $digit) {\n  \
    \      foreach ($numbers_arr as $number) {\n            if (strlen($number) ==\
    \ $digit) {\n                $numbers_sorted[] = $number;\n                break;\n\
    \            }\n        }\n    }\n    return implode(\" \", $numbers_sorted);\n\
    }\n", "\t$unsorted_numbers = explode(\" \", $numbers);\n\t$sorted_numbers = array();\n\
    \tfor ($i = 0; $i < count($unsorted_numbers); $i++) {\n\t\t$unsorted_numbers[$i]\
    \ = word_to_number($unsorted_numbers[$i]);\n\t}\n\t//I am not a big fan of bubble\
    \ sort, but I think it is the most efficient way to do this\n\t//I might swap\
    \ this out with a quick sort later\n\tfor ($i = 0; $i < count($unsorted_numbers);\
    \ $i++) {\n\t\tfor ($j = 0; $j < count($unsorted_numbers) - 1; $j++) {\n\t\t\t\
    if ($unsorted_numbers[$j] > $unsorted_numbers[$j + 1]) {\n\t\t\t\t$temp = $unsorted_numbers[$j];\n\
    \t\t\t\t$unsorted_numbers[$j] = $unsorted_numbers[$j + 1];\n\t\t\t\t$unsorted_numbers[$j\
    \ + 1] = $temp;\n\t\t\t}\n\t\t}\n\t}\n\tfor ($i = 0; $i < count($unsorted_numbers);\
    \ $i++) {\n\t\t$sorted_numbers[$i] = number_to_word($unsorted_numbers[$i]);\n\t\
    }\n\t$sorted_numbers = implode(\" \", $sorted_numbers);\n\treturn $sorted_numbers;\n\
    }\n", "  $sort = [\"zero\" => 0, \"one\" => 1, \"two\" => 2, \"three\" => 3, \"\
    four\" => 4, \"five\" => 5, \"six\" => 6, \"seven\" => 7, \"eight\" => 8, \"nine\"\
    \ => 9];\n  $numbers = explode(\" \", $numbers);\n  asort($numbers);\n  foreach\
    \ ($numbers as $k => $v) {\n    $numbers[$k] = array_search($v, $sort);\n  }\n\
    \  return implode(\" \", $numbers);\n}\n\n$test1 = \"three one five\";\n$test2\
    \ = \"three one two\";\n$test3 = \"four seven two three\";\n\necho sort_numbers($test1)\
    \ . PHP_EOL;\necho sort_numbers($test2) . PHP_EOL;\necho sort_numbers($test3)\
    \ . PHP_EOL;", "\t//explode our string into an array of words\n\t$numbers_array\
    \ = explode(\" \", $numbers);\n\t//map word to number\n\t$numbers_array = array_map(function($word)\
    \ {\n\t\tswitch ($word) {\n\t\t\tcase 'zero':\n\t\t\t\treturn 0;\n\t\t\tcase 'one':\n\
    \t\t\t\treturn 1;\n\t\t\tcase 'two':\n\t\t\t\treturn 2;\n\t\t\tcase 'three':\n\
    \t\t\t\treturn 3;\n\t\t\tcase 'four':\n\t\t\t\treturn 4;\n\t\t\tcase 'five':\n\
    \t\t\t\treturn 5;\n\t\t\tcase 'six':\n\t\t\t\treturn 6;\n\t\t\tcase 'seven':\n\
    \t\t\t\treturn 7;\n\t\t\tcase 'eight':\n\t\t\t\treturn 8;\n\t\t\tcase 'nine':\n\
    \t\t\t\treturn 9;\n\t\t}\n\t}, $numbers_array);\n\t//sort array\n\tsort($numbers_array);\n\
    \t//map number to word\n\t$numbers_array = array_map(function($number) {\n\t\t\
    switch ($number) {\n\t\t\tcase 0:\n\t\t\t\treturn 'zero';\n\t\t\tcase 1:\n\t\t\
    \t\treturn 'one';\n\t\t\tcase 2:\n\t\t\t\treturn 'two';\n\t\t\tcase 3:\n\t\t\t\
    \treturn 'three';\n\t\t\tcase 4:\n\t\t\t\treturn 'four';\n\t\t\tcase 5:\n\t\t\t\
    \treturn 'five';\n\t\t\tcase 6:\n\t\t\t\treturn 'six';\n\t\t\tcase 7:\n\t\t\t\t\
    return 'seven';\n\t\t\tcase 8:\n\t\t\t\treturn 'eight';\n\t\t\tcase 9:\n\t\t\t\
    \treturn 'nine';\n\t\t}\n\t}, $numbers_array);\n\t//implode our array back into\
    \ a string\n\treturn implode(\" \", $numbers_array);\n}\n\nif (sort_numbers(\"\
    three one five\") !== \"one three five\") {\n\techo \"Test #1 failed.\";\n} else\
    \ {", "  $result = [];\n  $array = explode(\" \", $numbers);\n  foreach ($array\
    \ as $key => $value) {\n    $result[$value] = number_convert($value);\n  }\n \
    \ asort($result);\n  return implode(\" \", array_keys($result));\n}\n", "\t//\
    \ your code here\n}\n", "    // TODO: your code here\n}\n", "  $array = explode(\"\
    \ \", $numbers);\n  $sorted_array = array();\n  foreach ($array as $number) {\n\
    \    switch ($number) {\n      case 'zero':\n        $sorted_array[] = 0;\n  \
    \      break;\n      case 'one':\n        $sorted_array[] = 1;\n        break;\n\
    \      case 'two':\n        $sorted_array[] = 2;\n        break;\n      case 'three':\n\
    \        $sorted_array[] = 3;\n        break;\n      case 'four':\n        $sorted_array[]\
    \ = 4;\n        break;\n      case 'five':\n        $sorted_array[] = 5;\n   \
    \     break;\n      case 'six':\n        $sorted_array[] = 6;\n        break;\n\
    \      case 'seven':\n        $sorted_array[] = 7;\n        break;\n      case\
    \ 'eight':\n        $sorted_array[] = 8;\n        break;\n      case 'nine':\n\
    \        $sorted_array[] = 9;\n        break;\n    }\n  }\n  sort($sorted_array);\n\
    \  $sorted_string = \"\";\n  foreach ($sorted_array as $number) {\n    switch\
    \ ($number) {\n      case 0:\n        $sorted_string .= \"zero \";\n        break;\n\
    \      case 1:\n        $sorted_string .= \"one \";\n        break;\n      case\
    \ 2:\n        $sorted_string .= \"two \";\n        break;\n      case 3:\n   \
    \     $sorted_string .= \"three \";\n        break;\n      case 4:\n        $sorted_string\
    \ .= \"four \";\n        break;\n      case 5:\n        $sorted_string .= \"five\
    \ \";\n        break;\n      case 6:\n        $sorted_string .= \"six \";\n  \
    \      break;\n      case 7:\n        $sorted_string .= \"seven \";\n        break;\n\
    \      case 8:\n        $sorted_string .= \"eight \";\n        break;\n      case\
    \ 9:\n        $sorted_string .= \"nine \";", "    $number_map = array(\n     \
    \   'zero' => 0,\n        'one' => 1,\n        'two' => 2,\n        'three' =>\
    \ 3,\n        'four' => 4,\n        'five' => 5,\n        'six' => 6,\n      \
    \  'seven' => 7,\n        'eight' => 8,\n        'nine' => 9\n    );\n    $numbers\
    \ = explode(' ', $numbers);\n    foreach ($numbers as $key => $number) {\n   \
    \     $numbers[$key] = $number_map[$number];\n    }\n    sort($numbers);\n   \
    \ foreach ($numbers as $key => $number) {\n        $numbers[$key] = array_search($number,\
    \ $number_map);\n    }\n    return implode(' ', $numbers);\n}\n", "    $number_array\
    \ = explode(\" \", $numbers);\n    asort($number_array);\n    $number_string =\
    \ implode(\" \", $number_array);\n    return $number_string;\n}", "  $numbers_array\
    \ = explode(\" \", $numbers);\n  $digits = array(\"zero\", \"one\", \"two\", \"\
    three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n  foreach\
    \ ($numbers_array as $index => $number) {\n    $numbers_array[$index] = $digits[$number];\n\
    \  }\n  asort($numbers_array);\n  foreach ($numbers_array as $index => $number)\
    \ {\n    $numbers_array[$index] = array_search($number, $digits);\n  }\n  return\
    \ implode(\" \", $numbers_array);\n}\n", "\n}\n", "    $numbers = explode(\" \"\
    , $numbers);\n    sort($numbers);\n    return implode(\" \", $numbers);\n}", " \
    \   $word = array('zero','one','two','three','four','five','six','seven','eight','nine');\n\
    \    $num = array(0,1,2,3,4,5,6,7,8,9);\n    $numbers = explode(\" \", $numbers);\n\
    \    $numeral = array();\n    for ($i = 0; $i < count($numbers); $i++) {\n   \
    \     $numbers[$i] = strtolower($numbers[$i]);\n        for ($j = 0; $j < count($word);\
    \ $j++) {\n            if ($numbers[$i] == $word[$j]) {\n                $numeral[$i]\
    \ = $num[$j];\n            }\n        }\n    }\n    sort($numeral);\n    for ($i\
    \ = 0; $i < count($numeral); $i++) {\n        for ($j = 0; $j < count($num); $j++)\
    \ {\n            if ($numeral[$i] == $num[$j]) {\n                $numbers[$i]\
    \ = $word[$j];\n            }\n        }\n    }\n    return implode(\" \", $numbers);\n\
    }\n", "    $number_map = array(\n        'zero' => 0,\n        'one' => 1,\n \
    \       'two' => 2,\n        'three' => 3,\n        'four' => 4,\n        'five'\
    \ => 5,\n        'six' => 6,\n        'seven' => 7,\n        'eight' => 8,\n \
    \       'nine' => 9\n    );\n    $number_array = explode(' ', $numbers);\n   \
    \ $sortable_array = array();\n    foreach ($number_array as $index => $number)\
    \ {\n        if (isset($number_map[$number])) {\n            $sortable_array[$index]\
    \ = $number_map[$number];\n        }\n    }\n    sort($sortable_array);\n    $sorted_array\
    \ = array();\n    foreach ($sortable_array as $index => $number) {\n        $sorted_array[$index]\
    \ = array_search($number, $number_map);\n    }\n    return implode(' ', $sorted_array);\n\
    }\n\necho sort_numbers(\"three one five\") . \"\\n\";\necho sort_numbers(\"five\
    \ two three\") . \"\\n\";\necho sort_numbers(\"one eight two six six\") . \"\\\
    n\";\necho sort_numbers(\"nine nine eight two\") . \"\\n\";\necho sort_numbers(\"\
    six eight eight eight four eight\") . \"\\n\";\necho sort_numbers(\"five five\
    \ five one two four seven seven seven seven seven seven seven seven nine nine\
    \ nine nine\") . \"\\n\";", "\n}\n\necho sort_numbers(\"three one five\") . PHP_EOL;\
    \ // should print \"one three five\"", "    $numbers = explode(\" \", $numbers);\n\
    \    $numbers = array_map(function($number) {\n        return $number === 'zero'\
    \ ? 0 : $number === 'one' ? 1 : $number === 'two' ? 2 : $number === 'three' ?\
    \ 3 : $number === 'four' ? 4 : $number === 'five' ? 5 : $number === 'six' ? 6\
    \ : $number === 'seven' ? 7 : $number === 'eight' ? 8 : $number === 'nine' ? 9\
    \ : $number;\n    }, $numbers);\n    sort($numbers);\n    $numbers = array_map(function($number)\
    \ {\n        return $number === 0 ? 'zero' : $number === 1 ? 'one' : $number ===\
    \ 2 ? 'two' : $number === 3 ? 'three' : $number === 4 ? 'four' : $number === 5\
    \ ? 'five' : $number === 6 ? 'six' : $number === 7 ? 'seven' : $number === 8 ?\
    \ 'eight' : $number === 9 ? 'nine' : $number;\n    }, $numbers);\n    return implode(\"\
    \ \", $numbers);\n}\n\necho sort_numbers(\"three one five\");", "  $numbers =\
    \ explode(\" \", $numbers);\n  $numbers = map_to_numerals($numbers);\n  sort($numbers);\n\
    \  $numbers = map_to_words($numbers);\n  return implode(\" \", $numbers);\n}\n",
  "    // Your code here\n}\n", "  $numbers_arr = explode(\" \", $numbers);\n  $numbers_sort\
    \ = array();\n  foreach ($numbers_arr as $number) {\n    switch ($number) {\n\
    \      case 'zero':\n        $numbers_sort[] = 0;\n        break;\n      case\
    \ 'one':\n        $numbers_sort[] = 1;\n        break;\n      case 'two':\n  \
    \      $numbers_sort[] = 2;\n        break;\n      case 'three':\n        $numbers_sort[]\
    \ = 3;\n        break;\n      case 'four':\n        $numbers_sort[] = 4;\n   \
    \     break;\n      case 'five':\n        $numbers_sort[] = 5;\n        break;\n\
    \      case 'six':\n        $numbers_sort[] = 6;\n        break;\n      case 'seven':\n\
    \        $numbers_sort[] = 7;\n        break;\n      case 'eight':\n        $numbers_sort[]\
    \ = 8;\n        break;\n      case 'nine':\n        $numbers_sort[] = 9;\n   \
    \     break;\n    }\n  }\n  sort($numbers_sort);\n  $numbers_out = array();\n\
    \  foreach ($numbers_sort as $n) {\n    switch ($n) {\n      case 0:\n       \
    \ $numbers_out[] = 'zero';\n        break;\n      case 1:\n        $numbers_out[]\
    \ = 'one';\n        break;\n      case 2:\n        $numbers_out[] = 'two';\n \
    \       break;\n      case 3:\n        $numbers_out[] = 'three';\n        break;\n\
    \      case 4:\n        $numbers_out[] = 'four';\n        break;\n      case 5:\n\
    \        $numbers_out[] = 'five';\n        break;\n      case 6:\n        $numbers_out[]\
    \ = 'six';\n        break;\n      case 7:\n        $numbers_out[] = 'seven';\n\
    \        break;\n      case 8:\n        $numbers_out[] = 'eight';\n        break;\n\
    \      case 9:\n        $numbers_out[] = 'nine';\n        break;", "  $numbers\
    \ = explode(\" \", $numbers);\n  $numbers = array_map('convert_word_to_num', $numbers);\n\
    \  sort($numbers);\n  $numbers = array_map('convert_num_to_word', $numbers);\n\
    \  return implode(\" \", $numbers);\n}\n", "    $nums = explode(\" \", $numbers);\n\
    \    $numbers = array(\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\");\n    $returnNums = [];\n    for ($i\
    \ = 0; $i < count($nums); $i++) {\n        for ($j = 0; $j < count($numbers);\
    \ $j++) {\n            if ($nums[$i] == $numbers[$j]) {\n                array_push($returnNums,\
    \ $j);\n            }\n        }\n    }\n    sort($returnNums);\n    $stringReturn\
    \ = \"\";\n    for ($k = 0; $k < count($returnNums); $k++) {\n        $stringReturn\
    \ .= $numbers[$returnNums[$k]] . \" \";\n    }\n    return trim($stringReturn);\n\
    }\n", "  $numeral_mapping = array(\n    'zero' => 0,\n    'one' => 1,\n    'two'\
    \ => 2,\n    'three' => 3,\n    'four' => 4,\n    'five' => 5,\n    'six' => 6,\n\
    \    'seven' => 7,\n    'eight' => 8,\n    'nine' => 9\n  );\n  $numbers = explode('\
    \ ', $numbers);\n  $numbers = array_map(function($number) use ($numeral_mapping)\
    \ {\n    return $numeral_mapping[$number];\n  }, $numbers);\n  sort($numbers);\n\
    \  $numbers = array_map(function($number) use ($numeral_mapping) {\n    return\
    \ array_search($number, $numeral_mapping);\n  }, $numbers);\n  return implode('\
    \ ', $numbers);\n}\n", "  // your code here\n}\n", "  $numbers_arr = explode(\"\
    \ \", $numbers);\n  foreach ($numbers_arr as $key => $val) {\n    $numbers_arr[$key]\
    \ = number_to_digits($val);\n  }\n  sort($numbers_arr);\n  foreach ($numbers_arr\
    \ as $key => $val) {\n    $numbers_arr[$key] = digits_to_number($val);\n  }\n\
    \  return implode(\" \", $numbers_arr);\n}\n", "    $num_map = array('zero' =>\
    \ 0, 'one' => 1, 'two' => 2, 'three' => 3, 'four' => 4, 'five' => 5, 'six' =>\
    \ 6, 'seven' => 7, 'eight' => 8, 'nine' => 9);\n    $num_array = explode(' ',\
    \ $numbers);\n    $sorted_array = array();\n    foreach ($num_array as $num) {\n\
    \        $num_val = $num_map[$num];\n        array_push($sorted_array, $num_val);\n\
    \    }\n    sort($sorted_array);\n    $result = \"\";\n    foreach ($sorted_array\
    \ as $sorted_num) {\n        $key = array_search($sorted_num, $num_map);\n   \
    \     $result .= $key . \" \";\n    }\n    return trim($result);\n}\n", "\t\n\t\
    // convert numbers to ints\n\t$map = array('zero' => 0, 'one' => 1, 'two' => 2,\
    \ 'three' => 3, 'four' => 4, 'five' => 5, 'six' => 6, 'seven' => 7, 'eight' =>\
    \ 8, 'nine' => 9);\n\t$numbers = explode(' ', $numbers);\n\tforeach ($numbers\
    \ as $key => $number) {\n\t\t$numbers[$key] = $map[$number];\n\t}\n\t\n\t// sort\
    \ numbers\n\tsort($numbers);\n\t\n\t// convert back to string\n\tforeach ($numbers\
    \ as $key => $number) {\n\t\t$numbers[$key] = array_search($number, $map);\n\t\
    }\n\t\n\t// return result\n\treturn implode(' ', $numbers);\n}", "  $explodedNumbers\
    \ = explode(\" \", $numbers);\n  $sortedNumbers = \"\";\n  for ($i = 0; $i < count($explodedNumbers);\
    \ $i++) {\n    $sortedNumbers = $sortedNumbers . \" \" . convertNumberToNumeral($explodedNumbers[$i]);\n\
    \  }\n  $sortedNumbers = implode(\" \", $sortedNumbers);\n  return $sortedNumbers;\n\
    }\n", "    $numbers = explode(\" \", $numbers);\n    $numbers = array_map(function($i)\
    \ {\n        switch($i) {\n            case 'zero':\n                return 0;\n\
    \            case 'one':\n                return 1;\n            case 'two':\n\
    \                return 2;\n            case 'three':\n                return\
    \ 3;\n            case 'four':\n                return 4;\n            case 'five':\n\
    \                return 5;\n            case 'six':\n                return 6;\n\
    \            case 'seven':\n                return 7;\n            case 'eight':\n\
    \                return 8;\n            case 'nine':\n                return 9;\n\
    \        }\n    }, $numbers);\n    sort($numbers);\n    $numbers = array_map(function($i)\
    \ {\n        switch($i) {\n            case 0:\n                return 'zero';\n\
    \            case 1:\n                return 'one';\n            case 2:\n   \
    \             return 'two';\n            case 3:\n                return 'three';\n\
    \            case 4:\n                return 'four';\n            case 5:\n  \
    \              return 'five';\n            case 6:\n                return 'six';\n\
    \            case 7:\n                return 'seven';\n            case 8:\n \
    \               return 'eight';\n            case 9:\n                return 'nine';\n\
    \        }\n    }, $numbers);\n    return implode(\" \", $numbers);\n}\n", " \
    \ // your code here\n}\n", "  $map = ['zero' => 0, 'one' => 1, 'two' => 2, 'three'\
    \ => 3, 'four' => 4, 'five' => 5, 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine'\
    \ => 9];\n  $numbers = explode(' ', $numbers);\n  $converted = [];\n  foreach\
    \ ($numbers as $number) {\n    $converted[] = $map[$number];\n  }\n  sort($converted);\n\
    \  $result = [];\n  foreach ($converted as $number) {\n    $result[] = array_search($number,\
    \ $map);\n  }\n  return implode(' ', $result);\n}\n", "  $array = explode(\" \"\
    , $numbers);\n  $dictionary = array(\n    'zero' => 0,\n    'one' => 1,\n    'two'\
    \ => 2,\n    'three' => 3,\n    'four' => 4,\n    'five' => 5,\n    'six' => 6,\n\
    \    'seven' => 7,\n    'eight' => 8,\n    'nine' => 9\n  );\n  $num_array = array();\n\
    \  foreach ($array as $word) {\n    $num_array[] = $dictionary[$word];\n  }\n\
    \  sort($num_array);\n  $word_array = array();\n  foreach ($num_array as $number)\
    \ {\n    $word_array[] = array_search($number, $dictionary);\n  }\n  return implode(\"\
    \ \", $word_array);\n}", "    $nums = explode(\" \", $numbers);\n    $sorted =\
    \ 0;\n    while (!$sorted) {\n        $sorted = 1;\n        for ($i = 0; $i <\
    \ count($nums) - 1; $i++) {\n            if (number_to_word($nums[$i]) > number_to_word($nums[$i\
    \ + 1])) {\n                $tmp = $nums[$i];\n                $nums[$i] = $nums[$i\
    \ + 1];\n                $nums[$i + 1] = $tmp;\n                $sorted = 0;\n\
    \            }\n        }\n    }\n    return implode(\" \", $nums);\n}\n", " \
    \ $num_array = explode(\" \", $numbers);\n  $sorted_numbers = [];\n  for ($i =\
    \ 0; $i < count($num_array); $i++) {\n    $lower_case_num = strtolower($num_array[$i]);\n\
    \    switch ($lower_case_num) {\n      case \"zero\":\n        $sorted_numbers[0]\
    \ = $num_array[$i];\n        break;\n      case \"one\":\n        $sorted_numbers[1]\
    \ = $num_array[$i];\n        break;\n      case \"two\":\n        $sorted_numbers[2]\
    \ = $num_array[$i];\n        break;\n      case \"three\":\n        $sorted_numbers[3]\
    \ = $num_array[$i];\n        break;\n      case \"four\":\n        $sorted_numbers[4]\
    \ = $num_array[$i];\n        break;\n      case \"five\":\n        $sorted_numbers[5]\
    \ = $num_array[$i];\n        break;\n      case \"six\":\n        $sorted_numbers[6]\
    \ = $num_array[$i];\n        break;\n      case \"seven\":\n        $sorted_numbers[7]\
    \ = $num_array[$i];\n        break;\n      case \"eight\":\n        $sorted_numbers[8]\
    \ = $num_array[$i];\n        break;\n      case \"nine\":\n        $sorted_numbers[9]\
    \ = $num_array[$i];\n        break;\n      default:\n        return \"Invalid\
    \ input. \" . $num_array[$i] . \" is not a valid number.\";\n    }\n  }\n  $final_string\
    \ = implode(\" \", $sorted_numbers);\n  return $final_string;\n}", "\t// return\
    \ $numbers;\n\t$numbers_array = explode(\" \", $numbers);\n\tsort($numbers_array);\n\
    \treturn implode(\" \", $numbers_array);\n}\n", "    $word_map = array(\n    \
    \    'zero' => 0,\n        'one' => 1,\n        'two' => 2,\n        'three' =>\
    \ 3,\n        'four' => 4,\n        'five' => 5,\n        'six' => 6,\n      \
    \  'seven' => 7,\n        'eight' => 8,\n        'nine' => 9\n    );\n    $numbers\
    \ = explode(' ', $numbers);\n    $numbers = array_map(function($v) use ($word_map)\
    \ {\n        return $word_map[$v];\n    }, $numbers);\n    sort($numbers);\n \
    \   $numbers = array_map(function($v) use ($word_map) {\n        return array_search($v,\
    \ $word_map);\n    }, $numbers);\n    return implode(' ', $numbers);\n}", "  \
    \  $numArray = explode(\" \", $numbers);\n    $numDict = [\n        'zero' =>\
    \ 0,\n        'one' => 1,\n        'two' => 2,\n        'three' => 3,\n      \
    \  'four' => 4,\n        'five' => 5,\n        'six' => 6,\n        'seven' =>\
    \ 7,\n        'eight' => 8,\n        'nine' => 9\n    ];\n    $numArray = array_map(function($item)\
    \ use ($numDict) {\n        return $numDict[$item];\n    }, $numArray);\n    asort($numArray);\n\
    \    $numArray = array_map(function($item) use ($numDict) {\n        return array_search($item,\
    \ $numDict);\n    }, $numArray);\n    return implode(\" \", $numArray);\n}\n\n\
    echo sort_numbers(\"three one five\") . \"\\n\";", "    $numeral_array = explode(\"\
    \ \", $numbers);\n    $digit_array = [];\n    foreach ($numeral_array as $numeral)\
    \ {\n        switch ($numeral) {\n            case 'zero':\n                $digit_array[]\
    \ = 0;\n                break;\n            case 'one':\n                $digit_array[]\
    \ = 1;\n                break;\n            case 'two':\n                $digit_array[]\
    \ = 2;\n                break;\n            case 'three':\n                $digit_array[]\
    \ = 3;\n                break;\n            case 'four':\n                $digit_array[]\
    \ = 4;\n                break;\n            case 'five':\n                $digit_array[]\
    \ = 5;\n                break;\n            case 'six':\n                $digit_array[]\
    \ = 6;\n                break;\n            case 'seven':\n                $digit_array[]\
    \ = 7;\n                break;\n            case 'eight':\n                $digit_array[]\
    \ = 8;\n                break;\n            case 'nine':\n                $digit_array[]\
    \ = 9;\n                break;\n        }\n    }\n    sort($digit_array);\n  \
    \  $sorted_numbers = \"\";\n    foreach ($digit_array as $digit) {\n        switch\
    \ ($digit) {\n            case 0:\n                $sorted_numbers .= \"zero \"\
    ;\n                break;\n            case 1:\n                $sorted_numbers\
    \ .= \"one \";\n                break;\n            case 2:\n                $sorted_numbers\
    \ .= \"two \";\n                break;\n            case 3:\n                $sorted_numbers\
    \ .= \"three \";\n                break;\n            case 4:\n              \
    \  $sorted_numbers .= \"four \";\n                break;\n            case 5:\n\
    \                $sorted_numbers .= \"five \";\n                break;\n     \
    \       case 6:\n                $sorted_numbers .= \"six \";\n              \
    \  break;\n            case 7:\n                $sorted_numbers .= \"seven \"\
    ;\n                break;\n            case 8:\n                $sorted_numbers\
    \ .= \"eight \";\n                break;\n            case 9:\n              \
    \  $sorted_numbers .", "    $digits = explode(\" \", $numbers);\n    $numeralToNum\
    \ = array(\n        'zero' => 0,\n        'one' => 1,\n        'two' => 2,\n \
    \       'three' => 3,\n        'four' => 4,\n        'five' => 5,\n        'six'\
    \ => 6,\n        'seven' => 7,\n        'eight' => 8,\n        'nine' => 9\n \
    \   );\n    $numToNumeral = array_flip($numeralToNum);\n    $nums = array();\n\
    \    foreach ($digits as $d) {\n        array_push($nums, $numeralToNum[$d]);\n\
    \    }\n    sort($nums);\n    $numeral = array();\n    foreach ($nums as $n) {\n\
    \        array_push($numeral, $numToNumeral[$n]);\n    }\n    return implode(\"\
    \ \", $numeral);\n}\n", "  $numbers_array = explode(\" \", $numbers);\n  for ($i\
    \ = 0; $i < count($numbers_array); $i++) {\n    for ($j = 0; $j < count($numbers_array)\
    \ - 1; $j++) {\n      if ($numbers_array[$j] > $numbers_array[$j + 1]) {\n   \
    \     $temp = $numbers_array[$j];\n        $numbers_array[$j] = $numbers_array[$j\
    \ + 1];\n        $numbers_array[$j + 1] = $temp;\n      }\n    }\n  }\n  return\
    \ implode(\" \", $numbers_array);\n}\n\necho sort_numbers(\"three one five\")\
    \ . \"\\n\";", "\t$num_array = explode(\" \", $numbers);\n\t$numbers_to_sort =\
    \ array();\n\tforeach ($num_array as $number) {\n\t\tswitch ($number) {\n\t\t\t\
    case 'zero':\n\t\t\t\t$numbers_to_sort[] = 0;\n\t\t\t\tbreak;\n\t\t\tcase 'one':\n\
    \t\t\t\t$numbers_to_sort[] = 1;\n\t\t\t\tbreak;\n\t\t\tcase 'two':\n\t\t\t\t$numbers_to_sort[]\
    \ = 2;\n\t\t\t\tbreak;\n\t\t\tcase 'three':\n\t\t\t\t$numbers_to_sort[] = 3;\n\
    \t\t\t\tbreak;\n\t\t\tcase 'four':\n\t\t\t\t$numbers_to_sort[] = 4;\n\t\t\t\t\
    break;\n\t\t\tcase 'five':\n\t\t\t\t$numbers_to_sort[] = 5;\n\t\t\t\tbreak;\n\t\
    \t\tcase 'six':\n\t\t\t\t$numbers_to_sort[] = 6;\n\t\t\t\tbreak;\n\t\t\tcase 'seven':\n\
    \t\t\t\t$numbers_to_sort[] = 7;\n\t\t\t\tbreak;\n\t\t\tcase 'eight':\n\t\t\t\t\
    $numbers_to_sort[] = 8;\n\t\t\t\tbreak;\n\t\t\tcase 'nine':\n\t\t\t\t$numbers_to_sort[]\
    \ = 9;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t$num_array = $numbers_to_sort;\n\tsort($num_array);\n\
    \t$sorted_numbers = array();\n\tforeach ($num_array as $number) {\n\t\tswitch\
    \ ($number) {\n\t\t\tcase 0:\n\t\t\t\t$sorted_numbers[] = 'zero';\n\t\t\t\tbreak;\n\
    \t\t\tcase 1:\n\t\t\t\t$sorted_numbers[] = 'one';\n\t\t\t\tbreak;\n\t\t\tcase\
    \ 2:\n\t\t\t\t$sorted_numbers[] = 'two';\n\t\t\t\tbreak;\n\t\t", "\t$numbers_array\
    \ = explode(\" \", $numbers);\n\t$numbers_array = str_replace(\"zero\", \"0\"\
    , $numbers_array);\n\t$numbers_array = str_replace(\"one\", \"1\", $numbers_array);\n\
    \t$numbers_array = str_replace(\"two\", \"2\", $numbers_array);\n\t$numbers_array\
    \ = str_replace(\"three\", \"3\", $numbers_array);\n\t$numbers_array = str_replace(\"\
    four\", \"4\", $numbers_array);\n\t$numbers_array = str_replace(\"five\", \"5\"\
    , $numbers_array);\n\t$numbers_array = str_replace(\"six\", \"6\", $numbers_array);\n\
    \t$numbers_array = str_replace(\"seven\", \"7\", $numbers_array);\n\t$numbers_array\
    \ = str_replace(\"eight\", \"8\", $numbers_array);\n\t$numbers_array = str_replace(\"\
    nine\", \"9\", $numbers_array);\n\tsort($numbers_array);\n\t$numbers_array = str_replace(\"\
    0\", \"zero\", $numbers_array);\n\t$numbers_array = str_replace(\"1\", \"one\"\
    , $numbers_array);\n\t$numbers_array = str_replace(\"2\", \"two\", $numbers_array);\n\
    \t$numbers_array = str_replace(\"3\", \"three\", $numbers_array);\n\t$numbers_array\
    \ = str_replace(\"4\", \"four\", $numbers_array);\n\t$numbers_array = str_replace(\"\
    5\", \"five\", $numbers_array);\n\t$numbers_array = str_replace(\"6\", \"six\"\
    , $numbers_array);\n\t$numbers_array = str_replace(\"7\", \"seven\", $numbers_array);\n\
    \t$numbers_array = str_replace(\"8\", \"eight\", $numbers_array);\n\t$numbers_array\
    \ = str_replace(\"9\", \"nine\", $numbers_array);\n\treturn implode(\" \", $numbers_array);\n\
    }", "    $numbers_array = explode(\" \", $numbers);\n    sort($numbers_array);\n\
    \    return implode(\" \", $numbers_array);\n}", "\t$numbersArray = explode(\"\
    \ \", $numbers);\n\tforeach ($numbersArray as $key => $number) {\n\t\t$numberArray[$key]\
    \ = array_search($number, array('zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight', 'nine'));\n\t}\n\tsort($numberArray);\n\tforeach ($numberArray\
    \ as $key => $number) {\n\t\t$numbersArray[$key] = array('zero', 'one', 'two',\
    \ 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine')[$number];\n\t}\n\t\
    return implode(\" \", $numbersArray);\n}\n", "    $numbers = explode(\" \", $numbers);\n\
    \    $numbers_array = [];\n    foreach ($numbers as $numerals) {\n        switch\
    \ ($numerals) {\n            case 'zero':\n                $numbers_array[] =\
    \ 0;\n                break;\n            case 'one':\n                $numbers_array[]\
    \ = 1;\n                break;\n            case 'two':\n                $numbers_array[]\
    \ = 2;\n                break;\n            case 'three':\n                $numbers_array[]\
    \ = 3;\n                break;\n            case 'four':\n                $numbers_array[]\
    \ = 4;\n                break;\n            case 'five':\n                $numbers_array[]\
    \ = 5;\n                break;\n            case 'six':\n                $numbers_array[]\
    \ = 6;\n                break;\n            case 'seven':\n                $numbers_array[]\
    \ = 7;\n                break;\n            case 'eight':\n                $numbers_array[]\
    \ = 8;\n                break;\n            case 'nine':\n                $numbers_array[]\
    \ = 9;\n                break;\n        }\n    }\n    sort($numbers_array);\n\
    \    $numbers = [];\n    foreach ($numbers_array as $numerals) {\n        switch\
    \ ($numerals) {\n            case 0:\n                $numbers[] = 'zero';\n \
    \               break;\n            case 1:\n                $numbers[] = 'one';\n\
    \                break;\n            case 2:\n                $numbers[] = 'two';\n\
    \                break;\n            case 3:\n                $numbers[] = 'three';\n\
    \                break;\n            case 4:\n                $numbers[] = 'four';\n\
    \                break;\n            case 5:\n                $numbers[] = 'five';\n\
    \                break;\n            case 6:\n                $numbers[] = 'six';\n\
    \                break;\n            case 7:\n                $numbers[] = 'seven';\n\
    \                break;\n            case 8:\n                $numbers[] = 'eight';\n\
    \                break;\n            case 9:\n                $numbers[] = 'nine';\n\
    \                break;\n        }\n    }\n    return implode(\" \", $numbers);\n\
    }\n", "    $numbers_array = explode(\" \", $numbers);\n    sort($numbers_array);\n\
    \    return implode(\" \", $numbers_array);\n}\n", "    $words = explode(\" \"\
    , $numbers);\n    $number = 0;\n    $nums = array();\n    foreach ($words as $word)\
    \ {\n        switch ($word) {\n            case 'zero':\n                $number\
    \ = 0;\n                break;\n            case 'one':\n                $number\
    \ = 1;\n                break;\n            case 'two':\n                $number\
    \ = 2;\n                break;\n            case 'three':\n                $number\
    \ = 3;\n                break;\n            case 'four':\n                $number\
    \ = 4;\n                break;\n            case 'five':\n                $number\
    \ = 5;\n                break;\n            case 'six':\n                $number\
    \ = 6;\n                break;\n            case 'seven':\n                $number\
    \ = 7;\n                break;\n            case 'eight':\n                $number\
    \ = 8;\n                break;\n            case 'nine':\n                $number\
    \ = 9;\n                break;\n        }\n        $nums[] = $number;\n    }\n\
    \    sort($nums);\n    $output = \"\";\n    foreach ($nums as $num) {\n      \
    \  switch ($num) {\n            case 0:\n                $output .= \"zero \"\
    ;\n                break;\n            case 1:\n                $output .= \"\
    one \";\n                break;\n            case 2:\n                $output\
    \ .= \"two \";\n                break;\n            case 3:\n                $output\
    \ .= \"three \";\n                break;\n            case 4:\n              \
    \  $output .= \"four \";\n                break;\n            case 5:\n      \
    \          $output .= \"five \";\n                break;\n            case 6:\n\
    \                $output .= \"six \";\n                break;\n            case\
    \ 7:\n                $output .= \"seven \";\n                break;\n       \
    \     case 8:\n                $output .= \"eight \";\n                break;\n\
    \            case 9:\n                $output .= \"nine \";\n                break;\n\
    \        }\n    }\n    echo $output;\n}\n\nsort_numbers(\"three one five\");\n\
    sort_numbers(\"five five nine one seven six one\");\nsort_numbers(\"five two five\
    \ two six nine zero\");\nsort_numbers", "    $numbers = explode(\" \", $numbers);\n\
    \    $numbers = array_map(function($num) {\n        $num = str_replace(\"zero\"\
    , \"0\", $num);\n        $num = str_replace(\"one\", \"1\", $num);\n        $num\
    \ = str_replace(\"two\", \"2\", $num);\n        $num = str_replace(\"three\",\
    \ \"3\", $num);\n        $num = str_replace(\"four\", \"4\", $num);\n        $num\
    \ = str_replace(\"five\", \"5\", $num);\n        $num = str_replace(\"six\", \"\
    6\", $num);\n        $num = str_replace(\"seven\", \"7\", $num);\n        $num\
    \ = str_replace(\"eight\", \"8\", $num);\n        $num = str_replace(\"nine\"\
    , \"9\", $num);\n        return $num;\n    }, $numbers);\n    asort($numbers);\n\
    \    $numbers = array_map(function($num) {\n        $num = str_replace(\"0\",\
    \ \"zero\", $num);\n        $num = str_replace(\"1\", \"one\", $num);\n      \
    \  $num = str_replace(\"2\", \"two\", $num);\n        $num = str_replace(\"3\"\
    , \"three\", $num);\n        $num = str_replace(\"4\", \"four\", $num);\n    \
    \    $num = str_replace(\"5\", \"five\", $num);\n        $num = str_replace(\"\
    6\", \"six\", $num);\n        $num = str_replace(\"7\", \"seven\", $num);\n  \
    \      $num = str_replace(\"8\", \"eight\", $num);\n        $num = str_replace(\"\
    9\", \"nine\", $num);\n        return $num;\n    }, $numbers);\n    return implode(\"\
    \ \", $numbers);\n}\n$numbers = \"zero one five six nine two eight seven three\
    \ four\";\necho sort_numbers($numbers);", "\t// array to translate strings to\
    \ numbers\n\t$string_to_num = array('zero' => 0, 'one' => 1, 'two' => 2, 'three'\
    \ => 3, 'four' => 4, 'five' => 5, 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine'\
    \ => 9);\n\t// convert input string to array\n\t$numbers = explode(' ', $numbers);\n\
    \t// iterate through array and replace string with numbers\n\tfor ($i = 0; $i\
    \ < count($numbers); $i++) {\n\t\t$numbers[$i] = $string_to_num[$numbers[$i]];\n\
    \t}\n\t// sort array in ascending order\n\tsort($numbers);\n\t// iterate through\
    \ array and replace numbers with strings\n\tfor ($i = 0; $i < count($numbers);\
    \ $i++) {\n\t\t$numbers[$i] = array_search($numbers[$i], $string_to_num);\n\t\
    }\n\t// return string\n\treturn implode(' ', $numbers);\n}", "    $numbers = explode(\"\
    \ \", $numbers);\n    $numbers_values = array('zero' => 0, 'one' => 1, 'two' =>\
    \ 2, 'three' => 3, 'four' => 4, 'five' => 5, 'six' => 6, 'seven' => 7, 'eight'\
    \ => 8, 'nine' => 9);\n    foreach ($numbers as $k => $v) {\n        $numbers[$k]\
    \ = $numbers_values[$v];\n    }\n    sort($numbers);\n    foreach ($numbers as\
    \ $k => $v) {\n        $numbers[$k] = array_search($v, $numbers_values);\n   \
    \ }\n    return implode(\" \", $numbers);\n}\n", "  $numList = explode(\" \",\
    \ $numbers);\n  $numDigits = [];\n  foreach ($numList as $number) {\n    if ($number\
    \ == \"zero\") {\n      $numDigits[] = 0;\n    } elseif ($number == \"one\") {\n\
    \      $numDigits[] = 1;\n    } elseif ($number == \"two\") {\n      $numDigits[]\
    \ = 2;\n    } elseif ($number == \"three\") {\n      $numDigits[] = 3;\n    }\
    \ elseif ($number == \"four\") {\n      $numDigits[] = 4;\n    } elseif ($number\
    \ == \"five\") {\n      $numDigits[] = 5;\n    } elseif ($number == \"six\") {\n\
    \      $numDigits[] = 6;\n    } elseif ($number == \"seven\") {\n      $numDigits[]\
    \ = 7;\n    } elseif ($number == \"eight\") {\n      $numDigits[] = 8;\n    }\
    \ elseif ($number == \"nine\") {\n      $numDigits[] = 9;\n    }\n  }\n  sort($numDigits);\n\
    \  $output = [];\n  foreach ($numDigits as $num) {\n    if ($num == 0) {\n   \
    \   $output[] = \"zero\";\n    } elseif ($num == 1) {\n      $output[] = \"one\"\
    ;\n    } elseif ($num == 2) {\n      $output[] = \"two\";\n    } elseif ($num\
    \ == 3) {\n      $output[] = \"three\";\n    } elseif ($num == 4) {\n      $output[]\
    \ = \"four\";\n    } elseif ($num == 5) {\n      $output[] = \"five\";\n    }\
    \ elseif ($num == 6) {\n      $output[] = \"six\";\n    } elseif ($num == 7) {\n\
    \      $output[] = \"seven\";\n    } elseif ($num == 8) {\n      $output[] = \"\
    eight\";\n    } elseif ($num == 9) {\n      $output[] = \"nine\";\n    }\n  }\n\
    \  return implode(\" \", $output);\n}\n", "    $numbers = explode(\" \", $numbers);\n\
    \    $map = [\n        'zero' => 0,\n        'one' => 1,\n        'two' => 2,\n\
    \        'three' => 3,\n        'four' => 4,\n        'five' => 5,\n        'six'\
    \ => 6,\n        'seven' => 7,\n        'eight' => 8,\n        'nine' => 9\n \
    \   ];\n    foreach ($numbers as $key => $value) {\n        $numbers[$key] = $map[$value];\n\
    \    }\n    sort($numbers);\n    foreach ($numbers as $key => $value) {\n    \
    \    $numbers[$key] = array_search($value, $map);\n    }\n    return implode(\"\
    \ \", $numbers);\n}\n", "  $dict = array('zero' => 0, 'one' => 1, 'two' => 2,\
    \ 'three' => 3, 'four' => 4, 'five' => 5, 'six' => 6, 'seven' => 7, 'eight' =>\
    \ 8, 'nine' => 9);\n  $arr = explode(' ', $numbers);\n  usort($arr, function($a,\
    \ $b) use ($dict) {\n    if ($dict[$a] < $dict[$b]) {\n      return -1;\n    }\
    \ elseif ($dict[$a] > $dict[$b]) {\n      return 1;\n    } else {\n      return\
    \ 0;\n    }\n  });\n  return implode(' ', $arr);\n}\n", "    // TODO\n    return\
    \ $numbers;\n}\n", "    $nums = explode(\" \", $numbers);\n    $sorted = array();\n\
    \    foreach ($nums as $num) {\n        switch ($num) {\n            case \"zero\"\
    :\n                $sorted[] = 0;\n                break;\n            case \"\
    one\":\n                $sorted[] = 1;\n                break;\n            case\
    \ \"two\":\n                $sorted[] = 2;\n                break;\n         \
    \   case \"three\":\n                $sorted[] = 3;\n                break;\n\
    \            case \"four\":\n                $sorted[] = 4;\n                break;\n\
    \            case \"five\":\n                $sorted[] = 5;\n                break;\n\
    \            case \"six\":\n                $sorted[] = 6;\n                break;\n\
    \            case \"seven\":\n                $sorted[] = 7;\n               \
    \ break;\n            case \"eight\":\n                $sorted[] = 8;\n      \
    \          break;\n            case \"nine\":\n                $sorted[] = 9;\n\
    \                break;\n        }\n    }\n    sort($sorted);\n    $output = array();\n\
    \    foreach ($sorted as $s) {\n        switch ($s) {\n            case 0:\n \
    \               $output[] = \"zero\";\n                break;\n            case\
    \ 1:\n                $output[] = \"one\";\n                break;\n         \
    \   case 2:\n                $output[] = \"two\";\n                break;\n  \
    \          case 3:\n                $output[] = \"three\";\n                break;\n\
    \            case 4:\n                $output[] = \"four\";\n                break;\n\
    \            case 5:\n                $output[] = \"five\";\n                break;\n\
    \            case 6:\n                $output[] = \"six\";\n                break;\n\
    \            case 7:\n                $output[] = \"seven\";\n               \
    \ break;\n            case 8:\n                $output[] = \"eight\";\n      \
    \          break;\n            case 9:\n                $output[] = \"nine\";\n\
    \                break;\n        }\n    }\n    return implode(\" \", $output);\n\
    }\n", "    $mapping = array(\"zero\" => 0, \"one\" => 1, \"two\" => 2, \"three\"\
    \ => 3, \"four\" => 4, \"five\" => 5, \"six\" => 6, \"seven\" => 7, \"eight\"\
    \ => 8, \"nine\" => 9);\n    $array = explode(\" \", $numbers);\n    $intArray\
    \ = array();\n    for ($i = 0; $i < count($array); $i++) {\n        $value = $mapping[$array[$i]];\n\
    \        array_push($intArray, $value);\n    }\n    sort($intArray);\n    $result\
    \ = array();\n    foreach ($intArray as $value) {\n        array_push($result,\
    \ array_search($value, $mapping));\n    }\n    return implode(\" \", $result);\n\
    }\n", "  $numbers = explode(\" \", $numbers);\n  $numbers_map = [\n    'zero'\
    \ => 0,\n    'one' => 1,\n    'two' => 2,\n    'three' => 3,\n    'four' => 4,\n\
    \    'five' => 5,\n    'six' => 6,\n    'seven' => 7,\n    'eight' => 8,\n   \
    \ 'nine' => 9\n  ];\n  $numbers = array_map(function($number) use ($numbers_map)\
    \ {\n    return $numbers_map[$number];\n  }, $numbers);\n  sort($numbers);\n \
    \ $numbers = array_map(function($number) use ($numbers_map) {\n    return array_search($number,\
    \ $numbers_map);\n  }, $numbers);\n  return implode(\" \", $numbers);\n}\n", "\t\
    // TODO: Your code here\n\t$numbers = explode(\" \", $numbers);\n\t$length = count($numbers);\n\
    \t$map = [\"zero\" => 0, \"one\" => 1, \"two\" => 2, \"three\" => 3, \"four\"\
    \ => 4, \"five\" => 5, \"six\" => 6, \"seven\" => 7, \"eight\" => 8, \"nine\"\
    \ => 9];\n\tfor ($i = 0; $i < $length; $i++) {\n\t\tfor ($j = $i + 1; $j < $length;\
    \ $j++) {\n\t\t\tif ($map[$numbers[$i]] > $map[$numbers[$j]]) {\n\t\t\t\t$temp\
    \ = $numbers[$i];\n\t\t\t\t$numbers[$i] = $numbers[$j];\n\t\t\t\t$numbers[$j]\
    \ = $temp;\n\t\t\t}\n\t\t}\n\t}\n\treturn implode(\" \", $numbers);\n}", "   \
    \ $numbers_array = explode(\" \", $numbers);\n    // TODO: Implement me\n    //\
    \ sort the array\n    // join the array into a string\n    // return the string\n\
    \    return $numbers;\n}\n\n$numbers = sort_numbers(\"three one five\");\necho\
    \ \"numbers: $numbers\" . PHP_EOL;", "  $translation = array(\n    'zero' => 0,\n\
    \    'one' => 1,\n    'two' => 2,\n    'three' => 3,\n    'four' => 4,\n    'five'\
    \ => 5,\n    'six' => 6,\n    'seven' => 7,\n    'eight' => 8,\n    'nine' =>\
    \ 9\n  );\n  $num = explode(' ', $numbers);\n  $temp = array();\n  for ($i = 0;\
    \ $i < count($num); $i++) {\n    $temp[$i] = $translation[$num[$i]];\n  }\n  sort($temp);\n\
    \  $rev = array_flip($translation);\n  for ($i = 0; $i < count($temp); $i++) {\n\
    \    $temp[$i] = $rev[$temp[$i]];\n  }\n  return implode(' ', $temp);\n}\n", " \
    \ $numbers = explode(\" \", $numbers);\n  $num_dict = array('zero' => 0, 'one'\
    \ => 1, 'two' => 2, 'three' => 3, 'four' => 4, 'five' => 5, 'six' => 6, 'seven'\
    \ => 7, 'eight' => 8, 'nine' => 9);\n  $nums = array();\n  for ($i = 0; $i < count($numbers);\
    \ $i++) {\n    array_push($nums, $num_dict[$numbers[$i]]);\n  }\n  sort($nums);\n\
    \  for ($i = 0; $i < count($nums); $i++) {\n    $nums[$i] = array_search($nums[$i],\
    \ $num_dict);\n  }\n  return implode(\" \", $nums);\n}\necho sort_numbers(\"three\
    \ one five\");", "\t$number_map = array(\n\t\t\"zero\" => 0,\n\t\t\"one\" => 1,\n\
    \t\t\"two\" => 2,\n\t\t\"three\" => 3,\n\t\t\"four\" => 4,\n\t\t\"five\" => 5,\n\
    \t\t\"six\" => 6,\n\t\t\"seven\" => 7,\n\t\t\"eight\" => 8,\n\t\t\"nine\" => 9\n\
    \t);\n\t$num_array = array();\n\tforeach (explode(\" \", $numbers) as $number)\
    \ {\n\t\t$num_array[] = $number_map[$number];\n\t}\n\tsort($num_array);\n\t$sorted_numbers\
    \ = array();\n\tforeach ($num_array as $num) {\n\t\t$sorted_numbers[] = array_search($num,\
    \ $number_map);\n\t}\n\treturn implode(\" \", $sorted_numbers);\n}\n", "  return\
    \ implode(' ', bubble_sort($numbers));\n}\n", "\t$numbers = explode(\" \", $numbers);\n\
    \t$array = [];\n\tforeach ($numbers as $number) {\n\t\tswitch ($number) {\n\t\t\
    \tcase 'zero':\n\t\t\t\t$array[] = 0;\n\t\t\t\tbreak;\n\t\t\tcase 'one':\n\t\t\
    \t\t$array[] = 1;\n\t\t\t\tbreak;\n\t\t\tcase 'two':\n\t\t\t\t$array[] = 2;\n\t\
    \t\t\tbreak;\n\t\t\tcase 'three':\n\t\t\t\t$array[] = 3;\n\t\t\t\tbreak;\n\t\t\
    \tcase 'four':\n\t\t\t\t$array[] = 4;\n\t\t\t\tbreak;\n\t\t\tcase 'five':\n\t\t\
    \t\t$array[] = 5;\n\t\t\t\tbreak;\n\t\t\tcase 'six':\n\t\t\t\t$array[] = 6;\n\t\
    \t\t\tbreak;\n\t\t\tcase 'seven':\n\t\t\t\t$array[] = 7;\n\t\t\t\tbreak;\n\t\t\
    \tcase 'eight':\n\t\t\t\t$array[] = 8;\n\t\t\t\tbreak;\n\t\t\tcase 'nine':\n\t\
    \t\t\t$array[] = 9;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\tsort($array);\n\t$result =\
    \ [];\n\tforeach ($array as $value) {\n\t\tswitch ($value) {\n\t\t\tcase 0:\n\t\
    \t\t\t$result[] = 'zero';\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\t$result[] =\
    \ 'one';\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\t\t\t\t$result[] = 'two';\n\t\t\t\t\
    break;\n\t\t\tcase 3:\n\t\t\t\t$result[] = 'three';\n\t\t\t\tbreak;\n\t\t\tcase\
    \ 4:\n\t\t\t\t$result[] = 'four';\n\t\t\t\tbreak;\n\t\t\tcase 5:\n\t\t\t\t$result[]\
    \ = 'five';\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\t$result[] = 'six';", "   \
    \ $nums = explode(\" \", $numbers);\n    $num_sort = array();\n    foreach ($nums\
    \ as $num) {\n        switch ($num) {\n            case \"zero\":\n          \
    \      $num_sort[] = 0;\n                break;\n            case \"one\":\n \
    \               $num_sort[] = 1;\n                break;\n            case \"\
    two\":\n                $num_sort[] = 2;\n                break;\n           \
    \ case \"three\":\n                $num_sort[] = 3;\n                break;\n\
    \            case \"four\":\n                $num_sort[] = 4;\n              \
    \  break;\n            case \"five\":\n                $num_sort[] = 5;\n    \
    \            break;\n            case \"six\":\n                $num_sort[] =\
    \ 6;\n                break;\n            case \"seven\":\n                $num_sort[]\
    \ = 7;\n                break;\n            case \"eight\":\n                $num_sort[]\
    \ = 8;\n                break;\n            case \"nine\":\n                $num_sort[]\
    \ = 9;\n                break;\n        }\n    }\n    sort($num_sort);\n    $result\
    \ = \"\";\n    foreach ($num_sort as $num) {\n        switch ($num) {\n      \
    \      case 0:\n                $result .= \"zero \";\n                break;\n\
    \            case 1:\n                $result .= \"one \";\n                break;\n\
    \            case 2:\n                $result .= \"two \";\n                break;\n\
    \            case 3:\n                $result .= \"three \";\n               \
    \ break;\n            case 4:\n                $result .= \"four \";\n       \
    \         break;\n            case 5:\n                $result .= \"five \";\n\
    \                break;\n            case 6:\n                $result .= \"six\
    \ \";\n                break;\n            case 7:\n                $result .=\
    \ \"seven \";\n                break;\n            case 8:\n                $result\
    \ .= \"eight \";\n                break;\n            case 9:\n              \
    \  $result .= \"nine \";\n                break;\n        }\n    }\n    return\
    \ rtrim($result);\n}", "\t\n\t//make the string a array\n\t$num_arr = explode(\"\
    \ \", $numbers);\n\t\n\t//set some variables\n\t$num_map = array(\"zero\" => 0,\
    \ \"one\" => 1, \"two\" => 2, \"three\" => 3, \"four\" => 4, \"five\" => 5, \"\
    six\" => 6, \"seven\" => 7, \"eight\" => 8, \"nine\" => 9);\n\t$num_string = \"\
    \";\n\t\n\t//sort the array numerically\n\tsort($num_arr);\n\t\n\t//loop through\
    \ the sorted array\n\tforeach($num_arr as $num){\n\t\t\n\t\t//convert the number\
    \ back to string\n\t\t$num_string .= array_search($num, $num_map) . \" \";\n\t\
    }\n\t\n\t//return the string with the sorted numbers\n\treturn rtrim($num_string);\n\
    }", "\n}\n", "\t$numbers = explode(\" \", $numbers);\n\t$numbers = array_flip($numbers);\n\
    \tsort($numbers);\n\t$numbers = array_flip($numbers);\n\treturn implode(\" \"\
    , $numbers);\n}", "  $result = \"\";\n  $input_array = explode(\" \", $numbers);\n\
    \  $output_array = [];\n  $result_array = [];\n  for ($i = 0; $i < count($input_array);\
    \ $i++) {\n    switch ($input_array[$i]) {\n      case \"zero\":\n        $output_array[$i]\
    \ = 0;\n        break;\n      case \"one\":\n        $output_array[$i] = 1;\n\
    \        break;\n      case \"two\":\n        $output_array[$i] = 2;\n       \
    \ break;\n      case \"three\":\n        $output_array[$i] = 3;\n        break;\n\
    \      case \"four\":\n        $output_array[$i] = 4;\n        break;\n      case\
    \ \"five\":\n        $output_array[$i] = 5;\n        break;\n      case \"six\"\
    :\n        $output_array[$i] = 6;\n        break;\n      case \"seven\":\n   \
    \     $output_array[$i] = 7;\n        break;\n      case \"eight\":\n        $output_array[$i]\
    \ = 8;\n        break;\n      case \"nine\":\n        $output_array[$i] = 9;\n\
    \        break;\n    }\n  }\n  sort($output_array);\n  for ($i = 0; $i < count($output_array);\
    \ $i++) {\n    switch ($output_array[$i]) {\n      case 0:\n        $result_array[$i]\
    \ = \"zero\";\n        break;\n      case 1:\n        $result_array[$i] = \"one\"\
    ;\n        break;\n      case 2:\n        $result_array[$i] = \"two\";\n     \
    \   break;\n      case 3:\n        $result_array[$i] = \"three\";\n        break;\n\
    \      case 4:\n        $result_array[$i] = \"four\";\n        break;\n      case\
    \ 5:\n        $result_array[$i] = \"five\";\n        break;\n      case 6:\n \
    \       $result_array[$i] = \"six\";\n        break;\n      case 7", "  $numbers_array\
    \ = explode(\" \", $numbers);\n  $numeral_map = [\n    'zero' => 0,\n    'one'\
    \ => 1,\n    'two' => 2,\n    'three' => 3,\n    'four' => 4,\n    'five' => 5,\n\
    \    'six' => 6,\n    'seven' => 7,\n    'eight' => 8,\n    'nine' => 9\n  ];\n\
    \  $number_map = array_flip($numeral_map);\n  $sorted_numbers = [];\n  foreach\
    \ ($numbers_array as $numeral) {\n    $sorted_numbers[] = $numeral_map[$numeral];\n\
    \  }\n  sort($sorted_numbers);\n  $sorted_numerals = [];\n  foreach ($sorted_numbers\
    \ as $number) {\n    $sorted_numerals[] = $number_map[$number];\n  }\n  return\
    \ implode(\" \", $sorted_numerals);\n}\n", "    $numbers = explode(\" \", $numbers);\n\
    \    $words = [\n        'zero' => 0,\n        'one' => 1,\n        'two' => 2,\n\
    \        'three' => 3,\n        'four' => 4,\n        'five' => 5,\n        'six'\
    \ => 6,\n        'seven' => 7,\n        'eight' => 8,\n        'nine' => 9\n \
    \   ];\n    $mapped = array_map(function($number) use ($words) {\n        return\
    \ $words[$number];\n    }, $numbers);\n    sort($mapped);\n    $sorted = array_map(function($number)\
    \ use ($words) {\n        return array_search($number, $words);\n    }, $mapped);\n\
    \    return implode(\" \", $sorted);\n}\n", "\t$index_array = array();\n\t// $numbers_array\
    \ = explode(\" \", $numbers);\n\t$numbers_array = preg_split(\"/[\\s,]+/\", $numbers);\n\
    \tforeach ($numbers_array as $value) {\n\t\t$int_value = intval($value);\n\t\t\
    array_push($index_array, $int_value);\n\t}\n\tsort($index_array);\n\t$sorted_numbers\
    \ = \"\";\n\tforeach ($index_array as $value) {\n\t\t$sorted_numbers .= $value\
    \ . \" \";\n\t}\n\treturn $sorted_numbers;\n}", "    $numbers = explode(\" \"\
    , $numbers);\n    $numbers = array_map(function($num) {\n        switch ($num)\
    \ {\n            case 'zero': return 0;\n            case 'one': return 1;\n \
    \           case 'two': return 2;\n            case 'three': return 3;\n     \
    \       case 'four': return 4;\n            case 'five': return 5;\n         \
    \   case 'six': return 6;\n            case 'seven': return 7;\n            case\
    \ 'eight': return 8;\n            case 'nine': return 9;\n        }\n    }, $numbers);\n\
    \    asort($numbers);\n    $numbers = array_map(function($num) {\n        switch\
    \ ($num) {\n            case 0: return 'zero';\n            case 1: return 'one';\n\
    \            case 2: return 'two';\n            case 3: return 'three';\n    \
    \        case 4: return 'four';\n            case 5: return 'five';\n        \
    \    case 6: return 'six';\n            case 7: return 'seven';\n            case\
    \ 8: return 'eight';\n            case 9: return 'nine';\n        }\n    }, $numbers);\n\
    \    return implode(\" \", $numbers);\n}", "\t$numbersArr = explode(\" \", $numbers);\n\
    \t$numbersNum = array();\n\tforeach ($numbersArr as $num) {\n\t\tswitch ($num)\
    \ {\n\t\t\tcase 'zero':\n\t\t\t\t$numbersNum[] = 0;\n\t\t\t\tbreak;\n\t\t\tcase\
    \ 'one':\n\t\t\t\t$numbersNum[] = 1;\n\t\t\t\tbreak;\n\t\t\tcase 'two':\n\t\t\t\
    \t$numbersNum[] = 2;\n\t\t\t\tbreak;\n\t\t\tcase 'three':\n\t\t\t\t$numbersNum[]\
    \ = 3;\n\t\t\t\tbreak;\n\t\t\tcase 'four':\n\t\t\t\t$numbersNum[] = 4;\n\t\t\t\
    \tbreak;\n\t\t\tcase 'five':\n\t\t\t\t$numbersNum[] = 5;\n\t\t\t\tbreak;\n\t\t\
    \tcase 'six':\n\t\t\t\t$numbersNum[] = 6;\n\t\t\t\tbreak;\n\t\t\tcase 'seven':\n\
    \t\t\t\t$numbersNum[] = 7;\n\t\t\t\tbreak;\n\t\t\tcase 'eight':\n\t\t\t\t$numbersNum[]\
    \ = 8;\n\t\t\t\tbreak;\n\t\t\tcase 'nine':\n\t\t\t\t$numbersNum[] = 9;\n\t\t\t\
    \tbreak;\n\t\t}\n\t}\n\tsort($numbersNum);\n\t$returned = \"\";\n\tforeach ($numbersNum\
    \ as $num) {\n\t\tswitch ($num) {\n\t\t\tcase 0:\n\t\t\t\t$returned .= \"zero\
    \ \";\n\t\t\t\tbreak;\n\t\t\tcase 1:\n\t\t\t\t$returned .= \"one \";\n\t\t\t\t\
    break;\n\t\t\tcase 2:\n\t\t\t\t$returned .= \"two \";\n\t\t\t\tbreak;\n\t\t\t\
    case 3:\n\t\t\t\t$returned .= \"three \";\n\t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\
    \t\t$returned .= \"four \";\n\t\t\t\tbreak;\n\t", "\t$numbers = explode(\" \"\
    , $numbers);\n\t$numbers = array_unique($numbers);\n\t$numbers = translate_numbers($numbers);\n\
    \t$numbers = sort_number_array($numbers);\n\t$numbers = translate_numbers($numbers,\
    \ false);\n\t$numbers = implode(\" \", $numbers);\n\treturn $numbers;\n}", "\t\
    $num_map = array(\n\t\t\"zero\" => 0,\n\t\t\"one\" => 1,\n\t\t\"two\" => 2,\n\t\
    \t\"three\" => 3,\n\t\t\"four\" => 4,\n\t\t\"five\" => 5,\n\t\t\"six\" => 6,\n\
    \t\t\"seven\" => 7,\n\t\t\"eight\" => 8,\n\t\t\"nine\" => 9\n\t);\n\t$num_arr\
    \ = explode(\" \", $numbers);\n\t$output = array();\n\tforeach ($num_arr as $num)\
    \ {\n\t\t$output[] = $num_map[$num];\n\t}\n\tsort($output);\n\t$ret = \"\";\n\t\
    foreach ($output as $num) {\n\t\t$ret .= array_search($num, $num_map) . \" \"\
    ;\n\t}\n\treturn trim($ret);\n}", "    $numbers = explode(\" \", $numbers);\n\
    \    $output = [];\n    foreach ($numbers as $number) {\n        switch ($number)\
    \ {\n            case 'zero':\n                $output[] = 0;\n              \
    \  break;\n            case 'one':\n                $output[] = 1;\n         \
    \       break;\n            case 'two':\n                $output[] = 2;\n    \
    \            break;\n            case 'three':\n                $output[] = 3;\n\
    \                break;\n            case 'four':\n                $output[] =\
    \ 4;\n                break;\n            case 'five':\n                $output[]\
    \ = 5;\n                break;\n            case 'six':\n                $output[]\
    \ = 6;\n                break;\n            case 'seven':\n                $output[]\
    \ = 7;\n                break;\n            case 'eight':\n                $output[]\
    \ = 8;\n                break;\n            case 'nine':\n                $output[]\
    \ = 9;\n                break;\n        }\n    }\n    sort($output);\n    foreach\
    \ ($output as $key => $num) {\n        switch ($num) {\n            case 0:\n\
    \                $output[$key] = 'zero';\n                break;\n           \
    \ case 1:\n                $output[$key] = 'one';\n                break;\n  \
    \          case 2:\n                $output[$key] = 'two';\n                break;\n\
    \            case 3:\n                $output[$key] = 'three';\n             \
    \   break;\n            case 4:\n                $output[$key] = 'four';\n   \
    \             break;\n            case 5:\n                $output[$key] = 'five';\n\
    \                break;\n            case 6:\n                $output[$key] =\
    \ 'six';\n                break;\n            case 7:\n                $output[$key]\
    \ = 'seven';\n                break;\n            case 8:\n                $output[$key]\
    \ = 'eight';\n                break;\n            case 9:\n                $output[$key]\
    \ = 'nine';\n                break;\n        }\n    }\n    return implode(\" \"\
    , $output);\n}\n\n$fptr = fopen(getenv(\"OUTPUT_PATH\"), \"w\");\n\n$__fp = fopen(\"\
    php://std", "    $inputArr = explode(\" \", $numbers);\n    $numArr = array(\n\
    \        'zero' => 0,\n        'one' => 1,\n        'two' => 2,\n        'three'\
    \ => 3,\n        'four' => 4,\n        'five' => 5,\n        'six' => 6,\n   \
    \     'seven' => 7,\n        'eight' => 8,\n        'nine' => 9\n    );\n    $resultArr\
    \ = array();\n    foreach ($inputArr as $num) {\n        if (in_array($num, array_keys($numArr)))\
    \ {\n            $resultArr[] = $numArr[$num];\n        }\n    }\n    sort($resultArr);\n\
    \    $outputArr = array();\n    foreach ($resultArr as $num) {\n        $outputArr[]\
    \ = array_search($num, $numArr);\n    }\n    return implode(\" \", $outputArr);\n\
    }", "    $map = array(\n        'zero' => 0,\n        'one' => 1,\n        'two'\
    \ => 2,\n        'three' => 3,\n        'four' => 4,\n        'five' => 5,\n \
    \       'six' => 6,\n        'seven' => 7,\n        'eight' => 8,\n        'nine'\
    \ => 9\n    );\n    $numbers = explode(' ', $numbers);\n    sort($numbers);\n\
    \    foreach ($numbers as $key => $number) {\n        $numbers[$key] = array_search($number,\
    \ $map);\n    }\n    return implode(' ', $numbers);\n}\n", "    $numberArray =\
    \ explode(\" \", $numbers);\n    $numberString = \"\";\n    foreach ($numberArray\
    \ as $number) {\n        $numberString .= sort_number($number);\n    }\n    return\
    \ $numberString;\n}\n", "    $number_map = [\n        'zero' => 0,\n        'one'\
    \ => 1,\n        'two' => 2,\n        'three' => 3,\n        'four' => 4,\n  \
    \      'five' => 5,\n        'six' => 6,\n        'seven' => 7,\n        'eight'\
    \ => 8,\n        'nine' => 9,\n    ];\n    $numbers = explode(' ', $numbers);\n\
    \    $numbers = array_map(function($number) use ($number_map) {\n        return\
    \ $number_map[$number];\n    }, $numbers);\n    sort($numbers);\n    $numbers\
    \ = array_map(function($number) use ($number_map) {\n        return array_search($number,\
    \ $number_map);\n    }, $numbers);\n    return implode(' ', $numbers);\n}\necho\
    \ sort_numbers(\"three one five\");", "  $numbers_to_sorts = explode(\" \", $numbers);\n\
    \  $numbers_to_sort = array();\n  foreach ($numbers_to_sorts as $n) {\n    $numbers_to_sort[]\
    \ = number_to_int($n);\n  }\n  sort($numbers_to_sort);\n  $sorted_numbers = array();\n\
    \  foreach ($numbers_to_sort as $n) {\n    $sorted_numbers[] = int_to_number($n);\n\
    \  }\n  return implode(\" \", $sorted_numbers);\n}", "  return $numbers;\n}\n",
  "\t$map = array(\"zero\" => 0, \"one\" => 1, \"two\" => 2, \"three\" => 3, \"four\"\
    \ => 4, \"five\" => 5, \"six\" => 6, \"seven\" => 7, \"eight\" => 8, \"nine\"\
    \ => 9);\n\t$numbers = explode(\" \", $numbers);\n\tsort($numbers);\n\treturn\
    \ implode(\" \", $numbers);\n}", "  $num_dict = array(\n    'zero'  => 0,\n  \
    \  'one'   => 1,\n    'two'   => 2,\n    'three' => 3,\n    'four'  => 4,\n  \
    \  'five'  => 5,\n    'six'   => 6,\n    'seven' => 7,\n    'eight' => 8,\n  \
    \  'nine'  => 9\n  );\n  $output = array();\n  $numbers = explode(' ', $numbers);\n\
    \  foreach ($numbers as $number) {\n    $output[] = $num_dict[$number];\n  }\n\
    \  sort($output);\n  $output = array_map(function($number) use ($num_dict) {\n\
    \    return array_search($number, $num_dict);\n  }, $output);\n  return implode('\
    \ ', $output);\n}\n", "\t// Your code here\n\t//[1, 2, 3, 4, 5, 6, 7, 8, 9]\n\t\
    $reverse_map = array('zero' => 0, 'one' => 1, 'two' => 2, 'three' => 3, 'four'\
    \ => 4, 'five' => 5, 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine' => 9);\n\t\
    // $numbers_to_sort = explode(\" \", $numbers);\n\t$sorted_numbers = \"\";\n\t\
    for ($i = 0; $i < count($numbers_to_sort); $i++) {\n\t\t$sorted_numbers .= $reverse_map[$numbers_to_sort[$i]]\
    \ . \" \";\n\t}\n\treturn $sorted_numbers;\n}", "    $numeral_to_number = array(\n\
    \        'zero' => 0,\n        'one' => 1,\n        'two' => 2,\n        'three'\
    \ => 3,\n        'four' => 4,\n        'five' => 5,\n        'six' => 6,\n   \
    \     'seven' => 7,\n        'eight' => 8,\n        'nine' => 9\n    );\n    $numbers\
    \ = explode(' ', $numbers);\n    $numbers = array_map(function($n) use ($numeral_to_number)\
    \ {\n        return $numeral_to_number[$n];\n    }, $numbers);\n    sort($numbers);\n\
    \    $numbers = array_map(function($n) use ($numeral_to_number) {\n        return\
    \ array_search($n, $numeral_to_number);\n    }, $numbers);\n    return implode('\
    \ ', $numbers);\n}\n", "    $english_numbers = array(\"zero\", \"one\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\");\n \
    \   $sorted_numbers = array();\n    foreach(explode(\" \", $numbers) as $number)\
    \ {\n        $sorted_numbers[] = array_search($number, $english_numbers);\n  \
    \  }\n    sort($sorted_numbers);\n    $sorted_numbers = array_map(function($n)\
    \ use ($english_numbers) { return $english_numbers[$n]; }, $sorted_numbers);\n\
    \    return implode(\" \", $sorted_numbers);\n}\n\nif (php_sapi_name() == \"cli\"\
    ) {\n    print(sort_numbers(\"three one five\"));\n}", "  $numbers = explode(\"\
    \ \", $numbers);\n  $numbers = str_replace([\"zero\", \"one\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"], [0, 1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9], $numbers);\n  sort($numbers);\n  $numbers = str_replace([0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9], [\"zero\", \"one\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\", \"seven\", \"eight\", \"nine\"], $numbers);\n  return implode(\"\
    \ \", $numbers);\n}\n", "  $numbers = explode(\" \", $numbers);\n  $valid_choices\
    \ = array(\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"six\",\
    \ \"seven\", \"eight\", \"nine\");\n  $number_values = array();\n  $sorted_numbers\
    \ = array();\n  foreach ($numbers as $number) {\n    if (!in_array($number, $valid_choices))\
    \ {\n      throw new Exception(\"Invalid input string\");\n    }\n    array_push($number_values,\
    \ array_search($number, $valid_choices));\n  }\n  sort($number_values);\n  foreach\
    \ ($number_values as $value) {\n    array_push($sorted_numbers, $valid_choices[$value]);\n\
    \  }\n  return implode(\" \", $sorted_numbers);\n}", "    $numbers_array = explode(\"\
    \ \", $numbers);\n    $num_array = array(0, 1, 2, 3, 4, 5, 6, 7, 8, 9);\n    $num_map\
    \ = array('zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight',\
    \ 'nine');\n    $result = array();\n    foreach ($numbers_array as $item) {\n\
    \        $index = array_search($item, $num_map);\n        $result[] = $num_array[$index];\n\
    \    }\n    sort($result);\n    $word_result = array();\n    foreach ($result\
    \ as $item) {\n        $word_result[] = $num_map[$item];\n    }\n    return implode(\"\
    \ \", $word_result);\n}\n", "    $numbers_arr = explode(\" \", $numbers);\n  \
    \  $num_map = array(\n        'zero' => 0,\n        'one' => 1,\n        'two'\
    \ => 2,\n        'three' => 3,\n        'four' => 4,\n        'five' => 5,\n \
    \       'six' => 6,\n        'seven' => 7,\n        'eight' => 8,\n        'nine'\
    \ => 9\n    );\n    usort($numbers_arr, function($a, $b) use($num_map) {\n   \
    \     return $num_map[$a] - $num_map[$b];\n    });\n    return implode(\" \",\
    \ $numbers_arr);\n}", "\t$numbers = explode(\" \", $numbers);\n\t$ordered = array('zero',\
    \ 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n\t\
    $result = array();\n\tforeach ($numbers as $number) {\n\t\t$result[array_search($number,\
    \ $ordered)] = $number;\n\t}\n\treturn implode(\" \", $result);\n}\n", "  $words\
    \ = explode(\" \", $numbers);\n  $length = count($words);\n  for ($i = 0; $i <\
    \ $length; $i++) {\n    $j = $i;\n    while ($j > 0 && $words[$j - 1] > $words[$j])\
    \ {\n      $temp = $words[$j];\n      $words[$j] = $words[$j - 1];\n      $words[$j\
    \ - 1] = $temp;\n      $j--;\n    }\n  }\n  return implode(\" \", $words);\n}\n\
    \n$s = \"four eight two three six one\";\necho sort_numbers($s);", "  // Your\
    \ code here\n  $number_array = explode(\" \", $numbers);\n  $number_map = array(\n\
    \    \"zero\"=>0,\n    \"one\"=>1,\n    \"two\"=>2,\n    \"three\"=>3,\n    \"\
    four\"=>4,\n    \"five\"=>5,\n    \"six\"=>6,\n    \"seven\"=>7,\n    \"eight\"\
    =>8,\n    \"nine\"=>9\n  );\n  foreach ($number_array as $key => $value) {\n \
    \   $number_array[$key] = $number_map[$value];\n  }\n  sort($number_array);\n\
    \  $number_map = array_flip($number_map);\n  foreach ($number_array as $key =>\
    \ $value) {\n    $number_array[$key] = $number_map[$value];\n  }\n  return implode(\"\
    \ \", $number_array);\n}\n", "    // your code here\n}\n", "    $nums = array('zero',\
    \ 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n \
    \   $split = explode(' ', $numbers);\n    $indexes = array();\n    foreach ($split\
    \ as $number) {\n        $indexes[] = array_search($number, $nums);\n    }\n \
    \   asort($indexes);\n    $split = array();\n    foreach ($indexes as $index)\
    \ {\n        $split[] = $nums[$index];\n    }\n    return implode(' ', $split);\n\
    }\n", "  $numbers = explode(\" \", $numbers);\n  $numArray = array();\n  foreach\
    \ ($numbers as $number) {\n    switch($number) {\n      case \"zero\":\n     \
    \   $numArray[] = 0;\n        break;\n      case \"one\":\n        $numArray[]\
    \ = 1;\n        break;\n      case \"two\":\n        $numArray[] = 2;\n      \
    \  break;\n      case \"three\":\n        $numArray[] = 3;\n        break;\n \
    \     case \"four\":\n        $numArray[] = 4;\n        break;\n      case \"\
    five\":\n        $numArray[] = 5;\n        break;\n      case \"six\":\n     \
    \   $numArray[] = 6;\n        break;\n      case \"seven\":\n        $numArray[]\
    \ = 7;\n        break;\n      case \"eight\":\n        $numArray[] = 8;\n    \
    \    break;\n      case \"nine\":\n        $numArray[] = 9;\n        break;\n\
    \    }\n  }\n  sort($numArray);\n  $sortedNums = array();\n  foreach ($numArray\
    \ as $num) {\n    switch($num) {\n      case 0:\n        $sortedNums[] = \"zero\"\
    ;\n        break;\n      case 1:\n        $sortedNums[] = \"one\";\n        break;\n\
    \      case 2:\n        $sortedNums[] = \"two\";\n        break;\n      case 3:\n\
    \        $sortedNums[] = \"three\";\n        break;\n      case 4:\n        $sortedNums[]\
    \ = \"four\";\n        break;\n      case 5:\n        $sortedNums[] = \"five\"\
    ;\n        break;\n      case 6:\n        $sortedNums[] = \"six\";\n        break;\n\
    \      case 7:\n        $sortedNums[] = \"seven\";\n        break;\n      case\
    \ 8:\n        $sortedNums[] = \"eight\";\n        break;\n      case 9:\n    \
    \    $sortedNums[] = \"nine\";\n        break;\n    }\n  }\n  return implode(\"\
    \ \", $sortedNums);\n}", "    $numbers = explode(\" \", $numbers);\n    $numbers_sort\
    \ = [];\n    foreach ($numbers as $value) {\n        $numbers_sort[] = convert_numbers($value);\n\
    \    }\n    sort($numbers_sort);\n    foreach ($numbers_sort as $key => $value)\
    \ {\n        $numbers_sort[$key] = convert_numbers($value);\n    }\n    return\
    \ implode(\" \", $numbers_sort);\n}\n", "\t$array_of_numbers = explode(\" \",\
    \ $numbers);\n\tsort($array_of_numbers);\n\treturn implode(\" \", $array_of_numbers);\n\
    }\n", "    $numbers_list = explode(\" \", $numbers);\n    $numbers_array = [];\n\
    \    foreach ($numbers_list as $number) {\n        $numbers_array[] = numeral_to_integer($number);\n\
    \    }\n    sort($numbers_array);\n    $numbers_sorted = \"\";\n    foreach ($numbers_array\
    \ as $number) {\n        $numbers_sorted .= integer_to_numeral($number) . \" \"\
    ;\n    }\n    return trim($numbers_sorted);\n}\n", "  $output = explode(\" \"\
    , $numbers);\n  $count = count($output);\n  $number_array = array();\n  for ($i\
    \ = 0; $i < $count; $i++) {\n    switch ($output[$i]) {\n      case \"zero\":\n\
    \        $number_array[$i] = 0;\n        break;\n      case \"one\":\n       \
    \ $number_array[$i] = 1;\n        break;\n      case \"two\":\n        $number_array[$i]\
    \ = 2;\n        break;\n      case \"three\":\n        $number_array[$i] = 3;\n\
    \        break;\n      case \"four\":\n        $number_array[$i] = 4;\n      \
    \  break;\n      case \"five\":\n        $number_array[$i] = 5;\n        break;\n\
    \      case \"six\":\n        $number_array[$i] = 6;\n        break;\n      case\
    \ \"seven\":\n        $number_array[$i] = 7;\n        break;\n      case \"eight\"\
    :\n        $number_array[$i] = 8;\n        break;\n      case \"nine\":\n    \
    \    $number_array[$i] = 9;\n        break;\n    }\n  }\n  sort($number_array);\n\
    \  for ($i = 0; $i < $count; $i++) {\n    switch ($number_array[$i]) {\n     \
    \ case 0:\n        $output[$i] = \"zero\";\n        break;\n      case 1:\n  \
    \      $output[$i] = \"one\";\n        break;\n      case 2:\n        $output[$i]\
    \ = \"two\";\n        break;\n      case 3:\n        $output[$i] = \"three\";\n\
    \        break;\n      case 4:\n        $output[$i] = \"four\";\n        break;\n\
    \      case 5:\n        $output[$i] = \"five\";\n        break;\n      case 6:\n\
    \        $output[$i] = \"six\";\n        break;\n      case 7:\n        $output[$i]\
    \ = \"seven\";\n        break;\n      case 8:\n        $output[$i", "    $arr\
    \ = explode(\" \", $numbers);\n    $number = array();\n    foreach ($arr as $number_string)\
    \ {\n        switch ($number_string) {\n            case 'zero':\n           \
    \     $number[] = 0;\n                break;\n            case 'one':\n      \
    \          $number[] = 1;\n                break;\n            case 'two':\n \
    \               $number[] = 2;\n                break;\n            case 'three':\n\
    \                $number[] = 3;\n                break;\n            case 'four':\n\
    \                $number[] = 4;\n                break;\n            case 'five':\n\
    \                $number[] = 5;\n                break;\n            case 'six':\n\
    \                $number[] = 6;\n                break;\n            case 'seven':\n\
    \                $number[] = 7;\n                break;\n            case 'eight':\n\
    \                $number[] = 8;\n                break;\n            case 'nine':\n\
    \                $number[] = 9;\n                break;\n        }\n    }\n  \
    \  sort($number);\n    $result = array();\n    foreach ($number as $n) {\n   \
    \     switch ($n) {\n            case 0:\n                $result[] = 'zero';\n\
    \                break;\n            case 1:\n                $result[] = 'one';\n\
    \                break;\n            case 2:\n                $result[] = 'two';\n\
    \                break;\n            case 3:\n                $result[] = 'three';\n\
    \                break;\n            case 4:\n                $result[] = 'four';\n\
    \                break;\n            case 5:\n                $result[] = 'five';\n\
    \                break;\n            case 6:\n                $result[] = 'six';\n\
    \                break;\n            case 7:\n                $result[] = 'seven';\n\
    \                break;\n            case 8:\n                $result[] = 'eight';\n\
    \                break;\n            case 9:\n                $result[] = 'nine';\n\
    \                break;\n        }\n    }\n    return implode(\" \", $result);\n\
    }\n\necho sort_numbers(\"three one five\") . \"\\n\";\n", "\treturn $sorted_numbers;\n\
    }\n\nassert('\"one three five\" == sort_numbers(\"three one five\")');\nassert('\"\
    zero three five\" == sort_numbers(\"zero three five\")');\nassert('\"zero three\
    \ five seven eight\" == sort_numbers(\"seven eight zero three five\")');", "\t\
    $numbers_dict = array('zero' => 0, 'one' => 1, 'two' => 2, 'three' => 3, 'four'\
    \ => 4, 'five' => 5, 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine' => 9);\n\t\
    $numbers_arr = explode(' ', $numbers);\n\t$num_arr = array();\n\tforeach ($numbers_arr\
    \ as $number) {\n\t\tarray_push($num_arr, $numbers_dict[$number]);\n\t}\n\tsort($num_arr);\n\
    \t$res = array();\n\tforeach ($num_arr as $num) {\n\t\tarray_push($res, array_search($num,\
    \ $numbers_dict));\n\t}\n\treturn implode(' ', $res);\n}\n", "  $numbers = explode(\"\
    \ \", $numbers);\n  $numbers = array_map(function($number) {\n    switch ($number)\
    \ {\n      case 'zero':\n        return 0;\n      case 'one':\n        return\
    \ 1;\n      case 'two':\n        return 2;\n      case 'three':\n        return\
    \ 3;\n      case 'four':\n        return 4;\n      case 'five':\n        return\
    \ 5;\n      case 'six':\n        return 6;\n      case 'seven':\n        return\
    \ 7;\n      case 'eight':\n        return 8;\n      case 'nine':\n        return\
    \ 9;\n    }\n  }, $numbers);\n  sort($numbers);\n  $numbers = array_map(function($number)\
    \ {\n    switch ($number) {\n      case 0:\n        return 'zero';\n      case\
    \ 1:\n        return 'one';\n      case 2:\n        return 'two';\n      case\
    \ 3:\n        return 'three';\n      case 4:\n        return 'four';\n      case\
    \ 5:\n        return 'five';\n      case 6:\n        return 'six';\n      case\
    \ 7:\n        return 'seven';\n      case 8:\n        return 'eight';\n      case\
    \ 9:\n        return 'nine';\n    }\n  }, $numbers);\n  return implode(\" \",\
    \ $numbers);\n}\n\necho sort_numbers(\"three one five\") . \"\\n\";", "    $number_map\
    \ = array(\n        'zero' => 0,\n        'one' => 1,\n        'two' => 2,\n \
    \       'three' => 3,\n        'four' => 4,\n        'five' => 5,\n        'six'\
    \ => 6,\n        'seven' => 7,\n        'eight' => 8,\n        'nine' => 9\n \
    \   );\n    $numbers = explode(' ', $numbers);\n    $numbers = array_map(function($number)\
    \ use ($number_map) {\n        return $number_map[$number];\n    }, $numbers);\n\
    \    sort($numbers);\n    $numbers = array_map(function($number) use ($number_map)\
    \ {\n        return array_search($number, $number_map);\n    }, $numbers);\n \
    \   return implode(' ', $numbers);\n}\n", "  $nums = explode(\" \", $numbers);\n\
    \  $values = array(\"zero\" => 0, \"one\" => 1, \"two\" => 2, \"three\" => 3,\
    \ \"four\" => 4, \"five\" => 5, \"six\" => 6, \"seven\" => 7, \"eight\" => 8,\
    \ \"nine\" => 9);\n  $sorted = array();\n  foreach ($nums as $key => $value) {\n\
    \    $sorted[$key] = $values[$value];\n  }\n  asort($sorted);\n  $sorted_nums\
    \ = array();\n  foreach ($sorted as $key => $value) {\n    $sorted_nums[$key]\
    \ = array_search($value, $values);\n  }\n  $sorted_nums = implode(\" \", $sorted_nums);\n\
    \  return $sorted_nums;\n}\n\necho sort_numbers(\"three one five\") . \"\\n\"\
    ;\necho sort_numbers(\"one two three four five six seven eight nine\") . \"\\\
    n\";", "\t$split = explode(\" \", $numbers);\n\t$numerals = array(\n\t\t'zero'\
    \ => 0,\n\t\t'one' => 1,\n\t\t'two' => 2,\n\t\t'three' => 3,\n\t\t'four' => 4,\n\
    \t\t'five' => 5,\n\t\t'six' => 6,\n\t\t'seven' => 7,\n\t\t'eight' => 8,\n\t\t\
    'nine' => 9\n\t);\n\t$sorted = array();\n\tforeach ($split as $numeral) {\n\t\t\
    $sorted[] = $numerals[$numeral];\n\t}\n\tasort($sorted);\n\treturn implode(\"\
    \ \", $sorted);\n}", "\t$sorted_numbers = array();\n\t$numbers = explode(\" \"\
    , $numbers);\n\tforeach ($numbers as $number) {\n\t\t$sorted_numbers[] = strval(numeral_to_number($number));\n\
    \t}\n\tsort($sorted_numbers);\n\treturn implode(\" \", $sorted_numbers);\n}\n",
  "  $numberArray = explode(\" \", $numbers);\n  $str = implode(\"\", $numberArray);\n\
    \  $numbers = [];\n  for ($i = 0; $i < strlen($str); $i++) {\n    if (!isset($numbers[$str[$i]]))\
    \ {\n      $numbers[$str[$i]] = 1;\n    } else {\n      $numbers[$str[$i]]++;\n\
    \    }\n  }\n  ksort($numbers);\n  $out = \"\";\n  foreach ($numbers as $key =>\
    \ $value) {\n    $out .= str_repeat($key, $value);\n  }\n  return $out;\n}", " \
    \   $numArray = explode(\" \", $numbers);\n    $numValues = array(\"zero\" =>\
    \ 0, \"one\" => 1, \"two\" => 2, \"three\" => 3, \"four\" => 4, \"five\" => 5,\
    \ \"six\" => 6, \"seven\" => 7, \"eight\" => 8, \"nine\" => 9);\n    $numArray\
    \ = array_map(function($n) use ($numValues) { return $numValues[$n]; }, $numArray);\n\
    \    sort($numArray);\n    $numArray = array_map(function($n) use ($numValues)\
    \ { return array_search($n, $numValues); }, $numArray);\n    return implode(\"\
    \ \", $numArray);\n}\n", "  $map = ['zero' => 0, 'one' => 1, 'two' => 2, 'three'\
    \ => 3, 'four' => 4, 'five' => 5, 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine'\
    \ => 9];\n  $number_array = explode(' ', $numbers);\n  for ($i = 0; $i < count($number_array);\
    \ $i++) {\n    $number_array[$i] = $map[$number_array[$i]];\n  }\n  asort($number_array);\n\
    \  foreach ($number_array as $key => $value) {\n    foreach ($map as $k => $v)\
    \ {\n      if ($value == $v) {\n        $number_array[$key] = $k;\n      }\n \
    \   }\n  }\n  return implode(' ', $number_array);\n}\n", "  $nums = explode(\"\
    \ \", $numbers);\n  $nums_arr = [];\n  foreach ($nums as $num) {\n    $nums_arr[]\
    \ = convert_to_number($num);\n  }\n  sort($nums_arr);\n  $nums_str = \"\";\n \
    \ foreach ($nums_arr as $num) {\n    $nums_str .= convert_to_numeral($num) . \"\
    \ \";\n  }\n  return rtrim($nums_str);\n}\n", "    $numbers = explode(\" \", $numbers);\n\
    \    sort($numbers);\n    return implode(\" \", $numbers);\n}\n", "  $to_numeral\
    \ = [\n    'zero' => 0,\n    'one' => 1,\n    'two' => 2,\n    'three' => 3,\n\
    \    'four' => 4,\n    'five' => 5,\n    'six' => 6,\n    'seven' => 7,\n    'eight'\
    \ => 8,\n    'nine' => 9\n  ];\n  $numbers = explode(' ', $numbers);\n  $numbers\
    \ = array_map(function($value) use ($to_numeral) {\n    return $to_numeral[$value];\n\
    \  }, $numbers);\n  sort($numbers);\n  $to_word = array_flip($to_numeral);\n \
    \ $numbers = array_map(function($value) use ($to_word) {\n    return $to_word[$value];\n\
    \  }, $numbers);\n  return implode(' ', $numbers);\n}\n", "\t$numbers = explode(\"\
    \ \", $numbers);\n\t$return = array();\n\tforeach ($numbers as $number) {\n\t\t\
    switch ($number) {\n\t\t\tcase \"zero\":\n\t\t\t\t$return[0] = \"zero\";\n\t\t\
    \t\tbreak;\n\t\t\tcase \"one\":\n\t\t\t\t$return[1] = \"one\";\n\t\t\t\tbreak;\n\
    \t\t\tcase \"two\":\n\t\t\t\t$return[2] = \"two\";\n\t\t\t\tbreak;\n\t\t\tcase\
    \ \"three\":\n\t\t\t\t$return[3] = \"three\";\n\t\t\t\tbreak;\n\t\t\tcase \"four\"\
    :\n\t\t\t\t$return[4] = \"four\";\n\t\t\t\tbreak;\n\t\t\tcase \"five\":\n\t\t\t\
    \t$return[5] = \"five\";\n\t\t\t\tbreak;\n\t\t\tcase \"six\":\n\t\t\t\t$return[6]\
    \ = \"six\";\n\t\t\t\tbreak;\n\t\t\tcase \"seven\":\n\t\t\t\t$return[7] = \"seven\"\
    ;\n\t\t\t\tbreak;\n\t\t\tcase \"eight\":\n\t\t\t\t$return[8] = \"eight\";\n\t\t\
    \t\tbreak;\n\t\t\tcase \"nine\":\n\t\t\t\t$return[9] = \"nine\";\n\t\t\t\tbreak;\n\
    \t\t}\n\t}\n\treturn implode(\" \", $return);\n}\n\n$input = array(\n\t\"nine\
    \ one five\",\n\t\"three two four\",\n\t\"six seven eight\"\n);\n\nforeach ($input\
    \ as $test) {\n\techo sort_numbers($test) . \"\\n\";\n}", "    $input = explode(\"\
    \ \", $numbers);\n    $order = array('zero', 'one', 'two', 'three', 'four', 'five',\
    \ 'six', 'seven', 'eight', 'nine');\n    $output = array();\n    foreach ($input\
    \ as $key => $value) {\n        $output[$value] = array_search($value, $order);\n\
    \    }\n    asort($output);\n    $result = \"\";\n    foreach ($output as $key\
    \ => $value) {\n        $result .= $key . \" \";\n    }\n    return trim($result);\n\
    }", "  $numbers = explode(\" \", $numbers);\n  $numbers = array_map(function($num)\
    \ {\n    return constant(\"SORTED_NUMERALS_EN::$num\");\n  }, $numbers);\n  sort($numbers);\n\
    \  $numbers = array_map(function($num) {\n    foreach (SORTED_NUMERALS_EN as $str\
    \ => $numeral) {\n      if ($numeral == $num) {\n        return $str;\n      }\n\
    \    }\n  }, $numbers);\n  return implode(\" \", $numbers);\n}\n\nabstract class\
    \ SORTED_NUMERALS_EN {\n  const zero = 0;\n  const one = 1;\n  const two = 2;\n\
    \  const three = 3;\n  const four = 4;\n  const five = 5;\n  const six = 6;\n\
    \  const seven = 7;\n  const eight = 8;\n  const nine = 9;\n}\n\necho sort_numbers(\"\
    three one five\") . \"\\n\";\necho sort_numbers(\"five four three two one\") .\
    \ \"\\n\";\necho sort_numbers(\"zero two one five\") . \"\\n\";", "    $number_map\
    \ = [\n        'zero' => 0,\n        'one' => 1,\n        'two' => 2,\n      \
    \  'three' => 3,\n        'four' => 4,\n        'five' => 5,\n        'six' =>\
    \ 6,\n        'seven' => 7,\n        'eight' => 8,\n        'nine' => 9,\n   \
    \ ];\n    $numbers = explode(' ', $numbers);\n    $numbers = array_map(function($number)\
    \ use ($number_map) {\n        return $number_map[$number];\n    }, $numbers);\n\
    \    sort($numbers);\n    $result = array_map(function($number) use ($number_map)\
    \ {\n        $key = array_search($number, $number_map);\n        return $key;\n\
    \    }, $numbers);\n    return implode(' ', $result);\n}\n\n$input = <<<EOD\n\
    \    Sort numbers from a string. zero one two three four five six seven eight\
    \ nine\nEOD;\necho sort_numbers($input);", "    $number_array = explode(\" \"\
    , $numbers);\n    $number_mapper = array(\n        'zero' => 0,\n        'one'\
    \ => 1,\n        'two' => 2,\n        'three' => 3,\n        'four' => 4,\n  \
    \      'five' => 5,\n        'six' => 6,\n        'seven' => 7,\n        'eight'\
    \ => 8,\n        'nine' => 9\n    );\n    $result = array();\n    foreach ($number_array\
    \ as $number) {\n        $result[] = $number_mapper[$number];\n    }\n    sort($result);\n\
    \    return implode(\" \", $result);\n}\n", "    // Split the string of numbers\
    \ into an array.\n    $numbers_array = explode(\" \", $numbers);\n    // Define\
    \ a new array to store all of the numbers as integers.\n    $numbers_as_int =\
    \ array();\n    // Loop through each number, convert it to an integer and store\
    \ it in the new array.\n    foreach ($numbers_array as $number) {\n        //\
    \ If a number is 'zero', store it as 0.\n        if ($number == 'zero') {\n  \
    \          $numbers_as_int[] = 0;\n        }\n        // If a number is 'one',\
    \ store it as 1.\n        elseif ($number == 'one') {\n            $numbers_as_int[]\
    \ = 1;\n        }\n        // If a number is 'two', store it as 2.\n        elseif\
    \ ($number == 'two') {\n            $numbers_as_int[] = 2;\n        }\n      \
    \  // If a number is 'three', store it as 3.\n        elseif ($number == 'three')\
    \ {\n            $numbers_as_int[] = 3;\n        }\n        // If a number is\
    \ 'four', store it as 4.\n        elseif ($number == 'four') {\n            $numbers_as_int[]\
    \ = 4;\n        }\n        // If a number is 'five', store it as 5.\n        elseif\
    \ ($number == 'five') {\n            $numbers_as_int[] = 5;\n        }\n     \
    \   // If a number is 'six', store it as 6.\n        elseif ($number == 'six')\
    \ {\n            $numbers_as_int[] = 6;\n        }\n        // If a number is\
    \ 'seven', store it as 7.\n        elseif ($number == 'seven') {\n           \
    \ $numbers_as_int[] = 7;\n        }\n        // If a number is 'eight', store\
    \ it as 8.\n        elseif ($number == 'eight') {\n            $numbers_as_int[]\
    \ = 8;\n        }\n        // If a number is 'nine', store it as 9.\n        elseif\
    \ ($number == 'nine') {\n            $numbers_as_int[] = 9;\n        }\n   ",
  "}\n", "  $map = [\n    'zero' => 0,\n    'one' => 1,\n    'two' => 2,\n    'three'\
    \ => 3,\n    'four' => 4,\n    'five' => 5,\n    'six' => 6,\n    'seven' => 7,\n\
    \    'eight' => 8,\n    'nine' => 9,\n  ];\n  $numbers = explode(' ', $numbers);\n\
    \  $numbers = array_map(function($word) use ($map) {\n    return $map[$word];\n\
    \  }, $numbers);\n  sort($numbers);\n  $numbers = array_map(function($number)\
    \ use ($map) {\n    return array_search($number, $map);\n  }, $numbers);\n  return\
    \ implode(' ', $numbers);\n}\n", "  $words = explode(\" \", $numbers);\n  $nums\
    \ = array();\n  foreach ($words as $word) {\n    switch ($word) {\n      case\
    \ 'zero':\n        $nums[] = 0;\n        break;\n      case 'one':\n        $nums[]\
    \ = 1;\n        break;\n      case 'two':\n        $nums[] = 2;\n        break;\n\
    \      case 'three':\n        $nums[] = 3;\n        break;\n      case 'four':\n\
    \        $nums[] = 4;\n        break;\n      case 'five':\n        $nums[] = 5;\n\
    \        break;\n      case 'six':\n        $nums[] = 6;\n        break;\n   \
    \   case 'seven':\n        $nums[] = 7;\n        break;\n      case 'eight':\n\
    \        $nums[] = 8;\n        break;\n      case 'nine':\n        $nums[] = 9;\n\
    \        break;\n    }\n  }\n  sort($nums);\n  $output = \"\";\n  foreach ($nums\
    \ as $num) {\n    switch ($num) {\n      case 0:\n        $output .= \"zero \"\
    ;\n        break;\n      case 1:\n        $output .= \"one \";\n        break;\n\
    \      case 2:\n        $output .= \"two \";\n        break;\n      case 3:\n\
    \        $output .= \"three \";\n        break;\n      case 4:\n        $output\
    \ .= \"four \";\n        break;\n      case 5:\n        $output .= \"five \";\n\
    \        break;\n      case 6:\n        $output .= \"six \";\n        break;\n\
    \      case 7:\n        $output .= \"seven \";\n        break;\n      case 8:\n\
    \        $output .= \"eight \";\n        break;\n      case 9:\n        $output\
    \ .= \"nine \";\n        break;\n    }\n  }\n  return rtrim($output);\n}\n", "\t\
    $numbers = explode(\" \", $numbers);\n\t$numbers = numberify($numbers);\n\treturn\
    \ wordify(sort($numbers));\n}\n", "    $numbers = explode(\" \", $numbers);\n\
    \    $numbers_map = [\"zero\" => 0, \"one\" => 1, \"two\" => 2, \"three\" => 3,\
    \ \"four\" => 4, \"five\" => 5, \"six\" => 6, \"seven\" => 7, \"eight\" => 8,\
    \ \"nine\" => 9];\n    $result = array();\n    foreach ($numbers as $num) {\n\
    \        array_push($result, $numbers_map[$num]);\n    }\n    sort($result);\n\
    \    $answer = array();\n    foreach ($result as $num) {\n        foreach ($numbers_map\
    \ as $key => $value) {\n            if ($value == $num) {\n                array_push($answer,\
    \ $key);\n            }\n        }\n    }\n    return implode(\" \", $answer);\n\
    }", "    $words = explode(\" \", $numbers);\n    $nums = [];\n    foreach ($words\
    \ as $word) {\n        $nums[] = to_number($word);\n    }\n    sort($nums);\n\
    \    $sorted = [];\n    foreach ($nums as $num) {\n        $sorted[] = to_word($num);\n\
    \    }\n    return implode(\" \", $sorted);\n}\n", "    $numbers = explode(\"\
    \ \", $numbers);\n    $numberValues = array(\n        'zero' => 0,\n        'one'\
    \ => 1,\n        'two' => 2,\n        'three' => 3,\n        'four' => 4,\n  \
    \      'five' => 5,\n        'six' => 6,\n        'seven' => 7,\n        'eight'\
    \ => 8,\n        'nine' => 9\n    );\n    $newNumbers = array();\n    foreach\
    \ ($numbers as $number) {\n        array_push($newNumbers, $numberValues[$number]);\n\
    \    }\n    sort($newNumbers);\n    foreach ($newNumbers as $key => $value) {\n\
    \        $newNumbers[$key] = array_search($value, $numberValues);\n    }\n   \
    \ return implode(\" \", $newNumbers);\n}\n", "    // Your solution goes here.\n\
    \    return $numbers;\n}\n", "\t$str_num = array();\n\t$str_num = explode(\" \"\
    , $numbers);\n\tsort($str_num);\n\t$result = implode(\" \", $str_num);\n\treturn\
    \ $result;\n}\n", "    $numbers = explode(\" \", $numbers);\n    sort($numbers);\n\
    \    return implode(\" \", $numbers);\n}\n", "  $num_sort = [];\n  $numbers =\
    \ explode(\" \", $numbers);\n  foreach ($numbers as $number) {\n    switch ($number)\
    \ {\n      case 'zero':\n        $num_sort[] = 0;\n        break;\n      case\
    \ 'one':\n        $num_sort[] = 1;\n        break;\n      case 'two':\n      \
    \  $num_sort[] = 2;\n        break;\n      case 'three':\n        $num_sort[]\
    \ = 3;\n        break;\n      case 'four':\n        $num_sort[] = 4;\n       \
    \ break;\n      case 'five':\n        $num_sort[] = 5;\n        break;\n     \
    \ case 'six':\n        $num_sort[] = 6;\n        break;\n      case 'seven':\n\
    \        $num_sort[] = 7;\n        break;\n      case 'eight':\n        $num_sort[]\
    \ = 8;\n        break;\n      case 'nine':\n        $num_sort[] = 9;\n       \
    \ break;\n    }\n  }\n  sort($num_sort);\n  foreach ($num_sort as $i => $num)\
    \ {\n    switch ($num) {\n      case 0:\n        $num_sort[$i] = 'zero';\n   \
    \     break;\n      case 1:\n        $num_sort[$i] = 'one';\n        break;\n\
    \      case 2:\n        $num_sort[$i] = 'two';\n        break;\n      case 3:\n\
    \        $num_sort[$i] = 'three';\n        break;\n      case 4:\n        $num_sort[$i]\
    \ = 'four';\n        break;\n      case 5:\n        $num_sort[$i] = 'five';\n\
    \        break;\n      case 6:\n        $num_sort[$i] = 'six';\n        break;\n\
    \      case 7:\n        $num_sort[$i] = 'seven';\n        break;\n      case 8:\n\
    \        $num_sort[$i] = 'eight';\n        break;\n      case 9:\n        $num_sort[$i]\
    \ = 'nine';\n        break;\n    }\n ", "    // Get array of numbers\n    $arr\
    \ = explode(\" \", $numbers);\n    // Create array to hold sorted numbers\n  \
    \  $sorted_arr = array();\n    // Loop through array\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        // Get number to be sorted\n        $num = $arr[$i];\n    \
    \    // Initialize index at 0\n        $index = 0;\n        // Loop through sorted\
    \ array\n        for ($j = 0; $j < count($sorted_arr); $j++) {\n            //\
    \ Get number to compare with\n            $compare_num = $sorted_arr[$j];\n  \
    \          // If the current number is less than the number to compare, set index\
    \ to the current index\n            if (convert_string_to_num($num) < convert_string_to_num($compare_num))\
    \ {\n                $index = $j;\n                break;\n            }\n   \
    \         // If the current number is greater than the number to compare, increment\
    \ index\n            else if (convert_string_to_num($num) > convert_string_to_num($compare_num))\
    \ {\n                $index++;\n            }\n        }\n        // Insert number\
    \ into sorted array at index\n        array_splice($sorted_arr, $index, 0, $num);\n\
    \    }\n    // Return sorted array\n    return implode(\" \", $sorted_arr);\n\
    }\n", "  $numbers = explode(\" \", $numbers);\n  $dictionary = [\"zero\" => 0,\
    \ \"one\" => 1, \"two\" => 2, \"three\" => 3, \"four\" => 4, \"five\" => 5, \"\
    six\" => 6, \"seven\" => 7, \"eight\" => 8, \"nine\" => 9];\n  $converted_numbers\
    \ = [];\n  for ($i = 0; $i < count($numbers); $i++) {\n    $converted_numbers[]\
    \ = $dictionary[$numbers[$i]];\n  }\n  sort($converted_numbers);\n  $dictionary\
    \ = array_flip($dictionary);\n  $final_numbers = [];\n  for ($i = 0; $i < count($converted_numbers);\
    \ $i++) {\n    $final_numbers[] = $dictionary[$converted_numbers[$i]];\n  }\n\
    \  return implode(\" \", $final_numbers);\n}", "  $table = array(\"zero\" => 0,\
    \ \"one\" => 1, \"two\" => 2, \"three\" => 3, \"four\" => 4, \"five\" => 5, \"\
    six\" => 6, \"seven\" => 7, \"eight\" => 8, \"nine\" => 9);\n  $numbers = explode(\"\
    \ \", $numbers);\n  $sorted = array();\n  foreach ($numbers as $num) {\n    $sorted[]\
    \ = $table[$num];\n  }\n  sort($sorted);\n  foreach ($sorted as $key => $val)\
    \ {\n    $sorted[$key] = array_search($val, $table);\n  }\n  return implode(\"\
    \ \", $sorted);\n}\n", "    $numbers_in_array = explode(\" \", $numbers);\n  \
    \  $digits = array(\n        'zero' => 0,\n        'one' => 1,\n        'two'\
    \ => 2,\n        'three' => 3,\n        'four' => 4,\n        'five' => 5,\n \
    \       'six' => 6,\n        'seven' => 7,\n        'eight' => 8,\n        'nine'\
    \ => 9\n    );\n    foreach ($numbers_in_array as $key => $num) {\n        $numbers_in_array[$key]\
    \ = $digits[$num];\n    }\n    sort($numbers_in_array);\n    foreach ($numbers_in_array\
    \ as $key => $num) {\n        $numbers_in_array[$key] = array_search($num, $digits);\n\
    \    }\n    return implode(\" \", $numbers_in_array);\n}\n", "    $numbers_arr\
    \ = explode(\" \", $numbers);\n    $numeral_arr = array('zero', 'one', 'two',\
    \ 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n    $new_numbers_arr\
    \ = array();\n    for ($i = 0; $i < 10; $i++) {\n        for ($j = 0; $j < count($numbers_arr);\
    \ $j++) {\n            if ($numbers_arr[$j] == $numeral_arr[$i]) {\n         \
    \       array_push($new_numbers_arr, $numbers_arr[$j]);\n            }\n     \
    \   }\n    }\n    return implode(\" \", $new_numbers_arr);\n}", "    $number_map\
    \ = [\n        'zero' => 0,\n        'one' => 1,\n        'two' => 2,\n      \
    \  'three' => 3,\n        'four' => 4,\n        'five' => 5,\n        'six' =>\
    \ 6,\n        'seven' => 7,\n        'eight' => 8,\n        'nine' => 9,\n   \
    \ ];\n    $numbers = explode(' ', $numbers);\n    $numbers = array_map(function($number)\
    \ use ($number_map) {\n        return $number_map[$number];\n    }, $numbers);\n\
    \    sort($numbers);\n    $numbers = array_map(function($number) use ($number_map)\
    \ {\n        return array_search($number, $number_map);\n    }, $numbers);\n \
    \   return implode(' ', $numbers);\n}\n", "\t\n\t$word_array = explode(\" \",\
    \ $numbers);\n\t$word_count = count($word_array);\n\t\n\tfor ($i = 0; $i < $word_count;\
    \ $i++) {\n\t\tfor ($j = $i + 1; $j < $word_count; $j++) {\n\t\t\tif (convert_to_number($word_array[$i])\
    \ > convert_to_number($word_array[$j])) {\n\t\t\t\t$temp = $word_array[$i];\n\t\
    \t\t\t$word_array[$i] = $word_array[$j];\n\t\t\t\t$word_array[$j] = $temp;\n\t\
    \t\t}\n\t\t}\n\t}\n\t\n\treturn implode(\" \", $word_array);\n}\n", "  $nums =\
    \ preg_split('/\\s+/', $numbers);\n  $result = array();\n  foreach ($nums as $num)\
    \ {\n    $value = conv($num);\n    if ($value !== null) {\n      $result[] = $value;\n\
    \    }\n  }\n  sort($result);\n  $result = array_map(function($num) {\n    return\
    \ conv_back($num);\n  }, $result);\n  return implode(' ', $result);\n}\n\n$numbers\
    \ = array(\n  'zero' => 0,\n  'one' => 1,\n  'two' => 2,\n  'three' => 3,\n  'four'\
    \ => 4,\n  'five' => 5,\n  'six' => 6,\n  'seven' => 7,\n  'eight' => 8,\n  'nine'\
    \ => 9,\n);\n", "    $map = [\n        'zero' => 0,\n        'one' => 1,\n   \
    \     'two' => 2,\n        'three' => 3,\n        'four' => 4,\n        'five'\
    \ => 5,\n        'six' => 6,\n        'seven' => 7,\n        'eight' => 8,\n \
    \       'nine' => 9,\n    ];\n    $numbers_array = explode(' ', $numbers);\n \
    \   $numbers_array = array_map(function($number) use ($map) {\n        return\
    \ $map[$number];\n    }, $numbers_array);\n    sort($numbers_array);\n    $numbers_array\
    \ = array_map(function($number) use ($map) {\n        return array_search($number,\
    \ $map);\n    }, $numbers_array);\n    return implode(' ', $numbers_array);\n\
    }\n", "    $numbers_arr = explode(\" \", $numbers);\n    $key_arr = array();\n\
    \    $swap_arr = array();\n    $swap_arr['zero'] = 0;\n    $swap_arr['one'] =\
    \ 1;\n    $swap_arr['two'] = 2;\n    $swap_arr['three'] = 3;\n    $swap_arr['four']\
    \ = 4;\n    $swap_arr['five'] = 5;\n    $swap_arr['six'] = 6;\n    $swap_arr['seven']\
    \ = 7;\n    $swap_arr['eight'] = 8;\n    $swap_arr['nine'] = 9;\n    foreach ($numbers_arr\
    \ as $key => $value) {\n        $key_arr[$key] = $swap_arr[$value];\n    }\n \
    \   asort($key_arr);\n    foreach ($key_arr as $key => $value) {\n        $key_arr[$key]\
    \ = array_search($value, $swap_arr);\n    }\n    return implode(\" \", $key_arr);\n\
    }\n", "  $num_as_nums = array();\n  $sort_array = explode(\" \", $numbers);\n\
    \  foreach ($sort_array as $word) {\n    if ($word == \"zero\") {\n      $num_as_nums[]\
    \ = 0;\n    } elseif ($word == \"one\") {\n      $num_as_nums[] = 1;\n    } elseif\
    \ ($word == \"two\") {\n      $num_as_nums[] = 2;\n    } elseif ($word == \"three\"\
    ) {\n      $num_as_nums[] = 3;\n    } elseif ($word == \"four\") {\n      $num_as_nums[]\
    \ = 4;\n    } elseif ($word == \"five\") {\n      $num_as_nums[] = 5;\n    } elseif\
    \ ($word == \"six\") {\n      $num_as_nums[] = 6;\n    } elseif ($word == \"seven\"\
    ) {\n      $num_as_nums[] = 7;\n    } elseif ($word == \"eight\") {\n      $num_as_nums[]\
    \ = 8;\n    } elseif ($word == \"nine\") {\n      $num_as_nums[] = 9;\n    }\n\
    \  }\n  sort($num_as_nums);\n  $sorted_words = array();\n  foreach ($num_as_nums\
    \ as $number) {\n    if ($number == 0) {\n      $sorted_words[] = \"zero\";\n\
    \    } elseif ($number == 1) {\n      $sorted_words[] = \"one\";\n    } elseif\
    \ ($number == 2) {\n      $sorted_words[] = \"two\";\n    } elseif ($number ==\
    \ 3) {\n      $sorted_words[] = \"three\";\n    } elseif ($number == 4) {\n  \
    \    $sorted_words[] = \"four\";\n    } elseif ($number == 5) {\n      $sorted_words[]\
    \ = \"five\";\n    } elseif ($number == 6) {\n      $sorted_words[] = \"six\"\
    ;\n    } elseif ($number == 7) {\n      $sorted_words[] = \"seven\";", "  $numbers\
    \ = explode(\" \", $numbers);\n  usort($numbers, function($a, $b) {\n    return\
    \ array_search($a, [\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\", \"seven\", \"eight\", \"nine\"]) - array_search($b, [\"zero\", \"one\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"\
    ]);\n  });\n  return implode(\" \", $numbers);\n}\n\nprint sort_numbers(\"three\
    \ one five\") . \"\\n\";", "\t// put your code here\n\t$nums = explode(\" \",\
    \ $numbers);\n\t$nums_nums = array();\n\tforeach ($nums as $num) {\n\t\t$nums_nums[]\
    \ = convert($num);\n\t}\n\t$nums_nums = quick_sort($nums_nums);\n\tforeach ($nums_nums\
    \ as $key => $value) {\n\t\t$nums_nums[$key] = convert($value);\n\t}\n\treturn\
    \ implode(\" \", $nums_nums);\n}\n", "    $number_str = '';\n    $number_array\
    \ = explode(' ', $numbers);\n    $number_array = array_unique($number_array);\n\
    \    if(count($number_array) > 10) {\n        return -1;\n    }\n    foreach($number_array\
    \ as $key => $value) {\n        if($value == 'zero') {\n            $number_array[$key]\
    \ = 0;\n        } elseif($value == 'one') {\n            $number_array[$key] =\
    \ 1;\n        } elseif($value == 'two') {\n            $number_array[$key] = 2;\n\
    \        } elseif($value == 'three') {\n            $number_array[$key] = 3;\n\
    \        } elseif($value == 'four') {\n            $number_array[$key] = 4;\n\
    \        } elseif($value == 'five') {\n            $number_array[$key] = 5;\n\
    \        } elseif($value == 'six') {\n            $number_array[$key] = 6;\n \
    \       } elseif($value == 'seven') {\n            $number_array[$key] = 7;\n\
    \        } elseif($value == 'eight') {\n            $number_array[$key] = 8;\n\
    \        } elseif($value == 'nine') {\n            $number_array[$key] = 9;\n\
    \        } else {\n            return -1;\n        }\n    }\n    sort($number_array);\n\
    \    foreach($number_array as $key => $value) {\n        if($value == 0) {\n \
    \           $number_array[$key] = 'zero';\n        } elseif($value == 1) {\n \
    \           $number_array[$key] = 'one';\n        } elseif($value == 2) {\n  \
    \          $number_array[$key] = 'two';\n        } elseif($value == 3) {\n   \
    \         $number_array[$key] = 'three';\n        } elseif($value == 4) {\n  \
    \          $number_array[$key] = 'four';\n        } elseif($value == 5) {\n  \
    \          $number_array[$key] = '", "    // Your code here\n}\n\necho sort_numbers(\"\
    three one five\") . \"\\n\";", "    $numberals = array('zero', 'one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight', 'nine');\n    $numbers = explode('\
    \ ', $numbers);\n    $numbers = array_map(function($number) use ($numberals) {\n\
    \        return array_search($number, $numberals);\n    }, $numbers);\n    sort($numbers);\n\
    \    $numbers = array_map(function($number) use ($numberals) {\n        return\
    \ $numberals[$number];\n    }, $numbers);\n    return implode(' ', $numbers);\n\
    }\n", "    $output = \"\";\n    $index = 0;\n    $numbers = explode(\" \", $numbers);\n\
    \    $length = count($numbers);\n    for ($i = 0; $i < $length; $i++) {\n    \
    \    $numbers[$i] = number_to_digit($numbers[$i]);\n    }\n    sort($numbers);\n\
    \    while ($index < $length) {\n        $output .= $numbers[$index] . \" \";\n\
    \        $index++;\n    }\n    return trim($output);\n}\n", "    $number_array\
    \ = explode(\" \", $numbers);\n    $number_array = array_map(function($x) {\n\
    \        $x = str_replace(\"zero\", \"0\", $x);\n        $x = str_replace(\"one\"\
    , \"1\", $x);\n        $x = str_replace(\"two\", \"2\", $x);\n        $x = str_replace(\"\
    three\", \"3\", $x);\n        $x = str_replace(\"four\", \"4\", $x);\n       \
    \ $x = str_replace(\"five\", \"5\", $x);\n        $x = str_replace(\"six\", \"\
    6\", $x);\n        $x = str_replace(\"seven\", \"7\", $x);\n        $x = str_replace(\"\
    eight\", \"8\", $x);\n        $x = str_replace(\"nine\", \"9\", $x);\n       \
    \ return $x;\n    }, $number_array);\n    sort($number_array);\n    $number_array\
    \ = array_map(function($x) {\n        $x = str_replace(\"0\", \"zero\", $x);\n\
    \        $x = str_replace(\"1\", \"one\", $x);\n        $x = str_replace(\"2\"\
    , \"two\", $x);\n        $x = str_replace(\"3\", \"three\", $x);\n        $x =\
    \ str_replace(\"4\", \"four\", $x);\n        $x = str_replace(\"5\", \"five\"\
    , $x);\n        $x = str_replace(\"6\", \"six\", $x);\n        $x = str_replace(\"\
    7\", \"seven\", $x);\n        $x = str_replace(\"8\", \"eight\", $x);\n      \
    \  $x = str_replace(\"9\", \"nine\", $x);\n        return $x;\n    }, $number_array);\n\
    \    return implode(\" \", $number_array);\n}", "    // TODO\n    $numbers = explode(\"\
    \ \", $numbers);\n    $num_array = [];\n    $index = 0;\n    foreach ($numbers\
    \ as $number) {\n        switch ($number) {\n            case \"zero\":\n    \
    \            $num_array[$index] = 0;\n                break;\n            case\
    \ \"one\":\n                $num_array[$index] = 1;\n                break;\n\
    \            case \"two\":\n                $num_array[$index] = 2;\n        \
    \        break;\n            case \"three\":\n                $num_array[$index]\
    \ = 3;\n                break;\n            case \"four\":\n                $num_array[$index]\
    \ = 4;\n                break;\n            case \"five\":\n                $num_array[$index]\
    \ = 5;\n                break;\n            case \"six\":\n                $num_array[$index]\
    \ = 6;\n                break;\n            case \"seven\":\n                $num_array[$index]\
    \ = 7;\n                break;\n            case \"eight\":\n                $num_array[$index]\
    \ = 8;\n                break;\n            case \"nine\":\n                $num_array[$index]\
    \ = 9;\n                break;\n        }\n        $index++;\n    }\n    sort($num_array);\n\
    \    for ($i = 0; $i < sizeof($num_array); $i++) {\n        switch ($num_array[$i])\
    \ {\n            case 0:\n                $num_array[$i] = \"zero\";\n       \
    \         break;\n            case 1:\n                $num_array[$i] = \"one\"\
    ;\n                break;\n            case 2:\n                $num_array[$i]\
    \ = \"two\";\n                break;\n            case 3:\n                $num_array[$i]\
    \ = \"three\";\n                break;\n            case 4:\n                $num_array[$i]\
    \ = \"four\";\n                break;\n            case 5:\n                $num_array[$i]\
    \ = \"five\";\n                break;\n            case 6:\n                $num_array[$i]\
    \ = \"six\";\n                break;\n            case 7:\n                $num_array[$i]\
    \ = \"", "  $letters = [\n    'zero' => 0,\n    'one' => 1,\n    'two' => 2,\n\
    \    'three' => 3,\n    'four' => 4,\n    'five' => 5,\n    'six' => 6,\n    'seven'\
    \ => 7,\n    'eight' => 8,\n    'nine' => 9\n  ];\n  $numbers = explode(' ', $numbers);\n\
    \  $numbersArray = [];\n  foreach ($numbers as $number) {\n    $numbersArray[]\
    \ = $letters[$number];\n  }\n  sort($numbersArray);\n  $numbers = [];\n  foreach\
    \ ($numbersArray as $number) {\n    $numbers[] = array_search($number, $letters);\n\
    \  }\n  return implode(' ', $numbers);\n}\n\n$cases = [\n  'three one five' =>\
    \ 'one three five',\n  'three one nine' => 'one three nine',\n  'three three nine'\
    \ => 'three three nine',\n  'three three five nine' => 'three three five nine',\n\
    \  'three five three nine' => 'three three five nine',\n  'zero one two three\
    \ four five six seven eight nine' => 'zero one two three four five six seven eight\
    \ nine',\n  'nine zero one two three four five six seven eight' => 'zero one two\
    \ three four five six seven eight nine',\n  'one three nine seven two four five\
    \ five four six six six six six six six six six six six six six six six six six\
    \ six six six six six six six six six six six six six six six six six six six\
    \ six six six six six six six six six six six six six six six six six six six\
    \ six six six six six six six six six six six six six six six six six six six\
    \ six six six six six six six six six six six six six six six six six six six\
    \ six six six six six six six six six six six six six six six six six six six\
    \ six six six six six six six six six six six six six six six six six six six\
    \ six six six six six six six six six six six six six six six six six six six\
    \ six six six six six six six six six six six six six six six six six six six\
    \ six six six six", "    // convert to numberals\n    $numbers = preg_replace('/zero/',\
    \ '0', $numbers);\n    $numbers = preg_replace('/one/', '1', $numbers);\n    $numbers\
    \ = preg_replace('/two/', '2', $numbers);\n    $numbers = preg_replace('/three/',\
    \ '3', $numbers);\n    $numbers = preg_replace('/four/', '4', $numbers);\n   \
    \ $numbers = preg_replace('/five/', '5', $numbers);\n    $numbers = preg_replace('/six/',\
    \ '6', $numbers);\n    $numbers = preg_replace('/seven/', '7', $numbers);\n  \
    \  $numbers = preg_replace('/eight/', '8', $numbers);\n    $numbers = preg_replace('/nine/',\
    \ '9', $numbers);\n    // explode and sort\n    $numbers = explode(' ', $numbers);\n\
    \    sort($numbers);\n    // convert to numberals\n    $numbers = array_map(function($v)\
    \ {\n        return get_number_word($v);\n    }, $numbers);\n    // implode\n\
    \    $numbers = implode(' ', $numbers);\n    return $numbers;\n}\n", "\t$numbersArray\
    \ = explode(\" \", $numbers);\n\t$numbersStringsArray = array(\"zero\",\"one\"\
    ,\"two\",\"three\",\"four\",\"five\",\"six\",\"seven\",\"eight\",\"nine\");\n\t\
    $numbersArray = array_map(\"strtolower\", $numbersArray);\n\t$numbersSortedArray\
    \ = array();\n\tforeach ($numbersArray as $i) {\n\t\tarray_push($numbersSortedArray,\
    \ array_search($i, $numbersStringsArray));\n\t}\n\tsort($numbersSortedArray);\n\
    \t$numbersFinalArray = array();\n\tforeach ($numbersSortedArray as $i) {\n\t\t\
    array_push($numbersFinalArray, $numbersStringsArray[$i]);\n\t}\n\treturn implode(\"\
    \ \", $numbersFinalArray);\n}", "  $numbers_array = array();\n  $numbers_array\
    \ = explode(\" \", $numbers);\n  foreach ($numbers_array as $key => $value) {\n\
    \    $value = str_replace(\"zero\", \"0\", $value);\n    $value = str_replace(\"\
    one\", \"1\", $value);\n    $value = str_replace(\"two\", \"2\", $value);\n  \
    \  $value = str_replace(\"three\", \"3\", $value);\n    $value = str_replace(\"\
    four\", \"4\", $value);\n    $value = str_replace(\"five\", \"5\", $value);\n\
    \    $value = str_replace(\"six\", \"6\", $value);\n    $value = str_replace(\"\
    seven\", \"7\", $value);\n    $value = str_replace(\"eight\", \"8\", $value);\n\
    \    $value = str_replace(\"nine\", \"9\", $value);\n    $numbers_array[$key]\
    \ = $value;\n  }\n  // sort numbers in order\n  sort($numbers_array);\n  foreach\
    \ ($numbers_array as $key => $value) {\n    $value = str_replace(\"0\", \"zero\"\
    , $value);\n    $value = str_replace(\"1\", \"one\", $value);\n    $value = str_replace(\"\
    2\", \"two\", $value);\n    $value = str_replace(\"3\", \"three\", $value);\n\
    \    $value = str_replace(\"4\", \"four\", $value);\n    $value = str_replace(\"\
    5\", \"five\", $value);\n    $value = str_replace(\"6\", \"six\", $value);\n \
    \   $value = str_replace(\"7\", \"seven\", $value);\n    $value = str_replace(\"\
    8\", \"eight\", $value);\n    $value = str_replace(\"9\", \"nine\", $value);\n\
    \    $numbers_array[$key] = $value;\n  }\n  $numbers = implode(\" \", $numbers_array);\n\
    \  return $numbers;\n}\n", "  $returnString = \"\";\n  $numberStrings = explode(\"\
    \ \", $numbers);\n  $length = count($numberStrings);\n  $numberStrings = array_unique($numberStrings);\n\
    \  $lengthUniq = count($numberStrings);\n  if ($length != $lengthUniq) {\n   \
    \ return \"Error: numbers cannot be repeated\";\n  }\n  $numberNumerals = [];\n\
    \  foreach ($numberStrings as $numberString) {\n    switch ($numberString) {\n\
    \      case \"zero\":\n        $numberNumerals[] = 0;\n        break;\n      case\
    \ \"one\":\n        $numberNumerals[] = 1;\n        break;\n      case \"two\"\
    :\n        $numberNumerals[] = 2;\n        break;\n      case \"three\":\n   \
    \     $numberNumerals[] = 3;\n        break;\n      case \"four\":\n        $numberNumerals[]\
    \ = 4;\n        break;\n      case \"five\":\n        $numberNumerals[] = 5;\n\
    \        break;\n      case \"six\":\n        $numberNumerals[] = 6;\n       \
    \ break;\n      case \"seven\":\n        $numberNumerals[] = 7;\n        break;\n\
    \      case \"eight\":\n        $numberNumerals[] = 8;\n        break;\n     \
    \ case \"nine\":\n        $numberNumerals[] = 9;\n        break;\n      default:\n\
    \        return \"Error: invalid input\";\n    }\n  }\n  sort($numberNumerals);\n\
    \  foreach ($numberNumerals as $numberNumeral) {\n    switch ($numberNumeral)\
    \ {\n      case 0:\n        $returnString .= \"zero \";\n        break;\n    \
    \  case 1:\n        $returnString .= \"one \";\n        break;\n      case 2:\n\
    \        $returnString .= \"two \";\n        break;\n      case 3:\n        $returnString\
    \ .= \"three \";\n        break;\n      case 4:\n        $returnString .= \"four\
    \ \";\n        break;\n      case 5:\n        $returnString .= \"five \";\n  \
    \      break;\n      case 6:\n        $returnString .", "  $convert = array(\n\
    \    'zero' => 0,\n    'one' => 1,\n    'two' => 2,\n    'three' => 3,\n    'four'\
    \ => 4,\n    'five' => 5,\n    'six' => 6,\n    'seven' => 7,\n    'eight' =>\
    \ 8,\n    'nine' => 9\n  );\n  $arr = explode(' ', $numbers);\n  $result = [];\n\
    \  foreach ($arr as $item) {\n    if (array_key_exists($item, $convert)) {\n \
    \     $result[] = $convert[$item];\n    }\n  }\n  sort($result);\n  $reverse =\
    \ array_flip($convert);\n  $new_arr = [];\n  foreach ($result as $item) {\n  \
    \  $new_arr[] = $reverse[$item];\n  }\n  return implode(' ', $new_arr);\n}\necho\
    \ sort_numbers(\"three one five\") . \"\\n\";", "\t$numbers = explode(\" \", $numbers);\n\
    \t$mapper = array('zero' => 0, 'one' => 1, 'two' => 2, 'three' => 3, 'four' =>\
    \ 4, 'five' => 5, 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine' => 9);\n\t$result\
    \ = array();\n\tforeach ($numbers as $number) {\n\t\t$result[] = $mapper[$number];\n\
    \t}\n\tsort($result);\n\t$result = array_map(function($n) use ($mapper) {\n\t\t\
    return array_search($n, $mapper);\n\t}, $result);\n\treturn implode(\" \", $result);\n\
    }\n", "  $numbers_array = explode(\" \", $numbers);\n  $number_in_array = array();\n\
    \  $sorted_numbers = array();\n  foreach ($numbers_array as $number) {\n    switch\
    \ ($number) {\n      case 'zero':\n        $number_in_array[] = 0;\n        break;\n\
    \      case 'one':\n        $number_in_array[] = 1;\n        break;\n      case\
    \ 'two':\n        $number_in_array[] = 2;\n        break;\n      case 'three':\n\
    \        $number_in_array[] = 3;\n        break;\n      case 'four':\n       \
    \ $number_in_array[] = 4;\n        break;\n      case 'five':\n        $number_in_array[]\
    \ = 5;\n        break;\n      case 'six':\n        $number_in_array[] = 6;\n \
    \       break;\n      case 'seven':\n        $number_in_array[] = 7;\n       \
    \ break;\n      case 'eight':\n        $number_in_array[] = 8;\n        break;\n\
    \      case 'nine':\n        $number_in_array[] = 9;\n        break;\n    }\n\
    \  }\n  sort($number_in_array);\n  foreach ($number_in_array as $number) {\n \
    \   switch ($number) {\n      case 0:\n        $sorted_numbers[] = 'zero';\n \
    \       break;\n      case 1:\n        $sorted_numbers[] = 'one';\n        break;\n\
    \      case 2:\n        $sorted_numbers[] = 'two';\n        break;\n      case\
    \ 3:\n        $sorted_numbers[] = 'three';\n        break;\n      case 4:\n  \
    \      $sorted_numbers[] = 'four';\n        break;\n      case 5:\n        $sorted_numbers[]\
    \ = 'five';\n        break;\n      case 6:\n        $sorted_numbers[] = 'six';\n\
    \        break;\n      case 7:\n        $sorted_numbers[] = 'seven';\n       \
    \ break;\n      case 8:\n        $sorted_numbers[] = 'eight';\n       ", "  $numbers\
    \ = explode(\" \", $numbers);\n  $sorted_numbers = array();\n  for ($i = 0; $i\
    \ < count($numbers); $i++) {\n    $sorted_numbers[$i] = convert_to_int($numbers[$i]);\n\
    \  }\n  sort($sorted_numbers);\n  for ($i = 0; $i < count($sorted_numbers); $i++)\
    \ {\n    $sorted_numbers[$i] = convert_to_string($sorted_numbers[$i]);\n  }\n\
    \  return implode(\" \", $sorted_numbers);\n}\n", "\t$arr_numbers = explode(\"\
    \ \", $numbers);\n\t$str_numbers = \"\";\n\tsort($arr_numbers);\n\tforeach ($arr_numbers\
    \ as $value) {\n\t\t$str_numbers .= $value . \" \";\n\t}\n\t$str_numbers = rtrim($str_numbers);\n\
    \treturn $str_numbers;\n}\n", "\t$str = explode(\" \", $numbers);\n\t$arr = [];\n\
    \tforeach ($str as $key => $value) {\n\t\tswitch ($value) {\n\t\t\tcase 'zero':\n\
    \t\t\t\t$value = 0;\n\t\t\t\tbreak;\n\t\t\tcase 'one':\n\t\t\t\t$value = 1;\n\t\
    \t\t\tbreak;\n\t\t\tcase 'two':\n\t\t\t\t$value = 2;\n\t\t\t\tbreak;\n\t\t\tcase\
    \ 'three':\n\t\t\t\t$value = 3;\n\t\t\t\tbreak;\n\t\t\tcase 'four':\n\t\t\t\t\
    $value = 4;\n\t\t\t\tbreak;\n\t\t\tcase 'five':\n\t\t\t\t$value = 5;\n\t\t\t\t\
    break;\n\t\t\tcase 'six':\n\t\t\t\t$value = 6;\n\t\t\t\tbreak;\n\t\t\tcase 'seven':\n\
    \t\t\t\t$value = 7;\n\t\t\t\tbreak;\n\t\t\tcase 'eight':\n\t\t\t\t$value = 8;\n\
    \t\t\t\tbreak;\n\t\t\tcase 'nine':\n\t\t\t\t$value = 9;\n\t\t\t\tbreak;\n\t\t\
    }\n\t\t$arr[$key] = $value;\n\t}\n\tsort($arr);\n\tforeach ($arr as $key => $value)\
    \ {\n\t\tswitch ($value) {\n\t\t\tcase 0:\n\t\t\t\t$value = 'zero';\n\t\t\t\t\
    break;\n\t\t\tcase 1:\n\t\t\t\t$value = 'one';\n\t\t\t\tbreak;\n\t\t\tcase 2:\n\
    \t\t\t\t$value = 'two';\n\t\t\t\tbreak;\n\t\t\tcase 3:\n\t\t\t\t$value = 'three';\n\
    \t\t\t\tbreak;\n\t\t\tcase 4:\n\t\t\t\t$value = 'four';\n\t\t\t\tbreak;\n\t\t\t\
    case 5:\n\t\t\t\t$value = 'five';\n\t\t\t\tbreak;\n\t\t\tcase 6:\n\t\t\t\t$value\
    \ = 'six';\n\t\t\t\tbreak", "  $numeral = ['zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight', 'nine'];\n  $arr = explode(' ', $numbers);\n\
    \  $arr_num = [];\n  foreach ($arr as $key => $value) {\n    $arr_num[$key] =\
    \ array_search($value, $numeral);\n  }\n  asort($arr_num);\n  $arr_res = [];\n\
    \  foreach ($arr_num as $key => $value) {\n    $arr_res[$key] = $numeral[$value];\n\
    \  }\n  return implode(' ', $arr_res);\n}\n", "\t$numberals = [\"zero\", \"one\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"\
    ];\n\t$arr = explode(\" \", $numbers);\n\t$arr2 = array();\n\tfor ($i = 0; $i\
    \ < count($arr); $i++) {\n\t\t$arr2[$i] = array_search($arr[$i], $numberals);\n\
    \t}\n\tsort($arr2);\n\tfor ($i = 0; $i < count($arr2); $i++) {\n\t\t$arr[$i] =\
    \ $numberals[$arr2[$i]];\n\t}\n\treturn implode(\" \", $arr);\n}\n$numbers = \"\
    three one five\";\necho sort_numbers($numbers);", "    // your code here\n   \
    \ $array = explode(\" \", $numbers);\n    $result = \"\";\n    foreach ($array\
    \ as $num) {\n        switch ($num) {\n            case \"zero\":\n          \
    \      $num = 0;\n                break;\n            case \"one\":\n        \
    \        $num = 1;\n                break;\n            case \"two\":\n      \
    \          $num = 2;\n                break;\n            case \"three\":\n  \
    \              $num = 3;\n                break;\n            case \"four\":\n\
    \                $num = 4;\n                break;\n            case \"five\"\
    :\n                $num = 5;\n                break;\n            case \"six\"\
    :\n                $num = 6;\n                break;\n            case \"seven\"\
    :\n                $num = 7;\n                break;\n            case \"eight\"\
    :\n                $num = 8;\n                break;\n            case \"nine\"\
    :\n                $num = 9;\n                break;\n        }\n        $result\
    \ .= $num . \" \";\n    }\n    return $result;\n}\n", "  $nums = array_map(function($number)\
    \ {\n    return str_replace(' ', '', $number);\n  }, explode(' ', $numbers));\n\
    \  sort($nums);\n  return implode(' ', $nums);\n}", "    // STUB\n    return $numbers;\n\
    }", "  $output = array();\n  $numbers = explode(\" \", $numbers);\n  foreach ($numbers\
    \ as $number) {\n    switch ($number) {\n      case 'zero':\n        $output[]\
    \ = 0;\n        break;\n      case 'one':\n        $output[] = 1;\n        break;\n\
    \      case 'two':\n        $output[] = 2;\n        break;\n      case 'three':\n\
    \        $output[] = 3;\n        break;\n      case 'four':\n        $output[]\
    \ = 4;\n        break;\n      case 'five':\n        $output[] = 5;\n        break;\n\
    \      case 'six':\n        $output[] = 6;\n        break;\n      case 'seven':\n\
    \        $output[] = 7;\n        break;\n      case 'eight':\n        $output[]\
    \ = 8;\n        break;\n      case 'nine':\n        $output[] = 9;\n        break;\n\
    \    }\n  }\n  sort($output);\n  foreach ($output as $key => $value) {\n    switch\
    \ ($value) {\n      case 0:\n        $output[$key] = 'zero';\n        break;\n\
    \      case 1:\n        $output[$key] = 'one';\n        break;\n      case 2:\n\
    \        $output[$key] = 'two';\n        break;\n      case 3:\n        $output[$key]\
    \ = 'three';\n        break;\n      case 4:\n        $output[$key] = 'four';\n\
    \        break;\n      case 5:\n        $output[$key] = 'five';\n        break;\n\
    \      case 6:\n        $output[$key] = 'six';\n        break;\n      case 7:\n\
    \        $output[$key] = 'seven';\n        break;\n      case 8:\n        $output[$key]\
    \ = 'eight';\n        break;\n      case 9:\n        $output[$key] = 'nine';\n\
    \        break;\n    }\n  }\n  $output = implode(\" \", $output);\n  return $output;\n\
    }\n\necho sort_numbers(\"one three two four five six\") . \"\\n\";\necho sort_n",
  "\t$num_arr = preg_split('/\\s+/', $numbers);\n\t$num_map = array(\n\t\t'zero' =>\
    \ 0,\n\t\t'one' => 1,\n\t\t'two' => 2,\n\t\t'three' => 3,\n\t\t'four' => 4,\n\t\
    \t'five' => 5,\n\t\t'six' => 6,\n\t\t'seven' => 7,\n\t\t'eight' => 8,\n\t\t'nine'\
    \ => 9\n\t);\n\t$sort_arr = array();\n\tforeach ($num_arr as $num) {\n\t\tif (!isset($num_map[$num]))\
    \ {\n\t\t\tdie(\"Error: Invalid number string: \\\"$num\\\"\\n\");\n\t\t}\n\t\t\
    $sort_arr[] = $num_map[$num];\n\t}\n\tsort($sort_arr);\n\t$out_arr = array();\n\
    \tforeach ($sort_arr as $num) {\n\t\t$out_arr[] = array_search($num, $num_map);\n\
    \t}\n\treturn implode(' ', $out_arr);\n}\n\necho sort_numbers($argv[1]);", "\t\
    // Convert to array\n\t$numbers = explode(\" \", $numbers);\n\t// Convert to numeric\
    \ array\n\tforeach ($numbers as $key => $value) {\n\t\t$numbers[$key] = convert($value);\n\
    \t}\n\t// Sort the array\n\tsort($numbers);\n\t// Convert to word array\n\tforeach\
    \ ($numbers as $key => $value) {\n\t\t$numbers[$key] = convert($value);\n\t}\n\
    \t// Convert to string\n\t$numbers = implode(\" \", $numbers);\n\treturn $numbers;\n\
    }", "\t$numbers = explode(\" \", $numbers);\n\t$map = array(\"zero\" => 0, \"\
    one\" => 1, \"two\" => 2, \"three\" => 3, \"four\" => 4, \"five\" => 5, \"six\"\
    \ => 6, \"seven\" => 7, \"eight\" => 8, \"nine\" => 9);\n\t$new = [];\n\tforeach\
    \ ($numbers as $num) {\n\t\t$new[] = $map[$num];\n\t}\n\tsort($new);\n\tforeach\
    \ ($new as $key => $num) {\n\t\t$new[$key] = array_search($num, $map);\n\t}\n\t\
    return implode(\" \", $new);\n}\n", "    // get all strings from a sentence\n\
    \    $numbers = explode(\" \", $numbers);\n    $len = count($numbers);\n    //\
    \ error\n    if ($len == 0) return \"\";\n    $key = array(\"zero\", \"one\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\", \"seven\", \"eight\", \"nine\"\
    );\n    $values = array();\n    // convert numbers to int\n    for ($i = 0; $i\
    \ < $len; $i++) {\n        $values[$i] = array_search($numbers[$i], $key);\n \
    \   }\n    //sort array\n    sort($values);\n    // return string\n    $string\
    \ = \"\";\n    foreach ($values as $value) {\n        $string .= $key[$value]\
    \ . \" \";\n    }\n    return $string;\n}\n", "    // write code here\n}\n", " \
    \   $numbersArray = explode(\" \", $numbers);\n    foreach ($numbersArray as $index\
    \ => $value) {\n        switch ($value) {\n            case 'zero':\n        \
    \        $numbersArray[$index] = 0;\n                break;\n            case\
    \ 'one':\n                $numbersArray[$index] = 1;\n                break;\n\
    \            case 'two':\n                $numbersArray[$index] = 2;\n       \
    \         break;\n            case 'three':\n                $numbersArray[$index]\
    \ = 3;\n                break;\n            case 'four':\n                $numbersArray[$index]\
    \ = 4;\n                break;\n            case 'five':\n                $numbersArray[$index]\
    \ = 5;\n                break;\n            case 'six':\n                $numbersArray[$index]\
    \ = 6;\n                break;\n            case 'seven':\n                $numbersArray[$index]\
    \ = 7;\n                break;\n            case 'eight':\n                $numbersArray[$index]\
    \ = 8;\n                break;\n            case 'nine':\n                $numbersArray[$index]\
    \ = 9;\n                break;\n        }\n    }\n    asort($numbersArray);\n\
    \    $response = \"\";\n    foreach ($numbersArray as $index => $value) {\n  \
    \      switch ($value) {\n            case 0:\n                $response .= \"\
    zero \";\n                break;\n            case 1:\n                $response\
    \ .= \"one \";\n                break;\n            case 2:\n                $response\
    \ .= \"two \";\n                break;\n            case 3:\n                $response\
    \ .= \"three \";\n                break;\n            case 4:\n              \
    \  $response .= \"four \";\n                break;\n            case 5:\n    \
    \            $response .= \"five \";\n                break;\n            case\
    \ 6:\n                $response .= \"six \";\n                break;\n       \
    \     case 7:\n                $response .= \"seven \";\n                break;\n\
    \            case 8:\n                $response .= \"eight \";\n             \
    \   break;\n            case 9:\n                $response .= \"nine \";\n   \
    \             break;\n        }\n    }\n    return trim", "  $numbers_array =\
    \ explode(\" \", $numbers);\n  $numbers_array = array_map('number_to_numberal',\
    \ $numbers_array);\n  sort($numbers_array);\n  $numbers_array = array_map('numberal_to_number',\
    \ $numbers_array);\n  return implode(\" \", $numbers_array);\n}\n", "\t$num_map\
    \ = array(\n\t\t'zero' => 0,\n\t\t'one' => 1,\n\t\t'two' => 2,\n\t\t'three' =>\
    \ 3,\n\t\t'four' => 4,\n\t\t'five' => 5,\n\t\t'six' => 6,\n\t\t'seven' => 7,\n\
    \t\t'eight' => 8,\n\t\t'nine' => 9\n\t);\n\t$numbers = array_map(function($num)\
    \ use ($num_map) {\n\t\tif(isset($num_map[$num])) {\n\t\t\treturn $num_map[$num];\n\
    \t\t}\n\t\treturn false;\n\t}, explode(' ', $numbers));\n\tasort($numbers);\n\t\
    $numbers = array_map(function($num) use ($num_map) {\n\t\treturn array_search($num,\
    \ $num_map);\n\t}, $numbers);\n\treturn implode(' ', $numbers);\n}\n", "  return\
    \ 'one three five';\n}", "  $numbers = explode(\" \", $numbers);\n  $numbers_arr\
    \ = array('zero' => 0, 'one' => 1, 'two' => 2, 'three' => 3, 'four' => 4, 'five'\
    \ => 5, 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine' => 9);\n  $num_map = array();\n\
    \  $sorted_numbers = array();\n  $final_str = \"\";\n  foreach ($numbers as $num)\
    \ {\n    array_push($num_map, $numbers_arr[$num]);\n  }\n  sort($num_map);\n \
    \ foreach ($num_map as $num) {\n    array_push($sorted_numbers, array_search($num,\
    \ $numbers_arr));\n  }\n  foreach ($sorted_numbers as $n) {\n    $final_str .=\
    \ $n . \" \";\n  }\n  $final_str = trim($final_str);\n  return $final_str;\n}\n\
    \n$strings = array(\n  \"one three five\",\n  \"three one five\",\n  \"six zero\
    \ five four seven one nine three two\",\n  \"nine one five four six three seven\
    \ two zero\",\n  \"one five six three four nine two seven zero\",\n  \"one two\
    \ three four five six seven eight nine zero\",\n  \"zero one two three four five\
    \ six seven eight nine\",\n  \"nine eight seven six five four three two one zero\"\
    ,\n  \"zero one two three four five six seven eight nine\",\n  \"three one four\
    \ seven five six nine two eight zero\",\n  \"four three one five nine seven six\
    \ two eight zero\",\n  \"four three one five nine seven six two eight zero\",\n\
    \  \"one two three four five six seven eight nine zero\",\n  \"nine five three\
    \ one four six seven two eight zero\",\n  \"four five one two three six seven\
    \ eight nine zero\",\n  \"eight two five nine four six three one seven zero\"\
    ,\n  \"eight seven one nine four six five two three zero\",\n  \"four six three\
    \ eight five nine one two seven zero\",\n  \"one five four seven two three eight\
    \ six nine zero\",\n  \"six five four one nine", "    $numberToWord = array('zero',\
    \ 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine');\n \
    \   $wordToNumber = array_flip($numberToWord);\n    $numbersArray = explode('\
    \ ', $numbers);\n    foreach ($numbersArray as $key => $val) {\n        $numbersArray[$key]\
    \ = $wordToNumber[$val];\n    }\n    sort($numbersArray);\n    foreach ($numbersArray\
    \ as $key => $val) {\n        $numbersArray[$key] = $numberToWord[$val];\n   \
    \ }\n    return implode(' ', $numbersArray);\n}\n", "  $numbers = explode(\" \"\
    , $numbers);\n  $numbers = array_map('intval', $numbers);\n  sort($numbers);\n\
    \  return implode(\" \", $numbers);\n}\necho sort_numbers(\"three one five\");",
  "  $numbers = explode(\" \", $numbers);\n  $sorted = array();\n  foreach ($numbers\
    \ as $number) {\n    $sorted[] = $number;\n  }\n  sort($sorted);\n  return implode(\"\
    \ \", $sorted);\n}\n\n$numbers = \"eight seven five four three one six nine two\
    \ zero\";\necho sort_numbers($numbers);\n", "\treturn sort_numbers_regex($numbers);\n\
    }\n", "    return explode(\" \", $numbers);\n}\n", "    $numberMap = array(\n\
    \        'zero' => 0,\n        'one' => 1,\n        'two' => 2,\n        'three'\
    \ => 3,\n        'four' => 4,\n        'five' => 5,\n        'six' => 6,\n   \
    \     'seven' => 7,\n        'eight' => 8,\n        'nine' => 9\n    );\n    $sortedNum\
    \ = [];\n    $numArray = explode(' ', $numbers);\n    for ($i = 0; $i < count($numArray);\
    \ $i++) {\n        $sortedNum[$i] = $numberMap[$numArray[$i]];\n    }\n    sort($sortedNum);\n\
    \    $numWords = [];\n    foreach ($sortedNum as $num) {\n        $numWords[]\
    \ = array_search($num, $numberMap);\n    }\n    return implode(' ', $numWords);\n\
    }\n", "    $order = [\n        'zero' => 0,\n        'one' => 1,\n        'two'\
    \ => 2,\n        'three' => 3,\n        'four' => 4,\n        'five' => 5,\n \
    \       'six' => 6,\n        'seven' => 7,\n        'eight' => 8,\n        'nine'\
    \ => 9,\n    ];\n    $numbers = explode(' ', $numbers);\n    $numbers = array_map(function($number)\
    \ use ($order) {\n        return $order[$number];\n    }, $numbers);\n    sort($numbers);\n\
    \    $numbers = array_map(function($number) use ($order) {\n        return array_search($number,\
    \ $order);\n    }, $numbers);\n    return implode(' ', $numbers);\n}\n", "  $sortedNumbers\
    \ = explode(\" \", $numbers);\n  sort($sortedNumbers);\n  return implode(\" \"\
    , $sortedNumbers);\n}\necho sort_numbers(\"three one five\");", "    $ordered\
    \ = array(\n        'zero' => 0,\n        'one' => 1,\n        'two' => 2,\n \
    \       'three' => 3,\n        'four' => 4,\n        'five' => 5,\n        'six'\
    \ => 6,\n        'seven' => 7,\n        'eight' => 8,\n        'nine' => 9\n \
    \   );\n    $words = explode(' ', $numbers);\n    $result = array();\n    foreach\
    \ ($words as $word) {\n        $result[] = $ordered[$word];\n    }\n    sort($result);\n\
    \    $result = array_reverse($result);\n    $result = array_map(function($item)\
    \ use ($ordered) {\n        return array_search($item, $ordered);\n    }, $result);\n\
    \    return implode(' ', $result);\n}\n", "\t$numArray = explode(\" \", $numbers);\n\
    \tsort($numArray);\n\treturn implode(\" \", $numArray);\n}", "  $number_names\
    \ = ['zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight', 'nine'];\n\
    \  $numbers = explode(' ', $numbers);\n  sort($numbers);\n  foreach ($numbers\
    \ as $k => $v) {\n    $numbers[$k] = $number_names[$v];\n  }\n  return implode('\
    \ ', $numbers);\n}\n", "    $map = ['zero' => 0, 'one' => 1, 'two' => 2, 'three'\
    \ => 3, 'four' => 4, 'five' => 5, 'six' => 6, 'seven' => 7, 'eight' => 8, 'nine'\
    \ => 9];\n    $numbers = explode(' ', $numbers);\n    $result = [];\n    foreach\
    \ ($numbers as $number) {\n        $result[] = $map[$number];\n    }\n    sort($result);\n\
    \    $numbers = [];\n    foreach ($result as $number) {\n        $numbers[] =\
    \ array_search($number, $map);\n    }\n    return implode(' ', $numbers);\n}\n",
  "    $numeral_hash = array(\n        'zero' => 0,\n        'one' => 1,\n       \
    \ 'two' => 2,\n        'three' => 3,\n        'four' => 4,\n        'five' =>\
    \ 5,\n        'six' => 6,\n        'seven' => 7,\n        'eight' => 8,\n    \
    \    'nine' => 9\n    );\n    $numbers = explode(' ', $numbers);\n    for ($i\
    \ = 0; $i < count($numbers); $i++) {\n        $numbers[$i] = $numeral_hash[$numbers[$i]];\n\
    \    }\n    sort($numbers);\n    $inverse_numeral_hash = array_flip($numeral_hash);\n\
    \    for ($i = 0; $i < count($numbers); $i++) {\n        $numbers[$i] = $inverse_numeral_hash[$numbers[$i]];\n\
    \    }\n    return implode(' ', $numbers);\n}\n", "\t// Your code here...\n\t\
    $digits = array(\"zero\", \"one\", \"two\", \"three\", \"four\", \"five\", \"\
    six\", \"seven\", \"eight\", \"nine\");\n\t$numbers = explode(\" \", $numbers);\n\
    \t$numbers = array_map(function($v) use ($digits) {\n\t\treturn array_search($v,\
    \ $digits);\n\t}, $numbers);\n\tsort($numbers);\n\t$numbers = array_map(function($v)\
    \ use ($digits) {\n\t\treturn $digits[$v];\n\t}, $numbers);\n\treturn implode(\"\
    \ \", $numbers);\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
