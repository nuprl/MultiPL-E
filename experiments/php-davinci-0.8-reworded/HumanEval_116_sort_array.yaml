name: HumanEval_116_sort_array
language: php
prompt: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
  \ according to\n// number of ones in their binary representation in ascending order.\n\
  // For similar number of ones, sort based on decimal value.\n// It must be implemented\
  \ like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1, 2, 3, 4, 5)\n\
  // >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5, -4, -3, -2)\n// >>>\
  \ sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\nfunction sort_array($arr)\
  \ {\n"
tests: "function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
  \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3,\
  \ -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77, 4,\
  \ 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32, 5))\
  \ !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"); }\n \
  \   if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32)) !==\
  \ array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $ones = array();\n    $twos = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $decimal = decbin($value);\n        $numOfOnes = substr_count($decimal,\
    \ \"1\");\n        $ones[$key] = $numOfOnes;\n        $twos[$key] = $value;\n\
    \    }\n    array_multisort($ones, SORT_ASC, $twos, SORT_ASC, $arr);\n    return\
    \ $arr;\n}\n\necho print_r(sort_array(array(1, 0, 2, 3, 4)));", "  $counts = [];\n\
    \  $results = [];\n  foreach ($arr as $k => $v) {\n    $counts[$k] = countOnes($v);\n\
    \  }\n  asort($counts);\n  foreach ($counts as $k => $v) {\n    $results[] = $arr[$k];\n\
    \  }\n  return $results;\n}\n", "    $counter = array();\n    $res = array();\n\
    \    foreach ($arr as $value) {\n        $counter[$value] = count_one($value);\n\
    \    }\n    array_multisort($counter, SORT_ASC, $arr);\n    foreach ($counter\
    \ as $key => $value) {\n        array_push($res, $key);\n    }\n    return $res;\n\
    }\n", "  $arr_length = count($arr);\n  for ($i = 0; $i < $arr_length; $i++) {\n\
    \    $tmp = $arr[$i];\n    $bin = decbin($tmp);\n    $bin_length = strlen($bin);\n\
    \    $zeros = 0;\n    for ($j = 0; $j < $bin_length; $j++) {\n      if ($bin[$j]\
    \ == '0') {\n        $zeros++;\n      }\n    }\n    $arr[$i] = $zeros;\n  }\n\
    \  $aux_arr = array();\n  for ($i = 0; $i < $arr_length; $i++) {\n    if (!isset($aux_arr[$arr[$i]]))\
    \ {\n      $aux_arr[$arr[$i]] = array();\n    }\n    array_push($aux_arr[$arr[$i]],\
    \ $tmp);\n  }\n  $aux_arr_length = count($aux_arr);\n  for ($i = 0; $i < $aux_arr_length;\
    \ $i++) {\n    sort($aux_arr[$i]);\n  }\n  $result = array();\n  for ($i = 0;\
    \ $i < $aux_arr_length; $i++) {\n    for ($j = 0; $j < count($aux_arr[$i]); $j++)\
    \ {\n      array_push($result, $aux_arr[$i][$j]);\n    }\n  }\n  return $result;\n\
    }\n\necho sort_array([1, 5, 2, 3, 4]);", "  $len = count($arr);\n  for ($i = 0;\
    \ $i < $len; $i++) {\n    for ($j = $i; $j < $len; $j++) {\n      if (decbin($arr[$i])\
    \ > decbin($arr[$j])) {\n        $temp = $arr[$i];\n        $arr[$i] = $arr[$j];\n\
    \        $arr[$j] = $temp;\n      }\n    }\n  }\n  return $arr;\n}\n\necho \"\
    <pre>\";\nvar_dump(sort_array([1, 5, 2, 3, 4]));\necho \"</pre>\";", "  $ones\
    \ = array();\n  foreach ($arr as $value) {\n    $ones[] = substr_count(decbin($value),\
    \ '1');\n  }\n  array_multisort($ones, $arr);\n  return $arr;\n}", "  $len = count($arr);\n\
    \  $sortArray = array();\n  foreach ($arr as $i => $val) {\n    $sortArray[$i]\
    \ = decbin($val);\n  }\n  for ($i = 0; $i < $len; $i++) {\n    for ($j = $i +\
    \ 1; $j < $len; $j++) {\n      if (substr_count($sortArray[$i], '1') > substr_count($sortArray[$j],\
    \ '1')) {\n        $temp = $sortArray[$i];\n        $sortArray[$i] = $sortArray[$j];\n\
    \        $sortArray[$j] = $temp;\n        $temp2 = $arr[$i];\n        $arr[$i]\
    \ = $arr[$j];\n        $arr[$j] = $temp2;\n      } else if (substr_count($sortArray[$i],\
    \ '1') == substr_count($sortArray[$j], '1')) {\n        if ($arr[$i] > $arr[$j])\
    \ {\n          $temp = $sortArray[$i];\n          $sortArray[$i] = $sortArray[$j];\n\
    \          $sortArray[$j] = $temp;\n          $temp2 = $arr[$i];\n          $arr[$i]\
    \ = $arr[$j];\n          $arr[$j] = $temp2;\n        }\n      }\n    }\n  }\n\
    \  return $arr;\n}\n", "  $ones = array();\n  foreach ($arr as $a) {\n    $binary\
    \ = base_convert($a, 10, 2);\n    $ones[$a] = substr_count($binary, '1');\n  }\n\
    \  $sorted = array();\n  asort($ones);\n  foreach ($ones as $k => $o) {\n    $sorted[]\
    \ = $k;\n  }\n  return $sorted;\n}", "  if (count($arr) == 0) return [];\n  usort($arr,\
    \ function($a, $b) {\n    $aBit = decbin($a);\n    $bBit = decbin($b);\n    $aOnes\
    \ = countOnes($aBit);\n    $bOnes = countOnes($bBit);\n    if ($aOnes != $bOnes)\
    \ {\n      return $aOnes > $bOnes ? 1 : -1;\n    } else {\n      return $a > $b\
    \ ? 1 : -1;\n    }\n  });\n  return $arr;\n}\n", "    $one = array();\n    $arr_length\
    \ = count($arr);\n    for ($i = 0; $i < $arr_length; $i++) {\n        $arr[$i]\
    \ = decbin($arr[$i]);\n        $one[$i] = count_one($arr[$i]);\n    }\n    array_multisort($one,\
    \ $arr);\n    for ($i = 0; $i < $arr_length; $i++) {\n        $arr[$i] = bindec($arr[$i]);\n\
    \    }\n    return $arr;\n}\n", "  $ones = [];\n  $zeros = [];\n  $temp_array\
    \ = [];\n  foreach ($arr as $v) {\n    $bin = decbin($v);\n    if (substr_count($bin,\
    \ '1') == 0) {\n      $zeros[] = $v;\n    } else {\n      $ones[$v] = substr_count($bin,\
    \ '1');\n    }\n  }\n  asort($ones);\n  $temp_array = array_keys($ones);\n  return\
    \ array_merge($temp_array, $zeros);\n}", "  for ($i = 0; $i < count($arr); $i++)\
    \ {\n    for ($j = $i + 1; $j < count($arr); $j++) {\n      if (dec2bin($arr[$i])\
    \ === dec2bin($arr[$j])) {\n        if ($arr[$i] > $arr[$j]) {\n          $tmp\
    \ = $arr[$i];\n          $arr[$i] = $arr[$j];\n          $arr[$j] = $tmp;\n  \
    \      }\n      } else if (countOnes(dec2bin($arr[$i])) > countOnes(dec2bin($arr[$j])))\
    \ {\n        $tmp = $arr[$i];\n        $arr[$i] = $arr[$j];\n        $arr[$j]\
    \ = $tmp;\n      }\n    }\n  }\n  return $arr;\n}\n", "    $arr1 = [];\n    $arr2\
    \ = [];\n    $arr3 = [];\n    foreach ($arr as $a) {\n        if ($a > 0) {\n\
    \            $arr1[] = substr_count(decbin($a), \"1\");\n            $arr2[] =\
    \ $a;\n        } else {\n            $arr3[] = $a;\n        }\n    }\n    array_multisort($arr1,\
    \ $arr2);\n    return array_merge($arr2, $arr3);\n}", "    usort($arr, function($a,\
    \ $b) {\n        $binary1 = decbin($a);\n        $binary2 = decbin($b);\n    \
    \    if(substr_count($binary1, \"1\") < substr_count($binary2, \"1\")) {\n   \
    \         return -1;\n        } elseif(substr_count($binary1, \"1\") > substr_count($binary2,\
    \ \"1\")) {\n            return 1;\n        } else {\n            if($a < $b)\
    \ {\n                return -1;\n            } elseif($a > $b) {\n           \
    \     return 1;\n            } else {\n                return 0;\n           \
    \ }\n        }\n    });\n    return $arr;\n}", "  $sorted = array();\n  $sortedObj\
    \ = array();\n  foreach ($arr as $a) {\n    $sortedObj[] = (object)array('value'\
    \ => $a, 'ones' => countOnes($a));\n  }\n  usort($sortedObj, function($a, $b)\
    \ {\n    if ($a->ones > $b->ones) return 1;\n    if ($a->ones < $b->ones) return\
    \ -1;\n    if ($a->value > $b->value) return 1;\n    if ($a->value < $b->value)\
    \ return -1;\n    return 0;\n  });\n  foreach ($sortedObj as $so) {\n    $sorted[]\
    \ = $so->value;\n  }\n  return $sorted;\n}\n", "  $counts = array_map(function($i)\
    \ { return count_bits($i); }, $arr);\n  $sort = function($a, $b) {\n    if ($a[0]\
    \ === $b[0]) {\n      return $a[1] - $b[1];\n    }\n    return $a[0] - $b[0];\n\
    \  };\n  uasort($counts, $sort);\n  $result = array();\n  foreach($counts as $k\
    \ => $v) {\n    $result[] = $arr[$k];\n  }\n  return $result;\n}\n", "  usort($arr,\
    \ function($a, $b) {\n    $onesInA = substr_count(decbin($a), \"1\");\n    $onesInB\
    \ = substr_count(decbin($b), \"1\");\n    if ($onesInA == $onesInB) {\n      return\
    \ $a - $b;\n    }\n    return $onesInA - $onesInB;\n  });\n  return $arr;\n}",
  "  $ones_count = [];\n  $result = [];\n  $count = 0;\n  for ($i = 0; $i < count($arr);\
    \ $i++) {\n    $ones_count[$i] = decbin($arr[$i]);\n    $count = substr_count($ones_count[$i],\
    \ '1');\n    $result[$i] = ['count' => $count, 'val' => $arr[$i]];\n  }\n  usort($result,\
    \ function($a, $b) {\n    if ($a['count'] == $b['count']) {\n      return $a['val']\
    \ - $b['val'];\n    }\n    return $a['count'] - $b['count'];\n  });\n  for ($i\
    \ = 0; $i < count($result); $i++) {\n    $result[$i] = $result[$i]['val'];\n \
    \ }\n  return $result;\n}\n", "  $result = [];\n  foreach ($arr as $a) {\n   \
    \ $result[$a] = count_bits($a);\n  }\n  asort($result);\n  return array_keys($result);\n\
    }\n", "    usort($arr, function($a, $b) {\n        $bin_a = decbin($a);\n    \
    \    $bin_b = decbin($b);\n        $ones_a = substr_count($bin_a, \"1\");\n  \
    \      $ones_b = substr_count($bin_b, \"1\");\n        if ($ones_a == $ones_b)\
    \ {\n            return $a - $b;\n        }\n        return $ones_a - $ones_b;\n\
    \    });\n    return $arr;\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
