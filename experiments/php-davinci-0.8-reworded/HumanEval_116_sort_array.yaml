name: HumanEval_116_sort_array
language: php
prompt: "<?php\n// In this Kata, you have to sort an array of non-negative integers\
  \ according to\n// number of ones in their binary representation in ascending order.\n\
  // For similar number of ones, sort based on decimal value.\n// It must be implemented\
  \ like this:\n// >>> sort_array(array(1, 5, 2, 3, 4))\n// array(1, 2, 3, 4, 5)\n\
  // >>> sort_array(array(-2, -3, -4, -5, -6))\n// array(-6, -5, -4, -3, -2)\n// >>>\
  \ sort_array(array(1, 0, 2, 3, 4))\n// array(0, 1, 2, 3, 4)\nfunction sort_array($arr)\
  \ {\n"
tests: "function candidate(...$args) {\n    return sort_array(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(1, 5, 2, 3, 4)) !== array(1, 2, 4, 3,\
  \ 5)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-2, -3,\
  \ -4, -5, -6)) !== array(-4, -2, -6, -5, -3)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1, 0, 2, 3, 4)) !== array(0, 1, 2, 4, 3)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array()) {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 5, 77, 4,\
  \ 5, 3, 5, 7, 2, 3, 4)) !== array(2, 2, 4, 4, 3, 3, 5, 5, 5, 7, 77)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 6, 44, 12, 32, 5))\
  \ !== array(32, 3, 5, 6, 12, 44)) { throw new Exception(\"Test failed!\"); }\n \
  \   if (candidate(array(2, 4, 8, 16, 32)) !== array(2, 4, 8, 16, 32)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 8, 16, 32)) !==\
  \ array(2, 4, 8, 16, 32)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $ones = array();\n    $twos = array();\n    foreach ($arr as $key\
    \ => $value) {\n        $decimal = decbin($value);\n        $numOfOnes = substr_count($decimal,\
    \ \"1\");\n        $ones[$key] = $numOfOnes;\n        $twos[$key] = $value;\n\
    \    }\n    array_multisort($ones, SORT_ASC, $twos, SORT_ASC, $arr);\n    return\
    \ $arr;\n}\n\necho print_r(sort_array(array(1, 0, 2, 3, 4)));", "  $counts = [];\n\
    \  $results = [];\n  foreach ($arr as $k => $v) {\n    $counts[$k] = countOnes($v);\n\
    \  }\n  asort($counts);\n  foreach ($counts as $k => $v) {\n    $results[] = $arr[$k];\n\
    \  }\n  return $results;\n}\n", "    $counter = array();\n    $res = array();\n\
    \    foreach ($arr as $value) {\n        $counter[$value] = count_one($value);\n\
    \    }\n    array_multisort($counter, SORT_ASC, $arr);\n    foreach ($counter\
    \ as $key => $value) {\n        array_push($res, $key);\n    }\n    return $res;\n\
    }\n", "  $arr_length = count($arr);\n  for ($i = 0; $i < $arr_length; $i++) {\n\
    \    $tmp = $arr[$i];\n    $bin = decbin($tmp);\n    $bin_length = strlen($bin);\n\
    \    $zeros = 0;\n    for ($j = 0; $j < $bin_length; $j++) {\n      if ($bin[$j]\
    \ == '0') {\n        $zeros++;\n      }\n    }\n    $arr[$i] = $zeros;\n  }\n\
    \  $aux_arr = array();\n  for ($i = 0; $i < $arr_length; $i++) {\n    if (!isset($aux_arr[$arr[$i]]))\
    \ {\n      $aux_arr[$arr[$i]] = array();\n    }\n    array_push($aux_arr[$arr[$i]],\
    \ $tmp);\n  }\n  $aux_arr_length = count($aux_arr);\n  for ($i = 0; $i < $aux_arr_length;\
    \ $i++) {\n    sort($aux_arr[$i]);\n  }\n  $result = array();\n  for ($i = 0;\
    \ $i < $aux_arr_length; $i++) {\n    for ($j = 0; $j < count($aux_arr[$i]); $j++)\
    \ {\n      array_push($result, $aux_arr[$i][$j]);\n    }\n  }\n  return $result;\n\
    }\n\necho sort_array([1, 5, 2, 3, 4]);", "  $len = count($arr);\n  for ($i = 0;\
    \ $i < $len; $i++) {\n    for ($j = $i; $j < $len; $j++) {\n      if (decbin($arr[$i])\
    \ > decbin($arr[$j])) {\n        $temp = $arr[$i];\n        $arr[$i] = $arr[$j];\n\
    \        $arr[$j] = $temp;\n      }\n    }\n  }\n  return $arr;\n}\n\necho \"\
    <pre>\";\nvar_dump(sort_array([1, 5, 2, 3, 4]));\necho \"</pre>\";", "  $ones\
    \ = array();\n  foreach ($arr as $value) {\n    $ones[] = substr_count(decbin($value),\
    \ '1');\n  }\n  array_multisort($ones, $arr);\n  return $arr;\n}", "  $len = count($arr);\n\
    \  $sortArray = array();\n  foreach ($arr as $i => $val) {\n    $sortArray[$i]\
    \ = decbin($val);\n  }\n  for ($i = 0; $i < $len; $i++) {\n    for ($j = $i +\
    \ 1; $j < $len; $j++) {\n      if (substr_count($sortArray[$i], '1') > substr_count($sortArray[$j],\
    \ '1')) {\n        $temp = $sortArray[$i];\n        $sortArray[$i] = $sortArray[$j];\n\
    \        $sortArray[$j] = $temp;\n        $temp2 = $arr[$i];\n        $arr[$i]\
    \ = $arr[$j];\n        $arr[$j] = $temp2;\n      } else if (substr_count($sortArray[$i],\
    \ '1') == substr_count($sortArray[$j], '1')) {\n        if ($arr[$i] > $arr[$j])\
    \ {\n          $temp = $sortArray[$i];\n          $sortArray[$i] = $sortArray[$j];\n\
    \          $sortArray[$j] = $temp;\n          $temp2 = $arr[$i];\n          $arr[$i]\
    \ = $arr[$j];\n          $arr[$j] = $temp2;\n        }\n      }\n    }\n  }\n\
    \  return $arr;\n}\n", "  $ones = array();\n  foreach ($arr as $a) {\n    $binary\
    \ = base_convert($a, 10, 2);\n    $ones[$a] = substr_count($binary, '1');\n  }\n\
    \  $sorted = array();\n  asort($ones);\n  foreach ($ones as $k => $o) {\n    $sorted[]\
    \ = $k;\n  }\n  return $sorted;\n}", "  if (count($arr) == 0) return [];\n  usort($arr,\
    \ function($a, $b) {\n    $aBit = decbin($a);\n    $bBit = decbin($b);\n    $aOnes\
    \ = countOnes($aBit);\n    $bOnes = countOnes($bBit);\n    if ($aOnes != $bOnes)\
    \ {\n      return $aOnes > $bOnes ? 1 : -1;\n    } else {\n      return $a > $b\
    \ ? 1 : -1;\n    }\n  });\n  return $arr;\n}\n", "    $one = array();\n    $arr_length\
    \ = count($arr);\n    for ($i = 0; $i < $arr_length; $i++) {\n        $arr[$i]\
    \ = decbin($arr[$i]);\n        $one[$i] = count_one($arr[$i]);\n    }\n    array_multisort($one,\
    \ $arr);\n    for ($i = 0; $i < $arr_length; $i++) {\n        $arr[$i] = bindec($arr[$i]);\n\
    \    }\n    return $arr;\n}\n", "  $ones = [];\n  $zeros = [];\n  $temp_array\
    \ = [];\n  foreach ($arr as $v) {\n    $bin = decbin($v);\n    if (substr_count($bin,\
    \ '1') == 0) {\n      $zeros[] = $v;\n    } else {\n      $ones[$v] = substr_count($bin,\
    \ '1');\n    }\n  }\n  asort($ones);\n  $temp_array = array_keys($ones);\n  return\
    \ array_merge($temp_array, $zeros);\n}", "  for ($i = 0; $i < count($arr); $i++)\
    \ {\n    for ($j = $i + 1; $j < count($arr); $j++) {\n      if (dec2bin($arr[$i])\
    \ === dec2bin($arr[$j])) {\n        if ($arr[$i] > $arr[$j]) {\n          $tmp\
    \ = $arr[$i];\n          $arr[$i] = $arr[$j];\n          $arr[$j] = $tmp;\n  \
    \      }\n      } else if (countOnes(dec2bin($arr[$i])) > countOnes(dec2bin($arr[$j])))\
    \ {\n        $tmp = $arr[$i];\n        $arr[$i] = $arr[$j];\n        $arr[$j]\
    \ = $tmp;\n      }\n    }\n  }\n  return $arr;\n}\n", "    $arr1 = [];\n    $arr2\
    \ = [];\n    $arr3 = [];\n    foreach ($arr as $a) {\n        if ($a > 0) {\n\
    \            $arr1[] = substr_count(decbin($a), \"1\");\n            $arr2[] =\
    \ $a;\n        } else {\n            $arr3[] = $a;\n        }\n    }\n    array_multisort($arr1,\
    \ $arr2);\n    return array_merge($arr2, $arr3);\n}", "    usort($arr, function($a,\
    \ $b) {\n        $binary1 = decbin($a);\n        $binary2 = decbin($b);\n    \
    \    if(substr_count($binary1, \"1\") < substr_count($binary2, \"1\")) {\n   \
    \         return -1;\n        } elseif(substr_count($binary1, \"1\") > substr_count($binary2,\
    \ \"1\")) {\n            return 1;\n        } else {\n            if($a < $b)\
    \ {\n                return -1;\n            } elseif($a > $b) {\n           \
    \     return 1;\n            } else {\n                return 0;\n           \
    \ }\n        }\n    });\n    return $arr;\n}", "  $sorted = array();\n  $sortedObj\
    \ = array();\n  foreach ($arr as $a) {\n    $sortedObj[] = (object)array('value'\
    \ => $a, 'ones' => countOnes($a));\n  }\n  usort($sortedObj, function($a, $b)\
    \ {\n    if ($a->ones > $b->ones) return 1;\n    if ($a->ones < $b->ones) return\
    \ -1;\n    if ($a->value > $b->value) return 1;\n    if ($a->value < $b->value)\
    \ return -1;\n    return 0;\n  });\n  foreach ($sortedObj as $so) {\n    $sorted[]\
    \ = $so->value;\n  }\n  return $sorted;\n}\n", "  $counts = array_map(function($i)\
    \ { return count_bits($i); }, $arr);\n  $sort = function($a, $b) {\n    if ($a[0]\
    \ === $b[0]) {\n      return $a[1] - $b[1];\n    }\n    return $a[0] - $b[0];\n\
    \  };\n  uasort($counts, $sort);\n  $result = array();\n  foreach($counts as $k\
    \ => $v) {\n    $result[] = $arr[$k];\n  }\n  return $result;\n}\n", "  usort($arr,\
    \ function($a, $b) {\n    $onesInA = substr_count(decbin($a), \"1\");\n    $onesInB\
    \ = substr_count(decbin($b), \"1\");\n    if ($onesInA == $onesInB) {\n      return\
    \ $a - $b;\n    }\n    return $onesInA - $onesInB;\n  });\n  return $arr;\n}",
  "  $ones_count = [];\n  $result = [];\n  $count = 0;\n  for ($i = 0; $i < count($arr);\
    \ $i++) {\n    $ones_count[$i] = decbin($arr[$i]);\n    $count = substr_count($ones_count[$i],\
    \ '1');\n    $result[$i] = ['count' => $count, 'val' => $arr[$i]];\n  }\n  usort($result,\
    \ function($a, $b) {\n    if ($a['count'] == $b['count']) {\n      return $a['val']\
    \ - $b['val'];\n    }\n    return $a['count'] - $b['count'];\n  });\n  for ($i\
    \ = 0; $i < count($result); $i++) {\n    $result[$i] = $result[$i]['val'];\n \
    \ }\n  return $result;\n}\n", "  $result = [];\n  foreach ($arr as $a) {\n   \
    \ $result[$a] = count_bits($a);\n  }\n  asort($result);\n  return array_keys($result);\n\
    }\n", "    usort($arr, function($a, $b) {\n        $bin_a = decbin($a);\n    \
    \    $bin_b = decbin($b);\n        $ones_a = substr_count($bin_a, \"1\");\n  \
    \      $ones_b = substr_count($bin_b, \"1\");\n        if ($ones_a == $ones_b)\
    \ {\n            return $a - $b;\n        }\n        return $ones_a - $ones_b;\n\
    \    });\n    return $arr;\n}", "    $convArray = [];\n    foreach ($arr as $k\
    \ => $v) {\n        $bin = decbin($v);\n        $convArray[$k] = substr_count($bin,\
    \ '1') . $bin;\n    }\n    asort($convArray);\n    foreach ($convArray as $k =>\
    \ $v) {\n        $convArray[$k] = bindec(substr($v, -strlen($v) + 1));\n    }\n\
    \    return $convArray;\n}\n\necho '<pre>';\nprint_r(sort_array([0, 1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10]));", "    usort($arr, function($a, $b) {\n        $a_ones\
    \ = substr_count(decbin($a), '1');\n        $b_ones = substr_count(decbin($b),\
    \ '1');\n        if ($a_ones == $b_ones) {\n            return $a - $b;\n    \
    \    }\n        return $a_ones - $b_ones;\n    });\n    return $arr;\n}\n\necho\
    \ implode(', ', sort_array([1, 5, 2, 3, 4])), PHP_EOL;\necho implode(', ', sort_array([-2,\
    \ -3, -4, -5, -6])), PHP_EOL;\necho implode(', ', sort_array([1, 0, 2, 3, 4])),\
    \ PHP_EOL;", "    foreach ($arr as $key => $item) {\n        $one_count[$key]\
    \ = substr_count(decbin($item), '1');\n    }\n    array_multisort($one_count,\
    \ SORT_ASC, $arr);\n    return $arr;\n}\n", "    // your code here\n}", "  $tmp\
    \ = [];\n  $ans = [];\n  foreach ($arr as $el) {\n    if (!isset($tmp[$el])) {\n\
    \      $tmp[$el] = ['ones' => countOnes($el), 'zeros' => countZeros($el), 'value'\
    \ => $el];\n    }\n  }\n  $keys = array_keys($tmp);\n  usort($keys, function($a,\
    \ $b) use ($tmp) {\n    $aOnes = $tmp[$a]['ones'];\n    $bOnes = $tmp[$b]['ones'];\n\
    \    $aZeros = $tmp[$a]['zeros'];\n    $bZeros = $tmp[$b]['zeros'];\n    $aValue\
    \ = $tmp[$a]['value'];\n    $bValue = $tmp[$b]['value'];\n    if ($aOnes === $bOnes)\
    \ {\n      if ($aZeros === $bZeros) {\n        return $aValue - $bValue;\n   \
    \   }\n      return $aZeros - $bZeros;\n    }\n    return $aOnes - $bOnes;\n \
    \ });\n  foreach ($keys as $key) {\n    $ans[] = $tmp[$key]['value'];\n  }\n \
    \ return $ans;\n}\n", "  $arr = array_map('decbin', $arr);\n  //echo var_dump($arr);\n\
    \  $arr = array_map('strlen', $arr);\n  //echo var_dump($arr);\n  $bin_sorted\
    \ = $arr;\n  sort($bin_sorted);\n  $out = [];\n  foreach ($bin_sorted as $key\
    \ => $value) {\n    $bin_sorted[$key] = $arr[$key];\n    $out[$key] = array_search($value,\
    \ $arr);\n  }\n  //echo var_dump($bin_sorted);\n  //echo var_dump($out);\n  return\
    \ $out;\n}\n", "  usort($arr, 'sortFunction');\n  return $arr;\n}\n", "  $arr\
    \ = array_map(function($elem) {\n    return [decbin($elem), $elem];\n  }, $arr);\n\
    \  $arr = array_map(function($elem) {\n    return [substr_count($elem[0], '1'),\
    \ $elem[1]];\n  }, $arr);\n  $arr = array_multisort($arr);\n  $arr = array_map(function($elem)\
    \ {\n    return $elem[1];\n  }, $arr);\n  return $arr;\n}\n", "  $arr = array_map(function($v)\
    \ { return decbin($v); }, $arr);\n  $arr = array_map(function($v) { return strlen($v);\
    \ }, $arr);\n  $arr = array_combine($arr, $arr);\n  ksort($arr);\n  return $arr;\n\
    }\n", "  if(!$arr) return [];\n  $num1s = array_map(function($i) {\n    return\
    \ substr_count(decbin($i), \"1\");\n  }, $arr);\n  asort($num1s);\n  $sorted =\
    \ [];\n  foreach($num1s as $i => $n) {\n    $sorted[] = $arr[$i];\n  }\n  return\
    \ $sorted;\n}\n\necho sort_array([1, 5, 2, 3, 4]);\necho sort_array([-2, -3, -4,\
    \ -5, -6]);\necho sort_array([1, 0, 2, 3, 4]);", "    usort($arr, function($a,\
    \ $b) {\n        $a_ones = substr_count(decbin($a), \"1\");\n        $b_ones =\
    \ substr_count(decbin($b), \"1\");\n        if ($a_ones == $b_ones) {\n      \
    \      return $a - $b;\n        }\n        return $a_ones - $b_ones;\n    });\n\
    \    return $arr;\n}\n", "  if (count($arr) === 0) {\n    return $arr;\n  }\n\
    \  $counts = [];\n  foreach ($arr as $key => $val) {\n    $ones = substr_count(decbin($val),\
    \ '1');\n    $counts[$ones][] = $val;\n  }\n  ksort($counts);\n  $sorted = [];\n\
    \  foreach ($counts as $key => $val) {\n    if (count($val) > 1) {\n      asort($val);\n\
    \    }\n    $sorted = array_merge($sorted, $val);\n  }\n  return $sorted;\n}\n\
    \nvar_dump(sort_array([1, 5, 2, 3, 4]));\nvar_dump(sort_array([-2, -3, -4, -5,\
    \ -6]));\nvar_dump(sort_array([1, 0, 2, 3, 4]));", "    //count number of 1's\n\
    \    foreach ($arr as $num) {\n        $ones = substr_count(decbin($num), '1');\n\
    \        $counts[$num] = $ones;\n    }\n    asort($counts);\n    foreach ($counts\
    \ as $key => $val) {\n        $sorted[] = $key;\n    }\n    return $sorted;\n\
    }\n\nprint_r(sort_array([5, 1, 2, 4, 3, -1, -5, 0]));\n", "  $sorted = array();\n\
    \  $arrOnes = array();\n  foreach ($arr as $k => $v) {\n    $arrOnes[$k] = array(\n\
    \      'ones' => substr_count(decbin($v), '1'),\n      'value' => $v\n    );\n\
    \  }\n  usort($arrOnes, function($a, $b) {\n    if ($a['ones'] > $b['ones']) {\n\
    \      return 1;\n    } elseif ($a['ones'] < $b['ones']) {\n      return -1;\n\
    \    } else {\n      if ($a['value'] > $b['value']) {\n        return 1;\n   \
    \   } elseif ($a['value'] < $b['value']) {\n        return -1;\n      } else {\n\
    \        return 0;\n      }\n    }\n  });\n  foreach ($arrOnes as $v) {\n    $sorted[]\
    \ = $v['value'];\n  }\n  return $sorted;\n}\nprint_r(sort_array(array(1, 5, 2,\
    \ 3, 4)));\nprint_r(sort_array(array(-2, -3, -4, -5, -6)));\nprint_r(sort_array(array(1,\
    \ 0, 2, 3, 4)));", "  $arr = array_map('decbin', $arr);\n  usort($arr, function($a,\
    \ $b) {\n    $a_ones = substr_count($a, '1');\n    $b_ones = substr_count($b,\
    \ '1');\n    return $a_ones === $b_ones ? $a - $b : $a_ones - $b_ones;\n  });\n\
    \  return array_map('bindec', $arr);\n}\n", "  foreach ($arr as $key => $value)\
    \ {\n    $data[$key] = decbin($value);\n  }\n  $count = count($data);\n  for ($i\
    \ = 0; $i < $count; $i++) {\n    for ($j = $i + 1; $j < $count; $j++) {\n    \
    \  if (substr_count($data[$i], '1') > substr_count($data[$j], '1')) {\n      \
    \  $min = $data[$j];\n        $data[$j] = $data[$i];\n        $data[$i] = $min;\n\
    \      } elseif (substr_count($data[$i], '1') == substr_count($data[$j], '1'))\
    \ {\n        if ($arr[$i] > $arr[$j]) {\n          $min = $arr[$j];\n        \
    \  $arr[$j] = $arr[$i];\n          $arr[$i] = $min;\n        }\n      }\n    }\n\
    \  }\n  return $arr;\n}\n\nprint_r(sort_array([1, 5, 2, 3, 4]));\nprint_r(sort_array([-2,\
    \ -3, -4, -5, -6]));\nprint_r(sort_array([1, 0, 2, 3, 4]));", "  $newArr = [];\n\
    \  foreach ($arr as $v) {\n    $newArr[$v] = decbin($v);\n  }\n  $newArr = array_count_values($newArr);\n\
    \  ksort($newArr);\n  return $newArr;\n}\n\n$array = [-3, -4, -6, -7, -5, -2];\n\
    sort_array($array);", "  $binArray = array();\n  foreach ($arr as $n) {\n    $binArray[]\
    \ = array(\n      'binary' => decbin($n),\n      'n' => $n\n    );\n  }\n  //\
    \ Sort descending on the count of 1s in the binary number\n  usort($binArray,\
    \ function($a, $b) {\n    $a_cnt = substr_count($a['binary'], '1');\n    $b_cnt\
    \ = substr_count($b['binary'], '1');\n    if ($a_cnt == $b_cnt) {\n      return\
    \ $a['n'] - $b['n'];\n    }\n    return $a_cnt - $b_cnt;\n  });\n  $result = array();\n\
    \  foreach ($binArray as $item) {\n    $result[] = $item['n'];\n  }\n  return\
    \ $result;\n}\necho implode(', ', sort_array(array(3,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5",
  "  $ones_map = [];\n  foreach ($arr as $num) {\n    $ones = substr_count(decbin($num),\
    \ '1');\n    $ones_map[$ones][] = $num;\n  }\n  ksort($ones_map);\n  $res = [];\n\
    \  foreach ($ones_map as $ones => $num_ones) {\n    asort($num_ones);\n    $res\
    \ = array_merge($res, $num_ones);\n  }\n  return $res;\n}\n\necho sort_array([1,\
    \ 5, 2, 3, 4]);\necho sort_array([-2, -3, -4, -5, -6]);\necho sort_array([1, 0,\
    \ 2, 3, 4]);", "    $hex = array_map('decbin', $arr);\n    $numbers = array_combine($arr,\
    \ $hex);\n    uasort($numbers, function($a, $b) {\n        $match_a = substr_count($a,\
    \ 1);\n        $match_b = substr_count($b, 1);\n        if ($match_a == $match_b)\
    \ {\n            return strcmp($a, $b);\n        }\n        return ($match_a <\
    \ $match_b) ? -1 : 1;\n    });\n    return array_keys($numbers);\n}\n", "  //\
    \ for each integer in $arr\n  foreach ($arr as $key => $value) {\n    // if $value\
    \ < 0\n    if ($value < 0) {\n      // change its sign\n      $arr[$key] = -$value;\n\
    \    }\n    // count the number of 1 in its binary representation\n    $arr[$key]\
    \ = count(str_split(decbin($arr[$key])));\n  }\n  // sort by number of 1 in binary\
    \ representation\n  // and then by decimal value\n  array_multisort($arr, SORT_ASC,\
    \ SORT_NUMERIC, $arr);\n  // change signs back if necessary\n  foreach ($arr as\
    \ $key => $value) {\n    if ($value < 0) {\n      $arr[$key] = -$value;\n    }\n\
    \  }\n  return $arr;\n}\n\necho sort_array([-4, 1, 2, -4, 2, 5, 2, 3, 2, 5, 2,\
    \ 1, 1, 5, 2, 1, 2, 5, 2, 1]) . PHP_EOL;\necho sort_array([-4, 1, 2, -4, 2, 5,\
    \ 2, 3, 2, 5, 2, 1, 1, 5, 2, 1, 2, 5, 2, 1, 1]) . PHP_EOL;\necho sort_array([-4,\
    \ 1, 2, -4, 2, 5, 2, 3, 2, 5, 2, 1, 1, 5, 2, 1, 2, 5, 2, 1, 1, 3]) . PHP_EOL;\n\
    echo sort_array([-4, 1, 2, -4, 2, 5, 2, 3, 2, 5, 2, 1, 1, 5, 2, 1, 2, 5, 2, 1,\
    \ 1, 3, 3]) . PHP_EOL;\necho sort_array([-4, 1, 2, -4, 2, 5, 2, 3, 2, 5, 2, 1,\
    \ 1, 5, 2, 1, 2, 5, 2, 1, 1, 3, 3, 3]) . PHP_EOL;\necho sort_array([-4, 1, 2,\
    \ -4, 2", "    $bin_arr = array_map('decbin', $arr);\n    $sorted_array = array();\n\
    \    foreach ($bin_arr as $value) {\n        $sorted_array[$value] = (string)$value;\n\
    \    }\n    ksort($sorted_array);\n    $sorted_array = array_map('bindec', $sorted_array);\n\
    \    return $sorted_array;\n}\n", "  $bits = array_map(function($n) {\n    $bits\
    \ = str_split(decbin($n));\n    array_pop($bits);\n    return $bits;\n  }, $arr);\n\
    \  array_multisort(array_map('count', $bits), SORT_ASC, $arr);\n  return $arr;\n\
    }\n\n$input = array(1, 5, 2, 3, 4);\nvar_dump(sort_array($input));\n\n$input =\
    \ array(-2, -3, -4, -5, -6);\nvar_dump(sort_array($input));\n\n$input = array(1,\
    \ 0, 2, 3, 4);\nvar_dump(sort_array($input));", "  $arr = array_map(function($e)\
    \ {\n    return [$e, decbin($e)];\n  }, $arr);\n  usort($arr, function($a, $b)\
    \ {\n    $a = $a[1];\n    $b = $b[1];\n    if ($a === $b) {\n      return 0;\n\
    \    }\n    $a = str_split($a);\n    $b = str_split($b);\n    if ($a[0] !== $b[0])\
    \ {\n      return $a[0] < $b[0] ? -1 : 1;\n    }\n    return $a[1] < $b[1] ? -1\
    \ : 1;\n  });\n  return array_map(function($e) {\n    return $e[0];\n  }, $arr);\n\
    }\n\nvar_dump(sort_array([1, 0, 2, 3, 4]));\nvar_dump(sort_array([0, 1, 2, 3,\
    \ 4]));\nvar_dump(sort_array([0, 2, 4, 6, 8]));\nvar_dump(sort_array([10, 1, 2,\
    \ 3, 4]));\nvar_dump(sort_array([1, 2, 3, 4, 10]));\nvar_dump(sort_array([1, 2,\
    \ 3, 4, 0]));\nvar_dump(sort_array([1, 2, 3, 4, 5]));\nvar_dump(sort_array([1,\
    \ 2, 3, 4, -6]));\nvar_dump(sort_array([1, 2, 3, 4, -1]));\nvar_dump(sort_array([1,\
    \ 5, 2, 3, 4]));\nvar_dump(sort_array([4, 4, 4, 4, 4]));\nvar_dump(sort_array([-2,\
    \ -3, -4, -5, -6]));\nvar_dump(sort_array([-2, -3, -4, -1, -6]));\nvar_dump(sort_array([-2,\
    \ -3, -4, -5, -1]));\nvar_dump(sort_array([-2, -3, -", "  $result = array();\n\
    \  foreach ($arr as $key => $value) {\n    $result[$key] = decbin($value);\n \
    \ }\n  array_multisort($result, SORT_ASC, $arr);\n  return $arr;\n}\n", "  $sorted\
    \ = array();\n  foreach ($arr as $value) {\n    if ($value < 0) {\n      $sorted[decbin(-$value)][]\
    \ = $value;\n    } else {\n      $sorted[decbin($value)][] = $value;\n    }\n\
    \  }\n  ksort($sorted);\n  foreach ($sorted as $value) {\n    sort($value);\n\
    \    foreach ($value as $number) {\n      $new_arr[] = $number;\n    }\n  }\n\
    \  return $new_arr;\n}", "  return $arr;\n}\n", "    sort($arr);\n    $arr1 =\
    \ array();\n    $arr2 = array();\n    foreach ($arr as $value) {\n        if ($value\
    \ > 0) {\n            $ones = substr_count(decbin($value), \"1\");\n         \
    \   $arr1[$ones][] = $value;\n        } else {\n            $arr2[] = $value;\n\
    \        }\n    }\n    ksort($arr1);\n    $res = array();\n    foreach ($arr1\
    \ as $arr) {\n        foreach ($arr as $value) {\n            $res[] = $value;\n\
    \        }\n    }\n    sort($arr2);\n    foreach ($arr2 as $value) {\n       \
    \ $res[] = $value;\n    }\n    return $res;\n}\n", "    $arr2 = [];\n    foreach\
    \ ($arr as $value) {\n        $arr2[] = countOnes($value);\n    }\n    array_multisort($arr2,\
    \ $arr);\n    return $arr;\n}\n", "    // your code here\n    $a = array();\n\
    \    foreach ($arr as $key => $value) {\n      $b = $value;\n      $a[$key] =\
    \ decbin($b);\n    }\n    array_multisort(array_map('strlen', $a), $a, $arr);\n\
    \    return $arr;\n}\n ?>", "    // Sort the array according to number of ones\
    \ in the binary representation\n    $sorted_arr = array_map('decbin', $arr);\n\
    \    $sorted_arr = array_map('sort_bin', $sorted_arr);\n    array_multisort($sorted_arr,\
    \ $arr);\n    return $arr;\n}\n", "    $count = array_map(function($num) {\n \
    \       return decbin($num);\n    }, $arr);\n    $count = array_map(function($num)\
    \ {\n        return substr_count($num, '1');\n    }, $count);\n    $new = [];\n\
    \    foreach ($count as $key => $value) {\n        $new[$value][] = $arr[$key];\n\
    \    }\n    $new = array_map(function($num) {\n        sort($num);\n        return\
    \ $num;\n    }, $new);\n    $new = array_reduce($new, function($a, $b) {\n   \
    \     return array_merge($a, $b);\n    }, []);\n    return $new;\n}\necho(sort_array([1,\
    \ 5, 2, 3, 4])) . PHP_EOL;\necho(sort_array([-2, -3, -4, -5, -6])) . PHP_EOL;\n\
    echo(sort_array([1, 0, 2, 3, 4])) . PHP_EOL;", "  $counts = [];\n  foreach ($arr\
    \ as $key => $value) {\n    $counts[$key] = countOnes($value);\n  }\n  array_multisort($counts,\
    \ SORT_ASC, $arr);\n  return $arr;\n}\n", "  $arr = array_map(function($n) {\n\
    \    return [$n, decbin($n)];\n  }, $arr);\n  $oneCount = [];\n  foreach ($arr\
    \ as $item) {\n    $oneCount[$item[0]] = substr_count($item[1], '1');\n  }\n \
    \ arsort($oneCount);\n  $result = [];\n  foreach ($oneCount as $key => $value)\
    \ {\n    $result[] = $key;\n  }\n  return $result;\n}\n\necho sort_array([1, 5,\
    \ 2, 3, 4]) . \"\\n\"; // array(1, 2, 3, 4, 5)\necho sort_array([-2, -3, -4, -5,\
    \ -6]) . \"\\n\"; // array(-6, -5, -4, -3, -2)\necho sort_array([1, 0, 2, 3, 4])\
    \ . \"\\n\"; // array(0, 1, 2, 3, 4)", "    if (count($arr) < 2) return $arr;\n\
    \    $arr = array_flip($arr);\n    $arr = array_map(function($num) {\n       \
    \ $num = decbin($num);\n        $num = str_split($num);\n        $num = array_sum($num);\n\
    \        return $num;\n    }, $arr);\n    asort($arr);\n    $arr = array_flip($arr);\n\
    \    $arr = array_map(function($num) {\n        $num = base_convert($num, 2, 10);\n\
    \        return $num;\n    }, $arr);\n    return $arr;\n}\n", "    $res = [];\n\
    \    $counts = [];\n    foreach ($arr as $value) {\n        $counts[$value] =\
    \ count_ones($value);\n    }\n    asort($counts);\n    foreach ($counts as $key\
    \ => $value) {\n        $res[] = $key;\n    }\n    return $res;\n}\n", "    $result\
    \ = array();\n    $ones = array();\n    $zeros = array();\n    foreach ($arr as\
    \ $value) {\n        $binary = decbin($value);\n        $count = substr_count($binary,\
    \ '1');\n        if ($count === 0) {\n            $zeros[] = $value;\n       \
    \ } else {\n            $ones[$count][] = $value;\n        }\n    }\n    ksort($ones);\n\
    \    foreach ($ones as $value) {\n        sort($value);\n        foreach ($value\
    \ as $val) {\n            $result[] = $val;\n        }\n    }\n    sort($zeros);\n\
    \    foreach ($zeros as $value) {\n        $result[] = $value;\n    }\n    return\
    \ $result;\n}\n", "  // Your code here\n  // First we need to count how many ones\
    \ are in the binary representation\n  // of each element of $arr\n  $binary =\
    \ array_map('decbin', $arr);\n  $ones = [];\n  $zero_one = [];\n  for ($i = 0;\
    \ $i < count($binary); $i++) {\n    $ones[$i] = substr_count($binary[$i], '1');\n\
    \    $zero_one[$i] = $binary[$i] . '_' . $arr[$i];\n  }\n  // After we have the\
    \ number of ones for each element of $arr we\n  // need to sort $ones, and get\
    \ the original indices of the sorted $ones\n  asort($ones);\n  $indices = array_keys($ones);\n\
    \  // $indices = [0, 2, 1, 3, 4];\n  // $zero_one = ['1_1', '10_2', '101_5', '11_3',\
    \ '100_4'];\n  $sorted_zero_one = [];\n  foreach ($indices as $i) {\n    $sorted_zero_one[]\
    \ = $zero_one[$i];\n  }\n  // $sorted_zero_one = ['1_1', '101_5', '10_2', '11_3',\
    \ '100_4'];\n  $sorted_zero_one = array_map(function($x) {\n    return explode('_',\
    \ $x);\n  }, $sorted_zero_one);\n  $sorted_zero_one = array_map(function($x) {\n\
    \    return intval($x[1]);\n  }, $sorted_zero_one);\n  return $sorted_zero_one;\n\
    }\n", "  $sorted = array();\n  foreach ($arr as $k => $v) {\n    $sorted[$k] =\
    \ decbin($v);\n  }\n  array_multisort($sorted, SORT_ASC, $arr);\n  return $arr;\n\
    }", "    foreach ($arr as $key => $value) {\n        $binary[$key] = decbin($value);\n\
    \    }\n    asort($binary);\n    foreach ($binary as $key => $value) {\n     \
    \   $binary[$key] = bindec($value);\n    }\n    return $binary;\n}\necho json_encode(sort_array([1,\
    \ 5, 2, 3, 4]));\necho json_encode(sort_array([-2, -3, -4, -5, -6]));\necho json_encode(sort_array([1,\
    \ 0, 2, 3, 4]));", "  $oneCounts = array_map(function($n) {\n    $count = 0;\n\
    \    for ($i = 0; $i < strlen(decbin($n)); $i++) {\n      if (substr(decbin($n),\
    \ $i, 1) == '1') {\n        $count++;\n      }\n    }\n    return $count;\n  },\
    \ $arr);\n  $sortedOnes = array_unique($oneCounts);\n  $sorted = [];\n  foreach\
    \ ($sortedOnes as $ones) {\n    $values = array_filter($arr, function($n) use\
    \ ($ones) {\n      $count = 0;\n      for ($i = 0; $i < strlen(decbin($n)); $i++)\
    \ {\n        if (substr(decbin($n), $i, 1) == '1') {\n          $count++;\n  \
    \      }\n      }\n      return $count == $ones;\n    });\n    sort($values);\n\
    \    $sorted = array_merge($sorted, $values);\n  }\n  return $sorted;\n}\n\nprint_r(sort_array([0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nprint_r(sort_array([1, 2, 3, 4, 5]));\nprint_r(sort_array([10,\
    \ 100, 1000000, 1]));\nprint_r(sort_array([]));", "  $narr = [];\n  foreach ($arr\
    \ as $value) {\n    $narr[$value] = decbin($value);\n  }\n  uasort($narr, function($a,\
    \ $b) {\n    $a = strlen(str_replace('0', '', $a));\n    $b = strlen(str_replace('0',\
    \ '', $b));\n    if ($a === $b) {\n      return $a < $b ? -1 : 1;\n    }\n   \
    \ return $a < $b ? -1 : 1;\n  });\n  return array_keys($narr);\n}", "    $ones\
    \ = [];\n    $zeros = [];\n    foreach ($arr as $key => $val) {\n        $bin\
    \ = decbin($val);\n        $tmp = substr_count($bin, 1);\n        if ($tmp > 0)\
    \ {\n            $ones[$key] = $tmp;\n        } else {\n            $zeros[$key]\
    \ = $val;\n        }\n    }\n    asort($ones);\n    arsort($zeros);\n    $result\
    \ = [];\n    foreach ($ones as $key => $val) {\n        $result[] = $arr[$key];\n\
    \    }\n    foreach ($zeros as $key => $val) {\n        $result[] = $val;\n  \
    \  }\n    return $result;\n}", "  $binArr = [];\n  $sumArr = [];\n  foreach ($arr\
    \ as $value) {\n    $binArr[] = decbin($value);\n  }\n  foreach ($binArr as $key\
    \ => $bin) {\n    $sumArr[$key] = substr_count($bin, '1');\n  }\n  array_multisort($sumArr,\
    \ SORT_ASC, $arr);\n  return $arr;\n}", "  $result = array();\n  $ones = array();\n\
    \  foreach ($arr as $key => $value) {\n    $ones[$key] = count_ones($value);\n\
    \  }\n  while (!empty($arr)) {\n    $min = min($ones);\n    $index = array_search($min,\
    \ $ones);\n    $result[] = $arr[$index];\n    unset($arr[$index]);\n    unset($ones[$index]);\n\
    \  }\n  return $result;\n}\n", "  $ones = [];\n  $zeros = [];\n  $number = '';\n\
    \  foreach ($arr as $value) {\n    $number = decbin($value);\n    if ($value >\
    \ 0) {\n      $ones[$value] = substr_count($number, '1');\n    } else {\n    \
    \  $zeros[$value] = $value;\n    }\n  }\n  $result = [];\n  asort($ones);\n  foreach\
    \ ($ones as $key => $value) {\n    $result[] = $key;\n  }\n  return array_merge($result,\
    \ $zeros);\n}", "    $arr = array_map('decbin', $arr);\n    $arr = array_flip($arr);\n\
    \    ksort($arr);\n    $arr = array_keys($arr);\n    $arr = array_map('bindec',\
    \ $arr);\n    return $arr;\n}\n", "  // sort the array by number of bits set,\
    \ then by value\n  usort($arr, function($a, $b) {\n    return substr_count(decbin($a),\
    \ '1') <=> substr_count(decbin($b), '1') ?: $a <=> $b;\n  });\n  return $arr;\n\
    }", "  $arr1 = array();\n  $arr2 = array();\n  foreach ($arr as $item) {\n   \
    \ $arr1[] = $item;\n    $arr2[] = substr_count(decbin($item), '1');\n  }\n  array_multisort($arr2,\
    \ SORT_ASC, $arr1);\n  return $arr1;\n}\n\necho implode(', ', sort_array([1, 5,\
    \ 2, 3, 4]));", "  foreach ($arr as $key => $value) {\n    $ones = substr_count(decbin($value),\
    \ \"1\");\n    $newarr[$ones][] = $value;\n  }\n  ksort($newarr);\n  $result =\
    \ [];\n  foreach ($newarr as $key => $value) {\n    foreach ($value as $one) {\n\
    \      $result[] = $one;\n    }\n  }\n  return $result;\n}\n", "  if(empty($arr))\
    \ return [];\n  // sort by number of 1's in binary and then by value\n  usort($arr,\
    \ function($a, $b) {\n    if(decbin($a) == decbin($b)) {\n      return $a - $b;\n\
    \    }\n    return substr_count(decbin($a), '1') - substr_count(decbin($b), '1');\n\
    \  });\n  return $arr;\n}\n", "  usort($arr, 'cmp');\n  return $arr;\n}\n", " \
    \   $len = count($arr);\n    $new_arr = [];\n    for ($i = 0; $i < $len; $i++)\
    \ {\n        if ($arr[$i] < 0) {\n            $new_arr[] = -$arr[$i];\n      \
    \  } else {\n            $new_arr[] = decbin($arr[$i]);\n        }\n    }\n  \
    \  array_multisort($new_arr, SORT_ASC, $arr);\n    return $arr;\n}\n", "    $arr2\
    \ = array();\n    $arr3 = array();\n    foreach ($arr as $key => $value) {\n \
    \       $arr2[$key] = decbin($value);\n        $arr3[$key] = $value;\n    }\n\
    \    array_multisort(array_map('ones', $arr2), SORT_ASC, $arr3);\n    return $arr3;\n\
    }", "  usort($arr, function($a, $b) {\n    $binA = decbin($a);\n    $binB = decbin($b);\n\
    \    if (strlen($binA) == strlen($binB)) {\n      return $a > $b;\n    }\n   \
    \ $onesA = substr_count($binA, '1');\n    $onesB = substr_count($binB, '1');\n\
    \    if ($onesA == $onesB) {\n      return $a > $b;\n    }\n    return $onesA\
    \ > $onesB;\n  });\n  return $arr;\n}\n\n$arr = array(1, 5, 2, 3, 4);\nprint_r(sort_array($arr));",
  "    $result = [];\n    $binArr = [];\n    for ($i = 0; $i < count($arr); $i++)\
    \ {\n        $ones = substr_count(decbin($arr[$i]), '1');\n        $binArr[$ones][]\
    \ = $arr[$i];\n    }\n    ksort($binArr);\n    foreach ($binArr as $key => $value)\
    \ {\n        $binArr[$key] = sort($value);\n    }\n    return $binArr;\n}\nsort_array([1,\
    \ 5, 2, 3, 4]);", "  $ans = [];\n  $ones = [];\n  foreach ($arr as $key => $value)\
    \ {\n    $ones[$key] = substr_count(decbin($value), '1');\n  }\n  asort($ones);\n\
    \  foreach ($ones as $key => $value) {\n    $ans[] = $arr[$key];\n  }\n  return\
    \ $ans;\n}", "    $sorted_arr = array();\n    $sorted_decimal_arr = array();\n\
    \    $sorted_ones_arr = array();\n    $sorted_ones_decimal_arr = array();\n  \
    \  foreach ($arr as $number) {\n        $bin_number = sprintf(\"%b\", $number);\n\
    \        $number_of_ones = substr_count($bin_number, \"1\");\n        $sorted_arr[$number_of_ones][]\
    \ = $number;\n    }\n    foreach ($sorted_arr as $key => $value) {\n        $sorted_decimal_arr[$key]\
    \ = $value;\n        rsort($sorted_decimal_arr[$key]);\n    }\n    foreach ($sorted_decimal_arr\
    \ as $key => $value) {\n        foreach ($value as $number) {\n            $sorted_ones_decimal_arr[]\
    \ = $number;\n        }\n    }\n    return $sorted_ones_decimal_arr;\n}", "  for\
    \ ($i = 0; $i < count($arr); $i++) {\n    $decimal[$i] = decbin($arr[$i]);\n \
    \   $decimal_one[$i] = substr_count($decimal[$i], '1');\n  }\n  for ($i = 0; $i\
    \ < count($arr); $i++) {\n    $one_decimal[$decimal_one[$i]] = $arr[$i];\n  }\n\
    \  ksort($one_decimal);\n  return $one_decimal;\n}\n", "  $arr_temp = [];\n  for\
    \ ($i = 0; $i < count($arr); $i++) {\n    $arr_temp[$i] = [$arr[$i], decbin($arr[$i])];\n\
    \  }\n  usort($arr_temp, function($a, $b) {\n    if ($a[1] == $b[1]) {\n     \
    \ return $a[0] > $b[0];\n    }\n    return $a[1] > $b[1];\n  });\n  $arr = [];\n\
    \  for ($i = 0; $i < count($arr_temp); $i++) {\n    $arr[$i] = $arr_temp[$i][0];\n\
    \  }\n  return $arr;\n}\n", "  foreach ($arr as $key => $value) {\n    $binaryArray[$key]\
    \ = str_split(decbin($value));\n  }\n  foreach ($binaryArray as $key => $value)\
    \ {\n    $decimalValues[$key] = $arr[$key];\n    $binaryValues[$key] = array_sum($value);\n\
    \  }\n  array_multisort($binaryValues, SORT_ASC, $decimalValues, SORT_ASC, $arr);\n\
    \  return $arr;\n}", "  $arr_temp = [];\n  $arr_bin = [];\n  foreach ($arr as\
    \ $key => $value) {\n    $arr_temp[$key] = $value;\n    $arr_bin[$key] = decbin($value);\n\
    \  }\n  usort($arr_temp, function($a, $b) use ($arr_bin) {\n    $a_ones = substr_count($arr_bin[array_search($a,\
    \ $arr_temp)], '1');\n    $b_ones = substr_count($arr_bin[array_search($b, $arr_temp)],\
    \ '1');\n    if ($a_ones == $b_ones) {\n      return $a - $b;\n    }\n    return\
    \ $a_ones - $b_ones;\n  });\n  return $arr_temp;\n}\n", "  $max = 0;\n  foreach\
    \ ($arr as $i) {\n    $max = max($max, decbin($i));\n  }\n  $max = strlen($max);\n\
    \  $map = [];\n  foreach ($arr as $i) {\n    $map[decbin($i)] = $i;\n  }\n  ksort($map);\n\
    \  $ret = [];\n  foreach ($map as $k => $v) {\n    $ret[] = $v;\n  }\n  return\
    \ $ret;\n}\n\necho implode(', ', sort_array([1, 5, 2, 3, 4])) . PHP_EOL; // 1,\
    \ 2, 3, 4, 5\necho implode(', ', sort_array([-2, -3, -4, -5, -6])) . PHP_EOL;\
    \ // -6, -5, -4, -3, -2\necho implode(', ', sort_array([1, 0, 2, 3, 4])) . PHP_EOL;\
    \ // 0, 1, 2, 3, 4", "  $ones_count_arr = array();\n  $sort_arr = array();\n \
    \ foreach ($arr as $key => $item) {\n    $ones_count_arr[$key] = decbin($item);\n\
    \    $ones_count_arr[$key] = substr_count($ones_count_arr[$key], \"1\");\n  }\n\
    \  asort($ones_count_arr);\n  foreach ($ones_count_arr as $key => $item) {\n \
    \   $sort_arr[] = $arr[$key];\n  }\n  return $sort_arr;\n}", "  $array = [];\n\
    \  foreach ($arr as $key => $value) {\n    $array[decbin($value)] = $value;\n\
    \  }\n  ksort($array);\n  return array_values($array);\n}\n ?>", "    foreach\
    \ ($arr as $key => $value) {\n        $arr[$key] = decbin($value);\n    }\n  \
    \  $dec = [];\n    foreach ($arr as $key => $value) {\n        $arr[$key] = substr_count($value,\
    \ \"1\");\n        $dec[$key] = $value;\n    }\n    array_multisort($arr, SORT_ASC,\
    \ $dec, SORT_ASC, $arr);\n    foreach ($arr as $key => $value) {\n        $arr[$key]\
    \ = bindec($value);\n    }\n    return $arr;\n}", "    $arr = array_map(function($item)\
    \ {\n        $one_count = substr_count(decbin($item), '1');\n        return [$item,\
    \ $one_count];\n    }, $arr);\n    usort($arr, function($a, $b) {\n        if\
    \ ($a[1] == $b[1]) {\n            return $a[0] > $b[0] ? 1 : -1;\n        }\n\
    \        return $a[1] > $b[1] ? 1 : -1;\n    });\n    return array_map(function($item)\
    \ {\n        return $item[0];\n    }, $arr);\n}\n", "  for ($i = 0; $i < count($arr);\
    \ $i++) {\n    $arr[$i] = decbin($arr[$i]);\n  }\n  return $arr;\n}\n", "  usort($arr,\
    \ function($a, $b) {\n    $a_bin = decbin($a);\n    $b_bin = decbin($b);\n   \
    \ $a_ones = substr_count($a_bin, '1');\n    $b_ones = substr_count($b_bin, '1');\n\
    \    if ($a_ones == $b_ones) {\n      return $a < $b ? -1 : 1;\n    }\n    return\
    \ $a_ones < $b_ones ? -1 : 1;\n  });\n  return $arr;\n}", "  $counts = array_count_values($arr);\n\
    \  foreach ($counts as $key => $count) {\n    $counts[$key] = $count * 100000\
    \ + $key;\n  }\n  asort($counts);\n  $sorted = array_keys($counts);\n  foreach\
    \ ($sorted as $key => $value) {\n    $sorted[$key] = $value % 100000;\n  }\n \
    \ return $sorted;\n}\n", "  $new_arr = [];\n  $one_arr = [];\n  foreach ($arr\
    \ as $number) {\n    if ($number > 0) {\n      $new_arr[] = ['value' => $number,\
    \ 'ones' => countOnes($number)];\n    } else {\n      $one_arr[] = $number;\n\
    \    }\n  }\n  usort($new_arr, function($a, $b) {\n    if ($a['ones'] == $b['ones'])\
    \ {\n      return $a['value'] > $b['value'];\n    }\n    return $a['ones'] > $b['ones'];\n\
    \  });\n  foreach ($new_arr as $item) {\n    $one_arr[] = $item['value'];\n  }\n\
    \  return $one_arr;\n}\n", "  // check that all numbers are non-negative\n  //\
    \ loop through array and count the number of ones in binary representation of\
    \ each number\n  // if they are the same number of ones, use compare to sort by\
    \ value\n  return $arr;\n}", "  $arr = array_map(function($a) {\n    return ['ones'\
    \ => strlen(str_replace('0', '', decbin($a))), 'num' => $a];\n  }, $arr);\n  usort($arr,\
    \ function($a, $b) {\n    if ($a['ones'] == $b['ones']) {\n      return $a['num']\
    \ - $b['num'];\n    }\n    return $a['ones'] - $b['ones'];\n  });\n  return array_map(function($a)\
    \ {\n    return $a['num'];\n  }, $arr);\n}", "    foreach ($arr as $key => $value)\
    \ {\n        $arr[$key] = (string)decbin($value);\n    }\n    $lengths = array_map('strlen',\
    \ $arr);\n    array_multisort($lengths, SORT_ASC, $arr);\n    foreach ($arr as\
    \ $key => $value) {\n        $arr[$key] = (int)bindec($value);\n    }\n    return\
    \ $arr;\n}", "  function binarySort($a, $b) {\n    $ar = str_split(decbin($a));\n\
    \    $br = str_split(decbin($b));\n    $a1Count = 0;\n    $b1Count = 0;\n    for\
    \ ($i = 0; $i < count($ar); $i++) {\n      if ($ar[$i] == '1') {\n        $a1Count++;\n\
    \      }\n    }\n    for ($i = 0; $i < count($br); $i++) {\n      if ($br[$i]\
    \ == '1') {\n        $b1Count++;\n      }\n    }\n    if ($a1Count == $b1Count)\
    \ {\n      return $a - $b;\n    } else {\n      return $a1Count - $b1Count;\n\
    \    }\n  }\n  usort($arr, 'binarySort');\n  return $arr;\n}\n ?>", "    $arr\
    \ = array_map(function($num) {\n        return decbin($num);\n    }, $arr);\n\
    \    uasort($arr, function($a, $b) {\n        if (substr_count($a, \"1\") < substr_count($b,\
    \ \"1\")) {\n            return -1;\n        } elseif (substr_count($a, \"1\"\
    ) > substr_count($b, \"1\")) {\n            return 1;\n        } else {\n    \
    \        if (bindec($a) < bindec($b)) {\n                return -1;\n        \
    \    } elseif (bindec($a) > bindec($b)) {\n                return 1;\n       \
    \     } else {\n                return 0;\n            }\n        }\n    });\n\
    \    $arr = array_map(function($num) {\n        return bindec($num);\n    }, $arr);\n\
    \    return $arr;\n}\n\necho var_dump(sort_array([1, 0, 2, 3, 4]));\necho \"\\\
    n\";\necho var_dump(sort_array([1, 2, 3, 4, 5]));\necho \"\\n\";\necho var_dump(sort_array([-2,\
    \ -3, -4, -5, -6]));\necho \"\\n\";\necho var_dump(sort_array([-2, -3, -4, -5,\
    \ 0]));\necho \"\\n\";\necho var_dump(sort_array([-2, -3, -4, -5, -6]));\necho\
    \ \"\\n\";\necho var_dump(sort_array([1, 0, 2, 3, 4]));\necho \"\\n\";\necho var_dump(sort_array([-2,\
    \ -3, -4, -5, -6]));\necho \"\\n\";\necho var_dump(sort_array([1, 2, 3, 4, 5]));\n\
    echo \"\\n\";\necho var_dump(sort_array([1, 0, 2, 3, 4]));\necho \"\\n\";\necho\
    \ var_dump(sort_array([1, 2, 3, 4, 5]));\necho \"\\n\";\necho var_dump(sort_array([1,\
    \ 0, 2, 3, 4])", "  // sort the array of numbers by their binary representation\n\
    \  usort($arr, function($a, $b) {\n    // convert the numbers to binary strings\n\
    \    $binary_a = decbin($a);\n    $binary_b = decbin($b);\n    // count the number\
    \ of 1s in the binary string\n    $count_a = substr_count($binary_a, '1');\n \
    \   $count_b = substr_count($binary_b, '1');\n    // compare their counts and\
    \ return the result\n    if ($count_a < $count_b) {\n      return -1;\n    } elseif\
    \ ($count_a > $count_b) {\n      return 1;\n    } else {\n      // compare their\
    \ decimal values if they have the same number of 1s\n      return $a < $b ? -1\
    \ : 1;\n    }\n  });\n  return $arr;\n}\n", "  $arr_length = count($arr);\n  if\
    \ ($arr_length <= 1) {\n    return $arr;\n  }\n  $arr_bin = [];\n  $arr_other\
    \ = [];\n  foreach ($arr as $val) {\n    if ($val >= 0) {\n      $arr_bin[] =\
    \ $val;\n    } else {\n      $arr_other[] = $val;\n    }\n  }\n  sort($arr_other);\n\
    \  foreach ($arr_bin as $key => $val) {\n    $arr_bin[$key] = decbin($val);\n\
    \  }\n  foreach ($arr_bin as $key => $val) {\n    $arr_bin[$key] = strlen($val)\
    \ - strlen(str_replace('1', '', $val));\n  }\n  array_multisort($arr_bin, SORT_ASC,\
    \ $arr_bin, SORT_NUMERIC, $arr_bin);\n  return array_merge($arr_bin, $arr_other);\n\
    }\necho \"<pre>\";\nprint_r(sort_array([1, 5, 2, 3, 4]));\nprint_r(sort_array([-2,\
    \ -3, -4, -5, -6]));\nprint_r(sort_array([1, 0, 2, 3, 4]));\nprint_r(sort_array([1,\
    \ 0, 3, 2, 4]));\nprint_r(sort_array([]));\nprint_r(sort_array([-1]));\nprint_r(sort_array([1]));\n\
    print_r(sort_array([0]));\nprint_r(sort_array([1, 2, 3, 4, 5]));\nprint_r(sort_array([-5,\
    \ -4, -3, -2, -1]));\nprint_r(sort_array([8, 7, 6, 5, 4, 3, 2, 1]));\nprint_r(sort_array([-1,\
    \ -2, -3, -4, -5, -6, -7, -8]));\nprint_r(sort_array([12, 33, -1, -2, -3,", " \
    \ $vals = [];\n  foreach ($arr as $num) {\n    $vals[$num] = substr_count(decbin($num),\
    \ '1');\n  }\n  asort($vals);\n  return array_keys($vals);\n}\n", "  $nones =\
    \ [];\n  $sorted = [];\n  foreach ($arr as $i => $v) {\n    $nones[$i] = substr_count(decbin($v),\
    \ '1');\n  }\n  array_multisort($nones, SORT_ASC, $arr);\n  foreach ($nones as\
    \ $i => $v) {\n    $sorted[$v][] = $arr[$i];\n  }\n  foreach ($sorted as $k =>\
    \ $v) {\n    sort($sorted[$k]);\n  }\n  return array_reduce($sorted, 'array_merge',\
    \ []);\n}\n", "  for ($i = 0; $i < count($arr); $i++) {\n    $arr[$i] = sprintf(\"\
    %b\", abs($arr[$i]));\n  }\n  $counts = array_count_values($arr);\n  $keys = array_keys($counts);\n\
    \  $binary_sorted = array();\n  $decimal_sorted = array();\n  foreach ($keys as\
    \ $key) {\n    $decimal_sorted[$key] = $key;\n    $binary_sorted[$key] = $counts[$key];\n\
    \  }\n  array_multisort($binary_sorted, SORT_ASC, $decimal_sorted, SORT_ASC, $keys);\n\
    \  for ($i = 0; $i < count($arr); $i++) {\n    $arr[$i] = bindec($arr[$i]);\n\
    \  }\n  for ($i = 0; $i < count($keys); $i++) {\n    $keys[$i] = bindec($keys[$i]);\n\
    \  }\n  $ans = array();\n  foreach ($keys as $key) {\n    foreach ($arr as $key2)\
    \ {\n      if ($key2 === $key) {\n        $ans[] = $key2;\n      }\n    }\n  }\n\
    \  return $ans;\n}\necho var_dump(sort_array([1, 5, 2, 3, 4]));", "  for ($i =\
    \ 0; $i < count($arr); $i++) {\n    $ones = countOnes(abs($arr[$i]));\n    if\
    \ ($arr[$i] < 0) {\n      $ones = $ones * -1;\n    }\n    $arr[$i] = $ones;\n\
    \  }\n  asort($arr);\n  return array_keys($arr);\n}\n", "  // pad each number\
    \ so that it has the same number of bits\n  $length = strlen(decbin(max($arr)));\n\
    \  $arr = array_map(function($n) use ($length) {\n    return sprintf(\"%0{$length}b\"\
    , $n);\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $a = str_split($a);\n\
    \    $b = str_split($b);\n    // sort by num of 1s\n    if ($sum = array_sum($a)\
    \ - array_sum($b)) {\n      return $sum;\n    }\n    // sort by reverse order\
    \ of bits\n    for ($i = 0; $i < count($a); $i++) {\n      if ($a[$i] - $b[$i])\
    \ {\n        return $a[$i] - $b[$i];\n      }\n    }\n    return 0;\n  });\n \
    \ // decode into decimal number\n  return array_map(function($n) {\n    return\
    \ bindec($n);\n  }, $arr);\n}\n\nvar_dump(sort_array([1, 5, 2, 3, 4])); // array(1,\
    \ 2, 3, 4, 5)\nvar_dump(sort_array([-2, -3, -4, -5, -6])); // array(-6, -5, -4,\
    \ -3, -2)\nvar_dump(sort_array([1, 0, 2, 3, 4])); // array(0, 1, 2, 3, 4)", " \
    \ $binaries = array_map('decbin', $arr);\n  $occurences = array_map('countOnes',\
    \ $binaries);\n  $combined = array_combine($arr, $occurences);\n  asort($combined);\n\
    \  return array_keys($combined);\n}\n", "  $onesArray = [];\n  $zerosArray = [];\n\
    \  for ($i = 0; $i < count($arr); $i++) {\n    $binary = str_pad(decbin($arr[$i]),\
    \ 10, \"0\", STR_PAD_LEFT);\n    $ones = substr_count($binary, \"1\");\n    if\
    \ ($ones == 0) {\n      $zerosArray[] = $arr[$i];\n    } else {\n      $onesArray[$ones][]\
    \ = $arr[$i];\n    }\n  }\n  ksort($onesArray);\n  $sortedArray = [];\n  foreach\
    \ ($onesArray as $val) {\n    sort($val);\n    $sortedArray = array_merge($sortedArray,\
    \ $val);\n  }\n  sort($zerosArray);\n  $sortedArray = array_merge($sortedArray,\
    \ $zerosArray);\n  return $sortedArray;\n}\n ?>", "  sort($arr);\n  $decArr =\
    \ [];\n  $binArr = [];\n  foreach ($arr as $num) {\n    $binArr[] = $num;\n  \
    \  $decArr[] = decbin($num);\n  }\n  asort($decArr);\n  return $decArr;\n}\n",
  "    $bits = array_map(function($n) {\n        return decbin($n);\n    }, $arr);\n\
    \    $bits_sum = array_map(function($b) {\n        return strlen(str_replace('0',\
    \ '', $b));\n    }, $bits);\n    $sorted = array_multisort($bits_sum, SORT_ASC,\
    \ $arr);\n    return $arr;\n}\n", "    foreach ($arr as $k => $v) {\n        $arr[$k]\
    \ = sprintf('%016b', $v);\n    }\n    $arr = array_map(function($v) {\n      \
    \  return sprintf('%08d', strlen($v)) . $v;\n    }, $arr);\n    asort($arr);\n\
    \    return array_map(function($v) {\n        return bindec(substr($v, 8));\n\
    \    }, $arr);\n}\n", "  $ones = [];\n  foreach ($arr as $value) {\n    $binary\
    \ = decbin($value);\n    $count = substr_count($binary, '1');\n    $ones[$count][]\
    \ = $value;\n  }\n  ksort($ones);\n  foreach ($ones as $k => $v) {\n    sort($ones[$k]);\n\
    \  }\n  $ans = [];\n  foreach ($ones as $v) {\n    foreach ($v as $val) {\n  \
    \    $ans[] = $val;\n    }\n  }\n  return $ans;\n}", "  $arr1 = array();\n  $arr2\
    \ = array();\n  $arr3 = array();\n  foreach ($arr as $key => $value) {\n    $string\
    \ = decbin($value);\n    $one = substr_count($string, '1');\n    if($one > 0){\n\
    \      $arr1[$one][] = $value;\n    }else{\n      $arr2[] = $value;\n    }\n \
    \ }\n  ksort($arr1);\n  foreach ($arr1 as $key => $value) {\n    sort($value);\n\
    \    foreach ($value as $key1 => $value1) {\n      $arr3[] = $value1;\n    }\n\
    \  }\n  $arr = array_merge($arr3, $arr2);\n  return $arr;\n}\necho \"<pre>\";\n\
    var_dump(sort_array([1, 5, 2, 3, 4]));\nvar_dump(sort_array([-2, -3, -4, -5, -6]));\n\
    var_dump(sort_array([1, 0, 2, 3, 4]));\necho \"</pre>\";\n ?>", "  $arr = array_flip($arr);\n\
    \  uksort($arr, function($a, $b) {\n    $a = (string) decbin($a);\n    $b = (string)\
    \ decbin($b);\n    $counta = substr_count($a, \"1\");\n    $countb = substr_count($b,\
    \ \"1\");\n    if ($counta === $countb) {\n      return $a - $b;\n    }\n    return\
    \ $counta - $countb;\n  });\n  return array_keys($arr);\n}\n ?>", "    $array\
    \ = [];\n    foreach ($arr as $key => $value) {\n        $array[$key] = [decbin($value),\
    \ $value];\n    }\n    usort($array, function ($a, $b) {\n        $countA = substr_count($a[0],\
    \ '1');\n        $countB = substr_count($b[0], '1');\n        if ($countA ===\
    \ $countB) {\n            return $a[1] - $b[1];\n        }\n        return $countA\
    \ - $countB;\n    });\n    $newArr = [];\n    foreach ($array as $key => $value)\
    \ {\n        $newArr[$key] = $value[1];\n    }\n    return $newArr;\n}\n", " \
    \   $number_of_ones = array();\n    $number_of_zeros = array();\n    $result =\
    \ array();\n    foreach ($arr as $value) {\n        $number_of_ones[] = substr_count(decbin($value),\
    \ \"1\");\n        $number_of_zeros[] = substr_count(decbin($value), \"0\");\n\
    \    }\n    array_multisort($number_of_ones, SORT_ASC, $number_of_zeros, SORT_ASC,\
    \ $arr);\n    return $arr;\n}", "  if(!empty($arr)) {\n    $numberOfOnes = array();\n\
    \    $sortedDecimal = array();\n    foreach($arr as $value) {\n      array_push($numberOfOnes,\
    \ substr_count(decbin($value), '1'));\n      array_push($sortedDecimal, $value);\n\
    \    }\n    array_multisort($numberOfOnes, SORT_ASC, $sortedDecimal, SORT_ASC);\n\
    \    return $sortedDecimal;\n  }\n  return $arr;\n}", "  // Your code here\n \
    \ $one_count = [];\n  foreach ($arr as $a) {\n    if ($a >= 0) {\n      $one_count[$a]\
    \ = substr_count(decbin($a), '1');\n    }\n  }\n  array_multisort($one_count,\
    \ SORT_ASC, $arr);\n  return $arr;\n}\necho sort_array([-2, -3, -4, -5, -6]) .\
    \ PHP_EOL;", "  foreach ($arr as $key => $value) {\n    $result[] = decbin($value);\n\
    \  }\n  sort($result);\n  $result = array_unique($result);\n  foreach ($result\
    \ as $key => $value) {\n    $result2[] = bindec($value);\n  }\n  foreach ($result2\
    \ as $key => $value) {\n    $result3[] = $value;\n  }\n  return $result3;\n}\n",
  "    // the idea is to use a custom sort to sort the numbers\n    usort($arr, function($a,\
    \ $b) {\n        // compare the number of 1s in binary representation\n      \
    \  $comp = substr_count(decbin($a), '1') - substr_count(decbin($b), '1');\n  \
    \      // if equal, compare the values\n        return $comp === 0 ? $a - $b :\
    \ $comp;\n    });\n    return $arr;\n}\n", "    $ones = [];\n    $bin = [];\n\
    \    foreach ($arr as $int) {\n        $ones[] = substr_count(decbin($int), \"\
    1\");\n        $bin[] = decbin($int);\n    }\n    array_multisort($ones, SORT_ASC,\
    \ $bin, SORT_ASC, $arr);\n    return $arr;\n}\n", "    // your code here\n   \
    \ $arr_ones = [];\n    $max_ones = 0;\n    foreach ($arr as $number) {\n     \
    \   $number_ones = substr_count(decbin($number), \"1\");\n        if ($number_ones\
    \ > $max_ones) {\n            $max_ones = $number_ones;\n        }\n        $arr_ones[$number]\
    \ = $number_ones;\n    }\n    ksort($arr_ones);\n    $sorted_arr = [];\n    foreach\
    \ ($arr_ones as $number => $ones) {\n        if ($ones === $max_ones) {\n    \
    \        $sorted_arr[] = $number;\n        }\n    }\n    rsort($sorted_arr);\n\
    \    foreach ($arr_ones as $number => $ones) {\n        if ($ones < $max_ones)\
    \ {\n            $sorted_arr[] = $number;\n        }\n    }\n    return $sorted_arr;\n\
    }\n", "  sort($arr);\n  $sort = [];\n  foreach ($arr as $key => $value) {\n  \
    \  $sort[$key] = countOnes($value);\n  }\n  array_multisort($sort, $arr);\n  return\
    \ $arr;\n}\n", "  $returnArray = array();\n  foreach ($arr as $key => $value)\
    \ {\n    $returnArray[$value] = decbin($value);\n  }\n  asort($returnArray);\n\
    \  foreach ($returnArray as $key => $value) {\n    $array[$key] = count_chars($value)[49];\n\
    \  }\n  asort($array);\n  foreach ($array as $key => $value) {\n    $array[$key]\
    \ = bindec($returnArray[$key]);\n  }\n  return $array;\n}", "    $ones = array();\n\
    \    foreach ($arr as $i) {\n        $n = $i;\n        $one = 0;\n        while\
    \ ($n > 0) {\n            $one += $n % 2;\n            $n = (int)($n / 2);\n \
    \       }\n        $ones[$i] = $one;\n    }\n    array_multisort($ones, $arr);\n\
    \    return $arr;\n}", "  // my first attempt:\n  // $binArray = [];\n  // for\
    \ ($i = 0; $i < count($arr); $i++) {\n  //   $binArray[$i] = decbin($arr[$i]);\n\
    \  // }\n  // $onesArray = [];\n  // for ($i = 0; $i < count($binArray); $i++)\
    \ {\n  //   $onesArray[$i] = str_split($binArray[$i]);\n  // }\n  // $sumArray\
    \ = [];\n  // for ($i = 0; $i < count($onesArray); $i++) {\n  //   $sumArray[$i]\
    \ = 0;\n  //   for ($j = 0; $j < count($onesArray[$i]); $j++) {\n  //     $sumArray[$i]\
    \ += $onesArray[$i][$j];\n  //   }\n  // }\n  //\n  // $sortArray = [];\n  //\
    \ $sortArray[0] = $arr[0];\n  // for ($i = 1; $i < count($arr); $i++) {\n  //\
    \   $switch = 0;\n  //   for ($j = 0; $j < count($sortArray); $j++) {\n  //  \
    \   if ($sumArray[$i] < $sumArray[$j]) {\n  //       array_splice($sortArray,\
    \ $j, 0, $arr[$i]);\n  //       $switch = 1;\n  //       break;\n  //     }\n\
    \  //     else if ($sumArray[$i] == $sumArray[$j]) {\n  //       if ($arr[$i]\
    \ < $sortArray[$j]) {\n  //         array_splice($sortArray, $j, 0, $arr[$i]);\n\
    \  //         $switch = 1;\n  //         break;\n  //       }\n  //     }\n  //\
    \   }\n  //   if ($switch == 0) {\n  //     array_push($sortArray, $arr[$i]);\n\
    \  //   }\n  // }\n  // return $sortArray;\n\n  // a better version:\n  // $sortArray\
    \ = [];\n  //", "  foreach ($arr as $key => $value) {\n    $binary = decbin($value);\n\
    \    $binary = str_replace('-', '', $binary);\n    $bin[] = [\n      'num' =>\
    \ $value,\n      'bin' => $binary,\n      'ones' => substr_count($binary, '1')\n\
    \    ];\n  }\n  usort($bin, function($a, $b) {\n    if ($a['ones'] == $b['ones'])\
    \ {\n      return $a['num'] > $b['num'];\n    }\n    return $a['ones'] > $b['ones'];\n\
    \  });\n  foreach ($bin as $key => $value) {\n    $bin[$key] = $value['num'];\n\
    \  }\n  return $bin;\n}", "  $arrCopy = $arr;\n  sort($arrCopy);\n  return $arrCopy;\n\
    }\n", "  $indexedArray = array();\n  foreach ($arr as $element) {\n    $indexedArray[$element]\
    \ = decbin($element);\n  }\n  uasort($indexedArray, 'compare');\n  return array_keys($indexedArray);\n\
    }\n", "  return $arr;\n}\n", "    usort($arr, function($a, $b) {\n        return\
    \ decbin($a) <=> decbin($b) ?: $a <=> $b;\n    });\n    return $arr;\n}\n", " \
    \ foreach ($arr as $key => $value) {\n    $binary[$key] = decbin($value);\n  \
    \  $count[$key] = substr_count($binary[$key], 1);\n  }\n  array_multisort($count,\
    \ SORT_ASC, $arr);\n  return $arr;\n}\n ?>", "    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        $string = (string)decbin($arr[$i]);\n        $count = substr_count($string,\
    \ '1');\n        $arr[$i] = $count;\n    }\n    return $arr;\n}\n", "  foreach\
    \ ($arr as $key => $val) {\n    $tmp[$key] = substr_count(decbin($val), 1);\n\
    \  }\n  asort($tmp);\n  foreach ($tmp as $key => $val) {\n    $tmp[$key] = $arr[$key];\n\
    \  }\n  return $tmp;\n}\n", "    $sorted = $arr;\n    foreach ($sorted as $index\
    \ => $num) {\n        $sorted[$index] = [\n            'dec' => $num,\n      \
    \      'bin' => str_pad(decbin($num), 5, '0', STR_PAD_LEFT),\n        ];\n   \
    \ }\n    usort($sorted, function ($a, $b) {\n        $compare = strcmp($a['bin'],\
    \ $b['bin']);\n        if ($compare == 0) {\n            return $a['dec'] - $b['dec'];\n\
    \        }\n        return $compare;\n    });\n    foreach ($sorted as $index\
    \ => $num) {\n        $sorted[$index] = $num['dec'];\n    }\n    return $sorted;\n\
    }\n\necho implode(', ', sort_array([1, 5, 2, 3, 4])) . \"\\n\"; // 1, 2, 3, 4,\
    \ 5\necho implode(', ', sort_array([-2, -3, -4, -5, -6])) . \"\\n\"; // -6, -5,\
    \ -4, -3, -2\necho implode(', ', sort_array([1, 0, 2, 3, 4])) . \"\\n\"; // 0,\
    \ 1, 2, 3, 4", "  $asc = function($a, $b) { return $a - $b; };\n  $desc = function($a,\
    \ $b) { return $b - $a; };\n  $oneCount = function($n) { return strlen(decbin($n))\
    \ - substr_count(decbin($n), '0'); };\n  $oneCountAsc = function($a, $b) use ($oneCount)\
    \ { return $oneCount($a) - $oneCount($b); };\n  usort($arr, $oneCountAsc);\n \
    \ $groups = [];\n  foreach ($arr as $n) {\n    $oneCount = $oneCount($n);\n  \
    \  if (!isset($groups[$oneCount])) {\n      $groups[$oneCount] = [];\n    }\n\
    \    $groups[$oneCount][] = $n;\n  }\n  foreach ($groups as $k => $g) {\n    usort($groups[$k],\
    \ $asc);\n  }\n  $result = [];\n  foreach ($groups as $g) {\n    $result = array_merge($result,\
    \ $g);\n  }\n  return $result;\n}", "  $length = count($arr);\n  $result = array();\n\
    \  for ($i = 0; $i < $length; $i++) {\n    $ones = decbin($arr[$i]);\n    $result[$ones][]\
    \ = $arr[$i];\n  }\n  ksort($result);\n  $result_join = array();\n  foreach ($result\
    \ as $key => $value) {\n    sort($value);\n    $result_join = array_merge($result_join,\
    \ $value);\n  }\n  return $result_join;\n}\n", "  $arr_b = array_map(function($e){\n\
    \    return decbin($e);\n  }, $arr);\n  $arr_n = array_map(function($e){\n   \
    \ return substr_count($e, '1');\n  }, $arr_b);\n  $arr_c = array_combine($arr_n,\
    \ $arr);\n  ksort($arr_c);\n  return array_values($arr_c);\n}\n", "  sort($arr);\n\
    \  usort($arr, function($a, $b) {\n    return decbin($a) <=> decbin($b);\n  });\n\
    \  return $arr;\n}\n", "  foreach ($arr as $k => $v) {\n    $c = 0;\n    $b =\
    \ decbin($v);\n    for ($i = 0; $i < strlen($b); $i++) {\n      if ($b[$i] ==\
    \ '1') {\n        $c++;\n      }\n    }\n    $s[$c][] = $v;\n  }\n  ksort($s);\n\
    \  foreach ($s as $k => $v) {\n    foreach ($v as $v2) {\n      $r[] = $v2;\n\
    \    }\n  }\n  return $r;\n}", "    usort($arr, function($a, $b) {\n        $aBinary\
    \ = decbin($a);\n        $bBinary = decbin($b);\n        $aOnes = substr_count($aBinary,\
    \ '1');\n        $bOnes = substr_count($bBinary, '1');\n        if ($aOnes > $bOnes)\
    \ {\n            return 1;\n        } elseif ($aOnes < $bOnes) {\n           \
    \ return -1;\n        } else {\n            return $a - $b;\n        }\n    });\n\
    \    return $arr;\n}", "    usort($arr, function($a, $b) {\n        $bin_a = decbin($a);\n\
    \        $bin_b = decbin($b);\n        $one_a = substr_count($bin_a, '1');\n \
    \       $one_b = substr_count($bin_b, '1');\n        if ($one_a < $one_b) {\n\
    \            return -1;\n        } elseif ($one_a > $one_b) {\n            return\
    \ 1;\n        } else {\n            if ($a < $b) {\n                return -1;\n\
    \            } elseif ($a > $b) {\n                return 1;\n            } else\
    \ {\n                return 0;\n            }\n        }\n    });\n    return\
    \ $arr;\n}\n", "    foreach ($arr as $index => $int) {\n        if ($int < 0)\
    \ {\n            continue;\n        }\n        $oneCount = substr_count(decbin($int),\
    \ '1');\n        $arr[$index] = [$oneCount, $int];\n    }\n    sort($arr);\n \
    \   foreach ($arr as $index => $int) {\n        $arr[$index] = $int[1];\n    }\n\
    \    return $arr;\n}\n", "    $arr = array_map(function($x) {\n        $x = str_split(decbin($x));\n\
    \        $x = array_map(function($z) { return $z == 1 ? 1 : 0; }, $x);\n     \
    \   return [\n            array_sum($x),\n            $x,\n            $x\n  \
    \      ];\n    }, $arr);\n    $arr = array_map(function($x) {\n        $x[1] =\
    \ array_filter($x[1], function($z) { return $z == 1; });\n        $x[1] = array_pad($x[1],\
    \ max(array_map(function($z) { return strlen($z); }, $x[2])), 0);\n        return\
    \ $x;\n    }, $arr);\n    usort($arr, function($a, $b) {\n        if ($a[0] ==\
    \ $b[0]) {\n            $a[2] = array_reverse($a[2]);\n            $b[2] = array_reverse($b[2]);\n\
    \            for ($i = 0; $i < count($a[2]); $i++) {\n                if ($a[2][$i]\
    \ > $b[2][$i]) {\n                    return 1;\n                } else if ($a[2][$i]\
    \ < $b[2][$i]) {\n                    return -1;\n                }\n        \
    \    }\n            return 0;\n        }\n        return $a[0] > $b[0] ? 1 : -1;\n\
    \    });\n    return array_map(function($x) {\n        return bindec(implode('',\
    \ $x[2]));\n    }, $arr);\n}\n", "  $sorted = [];\n  $completed = [];\n  foreach\
    \ ($arr as $item) {\n    $occurences = substr_count(decbin($item), '1');\n   \
    \ $sorted[$occurences][] = $item;\n  }\n  foreach ($sorted as $items) {\n    sort($items);\n\
    \    $completed = array_merge($completed, $items);\n  }\n  return $completed;\n\
    }\n", "    $sorted_arr = [];\n    $ones_arr = [];\n    foreach ($arr as $number)\
    \ {\n        $binary = decbin($number);\n        $ones = substr_count($binary,\
    \ '1');\n        $ones_arr[$number] = $ones;\n    }\n    $asc_ones_arr = array_unique($ones_arr);\n\
    \    asort($asc_ones_arr);\n    foreach ($asc_ones_arr as $key => $value) {\n\
    \        $asc_arr = array_keys($ones_arr, $value);\n        if (count($asc_arr)\
    \ > 1) {\n            sort($asc_arr);\n        }\n        $sorted_arr = array_merge($sorted_arr,\
    \ $asc_arr);\n    }\n    return $sorted_arr;\n}\n", "    $ones = [];\n    foreach\
    \ ($arr as $a) {\n        $ones[] = count(str_split(decbin($a)));\n    }\n   \
    \ array_multisort($ones, $arr);\n    return $arr;\n}\n", "  $num_arr = [];\n \
    \ $ones_arr = [];\n  for ($i = 0; $i < count($arr); $i++) {\n    $num_arr[$i]\
    \ = (int)$arr[$i];\n    $ones_arr[$i] = substr_count(decbin($arr[$i]), '1');\n\
    \  }\n  array_multisort($ones_arr, SORT_DESC, $num_arr, SORT_ASC, $arr);\n  return\
    \ $arr;\n}\n$arr = array(1, 5, 2, 3, 4);\nprint_r(sort_array($arr));\n ?>", " \
    \ usort($arr, function($a, $b) {\n    $x = str_split(decbin($a));\n    $y = str_split(decbin($b));\n\
    \    $a1 = array_sum($x);\n    $b1 = array_sum($y);\n    if ($a1 === $b1) {\n\
    \      return $a - $b;\n    }\n    return $a1 - $b1;\n  });\n  return $arr;\n\
    }\n", "    $base = [];\n    foreach ($arr as $key => $value) {\n        $ones\
    \ = 0;\n        $div = $value;\n        while ($div > 0) {\n            $ones\
    \ += $div % 2;\n            $div = floor($div / 2);\n        }\n        $base[$key]\
    \ = $ones;\n    }\n    asort($base);\n    $result = [];\n    foreach ($base as\
    \ $key => $value) {\n        $result[] = $arr[$key];\n    }\n    return $result;\n\
    }\n\n$answer = sort_array([1, 0, 2, 3, 4]);\necho \"Should return: [0, 1, 2, 3,\
    \ 4]\\n\";\necho \"Returned: \" . join(', ', $answer) . \"\\n\";\n$answer = sort_array([-2,\
    \ -3, -4, -5, -6]);\necho \"Should return: [-6, -5, -4, -3, -2]\\n\";\necho \"\
    Returned: \" . join(', ', $answer) . \"\\n\";\n$answer = sort_array([1, 0, 2,\
    \ 3, 4]);\necho \"Should return: [0, 1, 2, 3, 4]\\n\";\necho \"Returned: \" .\
    \ join(', ', $answer) . \"\\n\";\n$answer = sort_array([1, 5, 2, 3, 4]);\necho\
    \ \"Should return: [1, 2, 3, 4, 5]\\n\";\necho \"Returned: \" . join(', ', $answer)\
    \ . \"\\n\";\n$answer = sort_array([1, 2, 3, 4, 5]);\necho \"Should return: [1,\
    \ 2, 3, 4, 5]\\n\";\necho \"Returned: \" . join(', ', $answer) . \"\\n\";\n$answer\
    \ = sort_array([1, 2, 3, 4, 5]);\necho \"Should return: [1, 2, 3, 4, 5]\\n\";\n\
    echo \"Returned: \" . join(', ', $answer) . \"\\n\";\n$answer = sort_array([1,\
    \ 1, 2, 3, 4]);\necho \"Should return: [1,", "    $temp = [];\n    $cnt = 0;\n\
    \    foreach ($arr as $key => $value) {\n        $temp[$key] = decbin($value);\n\
    \        if (strlen($temp[$key]) < 32) {\n            $temp[$key] = sprintf(\"\
    %032s\", $temp[$key]);\n        }\n        $cnt = substr_count($temp[$key], '1');\n\
    \        $temp[$key] = $cnt . $temp[$key];\n    }\n    rsort($temp);\n    $temp\
    \ = array_map(function ($item) {\n        return bindec(substr($item, 32));\n\
    \    }, $temp);\n    return $temp;\n}\n\nprint_r(sort_array([1, 5, 2, 3, 4]));\n\
    print_r(sort_array([-2, -3, -4, -5, -6]));\nprint_r(sort_array([1, 0, 2, 3, 4]));",
  "    $tmp = [];\n    $result = [];\n    foreach ($arr as $num) {\n        $tmp[decbin($num)]\
    \ = $num;\n    }\n    ksort($tmp);\n    foreach ($tmp as $key => $value) {\n \
    \       $result[] = $value;\n    }\n    return $result;\n}\n", "  $counts = [];\n\
    \  $ones = [];\n  foreach ($arr as $num) {\n    if (!$counts[$num]) {\n      $counts[$num]\
    \ = substr_count(decbin($num), '1');\n      $ones[$counts[$num]][] = $num;\n \
    \   }\n  }\n  foreach ($ones as $k => $v) {\n    asort($ones[$k]);\n  }\n  foreach\
    \ ($counts as $k => $v) {\n    $counts[$k] = array_shift($ones[$v]);\n  }\n  foreach\
    \ ($arr as $k => $v) {\n    $arr[$k] = $counts[$v];\n  }\n  return $arr;\n}\n",
  "  // your code here\n  $binaryArr = [];\n  foreach ($arr as $key => $value) {\n\
    \    $binaryArr[$key] = decbin($value);\n  }\n  $oneCounter = [];\n  foreach ($binaryArr\
    \ as $key => $value) {\n    $oneCounter[$key] = substr_count($value, '1');\n \
    \ }\n  asort($oneCounter);\n  $oneArr = [];\n  foreach ($oneCounter as $key =>\
    \ $value) {\n    $oneArr[] = $arr[$key];\n  }\n  sort($oneArr);\n  $result = [];\n\
    \  foreach ($oneCounter as $key => $value) {\n    $result[] = array_shift($oneArr);\n\
    \  }\n  return $result;\n}\n", "  // number of 1's -> value\n  $hm = [];\n  foreach\
    \ ($arr as $n) {\n    $bin = decbin($n);\n    $count = 0;\n    for ($i = 0; $i\
    \ < strlen($bin); $i++) {\n      if ($bin[$i] == 1) {\n        $count++;\n   \
    \   }\n    }\n    $hm[$count][] = $n;\n  }\n  ksort($hm);\n  $ans = [];\n  foreach\
    \ ($hm as $count => $ls) {\n    sort($ls);\n    foreach ($ls as $n) {\n      $ans[]\
    \ = $n;\n    }\n  }\n  return $ans;\n}\n\necho \"sort_array([1, 5, 2, 3, 4]) =\
    \ \";\nvar_dump(sort_array([1, 5, 2, 3, 4]));\n\necho \"sort_array([-2, -3, -4,\
    \ -5, -6]) = \";\nvar_dump(sort_array([-2, -3, -4, -5, -6]));\n\necho \"sort_array([1,\
    \ 0, 2, 3, 4]) = \";\nvar_dump(sort_array([1, 0, 2, 3, 4]));\n\necho \"sort_array([1,\
    \ 10, 100, 1000, 10000]) = \";\nvar_dump(sort_array([1, 10, 100, 1000, 10000]));\n\
    \necho \"sort_array([-1, -10, -100, -1000, -10000]) = \";\nvar_dump(sort_array([-1,\
    \ -10, -100, -1000, -10000]));\n", "  foreach ($arr as $key => $val) {\n    $arr[$key]\
    \ = [$val, bindec(decbin($val))];\n  }\n  usort($arr, function($a, $b) {\n   \
    \ if ($a[1] > $b[1]) return 1;\n    if ($a[1] < $b[1]) return -1;\n    if ($a[0]\
    \ > $b[0]) return 1;\n    if ($a[0] < $b[0]) return -1;\n    return 0;\n  });\n\
    \  foreach ($arr as $key => $val) {\n    $arr[$key] = $val[0];\n  }\n  return\
    \ $arr;\n}", "    foreach ($arr as $key => $value) {\n        $count = substr_count(decbin($value),\
    \ '1');\n        $tmp[$count][] = $value;\n    }\n    ksort($tmp);\n    $i = 0;\n\
    \    foreach ($tmp as $key => $value) {\n        $arr[$i] = $value[0];\n     \
    \   unset($value[0]);\n        foreach ($value as $val) {\n            $i++;\n\
    \            $arr[$i] = $val;\n        }\n        $i++;\n    }\n    return $arr;\n\
    }\n", "  $ones = [];\n  $zeros = [];\n  foreach ($arr as $k => $v) {\n    if ($v\
    \ >= 0) {\n      if (decbin($v) == 1) {\n        $ones[] = $v;\n      } else {\n\
    \        $zeros[] = $v;\n      }\n    } else {\n      $zeros[] = $v;\n    }\n\
    \  }\n  sort($ones);\n  sort($zeros);\n  return array_merge($ones, $zeros);\n}",
  "  if (empty($arr)) {\n    return [];\n  }\n  if (!is_array($arr)) {\n    return\
    \ [];\n  }\n  $arr = array_map(function($v) {\n    return ['binary' => decbin($v),\
    \ 'value' => $v];\n  }, $arr);\n  usort($arr, function($a, $b) {\n    $count1\
    \ = count_ones($a['binary']);\n    $count2 = count_ones($b['binary']);\n    if\
    \ ($count1 === $count2) {\n      return $a['value'] - $b['value'];\n    }\n  \
    \  return $count1 - $count2;\n  });\n  return array_map(function($v) {\n    return\
    \ $v['value'];\n  }, $arr);\n}\n", "  $arr = array_map('decbin', $arr);\n  usort($arr,\
    \ 'sortBy1');\n  $arr = array_map('bindec', $arr);\n  return $arr;\n}\n", "  \
    \  $arr = array_map(function($num) {\n        return decbin($num);\n    }, $arr);\n\
    \    $ones = [];\n    foreach ($arr as $value) {\n        $n = substr_count($value,\
    \ '1');\n        $ones[$n][] = $value;\n    }\n    ksort($ones);\n    return array_map(function($row)\
    \ {\n        sort($row);\n        return array_map(function($value) {\n      \
    \      return bindec($value);\n        }, $row);\n    }, $ones);\n}\necho '<pre>';\
    \ print_r(sort_array([1,5,2,3,4])); echo '</pre>';", "    $ones = [];\n    foreach\
    \ ($arr as $value) {\n        $ones[] = substr_count(decbin($value), '1');\n \
    \   }\n    array_multisort($ones, $arr);\n    return $arr;\n}", "  if (empty($arr))\
    \ return [];\n  $sorted = array_map(function($e) {\n    return [decbin($e), $e];\n\
    \  }, $arr);\n  usort($sorted, function($a, $b) {\n    $count_a = substr_count($a[0],\
    \ \"1\");\n    $count_b = substr_count($b[0], \"1\");\n    if ($count_a == $count_b)\
    \ {\n      return $a[1] - $b[1];\n    }\n    return $count_a - $count_b;\n  });\n\
    \  return array_map(function($e) {\n    return $e[1];\n  }, $sorted);\n}\n ?>",
  "    $arr = array_map(function($num) {\n        return decbin($num);\n    }, $arr);\n\
    \    usort($arr, function($a, $b) {\n        $onesA = countOnes($a);\n       \
    \ $onesB = countOnes($b);\n        if ($onesA > $onesB) {\n            return\
    \ 1;\n        } else if ($onesA < $onesB) {\n            return -1;\n        }\
    \ else {\n            if ($a > $b) {\n                return 1;\n            }\
    \ else if ($a < $b) {\n                return -1;\n            } else {\n    \
    \            return 0;\n            }\n        }\n    });\n    $arr = array_map(function($bin)\
    \ {\n        return bindec($bin);\n    }, $arr);\n    return $arr;\n}\n", "  $sorted_arr\
    \ = [];\n  foreach ($arr as $value) {\n    $sorted_arr[$value] = decbin($value);\n\
    \  }\n  asort($sorted_arr);\n  $final_arr = [];\n  foreach ($sorted_arr as $key\
    \ => $value) {\n    $final_arr[] = $key;\n  }\n  return $final_arr;\n}", "  $new_arr\
    \ = [];\n  foreach ($arr as $key => $value) {\n    $new_arr[$key] = substr_count(decbin($value),\
    \ 1);\n  }\n  asort($new_arr);\n  foreach ($new_arr as $key => $value) {\n   \
    \ $new_arr[$key] = $arr[$key];\n  }\n  return $new_arr;\n}", "  $sortOne = [];\n\
    \  $sortZero = [];\n  foreach ($arr as $key => $value) {\n    if ($value >= 0)\
    \ {\n      $sortOne[$key] = decbin($value);\n    } else {\n      $sortZero[$key]\
    \ = decbin($value);\n    }\n  }\n  arsort($sortOne);\n  asort($sortZero);\n  $sortOneFinal\
    \ = [];\n  $sortZeroFinal = [];\n  foreach ($sortOne as $key => $value) {\n  \
    \  $sortOneFinal[$key] = bindec($value);\n  }\n  foreach ($sortZero as $key =>\
    \ $value) {\n    $sortZeroFinal[$key] = bindec($value);\n  }\n  print_r($sortOneFinal);\n\
    \  print_r($sortZeroFinal);\n}\nsort_array([1, 5, 2, 3, 4]);\nsort_array([-2,\
    \ -3, -4, -5, -6]);\nsort_array([1, 0, 2, 3, 4]);", "  $newarr = array();\n  for\
    \ ($i = 0; $i < count($arr); $i++) {\n    if ($arr[$i] > 0) {\n      $newarr[$i]\
    \ = decbin($arr[$i]);\n    } else {\n      $newarr[$i] = $arr[$i];\n    }\n  }\n\
    \  $sorted = array();\n  for ($i = 0; $i < count($newarr); $i++) {\n    $sorted[$i]\
    \ = $i;\n  }\n  for ($i = 0; $i < count($newarr); $i++) {\n    for ($j = 0; $j\
    \ < count($newarr); $j++) {\n      if (substr_count($newarr[$sorted[$i]], '1')\
    \ > substr_count($newarr[$sorted[$j]], '1')) {\n        $temp = $sorted[$i];\n\
    \        $sorted[$i] = $sorted[$j];\n        $sorted[$j] = $temp;\n      } elseif\
    \ (substr_count($newarr[$sorted[$i]], '1') == substr_count($newarr[$sorted[$j]],\
    \ '1')) {\n        if ($newarr[$sorted[$i]] > $newarr[$sorted[$j]]) {\n      \
    \    $temp = $sorted[$i];\n          $sorted[$i] = $sorted[$j];\n          $sorted[$j]\
    \ = $temp;\n        }\n      }\n    }\n  }\n  for ($i = 0; $i < count($newarr);\
    \ $i++) {\n    if ($newarr[$sorted[$i]] < 0) {\n      $newarr[$sorted[$i]] = $newarr[$sorted[$i]];\n\
    \    } else {\n      $newarr[$sorted[$i]] = bindec($newarr[$sorted[$i]]);\n  \
    \  }\n  }\n  return $newarr;\n}\n", "  $sortedArray = [];\n  for ($i = 0; $i <\
    \ sizeof($arr); $i++) {\n    if ($arr[$i] < 0) {\n      array_push($sortedArray,\
    \ $arr[$i]);\n    }\n  }\n  for ($i = 0; $i < sizeof($arr); $i++) {\n    if ($arr[$i]\
    \ > 0) {\n      array_push($sortedArray, $arr[$i]);\n    }\n  }\n  for ($i = 0;\
    \ $i < sizeof($sortedArray); $i++) {\n    if ($sortedArray[$i] < 0) {\n      $sortedArray[$i]\
    \ = $sortedArray[$i] * -1;\n    }\n  }\n  return $sortedArray;\n}\necho sort_array([-2,\
    \ -3, -4, -5, -6]), \"\\n\";\necho sort_array([1, 5, 2, 3, 4]), \"\\n\";\necho\
    \ sort_array([1, 0, 2, 3, 4]), \"\\n\";", "  usort($arr, function($a, $b) {\n\
    \    $bin_a = decbin($a);\n    $bin_b = decbin($b);\n    if (substr_count($bin_a,\
    \ '1') == substr_count($bin_b, '1')) {\n      return $a > $b;\n    }\n    return\
    \ substr_count($bin_a, '1') > substr_count($bin_b, '1');\n  });\n  return $arr;\n\
    }\n\n$arr = array(1, 5, 2, 3, 4);\n$arr = array(-2, -3, -4, -5, -6);\n$arr = array(1,\
    \ 0, 2, 3, 4);\n\nprint_r(sort_array($arr));", "  $new_arr = [];\n  foreach ($arr\
    \ as $num) {\n    $bin = decbin($num);\n    $count = strlen(preg_replace('/(0+)/i',\
    \ '', $bin));\n    $new_arr[$count][] = $num;\n  }\n  ksort($new_arr);\n  $result\
    \ = [];\n  foreach ($new_arr as $bin_count => $nums) {\n    foreach ($nums as\
    \ $num) {\n      $result[] = $num;\n    }\n  }\n  return $result;\n}\necho '<pre>sort_array([1,\
    \ 0, 2, 3, 4]) === [0, 1, 2, 3, 4]</pre>';\nvar_dump(sort_array([1, 0, 2, 3, 4])\
    \ === [0, 1, 2, 3, 4]);\necho '<pre>sort_array([1, 5, 2, 3, 4]) === [1, 2, 3,\
    \ 4, 5]</pre>';\nvar_dump(sort_array([1, 5, 2, 3, 4]) === [1, 2, 3, 4, 5]);\n\
    echo '<pre>sort_array([-2, -3, -4, -5, -6]) === [-6, -5, -4, -3, -2]</pre>';\n\
    var_dump(sort_array([-2, -3, -4, -5, -6]) === [-6, -5, -4, -3, -2]);\necho '<pre>sort_array([-5,\
    \ -3, -1, 0, 1, 5]) === [-5, -3, -1, 0, 1, 5]</pre>';\nvar_dump(sort_array([-5,\
    \ -3, -1, 0, 1, 5]) === [-5, -3, -1, 0, 1, 5]);\necho '<pre>sort_array([-5, -3,\
    \ -1, 0, 1, 5, 5]) === [-5, -3, -1, 0, 1, 5, 5]</pre>';\nvar_dump(sort_array([-5,\
    \ -3, -1, 0", "  $binary = $arr;\n  // get all binary values\n  for ($i = 0; $i\
    \ < count($binary); $i++) {\n    $binary[$i] = decbin($binary[$i]);\n  }\n  //\
    \ echo '<pre>';\n  // var_dump($binary);\n  // echo '</pre>';\n  // sort binary\
    \ values\n  $sort = $binary;\n  for ($i = 0; $i < count($sort); $i++) {\n    $sort[$i]\
    \ = substr_count($sort[$i], '1');\n  }\n  // echo '<pre>';\n  // var_dump($sort);\n\
    \  // echo '</pre>';\n  // sort original values\n  for ($i = 0; $i < count($sort);\
    \ $i++) {\n    for ($j = 0; $j < count($sort) - 1; $j++) {\n      if ($sort[$j]\
    \ > $sort[$j + 1]) {\n        $sort[$j] += $sort[$j + 1];\n        $sort[$j +\
    \ 1] = $sort[$j] - $sort[$j + 1];\n        $sort[$j] -= $sort[$j + 1];\n     \
    \   $arr[$j] += $arr[$j + 1];\n        $arr[$j + 1] = $arr[$j] - $arr[$j + 1];\n\
    \        $arr[$j] -= $arr[$j + 1];\n      }\n    }\n  }\n  return $arr;\n}\n",
  "    $arr = array_map(function($n) {\n        return [$n, decbin($n)];\n    }, $arr);\n\
    \    foreach ($arr as &$value) {\n        $value[1] = substr_count($value[1],\
    \ \"1\");\n    }\n    usort($arr, function($a, $b) {\n        return $a[1] > $b[1]\
    \ ? 1 : -1;\n    });\n    $arr = array_map(function($n) {\n        return $n[0];\n\
    \    }, $arr);\n    return $arr;\n}", "  $sort_helper = function($a, $b) {\n \
    \   if (substr_count(decbin($a), '1') === substr_count(decbin($b), '1')) {\n \
    \     return $a - $b;\n    }\n    return substr_count(decbin($a), '1') - substr_count(decbin($b),\
    \ '1');\n  };\n  usort($arr, $sort_helper);\n  return $arr;\n}", "    foreach\
    \ ($arr as $key => $num) {\n        $ones[$key] = substr_count(decbin($num), '1');\n\
    \    }\n    array_multisort($ones, SORT_ASC, $arr);\n    return $arr;\n}\n\nsort_array([1,\
    \ 0, 2, 3, 4]);", "    for ($i = 0; $i < count($arr); $i++) {\n        for ($j\
    \ = 0; $j < count($arr); $j++) {\n            if ($arr[$i] < 0 && $arr[$j] < 0)\
    \ {\n                if ($arr[$i] > $arr[$j]) {\n                    $temp = $arr[$i];\n\
    \                    $arr[$i] = $arr[$j];\n                    $arr[$j] = $temp;\n\
    \                }\n            } elseif ($arr[$i] > 0 && $arr[$j] > 0) {\n  \
    \              $ones1 = count(preg_split('//', decbin($arr[$i]), -1, PREG_SPLIT_NO_EMPTY));\n\
    \                $ones2 = count(preg_split('//', decbin($arr[$j]), -1, PREG_SPLIT_NO_EMPTY));\n\
    \                if ($ones1 > $ones2) {\n                    $temp = $arr[$i];\n\
    \                    $arr[$i] = $arr[$j];\n                    $arr[$j] = $temp;\n\
    \                } elseif ($ones1 == $ones2) {\n                    if ($arr[$i]\
    \ > $arr[$j]) {\n                        $temp = $arr[$i];\n                 \
    \       $arr[$i] = $arr[$j];\n                        $arr[$j] = $temp;\n    \
    \                }\n                }\n            }\n        }\n    }\n    return\
    \ $arr;\n}\n\necho '<pre>';\nvar_dump(sort_array([1, 5, 2, 3, 4]));\nvar_dump(sort_array([-2,\
    \ -3, -4, -5, -6]));\nvar_dump(sort_array([1, 0, 2, 3, 4]));\necho '</pre>';",
  "    return $arr;\n}\n", "    $arr_with_bin = array_map(function($a) {\n       \
    \ return [$a, decbin($a)];\n    }, $arr);\n    $arr_with_bin_and_ones = array_map(function($a)\
    \ {\n        return [$a[0], $a[1], substr_count($a[1], '1')];\n    }, $arr_with_bin);\n\
    \    usort($arr_with_bin_and_ones, function($a, $b) {\n        return $a[2] ==\
    \ $b[2] ? $a[0] > $b[0] : $a[2] > $b[2];\n    });\n    return array_map(function($a)\
    \ {\n        return $a[0];\n    }, $arr_with_bin_and_ones);\n}\n\nprint_r(sort_array([1,\
    \ 5, 2, 3, 4]));\nprint_r(sort_array([-2, -3, -4, -5, -6]));\nprint_r(sort_array([1,\
    \ 0, 2, 3, 4]));", "  // $array = str_split(decbin($arr[0]));\n  // $count = count($array);\n\
    \  // $count = count($array);\n  // foreach ($array as $k => $v) {\n  //   if\
    \ ($v === '1') {\n  //     $count -= 1;\n  //   }\n  // }\n  // $array = str_split(decbin($arr[1]));\n\
    \  // $count2 = count($array);\n  // foreach ($array as $k => $v) {\n  //   if\
    \ ($v === '1') {\n  //     $count2 -= 1;\n  //   }\n  // }\n  // if ($count ===\
    \ $count2) {\n  //   if ($arr[0] > $arr[1]) {\n  //     $temp = $arr[0];\n  //\
    \     $arr[0] = $arr[1];\n  //     $arr[1] = $temp;\n  //   }\n  // } elseif ($count\
    \ < $count2) {\n  //   $temp = $arr[0];\n  //   $arr[0] = $arr[1];\n  //   $arr[1]\
    \ = $temp;\n  // }\n  // $array = str_split(decbin($arr[2]));\n  // $count = count($array);\n\
    \  // foreach ($array as $k => $v) {\n  //   if ($v === '1') {\n  //     $count\
    \ -= 1;\n  //   }\n  // }\n  // $array = str_split(decbin($arr[1]));\n  // $count2\
    \ = count($array);\n  // foreach ($array as $k => $v) {\n  //   if ($v === '1')\
    \ {\n  //     $count2 -= 1;\n  //   }\n  // }\n  // if ($count === $count2) {\n\
    \  //   if ($arr[2] > $arr[1]) {\n  //     $temp = $arr[2];\n  //     $arr[2]\
    \ = $arr[1];\n  //     $arr[1] = $temp;\n  //   }", "  usort($arr, function($a,\
    \ $b) {\n    $aones = substr_count(decbin($a), '1');\n    $bones = substr_count(decbin($b),\
    \ '1');\n    if ($aones == $bones) {\n      return $a < $b ? -1 : 1;\n    }\n\
    \    return $aones < $bones ? -1 : 1;\n  });\n  return $arr;\n}", "    foreach\
    \ ($arr as $key => $value) {\n        $bin = decbin($value);\n        $ones =\
    \ substr_count($bin, '1');\n        $result[$key] = [$ones, $value];\n    }\n\
    \    usort($result, function($a, $b) {\n        return ($a[0] == $b[0]) ? ($a[1]\
    \ > $b[1]) : ($a[0] > $b[0]);\n    });\n    foreach ($result as $key => $value)\
    \ {\n        $arr[$key] = $value[1];\n    }\n    return $arr;\n}", "    foreach\
    \ ($arr as $key => $number) {\n        $ones = substr_count(decbin($number), '1');\n\
    \        $res[$key] = $ones.$number;\n    }\n    sort($res);\n    foreach ($res\
    \ as $key => $number) {\n        $res[$key] = substr($number, 1);\n    }\n   \
    \ return $res;\n}\n\nsort_array([1, 5, 2, 3, 4]); // [1, 2, 3, 4, 5]\nsort_array([-2,\
    \ -3, -4, -5, -6]); // [-6, -5, -4, -3, -2]\nsort_array([1, 0, 2, 3, 4]); // [0,\
    \ 1, 2, 3, 4]", "  usort($arr, function($a, $b) {\n    $a = decbin($a);\n    $b\
    \ = decbin($b);\n    $ones = array_sum(str_split($a)) <=> array_sum(str_split($b));\n\
    \    if ($ones !== 0) {\n      return $ones;\n    }\n    return $a <=> $b;\n \
    \ });\n  return $arr;\n}", "  $arr=array_map(function($num){return decbin($num);},$arr);\n\
    \  asort($arr);\n  $arr=array_keys($arr);\n  for($i=0;$i<count($arr);$i++){\n\
    \    $arr[$i]=bindec($arr[$i]);\n  }\n  return $arr;\n}", "    $n = count($arr);\n\
    \    for ($i = 0; $i < $n; $i++) {\n        for ($j = $i + 1; $j < $n; $j++) {\n\
    \            $a = decbin($arr[$i]);\n            $b = decbin($arr[$j]);\n    \
    \        $x = substr_count($a, '1');\n            $y = substr_count($b, '1');\n\
    \            if ($x == $y) {\n                if ($arr[$i] > $arr[$j]) {\n   \
    \                 $temp = $arr[$i];\n                    $arr[$i] = $arr[$j];\n\
    \                    $arr[$j] = $temp;\n                }\n            } else\
    \ if ($x > $y) {\n                $temp = $arr[$i];\n                $arr[$i]\
    \ = $arr[$j];\n                $arr[$j] = $temp;\n            }\n        }\n \
    \   }\n    return $arr;\n}", "    $max_ones = 0;\n    foreach ($arr as $number)\
    \ {\n        $bin_number = decbin($number);\n        $number_of_ones = substr_count($bin_number,\
    \ \"1\");\n        if ($number_of_ones > $max_ones) {\n            $max_ones =\
    \ $number_of_ones;\n        }\n    }\n    $sort_arr = [];\n    $sort_arr_zero\
    \ = [];\n    for ($i = 0; $i <= $max_ones; $i++) {\n        foreach ($arr as $number)\
    \ {\n            $bin_number = decbin($number);\n            $number_of_ones =\
    \ substr_count($bin_number, \"1\");\n            if ($number_of_ones == $i) {\n\
    \                if ($number < 0) {\n                    $sort_arr_zero[] = $number;\n\
    \                } else {\n                    $sort_arr[] = $number;\n      \
    \          }\n            }\n        }\n    }\n    return array_merge($sort_arr_zero,\
    \ $sort_arr);\n}\nsort_array([1, 0, 2, 3, 4]);", "  $result = [];\n  foreach ($arr\
    \ as $key => $value) {\n    if($value < 0) {\n      $result[$key] = $value;\n\
    \    } else {\n      $result[decbin($value)] = $value;\n    }\n  }\n  ksort($result);\n\
    \  $result = array_values($result);\n  return $result;\n}\n", "  $ones = [];\n\
    \  $zeros = [];\n  foreach ($arr as $v) {\n    if ($v < 0) {\n      $zeros[] =\
    \ $v;\n    } else {\n      $ones[] = $v;\n    }\n  }\n  array_multisort(array_map('decbin',\
    \ $ones), SORT_ASC, SORT_NUMERIC, $ones);\n  return array_merge($ones, $zeros);\n\
    }\n\nsort_array([1, 5, 2, 3, 4]);\nsort_array([-2, -3, -4, -5, -6]);\nsort_array([1,\
    \ 0, 2, 3, 4]);", "  // your code\n}", "  $decimal = [];\n  $result = [];\n  foreach\
    \ ($arr as $key => $value) {\n    $decimal[$key] = decbin($value);\n  }\n  foreach\
    \ ($decimal as $key => $value) {\n    $result[$key] = substr_count($value, '1');\n\
    \  }\n  array_multisort($result, SORT_ASC, $arr);\n  return $arr;\n}\nsort_array([1,\
    \ 5, 2, 3, 4]);\nsort_array([-2, -3, -4, -5, -6]);\nsort_array([1, 0, 2, 3, 4]);",
  "  $bins = [];\n  $sorted = [];\n  foreach ($arr as $value) {\n    $bin = decbin($value);\n\
    \    $ones = substr_count($bin, \"1\");\n    $bins[$ones][] = $value;\n  }\n \
    \ for ($i = 0; $i < count($bins); $i++) {\n    $bins[$i] = sort_array_helper($bins[$i]);\n\
    \    $sorted = array_merge($sorted, $bins[$i]);\n  }\n  return $sorted;\n}\n",
  "    foreach ($arr as $num) {\n        $dec[] = $num;\n        $bin[] = str_pad(decbin($num),\
    \ 16, \"0\", STR_PAD_LEFT);\n    }\n    array_multisort($bin, SORT_ASC, $dec,\
    \ SORT_ASC, $arr);\n    return $arr;\n}\n", "  for ($i = 0; $i < count($arr);\
    \ $i++) {\n    for ($j = 0; $j < count($arr); $j++) {\n      if (decbin($arr[$i])\
    \ == decbin($arr[$j])) {\n        if ($arr[$i] < $arr[$j]) {\n          $num =\
    \ $arr[$i];\n          $arr[$i] = $arr[$j];\n          $arr[$j] = $num;\n    \
    \    }\n      }\n      if (substr_count(decbin($arr[$i]), '1') < substr_count(decbin($arr[$j]),\
    \ '1')) {\n        $num = $arr[$i];\n        $arr[$i] = $arr[$j];\n        $arr[$j]\
    \ = $num;\n      }\n    }\n  }\n  return $arr;\n}\necho implode(', ', sort_array([-2,\
    \ -3, -4, -5, -6]));", "    $bin_arr = array_map(function($val) {\n        return\
    \ decbin($val);\n    }, $arr);\n    $ones_arr = array_map(function($val) {\n \
    \       return substr_count($val, '1');\n    }, $bin_arr);\n    array_multisort($ones_arr,\
    \ SORT_ASC, $arr);\n    return $arr;\n}\n", "  $arr = array_map(function($v) {\n\
    \    return $v > 0 ? decbin($v) : $v;\n  }, $arr);\n  uasort($arr, function($a,\
    \ $b) {\n    if ($a == $b) {\n      return 0;\n    }\n    if (is_string($a) &&\
    \ is_string($b)) {\n      $aOnes = substr_count($a, '1');\n      $bOnes = substr_count($b,\
    \ '1');\n      if ($aOnes == $bOnes) {\n        return $a > $b ? 1 : -1;\n   \
    \   }\n      return $aOnes > $bOnes ? 1 : -1;\n    }\n    return $a > $b ? 1 :\
    \ -1;\n  });\n  return array_map(function($v) {\n    return is_string($v) ? bindec($v)\
    \ : $v;\n  }, $arr);\n}", "    foreach ($arr as $key => $value) {\n        $decimal\
    \ = $value;\n        $binary = decbin($value);\n        $count = substr_count($binary,\
    \ '1');\n        $new_arr[$count][] = $decimal;\n    }\n    ksort($new_arr);\n\
    \    foreach ($new_arr as $key => $value) {\n        rsort($value);\n        $new_arr2[$key]\
    \ = $value;\n    }\n    return flatten_array($new_arr2);\n}", "  $ones = array();\n\
    \  $bin = array();\n  $full = array();\n  foreach ($arr as $num) {\n    $bin[]\
    \ = decbin($num);\n    $ones[] = substr_count($bin[count($bin) - 1], \"1\");\n\
    \    $full[] = $num;\n  }\n  array_multisort($ones, $full);\n  return $full;\n\
    }\n ?>", "  $ones = [];\n  $zeros = [];\n  $nums = [];\n  foreach ($arr as $value)\
    \ {\n    if ($value < 0) {\n      array_push($nums, $value);\n    } else {\n \
    \     $total = substr_count(decbin($value), \"1\");\n      $ones[$total][] = $value;\n\
    \    }\n  }\n  foreach ($ones as $value) {\n    $zeros = array_merge($zeros, $value);\n\
    \  }\n  sort($zeros);\n  sort($nums);\n  return array_merge($zeros, $nums);\n\
    }\n", "    // Convert ints to binary string and then to integer\n    $bin_arr\
    \ = array_map(function($v) {\n        $bin = decbin($v);\n        $int = bindec($bin);\n\
    \        return [$int, $v];\n    }, $arr);\n\n    // Sort by number of bits, then\
    \ by initial value\n    usort($bin_arr, function($a, $b) {\n        if ($a[0]\
    \ == $b[0]) {\n            return $a[1] - $b[1];\n        }\n        return $a[0]\
    \ - $b[0];\n    });\n\n    // Return sorted values\n    return array_map(function($v)\
    \ {\n        return $v[1];\n    }, $bin_arr);\n}\n\nprint_r(sort_array([1, 0,\
    \ 2, 3, 4]));", "  $map = [];\n  foreach ($arr as $key => $value) {\n    $map[decbin($value)]\
    \ = $value;\n  }\n  ksort($map);\n  return array_values($map);\n}\n", "    $newarr\
    \ = array();\n    foreach ($arr as $value) {\n        $newarr[decbin($value)]\
    \ = $value;\n    }\n    ksort($newarr);\n    return array_values($newarr);\n}\n\
    \nprint_r(sort_array([1, 2, 3, 4, 5]));\nprint_r(sort_array([0, 1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10]));\nprint_r(sort_array([0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1, 1", "    $ones = [];\n    $zeros = [];\n    foreach ($arr as $int) {\n\
    \        $digit = $int >= 0 ? substr_count(decbin($int), \"1\") : substr_count(decbin(abs($int)),\
    \ \"1\");\n        if ($digit === 0) {\n            $zeros[] = $int;\n       \
    \ } else {\n            $ones[$digit][] = $int;\n        }\n    }\n    ksort($ones);\n\
    \    $answer = [];\n    foreach ($ones as $vals) {\n        sort($vals);\n   \
    \     $answer = array_merge($answer, $vals);\n    }\n    return array_merge($answer,\
    \ $zeros);\n}\n\nvar_dump(sort_array([]));\nvar_dump(sort_array([1, 5, 2, 3, 4]));\n\
    var_dump(sort_array([-2, -3, -4, -5, -6]));\nvar_dump(sort_array([1, 0, 2, 3,\
    \ 4]));\nvar_dump(sort_array([-2, 1, -5, -3, 4]));\nvar_dump(sort_array([-2, -3,\
    \ -4, -5, -6, 1, 0, 2, 3, 4]));\nvar_dump(sort_array([-2, -3, -4, -5, -6, 1, 0,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]));\nvar_dump(sort_array([-2, -3, -4, -5, -6, 1,\
    \ 0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,\
    \ 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41,\
    \ 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60,\
    \ 61, 62, 63, 64, 65, 66, 67, 68,", "  $sorted = array();\n  $sorted_ones = array();\n\
    \  foreach ($arr as $key => $number) {\n    $binary = decbin($number);\n    $count\
    \ = substr_count($binary, '1');\n    $sorted_ones[$count][] = $number;\n  }\n\
    \  ksort($sorted_ones);\n  foreach ($sorted_ones as $key => $value) {\n    $sorted\
    \ = array_merge($sorted, $value);\n  }\n  return $sorted;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
