language: php
name: HumanEval_148_bf
results:
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $array = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $arraIndex = [];\n    foreach ($array as $key => $value) {\n        if ($value\
    \ == $planet1) {\n            $arraIndex[] = $key;\n        }\n        if ($value\
    \ == $planet2) {\n            $arraIndex[] = $key;\n        }\n    }\n    $arrSize\
    \ = count($arraIndex);\n    if ($arrSize == 2) {\n        if ($arraIndex[0] >\
    \ $arraIndex[1]) {\n            $tmp = $arraIndex[0];\n            $arraIndex[0]\
    \ = $arraIndex[1];\n            $arraIndex[1] = $tmp;\n        }\n        $newArr\
    \ = [];\n        for ($i = $arraIndex[0] + 1; $i < $arraIndex[1]; $i++) {\n  \
    \          $newArr[] = $array[$i];\n        }\n        if (count($newArr) == 1)\
    \ {\n            return $newArr[0];\n        } else {\n            return $newArr;\n\
    \        }\n    } else {\n        return false;\n    }\n}\necho \"<pre>\";\nprint_r(bf(\"\
    Earth\", \"Mercury\"));\necho \"</pre>\";\nfunction candidate(...$args) {\n  \
    \  return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\"\
    , \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Venus</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq_ysin7k.php:58\n\
    Stack trace:\n#0 /tmp/tmpq_ysin7k.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpq_ysin7k.php\
    \ on line 58\n"
  timestamp: 1659823842
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n  $planets = array(\n    \"Mercury\",\n\
    \    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\"\
    ,\n    \"Uranus\",\n    \"Neptune\"\n  );\n  if (!in_array($planet1, $planets)\
    \ || !in_array($planet2, $planets)) {\n    return array();\n  }\n  $firstPlanet\
    \ = array_search($planet1, $planets);\n  $secondPlanet = array_search($planet2,\
    \ $planets);\n  if ($firstPlanet > $secondPlanet) {\n    $temp = $firstPlanet;\n\
    \    $firstPlanet = $secondPlanet;\n    $secondPlanet = $temp;\n  }\n  $result\
    \ = array();\n  for ($i = $firstPlanet + 1; $i < $secondPlanet; $i++) {\n    $result[]\
    \ = $planets[$i];\n  }\n  return $result;\n}\n\nprint_r(bf(\"Jupiter\", \"Neptune\"\
    ));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\necho \"<br>\";\nfunction candidate(...$args) {\n   \
    \ return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\"\
    , \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n<br>"
  timestamp: 1659823842
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\t\
    if(!in_array($planet1, $planets) || !in_array($planet2, $planets)) {\n\t\treturn\
    \ \"Incorrect Planet Name\";\n\t}\n\t$in1 = array_search($planet1, $planets);\n\
    \t$in2 = array_search($planet2, $planets);\n\t$left = min($in1, $in2);\n\t$right\
    \ = max($in1, $in2);\n\treturn array_slice($planets, $left + 1, $right - $left\
    \ - 1);\n}\n\necho bf(\"Jupiter\", \"Neptune\");\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmphoi_kegp.php on line 30\n\
    Array\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphoi_kegp.php:40\n\
    Stack trace:\n#0 /tmp/tmphoi_kegp.php(45): test()\n#1 {main}\n  thrown in /tmp/tmphoi_kegp.php\
    \ on line 40\n"
  timestamp: 1659823842
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $orbits = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $index1 = array_search($planet1, $orbits);\n    $index2 = array_search($planet2,\
    \ $orbits);\n    $returnArray = array();\n    if ($index1 < $index2) {\n     \
    \   for ($i = $index1 + 1; $i < $index2; $i++) {\n            array_push($returnArray,\
    \ $orbits[$i]);\n        }\n    } else {\n        for ($i = $index2 + 1; $i <\
    \ $index1; $i++) {\n            array_push($returnArray, $orbits[$i]);\n     \
    \   }\n    }\n    return $returnArray;\n}\nfunction candidate(...$args) {\n  \
    \  return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\"\
    , \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyf5hg3nj.php:45\n\
    Stack trace:\n#0 /tmp/tmpyf5hg3nj.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpyf5hg3nj.php\
    \ on line 45\n"
  timestamp: 1659823842
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    // your code here\n    $planets = array(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\");\n    $planet1Index = array_search($planet1, $planets);\n    $planet2Index\
    \ = array_search($planet2, $planets);\n    if (strcmp($planet1, $planet2) == 0)\
    \ {\n        $planet2Index += 1;\n    } elseif (strcmp($planet1, $planet2) > 0)\
    \ {\n        $temp = $planet1Index;\n        $planet1Index = $planet2Index;\n\
    \        $planet2Index = $temp;\n    }\n    if ($planet1Index >= 0 && $planet2Index\
    \ >= 0) {\n        $result = array();\n        for ($i = $planet1Index + 1; $i\
    \ < $planet2Index; $i++) {\n            array_push($result, $planets[$i]);\n \
    \       }\n        return $result;\n    } else {\n        return \"Empty\";\n\
    \    }\n}\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\"\
    , \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp69vi7ero.php:46\n\
    Stack trace:\n#0 /tmp/tmp69vi7ero.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp69vi7ero.php\
    \ on line 46\n"
  timestamp: 1659823842
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planetlist = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\t\
    if (!in_array($planet1, $planetlist) || !in_array($planet2, $planetlist))\n\t\t\
    return [];\n\t$first = array_search($planet1, $planetlist);\n\t$second = array_search($planet2,\
    \ $planetlist);\n\tif ($first > $second) {\n\t\t$temp = $first;\n\t\t$first =\
    \ $second;\n\t\t$second = $temp;\n\t}\n\treturn array_slice($planetlist, $first\
    \ + 1, $second - $first - 1);\n}\n\n$planetlist = [\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\nif (false)\
    \ {\n\tfor ($i = 0; $i < count($planetlist); $i++) {\n\t\tfor ($j = 0; $j < count($planetlist);\
    \ $j++) {\n\t\t\techo $planetlist[$i] . \" \" . $planetlist[$j] . \" \" . var_export(bf($planetlist[$i],\
    \ $planetlist[$j]), true) . \"\\n\";\n\t\t}\n\t}\n}\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpme9o4ngk.php:49\n\
    Stack trace:\n#0 /tmp/tmpme9o4ngk.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpme9o4ngk.php\
    \ on line 49\n"
  timestamp: 1659823842
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planets = [\n\t\t'Mercury',\n\t\t'Venus',\n\
    \t\t'Earth',\n\t\t'Mars',\n\t\t'Jupiter',\n\t\t'Saturn',\n\t\t'Uranus',\n\t\t\
    'Neptune'\n\t];\n\tif (!in_array($planet1, $planets) || !in_array($planet2, $planets))\
    \ {\n\t\treturn [];\n\t}\n\t$n1 = array_search($planet1, $planets);\n\t$n2 = array_search($planet2,\
    \ $planets);\n\tif ($n1 > $n2) {\n\t\t$temp = $n1;\n\t\t$n1 = $n2;\n\t\t$n2 =\
    \ $temp;\n\t}\n\t$res = [];\n\tfor ($i = $n1 + 1; $i < $n2; $i++) {\n\t\t$res[]\
    \ = $planets[$i];\n\t}\n\treturn $res;\n}\nprint_r(bf('Jupiter', 'Neptune'));\n\
    print_r(bf('Earth', 'Mercury'));\nprint_r(bf('Mercury', 'Uranus'));\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1659823842
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $first_planet = array_search($planet1, $planets);\n    $second_planet = array_search($planet2,\
    \ $planets);\n    if ($first_planet === false || $second_planet === false) return\
    \ false;\n    $slice = array_slice($planets, $first_planet, $second_planet - $first_planet);\n\
    \    if (count($slice) == 1) {\n        return array_shift($slice);\n    } else\
    \ {\n        return $slice;\n    }\n}\n\n$planet1 = \"Earth\";\n$planet2 = \"\
    Mercury\";\nprint_r(bf($planet1, $planet2));\necho \"<br>\";\n\n$planet1 = \"\
    Mercury\";\n$planet2 = \"Uranus\";\nprint_r(bf($planet1, $planet2));\necho \"\
    <br>\";\n\n$planet1 = \"Jupiter\";\n$planet2 = \"Neptune\";\nprint_r(bf($planet1,\
    \ $planet2));\necho \"<br>\";\n\n$planet1 = \"Earth\";\n$planet2 = \"Uranus\"\
    ;\nprint_r(bf($planet1, $planet2));\necho \"<br>\";\n\n$planet1 = \"Earth\";\n\
    $planet2 = \"Mars\";\nprint_r(bf($planet1, $planet2));\necho \"<br>\";\n\n$planet1\
    \ = \"Mars\";\n$planet2 = \"Jupiter\";\nprint_r(bf($planet1, $planet2));\necho\
    \ \"<br>\";\n\n$planet1 = \"Mars\";\n$planet2 = \"Saturn\";\nprint_r(bf($planet1,\
    \ $planet2));\necho \"<br>\";\n\n$planet1 = \"Saturn\";\n$planet2 = \"Uranus\"\
    ;\nprint_r(bf($planet1, $planet2));\necho \"<br>\";\n\n$planet1 = \"Uranus\";\n\
    $planet2 = \"Neptune\";\nprint_r(bf($planet1, $planet2));\necho \"<br>\";\n\n\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Earth\n    [1] => Mars\n    [2] => Jupiter\n    [3]\
    \ => Saturn\n)\n<br>Array\n(\n    [0] => Mercury\n    [1] => Venus\n    [2] =>\
    \ Earth\n    [3] => Mars\n    [4] => Jupiter\n    [5] => Saturn\n)\n<br>Array\n\
    (\n    [0] => Jupiter\n    [1] => Saturn\n    [2] => Uranus\n)\n<br>Array\n(\n\
    \    [0] => Earth\n    [1] => Mars\n    [2] => Jupiter\n    [3] => Saturn\n)\n\
    <br>Earth<br>Mars<br>Array\n(\n    [0] => Mars\n    [1] => Jupiter\n)\n<br>Saturn<br>Uranus<br>\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpr928a8pz.php:82\nStack\
    \ trace:\n#0 /tmp/tmpr928a8pz.php(91): test()\n#1 {main}\n  thrown in /tmp/tmpr928a8pz.php\
    \ on line 82\n"
  timestamp: 1659823842
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $arr = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $result = array();\n    if (!in_array($planet1, $arr) || !in_array($planet2,\
    \ $arr))\n        return $result;\n    if ($planet1 === $planet2)\n        return\
    \ $result;\n    $index1 = array_search($planet1, $arr);\n    $index2 = array_search($planet2,\
    \ $arr);\n    if ($index1 > $index2) {\n        $tmp = $index1;\n        $index1\
    \ = $index2;\n        $index2 = $tmp;\n    }\n    for ($i = $index1 + 1; $i <\
    \ $index2; $i++) {\n        $result[] = $arr[$i];\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823842
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $p1key = array_search($planet1, $planets);\n    $p2key = array_search($planet2,\
    \ $planets);\n    if ($p1key === false || $p2key === false) {\n        return\
    \ array();\n    }\n    if ($p1key < $p2key) {\n        $start = $p1key;\n    \
    \    $end = $p2key;\n    } else {\n        $start = $p2key;\n        $end = $p1key;\n\
    \    }\n    $newArray = array();\n    for ($i = $start + 1; $i < $end; $i++) {\n\
    \        $newArray[] = $planets[$i];\n    }\n    return $newArray;\n}\n$planet1\
    \ = \"Mercury\";\n$planet2 = \"Uranus\";\necho json_encode(bf($planet1, $planet2));\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '["Venus","Earth","Mars","Jupiter","Saturn"]'
  timestamp: 1659823842
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planetOrder = array(\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    );\n    $startIndex = array_search($planet1, $planetOrder);\n    $endIndex = array_search($planet2,\
    \ $planetOrder);\n    if($startIndex === false || $endIndex === false) {\n   \
    \     return \"One of the planets is not in our solar system\";\n    }\n    $planetsBetween\
    \ = array();\n    for($i = $startIndex; $i < $endIndex; $i++) {\n        $planetsBetween[]\
    \ = $planetOrder[$i];\n    }\n    return $planetsBetween;\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsffg6tli.php:37\n\
    Stack trace:\n#0 /tmp/tmpsffg6tli.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpsffg6tli.php\
    \ on line 37\n"
  timestamp: 1659823842
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    \n    $planets = [\n        \"Mercury\"\
    ,\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\"\
    ,\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\n    ];\n   \
    \ \n    if (!in_array($planet1, $planets) || !in_array($planet2, $planets)) {\n\
    \        return $arr = [];\n    }\n    \n    $index1 = array_search($planet1,\
    \ $planets);\n    $index2 = array_search($planet2, $planets);\n    \n    if ($index1\
    \ > $index2) {\n        $tmp = $index1;\n        $index1 = $index2;\n        $index2\
    \ = $tmp;\n    }\n    \n    $arr = [];\n    for ($i = $index1 + 1; $i < $index2;\
    \ $i++) {\n        $arr[] = $planets[$i];\n    }\n    \n    return $arr;\n}\n\n\
    $planets = bf(\"Earth\", \"Mercury\");\nprint_r($planets);\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Venus\n)\n"
  timestamp: 1659823842
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $solarSystem = array(\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    );\n    $planetName1 = array_search($planet1, $solarSystem);\n    $planetName2\
    \ = array_search($planet2, $solarSystem);\n    if ( $planetName1 === false ||\
    \ $planetName2 === false ) {\n        return array();\n    }\n    $betweenPlanets\
    \ = array();\n    if ($planetName1 < $planetName2) {\n        for ($i = $planetName1\
    \ + 1; $i < $planetName2; $i++) {\n            $betweenPlanets[] = $solarSystem[$i];\n\
    \        }\n    } else {\n        for ($i = $planetName2 + 1; $i < $planetName1;\
    \ $i++) {\n            $betweenPlanets[] = $solarSystem[$i];\n        }\n    }\n\
    \    return $betweenPlanets;\n}\n\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nprint_r(bf(\"\
    Earth\", \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"));\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1659823842
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = [\n        'Mercury',\n \
    \       'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n    \
    \    'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $key1 = array_search($planet1,\
    \ $planets);\n    $key2 = array_search($planet2, $planets);\n    $result = [];\n\
    \    if ($key1 === false || $key2 === false) {\n        return $result;\n    }\
    \ elseif ($key1 === $key2) {\n        return $planets[$key1];\n    } elseif ($key1\
    \ > $key2) {\n        for ($i = $key2; $i < $key1; $i++) {\n            $result[]\
    \ = $planets[$i];\n        }\n    } else {\n        for ($i = $key1; $i < $key2;\
    \ $i++) {\n            $result[] = $planets[$i];\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(bf('Mercury', 'Uranus'));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Mercury\n    [1] => Venus\n    [2] => Earth\n    [3]\
    \ => Mars\n    [4] => Jupiter\n    [5] => Saturn\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpm4_q92p1.php:54\nStack trace:\n#0 /tmp/tmpm4_q92p1.php(63):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpm4_q92p1.php on line 54\n"
  timestamp: 1659823842
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\n        \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \n    );\n    $index1 = array_search($planet1, $planets);\n    $index2 = array_search($planet2,\
    \ $planets);\n    if ($index1 == false || $index2 == false) {\n        return\
    \ array();\n    }\n    if ($index1 < $index2) {\n        return array_slice($planets,\
    \ $index1 + 1, $index2 - $index1 - 1);\n    } else {\n        return array_slice($planets,\
    \ $index2 + 1, $index1 - $index2 - 1);\n    }\n}\n\necho \"<pre>\";\nvar_dump(bf(\"\
    Jupiter\", \"Neptune\"));\nvar_dump(bf(\"Earth\", \"Mercury\"));\nvar_dump(bf(\"\
    Mercury\", \"Uranus\"));\necho \"</pre>\";\nfunction candidate(...$args) {\n \
    \   return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\"\
    , \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>array(2) {\n  [0]=>\n  string(6) \"Saturn\"\n  [1]=>\n  string(6)\
    \ \"Uranus\"\n}\narray(0) {\n}\narray(0) {\n}\n</pre>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp7vgnk8a7.php:45\nStack trace:\n#0 /tmp/tmp7vgnk8a7.php(53):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp7vgnk8a7.php on line 45\n"
  timestamp: 1659823842
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planets = [\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\tif (!in_array($planet1,\
    \ $planets) || !in_array($planet2, $planets)) {\n\t\treturn array();\n\t}\n\t\
    $planet1Index = array_search($planet1, $planets);\n\t$planet2Index = array_search($planet2,\
    \ $planets);\n\t$result = array();\n\tif ($planet1Index < $planet2Index) {\n\t\
    \t$result = array_slice($planets, $planet1Index + 1, $planet2Index - $planet1Index\
    \ - 1);\n\t} else {\n\t\t$result = array_slice($planets, $planet2Index + 1, $planet1Index\
    \ - $planet2Index - 1);\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl4rb251p.php:43\n\
    Stack trace:\n#0 /tmp/tmpl4rb251p.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpl4rb251p.php\
    \ on line 43\n"
  timestamp: 1659823842
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\t\
    $planet1 = array_search($planet1, $planets);\n\t$planet2 = array_search($planet2,\
    \ $planets);\n\t$list = array();\n\tif(!$planet1) {\n\t\techo $planet1 . \" is\
    \ not a planet.\";\n\t}\n\telseif(!$planet2) {\n\t\techo $planet2 . \" is not\
    \ a planet.\";\n\t}\n\telseif($planet1 == $planet2) {\n\t\techo \"The planets\
    \ are the same.\";\n\t}\n\telseif($planet1 > $planet2) {\n\t\tfor($i = $planet2;\
    \ $i < $planet1; $i++) {\n\t\t\tarray_push($list, $planets[$i]);\n\t\t}\n\t\t\
    if(count($list) > 1) {\n\t\t\tprint_r($list);\n\t\t}\n\t\telse {\n\t\t\techo $list[0];\n\
    \t\t}\n\t}\n\telse {\n\t\tfor($i = $planet1; $i < $planet2; $i++) {\n\t\t\tarray_push($list,\
    \ $planets[$i]);\n\t\t}\n\t\tif(count($list) > 1) {\n\t\t\tprint_r($list);\n\t\
    \t}\n\t\telse {\n\t\t\techo $list[0];\n\t\t}\n\t}\n}\nbf(\"Mercury\", \"Uranus\"\
    );\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0 is not a planet.Array\n(\n    [0] => Jupiter\n    [1] => Saturn\n   \
    \ [2] => Uranus\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp423nzl64.php:61\n\
    Stack trace:\n#0 /tmp/tmp423nzl64.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp423nzl64.php\
    \ on line 61\n"
  timestamp: 1659823842
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t// $pos_planet1 = array_search($planet1,\
    \ $planets);\n\t// $pos_planet2 = array_search($planet2, $planets);\n\t$planets\
    \ = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n\
    \tif (in_array($planet1, $planets) && in_array($planet2, $planets)) {\n\t\t$pos_planet1\
    \ = array_search($planet1, $planets);\n\t\t$pos_planet2 = array_search($planet2,\
    \ $planets);\n\t\t$max = max($pos_planet1, $pos_planet2);\n\t\t$min = min($pos_planet1,\
    \ $pos_planet2);\n\t\t$result = [];\n\t\tfor ($i = $min + 1; $i < $max; $i++)\
    \ {\n\t\t\t$result[] = $planets[$i];\n\t\t}\n\t\treturn $result;\n\t} else {\n\
    \t\treturn [];\n\t}\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nprint_r(bf(\"\
    Earth\", \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"));\nprint_r(bf(\"\
    Pluto\", \"Uranus\"));\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\nArray\n(\n)\n"
  timestamp: 1659823842
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planets = array('Mercury', 'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune');\n\t$keys = array_keys($planets,\
    \ $planet1, true);\n\t$keys2 = array_keys($planets, $planet2, true);\n\tif(!is_int($keys[0])\
    \ || !is_int($keys2[0])){\n\t\treturn array();\n\t} else {\n\t\t$min = min($keys[0],\
    \ $keys2[0]);\n\t\t$max = max($keys[0], $keys2[0]);\n\t\t$result = array();\n\t\
    \tfor($i = $min + 1; $i < $max; $i++){\n\t\t\t$result[] = $planets[$i];\n\t\t\
    }\n\t\treturn $result;\n\t}\n}\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 0 in /tmp/tmpl64bupio.php on line 22

    '
  timestamp: 1659823842
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planets = array(\n\t\t\"Mercury\",\n\t\
    \t\"Venus\",\n\t\t\"Earth\",\n\t\t\"Mars\",\n\t\t\"Jupiter\",\n\t\t\"Saturn\"\
    ,\n\t\t\"Uranus\",\n\t\t\"Neptune\"\n\t);\n\t$planets = array_flip($planets);\n\
    \tif ( ! isset($planets[$planet1]) || ! isset($planets[$planet2])) {\n\t\treturn\
    \ array();\n\t}\n\tif ($planets[$planet1] < $planets[$planet2]) {\n\t\treturn\
    \ array_slice($planets, $planets[$planet1]+1, $planets[$planet2]-$planets[$planet1]-1);\n\
    \t} else {\n\t\treturn array_slice($planets, $planets[$planet2]+1, $planets[$planet1]-$planets[$planet2]-1);\n\
    \t}\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho \"<br>\";\nprint_r(bf(\"\
    Earth\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [Saturn] => 5\n    [Uranus] => 6\n)\n<br>Array\n(\n    [Venus]\
    \ => 1\n)\n<br>Array\n(\n    [Venus] => 1\n    [Earth] => 2\n    [Mars] => 3\n\
    \    [Jupiter] => 4\n    [Saturn] => 5\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpp5vtg9be.php:49\nStack trace:\n#0 /tmp/tmpp5vtg9be.php(58):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpp5vtg9be.php on line 49\n"
  timestamp: 1659823842
