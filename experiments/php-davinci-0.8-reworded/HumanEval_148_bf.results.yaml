language: php
name: HumanEval_148_bf
results:
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $array = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $arraIndex = [];\n    foreach ($array as $key => $value) {\n        if ($value\
    \ == $planet1) {\n            $arraIndex[] = $key;\n        }\n        if ($value\
    \ == $planet2) {\n            $arraIndex[] = $key;\n        }\n    }\n    $arrSize\
    \ = count($arraIndex);\n    if ($arrSize == 2) {\n        if ($arraIndex[0] >\
    \ $arraIndex[1]) {\n            $tmp = $arraIndex[0];\n            $arraIndex[0]\
    \ = $arraIndex[1];\n            $arraIndex[1] = $tmp;\n        }\n        $newArr\
    \ = [];\n        for ($i = $arraIndex[0] + 1; $i < $arraIndex[1]; $i++) {\n  \
    \          $newArr[] = $array[$i];\n        }\n        if (count($newArr) == 1)\
    \ {\n            return $newArr[0];\n        } else {\n            return $newArr;\n\
    \        }\n    } else {\n        return false;\n    }\n}\necho \"<pre>\";\nprint_r(bf(\"\
    Earth\", \"Mercury\"));\necho \"</pre>\";\nfunction candidate(...$args) {\n  \
    \  return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\"\
    , \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Venus</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq_ysin7k.php:58\n\
    Stack trace:\n#0 /tmp/tmpq_ysin7k.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpq_ysin7k.php\
    \ on line 58\n"
  timestamp: 1659823842
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n  $planets = array(\n    \"Mercury\",\n\
    \    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\"\
    ,\n    \"Uranus\",\n    \"Neptune\"\n  );\n  if (!in_array($planet1, $planets)\
    \ || !in_array($planet2, $planets)) {\n    return array();\n  }\n  $firstPlanet\
    \ = array_search($planet1, $planets);\n  $secondPlanet = array_search($planet2,\
    \ $planets);\n  if ($firstPlanet > $secondPlanet) {\n    $temp = $firstPlanet;\n\
    \    $firstPlanet = $secondPlanet;\n    $secondPlanet = $temp;\n  }\n  $result\
    \ = array();\n  for ($i = $firstPlanet + 1; $i < $secondPlanet; $i++) {\n    $result[]\
    \ = $planets[$i];\n  }\n  return $result;\n}\n\nprint_r(bf(\"Jupiter\", \"Neptune\"\
    ));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\necho \"<br>\";\nfunction candidate(...$args) {\n   \
    \ return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\"\
    , \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n<br>"
  timestamp: 1659823842
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\t\
    if(!in_array($planet1, $planets) || !in_array($planet2, $planets)) {\n\t\treturn\
    \ \"Incorrect Planet Name\";\n\t}\n\t$in1 = array_search($planet1, $planets);\n\
    \t$in2 = array_search($planet2, $planets);\n\t$left = min($in1, $in2);\n\t$right\
    \ = max($in1, $in2);\n\treturn array_slice($planets, $left + 1, $right - $left\
    \ - 1);\n}\n\necho bf(\"Jupiter\", \"Neptune\");\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmphoi_kegp.php on line 30\n\
    Array\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphoi_kegp.php:40\n\
    Stack trace:\n#0 /tmp/tmphoi_kegp.php(45): test()\n#1 {main}\n  thrown in /tmp/tmphoi_kegp.php\
    \ on line 40\n"
  timestamp: 1659823842
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $orbits = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $index1 = array_search($planet1, $orbits);\n    $index2 = array_search($planet2,\
    \ $orbits);\n    $returnArray = array();\n    if ($index1 < $index2) {\n     \
    \   for ($i = $index1 + 1; $i < $index2; $i++) {\n            array_push($returnArray,\
    \ $orbits[$i]);\n        }\n    } else {\n        for ($i = $index2 + 1; $i <\
    \ $index1; $i++) {\n            array_push($returnArray, $orbits[$i]);\n     \
    \   }\n    }\n    return $returnArray;\n}\nfunction candidate(...$args) {\n  \
    \  return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\"\
    , \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyf5hg3nj.php:45\n\
    Stack trace:\n#0 /tmp/tmpyf5hg3nj.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpyf5hg3nj.php\
    \ on line 45\n"
  timestamp: 1659823842
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    // your code here\n    $planets = array(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\");\n    $planet1Index = array_search($planet1, $planets);\n    $planet2Index\
    \ = array_search($planet2, $planets);\n    if (strcmp($planet1, $planet2) == 0)\
    \ {\n        $planet2Index += 1;\n    } elseif (strcmp($planet1, $planet2) > 0)\
    \ {\n        $temp = $planet1Index;\n        $planet1Index = $planet2Index;\n\
    \        $planet2Index = $temp;\n    }\n    if ($planet1Index >= 0 && $planet2Index\
    \ >= 0) {\n        $result = array();\n        for ($i = $planet1Index + 1; $i\
    \ < $planet2Index; $i++) {\n            array_push($result, $planets[$i]);\n \
    \       }\n        return $result;\n    } else {\n        return \"Empty\";\n\
    \    }\n}\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\"\
    , \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp69vi7ero.php:46\n\
    Stack trace:\n#0 /tmp/tmp69vi7ero.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp69vi7ero.php\
    \ on line 46\n"
  timestamp: 1659823842
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planetlist = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\t\
    if (!in_array($planet1, $planetlist) || !in_array($planet2, $planetlist))\n\t\t\
    return [];\n\t$first = array_search($planet1, $planetlist);\n\t$second = array_search($planet2,\
    \ $planetlist);\n\tif ($first > $second) {\n\t\t$temp = $first;\n\t\t$first =\
    \ $second;\n\t\t$second = $temp;\n\t}\n\treturn array_slice($planetlist, $first\
    \ + 1, $second - $first - 1);\n}\n\n$planetlist = [\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\nif (false)\
    \ {\n\tfor ($i = 0; $i < count($planetlist); $i++) {\n\t\tfor ($j = 0; $j < count($planetlist);\
    \ $j++) {\n\t\t\techo $planetlist[$i] . \" \" . $planetlist[$j] . \" \" . var_export(bf($planetlist[$i],\
    \ $planetlist[$j]), true) . \"\\n\";\n\t\t}\n\t}\n}\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpme9o4ngk.php:49\n\
    Stack trace:\n#0 /tmp/tmpme9o4ngk.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpme9o4ngk.php\
    \ on line 49\n"
  timestamp: 1659823842
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planets = [\n\t\t'Mercury',\n\t\t'Venus',\n\
    \t\t'Earth',\n\t\t'Mars',\n\t\t'Jupiter',\n\t\t'Saturn',\n\t\t'Uranus',\n\t\t\
    'Neptune'\n\t];\n\tif (!in_array($planet1, $planets) || !in_array($planet2, $planets))\
    \ {\n\t\treturn [];\n\t}\n\t$n1 = array_search($planet1, $planets);\n\t$n2 = array_search($planet2,\
    \ $planets);\n\tif ($n1 > $n2) {\n\t\t$temp = $n1;\n\t\t$n1 = $n2;\n\t\t$n2 =\
    \ $temp;\n\t}\n\t$res = [];\n\tfor ($i = $n1 + 1; $i < $n2; $i++) {\n\t\t$res[]\
    \ = $planets[$i];\n\t}\n\treturn $res;\n}\nprint_r(bf('Jupiter', 'Neptune'));\n\
    print_r(bf('Earth', 'Mercury'));\nprint_r(bf('Mercury', 'Uranus'));\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1659823842
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $first_planet = array_search($planet1, $planets);\n    $second_planet = array_search($planet2,\
    \ $planets);\n    if ($first_planet === false || $second_planet === false) return\
    \ false;\n    $slice = array_slice($planets, $first_planet, $second_planet - $first_planet);\n\
    \    if (count($slice) == 1) {\n        return array_shift($slice);\n    } else\
    \ {\n        return $slice;\n    }\n}\n\n$planet1 = \"Earth\";\n$planet2 = \"\
    Mercury\";\nprint_r(bf($planet1, $planet2));\necho \"<br>\";\n\n$planet1 = \"\
    Mercury\";\n$planet2 = \"Uranus\";\nprint_r(bf($planet1, $planet2));\necho \"\
    <br>\";\n\n$planet1 = \"Jupiter\";\n$planet2 = \"Neptune\";\nprint_r(bf($planet1,\
    \ $planet2));\necho \"<br>\";\n\n$planet1 = \"Earth\";\n$planet2 = \"Uranus\"\
    ;\nprint_r(bf($planet1, $planet2));\necho \"<br>\";\n\n$planet1 = \"Earth\";\n\
    $planet2 = \"Mars\";\nprint_r(bf($planet1, $planet2));\necho \"<br>\";\n\n$planet1\
    \ = \"Mars\";\n$planet2 = \"Jupiter\";\nprint_r(bf($planet1, $planet2));\necho\
    \ \"<br>\";\n\n$planet1 = \"Mars\";\n$planet2 = \"Saturn\";\nprint_r(bf($planet1,\
    \ $planet2));\necho \"<br>\";\n\n$planet1 = \"Saturn\";\n$planet2 = \"Uranus\"\
    ;\nprint_r(bf($planet1, $planet2));\necho \"<br>\";\n\n$planet1 = \"Uranus\";\n\
    $planet2 = \"Neptune\";\nprint_r(bf($planet1, $planet2));\necho \"<br>\";\n\n\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Earth\n    [1] => Mars\n    [2] => Jupiter\n    [3]\
    \ => Saturn\n)\n<br>Array\n(\n    [0] => Mercury\n    [1] => Venus\n    [2] =>\
    \ Earth\n    [3] => Mars\n    [4] => Jupiter\n    [5] => Saturn\n)\n<br>Array\n\
    (\n    [0] => Jupiter\n    [1] => Saturn\n    [2] => Uranus\n)\n<br>Array\n(\n\
    \    [0] => Earth\n    [1] => Mars\n    [2] => Jupiter\n    [3] => Saturn\n)\n\
    <br>Earth<br>Mars<br>Array\n(\n    [0] => Mars\n    [1] => Jupiter\n)\n<br>Saturn<br>Uranus<br>\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpr928a8pz.php:82\nStack\
    \ trace:\n#0 /tmp/tmpr928a8pz.php(91): test()\n#1 {main}\n  thrown in /tmp/tmpr928a8pz.php\
    \ on line 82\n"
  timestamp: 1659823842
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $arr = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $result = array();\n    if (!in_array($planet1, $arr) || !in_array($planet2,\
    \ $arr))\n        return $result;\n    if ($planet1 === $planet2)\n        return\
    \ $result;\n    $index1 = array_search($planet1, $arr);\n    $index2 = array_search($planet2,\
    \ $arr);\n    if ($index1 > $index2) {\n        $tmp = $index1;\n        $index1\
    \ = $index2;\n        $index2 = $tmp;\n    }\n    for ($i = $index1 + 1; $i <\
    \ $index2; $i++) {\n        $result[] = $arr[$i];\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823842
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $p1key = array_search($planet1, $planets);\n    $p2key = array_search($planet2,\
    \ $planets);\n    if ($p1key === false || $p2key === false) {\n        return\
    \ array();\n    }\n    if ($p1key < $p2key) {\n        $start = $p1key;\n    \
    \    $end = $p2key;\n    } else {\n        $start = $p2key;\n        $end = $p1key;\n\
    \    }\n    $newArray = array();\n    for ($i = $start + 1; $i < $end; $i++) {\n\
    \        $newArray[] = $planets[$i];\n    }\n    return $newArray;\n}\n$planet1\
    \ = \"Mercury\";\n$planet2 = \"Uranus\";\necho json_encode(bf($planet1, $planet2));\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '["Venus","Earth","Mars","Jupiter","Saturn"]'
  timestamp: 1659823842
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planetOrder = array(\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    );\n    $startIndex = array_search($planet1, $planetOrder);\n    $endIndex = array_search($planet2,\
    \ $planetOrder);\n    if($startIndex === false || $endIndex === false) {\n   \
    \     return \"One of the planets is not in our solar system\";\n    }\n    $planetsBetween\
    \ = array();\n    for($i = $startIndex; $i < $endIndex; $i++) {\n        $planetsBetween[]\
    \ = $planetOrder[$i];\n    }\n    return $planetsBetween;\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsffg6tli.php:37\n\
    Stack trace:\n#0 /tmp/tmpsffg6tli.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpsffg6tli.php\
    \ on line 37\n"
  timestamp: 1659823842
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    \n    $planets = [\n        \"Mercury\"\
    ,\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\"\
    ,\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\n    ];\n   \
    \ \n    if (!in_array($planet1, $planets) || !in_array($planet2, $planets)) {\n\
    \        return $arr = [];\n    }\n    \n    $index1 = array_search($planet1,\
    \ $planets);\n    $index2 = array_search($planet2, $planets);\n    \n    if ($index1\
    \ > $index2) {\n        $tmp = $index1;\n        $index1 = $index2;\n        $index2\
    \ = $tmp;\n    }\n    \n    $arr = [];\n    for ($i = $index1 + 1; $i < $index2;\
    \ $i++) {\n        $arr[] = $planets[$i];\n    }\n    \n    return $arr;\n}\n\n\
    $planets = bf(\"Earth\", \"Mercury\");\nprint_r($planets);\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Venus\n)\n"
  timestamp: 1659823842
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $solarSystem = array(\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    );\n    $planetName1 = array_search($planet1, $solarSystem);\n    $planetName2\
    \ = array_search($planet2, $solarSystem);\n    if ( $planetName1 === false ||\
    \ $planetName2 === false ) {\n        return array();\n    }\n    $betweenPlanets\
    \ = array();\n    if ($planetName1 < $planetName2) {\n        for ($i = $planetName1\
    \ + 1; $i < $planetName2; $i++) {\n            $betweenPlanets[] = $solarSystem[$i];\n\
    \        }\n    } else {\n        for ($i = $planetName2 + 1; $i < $planetName1;\
    \ $i++) {\n            $betweenPlanets[] = $solarSystem[$i];\n        }\n    }\n\
    \    return $betweenPlanets;\n}\n\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nprint_r(bf(\"\
    Earth\", \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"));\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1659823842
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = [\n        'Mercury',\n \
    \       'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n    \
    \    'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $key1 = array_search($planet1,\
    \ $planets);\n    $key2 = array_search($planet2, $planets);\n    $result = [];\n\
    \    if ($key1 === false || $key2 === false) {\n        return $result;\n    }\
    \ elseif ($key1 === $key2) {\n        return $planets[$key1];\n    } elseif ($key1\
    \ > $key2) {\n        for ($i = $key2; $i < $key1; $i++) {\n            $result[]\
    \ = $planets[$i];\n        }\n    } else {\n        for ($i = $key1; $i < $key2;\
    \ $i++) {\n            $result[] = $planets[$i];\n        }\n    }\n    return\
    \ $result;\n}\n\nprint_r(bf('Mercury', 'Uranus'));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Mercury\n    [1] => Venus\n    [2] => Earth\n    [3]\
    \ => Mars\n    [4] => Jupiter\n    [5] => Saturn\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpm4_q92p1.php:54\nStack trace:\n#0 /tmp/tmpm4_q92p1.php(63):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpm4_q92p1.php on line 54\n"
  timestamp: 1659823842
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\n        \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \n    );\n    $index1 = array_search($planet1, $planets);\n    $index2 = array_search($planet2,\
    \ $planets);\n    if ($index1 == false || $index2 == false) {\n        return\
    \ array();\n    }\n    if ($index1 < $index2) {\n        return array_slice($planets,\
    \ $index1 + 1, $index2 - $index1 - 1);\n    } else {\n        return array_slice($planets,\
    \ $index2 + 1, $index1 - $index2 - 1);\n    }\n}\n\necho \"<pre>\";\nvar_dump(bf(\"\
    Jupiter\", \"Neptune\"));\nvar_dump(bf(\"Earth\", \"Mercury\"));\nvar_dump(bf(\"\
    Mercury\", \"Uranus\"));\necho \"</pre>\";\nfunction candidate(...$args) {\n \
    \   return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\"\
    , \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>array(2) {\n  [0]=>\n  string(6) \"Saturn\"\n  [1]=>\n  string(6)\
    \ \"Uranus\"\n}\narray(0) {\n}\narray(0) {\n}\n</pre>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp7vgnk8a7.php:45\nStack trace:\n#0 /tmp/tmp7vgnk8a7.php(53):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp7vgnk8a7.php on line 45\n"
  timestamp: 1659823842
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planets = [\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\tif (!in_array($planet1,\
    \ $planets) || !in_array($planet2, $planets)) {\n\t\treturn array();\n\t}\n\t\
    $planet1Index = array_search($planet1, $planets);\n\t$planet2Index = array_search($planet2,\
    \ $planets);\n\t$result = array();\n\tif ($planet1Index < $planet2Index) {\n\t\
    \t$result = array_slice($planets, $planet1Index + 1, $planet2Index - $planet1Index\
    \ - 1);\n\t} else {\n\t\t$result = array_slice($planets, $planet2Index + 1, $planet1Index\
    \ - $planet2Index - 1);\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl4rb251p.php:43\n\
    Stack trace:\n#0 /tmp/tmpl4rb251p.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpl4rb251p.php\
    \ on line 43\n"
  timestamp: 1659823842
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\t\
    $planet1 = array_search($planet1, $planets);\n\t$planet2 = array_search($planet2,\
    \ $planets);\n\t$list = array();\n\tif(!$planet1) {\n\t\techo $planet1 . \" is\
    \ not a planet.\";\n\t}\n\telseif(!$planet2) {\n\t\techo $planet2 . \" is not\
    \ a planet.\";\n\t}\n\telseif($planet1 == $planet2) {\n\t\techo \"The planets\
    \ are the same.\";\n\t}\n\telseif($planet1 > $planet2) {\n\t\tfor($i = $planet2;\
    \ $i < $planet1; $i++) {\n\t\t\tarray_push($list, $planets[$i]);\n\t\t}\n\t\t\
    if(count($list) > 1) {\n\t\t\tprint_r($list);\n\t\t}\n\t\telse {\n\t\t\techo $list[0];\n\
    \t\t}\n\t}\n\telse {\n\t\tfor($i = $planet1; $i < $planet2; $i++) {\n\t\t\tarray_push($list,\
    \ $planets[$i]);\n\t\t}\n\t\tif(count($list) > 1) {\n\t\t\tprint_r($list);\n\t\
    \t}\n\t\telse {\n\t\t\techo $list[0];\n\t\t}\n\t}\n}\nbf(\"Mercury\", \"Uranus\"\
    );\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0 is not a planet.Array\n(\n    [0] => Jupiter\n    [1] => Saturn\n   \
    \ [2] => Uranus\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp423nzl64.php:61\n\
    Stack trace:\n#0 /tmp/tmp423nzl64.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp423nzl64.php\
    \ on line 61\n"
  timestamp: 1659823842
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t// $pos_planet1 = array_search($planet1,\
    \ $planets);\n\t// $pos_planet2 = array_search($planet2, $planets);\n\t$planets\
    \ = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n\
    \tif (in_array($planet1, $planets) && in_array($planet2, $planets)) {\n\t\t$pos_planet1\
    \ = array_search($planet1, $planets);\n\t\t$pos_planet2 = array_search($planet2,\
    \ $planets);\n\t\t$max = max($pos_planet1, $pos_planet2);\n\t\t$min = min($pos_planet1,\
    \ $pos_planet2);\n\t\t$result = [];\n\t\tfor ($i = $min + 1; $i < $max; $i++)\
    \ {\n\t\t\t$result[] = $planets[$i];\n\t\t}\n\t\treturn $result;\n\t} else {\n\
    \t\treturn [];\n\t}\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nprint_r(bf(\"\
    Earth\", \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"));\nprint_r(bf(\"\
    Pluto\", \"Uranus\"));\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\nArray\n(\n)\n"
  timestamp: 1659823842
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planets = array('Mercury', 'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune');\n\t$keys = array_keys($planets,\
    \ $planet1, true);\n\t$keys2 = array_keys($planets, $planet2, true);\n\tif(!is_int($keys[0])\
    \ || !is_int($keys2[0])){\n\t\treturn array();\n\t} else {\n\t\t$min = min($keys[0],\
    \ $keys2[0]);\n\t\t$max = max($keys[0], $keys2[0]);\n\t\t$result = array();\n\t\
    \tfor($i = $min + 1; $i < $max; $i++){\n\t\t\t$result[] = $planets[$i];\n\t\t\
    }\n\t\treturn $result;\n\t}\n}\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 0 in /tmp/tmpl64bupio.php on line 22

    '
  timestamp: 1659823842
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planets = array(\n\t\t\"Mercury\",\n\t\
    \t\"Venus\",\n\t\t\"Earth\",\n\t\t\"Mars\",\n\t\t\"Jupiter\",\n\t\t\"Saturn\"\
    ,\n\t\t\"Uranus\",\n\t\t\"Neptune\"\n\t);\n\t$planets = array_flip($planets);\n\
    \tif ( ! isset($planets[$planet1]) || ! isset($planets[$planet2])) {\n\t\treturn\
    \ array();\n\t}\n\tif ($planets[$planet1] < $planets[$planet2]) {\n\t\treturn\
    \ array_slice($planets, $planets[$planet1]+1, $planets[$planet2]-$planets[$planet1]-1);\n\
    \t} else {\n\t\treturn array_slice($planets, $planets[$planet2]+1, $planets[$planet1]-$planets[$planet2]-1);\n\
    \t}\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho \"<br>\";\nprint_r(bf(\"\
    Earth\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [Saturn] => 5\n    [Uranus] => 6\n)\n<br>Array\n(\n    [Venus]\
    \ => 1\n)\n<br>Array\n(\n    [Venus] => 1\n    [Earth] => 2\n    [Mars] => 3\n\
    \    [Jupiter] => 4\n    [Saturn] => 5\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpp5vtg9be.php:49\nStack trace:\n#0 /tmp/tmpp5vtg9be.php(58):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpp5vtg9be.php on line 49\n"
  timestamp: 1659823842
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n  $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  if(!in_array($planet1,\
    \ $planets) || !in_array($planet2, $planets)) {\n    return false;\n  }\n  $begin\
    \ = array_search($planet1, $planets);\n  $end = array_search($planet2, $planets);\n\
    \  $front = array_slice($planets, $begin + 1, $end - $begin - 1);\n  $back = array_slice($planets,\
    \ $end + 1, count($planets) - $end - 1);\n  return array_merge($front, $back);\n\
    }\n\n$planets = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\");\n\nprint_r(bf(\"Jupiter\", \"Neptune\"\
    ));\nprint_r(bf(\"Earth\", \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"\
    ));\nprint_r(bf(\"Jupiter\", \"Jupiter\"));\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Mars\n    [1] => Jupiter\n    [2] => Venus\n    [3] => Earth\n    [4] => Mars\n\
    \    [5] => Jupiter\n    [6] => Saturn\n    [7] => Uranus\n    [8] => Neptune\n\
    )\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n    [3] => Jupiter\n\
    \    [4] => Saturn\n    [5] => Neptune\n)\nArray\n(\n    [0] => Saturn\n    [1]\
    \ => Uranus\n    [2] => Saturn\n    [3] => Uranus\n    [4] => Neptune\n)\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmp8xtlcmji.php:42\nStack trace:\n\
    #0 /tmp/tmp8xtlcmji.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp8xtlcmji.php\
    \ on line 42\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\n        \"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    \n    );\n    if( ! in_array($planet1, $planets) || ! in_array($planet2, $planets))\n\
    \        return array();\n    $idx1 = array_search($planet1, $planets);\n    $idx2\
    \ = array_search($planet2, $planets);\n    $start = min($idx1, $idx2);\n    $end\
    \ = max($idx1, $idx2);\n    return array_slice($planets, $start+1, $end-$start-1);\n\
    }\n\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nprint_r(bf(\"Earth\", \"Mercury\"\
    ));\nprint_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args) {\n \
    \   return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\"\
    , \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmplckq3v9n.php:43\nStack trace:\n#0 /tmp/tmplckq3v9n.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmplckq3v9n.php on line 43\n"
  timestamp: 1659979783
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\n        'Mercury',\n\
    \        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n   \
    \     'Saturn',\n        'Uranus',\n        'Neptune'\n    );\n    if (!in_array($planet1,\
    \ $planets) || !in_array($planet2, $planets)) {\n        return array();\n   \
    \ }\n    $min = min(array_search($planet1, $planets), array_search($planet2, $planets));\n\
    \    $max = max(array_search($planet1, $planets), array_search($planet2, $planets));\n\
    \    $result = array();\n    for ($i = $min + 1; $i < $max; $i++) {\n        $result[]\
    \ = $planets[$i];\n    }\n    return $result;\n}\necho \"<pre>\";\nprint_r(bf(\"\
    Jupiter\", \"Neptune\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(bf(\"Earth\"\
    , \"Mercury\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(bf(\"Mercury\", \"\
    Uranus\"));\necho \"</pre>\";\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n</pre><pre>Array\n\
    (\n    [0] => Venus\n)\n</pre><pre>Array\n(\n    [0] => Venus\n    [1] => Earth\n\
    \    [2] => Mars\n    [3] => Jupiter\n    [4] => Saturn\n)\n</pre>"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n  $planets = array(\n    \"Mercury\",\n\
    \    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\"\
    ,\n    \"Uranus\",\n    \"Neptune\"\n  );\n  if (in_array($planet1, $planets)\
    \ && in_array($planet2, $planets)) {\n    $ind1 = array_search($planet1, $planets);\n\
    \    $ind2 = array_search($planet2, $planets);\n    if ($ind1 < $ind2) {\n   \
    \   return array_slice($planets, $ind1+1, $ind2-$ind1-1);\n    } else {\n    \
    \  return array_slice($planets, $ind2+1, $ind1-$ind2-1);\n    }\n  } else {\n\
    \    return array();\n  }\n}\n\n$test1 = bf(\"Jupiter\", \"Neptune\");\n$test2\
    \ = bf(\"Earth\", \"Mercury\");\n$test3 = bf(\"Mercury\", \"Uranus\");\n$test4\
    \ = bf(\"Uranus\", \"Earth\");\n$test5 = bf(\"Dog\", \"Cat\");\nprint_r($test1);\n\
    print_r($test2);\nprint_r($test3);\nprint_r($test4);\nprint_r($test5);\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\nArray\n(\n    [0] => Mars\n    [1] =>\
    \ Jupiter\n    [2] => Saturn\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpiqxeg1az.php:61\nStack trace:\n#0 /tmp/tmpiqxeg1az.php(66):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpiqxeg1az.php on line 61\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = [\"Mercury\", \"Venus\",\
    \ \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  $next_planet = \"\";\n    $planets_between = [];\n    if(in_array($planet1,\
    \ $planets) && in_array($planet2, $planets)) {\n        foreach($planets as $key\
    \ => $value) {\n            if($value == $planet1) {\n                $next_planet\
    \ = $planets[$key + 1];\n            }\n            if($next_planet == $planet2)\
    \ {\n                break;\n            }\n            if($next_planet != \"\"\
    \ && $next_planet != $planet2) {\n                $planets_between[] = $next_planet;\n\
    \                $next_planet = $planets[$key + 1];\n            }\n        }\n\
    \    }\n    return $planets_between;\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"));\n\
    echo \"</br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"</br>\";\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\necho \"</br>\";\nprint_r(bf(\"Earth\", \"Neptune\"));\n\
    echo \"</br>\";\nprint_r(bf(\"Jupiter\", \"Mars\"));\necho \"</br>\";\nprint_r(bf(\"\
    Saturn\", \"Venus\"));\necho \"</br>\";\nprint_r(bf(\"Pluto\", \"Neptune\"));\n\
    echo \"</br>\";\nprint_r(bf(\"Neptune\", \"Pluto\"));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Saturn\n    [2] => Uranus\n)\n\
    </br>\nWarning: Undefined array key 8 in /tmp/tmpyvziwjk5.php on line 32\nArray\n\
    (\n    [0] => Mars\n    [1] => Mars\n    [2] => Jupiter\n    [3] => Saturn\n \
    \   [4] => Uranus\n    [5] => Neptune\n)\n</br>Array\n(\n    [0] => Venus\n  \
    \  [1] => Venus\n    [2] => Earth\n    [3] => Mars\n    [4] => Jupiter\n    [5]\
    \ => Saturn\n)\n</br>Array\n(\n    [0] => Mars\n    [1] => Mars\n    [2] => Jupiter\n\
    \    [3] => Saturn\n    [4] => Uranus\n)\n</br>\nWarning: Undefined array key\
    \ 8 in /tmp/tmpyvziwjk5.php on line 32\nArray\n(\n    [0] => Saturn\n    [1] =>\
    \ Saturn\n    [2] => Uranus\n    [3] => Neptune\n)\n</br>\nWarning: Undefined\
    \ array key 8 in /tmp/tmpyvziwjk5.php on line 32\nArray\n(\n    [0] => Uranus\n\
    \    [1] => Uranus\n    [2] => Neptune\n)\n</br>Array\n(\n)\n</br>Array\n(\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyvziwjk5.php:58\nStack\
    \ trace:\n#0 /tmp/tmpyvziwjk5.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpyvziwjk5.php\
    \ on line 58\n"
  timestamp: 1659979783
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n  $planets = array(\"Mercury\",\"Venus\"\
    ,\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\",\"Uranus\",\"Neptune\");\n  $planets\
    \ = array_flip($planets);\n  $planets = array_flip($planets);\n  $planets_between\
    \ = array();\n  if(in_array($planet1, $planets) && in_array($planet2, $planets))\
    \ {\n    $key_first = array_search($planet1, $planets);\n    $key_second = array_search($planet2,\
    \ $planets);\n    if ($key_first > $key_second) {\n      for ($i = $key_second\
    \ + 1; $i < $key_first; $i++) {\n        $planets_between[] = $planets[$i];\n\
    \      }\n    } else {\n      for ($i = $key_first + 1; $i < $key_second; $i++)\
    \ {\n        $planets_between[] = $planets[$i];\n      }\n    }\n  }\n  return\
    \ $planets_between;\n}\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\t\
    if (in_array($planet1, $planets) && in_array($planet2, $planets)) {\n\t\t$planet1_index\
    \ = array_search($planet1, $planets);\n\t\t$planet2_index = array_search($planet2,\
    \ $planets);\n\t\t$flip = false;\n\t\tif ($planet1_index > $planet2_index) {\n\
    \t\t\t$flip = true;\n\t\t\t$temp = $planet1_index;\n\t\t\t$planet1_index = $planet2_index;\n\
    \t\t\t$planet2_index = $temp;\n\t\t}\n\t\t$planets_between = array();\n\t\tfor\
    \ ($i = $planet1_index + 1; $i < $planet2_index; $i++) {\n\t\t\t$planets_between[]\
    \ = $planets[$i];\n\t\t}\n\t\tif ($flip) {\n\t\t\t$planets_between = array_reverse($planets_between);\n\
    \t\t}\n\t\treturn $planets_between;\n\t}\n\treturn array();\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiwgavbip.php:50\n\
    Stack trace:\n#0 /tmp/tmpiwgavbip.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpiwgavbip.php\
    \ on line 50\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n  $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  $output\
    \ = array();\n  if(!in_array($planet1, $planets) || !in_array($planet2, $planets)){\n\
    \    return $output;\n  }elseif(($pos1 = array_search($planet1, $planets)) > ($pos2\
    \ = array_search($planet2, $planets))){\n    return $output;\n  }else{\n    for($i\
    \ = ($pos1 + 1); $i < $pos2; $i++){\n      $output[] = $planets[$i];\n    }\n\
    \    return $output;\n  }\n}\n$planet1 = \"Mercury\";\n$planet2 = \"Mars\";\n\
    echo '<pre>';\nprint_r(bf($planet1, $planet2));\necho '</pre>';\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Venus\n    [1] => Earth\n)\n</pre>\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp2ld89bdj.php:43\nStack trace:\n\
    #0 /tmp/tmp2ld89bdj.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp2ld89bdj.php\
    \ on line 43\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t// SOLUTION IS HERE\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgi8_rqko.php:27\n\
    Stack trace:\n#0 /tmp/tmpgi8_rqko.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpgi8_rqko.php\
    \ on line 27\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = [\"Mercury\", \"Venus\",\
    \ \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  $planets_between = [];\n    $planets_between2 = [];\n    $pos1 = array_search($planet1,\
    \ $planets);\n    $pos2 = array_search($planet2, $planets);\n    for ($i = 0;\
    \ $i < count($planets); $i++) {\n        if ($i >= $pos1 && $i <= $pos2) {\n \
    \           $planets_between[] = $planets[$i];\n        }\n        if ($i <= $pos1\
    \ && $i >= $pos2) {\n            $planets_between2[] = $planets[$i];\n       \
    \ }\n    }\n    if (count($planets_between) == 0) {\n        return $planets_between2;\n\
    \    } else {\n        return $planets_between;\n    }\n}\nprint_r(bf(\"Jupiter\"\
    , \"Neptune\"));\necho '<br>';\nprint_r(bf(\"Earth\", \"Mercury\"));\necho '<br>';\n\
    print_r(bf(\"Mercury\", \"Uranus\"));\n\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Jupiter\n    [1] => Saturn\n    [2] => Uranus\n  \
    \  [3] => Neptune\n)\n<br>Array\n(\n    [0] => Mercury\n    [1] => Venus\n   \
    \ [2] => Earth\n)\n<br>Array\n(\n    [0] => Mercury\n    [1] => Venus\n    [2]\
    \ => Earth\n    [3] => Mars\n    [4] => Jupiter\n    [5] => Saturn\n    [6] =>\
    \ Uranus\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphwcsh46u.php:49\n\
    Stack trace:\n#0 /tmp/tmphwcsh46u.php(58): test()\n#1 {main}\n  thrown in /tmp/tmphwcsh46u.php\
    \ on line 49\n"
  timestamp: 1659979783
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $ind1 = array_search($planet1, $planets);\n    $ind2 = array_search($planet2,\
    \ $planets);\n    if ($ind1 === false || $ind2 === false) {\n        return array();\n\
    \    }\n    $temp = array();\n    if ($ind1 > $ind2) {\n        for ($i = $ind2\
    \ + 1; $i < $ind1; $i++) {\n            $temp[] = $planets[$i];\n        }\n \
    \   } else {\n        for ($i = $ind1 + 1; $i < $ind2; $i++) {\n            $temp[]\
    \ = $planets[$i];\n        }\n    }\n    return $temp;\n}\necho \"<pre>\";\nprint_r(bf(\"\
    Jupiter\", \"Neptune\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(bf(\"Earth\"\
    , \"Mercury\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(bf(\"Mercury\", \"\
    Uranus\"));\necho \"</pre>\";\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n</pre><pre>Array\n\
    (\n    [0] => Venus\n)\n</pre><pre>Array\n(\n    [0] => Venus\n    [1] => Earth\n\
    \    [2] => Mars\n    [3] => Jupiter\n    [4] => Saturn\n)\n</pre>"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = [\n        \"Mercury\",\n\
    \        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\"\
    ,\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\n    ];\n   \
    \ $res = [];\n    if(in_array($planet1, $planets) && in_array($planet2, $planets))\
    \ {\n        $key1 = array_search($planet1, $planets);\n        $key2 = array_search($planet2,\
    \ $planets);\n        if($key1 < $key2) {\n            $res = array_slice($planets,\
    \ $key1+1, $key2-$key1-1);\n        } else {\n            $res = array_slice($planets,\
    \ $key2+1, $key1-$key2-1);\n        }\n    }\n    return $res;\n}\necho \"<pre>\"\
    ;\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho \"</pre>\";\necho \"<pre>\";\n\
    print_r(bf(\"Earth\", \"Mercury\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\necho \"</pre>\";\nfunction candidate(...$args) {\n \
    \   return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\"\
    , \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n</pre><pre>Array\n\
    (\n    [0] => Venus\n)\n</pre><pre>Array\n(\n    [0] => Venus\n    [1] => Earth\n\
    \    [2] => Mars\n    [3] => Jupiter\n    [4] => Saturn\n)\n</pre>\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp573540jz.php:59\nStack trace:\n\
    #0 /tmp/tmp573540jz.php(64): test()\n#1 {main}\n  thrown in /tmp/tmp573540jz.php\
    \ on line 59\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $b = array(\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $x\
    \ = array_search($planet1, $b);\n    $y = array_search($planet2, $b);\n    if\
    \ (($x != false) && ($y != false)) {\n        if ($x == $y) {\n            $res\
    \ = array();\n        } elseif ($x < $y) {\n            $res = array_slice($b,\
    \ $x + 1, $y - $x - 1);\n        } else {\n            $res = array_slice($b,\
    \ $y + 1, $x - $y - 1);\n        }\n    } else {\n        $res = false;\n    }\n\
    \    return $res;\n}\n\nvar_dump(bf(\"Jupiter\", \"Neptune\"));\necho \"<br>\"\
    ;\nvar_dump(bf(\"Earth\", \"Mercury\"));\necho \"<br>\";\nvar_dump(bf(\"Mercury\"\
    , \"Uranus\"));\necho \"<br>\";\nvar_dump(bf(\"Mercury\", \"Earth\"));\necho \"\
    <br>\";\nvar_dump(bf(\"Mercury\", \"Mercury\"));\necho \"<br>\";\nvar_dump(bf(\"\
    Jupiter\", \"Mercury\"));\necho \"<br>\";\nvar_dump(bf(\"Mercury\", \"Jupiter\"\
    ));\necho \"<br>\";\nvar_dump(bf(\"Jupiter\", \"Jupiter\"));\necho \"<br>\";\n\
    var_dump(bf(\"Mercury\", \"Saturn\"));\necho \"<br>\";\nvar_dump(bf(\"Earth\"\
    , \"Jupiter\"));\necho \"<br>\";\nvar_dump(bf(\"Venus\", \"Mars\"));\necho \"\
    <br>\";\nvar_dump(bf(\"Venus\", \"Mars\"));\necho \"<br>\";\nvar_dump(bf(\"Venus\"\
    , \"Mars\"));\necho \"<br>\";\nvar_dump(bf(\"Venus\", \"Mars\"));\necho \"<br>\"\
    ;\nvar_dump(bf(\"Venus\", \"Mars\"));\necho \"<br>\";\nvar_dump(bf(\"Venus\",\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpdep202pw.php on line 67

    '
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\n        \"Mercury\"\
    ,\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\"\
    ,\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\",\n    );\n  \
    \  $start = array_search($planet1, $planets);\n    $end = array_search($planet2,\
    \ $planets);\n    return ($start !== false && $end !== false) ? array_slice($planets,\
    \ $start + 1, $end - $start - 1) : array();\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"\
    ));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\", \"Mercury\"\
    ));\necho \"<br>\";\nprint_r(bf(\"Uranus\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mercury\", \"Jupiter\"));\necho \"<br>\";\nprint_r(bf(\"a\", \"Jupiter\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Mercury\", \"a\"));\necho \"<br>\";\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Mars\n    [1] => Jupiter\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n\
    \    [2] => Mars\n    [3] => Jupiter\n    [4] => Saturn\n)\n<br>Array\n(\n   \
    \ [0] => Venus\n    [1] => Earth\n    [2] => Mars\n    [3] => Jupiter\n    [4]\
    \ => Saturn\n    [5] => Uranus\n)\n<br>Array\n(\n)\n<br>Array\n(\n    [0] => Venus\n\
    \    [1] => Earth\n    [2] => Mars\n)\n<br>Array\n(\n)\n<br>Array\n(\n)\n<br>\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpsgpapnfr.php:55\nStack\
    \ trace:\n#0 /tmp/tmpsgpapnfr.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpsgpapnfr.php\
    \ on line 55\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$solarSystem = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\t\
    $result = array();\n\t$i = array_search($planet1, $solarSystem);\n\t$j = array_search($planet2,\
    \ $solarSystem);\n\tif ($i === false || $j === false) {\n\t\treturn array();\n\
    \t}\n\tif ($i == $j) {\n\t\treturn array();\n\t}\n\tif ($i > $j) {\n\t\t$temp\
    \ = $i;\n\t\t$i = $j;\n\t\t$j = $temp;\n\t}\n\tfor ($i; $i <= $j; $i++) {\n\t\t\
    $result[] = $solarSystem[$i];\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprvy8mk2z.php:45\n\
    Stack trace:\n#0 /tmp/tmprvy8mk2z.php(54): test()\n#1 {main}\n  thrown in /tmp/tmprvy8mk2z.php\
    \ on line 45\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\n    \"Mercury\",\n\
    \    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\"\
    ,\n    \"Uranus\",\n    \"Neptune\"\n    );\n    $key1 = array_search($planet1,\
    \ $planets);\n    $key2 = array_search($planet2, $planets);\n    if(($key1 !==\
    \ false) && ($key2 !== false)) {\n        $min = min($key1, $key2);\n        $max\
    \ = max($key1, $key2);\n        for($i = $min; $i <= $max; $i++) {\n         \
    \   $result[] = $planets[$i];\n        }\n        return $result;\n    } else\
    \ {\n        return array();\n    }\n}\n$planet1 = \"Mercury\";\n$planet2 = \"\
    Neptune\";\nprint_r(bf($planet1, $planet2));\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Mercury\n    [1] => Venus\n    [2] => Earth\n    [3]\
    \ => Mars\n    [4] => Jupiter\n    [5] => Saturn\n    [6] => Uranus\n    [7] =>\
    \ Neptune\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcixp2r89.php:50\n\
    Stack trace:\n#0 /tmp/tmpcixp2r89.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpcixp2r89.php\
    \ on line 50\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planets = array(\n\t\t\"Mercury\",\n\t\
    \t\"Venus\",\n\t\t\"Earth\",\n\t\t\"Mars\",\n\t\t\"Jupiter\",\n\t\t\"Saturn\"\
    ,\n\t\t\"Uranus\",\n\t\t\"Neptune\"\n\t);\n\t$planets_between = array();\n\t$from\
    \ = 0;\n\t$to = 0;\n\tfor ($i = 0; $i < count($planets); $i++) {\n\t\tif ($planets[$i]\
    \ == $planet1) {\n\t\t\t$from = $i;\n\t\t}\n\t\tif ($planets[$i] == $planet2)\
    \ {\n\t\t\t$to = $i;\n\t\t}\n\t}\n\tif ($from > $to) {\n\t\t$temp = $from;\n\t\
    \t$from = $to;\n\t\t$to = $temp;\n\t}\n\tfor ($i = $from; $i < $to; $i++) {\n\t\
    \t$planets_between[] = $planets[$i];\n\t}\n\treturn $planets_between;\n}\n\necho\
    \ \"<pre>\";\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho \"</pre>\";\n\necho\
    \ \"<pre>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"</pre>\";\n\necho \"\
    <pre>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Jupiter\n    [1] => Saturn\n    [2] => Uranus\n\
    )\n</pre><pre>Array\n(\n    [0] => Mercury\n    [1] => Venus\n)\n</pre><pre>Array\n\
    (\n    [0] => Mercury\n    [1] => Venus\n    [2] => Earth\n    [3] => Mars\n \
    \   [4] => Jupiter\n    [5] => Saturn\n)\n</pre>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmppuvfop0r.php:67\nStack trace:\n#0 /tmp/tmppuvfop0r.php(76):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmppuvfop0r.php on line 67\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planets = array('Mercury', 'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune');\n\tif (in_array($planet1,\
    \ $planets) && in_array($planet2, $planets)) {\n\t\t$planet1_key = array_search($planet1,\
    \ $planets);\n\t\t$planet2_key = array_search($planet2, $planets);\n\t\tif ($planet1_key\
    \ < $planet2_key) {\n\t\t\treturn array_slice($planets, $planet1_key + 1, $planet2_key\
    \ - $planet1_key - 1);\n\t\t} else {\n\t\t\treturn array_slice($planets, $planet2_key\
    \ + 1, $planet1_key - $planet2_key - 1);\n\t\t}\n\t} else {\n\t\treturn array();\n\
    \t}\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\"\
    , \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp1v7um0p.php:42\n\
    Stack trace:\n#0 /tmp/tmpp1v7um0p.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpp1v7um0p.php\
    \ on line 42\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $index1 = array_search($planet1, $planets);\n    $index2 = array_search($planet2,\
    \ $planets);\n    $result = array();\n    if($index1 == null || $index2 == null){\n\
    \        return $result;\n    }\n    elseif($index1 > $index2){\n        for($i\
    \ = $index2 + 1; $i < $index1; $i++){\n            array_push($result, $planets[$i]);\n\
    \        }\n    }\n    else{\n        for($i = $index1 + 1; $i < $index2; $i++){\n\
    \            array_push($result, $planets[$i]);\n        }\n    }\n    return\
    \ $result;\n}\nprint_r(bf(\"Earth\", \"Mercury\"));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv480qhn5.php:45\n\
    Stack trace:\n#0 /tmp/tmpv480qhn5.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpv480qhn5.php\
    \ on line 45\n"
  timestamp: 1659979783
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n  $planets = array(\n    \"Mercury\",\n\
    \    \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\"\
    ,\n    \"Uranus\",\n    \"Neptune\",\n  );\n  $pos1 = array_search($planet1, $planets);\n\
    \  $pos2 = array_search($planet2, $planets);\n  if ($pos1 === false || $pos2 ===\
    \ false) {\n    return array();\n  }\n  if ($pos1 > $pos2) {\n    $tmp = $pos1;\n\
    \    $pos1 = $pos2;\n    $pos2 = $tmp;\n  }\n  $result = array();\n  for ($i =\
    \ $pos1 + 1; $i < $pos2; $i++) {\n    $result[] = $planets[$i];\n  }\n  return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n  $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  if\
    \ (!in_array($planet1, $planets) || !in_array($planet2, $planets)) {\n    return\
    \ \"Your planet name is incorrect\";\n  } else {\n    $start = array_search($planet1,\
    \ $planets);\n    $end = array_search($planet2, $planets);\n    if ($start > $end)\
    \ {\n      $tmp = $start;\n      $start = $end;\n      $end = $tmp;\n    }\n \
    \   $arr = array();\n    for ($i = $start + 1; $i < $end; $i++) {\n      $arr[]\
    \ = $planets[$i];\n    }\n    return $arr;\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy_nh39wg.php:49\n\
    Stack trace:\n#0 /tmp/tmpy_nh39wg.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpy_nh39wg.php\
    \ on line 49\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planet_names = array(\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    );\n\t$position1 = array_search($planet1, $planet_names);\n\t$position2 = array_search($planet2,\
    \ $planet_names);\n\tif ($position1 === false or $position2 === false) return\
    \ array();\n\tif ($position1 < $position2) return array_slice($planet_names, $position1\
    \ + 1, $position2 - $position1 - 1);\n\telse return array_slice($planet_names,\
    \ $position2 + 1, $position1 - $position2 - 1);\n}\necho \"<pre>\";\nprint_r(bf(\"\
    Earth\", \"Mercury\"));\necho \"</pre>\";\n\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Venus\n)\n</pre>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpz7iutxta.php:39\nStack trace:\n#0 /tmp/tmpz7iutxta.php(44):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpz7iutxta.php on line 39\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = [\n        'Mercury',\n \
    \       'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n    \
    \    'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    if (!in_array($planet1,\
    \ $planets) || !in_array($planet2, $planets)) {\n        return array();\n   \
    \ }\n    $planet_index_1 = array_search($planet1, $planets);\n    $planet_index_2\
    \ = array_search($planet2, $planets);\n    $sort_by_sun = array_slice($planets,\
    \ $planet_index_1 + 1, $planet_index_2 - $planet_index_1 - 1);\n    return $sort_by_sun;\n\
    }\n$result = bf(\"Jupiter\", \"Neptune\");\nvar_dump($result);\necho \"<br>\"\
    ;\n$result = bf(\"Earth\", \"Mercury\");\nvar_dump($result);\necho \"<br>\";\n\
    $result = bf(\"Mercury\", \"Uranus\");\nvar_dump($result);\necho \"<br>\";\n$result\
    \ = bf(\"Planet\", \"Venus\");\nvar_dump($result);\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(2) {\n  [0]=>\n  string(6) \"Saturn\"\n  [1]=>\n  string(6) \"Uranus\"\
    \n}\n<br>array(2) {\n  [0]=>\n  string(4) \"Mars\"\n  [1]=>\n  string(7) \"Jupiter\"\
    \n}\n<br>array(5) {\n  [0]=>\n  string(5) \"Venus\"\n  [1]=>\n  string(5) \"Earth\"\
    \n  [2]=>\n  string(4) \"Mars\"\n  [3]=>\n  string(7) \"Jupiter\"\n  [4]=>\n \
    \ string(6) \"Saturn\"\n}\n<br>array(0) {\n}\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp5x554vr9.php:54\nStack trace:\n#0 /tmp/tmp5x554vr9.php(62):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp5x554vr9.php on line 54\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $planets = array_flip($planets);\n    if (!isset($planets[$planet1]) || !isset($planets[$planet2]))\
    \ {\n        return [];\n    }\n    $res = [];\n    $start = min($planets[$planet1],\
    \ $planets[$planet2]);\n    $end = max($planets[$planet1], $planets[$planet2]);\n\
    \    for ($i = $start; $i <= $end; $i++) {\n        $res[] = array_search($i,\
    \ $planets);\n    }\n    return $res;\n}\n\nprint_r(bf(\"Earth\", \"Mercury\"\
    ));\necho \"<br>\";\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho \"<br>\";\n\
    print_r(bf(\"Mercury\", \"Uranus\"));\necho \"<br>\";\nprint_r(bf(\"Jupiter\"\
    , \"Venus\"));\necho \"<br>\";\nprint_r(bf(\"Jupiter\", \"Mars\"));\necho \"<br>\"\
    ;\nprint_r(bf(\"Mercury\", \"Mars\"));\necho \"<br>\";\nprint_r(bf(\"Venus\",\
    \ \"Mars\"));\necho \"<br>\";\nprint_r(bf(\"Venus\", \"Earth\"));\necho \"<br>\"\
    ;\nprint_r(bf(\"Mars\", \"Jupiter\"));\necho \"<br>\";\nprint_r(bf(\"Mars\", \"\
    Venus\"));\necho \"<br>\";\nprint_r(bf(\"Mars\", \"Earth\"));\necho \"<br>\";\n\
    print_r(bf(\"Venus\", \"Jupiter\"));\necho \"<br>\";\nprint_r(bf(\"Venus\", \"\
    Saturn\"));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Saturn\"));\necho \"<br>\"\
    ;\nprint_r(bf(\"Earth\", \"Neptune\"));\necho \"<br>\";\nprint_r(bf(\"Mars\",\
    \ \"Neptune\"));\necho \"<br>\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Jupiter", expecting "," or ";"
    in /tmp/tmpuwozqvz8.php on line 70

    '
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n  $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  $planets\
    \ = array_flip($planets);\n  if (isset($planets[$planet1]) && isset($planets[$planet2]))\
    \ {\n    $planets = array_flip($planets);\n    $planets = array_slice($planets,\
    \ min($planets[$planet1], $planets[$planet2]), abs($planets[$planet1] - $planets[$planet2]));\n\
    \    $key = array_search($planet1, $planets);\n    if ($key > 0) {\n      $planets\
    \ = array_reverse($planets);\n    }\n    return $planets;\n  }\n  return array();\n\
    }\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key \"Jupiter\" in /tmp/tmp30m08oxq.php on line\
    \ 23\n\nWarning: Undefined array key \"Neptune\" in /tmp/tmp30m08oxq.php on line\
    \ 23\n\nWarning: Undefined array key \"Jupiter\" in /tmp/tmp30m08oxq.php on line\
    \ 23\n\nWarning: Undefined array key \"Neptune\" in /tmp/tmp30m08oxq.php on line\
    \ 23\n\nDeprecated: array_slice(): Passing null to parameter #2 ($offset) of type\
    \ int is deprecated in /tmp/tmp30m08oxq.php on line 23\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp30m08oxq.php:38\nStack trace:\n#0 /tmp/tmp30m08oxq.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp30m08oxq.php on line 38\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $solarSystem = array(\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    );\n    $planet1Position = array_search($planet1, $solarSystem);\n    $planet2Position\
    \ = array_search($planet2, $solarSystem);\n    $result = [];\n    if($planet1Position\
    \ < $planet2Position) {\n        for($i = $planet1Position+1; $i < $planet2Position;\
    \ $i++) {\n            array_push($result, $solarSystem[$i]);\n        }\n   \
    \ } else {\n        for($i = $planet2Position+1; $i < $planet1Position; $i++)\
    \ {\n            array_push($result, $solarSystem[$i]);\n        }\n    }\n  \
    \  return $result;\n}\nprint_r(bf(\"Earth\", \"Mercury\"));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Venus\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp8m18nkh6.php:46\nStack trace:\n#0 /tmp/tmp8m18nkh6.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp8m18nkh6.php on line 46\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\t\n\
    \t$p1 = array_search($planet1, $planets);\n\t$p2 = array_search($planet2, $planets);\n\
    \t\n\tif(is_null($p1) || is_null($p2))\n\t\treturn false;\n\telse {\n\t\t$result\
    \ = array();\n\t\t\n\t\tfor($i = $p1; $i <= $p2; $i++) {\n\t\t\tif($i != $p1 &&\
    \ $i != $p2)\n\t\t\t\t$result[] = $planets[$i];\n\t\t}\n\t\t\n\t\treturn $result;\n\
    \t}\n}\n\necho \"<pre>\";\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho \"</pre>\"\
    ;\n\necho \"<pre>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"</pre>\";\n\
    \necho \"<pre>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\necho \"</pre>\";\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n</pre><pre>Array\n\
    (\n)\n</pre><pre>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n</pre>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmppzuvjnfg.php:55\nStack trace:\n#0 /tmp/tmppzuvjnfg.php(63):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmppzuvjnfg.php on line 55\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planet1 = strtolower($planet1);\n\t$planet2\
    \ = strtolower($planet2);\n\t$planets = array(\"mercury\", \"venus\", \"earth\"\
    , \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\");\n\t$index1 = array_search($planet1,\
    \ $planets);\n\t$index2 = array_search($planet2, $planets);\n\tif ($index1 ===\
    \ false || $index2 === false) {\n\t\treturn array();\n\t}\n\tif ($index1 > $index2)\
    \ {\n\t\treturn array_slice($planets, $index2, $index1 - $index2 + 1);\n\t} else\
    \ {\n\t\treturn array_slice($planets, $index1, $index2 - $index1 + 1);\n\t}\n\
    }\n\nprint_r(bf(\"Earth\", \"Mercury\"));\n\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => mercury\n    [1] => venus\n    [2] => earth\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmphtsi342s.php:41\nStack\
    \ trace:\n#0 /tmp/tmphtsi342s.php(50): test()\n#1 {main}\n  thrown in /tmp/tmphtsi342s.php\
    \ on line 41\n"
  timestamp: 1659979783
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = [\"Mercury\", \"Venus\",\
    \ \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  $planet1_index = array_search($planet1, $planets);\n    $planet2_index = array_search($planet2,\
    \ $planets);\n    $planet_in_between = [];\n    if ($planet1_index === false ||\
    \ $planet2_index === false) {\n        return $planet_in_between;\n    }\n   \
    \ if ($planet1_index > $planet2_index) {\n        $max_index = $planet1_index;\n\
    \        $min_index = $planet2_index;\n    } else {\n        $max_index = $planet2_index;\n\
    \        $min_index = $planet1_index;\n    }\n    for ($i = $min_index + 1; $i\
    \ < $max_index; $i++) {\n        $planet_in_between[] = $planets[$i];\n    }\n\
    \    return $planet_in_between;\n}\n$result = bf(\"Mercury\", \"Uranus\");\nprint_r($result);\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n    [3]\
    \ => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $list = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $i1 = array_search($planet1, $list);\n    $i2 = array_search($planet2, $list);\n\
    \    if ($i1 === false || $i2 === false) {\n        return array();\n    }\n \
    \   if ($i1 < $i2) {\n        return array_slice($list, $i1 + 1, $i2 - $i1 - 1);\n\
    \    } else {\n        return array_slice($list, $i2 + 1, $i1 - $i2 - 1);\n  \
    \  }\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\"\
    , \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp05w9d0y6.php:41\n\
    Stack trace:\n#0 /tmp/tmp05w9d0y6.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp05w9d0y6.php\
    \ on line 41\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $firstPlanet = array_search($planet1, $planets);\n    $secondPlanet = array_search($planet2,\
    \ $planets);\n    if ($firstPlanet === false || $secondPlanet === false) {\n \
    \       return [];\n    }\n    $planets = array_slice($planets, $firstPlanet +\
    \ 1, $secondPlanet - $firstPlanet - 1);\n    return $planets;\n}\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppw9jvc8z.php:34\n\
    Stack trace:\n#0 /tmp/tmppw9jvc8z.php(42): test()\n#1 {main}\n  thrown in /tmp/tmppw9jvc8z.php\
    \ on line 34\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = [\n        \"Mercury\",\n\
    \        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\"\
    ,\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\n    ];\n   \
    \ $pos1 = array_search($planet1, $planets);\n    $pos2 = array_search($planet2,\
    \ $planets);\n    if ($pos1 === false || $pos2 === false) {\n        return [];\n\
    \    } else {\n        if ($pos1 <= $pos2) {\n            return array_slice($planets,\
    \ $pos1 + 1, $pos2 - $pos1 - 1);\n        } else {\n            return array_slice($planets,\
    \ $pos2 + 1, $pos1 - $pos2 - 1);\n        }\n    }\n}\nprint_r(bf(\"Earth\", \"\
    Mars\"));\nprint_r(bf(\"Mars\", \"Earth\"));\nprint_r(bf(\"Jupiter\", \"Neptune\"\
    ));\nprint_r(bf(\"Earth\", \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"\
    ));\nprint_r(bf(\"Mars\", \"Neptune\"));\nprint_r(bf(\"Neptune\", \"Mars\"));\n\
    print_r(bf(\"Jupiter\", \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Jupiter\"));\n\
    print_r(bf(\"Saturn\", \"Earth\"));\nprint_r(bf(\"Earth\", \"Saturn\"));\nprint_r(bf(\"\
    Uranus\", \"Venus\"));\nprint_r(bf(\"Venus\", \"Uranus\"));\nprint_r(bf(\"Uranus\"\
    , \"Neptune\"));\nprint_r(bf(\"Neptune\", \"Uranus\"));\nprint_r(bf(\"Neptune\"\
    , \"Venus\"));\nprint_r(bf(\"Venus\", \"Neptune\"));\nprint_r(bf(\"Saturn\", \"\
    Uranus\"));\nprint_r(bf(\"Uranus\", \"Saturn\"));\nprint_r(bf(\"Jupiter\", \"\
    Venus\"));\nprint_r(bf(\"Venus\", \"Jupiter\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Jupiter", expecting ")" in /tmp/tmpalaa5n4n.php
    on line 67

    '
  timestamp: 1659979783
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planets = [\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\t$o_planet1\
    \ = array_search($planet1, $planets);\n\t$o_planet2 = array_search($planet2, $planets);\n\
    \tif ($o_planet1 === false || $o_planet2 === false) {\n\t\treturn [];\n\t}\n\t\
    $result = [];\n\tif ($o_planet1 < $o_planet2) {\n\t\tfor ($i = $o_planet1 + 1;\
    \ $i < $o_planet2; $i++) {\n\t\t\t$result[] = $planets[$i];\n\t\t}\n\t} else {\n\
    \t\tfor ($i = $o_planet2 + 1; $i < $o_planet1; $i++) {\n\t\t\t$result[] = $planets[$i];\n\
    \t\t}\n\t}\n\treturn $result;\n}\n$bf = bf(\"Jupiter\", \"Neptune\");\nprint_r($bf);\n\
    echo \"<br>\";\n$bf = bf(\"Earth\", \"Mercury\");\nprint_r($bf);\necho \"<br>\"\
    ;\n$bf = bf(\"Mercury\", \"Uranus\");\nprint_r($bf);\necho \"<br>\";\n$bf = bf(\"\
    Jupiter\", \"Saturn\");\nprint_r($bf);\necho \"<br>\";\n$bf = bf(\"Earth\", \"\
    Earth\");\nprint_r($bf);\necho \"<br>\";\n$bf = bf(\"Saturn\", \"Earth\");\nprint_r($bf);\n\
    echo \"<br>\";\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n<br>Array\n(\n)\n<br>Array\n(\n)\n\
    <br>Array\n(\n    [0] => Mars\n    [1] => Jupiter\n)\n<br>"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n  \n}\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp58cs2xcq.php:26\n\
    Stack trace:\n#0 /tmp/tmp58cs2xcq.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp58cs2xcq.php\
    \ on line 26\n"
  timestamp: 1659979783
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\t\n\
    \t// Placeholder variables for the position of the two planets given\n\t$position1\
    \ = -1;\n\t$position2 = -1;\n\t\n\tfor ($i = 0; $i < sizeof($planets); $i++) {\n\
    \t\tif ($planets[$i] == $planet1) {\n\t\t\t$position1 = $i;\n\t\t}\n\t\tif ($planets[$i]\
    \ == $planet2) {\n\t\t\t$position2 = $i;\n\t\t}\n\t}\n\t\n\t// If either planet\
    \ is not valid, return an empty array\n\tif ($position1 == -1 || $position2 ==\
    \ -1) {\n\t\treturn array();\n\t}\n\t\n\t$min = min($position1, $position2);\n\
    \t$max = max($position1, $position2);\n\t\n\t$newPlanets = array();\n\t\n\tfor\
    \ ($i = $min + 1; $i < $max; $i++) {\n\t\tarray_push($newPlanets, $planets[$i]);\n\
    \t}\n\t\n\treturn $newPlanets;\n}\n\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979783
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  if (!in_array($planet1, $planets) || !in_array($planet2, $planets)) {\n   \
    \     return array();\n    }\n    $p1 = array_search($planet1, $planets);\n  \
    \  $p2 = array_search($planet2, $planets);\n    if ($p1 === $p2) {\n        return\
    \ array();\n    }\n    if ($p1 > $p2) {\n        $tmp = $p1;\n        $p1 = $p2;\n\
    \        $p2 = $tmp;\n    }\n    return array_slice($planets, $p1+1, $p2-$p1-1);\n\
    }\n\n$planet1 = $_GET['planet1'];\n$planet2 = $_GET['planet2'];\n$a = bf($planet1,\
    \ $planet2);\necho \"<pre>\";\nprint_r($a);\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key "planet1" in /tmp/tmpxxgrskw4.php on line 36


    Warning: Undefined array key "planet2" in /tmp/tmpxxgrskw4.php on line 37

    <pre>Array

    (

    )

    '
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n  $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  $start\
    \ = array_search($planet1, $planets);\n  $end = array_search($planet2, $planets);\n\
    \  $result = array();\n  if($start === false || $end === false) {\n    return\
    \ $result;\n  }\n  for($i = $start + 1; $i < $end; $i++) {\n    $result[] = $planets[$i];\n\
    \  }\n  return $result;\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho bf(\"\
    Earth\", \"Mercury\");\nprint_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n\nWarning: Array to\
    \ string conversion in /tmp/tmp38zfd21_.php on line 32\nArrayArray\n(\n    [0]\
    \ => Venus\n    [1] => Earth\n    [2] => Mars\n    [3] => Jupiter\n    [4] =>\
    \ Saturn\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp38zfd21_.php:40\n\
    Stack trace:\n#0 /tmp/tmp38zfd21_.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp38zfd21_.php\
    \ on line 40\n"
  timestamp: 1659979783
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planets = [\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\t$size\
    \ = count($planets);\n\t$result = [];\n\t$index1 = -1;\n\t$index2 = -1;\n\tfor\
    \ ($i = 0; $i < $size; $i++) {\n\t\tif ($planets[$i] == $planet1) {\n\t\t\t$index1\
    \ = $i;\n\t\t}\n\t\tif ($planets[$i] == $planet2) {\n\t\t\t$index2 = $i;\n\t\t\
    }\n\t}\n\tif ($index1 == -1 || $index2 == -1) {\n\t\treturn $result;\n\t}\n\t\
    if ($index1 > $index2) {\n\t\t$temp = $index1;\n\t\t$index1 = $index2;\n\t\t$index2\
    \ = $temp;\n\t}\n\tfor ($i = $index1 + 1; $i < $index2; $i++) {\n\t\t$result[]\
    \ = $planets[$i];\n\t}\n\treturn $result;\n}\n$result = bf(\"Jupiter\", \"Neptune\"\
    );\nvar_dump($result);\n$result = bf(\"Earth\", \"Mercury\");\nvar_dump($result);\n\
    $result = bf(\"Mercury\", \"Uranus\");\nvar_dump($result);\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(2) {\n  [0]=>\n  string(6) \"Saturn\"\n  [1]=>\n  string(6) \"Uranus\"\
    \n}\narray(1) {\n  [0]=>\n  string(5) \"Venus\"\n}\narray(5) {\n  [0]=>\n  string(5)\
    \ \"Venus\"\n  [1]=>\n  string(5) \"Earth\"\n  [2]=>\n  string(4) \"Mars\"\n \
    \ [3]=>\n  string(7) \"Jupiter\"\n  [4]=>\n  string(6) \"Saturn\"\n}\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\n        \"Mercury\"\
    ,\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\"\
    ,\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\",\n    );\n  \
    \  $planet1_key = array_search($planet1, $planets);\n    $planet2_key = array_search($planet2,\
    \ $planets);\n    if ($planet1_key !== false && $planet2_key !== false) {\n  \
    \      $ret = array();\n        $start = min($planet1_key, $planet2_key);\n  \
    \      $end = max($planet1_key, $planet2_key);\n        for ($i = $start; $i <=\
    \ $end; $i++) {\n            $ret[] = $planets[$i];\n        }\n        return\
    \ $ret;\n    } else {\n        return array();\n    }\n}\necho \"<pre>\";\nprint_r(bf(\"\
    Jupiter\", \"Neptune\"));\nprint_r(bf(\"Earth\", \"Mercury\"));\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\necho \"</pre>\";\n\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Jupiter\n    [1] => Saturn\n    [2] => Uranus\n\
    \    [3] => Neptune\n)\nArray\n(\n    [0] => Mercury\n    [1] => Venus\n    [2]\
    \ => Earth\n)\nArray\n(\n    [0] => Mercury\n    [1] => Venus\n    [2] => Earth\n\
    \    [3] => Mars\n    [4] => Jupiter\n    [5] => Saturn\n    [6] => Uranus\n)\n\
    </pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj6otn85z.php:54\n\
    Stack trace:\n#0 /tmp/tmpj6otn85z.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpj6otn85z.php\
    \ on line 54\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $planet1_index = array_search($planet1, $planets);\n    $planet2_index = array_search($planet2,\
    \ $planets);\n    if($planet1_index === false || $planet2_index === false) {\n\
    \        return false;\n    }\n    if($planet1_index < $planet2_index) {\n   \
    \     return array_slice($planets, $planet1_index + 1, $planet2_index - $planet1_index\
    \ - 1);\n    } else {\n        return array_slice($planets, $planet2_index + 1,\
    \ $planet1_index - $planet2_index - 1);\n    }\n}\n$result = bf(\"Earth\", \"\
    Mercury\");\necho json_encode($result) . \"\\n\";\n$result = bf(\"Mercury\", \"\
    Uranus\");\necho json_encode($result) . \"\\n\";\n$result = bf(\"Jupiter\", \"\
    Neptune\");\necho json_encode($result) . \"\\n\";\n$result = bf(\"Lun\", \"Uranus\"\
    );\necho json_encode($result) . \"\\n\";\n\nfunction candidate(...$args) {\n \
    \   return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\"\
    , \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "[\"Venus\"]\n[\"Venus\",\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\"]\n[\"\
    Saturn\",\"Uranus\"]\nfalse\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpj10uvrbn.php:49\nStack trace:\n#0 /tmp/tmpj10uvrbn.php(54): test()\n\
    #1 {main}\n  thrown in /tmp/tmpj10uvrbn.php on line 49\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t// get planets' index\n\t$pIndex = array(\n\
    \t\t'Mercury' => 0,\n\t\t'Venus' => 1,\n\t\t'Earth' => 2,\n\t\t'Mars' => 3,\n\t\
    \t'Jupiter' => 4,\n\t\t'Saturn' => 5,\n\t\t'Uranus' => 6,\n\t\t'Neptune' => 7,\n\
    \t);\n\t$planets = array_keys($pIndex);\n\tif(!in_array($planet1, $planets) ||\
    \ !in_array($planet2, $planets)) {\n\t\treturn false;\n\t}\n\t$index1 = $pIndex[$planet1];\n\
    \t$index2 = $pIndex[$planet2];\n\t$min = min($index1, $index2);\n\t$max = max($index1,\
    \ $index2);\n\tif($min == $max) {\n\t\treturn array();\n\t}\n\t$arr = array();\n\
    \tfor($i = $min+1; $i < $max; $i++) {\n\t\t$arr[] = $planets[$i];\n\t}\n\treturn\
    \ $arr;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppq5ja8ur.php:59\n\
    Stack trace:\n#0 /tmp/tmppq5ja8ur.php(62): test()\n#1 {main}\n  thrown in /tmp/tmppq5ja8ur.php\
    \ on line 59\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $planet1_index = array_search($planet1, $planets);\n    $planet2_index = array_search($planet2,\
    \ $planets);\n    $between_planets = array();\n    $index = 0;\n    for ($i =\
    \ $planet1_index; $i < $planet2_index; $i++) {\n        $between_planets[$index]\
    \ = $planets[$i];\n        $index += 1;\n    }\n    return $between_planets;\n\
    }\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho \"\\n\";\nprint_r(bf(\"Earth\"\
    , \"Mercury\"));\necho \"\\n\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\necho \"\
    \\n\";\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\"\
    , \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Jupiter\n    [1] => Saturn\n    [2] => Uranus\n)\n\
    \nArray\n(\n)\n\nArray\n(\n    [0] => Mercury\n    [1] => Venus\n    [2] => Earth\n\
    \    [3] => Mars\n    [4] => Jupiter\n    [5] => Saturn\n)\n\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpvt4kt40p.php:41\nStack trace:\n#0 /tmp/tmpvt4kt40p.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpvt4kt40p.php on line 41\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\t\
    $array = array();\n\t$planet1_index = array_search($planet1, $planets);\n\t$planet2_index\
    \ = array_search($planet2, $planets);\n\tif (false === $planet1_index || false\
    \ === $planet2_index) {\n\t\treturn $array;\n\t}\n\tif ($planet1_index < $planet2_index)\
    \ {\n\t\treturn array_slice($planets, $planet1_index + 1, $planet2_index - $planet1_index\
    \ - 1);\n\t} else {\n\t\treturn array_slice($planets, $planet2_index + 1, $planet1_index\
    \ - $planet2_index - 1);\n\t}\n}\n\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_k7vogvg.php:42\n\
    Stack trace:\n#0 /tmp/tmp_k7vogvg.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp_k7vogvg.php\
    \ on line 42\n"
  timestamp: 1659979783
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n  $planets = [\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  $index1\
    \ = array_search($planet1, $planets);\n  $index2 = array_search($planet2, $planets);\n\
    \  $result = [];\n  if ($index1 !== false && $index2 !== false) {\n    if ($index1\
    \ < $index2) {\n      $result = array_slice($planets, $index1 + 1, $index2 - $index1\
    \ - 1);\n    } elseif ($index1 > $index2) {\n      $result = array_slice($planets,\
    \ $index2 + 1, $index1 - $index2 - 1);\n    }\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $solarSystem = array(\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    );\n    $return = array();\n    $found1 = false;\n    $found2 = false;\n    foreach\
    \ ($solarSystem as $planet) {\n        if ($planet1 == $planet) {\n          \
    \  $found1 = true;\n        } else if ($planet2 == $planet) {\n            $found2\
    \ = true;\n        }\n        if ($found1 && !$found2) {\n            $return[]\
    \ = $planet;\n        }\n    }\n    return $return;\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeln00d9c.php:41\n\
    Stack trace:\n#0 /tmp/tmpeln00d9c.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpeln00d9c.php\
    \ on line 41\n"
  timestamp: 1659979783
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $order = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $p1 = array_search($planet1, $order);\n    $p2 = array_search($planet2, $order);\n\
    \    if($p1 === false || $p2 === false) {\n        return array();\n    }\n  \
    \  if($p1 < $p2) {\n        return array_slice($order, $p1+1, $p2-$p1-1);\n  \
    \  } else if($p1 > $p2) {\n        return array_slice($order, $p2+1, $p1-$p2-1);\n\
    \    } else {\n        return array();\n    }\n}\n$p1 = \"Mercury\";\n$p2 = \"\
    Uranus\";\n$res = bf($p1, $p2);\nprint_r($res);\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n    [3]\
    \ => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\n        \"Mercury\"\
    ,\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\"\
    ,\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\",\n    );\n  \
    \  if (in_array($planet1, $planets) && in_array($planet2, $planets)) {\n     \
    \   $pos1 = array_search($planet1, $planets);\n        $pos2 = array_search($planet2,\
    \ $planets);\n        if ($pos1 < $pos2) {\n            return array_slice($planets,\
    \ $pos1 + 1, $pos2 - $pos1 - 1);\n        } else {\n            return array_slice($planets,\
    \ $pos2 + 1, $pos1 - $pos2 - 1);\n        }\n    } else {\n        return \"Oops!\"\
    ;\n    }\n}\n\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho \"<br>\";\nprint_r(bf(\"\
    Earth\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Earth\", \"Mars\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mercury\", \"Earth\"));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Jupiter\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Jupiter\", \"Jupiter\"));\necho \"<br>\";\nprint_r(bf(\"\
    Earth\", \"Earth\"));\necho \"<br>\";\nprint_r(bf(\"Nonsense\", \"Complete\"));\n\
    echo \"<br>\";\nprint_r(bf(\"Earth\", \"Nonsense\"));\necho \"<br>\";\nprint_r(bf(\"\
    Jupiter\", \"Nonsense\"));\necho \"<br>\";\nprint_r(bf(\"Nonsense\", \"Jupiter\"\
    ));\necho \"<br>\";\nprint_r(bf(\"Nonsense\", \"Nonsense\"));\necho \"<br>\";\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n<br>Array\n(\n)\n<br>Array\n(\n   \
    \ [0] => Venus\n)\n<br>Array\n(\n    [0] => Mars\n)\n<br>Array\n(\n    [0] =>\
    \ Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0] => Mars\n    [1] => Jupiter\n\
    \    [2] => Saturn\n    [3] => Uranus\n)\n<br>Oops!<br>Oops!<br>Oops!<br>Oops!<br>Oops!<br>\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpwiu_s_uw.php:77\nStack\
    \ trace:\n#0 /tmp/tmpwiu_s_uw.php(82): test()\n#1 {main}\n  thrown in /tmp/tmpwiu_s_uw.php\
    \ on line 77\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n  $orbit_positions = array(\"Mercury\",\
    \ \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    );\n  $position_of_planet1 = array_search($planet1, $orbit_positions);\n  $position_of_planet2\
    \ = array_search($planet2, $orbit_positions);\n  if ( ($position_of_planet1 ==\
    \ false) or ($position_of_planet2 == false) ) {\n    return \"Input is incorrect!\"\
    ;\n  }\n  if ($position_of_planet1 > $position_of_planet2) {\n    $temp = $position_of_planet1;\n\
    \    $position_of_planet1 = $position_of_planet2;\n    $position_of_planet2 =\
    \ $temp;\n  }\n  $position_of_planet1++;\n  $position_of_planet2--;\n  $result\
    \ = array();\n  for ($i = $position_of_planet1; $i <= $position_of_planet2; $i++)\
    \ {\n    $result[] = $orbit_positions[$i];\n  }\n  return $result;\n}\nprint_r(bf(\"\
    Earth\", \"Neptune\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Mars\n    [1] => Jupiter\n    [2] => Saturn\n    [3]\
    \ => Uranus\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq65tesin.php:45\n\
    Stack trace:\n#0 /tmp/tmpq65tesin.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpq65tesin.php\
    \ on line 45\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planetList = array(\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    );\n    $firstPlanet = NULL;\n    $secondPlanet = NULL;\n    foreach ($planetList\
    \ as $planet) {\n        if ($planet1 == $planet) {\n            $firstPlanet\
    \ = $planet;\n        }\n        if ($planet2 == $planet) {\n            $secondPlanet\
    \ = $planet;\n        }\n    }\n    if ($firstPlanet == NULL || $secondPlanet\
    \ == NULL) {\n        return NULL;\n    }\n    $index1 = array_search($firstPlanet,\
    \ $planetList);\n    $index2 = array_search($secondPlanet, $planetList);\n   \
    \ $returnArray = [];\n    if ($index1 > $index2) {\n        for ($i = $index2;\
    \ $i <= $index1; $i++) {\n            $returnArray[] = $planetList[$i];\n    \
    \    }\n    } else {\n        for ($i = $index1; $i <= $index2; $i++) {\n    \
    \        $returnArray[] = $planetList[$i];\n        }\n    }\n    return $returnArray;\n\
    }\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxa88_xc4.php:52\n\
    Stack trace:\n#0 /tmp/tmpxa88_xc4.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpxa88_xc4.php\
    \ on line 52\n"
  timestamp: 1659979783
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\n        'Mercury',\n\
    \        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n   \
    \     'Saturn',\n        'Uranus',\n        'Neptune',\n    );\n    if(!in_array($planet1,\
    \ $planets) || !in_array($planet2, $planets)) {\n        return array();\n   \
    \ }\n    $planet1_index = array_search($planet1, $planets);\n    $planet2_index\
    \ = array_search($planet2, $planets);\n    if($planet1_index < $planet2_index)\
    \ {\n        $start = $planet1_index;\n        $end = $planet2_index;\n    } else\
    \ {\n        $start = $planet2_index;\n        $end = $planet1_index;\n    }\n\
    \    $result = array();\n    for($i = $start + 1; $i < $end; $i++) {\n       \
    \ $result[] = $planets[$i];\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $array = [\n        1 => \"Mercury\"\
    ,\n        2 => \"Venus\",\n        3 => \"Earth\",\n        4 => \"Mars\",\n\
    \        5 => \"Jupiter\",\n        6 => \"Saturn\",\n        7 => \"Uranus\"\
    ,\n        8 => \"Neptune\"\n    ];\n    $result = [];\n    $start = array_search($planet1,\
    \ $array);\n    $end = array_search($planet2, $array);\n    if($start == $end)\
    \ {\n        return [$array[$start]];\n    }\n    if($start < $end) {\n      \
    \  for($i = $start; $i <= $end; $i++) {\n            array_push($result, $array[$i]);\n\
    \        }\n    }\n    else {\n        for($i = $start; $i >= $end; $i--) {\n\
    \            array_push($result, $array[$i]);\n        }\n    }\n    return $result;\n\
    }\nprint_r(bf(\"Earth\", \"Mars\"));\nprint_r(bf(\"Jupiter\", \"Neptune\"));\n\
    print_r(bf(\"Earth\", \"Mercury\"));\nprint_r(bf(\"Mercury\", \"Uranus\"));\n\
    print_r(bf(\"Mercury\", \"Mercury\"));\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Earth\n    [1] => Mars\n)\nArray\n(\n    [0] => Jupiter\n\
    \    [1] => Saturn\n    [2] => Uranus\n    [3] => Neptune\n)\nArray\n(\n    [0]\
    \ => Earth\n    [1] => Venus\n    [2] => Mercury\n)\nArray\n(\n    [0] => Mercury\n\
    \    [1] => Venus\n    [2] => Earth\n    [3] => Mars\n    [4] => Jupiter\n   \
    \ [5] => Saturn\n    [6] => Uranus\n)\nArray\n(\n    [0] => Mercury\n)\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmp73p9zfpn.php:57\nStack trace:\n\
    #0 /tmp/tmp73p9zfpn.php(66): test()\n#1 {main}\n  thrown in /tmp/tmp73p9zfpn.php\
    \ on line 57\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planets = [\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\t$planets_\
    \ = [];\n\t$planet1_ = array_search($planet1, $planets);\n\t$planet2_ = array_search($planet2,\
    \ $planets);\n\tif($planet1_ == FALSE || $planet2_ == FALSE) {\n\t\treturn $planets_;\n\
    \t}\n\tfor($i = $planet1_ + 1; $i < $planet2_; $i++) {\n\t\t$planets_[] = $planets[$i];\n\
    \t}\n\treturn $planets_;\n}\n\necho '<pre>';\nprint_r(bf(\"Jupiter\", \"Neptune\"\
    ));\necho '</pre>';\n\necho '<pre>';\nprint_r(bf(\"Earth\", \"Mercury\"));\necho\
    \ '</pre>';\n\necho '<pre>';\nprint_r(bf(\"Mercury\", \"Uranus\"));\necho '</pre>';\n\
    \necho '<pre>';\nprint_r(bf(\"Uranus\", \"Mercury\"));\necho '</pre>';\n\necho\
    \ '<pre>';\nprint_r(bf(\"Jupiter\", \"Earth\"));\necho '</pre>';\n\necho '<pre>';\n\
    print_r(bf(\"Neptune\", \"Neptune\"));\necho '</pre>';\n\necho '<pre>';\nprint_r(bf(\"\
    Earth\", \"Earth\"));\necho '</pre>';\n\necho '<pre>';\nprint_r(bf(\"Pluto\",\
    \ \"Mercury\"));\necho '</pre>';\n\necho '<pre>';\nprint_r(bf(\"\", \"\"));\n\
    echo '</pre>';\n\necho '<pre>';\nprint_r(bf(\"\", \"Neptune\"));\necho '</pre>';\n\
    \necho '<pre>';\nprint_r(bf(\"Earth\", \"\"));\necho '</pre>';\n\necho '<pre>';\n\
    print_r(bf(\"\", \"\"));\necho '\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "" in /tmp/tmplk97ggy7.php
    on line 78

    '
  timestamp: 1659979783
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n  $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  $index1\
    \ = array_search($planet1, $planets);\n  $index2 = array_search($planet2, $planets);\n\
    \  if ($index1 === FALSE || $index2 === FALSE) {\n    return array();\n  }\n \
    \ if ($index1 > $index2) {\n    $temp = $index1;\n    $index1 = $index2;\n   \
    \ $index2 = $temp;\n  }\n  $result = array();\n  for ($i = $index1 + 1; $i < $index2;\
    \ $i++) {\n    $result[] = $planets[$i];\n  }\n  return $result;\n}\n\nprint_r(bf(\"\
    Jupiter\", \"Neptune\"));\nprint_r(bf(\"Earth\", \"Mercury\"));\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planets = array(\"Mercury\" => 1,\n\t\
    \t\t\t\t \"Venus\" => 2,\n\t\t\t\t\t \"Earth\" => 3,\n\t\t\t\t\t \"Mars\" => 4,\n\
    \t\t\t\t\t \"Jupiter\" => 5,\n\t\t\t\t\t \"Saturn\" => 6,\n\t\t\t\t\t \"Uranus\"\
    \ => 7,\n\t\t\t\t\t \"Neptune\" => 8\n\t\t\t\t\t);\n\t$between = array();\n\t\
    if(!array_key_exists($planet1, $planets) || !array_key_exists($planet2, $planets)){\n\
    \t\treturn $between;\n\t}\n\tif($planets[$planet1] > $planets[$planet2]){\n\t\t\
    $temp = $planet1;\n\t\t$planet1 = $planet2;\n\t\t$planet2 = $temp;\n\t}\n\tfor($i\
    \ = $planets[$planet1]; $i < $planets[$planet2]; $i++){\n\t\tarray_push($between,\
    \ array_search($i, $planets));\n\t}\n\treturn $between;\n}\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7t7s5un7.php:47\n\
    Stack trace:\n#0 /tmp/tmp7t7s5un7.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp7t7s5un7.php\
    \ on line 47\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planets = array(\n\t\t\t\t\t\t\t\"Mercury\"\
    ,\n\t\t\t\t\t\t\t\"Venus\",\n\t\t\t\t\t\t\t\"Earth\",\n\t\t\t\t\t\t\t\"Mars\"\
    ,\n\t\t\t\t\t\t\t\"Jupiter\",\n\t\t\t\t\t\t\t\"Saturn\",\n\t\t\t\t\t\t\t\"Uranus\"\
    ,\n\t\t\t\t\t\t\t\"Neptune\"\n\t\t\t\t\t\t);\n\tif(in_array($planet1, $planets)\
    \ && in_array($planet2, $planets)) {\n\t\t$orbit1 = array_search($planet1, $planets);\n\
    \t\t$orbit2 = array_search($planet2, $planets);\n\t\tif($orbit1 < $orbit2) {\n\
    \t\t\t$length = $orbit2 - $orbit1;\n\t\t\treturn array_slice($planets, $orbit1\
    \ + 1, $length - 1);\n\t\t} elseif($orbit1 > $orbit2) {\n\t\t\t$length = $orbit1\
    \ - $orbit2;\n\t\t\treturn array_slice($planets, $orbit2 + 1, $length - 1);\n\t\
    \t} else {\n\t\t\techo \"The orbit values for planet1 and planet2 are the same\"\
    ;\n\t\t}\n\t} else {\n\t\techo \"planet1 or planet2 are not correct planet names\"\
    ;\n\t}\n}\necho \"<pre>\";\nprint_r(bf(\"Earth\", \"Jupiter\"));\necho \"</pre>\"\
    ;\necho \"<pre>\";\nprint_r(bf(\"Mars\", \"Earth\"));\necho \"</pre>\";\necho\
    \ \"<pre>\";\nprint_r(bf(\"Jupiter\", \"Mars\"));\necho \"</pre>\";\necho \"<pre>\"\
    ;\nprint_r(bf(\"Mercury\", \"Uranus\"));\necho \"</pre>\";\necho \"<pre>\";\n\
    print_r(bf(\"Mercury\", \"Mercury\"));\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Mars\n)\n</pre><pre>Array\n(\n)\n</pre><pre>Array\n\
    (\n)\n</pre><pre>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n</pre><pre>The orbit values for planet1\
    \ and planet2 are the same</pre>The orbit values for planet1 and planet2 are the\
    \ same\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbhxk2wbw.php:69\n\
    Stack trace:\n#0 /tmp/tmpbhxk2wbw.php(74): test()\n#1 {main}\n  thrown in /tmp/tmpbhxk2wbw.php\
    \ on line 69\n"
  timestamp: 1659979783
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n  $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  $key1\
    \ = array_search($planet1, $planets);\n  $key2 = array_search($planet2, $planets);\n\
    \  if ($key1 === false || $key2 === false) {\n    return array();\n  }\n  if ($key1\
    \ > $key2) {\n    $left = $key2;\n    $right = $key1;\n  } else {\n    $left =\
    \ $key1;\n    $right = $key2;\n  }\n  $between = array();\n  for ($i = $left +\
    \ 1; $i < $right; $i++) {\n    $between[] = $planets[$i];\n  }\n  return $between;\n\
    }\necho '<h1>bf(\"Jupiter\", \"Neptune\")</h1>';\nprint_r(bf(\"Jupiter\", \"Neptune\"\
    ));\necho '<h1>bf(\"Earth\", \"Mercury\")</h1>';\nprint_r(bf(\"Earth\", \"Mercury\"\
    ));\necho '<h1>bf(\"Mercury\", \"Uranus\")</h1>';\nprint_r(bf(\"Mercury\", \"\
    Uranus\"));\necho '<h1>bf(\"Uranus\", \"Mercury\")</h1>';\nprint_r(bf(\"Uranus\"\
    , \"Mercury\"));\necho '<h1>bf(\"aaaa\", \"Mercury\")</h1>';\nprint_r(bf(\"aaaa\"\
    , \"Mercury\"));\necho '<h1>bf(\"\", \"Mercury\")</h1>';\nprint_r(bf(\"\", \"\
    Mercury\"));\necho '<h1>bf(\"Mars\", \"aaaa\")</h1>';\nprint_r(bf(\"Mars\", \"\
    aaaa\"));\necho '<h1>bf(\"Mars\", \"\")</h1>';\nprint_r(bf(\"Mars\", \"\"));\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<h1>bf(\"Jupiter\", \"Neptune\")</h1>Array\n(\n    [0] => Saturn\n    [1]\
    \ => Uranus\n)\n<h1>bf(\"Earth\", \"Mercury\")</h1>Array\n(\n    [0] => Venus\n\
    )\n<h1>bf(\"Mercury\", \"Uranus\")</h1>Array\n(\n    [0] => Venus\n    [1] =>\
    \ Earth\n    [2] => Mars\n    [3] => Jupiter\n    [4] => Saturn\n)\n<h1>bf(\"\
    Uranus\", \"Mercury\")</h1>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2]\
    \ => Mars\n    [3] => Jupiter\n    [4] => Saturn\n)\n<h1>bf(\"aaaa\", \"Mercury\"\
    )</h1>Array\n(\n)\n<h1>bf(\"\", \"Mercury\")</h1>Array\n(\n)\n<h1>bf(\"Mars\"\
    , \"aaaa\")</h1>Array\n(\n)\n<h1>bf(\"Mars\", \"\")</h1>Array\n(\n)\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planets = [\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\tif (in_array($planet1,\
    \ $planets) && in_array($planet2, $planets)) {\n\t\t$index1 = array_search($planet1,\
    \ $planets);\n\t\t$index2 = array_search($planet2, $planets);\n\t\tif ($index1\
    \ < $index2) {\n\t\t\treturn array_slice($planets, $index1+1, $index2-$index1-1);\n\
    \t\t} else {\n\t\t\treturn array_slice($planets, $index2+1, $index1-$index2-1);\n\
    \t\t}\n\t} else {\n\t\treturn [];\n\t}\n}\nvar_dump(bf(\"Mercury\", \"Jupiter\"\
    ));\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(3) {\n  [0]=>\n  string(5) \"Venus\"\n  [1]=>\n  string(5) \"Earth\"\
    \n  [2]=>\n  string(4) \"Mars\"\n}\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmph6f95ow3.php:42\nStack trace:\n#0 /tmp/tmph6f95ow3.php(47): test()\n\
    #1 {main}\n  thrown in /tmp/tmph6f95ow3.php on line 42\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $solar_system = array(\n        'Mercury',\n\
    \        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n   \
    \     'Saturn',\n        'Uranus',\n        'Neptune',\n    );\n    $a = array_search($planet1,\
    \ $solar_system);\n    $b = array_search($planet2, $solar_system);\n    if ($a\
    \ == null || $b == null) {\n        echo '[]';\n    } else {\n        if ($a >\
    \ $b) {\n            $c = $a;\n            $a = $b;\n            $b = $c;\n  \
    \      }\n        $c = array();\n        for ($i = $a + 1; $i < $b; $i++) {\n\
    \            $c[] = $solar_system[$i];\n        }\n        echo '[' . implode(',\
    \ ', $c) . ']';\n    }\n}\nbf('Mercury', 'Jupiter');\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "[][Saturn, Uranus]\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprpq_1b43.php:52\n\
    Stack trace:\n#0 /tmp/tmprpq_1b43.php(61): test()\n#1 {main}\n  thrown in /tmp/tmprpq_1b43.php\
    \ on line 52\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\t\
    $result = array();\n\tif (in_array($planet1, $planets) && in_array($planet2, $planets))\
    \ {\n\t\t$planet1Index = array_search($planet1, $planets);\n\t\t$planet2Index\
    \ = array_search($planet2, $planets);\n\t\tif ($planet1Index == $planet2Index)\
    \ {\n\t\t\treturn \"No planets between them\";\n\t\t} elseif ($planet1Index <\
    \ $planet2Index) {\n\t\t\t$result = array_slice($planets, $planet1Index + 1, $planet2Index\
    \ - $planet1Index - 1);\n\t\t} else {\n\t\t\t$result = array_slice($planets, $planet2Index\
    \ + 1, $planet1Index - $planet2Index - 1);\n\t\t}\n\t} else {\n\t\t$result = array();\n\
    \t}\n\treturn $result;\n}\n\n$result = bf(\"Mercury\", \"Jupiter\");\nvar_dump($result);\n\
    \nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(3) {\n  [0]=>\n  string(5) \"Venus\"\n  [1]=>\n  string(5) \"Earth\"\
    \n  [2]=>\n  string(4) \"Mars\"\n}\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp7_052i82.php:49\nStack trace:\n#0 /tmp/tmp7_052i82.php(54): test()\n\
    #1 {main}\n  thrown in /tmp/tmp7_052i82.php on line 49\n"
  timestamp: 1659979783
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = [\"Mercury\", \"Venus\",\
    \ \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  $posPlanet1 = -1;\n    $posPlanet2 = -1;\n    $between = [];\n    foreach ($planets\
    \ as $key => $value) {\n        if ($value == $planet1) {\n            $posPlanet1\
    \ = $key;\n        }\n        if ($value == $planet2) {\n            $posPlanet2\
    \ = $key;\n        }\n    }\n    if ($posPlanet1 >= 0 && $posPlanet2 >= 0) {\n\
    \        if ($posPlanet1 < $posPlanet2) {\n            for ($i = $posPlanet1+1;\
    \ $i < $posPlanet2; $i++) {\n                $between[] = $planets[$i];\n    \
    \        }\n        } else {\n            for ($i = $posPlanet2+1; $i < $posPlanet1;\
    \ $i++) {\n                $between[] = $planets[$i];\n            }\n       \
    \ }\n    }\n    return $between;\n}\n\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $index1 = array_search($planet1, $planets);\n    $index2 = array_search($planet2,\
    \ $planets);\n    if ($index1 === false || $index2 === false) {\n        return\
    \ array();\n    } elseif ($index1 > $index2) {\n        $temp = $index1;\n   \
    \     $index1 = $index2;\n        $index2 = $temp;\n    }\n    $n = $index2 -\
    \ $index1 - 1;\n    return array_slice($planets, $index1 + 1, $n);\n}\necho implode(',\
    \ ', bf(\"Jupiter\", \"Neptune\"));\necho implode(', ', bf(\"Earth\", \"Mercury\"\
    ));\necho implode(', ', bf(\"Mercury\", \"Uranus\"));\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Saturn, UranusVenusVenus, Earth, Mars, Jupiter, Saturn\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp51bac5t9.php:45\nStack trace:\n#0 /tmp/tmp51bac5t9.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp51bac5t9.php on line 45\n"
  timestamp: 1659979783
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = [\"Mercury\", \"Venus\",\
    \ \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  $firstPlanet = array_search($planet1, $planets);\n    $secondPlanet = array_search($planet2,\
    \ $planets);\n    $planetsInBetween = [];\n    if ($firstPlanet === FALSE || $secondPlanet\
    \ === FALSE) {\n        return $planetsInBetween;\n    }\n    if ($firstPlanet\
    \ <= $secondPlanet) {\n        for ($i = $firstPlanet + 1; $i < $secondPlanet;\
    \ $i++) {\n            $planetsInBetween[] = $planets[$i];\n        }\n    } else\
    \ {\n        for ($i = $secondPlanet + 1; $i < $firstPlanet; $i++) {\n       \
    \     $planetsInBetween[] = $planets[$i];\n        }\n    }\n    return $planetsInBetween;\n\
    }\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979783
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $orbit = array(\n        'Mercury' =>\
    \ 1,\n        'Venus' => 2,\n        'Earth' => 3,\n        'Mars' => 4,\n   \
    \     'Jupiter' => 5,\n        'Saturn' => 6,\n        'Uranus' => 7,\n      \
    \  'Neptune' => 8\n    );\n    $planets = array();\n    $orbit2 = null;\n    $orbit1\
    \ = null;\n    foreach ($orbit as $key => $value) {\n        if ($key == $planet1)\
    \ {\n            $orbit1 = $value;\n        }\n        if ($key == $planet2) {\n\
    \            $orbit2 = $value;\n        }\n    }\n    if (!is_null($orbit1) &&\
    \ !is_null($orbit2)) {\n        foreach ($orbit as $key => $value) {\n       \
    \     if ($orbit1 < $orbit2) {\n                if ($value > $orbit1 && $value\
    \ < $orbit2) {\n                    $planets[] = $key;\n                }\n  \
    \          } else {\n                if ($value < $orbit1 && $value > $orbit2)\
    \ {\n                    $planets[] = $key;\n                }\n            }\n\
    \        }\n    }\n    return $planets;\n}\n\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n  $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  $idx1\
    \ = array_search($planet1, $planets);\n  $idx2 = array_search($planet2, $planets);\n\
    \  if ($idx1 === false || $idx2 === false) return array();\n  if ($idx1 > $idx2)\
    \ return array_slice($planets, $idx2 + 1, $idx1 - $idx2 - 1);\n  return array_slice($planets,\
    \ $idx1 + 1, $idx2 - $idx1 - 1);\n}\n\n$planet1 = \"Jupiter\";\n$planet2 = \"\
    Neptune\";\nprint_r(bf($planet1, $planet2));\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpp5gnib87.php:39\nStack trace:\n#0 /tmp/tmpp5gnib87.php(44):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpp5gnib87.php on line 39\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n  $planets = [\n    \"Mercury\",\n    \"\
    Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n \
    \   \"Uranus\",\n    \"Neptune\"\n  ];\n  if (in_array($planet1, $planets) &&\
    \ in_array($planet2, $planets)) {\n    $index1 = array_search($planet1, $planets);\n\
    \    $index2 = array_search($planet2, $planets);\n    if ($index1 < $index2) {\n\
    \      return array_slice($planets, $index1 + 1, $index2 - $index1 - 1);\n   \
    \ } else {\n      return array_slice($planets, $index2 + 1, $index1 - $index2\
    \ - 1);\n    }\n  } else {\n    return array();\n  }\n}\nprint_r(bf(\"Jupiter\"\
    , \"Neptune\"));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"\
    <br>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mercury\", \"Mercury\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n<br>Array\n(\n    [0] => Venus\n  \
    \  [1] => Earth\n    [2] => Mars\n    [3] => Jupiter\n    [4] => Saturn\n    [5]\
    \ => Uranus\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx6suzhoz.php:57\n\
    Stack trace:\n#0 /tmp/tmpx6suzhoz.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpx6suzhoz.php\
    \ on line 57\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = [\n        'Mercury',\n \
    \       'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n    \
    \    'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $planetsInBetween\
    \ = [];\n    $planet1Found = false;\n    $planet2Found = false;\n    foreach ($planets\
    \ as $planet) {\n        if ($planet1Found) {\n            $planetsInBetween[]\
    \ = $planet;\n        }\n        if ($planet === $planet1) {\n            $planet1Found\
    \ = true;\n        }\n        if ($planet === $planet2) {\n            $planet2Found\
    \ = true;\n        }\n        if ($planet2Found) {\n            break;\n     \
    \   }\n    }\n    return $planetsInBetween;\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7893fs_h.php:54\n\
    Stack trace:\n#0 /tmp/tmp7893fs_h.php(63): test()\n#1 {main}\n  thrown in /tmp/tmp7893fs_h.php\
    \ on line 54\n"
  timestamp: 1659979783
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $last = array_search($planet1, $planets);\n    $first = array_search($planet2,\
    \ $planets);\n    if ($last === false || $first === false) {\n        return array();\n\
    \    }\n    if ($last > $first) {\n        $tem = $last;\n        $last = $first;\n\
    \        $first = $tem;\n    }\n    $ans = array();\n    for ($i = $last + 1;\
    \ $i < $first; $i++) {\n        $ans[] = $planets[$i];\n    }\n    return $ans;\n\
    }\n$ans = bf(\"Jupiter\", \"Neptune\");\nvar_dump($ans);\n$ans = bf(\"Earth\"\
    , \"Mercury\");\nvar_dump($ans);\n$ans = bf(\"Mercury\", \"Uranus\");\nvar_dump($ans);\n\
    $ans = bf(\"aaa\", \"bbb\");\nvar_dump($ans);\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(2) {\n  [0]=>\n  string(6) \"Saturn\"\n  [1]=>\n  string(6) \"Uranus\"\
    \n}\narray(1) {\n  [0]=>\n  string(5) \"Venus\"\n}\narray(5) {\n  [0]=>\n  string(5)\
    \ \"Venus\"\n  [1]=>\n  string(5) \"Earth\"\n  [2]=>\n  string(4) \"Mars\"\n \
    \ [3]=>\n  string(7) \"Jupiter\"\n  [4]=>\n  string(6) \"Saturn\"\n}\narray(0)\
    \ {\n}\n"
  timestamp: 1659979783
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $newPlanets = array();\n    $position1 = array_search($planet1, $planets);\n\
    \    $position2 = array_search($planet2, $planets);\n    if ($position1 === false\
    \ || $position2 === false) {\n        return $newPlanets;\n    }\n    if ($position1\
    \ > $position2) {\n        $p1 = $position2;\n        $p2 = $position1;\n    }\
    \ else {\n        $p1 = $position1;\n        $p2 = $position2;\n    }\n    for\
    \ ($i = $p1 + 1; $i < $p2; $i++) {\n        $newPlanets[] = $planets[$i];\n  \
    \  }\n    return $newPlanets;\n}\n$myPlanets = bf(\"Jupiter\", \"Neptune\");\n\
    print_r($myPlanets);\n\necho \"<br>\";\n$myPlanets = bf(\"Earth\", \"Mercury\"\
    );\nprint_r($myPlanets);\n\necho \"<br>\";\n$myPlanets = bf(\"Mercury\", \"Uranus\"\
    );\nprint_r($myPlanets);\n\necho \"<br>\";\n$myPlanets = bf(\"Saturn\", \"Mars\"\
    );\nprint_r($myPlanets);\n\necho \"<br>\";\n$myPlanets = bf(\"Saturn\", \"Merkur\"\
    );\nprint_r($myPlanets);\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n<br>Array\n(\n    [0] => Jupiter\n\
    )\n<br>Array\n(\n)\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n  $planets = array(\n    'Mercury',\n  \
    \  'Venus',\n    'Earth',\n    'Mars',\n    'Jupiter',\n    'Saturn',\n    'Uranus',\n\
    \    'Neptune'\n  );\n  if (!in_array($planet1, $planets) || !in_array($planet2,\
    \ $planets)) {\n    return array();\n  }\n  $array1 = array_slice($planets, array_search($planet1,\
    \ $planets));\n  $array2 = array_slice($planets, 0, array_search($planet2, $planets));\n\
    \  return array_intersect($array1, $array2);\n}\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8ldvhgln.php:41\n\
    Stack trace:\n#0 /tmp/tmp8ldvhgln.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp8ldvhgln.php\
    \ on line 41\n"
  timestamp: 1659979783
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n  $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  $keys\
    \ = array_flip($planets);\n  if(!isset($keys[$planet1]) || !isset($keys[$planet2]))\
    \ return array();\n  $start = $keys[$planet1];\n  $end = $keys[$planet2];\n  if($start\
    \ > $end) {\n    $tmp = $start;\n    $start = $end;\n    $end = $tmp;\n  }\n \
    \ $result = array();\n  for($i = $start + 1; $i < $end; $i++) $result[] = $planets[$i];\n\
    \  return $result;\n}\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n  $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  $array\
    \ = array();\n  $index1 = 0;\n  $index2 = 0;\n  for ($i = 0; $i < count($planets);\
    \ $i++) {\n    if ($planets[$i] == $planet1) {\n      $index1 = $i;\n    } else\
    \ if ($planets[$i] == $planet2) {\n      $index2 = $i;\n    }\n  }\n  if ($index1\
    \ > $index2) {\n    $temp = $index1;\n    $index1 = $index2;\n    $index2 = $temp;\n\
    \  }\n  for ($i = $index1 + 1; $i < $index2; $i++) {\n    array_push($array, $planets[$i]);\n\
    \  }\n  return $array;\n}\n$planet1 = \"Jupiter\";\n$planet2 = \"Neptune\";\n\
    $result = bf($planet1, $planet2);\nprint_r($result);\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp0gwb25kk.php:53\nStack trace:\n#0 /tmp/tmp0gwb25kk.php(58):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp0gwb25kk.php on line 53\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $planets2 = array_flip($planets);\n    if (array_key_exists($planet1, $planets2)\
    \ && array_key_exists($planet2, $planets2)) {\n        $planets3 = array_slice($planets,\
    \ $planets2[$planet1], $planets2[$planet2] - $planets2[$planet1] + 1);\n     \
    \   $planets4 = array_diff($planets3, array($planet1, $planet2));\n        $planets5\
    \ = array_values($planets4);\n        return $planets5;\n    } else {\n      \
    \  return null;\n    }\n}\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp46utq7dh.php:36\n\
    Stack trace:\n#0 /tmp/tmp46utq7dh.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp46utq7dh.php\
    \ on line 36\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n  $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  $index1\
    \ = array_search($planet1, $planets);\n  $index2 = array_search($planet2, $planets);\n\
    \  if($index1 === false || $index2 === false) return array();\n  if($index1 <\
    \ $index2) return array_slice($planets, $index1+1, $index2-$index1-1);\n  return\
    \ array_slice($planets, $index2+1, $index1-$index2-1);\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0l_p7hit.php:36\n\
    Stack trace:\n#0 /tmp/tmp0l_p7hit.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp0l_p7hit.php\
    \ on line 36\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $out = array();\n    $i = array_search($planet1, $planets);\n    $j = array_search($planet2,\
    \ $planets);\n    if ($i != -1 and $j != -1) {\n        for ($k = $i + 1; $k <\
    \ $j; $k++) {\n            $out[] = $planets[$k];\n        }\n    }\n    return\
    \ $out;\n}\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\"\
    , \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp92hfnkz.php:36\n\
    Stack trace:\n#0 /tmp/tmpp92hfnkz.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpp92hfnkz.php\
    \ on line 36\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\t\
    $planetPosition1 = array_search($planet1, $planets);\n\t$planetPosition2 = array_search($planet2,\
    \ $planets);\n\tif($planetPosition1 === false || $planetPosition2 === false) {\n\
    \t\treturn array();\n\t}\n\t$planetsInBetween = array();\n\tif($planetPosition1\
    \ > $planetPosition2) {\n\t\tfor($i = $planetPosition2 + 1; $i < $planetPosition1;\
    \ $i++) {\n\t\t\t$planetsInBetween[] = $planets[$i];\n\t\t}\n\t} else {\n\t\t\
    for($i = $planetPosition1 + 1; $i < $planetPosition2; $i++) {\n\t\t\t$planetsInBetween[]\
    \ = $planets[$i];\n\t\t}\n\t}\n\treturn $planetsInBetween;\n}\n$result = bf(\"\
    Mercury\", \"Neptune\");\nprint_r($result);\necho \"<br>\";\n$result = bf(\"Mercury\"\
    , \"Jupiter\");\nprint_r($result);\necho \"<br>\";\n$result = bf(\"Mercury\",\
    \ \"Mars\");\nprint_r($result);\necho \"<br>\";\n$result = bf(\"Jupiter\", \"\
    Mercury\");\nprint_r($result);\necho \"<br>\";\n$result = bf(\"Jupiter\", \"Neptune\"\
    );\nprint_r($result);\necho \"<br>\";\n$result = bf(\"Neptune\", \"Jupiter\");\n\
    print_r($result);\necho \"<br>\";\n$result = bf(\"Neptune\", \"Earth\");\nprint_r($result);\n\
    echo \"<br>\";\n$result = bf(\"Earth\", \"Neptune\");\nprint_r($result);\necho\
    \ \"<br>\";\n$result = bf(\"Earth\", \"Mercury\");\nprint_r($result);\necho \"\
    <br>\";\n$result = bf(\"Mercury\", \"Uranus\");\nprint_r($result);\necho \"<br>\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Jupiter", expecting "," or ";"
    in /tmp/tmp1tm219nf.php on line 72

    '
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planet_names = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  $planet_index1 = -1;\n    $planet_index2 = -1;\n    for ($i = 0; $i < count($planet_names);\
    \ $i++) {\n        if ($planet_names[$i] == $planet1) {\n            $planet_index1\
    \ = $i;\n        }\n        if ($planet_names[$i] == $planet2) {\n           \
    \ $planet_index2 = $i;\n        }\n    }\n    if ($planet_index1 == -1 || $planet_index2\
    \ == -1) {\n        return $planet_index1 == -1 ? $planet1 : $planet2;\n    }\n\
    \    if ($planet_index1 > $planet_index2) {\n        $temp = $planet_index1;\n\
    \        $planet_index1 = $planet_index2;\n        $planet_index2 = $temp;\n \
    \   }\n    $planet_names = array_slice($planet_names, $planet_index1 + 1, $planet_index2\
    \ - $planet_index1 - 1);\n    return $planet_names;\n}\necho json_encode(bf($_GET['planet1'],\
    \ $_GET['planet2']));\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key \"planet1\" in /tmp/tmp_kcmnfwk.php on line\
    \ 41\n\nWarning: Undefined array key \"planet2\" in /tmp/tmp_kcmnfwk.php on line\
    \ 41\nnull\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_kcmnfwk.php:51\n\
    Stack trace:\n#0 /tmp/tmp_kcmnfwk.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp_kcmnfwk.php\
    \ on line 51\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = [\"Mercury\", \"Venus\",\
    \ \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  $from = array_search($planet1, $planets);\n    $to = array_search($planet2,\
    \ $planets);\n    if ($from === false || $to === false) {\n        return [];\n\
    \    }\n    if ($from > $to) {\n        $temp = $from;\n        $from = $to;\n\
    \        $to = $temp;\n    }\n    $planets = array_slice($planets, $from, $to\
    \ - $from + 1);\n    array_shift($planets);\n    return $planets;\n}\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplqsb60e1.php:39\n\
    Stack trace:\n#0 /tmp/tmplqsb60e1.php(48): test()\n#1 {main}\n  thrown in /tmp/tmplqsb60e1.php\
    \ on line 39\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  if(in_array($planet1, $planets) && in_array($planet2, $planets)) {\n      \
    \  $planets1 = array_slice($planets, 0, array_search($planet1, $planets));\n \
    \       $planets2 = array_slice($planets, array_search($planet2, $planets) + 1);\n\
    \        $planets_all = array_merge($planets1, $planets2);\n        echo implode(\"\
    , \", $planets_all);\n    }\n    else {\n        echo \"Not a valid planet name\"\
    ;\n    }\n}\n\nbf(\"Jupiter\", \"Neptune\");\necho \"<br>\";\nbf(\"Earth\", \"\
    Mercury\");\necho \"<br>\";\nbf(\"Mercury\", \"Uranus\");\necho \"<br>\";\nbf(\"\
    Neptune\", \"Jupiter\");\necho \"<br>\";\nbf(\"Saturn\", \"Earth\");\necho \"\
    <br>\";\nbf(\"Saturn\", \"Venus\");\necho \"<br>\";\nbf(\"Saturn\", \"Mars\");\n\
    echo \"<br>\";\nbf(\"Saturn\", \"Uranus\");\necho \"<br>\";\nbf(\"Saturn\", \"\
    Saturn\");\necho \"<br>\";\nbf(\"Saturn\", \"Neptune\");\necho \"<br>\";\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Mercury, Venus, Earth, Mars<br>Mercury, Venus, Venus, Earth, Mars, Jupiter,\
    \ Saturn, Uranus, Neptune<br>Neptune<br>Mercury, Venus, Earth, Mars, Jupiter,\
    \ Saturn, Uranus, Saturn, Uranus, Neptune<br>Mercury, Venus, Earth, Mars, Jupiter,\
    \ Mars, Jupiter, Saturn, Uranus, Neptune<br>Mercury, Venus, Earth, Mars, Jupiter,\
    \ Earth, Mars, Jupiter, Saturn, Uranus, Neptune<br>Mercury, Venus, Earth, Mars,\
    \ Jupiter, Jupiter, Saturn, Uranus, Neptune<br>Mercury, Venus, Earth, Mars, Jupiter,\
    \ Neptune<br>Mercury, Venus, Earth, Mars, Jupiter, Uranus, Neptune<br>Mercury,\
    \ Venus, Earth, Mars, Jupiter<br>Mercury, Venus, Earth, Mars\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp_zugqg3g.php:56\nStack trace:\n#0 /tmp/tmp_zugqg3g.php(65):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp_zugqg3g.php on line 56\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n  $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  $start\
    \ = array_search($planet1, $planets);\n  $end = array_search($planet2, $planets);\n\
    \  if ($start !== false && $end !== false && $start < $end) {\n    return array_slice($planets,\
    \ $start+1, $end-$start-1);\n  } else {\n    return array();\n  }\n}\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf934_88n.php:34\n\
    Stack trace:\n#0 /tmp/tmpf934_88n.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpf934_88n.php\
    \ on line 34\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n  $planets = [\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  $result\
    \ = [];\n  $start = 0;\n  $end = 0;\n  $len = count($planets);\n  for ($i = 0;\
    \ $i < $len; $i++) {\n    if ($planets[$i] == $planet1) {\n      $start = $i;\n\
    \    }\n    if ($planets[$i] == $planet2) {\n      $end = $i;\n    }\n  }\n  if\
    \ ($start > $end) {\n    for ($i = $start - 1; $i > $end; $i--) {\n      array_push($result,\
    \ $planets[$i]);\n    }\n  } else {\n    for ($i = $start + 1; $i < $end; $i++)\
    \ {\n      array_push($result, $planets[$i]);\n    }\n  }\n  return $result;\n\
    }\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho \"\\n\";\nprint_r(bf(\"Earth\"\
    , \"Mercury\"));\necho \"\\n\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\necho \"\
    \\n\";\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\"\
    , \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n\nArray\n(\n    [0]\
    \ => Venus\n)\n\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpvyuatdsi.php:57\nStack trace:\n#0 /tmp/tmpvyuatdsi.php(63):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpvyuatdsi.php on line 57\n"
  timestamp: 1659979783
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n  $planets = [\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  $values\
    \ = [];\n  $value1 = array_search($planet1, $planets);\n  $value2 = array_search($planet2,\
    \ $planets);\n  if($value1 === false || $value2 === false){\n    return $values;\n\
    \  }\n  if($value1 < $value2){\n    for($i = $value1 + 1; $i < $value2; $i++){\n\
    \      $values[] = $planets[$i];\n    }\n  } else {\n    for($i = $value2 + 1;\
    \ $i < $value1; $i++){\n      $values[] = $planets[$i];\n    }\n  }\n  return\
    \ $values;\n}\nprint_r(bf(\"Mercury\", \"Uranus\"));\nprint_r(bf(\"Earth\", \"\
    Mercury\"));\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n    [3]\
    \ => Jupiter\n    [4] => Saturn\n)\nArray\n(\n    [0] => Venus\n)\nArray\n(\n\
    \    [0] => Saturn\n    [1] => Uranus\n)\n"
  timestamp: 1659979783
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n  $solarSystem = [\n    \"Mercury\",\n \
    \   \"Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\"\
    ,\n    \"Uranus\",\n    \"Neptune\"\n  ];\n  $result = [];\n  $first = array_search($planet1,\
    \ $solarSystem);\n  $second = array_search($planet2, $solarSystem);\n  if($first\
    \ === FALSE || $second === FALSE) return $result;\n  if($first < $second) {\n\
    \    for($i = $first + 1; $i < $second; $i++) {\n      $result[] = $solarSystem[$i];\n\
    \    }\n  } else if($first > $second) {\n    for($i = $second + 1; $i < $first;\
    \ $i++) {\n      $result[] = $solarSystem[$i];\n    }\n  }\n  return $result;\n\
    }\n\necho '<pre>';\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho '</pre>';\necho\
    \ '<pre>';\nprint_r(bf(\"Earth\", \"Mercury\"));\necho '</pre>';\necho '<pre>';\n\
    print_r(bf(\"Mercury\", \"Uranus\"));\necho '</pre>';\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n</pre><pre>Array\n\
    (\n    [0] => Venus\n)\n</pre><pre>Array\n(\n    [0] => Venus\n    [1] => Earth\n\
    \    [2] => Mars\n    [3] => Jupiter\n    [4] => Saturn\n)\n</pre>"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $index1 = array_search($planet1, $planets);\n    $index2 = array_search($planet2,\
    \ $planets);\n    if ($index1 == false || $index2 == false) {\n        return\
    \ array();\n    }\n    $newplanets = array();\n    $newplanets[0] = $planets[$index1];\n\
    \    if ($index1 < $index2) {\n        for ($i = 1; $i < $index2 - $index1; $i++)\
    \ {\n            $newplanets[$i] = $planets[$index1 + $i];\n        }\n    } else\
    \ if ($index1 > $index2) {\n        for ($i = 1; $i < $index1 - $index2; $i++)\
    \ {\n            $newplanets[$i] = $planets[$index2 + $i];\n        }\n    }\n\
    \    return $newplanets;\n}\n$planet1 = \"Jupiter\";\n$planet2 = \"Neptune\";\n\
    $result = bf($planet1, $planet2);\necho '<pre>';\nprint_r($result);\necho '</pre>';\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Jupiter\n    [1] => Saturn\n    [2] => Uranus\n\
    )\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwze73wyx.php:49\n\
    Stack trace:\n#0 /tmp/tmpwze73wyx.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpwze73wyx.php\
    \ on line 49\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t// \u043C\u0430\u0441\u0441\u0438\u0432\
    \ \u0438\u0437 \u043F\u043B\u0430\u043D\u0435\u0442\n\t$planets = array(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    );\n\t// \u043F\u0440\u043E\u0432\u0435\u0440\u044F\u0435\u043C \u0432\u0445\u043E\
    \u0434\u043D\u044B\u0435 \u043F\u0430\u0440\u0430\u043C\u0435\u0442\u0440\u044B\
    \n\tif(!in_array($planet1, $planets) || !in_array($planet2, $planets)) {\n\t\t\
    return \"\u041E\u0448\u0438\u0431\u043A\u0430 \u0432 \u0438\u043C\u0435\u043D\u0438\
    \ \u043F\u043B\u0430\u043D\u0435\u0442\u044B!\";\n\t}\n\t// \u043E\u043F\u0440\
    \u0435\u0434\u0435\u043B\u044F\u0435\u043C \u043F\u043E\u0440\u044F\u0434\u043E\
    \u043A \u043F\u043B\u0430\u043D\u0435\u0442\n\tif(array_search($planet1, $planets)\
    \ < array_search($planet2, $planets)) {\n\t\t$first = $planet1;\n\t\t$last = $planet2;\n\
    \t} else {\n\t\t$first = $planet2;\n\t\t$last = $planet1;\n\t}\n\t// \u0438\u0437\
    \u0432\u043B\u0435\u043A\u0430\u0435\u043C \u043D\u0443\u0436\u043D\u044B\u0435\
    \ \u043F\u043B\u0430\u043D\u0435\u0442\u044B\n\t$res_planets = array_slice($planets,\
    \ array_search($first, $planets)+1, array_search($last, $planets)-array_search($first,\
    \ $planets)-1);\n\t// \u0432\u043E\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043C\
    \ \u0440\u0435\u0437\u0443\u043B\u044C\u0442\u0430\u0442\n\treturn $res_planets;\n\
    }\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpldhhr41_.php:47\n\
    Stack trace:\n#0 /tmp/tmpldhhr41_.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpldhhr41_.php\
    \ on line 47\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\t\
    $between_planets = array();\n\tif(!in_array($planet1, $planets) || !in_array($planet2,\
    \ $planets)) {\n\t\treturn array();\n\t}\n\t$planet1_index = array_search($planet1,\
    \ $planets);\n\t$planet2_index = array_search($planet2, $planets);\n\tfor($i =\
    \ $planet1_index; $i <= $planet2_index; $i++) {\n\t\tarray_push($between_planets,\
    \ $planets[$i]);\n\t}\n\treturn $between_planets;\n}\n\n$planets = array(\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    );\n$planet1 = \"Saturn\";\n$planet2 = \"Uranus\";\n$result = bf($planet1, $planet2);\n\
    print_r($result);\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp8ke07mdd.php:42\nStack trace:\n#0 /tmp/tmp8ke07mdd.php(51):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp8ke07mdd.php on line 42\n"
  timestamp: 1659979783
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $result = array();\n    $planet1_index = array_search($planet1, $planets);\n\
    \    $planet2_index = array_search($planet2, $planets);\n    if ($planet1_index\
    \ !== false && $planet2_index !== false) {\n        if ($planet1_index < $planet2_index)\
    \ {\n            $result = array_slice($planets, $planet1_index+1, $planet2_index\
    \ - $planet1_index - 1);\n        } elseif ($planet1_index > $planet2_index) {\n\
    \            $result = array_slice($planets, $planet2_index+1, $planet1_index\
    \ - $planet2_index - 1);\n        }\n    }\n    return $result;\n}\n\necho \"\
    <pre>\";\nvar_dump(bf(\"Jupiter\", \"Neptune\"));\nvar_dump(bf(\"Earth\", \"Mercury\"\
    ));\nvar_dump(bf(\"Mercury\", \"Uranus\"));\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>array(2) {\n  [0]=>\n  string(6) \"Saturn\"\n  [1]=>\n  string(6)\
    \ \"Uranus\"\n}\narray(1) {\n  [0]=>\n  string(5) \"Venus\"\n}\narray(5) {\n \
    \ [0]=>\n  string(5) \"Venus\"\n  [1]=>\n  string(5) \"Earth\"\n  [2]=>\n  string(4)\
    \ \"Mars\"\n  [3]=>\n  string(7) \"Jupiter\"\n  [4]=>\n  string(6) \"Saturn\"\n\
    }\n</pre>"
  timestamp: 1659979783
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n  $result=array();\n  $planets=array(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\");\n  foreach ($planets as $key => $value) {\n    if ($value == $planet1)\
    \ {\n      $index1=$key;\n    }\n    if ($value == $planet2) {\n      $index2=$key;\n\
    \    }\n  }\n  if (isset($index1) && isset($index2)) {\n    if ($index1 > $index2)\
    \ {\n      $result=array_slice($planets, $index2+1, $index1-$index2-1);\n    }\n\
    \    elseif ($index1 < $index2) {\n      $result=array_slice($planets, $index1+1,\
    \ $index2-$index1-1);\n    }\n  }\n  else {\n    $result=array();\n  }\n  return\
    \ $result;\n}\nprint_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n    [3]\
    \ => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1659979783
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planets = array('Mercury', 'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune');\n\t$pos1 = array_search($planet1,\
    \ $planets);\n\t$pos2 = array_search($planet2, $planets);\n\tif ($pos1 === false\
    \ || $pos2 === false) {\n\t\treturn array();\n\t}\n\tif ($pos1 > $pos2) {\n\t\t\
    $i = $pos2 + 1;\n\t\t$end = $pos1;\n\t} else {\n\t\t$i = $pos1 + 1;\n\t\t$end\
    \ = $pos2;\n\t}\n\t$result = array();\n\twhile ($i < $end) {\n\t\t$result[] =\
    \ $planets[$i];\n\t\t$i++;\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planetArray = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\t\
    $planetIndex = 0;\n\t$planetIndex1 = 0;\n\t$planetIndex2 = 0;\n\tforeach ($planetArray\
    \ as $planet) {\n\t\tif ($planet == $planet1) {\n\t\t\t$planetIndex1 = $planetIndex;\n\
    \t\t}\n\t\tif ($planet == $planet2) {\n\t\t\t$planetIndex2 = $planetIndex;\n\t\
    \t}\n\t\t$planetIndex++;\n\t}\n\tif ($planetIndex1 < $planetIndex2) {\n\t\t$returnArray\
    \ = array();\n\t\tfor ($i = $planetIndex1+1; $i < $planetIndex2; $i++) {\n\t\t\
    \tarray_push($returnArray, $planetArray[$i]);\n\t\t}\n\t\treturn $returnArray;\n\
    \t} else if ($planetIndex1 > $planetIndex2) {\n\t\t$returnArray = array();\n\t\
    \tfor ($i = $planetIndex2+1; $i < $planetIndex1; $i++) {\n\t\t\tarray_push($returnArray,\
    \ $planetArray[$i]);\n\t\t}\n\t\treturn $returnArray;\n\t} else {\n\t\treturn\
    \ \"You chose two of the same planets, dummy\";\n\t}\n}\nprint_r(bf(\"Mercury\"\
    , \"Uranus\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n    [3]\
    \ => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp7x3e251u.php:58\nStack trace:\n#0 /tmp/tmp7x3e251u.php(63): test()\n\
    #1 {main}\n  thrown in /tmp/tmp7x3e251u.php on line 58\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $solar_system = array(\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    );\n    $planet1_index = array_search($planet1, $solar_system);\n    $planet2_index\
    \ = array_search($planet2, $solar_system);\n    if (is_bool($planet1_index) ||\
    \ is_bool($planet2_index)) {\n        return [];\n    }\n    if ($planet1_index\
    \ < $planet2_index) {\n        return array_slice($solar_system, $planet1_index\
    \ + 1, $planet2_index - $planet1_index - 1);\n    } else {\n        return array_slice($solar_system,\
    \ $planet2_index + 1, $planet1_index - $planet2_index - 1);\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpovtx6zvs.php:41\n\
    Stack trace:\n#0 /tmp/tmpovtx6zvs.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpovtx6zvs.php\
    \ on line 41\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planet1 = strtolower($planet1);\n\t$planet2\
    \ = strtolower($planet2);\n\t$planets = array(\"mercury\", \"venus\", \"earth\"\
    , \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\");\n\t$planets = array_flip($planets);\n\
    \tif(!isset($planets[$planet1]) || !isset($planets[$planet2])) {\n\t\treturn array();\n\
    \t}\n\t$result = array();\n\tif($planets[$planet1] < $planets[$planet2]) {\n\t\
    \tfor($i = $planets[$planet1] + 1; $i < $planets[$planet2]; $i++) {\n\t\t\t$result[]\
    \ = array_search($i, $planets);\n\t\t}\n\t} else {\n\t\tfor($i = $planets[$planet2]\
    \ + 1; $i < $planets[$planet1]; $i++) {\n\t\t\t$result[] = array_search($i, $planets);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptb7zd48n.php:44\n\
    Stack trace:\n#0 /tmp/tmptb7zd48n.php(53): test()\n#1 {main}\n  thrown in /tmp/tmptb7zd48n.php\
    \ on line 44\n"
  timestamp: 1659979783
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $return = array();\n    if (in_array($planet1, $planets) && in_array($planet2,\
    \ $planets)) {\n        $i = array_search($planet1, $planets);\n        $j = array_search($planet2,\
    \ $planets);\n        if ($i > $j) {\n            $temp = $i;\n            $i\
    \ = $j;\n            $j = $temp;\n        }\n        for ($k = $i + 1; $k < $j;\
    \ $k++) {\n            $return[] = $planets[$k];\n        }\n    }\n    return\
    \ $return;\n}\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $planets2 = array();\n    $flag1 = false;\n    $flag2 = false;\n    for ($i\
    \ = 0; $i < count($planets); $i++) {\n        if ($planets[$i] == $planet1) {\n\
    \            $flag1 = true;\n        }\n        if ($planets[$i] == $planet2)\
    \ {\n            $flag2 = true;\n        }\n    }\n    if ($flag1 == false ||\
    \ $flag2 == false) {\n        return array();\n    }\n    if ($flag1 == true &&\
    \ $flag2 == true) {\n        if ($planet1 == $planet2) {\n            return array();\n\
    \        }\n        if ($planet1 == \"Mercury\" && $planet2 == \"Venus\") {\n\
    \            return array(\"Venus\");\n        }\n        if ($planet1 == \"Mercury\"\
    \ && $planet2 == \"Earth\") {\n            return array(\"Venus\", \"Earth\");\n\
    \        }\n        if ($planet1 == \"Mercury\" && $planet2 == \"Mars\") {\n \
    \           return array(\"Venus\", \"Earth\", \"Mars\");\n        }\n       \
    \ if ($planet1 == \"Mercury\" && $planet2 == \"Jupiter\") {\n            return\
    \ array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\");\n        }\n        if ($planet1\
    \ == \"Mercury\" && $planet2 == \"Saturn\") {\n            return array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\");\n        }\n        if ($planet1\
    \ == \"Mercury\" && $planet2 == \"Uranus\") {\n            return array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\");\n        }\n    \
    \    if ($planet1 == \"Mercury\" && $planet2 == \"Neptune\") {\n            return\
    \ array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"\
    Neptune\");\n        }\n        if ($planet1 == \"Venus\"\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmp0ejh2z02.php
    on line 60

    '
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $planet1_index = array_search($planet1, $planets);\n    $planet2_index = array_search($planet2,\
    \ $planets);\n    if ($planet1_index === false || $planet2_index === false) {\n\
    \        return array();\n    }\n    return array_slice($planets, $planet1_index,\
    \ $planet2_index - $planet1_index + 1);\n}\nfunction candidate(...$args) {\n \
    \   return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\"\
    , \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz0ehdkap.php:32\n\
    Stack trace:\n#0 /tmp/tmpz0ehdkap.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpz0ehdkap.php\
    \ on line 32\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $startPos = array_search($planet1, $planets);\n    $endPos = array_search($planet2,\
    \ $planets);\n    if ($startPos === false || $endPos === false) {\n        return\
    \ array();\n    } else {\n        $arrayResult = array();\n        for ($i = $startPos;\
    \ $i < $endPos; $i++) {\n            $arrayResult[] = $planets[$i];\n        }\n\
    \        return $arrayResult;\n    }\n}\n\nfunction candidate(...$args) {\n  \
    \  return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\"\
    , \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7n2blzpa.php:38\n\
    Stack trace:\n#0 /tmp/tmp7n2blzpa.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp7n2blzpa.php\
    \ on line 38\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = [\"Mercury\", \"Venus\",\
    \ \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  $planetPos1 = array_search($planet1, $planets);\n    $planetPos2 = array_search($planet2,\
    \ $planets);\n    if ( $planetPos1 === false || $planetPos2 === false ) {\n  \
    \      return array();\n    }\n    if ( $planetPos1 > $planetPos2 ) {\n      \
    \  $left = $planetPos2;\n        $right = $planetPos1;\n    } else {\n       \
    \ $left = $planetPos1;\n        $right = $planetPos2;\n    }\n    return array_slice($planets,\
    \ $left + 1, $right - $left - 1);\n}\nvar_dump(bf(\"Jupiter\", \"Neptune\"));\n\
    var_dump(bf(\"Earth\", \"Mercury\"));\nvar_dump(bf(\"Mercury\", \"Uranus\"));\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(2) {\n  [0]=>\n  string(6) \"Saturn\"\n  [1]=>\n  string(6) \"Uranus\"\
    \n}\narray(1) {\n  [0]=>\n  string(5) \"Venus\"\n}\narray(5) {\n  [0]=>\n  string(5)\
    \ \"Venus\"\n  [1]=>\n  string(5) \"Earth\"\n  [2]=>\n  string(4) \"Mars\"\n \
    \ [3]=>\n  string(7) \"Jupiter\"\n  [4]=>\n  string(6) \"Saturn\"\n}\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpji4g928e.php:46\nStack trace:\n\
    #0 /tmp/tmpji4g928e.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpji4g928e.php\
    \ on line 46\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $start = array_search($planet1, $planets);\n    $end = array_search($planet2,\
    \ $planets);\n    if ($start === false || $end === false) {\n        return array();\n\
    \    }\n    if ($start > $end) {\n        $end = $start;\n        $start = array_search($planet2,\
    \ $planets);\n    }\n    $planets = array_slice($planets, $start, $end - $start\
    \ + 1);\n    return $planets;\n}\n\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3q4ne05t.php:38\n\
    Stack trace:\n#0 /tmp/tmp3q4ne05t.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp3q4ne05t.php\
    \ on line 38\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planets = [\n\t\t\"Mercury\",\n\t\t\"\
    Venus\",\n\t\t\"Earth\",\n\t\t\"Mars\",\n\t\t\"Jupiter\",\n\t\t\"Saturn\",\n\t\
    \t\"Uranus\",\n\t\t\"Neptune\"\n\t];\n\t$first = array_search($planet1, $planets);\n\
    \t$second = array_search($planet2, $planets);\n\t$result = [];\n\tif ($first >\
    \ $second) {\n\t\tfor ($i = $second + 1; $i < $first; $i++) {\n\t\t\t$result[]\
    \ = $planets[$i];\n\t\t}\n\t} elseif ($first < $second) {\n\t\tfor ($i = $first\
    \ + 1; $i < $second; $i++) {\n\t\t\t$result[] = $planets[$i];\n\t\t}\n\t} else\
    \ {\n\t\t$result = false;\n\t}\n\treturn $result;\n}\n\n$result = bf(\"Jupiter\"\
    , \"Neptune\");\nvar_dump($result);\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(2) {\n  [0]=>\n  string(6) \"Saturn\"\n  [1]=>\n  string(6) \"Uranus\"\
    \n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpof3_nmbi.php:57\n\
    Stack trace:\n#0 /tmp/tmpof3_nmbi.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpof3_nmbi.php\
    \ on line 57\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    // put your code here\n    $str1 = strtolower($planet1);\n\
    \    $str2 = strtolower($planet2);\n    $array1 = ['mercury', 'venus', 'earth',\
    \ 'mars', 'jupiter', 'saturn', 'uranus', 'neptune'];\n    $array2 = [];\n    $count\
    \ = 0;\n    $bool = false;\n    $array3 = [];\n    for ($i = 0; $i < count($array1);\
    \ $i++) {\n        if ($array1[$i] == $str1) {\n            $count = $i;\n   \
    \         $bool = true;\n        }\n        if ($array1[$i] == $str2) {\n    \
    \        if ($bool) {\n                array_push($array2, $i);\n            }\
    \ else {\n                array_push($array2, $i);\n                array_push($array2,\
    \ $count);\n            }\n        }\n    }\n    if (count($array2) == 0) {\n\
    \        return array();\n    } elseif (count($array2) == 1) {\n        return\
    \ ucfirst($array1[$array2[0]]);\n    } else {\n        if ($array2[0] < $array2[1])\
    \ {\n            for ($i = $array2[0] + 1; $i < $array2[1]; $i++) {\n        \
    \        array_push($array3, $array1[$i]);\n            }\n        } else {\n\
    \            for ($i = $array2[1] + 1; $i < $array2[0]; $i++) {\n            \
    \    array_push($array3, $array1[$i]);\n            }\n        }\n        return\
    \ $array3;\n    }\n}\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_8y_nl7_.php:63\n\
    Stack trace:\n#0 /tmp/tmp_8y_nl7_.php(72): test()\n#1 {main}\n  thrown in /tmp/tmp_8y_nl7_.php\
    \ on line 63\n"
  timestamp: 1659979783
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planets = array(\n\t\t'Mercury',\n\t\t\
    'Venus',\n\t\t'Earth',\n\t\t'Mars',\n\t\t'Jupiter',\n\t\t'Saturn',\n\t\t'Uranus',\n\
    \t\t'Neptune'\n\t);\n\t$pos1 = array_search($planet1, $planets);\n\t$pos2 = array_search($planet2,\
    \ $planets);\n\t$result = array();\n\tif ( $pos1 === false || $pos2 === false\
    \ ) {\n\t\treturn $result;\n\t}\n\t\n\tif ( $pos1 < $pos2 ) {\n\t\t$start = $pos1\
    \ + 1;\n\t\t$end = $pos2;\n\t} else {\n\t\t$start = $pos2 + 1;\n\t\t$end = $pos1;\n\
    \t}\n\t\n\tfor ( $i = $start; $i < $end; $i++ ) {\n\t\t$result[] = $planets[$i];\n\
    \t}\n\t\n\treturn $result;\n}\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979783
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n  $planets = array(\n    'Mercury',\n  \
    \  'Venus',\n    'Earth',\n    'Mars',\n    'Jupiter',\n    'Saturn',\n    'Uranus',\n\
    \    'Neptune',\n  );\n  $index1 = array_search($planet1, $planets);\n  $index2\
    \ = array_search($planet2, $planets);\n  if ($index1 === false || $index2 ===\
    \ false) {\n    return [];\n  }\n  if ($index1 > $index2) {\n    $temp = $index1;\n\
    \    $index1 = $index2;\n    $index2 = $temp;\n  }\n  $result = [];\n  for ($i\
    \ = $index1 + 1; $i < $index2; $i++) {\n    $result[] = $planets[$i];\n  }\n \
    \ return $result;\n}\necho '<pre>';\nvar_dump(bf('Jupiter', 'Neptune'));\nvar_dump(bf('Earth',\
    \ 'Mercury'));\nvar_dump(bf('Mercury', 'Uranus'));\necho '</pre>';\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>array(2) {\n  [0]=>\n  string(6) \"Saturn\"\n  [1]=>\n  string(6)\
    \ \"Uranus\"\n}\narray(1) {\n  [0]=>\n  string(5) \"Venus\"\n}\narray(5) {\n \
    \ [0]=>\n  string(5) \"Venus\"\n  [1]=>\n  string(5) \"Earth\"\n  [2]=>\n  string(4)\
    \ \"Mars\"\n  [3]=>\n  string(7) \"Jupiter\"\n  [4]=>\n  string(6) \"Saturn\"\n\
    }\n</pre>"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t// for planet1\n\t$planet1 = strtolower($planet1);\n\
    \tif ($planet1 == \"mercury\") {\n\t\t$p1 = 1;\n\t} elseif ($planet1 == \"venus\"\
    ) {\n\t\t$p1 = 2;\n\t} elseif ($planet1 == \"earth\") {\n\t\t$p1 = 3;\n\t} elseif\
    \ ($planet1 == \"mars\") {\n\t\t$p1 = 4;\n\t} elseif ($planet1 == \"jupiter\"\
    ) {\n\t\t$p1 = 5;\n\t} elseif ($planet1 == \"saturn\") {\n\t\t$p1 = 6;\n\t} elseif\
    \ ($planet1 == \"uranus\") {\n\t\t$p1 = 7;\n\t} elseif ($planet1 == \"neptune\"\
    ) {\n\t\t$p1 = 8;\n\t} else {\n\t\treturn \"\";\n\t}\n\t// for planet2\n\t$planet2\
    \ = strtolower($planet2);\n\tif ($planet2 == \"mercury\") {\n\t\t$p2 = 1;\n\t\
    } elseif ($planet2 == \"venus\") {\n\t\t$p2 = 2;\n\t} elseif ($planet2 == \"earth\"\
    ) {\n\t\t$p2 = 3;\n\t} elseif ($planet2 == \"mars\") {\n\t\t$p2 = 4;\n\t} elseif\
    \ ($planet2 == \"jupiter\") {\n\t\t$p2 = 5;\n\t} elseif ($planet2 == \"saturn\"\
    ) {\n\t\t$p2 = 6;\n\t} elseif ($planet2 == \"uranus\") {\n\t\t$p2 = 7;\n\t} elseif\
    \ ($planet2 == \"neptune\") {\n\t\t$p2 = 8;\n\t} else {\n\t\treturn \"\";\n\t\
    }\n\tif ($p1 > $p2) {\n\t\t$from = $p2;\n\t\t$to = $p1;\n\t} else {\n\t\t$from\
    \ = $p1;\n\t\t$to = $p2;\n\t}\n\t$result = array();\n\tfor ($i = $from; $i\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ";" in /tmp/tmpw_sxqi_l.php
    on line 70

    '
  timestamp: 1659979783
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $sun = [];\n    if(in_array($planet1, $planets) && in_array($planet2, $planets))\
    \ {\n        $temp = array_search($planet1, $planets);\n        $temp2 = array_search($planet2,\
    \ $planets);\n        if($temp > $temp2) {\n            $temp = $temp + $temp2;\n\
    \            $temp2 = $temp - $temp2;\n            $temp = $temp - $temp2;\n \
    \       }\n        for($i = $temp + 1; $i < $temp2; $i++) {\n            $sun[]\
    \ = $planets[$i];\n        }\n        return $sun;\n    }\n    return $sun;\n\
    }\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nprint_r(bf(\"Earth\", \"Mercury\"));\n\
    print_r(bf(\"Mercury\", \"Uranus\"));\nprint_r(bf(\"Uranus\", \"Mercury\"));\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\nArray\n(\n    [0] => Venus\n    [1] =>\
    \ Earth\n    [2] => Mars\n    [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $array = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  if (array_search($planet1, $array) === false || array_search($planet2, $array)\
    \ === false) {\n        return array();\n    }\n    if (array_search($planet1,\
    \ $array) > array_search($planet2, $array)) {\n        $max = array_search($planet1,\
    \ $array);\n        $min = array_search($planet2, $array);\n    } else {\n   \
    \     $max = array_search($planet2, $array);\n        $min = array_search($planet1,\
    \ $array);\n    }\n    return array_slice($array, $min + 1, $max - $min - 1);\n\
    }\necho \"<pre>\";\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho \"</pre>\";\n\
    echo \"<pre>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"</pre>\";\necho\
    \ \"<pre>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\necho \"</pre>\";\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n</pre><pre>Array\n\
    (\n    [0] => Venus\n)\n</pre><pre>Array\n(\n    [0] => Venus\n    [1] => Earth\n\
    \    [2] => Mars\n    [3] => Jupiter\n    [4] => Saturn\n)\n</pre>\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp3vru37n_.php:50\nStack trace:\n\
    #0 /tmp/tmp3vru37n_.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp3vru37n_.php\
    \ on line 50\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planetOrder = [\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\t\
    $foundPlanet1 = false;\n\t$foundPlanet2 = false;\n\t$array = [];\n\tfor ($i =\
    \ 0; $i < count($planetOrder); $i++) {\n\t\tif ($planetOrder[$i] == $planet1)\
    \ {\n\t\t\t$foundPlanet1 = true;\n\t\t}\n\t\tif ($planetOrder[$i] == $planet2)\
    \ {\n\t\t\t$foundPlanet2 = true;\n\t\t}\n\t\tif ($foundPlanet1 && $foundPlanet2)\
    \ {\n\t\t\tif ($planetOrder[$i] != $planet1 && $planetOrder[$i] != $planet2) {\n\
    \t\t\t\tarray_push($array, $planetOrder[$i]);\n\t\t\t}\n\t\t}\n\t}\n\treturn $array;\n\
    }\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9c6qq2bj.php:44\n\
    Stack trace:\n#0 /tmp/tmp9c6qq2bj.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp9c6qq2bj.php\
    \ on line 44\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $planet1 = array_search($planet1, $planets);\n    $planet2 = array_search($planet2,\
    \ $planets);\n    if ($planet1 === false || $planet2 === false) {\n        echo\
    \ \"You have not inserted a correct planet name.\";\n        return;\n    }\n\
    \    if ($planet1 > $planet2) {\n        list($planet1, $planet2) = array($planet2,\
    \ $planet1);\n    }\n    for ($i = $planet1; $i <= $planet2; $i++) {\n       \
    \ $between[] = $planets[$i];\n    }\n    return $between;\n}\necho \"<pre>\";\n\
    print_r(bf(\"Jupiter\", \"Neptune\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(bf(\"\
    Earth\", \"Mercury\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(bf(\"Mercury\"\
    , \"Uranus\"));\necho \"</pre>\";\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Jupiter\n    [1] => Saturn\n    [2] => Uranus\n\
    \    [3] => Neptune\n)\n</pre><pre>Array\n(\n    [0] => Mercury\n    [1] => Venus\n\
    \    [2] => Earth\n)\n</pre><pre>Array\n(\n    [0] => Mercury\n    [1] => Venus\n\
    \    [2] => Earth\n    [3] => Mars\n    [4] => Jupiter\n    [5] => Saturn\n  \
    \  [6] => Uranus\n)\n</pre>\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpnhhfkk4w.php:48\nStack trace:\n#0 /tmp/tmpnhhfkk4w.php(57): test()\n\
    #1 {main}\n  thrown in /tmp/tmpnhhfkk4w.php on line 48\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n$planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\n\
    $i1 = array_search($planet1, $planets);\n$i2 = array_search($planet2, $planets);\n\
    \n$list = array();\n\nfor ($i = min($i1, $i2); $i < max($i1, $i2); $i++) {\n\t\
    $list[] = $planets[$i];\n}\n\nreturn $list;\n}\n\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4s6de199.php:39\n\
    Stack trace:\n#0 /tmp/tmp4s6de199.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp4s6de199.php\
    \ on line 39\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $array_planets = array();\n    if(in_array($planet1, $planets) && in_array($planet2,\
    \ $planets)) {\n        $first_key = array_search($planet1, $planets);\n     \
    \   $second_key = array_search($planet2, $planets);\n        if($first_key < $second_key)\
    \ {\n            for($i = $first_key + 1; $i < $second_key; $i++) {\n        \
    \        $array_planets[] = $planets[$i];\n            }\n        } else {\n \
    \           for($i = $second_key + 1; $i < $first_key; $i++) {\n             \
    \   $array_planets[] = $planets[$i];\n            }\n        }\n    } else {\n\
    \        return false;\n    }\n    return $array_planets;\n}\n\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n    [3]\
    \ => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp4fj1know.php:51\nStack trace:\n#0 /tmp/tmp4fj1know.php(54): test()\n\
    #1 {main}\n  thrown in /tmp/tmp4fj1know.php on line 51\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planets = [\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\t$tempArray\
    \ = [];\n\t$planet1Index = array_search($planet1, $planets);\n\t$planet2Index\
    \ = array_search($planet2, $planets);\n\tif($planet1Index == false || $planet2Index\
    \ == false) {\n\t\treturn $tempArray;\n\t}\n\tif($planet1Index < $planet2Index)\
    \ {\n\t\t$tempArray = array_slice($planets, $planet1Index + 1, $planet2Index -\
    \ $planet1Index - 1);\n\t}\n\telse {\n\t\t$tempArray = array_slice($planets, $planet2Index\
    \ + 1, $planet1Index - $planet2Index - 1);\n\t}\n\treturn $tempArray;\n}\n\necho\
    \ \"<pre>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"</pre>\";\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n)\n</pre>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp81ta0p6s.php:44\nStack trace:\n#0 /tmp/tmp81ta0p6s.php(52): test()\n\
    #1 {main}\n  thrown in /tmp/tmp81ta0p6s.php on line 44\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n  $planets = [\n    \"Mercury\",\n    \"\
    Venus\",\n    \"Earth\",\n    \"Mars\",\n    \"Jupiter\",\n    \"Saturn\",\n \
    \   \"Uranus\",\n    \"Neptune\"\n  ];\n  $index1 = array_search($planet1, $planets);\n\
    \  $index2 = array_search($planet2, $planets);\n  if (is_bool($index1) || is_bool($index2))\
    \ {\n    return array();\n  }\n  if ($index1 > $index2) {\n    $from = $index2;\n\
    \    $to = $index1;\n  } else {\n    $from = $index1;\n    $to = $index2;\n  }\n\
    \  return array_slice($planets, $from + 1, $to - $from - 1);\n}\n$planet1 = 'Mercury';\n\
    $planet2 = 'Uranus';\nvar_dump(bf($planet1, $planet2));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(5) {\n  [0]=>\n  string(5) \"Venus\"\n  [1]=>\n  string(5) \"Earth\"\
    \n  [2]=>\n  string(4) \"Mars\"\n  [3]=>\n  string(7) \"Jupiter\"\n  [4]=>\n \
    \ string(6) \"Saturn\"\n}\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpd82w9le8.php:55\nStack trace:\n#0 /tmp/tmpd82w9le8.php(60): test()\n\
    #1 {main}\n  thrown in /tmp/tmpd82w9le8.php on line 55\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planets = [\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\t$planetIndex1\
    \ = array_search($planet1, $planets);\n\t$planetIndex2 = array_search($planet2,\
    \ $planets);\n\tif ($planetIndex1 === false || $planetIndex2 === false) {\n\t\t\
    return [];\n\t} else {\n\t\t$planetsToReturn = [];\n\t\tfor ($i = $planetIndex1\
    \ + 1; $i < $planetIndex2; $i++) {\n\t\t\t$planetsToReturn[] = $planets[$i];\n\
    \t\t}\n\t\treturn $planetsToReturn;\n\t}\n}\necho json_encode(bf(\"Jupiter\",\
    \ \"Neptune\")) . \"\\n\";\necho json_encode(bf(\"Earth\", \"Mercury\")) . \"\\\
    n\";\necho json_encode(bf(\"Mercury\", \"Uranus\")) . \"\\n\";\necho json_encode(bf(\"\
    Earth\", \"Mars\")) . \"\\n\";\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "[\"Saturn\",\"Uranus\"]\n[]\n[\"Venus\",\"Earth\",\"Mars\",\"Jupiter\"\
    ,\"Saturn\"]\n[]\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2vpvh2eg.php:42\n\
    Stack trace:\n#0 /tmp/tmp2vpvh2eg.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp2vpvh2eg.php\
    \ on line 42\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $sun = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $start = array_search($planet1, $planets);\n\
    \    $end = array_search($planet2, $planets);\n    $result = array();\n    if\
    \ (($start !== false) && ($end !== false)) {\n        if (($start < $end) && ($end\
    \ - $start > 1)) {\n            $result = array_slice($planets, $start + 1, $end\
    \ - $start - 1);\n        } elseif (($start > $end) && ($start - $end > 1)) {\n\
    \            $result = array_slice($planets, $end + 1, $start - $end - 1);\n \
    \       } elseif (($start < $end) && ($end - $start == 1)) {\n            $result\
    \ = array($planets[$end]);\n        } elseif (($start > $end) && ($start - $end\
    \ == 1)) {\n            $result = array($planets[$start]);\n        }\n    } elseif\
    \ (($start === false) && ($end !== false)) {\n        $result = array_slice($planets,\
    \ $end);\n    } elseif (($start !== false) && ($end === false)) {\n        $result\
    \ = array_slice($planets, 0, $start + 1);\n    } else {\n        $result = array();\n\
    \    }\n    return $result;\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho \"\
    <br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\"\
    , \"Uranus\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n<br>Array\n(\n    [0]\
    \ => Venus\n)\n<br>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpjazltj8y.php:58\nStack trace:\n#0 /tmp/tmpjazltj8y.php(62):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpjazltj8y.php on line 58\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $p1 = array_search($planet1, $planets);\n    $p2 = array_search($planet2, $planets);\n\
    \    if($p1 != FALSE && $p2 != FALSE) {\n        if($p1 > $p2) {\n           \
    \ return array_slice($planets, $p2, $p1 - $p2);\n        } else {\n          \
    \  return array_slice($planets, $p1, $p2 - $p1);\n        }\n    } else {\n  \
    \      return array();\n    }\n}\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaxf1lrhg.php:37\n\
    Stack trace:\n#0 /tmp/tmpaxf1lrhg.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpaxf1lrhg.php\
    \ on line 37\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\n        \"Mercury\"\
    ,\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\"\
    ,\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\n    );\n   \
    \ $key1 = array_search($planet1, $planets);\n    $key2 = array_search($planet2,\
    \ $planets);\n    if($key1 === false || $key2 === false) return array();\n   \
    \ return array_slice($planets, min($key1, $key2) + 1, max($key1, $key2) - min($key1,\
    \ $key2) - 1);\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg6s5o58d.php:44\n\
    Stack trace:\n#0 /tmp/tmpg6s5o58d.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpg6s5o58d.php\
    \ on line 44\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $array = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $index1 = array_search($planet1, $array);\n    $index2 = array_search($planet2,\
    \ $array);\n    $arr1 = array();\n    $arr2 = array();\n    $result = array();\n\
    \    for ($i = $index1 + 1; $i < $index2; $i++) {\n        $arr1[] = $array[$i];\n\
    \    }\n    for ($i = $index2 + 1; $i < $index1; $i++) {\n        $arr2[] = $array[$i];\n\
    \    }\n    if ($index1 < $index2) {\n        $result = $arr1;\n    } else {\n\
    \        $result = $arr2;\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp256tt9a.php:49\n\
    Stack trace:\n#0 /tmp/tmpp256tt9a.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpp256tt9a.php\
    \ on line 49\n"
  timestamp: 1659979783
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $return = array();\n    $start = array_search($planet1, $planets);\n    $end\
    \ = array_search($planet2, $planets);\n    if($start === false || $end === false)\
    \ {\n        return $return;\n    }\n    if($start > $end) {\n        $tmp = $start;\n\
    \        $start = $end;\n        $end = $tmp;\n    }\n    for($i = $start + 1;\
    \ $i < $end; $i++) {\n        $return[] = $planets[$i];\n    }\n    return $return;\n\
    }\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979783
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$solarSystem = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\t\
    $result = array();\n\tif (in_array($planet1, $solarSystem) && in_array($planet2,\
    \ $solarSystem)) {\n\t\t$index1 = array_search($planet1, $solarSystem);\n\t\t\
    $index2 = array_search($planet2, $solarSystem);\n\t\tif ($index1 < $index2) {\n\
    \t\t\tfor ($i = $index1 + 1; $i < $index2; $i++) {\n\t\t\t\t$result[] = $solarSystem[$i];\n\
    \t\t\t}\n\t\t} else {\n\t\t\tfor ($i = $index2 + 1; $i < $index1; $i++) {\n\t\t\
    \t\t$result[] = $solarSystem[$i];\n\t\t\t}\n\t\t}\n\t}\n\treturn $result;\n}\n\
    echo \"<pre>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\necho \"</pre>\";\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n</pre>"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n  if ($planet1 == $planet2) return [];\n\
    \  $planets = [\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\"];\n  if (!in_array($planet1, $planets) || !in_array($planet2,\
    \ $planets)) return [];\n  $result = [];\n  $firstIndex = array_search($planet1,\
    \ $planets);\n  $secondIndex = array_search($planet2, $planets);\n  $range = range($firstIndex,\
    \ $secondIndex);\n  if (count($range) > 1) {\n    $result = array_slice($planets,\
    \ $firstIndex + 1, count($range) - 2);\n  } else {\n    $result = array_slice($planets,\
    \ $secondIndex + 1, count($range) - 1);\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjwstebwz.php:40\n\
    Stack trace:\n#0 /tmp/tmpjwstebwz.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpjwstebwz.php\
    \ on line 40\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planets = [\"Mercury\", \"Venus\", \"\
    Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\t$first\
    \ = array_search($planet1, $planets);\n\t$second = array_search($planet2, $planets);\n\
    \t$array = [];\n\tif ($first > $second) {\n\t\tfor ($i = $second; $i <= $first;\
    \ $i++) {\n\t\t\t$array[] = $planets[$i];\n\t\t}\n\t} else {\n\t\tfor ($i = $first;\
    \ $i <= $second; $i++) {\n\t\t\t$array[] = $planets[$i];\n\t\t}\n\t}\n\treturn\
    \ $array;\n}\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuky5cfbs.php:39\n\
    Stack trace:\n#0 /tmp/tmpuky5cfbs.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpuky5cfbs.php\
    \ on line 39\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $solar_system = array(\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    );\n    $x = array_search($planet1, $solar_system);\n    $y = array_search($planet2,\
    \ $solar_system);\n    if ($x === false || $y === false) {\n        return array();\n\
    \    } elseif ($x > $y) {\n        return array_reverse(array_slice($solar_system,\
    \ $y + 1, $x - $y - 1));\n    } else {\n        return array_slice($solar_system,\
    \ $x + 1, $y - $x - 1);\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpot7leqhc.php:39\n\
    Stack trace:\n#0 /tmp/tmpot7leqhc.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpot7leqhc.php\
    \ on line 39\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\t\
    $included = array();\n\t$pos1 = array_search($planet1, $planets);\n\t$pos2 = array_search($planet2,\
    \ $planets);\n\tif ($pos1 !== false && $pos2 !== false) {\n\t\tif ($pos1 > $pos2)\
    \ {\n\t\t\tfor ($i = $pos2; $i <= $pos1; $i++) {\n\t\t\t\t$included[] = $planets[$i];\n\
    \t\t\t}\n\t\t} else {\n\t\t\tfor ($i = $pos1; $i <= $pos2; $i++) {\n\t\t\t\t$included[]\
    \ = $planets[$i];\n\t\t\t}\n\t\t}\n\t}\n\treturn $included;\n}\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz4be195w.php:41\n\
    Stack trace:\n#0 /tmp/tmpz4be195w.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpz4be195w.php\
    \ on line 41\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $innerPlanets = array(\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\");\n    $outerPlanets = array(\"Jupiter\", \"Saturn\"\
    , \"Uranus\", \"Neptune\");\n    $planets = array(\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n    $result =\
    \ array();\n    if (!in_array($planet1, $planets) || !in_array($planet2, $planets))\
    \ {\n        return $result;\n    }\n    if (in_array($planet1, $innerPlanets)\
    \ && in_array($planet2, $innerPlanets)) {\n        if (array_search($planet1,\
    \ $innerPlanets) < array_search($planet2, $innerPlanets)) {\n            return\
    \ array_slice($innerPlanets, array_search($planet1, $innerPlanets) + 1, array_search($planet2,\
    \ $innerPlanets) - array_search($planet1, $innerPlanets) - 1);\n        } else\
    \ {\n            return array_slice($innerPlanets, array_search($planet2, $innerPlanets)\
    \ + 1, array_search($planet1, $innerPlanets) - array_search($planet2, $innerPlanets)\
    \ - 1);\n        }\n    } else if (in_array($planet1, $outerPlanets) && in_array($planet2,\
    \ $outerPlanets)) {\n        if (array_search($planet1, $outerPlanets) < array_search($planet2,\
    \ $outerPlanets)) {\n            return array_slice($outerPlanets, array_search($planet1,\
    \ $outerPlanets) + 1, array_search($planet2, $outerPlanets) - array_search($planet1,\
    \ $outerPlanets) - 1);\n        } else {\n            return array_slice($outerPlanets,\
    \ array_search($planet2, $outerPlanets) + 1, array_search($planet1, $outerPlanets)\
    \ - array_search($planet2, $outerPlanets) - 1);\n        }\n    } else if (in_array($planet1,\
    \ $innerPlanets) && in_array($planet2,\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpuf6550a8.php on line 39

    '
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $num1 = array_search($planet1, $planets);\n    $num2 = array_search($planet2,\
    \ $planets);\n    $result = [];\n    if ($num1 < $num2) {\n        $n = $num1\
    \ + 1;\n        while ($n < $num2) {\n            array_push($result, $planets[$n]);\n\
    \            $n++;\n        }\n    } else {\n        $n = $num2 + 1;\n       \
    \ while ($n < $num1) {\n            array_push($result, $planets[$n]);\n     \
    \       $n++;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpec4p5s7u.php:49\n\
    Stack trace:\n#0 /tmp/tmpec4p5s7u.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpec4p5s7u.php\
    \ on line 49\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $res = [];\n    $arr = [\"Mercury\"\
    , \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    ];\n    $idx1 = array_search($planet1, $arr);\n    $idx2 = array_search($planet2,\
    \ $arr);\n    if ($idx1 === false || $idx2 === false) {\n        return [];\n\
    \    } elseif ($idx1 === $idx2) {\n        return [$planet1];\n    } elseif ($idx1\
    \ > $idx2) {\n        for ($i = $idx2 + 1; $i < $idx1; $i++) {\n            $res[]\
    \ = $arr[$i];\n        }\n    } else {\n        for ($i = $idx1 + 1; $i < $idx2;\
    \ $i++) {\n            $res[] = $arr[$i];\n        }\n    }\n    return $res;\n\
    }\n\necho \"<pre>\";\necho json_encode(bf(\"Jupiter\", \"Neptune\"));\necho \"\
    </pre>\";\necho \"<pre>\";\necho json_encode(bf(\"Earth\", \"Mercury\"));\necho\
    \ \"</pre>\";\necho \"<pre>\";\necho json_encode(bf(\"Mercury\", \"Uranus\"));\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>[\"Saturn\",\"Uranus\"]</pre><pre>[\"Venus\"]</pre><pre>[\"Venus\"\
    ,\"Earth\",\"Mars\",\"Jupiter\",\"Saturn\"]</pre>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpd3oqjefb.php:57\nStack trace:\n#0 /tmp/tmpd3oqjefb.php(62):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpd3oqjefb.php on line 57\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planets = array(\n\t\t\"Mercury\",\n\t\
    \t\"Venus\",\n\t\t\"Earth\",\n\t\t\"Mars\",\n\t\t\"Jupiter\",\n\t\t\"Saturn\"\
    ,\n\t\t\"Uranus\",\n\t\t\"Neptune\"\n\t);\n\t$planets_between = array();\n\t$p1_index\
    \ = array_search($planet1, $planets);\n\t$p2_index = array_search($planet2, $planets);\n\
    \tif ($p1_index === false || $p2_index === false) {\n\t\treturn $planets_between;\n\
    \t}\n\t$temp = array();\n\tif ($p1_index > $p2_index) {\n\t\t$temp = $p1_index;\n\
    \t\t$p1_index = $p2_index;\n\t\t$p2_index = $temp;\n\t}\n\t$planets_between =\
    \ array_slice($planets, $p1_index + 1, $p2_index - $p1_index - 1);\n\treturn $planets_between;\n\
    }\n\n$planets = array(\n\t\"Mercury\",\n\t\"Venus\",\n\t\"Earth\",\n\t\"Mars\"\
    ,\n\t\"Jupiter\",\n\t\"Saturn\",\n\t\"Uranus\",\n\t\"Neptune\"\n);\n$p1 = $planets[rand(0,\
    \ 7)];\n$p2 = $planets[rand(0, 7)];\necho $p1 . \" \" . $p2 . \"\\n\";\necho implode(\"\
    \ \", bf($p1, $p2)) . \"\\n\";\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "Mercury Venus\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1se51e7_.php:68\n\
    Stack trace:\n#0 /tmp/tmp1se51e7_.php(73): test()\n#1 {main}\n  thrown in /tmp/tmp1se51e7_.php\
    \ on line 68\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $arr = array();\n    $key1 = array_search($planet1, $planets);\n    $key2 =\
    \ array_search($planet2, $planets);\n    if ($key1 == false || $key2 == false)\
    \ {\n        return $arr;\n    }\n    if ($key1 > $key2) {\n        $min = $key2;\n\
    \        $max = $key1;\n    } else {\n        $min = $key1;\n        $max = $key2;\n\
    \    }\n    for ($i = $min + 1; $i < $max; $i++) {\n        $arr[] = $planets[$i];\n\
    \    }\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvixn0emr.php:45\n\
    Stack trace:\n#0 /tmp/tmpvixn0emr.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpvixn0emr.php\
    \ on line 45\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planets = [\n\t\t\"Mercury\",\n\t\t\"\
    Venus\",\n\t\t\"Earth\",\n\t\t\"Mars\",\n\t\t\"Jupiter\",\n\t\t\"Saturn\",\n\t\
    \t\"Uranus\",\n\t\t\"Neptune\"\n\t];\n\tif (!in_array($planet1, $planets) || !in_array($planet2,\
    \ $planets)) {\n\t\treturn [];\n\t}\n\t$p1 = array_search($planet1, $planets);\n\
    \t$p2 = array_search($planet2, $planets);\n\tif ($p1 > $p2) {\n\t\t$tmp = $p1;\n\
    \t\t$p1 = $p2;\n\t\t$p2 = $tmp;\n\t}\n\treturn array_slice($planets, $p1 + 1,\
    \ $p2 - $p1 - 1);\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpy6tox2g8.php:51\nStack trace:\n#0 /tmp/tmpy6tox2g8.php(56):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpy6tox2g8.php on line 51\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = [\n        \"Mercury\",\n\
    \        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\"\
    ,\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\n    ];\n   \
    \ $planetsPairs = array_chunk($planets, 2);\n    $result = [];\n    foreach ($planetsPairs\
    \ as $p) {\n        if ($p[0] == $planet1 && $p[1] == $planet2) {\n          \
    \  $result[] = $p[1];\n        } elseif ($p[0] == $planet2 && $p[1] == $planet1)\
    \ {\n            $result[] = $p[1];\n        } elseif ($p[0] == $planet1 && $p[1]\
    \ != $planet2) {\n            $result[] = $p[1];\n        } elseif ($p[0] == $planet2\
    \ && $p[1] != $planet1) {\n            $result[] = $p[1];\n        }\n    }\n\
    \    return $result;\n}\nvar_dump(bf(\"Jupiter\", \"Neptune\"));\nvar_dump(bf(\"\
    Earth\", \"Mercury\"));\nvar_dump(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(1) {\n  [0]=>\n  string(6) \"Saturn\"\n}\narray(2) {\n  [0]=>\n \
    \ string(5) \"Venus\"\n  [1]=>\n  string(4) \"Mars\"\n}\narray(2) {\n  [0]=>\n\
    \  string(5) \"Venus\"\n  [1]=>\n  string(7) \"Neptune\"\n}\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp78fqu67r.php:52\nStack trace:\n#0 /tmp/tmp78fqu67r.php(61):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp78fqu67r.php on line 52\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n  $planets = array(\n    'Mercury',\n  \
    \  'Venus',\n    'Earth',\n    'Mars',\n    'Jupiter',\n    'Saturn',\n    'Uranus',\n\
    \    'Neptune'\n  );\n  $planets_arr = array();\n  if (in_array($planet1, $planets)\
    \ && in_array($planet2, $planets)) {\n    $pos_planet1 = array_search($planet1,\
    \ $planets);\n    $pos_planet2 = array_search($planet2, $planets);\n    if ($pos_planet1\
    \ > $pos_planet2) {\n      $temp = $pos_planet1;\n      $pos_planet1 = $pos_planet2;\n\
    \      $pos_planet2 = $temp;\n    }\n    for ($i = $pos_planet1 + 1; $i < $pos_planet2;\
    \ $i++) {\n      $planets_arr[] = $planets[$i];\n    }\n  }\n  return $planets_arr;\n\
    }\n\n$planets_arr = bf('Uranus', 'Jupiter');\nprint_r($planets_arr);\n\necho '<br>';\n\
    \n$planets_arr = bf('Earth', 'Venus');\nprint_r($planets_arr);\n\necho '<br>';\n\
    \n$planets_arr = bf('Mars', 'Saturn');\nprint_r($planets_arr);\n\necho '<br>';\n\
    \n$planets_arr = bf('Mars', 'Mars');\nprint_r($planets_arr);\n\necho '<br>';\n\
    \n$planets_arr = bf('Earth', 'Jupiter');\nprint_r($planets_arr);\n\necho '<br>';\n\
    \n$planets_arr = bf('Earth', 'Mercury');\nprint_r($planets_arr);\n\necho '<br>';\n\
    \n$planets_arr = bf('Mercury', 'Uranus');\nprint_r($planets_arr);\n\necho '<br>';\n\
    \n$planets_arr = bf('Mercury',\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpjwm6i7k9.php on line 81

    '
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n  $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  $first_index\
    \ = array_search($planet1, $planets);\n  $second_index = array_search($planet2,\
    \ $planets);\n  if($first_index === false || $second_index === false){\n    return\
    \ array();\n  }\n  else if($first_index > $second_index){\n    $temp = $first_index;\n\
    \    $first_index = $second_index;\n    $second_index = $temp;\n  }\n  return\
    \ array_slice($planets, $first_index + 1, $second_index - $first_index - 1);\n\
    }\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3m4z33ve.php:41\n\
    Stack trace:\n#0 /tmp/tmp3m4z33ve.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp3m4z33ve.php\
    \ on line 41\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $listOfPlanets = array(\n        'Mercury',\n\
    \        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n   \
    \     'Saturn',\n        'Uranus',\n        'Neptune'\n    );\n    $index1 = array_search($planet1,\
    \ $listOfPlanets);\n    $index2 = array_search($planet2, $listOfPlanets);\n  \
    \  if ($index1 !== false && $index2 !== false) {\n        if ($index1 < $index2)\
    \ {\n            return array_slice($listOfPlanets, $index1 + 1, $index2 - $index1\
    \ - 1);\n        } else {\n            return array_slice($listOfPlanets, $index2\
    \ + 1, $index1 - $index2 - 1);\n        }\n    } else {\n        return array();\n\
    \    }\n}\n\n$test1 = array(\"Jupiter\", \"Neptune\");\necho '<br>Test 1: <br>';\n\
    var_dump(bf($test1[0], $test1[1]));\n$test2 = array(\"Earth\", \"Mercury\");\n\
    echo '<br>Test 2: <br>';\nvar_dump(bf($test2[0], $test2[1]));\n$test3 = array(\"\
    Mercury\", \"Uranus\");\necho '<br>Test 3: <br>';\nvar_dump(bf($test3[0], $test3[1]));\n\
    $test4 = array(\"Saturn\", \"Venus\");\necho '<br>Test 4: <br>';\nvar_dump(bf($test4[0],\
    \ $test4[1]));\n$test5 = array(\"Venus\", \"Earth\");\necho '<br>Test 5: <br>';\n\
    var_dump(bf($test5[0], $test5[1]));\n$test6 = array(\"Earth\", \"Saturn\");\n\
    echo '<br>Test 6: <br>';\nvar_dump(bf($test6[0], $test6[1]));\n$test7 = array(\"\
    Saturn\", \"Earth\");\necho '<br>Test 7: <br>';\nvar\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "var", expecting end of file in /tmp/tmpy6pvgbbm.php
    on line 62

    '
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n  $solarSystem = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  if\
    \ (in_array($planet1, $solarSystem) && in_array($planet2, $solarSystem)) {\n \
    \   $position1 = array_search($planet1, $solarSystem);\n    $position2 = array_search($planet2,\
    \ $solarSystem);\n    if ($position1 < $position2) {\n      return array_slice($solarSystem,\
    \ $position1 + 1, $position2 - $position1 - 1);\n    } else {\n      return array_slice($solarSystem,\
    \ $position2 + 1, $position1 - $position2 - 1);\n    }\n  } else {\n    return\
    \ array();\n  }\n}\n\n$planet1 = \"Jupiter\";\n$planet2 = \"Neptune\";\necho \"\
    The planets between {$planet1} and {$planet2} are: \";\nvar_dump(bf($planet1,\
    \ $planet2));\n\n$planet1 = \"Earth\";\n$planet2 = \"Mercury\";\necho \"The planets\
    \ between {$planet1} and {$planet2} are: \";\nvar_dump(bf($planet1, $planet2));\n\
    \n$planet1 = \"Mercury\";\n$planet2 = \"Uranus\";\necho \"The planets between\
    \ {$planet1} and {$planet2} are: \";\nvar_dump(bf($planet1, $planet2));\n\n$planet1\
    \ = \"Mercury\";\n$planet2 = \"Saturn\";\necho \"The planets between {$planet1}\
    \ and {$planet2} are: \";\nvar_dump(bf($planet1, $planet2));\n\n$planet1 = \"\
    Moon\";\n$planet2 = \"Uranus\";\necho \"The planets between {$planet1} and {$planet2}\
    \ are: \";\nvar_dump(bf($planet1, $planet2));\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "The planets between Jupiter and Neptune are: array(2) {\n  [0]=>\n  string(6)\
    \ \"Saturn\"\n  [1]=>\n  string(6) \"Uranus\"\n}\nThe planets between Earth and\
    \ Mercury are: array(1) {\n  [0]=>\n  string(5) \"Venus\"\n}\nThe planets between\
    \ Mercury and Uranus are: array(5) {\n  [0]=>\n  string(5) \"Venus\"\n  [1]=>\n\
    \  string(5) \"Earth\"\n  [2]=>\n  string(4) \"Mars\"\n  [3]=>\n  string(7) \"\
    Jupiter\"\n  [4]=>\n  string(6) \"Saturn\"\n}\nThe planets between Mercury and\
    \ Saturn are: array(4) {\n  [0]=>\n  string(5) \"Venus\"\n  [1]=>\n  string(5)\
    \ \"Earth\"\n  [2]=>\n  string(4) \"Mars\"\n  [3]=>\n  string(7) \"Jupiter\"\n\
    }\nThe planets between Moon and Uranus are: array(0) {\n}\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpzivdm97m.php:67\nStack trace:\n#0 /tmp/tmpzivdm97m.php(72):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpzivdm97m.php on line 67\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $start_index = array_search($planet1, $planets);\n    $end_index = array_search($planet2,\
    \ $planets);\n    if (is_int($start_index) && is_int($end_index)) {\n        $planets_in_between\
    \ = array();\n        for ($i = $start_index; $i <= $end_index; $i++) {\n    \
    \        array_push($planets_in_between, $planets[$i]);\n        }\n        return\
    \ $planets_in_between;\n    } else {\n        return array();\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnb_nvyv7.php:38\n\
    Stack trace:\n#0 /tmp/tmpnb_nvyv7.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpnb_nvyv7.php\
    \ on line 38\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$arr = array('Mercury','Venus','Earth','Mars','Jupiter','Saturn','Uranus','Neptune');\n\
    \tif(!in_array($planet1, $arr) || !in_array($planet2, $arr)) {\n\t\treturn array();\n\
    \t}\n\t$key1 = array_search($planet1, $arr);\n\t$key2 = array_search($planet2,\
    \ $arr);\n\tif($key1 > $key2) {\n\t\treturn array_reverse(array_slice($arr, $key2+1,\
    \ $key1-$key2-1));\n\t}\n\treturn array_slice($arr, $key1+1, $key2-$key1-1);\n\
    }\nvar_dump(bf(\"Jupiter\", \"Neptune\"));\nvar_dump(bf(\"Earth\", \"Mercury\"\
    ));\nvar_dump(bf(\"Mercury\", \"Uranus\"));\nvar_dump(bf(\"Mercury\", \"aa\"));\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(2) {\n  [0]=>\n  string(6) \"Saturn\"\n  [1]=>\n  string(6) \"Uranus\"\
    \n}\narray(1) {\n  [0]=>\n  string(5) \"Venus\"\n}\narray(5) {\n  [0]=>\n  string(5)\
    \ \"Venus\"\n  [1]=>\n  string(5) \"Earth\"\n  [2]=>\n  string(4) \"Mars\"\n \
    \ [3]=>\n  string(7) \"Jupiter\"\n  [4]=>\n  string(6) \"Saturn\"\n}\narray(0)\
    \ {\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnoke4ygl.php:42\n\
    Stack trace:\n#0 /tmp/tmpnoke4ygl.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpnoke4ygl.php\
    \ on line 42\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$arr = ['Mercury', 'Venus', 'Earth', 'Mars',\
    \ 'Jupiter', 'Saturn', 'Uranus', 'Neptune'];\n\t$result = [];\n\t$index1 = array_search($planet1,\
    \ $arr);\n\t$index2 = array_search($planet2, $arr);\n\t$index = $index1;\n\tif\
    \ ($index1 < $index2) {\n\t\tfor ($i = $index1; $i <= $index2; $i++) {\n\t\t\t\
    $result[] = $arr[$i];\n\t\t}\n\t} else {\n\t\tfor ($i = $index1; $i >= $index2;\
    \ $i--) {\n\t\t\t$result[] = $arr[$i];\n\t\t}\n\t}\n\treturn $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqrcurzbt.php:41\n\
    Stack trace:\n#0 /tmp/tmpqrcurzbt.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpqrcurzbt.php\
    \ on line 41\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n  $array = array();\n  $planets = array(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\");\n  $start_index = array_search($planet1, $planets);\n  $end_index\
    \ = array_search($planet2, $planets);\n  if ($start_index === false || $end_index\
    \ === false || $start_index === $end_index) {\n    return $array;\n  }\n  elseif\
    \ ($start_index < $end_index) {\n    $start_index++;\n    while ($start_index\
    \ < $end_index) {\n      array_push($array, $planets[$start_index]);\n      $start_index++;\n\
    \    }\n  }\n  else {\n    $start_index--;\n    while ($start_index > $end_index)\
    \ {\n      array_push($array, $planets[$start_index]);\n      $start_index--;\n\
    \    }\n  }\n  return $array;\n}\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeyu4lws2.php:50\n\
    Stack trace:\n#0 /tmp/tmpeyu4lws2.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpeyu4lws2.php\
    \ on line 50\n"
  timestamp: 1659979783
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $orbits = [\n        'Mercury' => 0,\n\
    \        'Venus' => 1,\n        'Earth' => 2,\n        'Mars' => 3,\n        'Jupiter'\
    \ => 4,\n        'Saturn' => 5,\n        'Uranus' => 6,\n        'Neptune' =>\
    \ 7\n    ];\n    $result = [];\n    $orbits1 = $orbits[$planet1];\n    $orbits2\
    \ = $orbits[$planet2];\n    if ($orbits1 > $orbits2) {\n        $temp = $orbits1;\n\
    \        $orbits1 = $orbits2;\n        $orbits2 = $temp;\n    }\n    if (is_null($orbits1)\
    \ || is_null($orbits2)) {\n        return [];\n    }\n    for ($i = $orbits1 +\
    \ 1; $i < $orbits2; $i++) {\n        $result[] = array_search($i, $orbits);\n\
    \    }\n    return $result;\n}\necho \"<pre>\";\nprint_r(bf(\"Jupiter\", \"Neptune\"\
    ));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\n\
    echo \"</pre>\";\necho \"<pre>\";\nprint_r(bf(\"Mercury\", \"Uranus\"));\necho\
    \ \"</pre>\";\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n</pre><pre>Array\n\
    (\n    [0] => Venus\n)\n</pre><pre>Array\n(\n    [0] => Venus\n    [1] => Earth\n\
    \    [2] => Mars\n    [3] => Jupiter\n    [4] => Saturn\n)\n</pre>\nWarning: Undefined\
    \ array key \"Makemake\" in /tmp/tmp0j9p6_z4.php on line 31\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\t\
    $pos1 = array_search($planet1, $planets);\n\t$pos2 = array_search($planet2, $planets);\n\
    \tif ($pos1 == null || $pos2 == null) {\n\t\treturn array();\n\t}\n\tif ($pos1\
    \ > $pos2) {\n\t\t$temp = $pos1;\n\t\t$pos1 = $pos2;\n\t\t$pos2 = $temp;\n\t}\n\
    \t$new_planets = array();\n\tfor ($i = $pos1 + 1; $i < $pos2; $i++) {\n\t\t$new_planets[]\
    \ = $planets[$i];\n\t}\n\treturn $new_planets;\n}\necho \"<pre>\";\nprint_r(bf(\"\
    Earth\", \"Mercury\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(bf(\"Jupiter\"\
    , \"Neptune\"));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(bf(\"Mercury\", \"\
    Uranus\"));\necho \"</pre>\";\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n)\n</pre><pre>Array\n(\n    [0] => Saturn\n    [1] => Uranus\n\
    )\n</pre><pre>Array\n(\n)\n</pre>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpmv0vujh5.php:51\nStack trace:\n#0 /tmp/tmpmv0vujh5.php(59): test()\n\
    #1 {main}\n  thrown in /tmp/tmpmv0vujh5.php on line 51\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planet1 = strtolower($planet1);\n\t$planet2\
    \ = strtolower($planet2);\n\t\n\t$planets = array(\"mercury\", \"venus\", \"earth\"\
    , \"mars\", \"jupiter\", \"saturn\", \"uranus\", \"neptune\");\n\t\n\t$planet1Index\
    \ = array_search($planet1, $planets);\n\t$planet2Index = array_search($planet2,\
    \ $planets);\n\t\n\tif($planet1Index == false || $planet2Index == false) {\n\t\
    \treturn array();\n\t}\n\t\n\tif($planet1Index > $planet2Index) {\n\t\t$temp =\
    \ $planet1Index;\n\t\t$planet1Index = $planet2Index;\n\t\t$planet2Index = $temp;\n\
    \t}\n\t\n\t$result = array();\n\tfor($i = $planet1Index; $i <= $planet2Index;\
    \ $i++) {\n\t\tarray_push($result, $planets[$i]);\n\t}\n\t\n\treturn $result;\n\
    }\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpixeoojve.php:50\n\
    Stack trace:\n#0 /tmp/tmpixeoojve.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpixeoojve.php\
    \ on line 50\n"
  timestamp: 1659979783
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = [\"Mercury\", \"Venus\",\
    \ \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  $solar_system = [];\n    $planet1 = array_search($planet1, $planets);\n   \
    \ $planet2 = array_search($planet2, $planets);\n    if ($planet1 === false ||\
    \ $planet2 === false) {\n        return $solar_system;\n    }\n    if ($planet1\
    \ < $planet2) {\n        for ($i = $planet1 + 1; $i < $planet2; $i++) {\n    \
    \        $solar_system[] = $planets[$i];\n        }\n    } else {\n        for\
    \ ($i = $planet2 + 1; $i < $planet1; $i++) {\n            $solar_system[] = $planets[$i];\n\
    \        }\n    }\n    return $solar_system;\n}\n\necho \"<pre>\";\nprint_r(bf(\"\
    Jupiter\", \"Neptune\"));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(bf(\"\
    Earth\", \"Mercury\"));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(bf(\"Mercury\"\
    , \"Uranus\"));\necho \"</pre>\";\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n</pre><pre>Array\n\
    (\n    [0] => Venus\n)\n</pre><pre>Array\n(\n    [0] => Venus\n    [1] => Earth\n\
    \    [2] => Mars\n    [3] => Jupiter\n    [4] => Saturn\n)\n</pre>"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\tif(!$planet1 || !$planet2) {\n\t\treturn\
    \ array();\n\t}\n\t$planets = array(\n\t\t\"Mercury\",\n\t\t\"Venus\",\n\t\t\"\
    Earth\",\n\t\t\"Mars\",\n\t\t\"Jupiter\",\n\t\t\"Saturn\",\n\t\t\"Uranus\",\n\t\
    \t\"Neptune\"\n\t);\n\t$index_p1 = array_search($planet1, $planets);\n\t$index_p2\
    \ = array_search($planet2, $planets);\n\tif($index_p1 > $index_p2) {\n\t\t$temp\
    \ = $index_p1;\n\t\t$index_p1 = $index_p2;\n\t\t$index_p2 = $temp;\n\t}\n\t$result\
    \ = array();\n\tfor($i = $index_p1 + 1; $i < $index_p2; $i++) {\n\t\t$result[]\
    \ = $planets[$i];\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx71uu18z.php:57\n\
    Stack trace:\n#0 /tmp/tmpx71uu18z.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpx71uu18z.php\
    \ on line 57\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  if (!in_array($planet1, $planets) || !in_array($planet2, $planets)) {\n   \
    \     return array();\n    }\n    $planet1_index = array_search($planet1, $planets);\n\
    \    $planet2_index = array_search($planet2, $planets);\n    if ($planet1_index\
    \ < $planet2_index) {\n        return array_slice($planets, $planet1_index + 1,\
    \ $planet2_index - $planet1_index - 1);\n    } else {\n        return array_slice($planets,\
    \ $planet2_index + 1, $planet1_index - $planet2_index - 1);\n    }\n}\n\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplrtca12_.php:41\n\
    Stack trace:\n#0 /tmp/tmplrtca12_.php(46): test()\n#1 {main}\n  thrown in /tmp/tmplrtca12_.php\
    \ on line 41\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n  $result = array();\n  $planets = array(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\");\n  $pos1 = array_search($planet1, $planets);\n  $pos2 = array_search($planet2,\
    \ $planets);\n  if ($pos1 < $pos2) {\n    $temp = $pos1;\n    $pos1 = $pos2;\n\
    \    $pos2 = $temp;\n  }\n  for ($i = $pos1; $i > $pos2; $i--) {\n    $result[]\
    \ = $planets[$i];\n  }\n  return $result;\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"\
    ));\necho \"<br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"\
    Mercury\", \"Uranus\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Neptune\n    [1] => Uranus\n    [2] => Saturn\n)\n\
    <br>Array\n(\n    [0] => Earth\n    [1] => Venus\n)\n<br>Array\n(\n    [0] =>\
    \ Uranus\n    [1] => Saturn\n    [2] => Jupiter\n    [3] => Mars\n    [4] => Earth\n\
    \    [5] => Venus\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp358itv2n.php:43\n\
    Stack trace:\n#0 /tmp/tmp358itv2n.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp358itv2n.php\
    \ on line 43\n"
  timestamp: 1659979783
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$array = [\"Mercury\", \"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n\t$key1 = array_search($planet1,\
    \ $array);\n\t$key2 = array_search($planet2, $array);\n\t$result = [];\n\tif($key1\
    \ > $key2) {\n\t\t$temp = $key1;\n\t\t$key1 = $key2;\n\t\t$key2 = $temp;\n\t}\n\
    \tif($key1 !== false && $key2 !== false) {\n\t\tfor($i = $key1 + 1; $i < $key2;\
    \ $i++) {\n\t\t\t$result[] = $array[$i];\n\t\t}\n\t}\n\treturn $result;\n}\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979783
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = [\n        \"Mercury\",\n\
    \        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\"\
    ,\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\n    ];\n   \
    \ $index1 = array_search($planet1, $planets);\n    $index2 = array_search($planet2,\
    \ $planets);\n    $planetsBetween = [];\n    if ($index1 !== false && $index2\
    \ !== false) {\n        if ($index1 < $index2) {\n            $min = $index1;\n\
    \            $max = $index2;\n        } else {\n            $min = $index2;\n\
    \            $max = $index1;\n        }\n        for ($i = $min+1; $i < $max;\
    \ $i++) {\n            $planetsBetween[] = $planets[$i];\n        }\n    }\n \
    \   return $planetsBetween;\n}\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979783
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = [\"Mercury\", \"Venus\",\
    \ \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  $result = [];\n    if (in_array($planet1, $planets) && in_array($planet2, $planets))\
    \ {\n        if ($planet1 == $planet2) {\n            return $result;\n      \
    \  } elseif (array_search($planet1, $planets) < array_search($planet2, $planets))\
    \ {\n            for ($i = array_search($planet1, $planets) + 1; $i < array_search($planet2,\
    \ $planets); $i++) {\n                $result[] = $planets[$i];\n            }\n\
    \        } else {\n            for ($i = array_search($planet2, $planets) + 1;\
    \ $i < array_search($planet1, $planets); $i++) {\n                $result[] =\
    \ $planets[$i];\n            }\n        }\n    }\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$solar_system = array(\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    );\n\t$planets = array();\n\t$start = array_search($planet1, $solar_system);\n\
    \t$end = array_search($planet2, $solar_system);\n\tif ($start < $end) {\n\t\t\
    for ($i = $start + 1; $i < $end; $i++) {\n\t\t\t$planets[] = $solar_system[$i];\n\
    \t\t}\n\t} elseif ($start > $end) {\n\t\tfor ($i = $end + 1; $i < $start; $i++)\
    \ {\n\t\t\t$planets[] = $solar_system[$i];\n\t\t}\n\t} else {\n\t\treturn 0;\n\
    \t}\n\treturn $planets;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4dk3bw80.php:46\n\
    Stack trace:\n#0 /tmp/tmp4dk3bw80.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp4dk3bw80.php\
    \ on line 46\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planets = array( \"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\" );\n\t\
    $p1 = array_search($planet1, $planets);\n\t$p2 = array_search($planet2, $planets);\n\
    \tif ( $p1 === false || $p2 === false ) {\n\t\treturn array();\n\t} elseif ( $p1\
    \ < $p2 ) {\n\t\treturn array_slice($planets, $p1 + 1, $p2 - $p1 - 1);\n\t} else\
    \ {\n\t\treturn array_slice($planets, $p2 + 1, $p1 - $p2 - 1);\n\t}\n}\n\necho\
    \ \"<pre>\";\nvar_dump(bf(\"Jupiter\", \"Neptune\"));\nvar_dump(bf(\"Earth\",\
    \ \"Mercury\"));\nvar_dump(bf(\"Mercury\", \"Uranus\"));\nvar_dump(bf(\"fake\"\
    , \"planet\"));\necho \"</pre>\";\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>array(2) {\n  [0]=>\n  string(6) \"Saturn\"\n  [1]=>\n  string(6)\
    \ \"Uranus\"\n}\narray(1) {\n  [0]=>\n  string(5) \"Venus\"\n}\narray(5) {\n \
    \ [0]=>\n  string(5) \"Venus\"\n  [1]=>\n  string(5) \"Earth\"\n  [2]=>\n  string(4)\
    \ \"Mars\"\n  [3]=>\n  string(7) \"Jupiter\"\n  [4]=>\n  string(6) \"Saturn\"\n\
    }\narray(0) {\n}\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpskmng6ry.php:46\n\
    Stack trace:\n#0 /tmp/tmpskmng6ry.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpskmng6ry.php\
    \ on line 46\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $output_array = array();\n    $counter = 0;\n    if (in_array($planet1, $planets)\
    \ && in_array($planet2, $planets)) {\n        $planet1_key = array_search($planet1,\
    \ $planets);\n        $planet2_key = array_search($planet2, $planets);\n     \
    \   $counter = $planet1_key + 1;\n        if ($planet1_key > $planet2_key) {\n\
    \            for ($i = $planet1_key - 1; $i >= $planet2_key; $i--) {\n       \
    \         $output_array[] = $planets[$i];\n            }\n        } else {\n \
    \           for ($i = $planet1_key + 1; $i <= $planet2_key; $i++) {\n        \
    \        $output_array[] = $planets[$i];\n            }\n        }\n    }\n  \
    \  return $output_array;\n}\n\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt2ok4rn7.php:44\n\
    Stack trace:\n#0 /tmp/tmpt2ok4rn7.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpt2ok4rn7.php\
    \ on line 44\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\n}\nfunction candidate(...$args) {\n  \
    \  return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\"\
    , \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ic87nqv.php:26\n\
    Stack trace:\n#0 /tmp/tmp7ic87nqv.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp7ic87nqv.php\
    \ on line 26\n"
  timestamp: 1659979783
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $result = array();\n    $planet1 = array_search($planet1, $planets);\n    $planet2\
    \ = array_search($planet2, $planets);\n    if ($planet1 === false || $planet2\
    \ === false) {\n        return $result;\n    }\n    if ($planet1 > $planet2) {\n\
    \        $tmp = $planet1;\n        $planet1 = $planet2;\n        $planet2 = $tmp;\n\
    \    }\n    for ($i = $planet1 + 1; $i < $planet2; $i++) {\n        $result[]\
    \ = $planets[$i];\n    }\n    return $result;\n}\n\n$result = bf(\"Uranus\", \"\
    Neptune\");\nvar_dump($result);\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: OK
  stderr: ''
  stdout: 'array(0) {

    }

    '
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $solarSystem = array(\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    );\n    $sun = array(\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\", \"Neptune\");\n    $currentPosition;\n    $planet1Position;\n\
    \    $planet2Position;\n    $inBetweens = array();\n    $planetsBetween = array();\n\
    \    $inBetweens1 = array();\n    $planetsBetween1 = array();\n    $planetsBetween2\
    \ = array();\n    $planetsBetween3 = array();\n    $planetsBetween4 = array();\n\
    \    $planetsBetween5 = array();\n    $planetsBetween6 = array();\n    $planetsBetween7\
    \ = array();\n    $planetsBetween8 = array();\n    $planetsBetween9 = array();\n\
    \    $planetsBetween10 = array();\n    $planetsBetween11 = array();\n    $planetsBetween12\
    \ = array();\n    $planetsBetween13 = array();\n    $planetsBetween14 = array();\n\
    \    $planetsBetween15 = array();\n    $planetsBetween16 = array();\n    $planetsBetween17\
    \ = array();\n    $planetsBetween18 = array();\n    $planetsBetween19 = array();\n\
    \    $planetsBetween20 = array();\n    $planetsBetween21 = array();\n    $planetsBetween22\
    \ = array();\n    $planetsBetween23 = array();\n    $planetsBetween24 = array();\n\
    \    $planetsBetween25 = array();\n    $planetsBetween26 = array();\n    $planetsBetween27\
    \ = array();\n    $planetsBetween28 = array();\n    $planetsBetween29 = array();\n\
    \    $planetsBetween30 = array();\n    $planetsBetween31 = array();\n    $planetsBetween32\
    \ = array();\n    $planetsBetween33 = array();\n    $planetsBetween34 = array();\n\
    \    $planetsBetween35 = array();\n    $planetsBetween36 = array();\n    $planetsBetween37\
    \ = array();\n    $planetsBetween38 = array();\n    $plan\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmprolp6yta.php
    on line 66

    '
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  if(!in_array($planet1, $planets) || !in_array($planet2, $planets)) {\n    \
    \    return array();\n    }\n    $returnArr = array();\n    $planet1Index = array_search($planet1,\
    \ $planets);\n    $planet2Index = array_search($planet2, $planets);\n    if($planet1Index\
    \ < $planet2Index) {\n        $sliceLength = ($planet2Index - $planet1Index) -\
    \ 1;\n        $returnArr = array_slice($planets, $planet1Index + 1, $sliceLength);\n\
    \    } else {\n        $sliceLength = ($planet1Index - $planet2Index) - 1;\n \
    \       $returnArr = array_slice($planets, $planet2Index + 1, $sliceLength);\n\
    \    }\n    return $returnArr;\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"));\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpumh8v2jh.php:45\nStack trace:\n#0 /tmp/tmpumh8v2jh.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpumh8v2jh.php on line 45\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\n        'Mercury',\n\
    \        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n   \
    \     'Saturn',\n        'Uranus',\n        'Neptune'\n    );\n    $bf_planets\
    \ = array();\n    $planet1_idx = array_search($planet1, $planets);\n    $planet2_idx\
    \ = array_search($planet2, $planets);\n    if ($planet1_idx === false || $planet2_idx\
    \ === false) {\n        return $bf_planets;\n    }\n    if ($planet1_idx < $planet2_idx)\
    \ {\n        $bf_planets = array_slice($planets, $planet1_idx + 1, $planet2_idx\
    \ - $planet1_idx - 1);\n    } else {\n        $bf_planets = array_slice($planets,\
    \ $planet2_idx + 1, $planet1_idx - $planet2_idx - 1);\n    }\n    return $bf_planets;\n\
    }\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9ykl6q7r.php:51\n\
    Stack trace:\n#0 /tmp/tmp9ykl6q7r.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp9ykl6q7r.php\
    \ on line 51\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n  $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  if(in_array($planet1,\
    \ $planets) && in_array($planet2, $planets)) {\n    $p1 = array_search($planet1,\
    \ $planets);\n    $p2 = array_search($planet2, $planets);\n    return array_slice($planets,\
    \ $p1 + 1, $p2 - $p1 - 1);\n  }\n  return array();\n}\n\nprint_r(bf(\"Jupiter\"\
    , \"Neptune\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp2fu1n_7r.php:35\nStack trace:\n#0 /tmp/tmp2fu1n_7r.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp2fu1n_7r.php on line 35\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = [\n        'Mercury',\n \
    \       'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n    \
    \    'Saturn',\n        'Uranus',\n        'Neptune'\n    ];\n    $index1 = array_search($planet1,\
    \ $planets);\n    $index2 = array_search($planet2, $planets);\n    if ($index1\
    \ === false || $index2 === false) {\n        return [];\n    }\n    if ($index1\
    \ > $index2) {\n        $tmp = $index1;\n        $index1 = $index2;\n        $index2\
    \ = $tmp;\n    }\n    return array_slice($planets, $index1 + 1, $index2 - $index1\
    \ - 1);\n}\necho \"Test 1: \\n\";\nvar_dump(bf(\"Jupiter\", \"Neptune\"));\necho\
    \ \"Test 2: \\n\";\nvar_dump(bf(\"Earth\", \"Mercury\"));\necho \"Test 3: \\n\"\
    ;\nvar_dump(bf(\"Mercury\", \"Uranus\"));\necho \"Test 4: \\n\";\nvar_dump(bf(\"\
    Earth\", \"Venus\"));\necho \"Test 5: \\n\";\nvar_dump(bf(\"Jupiter\", \"Venus\"\
    ));\necho \"Test 6: \\n\";\nvar_dump(bf(\"Pluto\", \"Venus\"));\necho \"Test 7:\
    \ \\n\";\nvar_dump(bf(\"Mars\", \"Mars\"));\necho \"Test 8: \\n\";\nvar_dump(bf(\"\
    Jupiter\", \"Jupiter\"));\necho \"Test 9: \\n\";\nvar_dump(bf(\"Neptune\", \"\
    Neptune\"));\necho \"Test 10: \\n\";\nvar_dump(bf(\"Uranus\", \"Uranus\"));\n\
    echo \"Test 11: \\n\";\nvar_dump(bf(\"Saturn\", \"Saturn\"));\necho \"Test 12:\
    \ \\n\";\nvar_dump(bf(\"Venus\", \"Venus\"));\necho \"Test 13: \\n\";\nvar_dump(bf(\"\
    Mercury\", \"Mercury\"));\necho \"Test 14: \\n\";\nvar_\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpgvz_z9d2.php
    on line 69

    '
  timestamp: 1659979783
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\t\
    if(!in_array($planet1, $planets) || !in_array($planet2, $planets)) {\n\t\treturn\
    \ array();\n\t}\n\tif(array_search($planet1, $planets) > array_search($planet2,\
    \ $planets)) {\n\t\t$temp = $planet1;\n\t\t$planet1 = $planet2;\n\t\t$planet2\
    \ = $temp;\n\t}\n\t$result = array();\n\t$i = array_search($planet1, $planets)\
    \ + 1;\n\t$j = array_search($planet2, $planets);\n\tfor($i; $i < $j; $i++) {\n\
    \t\t$result[] = $planets[$i];\n\t}\n\treturn $result;\n}\nprint_r(bf(\"Jupiter\"\
    , \"Neptune\"));\nprint_r(bf(\"Earth\", \"Mercury\"));\nprint_r(bf(\"Mercury\"\
    , \"Uranus\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\nArray\n(\n    [0] =>\
    \ Venus\n)\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n  \
    \  [3] => Jupiter\n    [4] => Saturn\n)\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $index1 = array_search($planet1, $planets);\n    $index2 = array_search($planet2,\
    \ $planets);\n    if($index1 !== false && $index2 !== false) {\n        if($index1\
    \ > $index2) {\n            $tmp = $index1;\n            $index1 = $index2;\n\
    \            $index2 = $tmp;\n        }\n        return array_slice($planets,\
    \ $index1 + 1, $index2 - $index1 - 1);\n    }\n    return array();\n}\n\n$planet1\
    \ = \"Mars\";\n$planet2 = \"Uranus\";\n$result = bf($planet1, $planet2);\nprint_r($result);\n\
    echo(\"\\n\");\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Jupiter\n    [1] => Saturn\n)\n\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpdfnaonhw.php:48\nStack trace:\n#0 /tmp/tmpdfnaonhw.php(53):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpdfnaonhw.php on line 48\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\t\
    $index1 = array_search($planet1, $planets);\n\t$index2 = array_search($planet2,\
    \ $planets);\n\tif ($index1 !== false && $index2 !== false) {\n\t\tif ($index1\
    \ < $index2) {\n\t\t\treturn array_slice($planets, $index1 + 1, $index2 - $index1\
    \ - 1);\n\t\t} else {\n\t\t\treturn array_slice($planets, $index2 + 1, $index1\
    \ - $index2 - 1);\n\t\t}\n\t} else {\n\t\treturn array();\n\t}\n}\n\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx_rlh1vy.php:42\n\
    Stack trace:\n#0 /tmp/tmpx_rlh1vy.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpx_rlh1vy.php\
    \ on line 42\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = [\n        \"Mercury\",\n\
    \        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\"\
    ,\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\n    ];\n   \
    \ $p1 = array_search($planet1, $planets);\n    $p2 = array_search($planet2, $planets);\n\
    \    if ($p1 === false || $p2 === false) {\n        return [];\n    } elseif ($p1\
    \ > $p2) {\n        return array_slice($planets, $p2, $p1-$p2);\n    } else {\n\
    \        return array_slice($planets, $p1, $p2-$p1);\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_2ob5gtz.php:45\n\
    Stack trace:\n#0 /tmp/tmp_2ob5gtz.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp_2ob5gtz.php\
    \ on line 45\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $start = 0;\n    $end = 0;\n    $invalid = \"Not a planet\";\n    $inArray\
    \ = in_array($planet1, $planets);\n    $inArray2 = in_array($planet2, $planets);\n\
    \    $planets = array_flip($planets);\n    if ($inArray && $inArray2) {\n    \
    \    $start = $planets[$planet1];\n        $end = $planets[$planet2];\n      \
    \  if ($start > $end) {\n            $temp = $start;\n            $start = $end;\n\
    \            $end = $temp;\n        }\n        return array_slice($planets, $start,\
    \ $end - $start + 1, true);\n    } else {\n        return $invalid;\n    }\n}\n\
    $list = bf(\"Venus\", \"Neptune\");\nprint_r($list);\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [Venus] => 1\n    [Earth] => 2\n    [Mars] => 3\n    [Jupiter]\
    \ => 4\n    [Saturn] => 5\n    [Uranus] => 6\n    [Neptune] => 7\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmptuqx1pp7.php:46\nStack trace:\n\
    #0 /tmp/tmptuqx1pp7.php(55): test()\n#1 {main}\n  thrown in /tmp/tmptuqx1pp7.php\
    \ on line 46\n"
  timestamp: 1659979783
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\n        \"Mercury\"\
    ,\n        \"Venus\",\n        \"Earth\",\n        \"Mars\",\n        \"Jupiter\"\
    ,\n        \"Saturn\",\n        \"Uranus\",\n        \"Neptune\"\n    );\n   \
    \ $first = array_search($planet1, $planets);\n    $second = array_search($planet2,\
    \ $planets);\n    if ($first === false || $second === false) {\n        return\
    \ array();\n    }\n    if ($first > $second) {\n        $tmp = $first;\n     \
    \   $first = $second;\n        $second = $tmp;\n    }\n    $result = array();\n\
    \    for ($i = $first + 1; $i < $second; $i++) {\n        $result[] = $planets[$i];\n\
    \    }\n    return $result;\n}\necho '<pre>';\nprint_r(bf(\"Jupiter\", \"Neptune\"\
    ));\necho '</pre>';\necho '<pre>';\nprint_r(bf(\"Earth\", \"Mercury\"));\necho\
    \ '</pre>';\necho '<pre>';\nprint_r(bf(\"Mercury\", \"Uranus\"));\necho '</pre>';\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n</pre><pre>Array\n\
    (\n    [0] => Venus\n)\n</pre><pre>Array\n(\n    [0] => Venus\n    [1] => Earth\n\
    \    [2] => Mars\n    [3] => Jupiter\n    [4] => Saturn\n)\n</pre>"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planet1 = strtolower($planet1);\n \
    \   $planet2 = strtolower($planet2);\n    $planets = array(\n        'mercury'\
    \ => 1,\n        'venus' => 2,\n        'earth' => 3,\n        'mars' => 4,\n\
    \        'jupiter' => 5,\n        'saturn' => 6,\n        'uranus' => 7,\n   \
    \     'neptune' => 8\n    );\n    $result = array();\n    if (isset($planets[$planet1])\
    \ && isset($planets[$planet2])) {\n        if ($planets[$planet1] > $planets[$planet2])\
    \ {\n            $temp = $planet1;\n            $planet1 = $planet2;\n       \
    \     $planet2 = $temp;\n        }\n        foreach ($planets as $key => $value)\
    \ {\n            if ($planets[$planet1] < $value && $value < $planets[$planet2])\
    \ {\n                $result[] = $key;\n            }\n        }\n    }\n    return\
    \ $result;\n}\n\n$result = bf(\"Jupiter\", \"Neptune\");\nvar_dump($result);\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(2) {\n  [0]=>\n  string(6) \"saturn\"\n  [1]=>\n  string(6) \"uranus\"\
    \n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplfmmywn5.php:54\n\
    Stack trace:\n#0 /tmp/tmplfmmywn5.php(63): test()\n#1 {main}\n  thrown in /tmp/tmplfmmywn5.php\
    \ on line 54\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$array = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\t\
    $result = array();\n\t$val1 = 0;\n\t$val2 = 0;\n\t$correct = true;\n\tfor ($i\
    \ = 0; $i < count($array); $i++) {\n\t\tif ($array[$i] == $planet1) {\n\t\t\t\
    $val1 = $i;\n\t\t}\n\t\tif ($array[$i] == $planet2) {\n\t\t\t$val2 = $i;\n\t\t\
    }\n\t}\n\tif ($val1 == 0 || $val2 == 0) {\n\t\t$correct = false;\n\t}\n\tif ($correct)\
    \ {\n\t\tif ($val1 < $val2) {\n\t\t\tfor ($i = $val1; $i < $val2; $i++) {\n\t\t\
    \t\tarray_push($result, $array[$i]);\n\t\t\t}\n\t\t} else {\n\t\t\tfor ($i = $val2;\
    \ $i < $val1; $i++) {\n\t\t\t\tarray_push($result, $array[$i]);\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn $result;\n}\nprint_r(bf(\"Jupiter\", \"Neptune\"));\necho \"\
    <br>\";\nprint_r(bf(\"Earth\", \"Mercury\"));\necho \"<br>\";\nprint_r(bf(\"Mercury\"\
    , \"Uranus\"));\necho \"<br>\";\nfunction candidate(...$args) {\n    return bf(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !==\
    \ array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !==\
    \ array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\"\
    , \"Makemake\") !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\n\
    test();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Jupiter\n    [1] => Saturn\n    [2] => Uranus\n)\n\
    <br>Array\n(\n)\n<br>Array\n(\n)\n<br>\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpwp8w5_v2.php:59\nStack trace:\n#0 /tmp/tmpwp8w5_v2.php(68):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpwp8w5_v2.php on line 59\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $temp = array();\n    $count1 = count($planets);\n    for ($i = 0; $i < $count1;\
    \ $i++) {\n        if ($planets[$i] == $planet1) {\n            $temp[] = $planets[$i];\n\
    \            $count2 = count($planets);\n            for ($j = $i + 1; $j < $count2;\
    \ $j++) {\n                if ($planets[$j] == $planet2) {\n                 \
    \   $temp[] = $planets[$j];\n                    return $temp;\n             \
    \   } else {\n                    $temp[] = $planets[$j];\n                }\n\
    \            }\n        }\n    }\n    return $temp;\n}\nprint_r(bf(\"Jupiter\"\
    , \"Neptune\"));\nprint_r(bf(\"Earth\", \"Mercury\"));\nprint_r(bf(\"Mercury\"\
    , \"Uranus\"));\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Jupiter\n    [1] => Saturn\n    [2] => Uranus\n  \
    \  [3] => Neptune\n)\nArray\n(\n    [0] => Earth\n    [1] => Mars\n    [2] =>\
    \ Jupiter\n    [3] => Saturn\n    [4] => Uranus\n    [5] => Neptune\n)\nArray\n\
    (\n    [0] => Mercury\n    [1] => Venus\n    [2] => Earth\n    [3] => Mars\n \
    \   [4] => Jupiter\n    [5] => Saturn\n    [6] => Uranus\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpj13_k0m7.php:46\nStack trace:\n#0 /tmp/tmpj13_k0m7.php(55):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpj13_k0m7.php on line 46\n"
  timestamp: 1659979783
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n  $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  $index1\
    \ = array_search($planet1, $planets);\n  $index2 = array_search($planet2, $planets);\n\
    \  $arr = array();\n  if ($index1 === FALSE || $index2 === FALSE) {\n    return\
    \ $arr;\n  }\n  if ($index1 > $index2) {\n    $tmp = $index1;\n    $index1 = $index2;\n\
    \    $index2 = $tmp;\n  }\n  for ($i = $index1 + 1; $i < $index2; $i++) {\n  \
    \  $arr[] = $planets[$i];\n  }\n  return $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979783
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    // $planets = array(\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    );\n    $planets = ['Mercury', 'Venus', 'Earth', 'Mars', 'Jupiter', 'Saturn',\
    \ 'Uranus', 'Neptune'];\n    $position1 = array_search($planet1, $planets);\n\
    \    $position2 = array_search($planet2, $planets);\n    $between = array();\n\
    \    if($position1 !== false and $position2 !== false){\n        if($position1\
    \ < $position2){\n            for($i = $position1+1; $i < $position2; $i++){\n\
    \                $between[] = $planets[$i];\n            }\n        }else{\n \
    \           for($i = $position2+1; $i < $position1; $i++){\n                $between[]\
    \ = $planets[$i];\n            }\n        }\n    }\n    return $between;\n}\n\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n\t\
    $key1 = array_search($planet1, $planets);\n\t$key2 = array_search($planet2, $planets);\n\
    \tif($key1 === false || $key2 === false) {\n\t\treturn false;\n\t}\n\treturn ($key1\
    \ > $key2) ? array_slice($planets, $key2 + 1, $key1 - $key2 - 1) : array_slice($planets,\
    \ $key1 + 1, $key2 - $key1 - 1);\n}\n\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa4qsehzu.php:37\n\
    Stack trace:\n#0 /tmp/tmpa4qsehzu.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpa4qsehzu.php\
    \ on line 37\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\tif ($planet1 == \"Mercury\") {\n\t\t$p1\
    \ = 0;\n\t} elseif ($planet1 == \"Venus\") {\n\t\t$p1 = 1;\n\t} elseif ($planet1\
    \ == \"Earth\") {\n\t\t$p1 = 2;\n\t} elseif ($planet1 == \"Mars\") {\n\t\t$p1\
    \ = 3;\n\t} elseif ($planet1 == \"Jupiter\") {\n\t\t$p1 = 4;\n\t} elseif ($planet1\
    \ == \"Saturn\") {\n\t\t$p1 = 5;\n\t} elseif ($planet1 == \"Uranus\") {\n\t\t\
    $p1 = 6;\n\t} elseif ($planet1 == \"Neptune\") {\n\t\t$p1 = 7;\n\t} else {\n\t\
    \treturn 0;\n\t}\n\tif ($planet2 == \"Mercury\") {\n\t\t$p2 = 0;\n\t} elseif ($planet2\
    \ == \"Venus\") {\n\t\t$p2 = 1;\n\t} elseif ($planet2 == \"Earth\") {\n\t\t$p2\
    \ = 2;\n\t} elseif ($planet2 == \"Mars\") {\n\t\t$p2 = 3;\n\t} elseif ($planet2\
    \ == \"Jupiter\") {\n\t\t$p2 = 4;\n\t} elseif ($planet2 == \"Saturn\") {\n\t\t\
    $p2 = 5;\n\t} elseif ($planet2 == \"Uranus\") {\n\t\t$p2 = 6;\n\t} elseif ($planet2\
    \ == \"Neptune\") {\n\t\t$p2 = 7;\n\t} else {\n\t\treturn 0;\n\t}\n\t$arr = array(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\");\n\tif ($p1 > $p2) {\n\t\tfor ($i = $p2 + 1; $i < $p1; $i++) {\n\
    \t\t\t$result[] = $arr[$i];\n\t\t}\n\t} else {\n\t\tfor ($i = $p1 + 1; $i < $p2;\
    \ $i++)\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\"\
    , \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpr3f6ntb9.php on line 64

    '
  timestamp: 1659979783
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    // your code here\n    $planets = array(\"\
    Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    , \"Neptune\");\n    $pos1 = array_search($planet1, $planets);\n    $pos2 = array_search($planet2,\
    \ $planets);\n    $middleplanets = array();\n    if($pos1 !== false && $pos2 !==\
    \ false){\n        if($pos1 > $pos2){\n            for($i = $pos2 + 1; $i < $pos1;\
    \ $i++){\n                $middleplanets[] = $planets[$i];\n            }\n  \
    \      }else{\n            for($i = $pos1 + 1; $i < $pos2; $i++){\n          \
    \      $middleplanets[] = $planets[$i];\n            }\n        }\n    }\n   \
    \ return $middleplanets;\n}\n\nvar_dump(bf(\"Jupiter\", \"Neptune\"));\nfunction\
    \ candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\", \"\
    Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\"\
    , \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\") !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(2) {\n  [0]=>\n  string(6) \"Saturn\"\n  [1]=>\n  string(6) \"Uranus\"\
    \n}\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  if (in_array($planet1, $planets) && in_array($planet2, $planets)) {\n     \
    \   $location1 = array_search($planet1, $planets);\n        $location2 = array_search($planet2,\
    \ $planets);\n        $result = array();\n        if ($location1 < $location2)\
    \ {\n            for ($i = $location1 + 1; $i < $location2; $i++) {\n        \
    \        $result[] = $planets[$i];\n            }\n        } else {\n        \
    \    for ($i = $location2 + 1; $i < $location1; $i++) {\n                $result[]\
    \ = $planets[$i];\n            }\n        }\n        return $result;\n    } else\
    \ {\n        return \"\";\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpagope1cz.php:50\n\
    Stack trace:\n#0 /tmp/tmpagope1cz.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpagope1cz.php\
    \ on line 50\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n  $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  $orbit1\
    \ = array_search($planet1, $planets);\n  $orbit2 = array_search($planet2, $planets);\n\
    \  $result = array();\n  if ($orbit1 > $orbit2) {\n    for ($i = $orbit2 + 1;\
    \ $i < $orbit1; $i++) {\n      $result[] = $planets[$i];\n    }\n  } else {\n\
    \    for ($i = $orbit1 + 1; $i < $orbit2; $i++) {\n      $result[] = $planets[$i];\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"Jupiter\",\
    \ \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgi8puich.php:46\n\
    Stack trace:\n#0 /tmp/tmpgi8puich.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpgi8puich.php\
    \ on line 46\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $lower = array_search($planet1, $planets);\n    $upper = array_search($planet2,\
    \ $planets);\n    if($lower === false || $upper === false) {\n        return array();\n\
    \    }\n    if($lower > $upper) {\n        $tmp = $lower;\n        $lower = $upper;\n\
    \        $upper = $tmp;\n    }\n    return array_slice($planets, $lower + 1, $upper\
    \ - $lower - 1);\n}\nprint_r(bf(\"Mercury\", \"Uranus\"));\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n    [3]\
    \ => Jupiter\n    [4] => Saturn\n)\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmptma1x_76.php:42\nStack trace:\n#0 /tmp/tmptma1x_76.php(47): test()\n\
    #1 {main}\n  thrown in /tmp/tmptma1x_76.php on line 42\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $space = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  \
    \  $index1 = 0;\n    $index2 = 0;\n    for ($i = 0; $i < count($space); $i++)\
    \ {\n        if ($space[$i] == $planet1) {\n            $index1 = $i;\n      \
    \  } else if ($space[$i] == $planet2) {\n            $index2 = $i;\n        }\n\
    \    }\n    if ($index1 == 0 || $index2 == 0) {\n        echo \"planet is not\
    \ found\";\n    } else {\n        $result = array();\n        if ($index1 < $index2)\
    \ {\n            for ($i = $index1 + 1; $i < $index2; $i++) {\n              \
    \  array_push($result, $space[$i]);\n            }\n        } else {\n       \
    \     for ($i = $index2 + 1; $i < $index1; $i++) {\n                array_push($result,\
    \ $space[$i]);\n            }\n        }\n        return $result;\n    }\n}\n\
    function candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "planet is not found\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps4dup9x3.php:51\n\
    Stack trace:\n#0 /tmp/tmps4dup9x3.php(59): test()\n#1 {main}\n  thrown in /tmp/tmps4dup9x3.php\
    \ on line 51\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n  $planets = array(\"Mercury\", \"Venus\"\
    , \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\");\n  if\
    \ (!in_array($planet1, $planets) || !in_array($planet2, $planets)) {\n    return\
    \ array();\n  }\n  $index1 = array_search($planet1, $planets);\n  $index2 = array_search($planet2,\
    \ $planets);\n  if ($index1 > $index2) {\n    $index1 ^= $index2;\n    $index2\
    \ ^= $index1;\n    $index1 ^= $index2;\n  }\n  return array_slice($planets, $index1+1,\
    \ $index2-$index1-1);\n}\n$ret = bf(\"Jupiter\", \"Neptune\");\nprint_r($ret);\n\
    echo \"\\n\";\n$ret = bf(\"Earth\", \"Mercury\");\nprint_r($ret);\necho \"\\n\"\
    ;\n$ret = bf(\"Mercury\", \"Uranus\");\nprint_r($ret);\necho \"\\n\";\n$ret =\
    \ bf(\"asdf\", \"Neptune\");\nprint_r($ret);\necho \"\\n\";\n$ret = bf(\"Jupiter\"\
    , \"qwer\");\nprint_r($ret);\necho \"\\n\";\n$ret = bf(\"Jupiter\", \"asdf\");\n\
    print_r($ret);\necho \"\\n\";\n$ret = bf(\"qwer\", \"asdf\");\nprint_r($ret);\n\
    echo \"\\n\";\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"\
    Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Earth\", \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Saturn\n    [1] => Uranus\n)\n\nArray\n(\n    [0]\
    \ => Venus\n)\n\nArray\n(\n    [0] => Venus\n    [1] => Earth\n    [2] => Mars\n\
    \    [3] => Jupiter\n    [4] => Saturn\n)\n\nArray\n(\n)\n\nArray\n(\n)\n\nArray\n\
    (\n)\n\nArray\n(\n)\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptek3a29s.php:62\n\
    Stack trace:\n#0 /tmp/tmptek3a29s.php(67): test()\n#1 {main}\n  thrown in /tmp/tmptek3a29s.php\
    \ on line 62\n"
  timestamp: 1659979783
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n  $solar_system = array(\"Mercury\", \"\
    Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"\
    );\n  $output = array();\n  if (in_array($planet1, $solar_system) && in_array($planet2,\
    \ $solar_system)) {\n    $planet1_index = array_search($planet1, $solar_system);\n\
    \    $planet2_index = array_search($planet2, $solar_system);\n    if ($planet1_index\
    \ < $planet2_index) {\n      for ($i = $planet1_index + 1; $i < $planet2_index;\
    \ $i++) {\n        $output[] = $solar_system[$i];\n      }\n    } else {\n   \
    \   for ($i = $planet2_index + 1; $i < $planet1_index; $i++) {\n        $output[]\
    \ = $solar_system[$i];\n      }\n    }\n  }\n  return $output;\n}\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979783
- exit_code: 0
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = array(\n        'Mercury',\n\
    \        'Venus',\n        'Earth',\n        'Mars',\n        'Jupiter',\n   \
    \     'Saturn',\n        'Uranus',\n        'Neptune'\n    );\n    $idx1 = array_search($planet1,\
    \ $planets);\n    $idx2 = array_search($planet2, $planets);\n    if ($idx1 ===\
    \ false || $idx2 === false) return [];\n    if ($idx1 > $idx2) {\n        $tmp\
    \ = $idx1;\n        $idx1 = $idx2;\n        $idx2 = $tmp;\n    }\n    $output\
    \ = [];\n    for ($i = $idx1 + 1; $i < $idx2; $i++) {\n        $output[] = $planets[$i];\n\
    \    }\n    return $output;\n}\n\necho implode(\", \", bf(\"Mercury\", \"Uranus\"\
    ));\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Venus, Earth, Mars, Jupiter, Saturn
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n\t$planets = array('Mercury', 'Venus', 'Earth',\
    \ 'Mars', 'Jupiter', 'Saturn', 'Uranus', 'Neptune');\n\t$bf = array();\n\tif (in_array($planet1,\
    \ $planets) && in_array($planet2, $planets)) {\n\t\tif ($planet1 == 'Mercury')\
    \ {\n\t\t\t$bf = array_slice($planets, 1, array_search($planet2, $planets) - 1);\n\
    \t\t} else if ($planet2 == 'Neptune') {\n\t\t\t$bf = array_slice($planets, array_search($planet1,\
    \ $planets) + 1);\n\t\t} else {\n\t\t\t$bf = array_slice($planets, array_search($planet1,\
    \ $planets) + 1, array_search($planet2, $planets) - array_search($planet1, $planets)\
    \ - 1);\n\t\t}\n\t} else {\n\t\techo(\"Incorrect Planet Names\");\n\t}\n\treturn\
    \ $bf;\n}\nprint_r(bf(\"Earth\", \"Mars\"));\nfunction candidate(...$args) {\n\
    \    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq7a4612s.php:40\n\
    Stack trace:\n#0 /tmp/tmpq7a4612s.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpq7a4612s.php\
    \ on line 40\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = [\"Mercury\", \"Venus\",\
    \ \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\"];\n  \
    \  if (!in_array($planet1, $planets) || !in_array($planet2, $planets)) {\n   \
    \     return [];\n    }\n    $planets = array_flip($planets);\n    $result = array_slice($planets,\
    \ $planets[$planet1], $planets[$planet2] - $planets[$planet1]);\n    return array_keys($result);\n\
    }\n\necho implode(\" \", bf(\"Jupiter\", \"Neptune\"));\necho \"<br>\";\necho\
    \ implode(\" \", bf(\"Earth\", \"Mercury\"));\necho \"<br>\";\necho implode(\"\
    \ \", bf(\"Mercury\", \"Uranus\"));\necho \"<br>\";\necho implode(\" \", bf(\"\
    Mercury\", \"Mercury\"));\necho \"<br>\";\necho implode(\" \", bf(\"Mercury\"\
    , \"Moon\"));\necho \"<br>\";\necho implode(\" \", bf(\"Moon\", \"Mercury\"));\n\
    echo \"<br>\";\necho implode(\" \", bf(\"Hello\", \"World\"));\necho \"<br>\"\
    ;\necho implode(\" \", bf(\"World\", \"Hello\"));\necho \"<br>\";\nfunction candidate(...$args)\
    \ {\n    return bf(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Jupiter\", \"Neptune\") !== array(\"Saturn\", \"Uranus\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Earth\", \"Mercury\") !== array(\"Venus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mercury\",\
    \ \"Uranus\") !== array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Neptune\",\
    \ \"Venus\") !== array(\"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\", \"\
    Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mars\", \"Earth\") !== array()) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(\"Jupiter\", \"Makemake\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Jupiter Saturn Uranus<br>Earth Mars Jupiter Saturn<br>Mercury Venus Earth\
    \ Mars Jupiter Saturn<br><br><br><br><br><br>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpcxar7jbq.php:49\nStack trace:\n#0 /tmp/tmpcxar7jbq.php(58):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpcxar7jbq.php on line 49\n"
  timestamp: 1659979783
- exit_code: 255
  program: "<?php\n// There are eight planets in our solar system: the closerst to\
    \ the Sun \n// is Mercury, the next one is Venus, then Earth, Mars, Jupiter, Saturn,\
    \ \n// Uranus, Neptune.\n// Write a function that takes two planet names as strings\
    \ planet1 and planet2. \n// The function should return an array containing all\
    \ planets whose orbits are \n// located between the orbit of planet1 and the orbit\
    \ of planet2, sorted by \n// the proximity to the sun. \n// The function should\
    \ return an empty array if planet1 or planet2\n// are not correct planet names.\
    \ \n// Examples\n// >>> bf(\"Jupiter\", \"Neptune\")\n// array(\"Saturn\", \"\
    Uranus\")\n// >>> bf(\"Earth\", \"Mercury\")\n// \"Venus\"\n// >>> bf(\"Mercury\"\
    , \"Uranus\")\n// array(\"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\"\
    )\nfunction bf($planet1, $planet2) {\n    $planets = [\n        \"Mercury\", \"\
    Venus\", \"Earth\", \n        \"Mars\", \"Jupiter\", \"Saturn\", \n        \"\
    Uranus\", \"Neptune\"\n    ];\n    $first = array_search($planet1, $planets);\n\
    \    $second = array_search($planet2, $planets);\n    if ($first === false ||\
    \ $second === false) {\n        return [];\n    }\n    if ($first > $second) {\n\
    \        $temp = $first;\n        $first = $second;\n        $second = $temp;\n\
    \    }\n    return array_slice($planets, $first + 1, $second - $first - 1);\n\
    }\n\nfunction candidate(...$args) {\n    return bf(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Jupiter\", \"Neptune\") !== array(\"Saturn\", \"\
    Uranus\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Earth\"\
    , \"Mercury\") !== array(\"Venus\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Mercury\", \"Uranus\") !== array(\"Venus\", \"Earth\"\
    , \"Mars\", \"Jupiter\", \"Saturn\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Neptune\", \"Venus\") !== array(\"Earth\", \"Mars\",\
    \ \"Jupiter\", \"Saturn\", \"Uranus\")) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"Earth\", \"Earth\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Mars\", \"Earth\") !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Jupiter\", \"Makemake\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbygu0z1o.php:46\n\
    Stack trace:\n#0 /tmp/tmpbygu0z1o.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpbygu0z1o.php\
    \ on line 46\n"
  timestamp: 1659979783
