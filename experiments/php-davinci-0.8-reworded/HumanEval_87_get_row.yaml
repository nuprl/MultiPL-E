name: HumanEval_87_get_row
language: php
prompt: "<?php\n// You are given a 2 dimensional data, as a nested arrays,\n// which\
  \ is similar to matrix, however, unlike matrices,\n// each row may contain a different\
  \ number of columns.\n// Given lst, and integer x, find integers x in the array,\n\
  // and return array of arrays, [(x1, y1), (x2, y2) ...] such that\n// each array\
  \ is a coordinate - (row, columns), starting with 0.\n// Sort coordinates initially\
  \ by rows in ascending order.\n// Also, sort coordinates of the row by columns in\
  \ descending order.\n// Examples:\n// >>> get_row(array(array(1, 2, 3, 4, 5, 6),\
  \ array(1, 2, 3, 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1)\n// array(array(0, 0), array(1,\
  \ 4), array(1, 0), array(2, 5), array(2, 0))\n// >>> get_row(array(), 1)\n// array()\n\
  // >>> get_row(array(array(), array(1), array(1, 2, 3)), 3)\n// array(array(2, 2))\n\
  function get_row($lst, $x) {\n"
tests: "function candidate(...$args) {\n    return get_row(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3,\
  \ 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 4), array(1,\
  \ 0), array(2, 5), array(2, 0))) { throw new Exception(\"Test failed!\"); }\n  \
  \  if (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1,\
  \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 2,\
  \ 3, 4, 5, 6)), 2) !== array(array(0, 1), array(1, 1), array(2, 1), array(3, 1),\
  \ array(4, 1), array(5, 1))) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(array(1, 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6), array(1, 1,\
  \ 3, 4, 5, 6), array(1, 2, 1, 4, 5, 6), array(1, 2, 3, 1, 5, 6), array(1, 2, 3,\
  \ 4, 1, 6), array(1, 2, 3, 4, 5, 1)), 1) !== array(array(0, 0), array(1, 0), array(2,\
  \ 1), array(2, 0), array(3, 2), array(3, 0), array(4, 3), array(4, 0), array(5,\
  \ 4), array(5, 0), array(6, 5), array(6, 0))) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(), 1) !== array()) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(array(1)), 2) !== array()) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(array(), array(1), array(1, 2, 3)),\
  \ 3) !== array(array(2, 2))) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $result = [];\n    foreach ($lst as $k => $a) {\n        foreach\
    \ ($a as $k1 => $v) {\n            if ($v == $x) {\n                $result[]\
    \ = [$k, $k1];\n            }\n        }\n    }\n    usort($result, function ($a,\
    \ $b) {\n        return $a[0] == $b[0] ? $b[1] - $a[1] : $a[0] - $b[0];\n    });\n\
    \    return $result;\n}", "\t$coordinates = [];\n\tfor ($row = 0; $row < count($lst);\
    \ $row++) {\n\t\tfor ($col = 0; $col < count($lst[$row]); $col++) {\n\t\t\tif\
    \ ($lst[$row][$col] == $x) {\n\t\t\t\t$coordinates[] = [$row, $col];\n\t\t\t}\n\
    \t\t}\n\t}\n\tusort($coordinates, function($a, $b) {\n\t\tif ($a[0] == $b[0])\
    \ {\n\t\t\treturn $b[1] - $a[1];\n\t\t}\n\t\treturn $a[0] - $b[0];\n\t});\n\t\
    return $coordinates;\n}\n", "  $result = [];\n  foreach ($lst as $row => $values)\
    \ {\n    foreach ($values as $column => $value) {\n      if ($value == $x) {\n\
    \        $result[] = [$row, $column];\n      }\n    }\n  }\n  array_multisort(array_column($result,\
    \ 0), SORT_ASC, array_column($result, 1), SORT_DESC, $result);\n  return $result;\n\
    }\n", "  // your code here\n}\n", "    $res = [];\n    $i = 0;\n    foreach ($lst\
    \ as $row) {\n        $j = 0;\n        foreach ($row as $item) {\n           \
    \ if ($item == $x) {\n                $res[] = [$i, $j];\n            }\n    \
    \        $j++;\n        }\n        $i++;\n    }\n    usort($res, function ($a,\
    \ $b) {\n        if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n  \
    \      }\n        return $a[0] - $b[0];\n    });\n    return $res;\n}\necho \"\
    <pre>\";\nprint_r(get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4,\
    \ 5, 1]], 1));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(get_row([], 1));\n\
    echo \"</pre>\";\n\necho \"<pre>\";\nprint_r(get_row([[], [1], [1, 2, 3]], 3));\n\
    echo \"</pre>\";", "    $matrix = [];\n    foreach ($lst as $row) {\n        if\
    \ (!empty($row)) {\n            foreach ($row as $key => $column) {\n        \
    \        if ($column == $x) {\n                    $matrix[] = [$key, array_search($row,\
    \ $lst)];\n                }\n            }\n        }\n    }\n    usort($matrix,\
    \ function ($a, $b) {\n        if ($a[1] == $b[1]) {\n            return 0;\n\
    \        }\n        return ($a[1] < $b[1]) ? -1 : 1;\n    });\n    return $matrix;\n\
    }\n", "  $result = [];\n  foreach ($lst as $i => $row) {\n    foreach ($row as\
    \ $j => $col) {\n      if ($col == $x) {\n        $result[] = [$i, $j];\n    \
    \  }\n    }\n  }\n  usort($result, function($a, $b) {\n    if ($a[0] == $b[0])\
    \ {\n      return $b[1] - $a[1];\n    }\n    return $a[0] - $b[0];\n  });\n  return\
    \ $result;\n}", "    $sorted_lst = [];\n    foreach ($lst as $row_index => $row)\
    \ {\n        foreach ($row as $col_index => $el) {\n            if ($el == $x)\
    \ {\n                $sorted_lst[] = [$row_index, $col_index];\n            }\n\
    \        }\n    }\n    if (empty($sorted_lst)) {\n        return $sorted_lst;\n\
    \    }\n    usort($sorted_lst, function ($row1, $row2) {\n        return $row1[0]\
    \ <=> $row2[0];\n    });\n    usort($sorted_lst, function ($row1, $row2) {\n \
    \       return $row1[1] <=> $row2[1];\n    });\n    return $sorted_lst;\n}\n\n\
    echo var_export(get_row([[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4,\
    \ 5, 1]], 1), true) . \"\\n\";\necho var_export(get_row([], 1), true) . \"\\n\"\
    ;\necho var_export(get_row([[], [1], [1, 2, 3]], 3), true) . \"\\n\";", "    $temp\
    \ = [];\n    foreach ($lst as $k => $v) {\n        $temp[$k] = array_keys($v,\
    \ $x);\n    }\n    $temp = array_filter($temp);\n    $result = [];\n    foreach\
    \ ($temp as $k => $v) {\n        $result[] = array_map(function($v) use ($k) {\n\
    \            return [$k, $v];\n        }, $v);\n    }\n    return array_merge(...$result);\n\
    }\n", "\t$y = 0;\n\t$res = array();\n\tforeach ($lst as $l) {\n\t\t$cur = array();\n\
    \t\t$x_c = 0;\n\t\tforeach ($l as $item) {\n\t\t\tif ($item == $x) {\n\t\t\t\t\
    $cur[] = array($y, $x_c);\n\t\t\t}\n\t\t\t$x_c++;\n\t\t}\n\t\t$res = array_merge($res,\
    \ $cur);\n\t\t$y++;\n\t}\n\t$func = function($a, $b) {\n\t\tif ($a[0] == $b[0])\
    \ {\n\t\t\treturn $b[1] - $a[1];\n\t\t}\n\t\treturn $a[0] - $b[0];\n\t};\n\tusort($res,\
    \ $func);\n\treturn $res;\n}", "    // your code here\n    $output = [];\n   \
    \ for ($i = 0; $i < count($lst); $i++) {\n        for ($j = 0; $j < count($lst[$i]);\
    \ $j++) {\n            if ($lst[$i][$j] == $x) {\n                $output[] =\
    \ [$i, $j];\n            }\n        }\n    }\n    array_multisort(array_column($output,\
    \ 0), SORT_ASC, array_column($output, 1), SORT_DESC, $output);\n    return $output;\n\
    }", "  $result = [];\n  $rows = count($lst);\n  for ($row = 0; $row < $rows; $row++)\
    \ {\n    $columns = count($lst[$row]);\n    for ($column = 0; $column < $columns;\
    \ $column++) {\n      if ($lst[$row][$column] == $x) {\n        $result[] = [$row,\
    \ $column];\n      }\n    }\n  }\n  return $result;\n}\n", "  $result = [];\n\
    \  foreach ($lst as $y => $row) {\n    foreach ($row as $z => $value) {\n    \
    \  if ($value == $x) {\n        $result[] = [$y, $z];\n      }\n    }\n  }\n \
    \ usort($result, function($a, $b) {\n    if ($a[0] < $b[0]) {\n      return -1;\n\
    \    } elseif ($a[0] > $b[0]) {\n      return 1;\n    } else {\n      if ($a[1]\
    \ < $b[1]) {\n        return 1;\n      } elseif ($a[1] > $b[1]) {\n        return\
    \ -1;\n      } else {\n        return 0;\n      }\n    }\n  });\n  return $result;\n\
    }", "  $results = [];\n  $rows = count($lst);\n  for ($i = 0; $i < $rows; $i++)\
    \ {\n    $row = $lst[$i];\n    $rowSize = count($row);\n    for ($j = 0; $j <\
    \ $rowSize; $j++) {\n      if ($row[$j] == $x) {\n        $results[] = [$i, $j];\n\
    \      }\n    }\n  }\n  usort($results, function($a, $b) {\n    if ($a[0] == $b[0])\
    \ {\n      return $b[1] - $a[1];\n    }\n    return $a[0] - $b[0];\n  });\n  return\
    \ $results;\n}\n\n$lst = [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4,\
    \ 5, 1]];\nprint_r(get_row($lst, 1));\nprint_r(get_row([], 1));\nprint_r(get_row([[],\
    \ [1], [1, 2, 3]], 3));", "    $matrix = [];\n    $coords = [];\n    $x = (int)$x;\n\
    \    foreach ($lst as $i => $arr) {\n        $matrix[] = $arr;\n        foreach\
    \ ($arr as $j => $elem) {\n            if ($elem === $x) {\n                $coords[]\
    \ = [$i, $j];\n            }\n        }\n    }\n    array_multisort(array_column($coords,\
    \ 0), SORT_ASC, array_column($coords, 1), SORT_DESC, $coords);\n    return $coords;\n\
    }\n$lst = [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 1, 6], [1, 2, 3, 4, 5, 1]];\n$n =\
    \ 1;\nprint_r(get_row($lst, $n));", "    if (empty($lst)) return [];\n    $res\
    \ = [];\n    for ($i = 0; $i < count($lst); $i++) {\n        for ($j = 0; $j <\
    \ count($lst[$i]); $j++) {\n            if ($lst[$i][$j] == $x) {\n          \
    \      $res[] = [$i, $j];\n            }\n        }\n    }\n    usort($res, function($a,\
    \ $b) {\n        return $a[0] == $b[0] ? $b[1] - $a[1] : $a[0] - $b[0];\n    });\n\
    \    return $res;\n}\n", "    $result = [];\n    foreach ($lst as $keyRow => $row)\
    \ {\n        foreach ($row as $keyCol => $item) {\n            if ($item == $x)\
    \ {\n                $result[] = [$keyRow, $keyCol];\n            }\n        }\n\
    \    }\n    uasort($result, function ($a, $b) {\n        return ($a[0] == $b[0])\
    \ ? $b[1] - $a[1] : $a[0] - $b[0];\n    });\n    return $result;\n}", "    $result\
    \ = [];\n    foreach ($lst as $i => $sub_lst) {\n        foreach ($sub_lst as\
    \ $j => $v) {\n            if ($v == $x) {\n                $result[] = [$i, $j];\n\
    \            }\n        }\n    }\n    usort($result, function ($a, $b) {\n   \
    \     if ($a[0] != $b[0]) {\n            return $a[0] - $b[0];\n        }\n  \
    \      return $b[1] - $a[1];\n    });\n    return $result;\n}\n", "    $coordinates\
    \ = [];\n    for ($i = 0; $i < count($lst); $i++) {\n        for ($j = 0; $j <\
    \ count($lst[$i]); $j++) {\n            if ($lst[$i][$j] == $x) {\n          \
    \      $coordinates[] = [$i, $j];\n            }\n        }\n    }\n    usort($coordinates,\
    \ function ($a, $b) {\n        return $a[0] > $b[0];\n    });\n    foreach ($coordinates\
    \ as $key => $value) {\n        $coordinates[$key] = rsort($coordinates[$key]);\n\
    \    }\n    return $coordinates;\n}", "    $result = [];\n    foreach ($lst as\
    \ $row => $columns) {\n        foreach ($columns as $column => $value) {\n   \
    \         if ($value == $x) {\n                $result[] = [$row, $column];\n\
    \            }\n        }\n    }\n    usort($result, function ($a, $b) {\n   \
    \     if ($a[0] == $b[0]) {\n            return $b[1] - $a[1];\n        }\n  \
    \      return $a[0] - $b[0];\n    });\n    return $result;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
