name: HumanEval_93_encode
language: php
prompt: "<?php\n// Write a function that takes a message, and encodes in such a \n\
  // way that it swaps case of all letters, replaces all vowels in \n// the message\
  \ with the letter that appears 2 places ahead of that \n// vowel in the english\
  \ alphabet. \n// Assume only letters. \n// Examples:\n// >>> encode(\"test\")\n\
  // \"TGST\"\n// >>> encode(\"This is a message\")\n// \"tHKS KS C MGSSCGG\"\nfunction\
  \ encode($message) {\n"
tests: "function candidate(...$args) {\n    return encode(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(\"TEST\") !== \"tgst\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"Mudasir\") !== \"mWDCSKR\") { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(\"YES\") !== \"ygs\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"This is a message\") !==\
  \ \"tHKS KS C MGSSCGG\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
  I DoNt KnOw WhAt tO WrItE\") !== \"k dQnT kNqW wHcT Tq wRkTg\") { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["    $result = \"\";\n    $vowels = array('a', 'e', 'i', 'o', 'u');\n\
    \    $word = str_split($message);\n    for ($i = 0; $i < count($word); $i++) {\n\
    \        $letter = $word[$i];\n        if ($letter == strtoupper($letter)) {\n\
    \            $letter = strtolower($letter);\n        } else {\n            $letter\
    \ = strtoupper($letter);\n        }\n        if (in_array($letter, $vowels)) {\n\
    \            $key = array_search($letter, $vowels);\n            if ($key > 2)\
    \ {\n                $letter = $vowels[$key - 2];\n            } else {\n    \
    \            $letter = $vowels[4 - (2 - $key)];\n            }\n        }\n  \
    \      $result .= $letter;\n    }\n    return $result;\n}\nprint encode(\"test\"\
    ) . \"\\n\";\nprint encode(\"This is a message\") . \"\\n\";", "\t$vowels = ['a',\
    \ 'e', 'i', 'o', 'u'];\n\t$encoded_message = '';\n\t$message_length = strlen($message);\n\
    \tfor ($i = 0; $i < $message_length; $i++) {\n\t\t$current_char = $message[$i];\n\
    \t\tif (preg_match('/[a-z]/i', $current_char)) {\n\t\t\t$is_vowel = in_array(strtolower($current_char),\
    \ $vowels);\n\t\t\tif ($is_vowel) {\n\t\t\t\t$current_char = strtolower($current_char);\n\
    \t\t\t\t$current_char_index = array_search($current_char, $vowels);\n\t\t\t\t\
    $vowel_to_add = $vowels[($current_char_index + 2) % 5];\n\t\t\t\t$encoded_message\
    \ .= strtoupper($vowel_to_add);\n\t\t\t} else {\n\t\t\t\t$encoded_message .= strtoupper($current_char);\n\
    \t\t\t}\n\t\t} else {\n\t\t\t$encoded_message .= $current_char;\n\t\t}\n\t}\n\t\
    return $encoded_message;\n}\n\nprint(\">>> encode(\\\"test\\\")\\n\\\"\".encode(\"\
    test\").\"\\\"\\n\");\nprint(\">>> encode(\\\"This is a message\\\")\\n\\\"\"\
    .encode(\"This is a message\").\"\\\"\\n\");", "\t$encodedMsg = \"\";\n\t$vowels\
    \ = array(\"a\", \"e\", \"i\", \"o\", \"u\");\n\t$msgArray = str_split($message);\n\
    \tfor ($i = 0; $i < count($msgArray); $i++) {\n\t\tif (in_array($msgArray[$i],\
    \ $vowels)) {\n\t\t\tif ($msgArray[$i] == \"u\") {\n\t\t\t\t$encodedMsg .= \"\
    a\";\n\t\t\t} else {\n\t\t\t\t$encodedMsg .= $vowels[array_search($msgArray[$i],\
    \ $vowels) + 2];\n\t\t\t}\n\t\t} else if (ctype_upper($msgArray[$i])) {\n\t\t\t\
    $encodedMsg .= strtolower($msgArray[$i]);\n\t\t} else {\n\t\t\t$encodedMsg .=\
    \ strtoupper($msgArray[$i]);\n\t\t}\n\t}\n\treturn $encodedMsg;\n}\necho encode(\"\
    test\") . PHP_EOL;\necho encode(\"This is a message\") . PHP_EOL;", "\t$output\
    \ = '';\n\t$vowels = array('a', 'e', 'i', 'o', 'u');\n\tfor ($i = 0; $i < strlen($message);\
    \ $i++) {\n\t\t$letter = strtolower($message[$i]);\n\t\tif (ctype_alpha($letter))\
    \ {\n\t\t\tif (in_array($letter, $vowels)) {\n\t\t\t\t$new_letter = $vowels[array_search($letter,\
    \ $vowels) + 2 % 5];\n\t\t\t} else {\n\t\t\t\t$new_letter = $letter;\n\t\t\t}\n\
    \t\t\t$output .= ctype_upper($message[$i]) ? strtoupper($new_letter) : $new_letter;\n\
    \t\t} else {\n\t\t\t$output .= $message[$i];\n\t\t}\n\t}\n\treturn $output;\n\
    }\necho encode(\"aBcD\");", "\t$vowels = ['a', 'e', 'i', 'o', 'u'];\n\t$encodedMessage\
    \ = '';\n\t$message = strtolower($message);\n\tfor ($i = 0; $i < strlen($message);\
    \ $i++) {\n\t\t$encodedMessage .= (\n\t\t\tin_array($message[$i], $vowels)\n\t\
    \t\t? chr(ord($message[$i]) + 2)\n\t\t\t: $message[$i]\n\t\t);\n\t}\n\treturn\
    \ $encodedMessage;\n}\n\necho encode('This is a message') . PHP_EOL;\necho encode('test')\
    \ . PHP_EOL;", "    $encoded = \"\";\n    for ($i = 0; $i < strlen($message);\
    \ $i++) {\n        $letter = $message[$i];\n        if (ctype_upper($letter))\
    \ {\n            $letter = strtolower($letter);\n        } else {\n          \
    \  $letter = strtoupper($letter);\n        }\n        $charCode = ord($letter);\n\
    \        if ($charCode >= 97 && $charCode <= 100) {\n            $charCode +=\
    \ 22;\n        } else if ($charCode >= 101 && $charCode <= 104) {\n          \
    \  $charCode += 20;\n        } else if ($charCode >= 105 && $charCode <= 108)\
    \ {\n            $charCode += 18;\n        } else if ($charCode >= 109 && $charCode\
    \ <= 112) {\n            $charCode += 16;\n        } else if ($charCode >= 113\
    \ && $charCode <= 116) {\n            $charCode += 14;\n        } else if ($charCode\
    \ >= 117 && $charCode <= 122) {\n            $charCode += 12;\n        }\n   \
    \     $encoded .= chr($charCode);\n    }\n    return $encoded;\n}\n$message =\
    \ \"test\";\n$encoded = encode($message);\nprint_r($encoded);\n$message = \"This\
    \ is a message\";\n$encoded = encode($message);\nprint_r($encoded);", "\t$vowels\
    \ = array(\"a\", \"e\", \"i\", \"o\", \"u\");\n\t$cypher = \"\";\n\t$len = strlen($message);\n\
    \tfor ($i = 0; $i < $len; $i++) {\n\t\tif (in_array($message[$i], $vowels)) {\n\
    \t\t\t$cypher .= $vowels[array_search($message[$i], $vowels) + 2];\n\t\t} else\
    \ {\n\t\t\t$cypher .= $message[$i];\n\t\t}\n\t}\n\treturn $cypher;\n}\n\n$message\
    \ = \"test\";\necho encode($message) . \"\\n\";\n\n$message = \"This is a message\"\
    ;\necho encode($message) . \"\\n\";\n", "\t$result = \"\";\n\t$message = strtolower($message);\n\
    \t$vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\");\n\t$replacements = array(\"\
    c\", \"f\", \"j\", \"n\", \"r\");\n\tfor ($i = 0; $i < strlen($message); $i++)\
    \ {\n\t\tif (in_array($message[$i], $vowels)) {\n\t\t\t$result .= $replacements[array_search($message[$i],\
    \ $vowels)];\n\t\t} else {\n\t\t\t$result .= $message[$i];\n\t\t}\n\t}\n\treturn\
    \ strtoupper($result);\n}\n\necho encode(\"test\") . \"\\n\";\necho encode(\"\
    This is a message\") . \"\\n\";", "    $message = strtolower($message);\n    $vowels\
    \ = array(\"a\", \"e\", \"i\", \"o\", \"u\");\n    $message = str_split($message);\n\
    \    for ($i = 0; $i < count($message); $i++) {\n        if (in_array($message[$i],\
    \ $vowels)) {\n            if ($message[$i] == \"u\") {\n                $message[$i]\
    \ = \"a\";\n            } else {\n                $message[$i] = ++$message[$i];\n\
    \            }\n        }\n    }\n    $message = implode($message);\n    $message\
    \ = strtoupper($message);\n    return $message;\n}\necho encode(\"This is a message\"\
    );", "    $encrypted_message = \"\";\n    $length = strlen($message);\n    for\
    \ ($i = 0; $i < $length; $i++) {\n        $current_letter = $message[$i];\n  \
    \      $encrypted_message .= encodeLetter($current_letter);\n    }\n    return\
    \ $encrypted_message;\n}\n", "  $vowels = array(\"a\", \"e\", \"i\", \"o\", \"\
    u\");\n  $newMessage = \"\";\n  for ($i = 0; $i < strlen($message); $i++) {\n\
    \    $originalChar = $message[$i];\n    $newChar = \"\";\n    if (ctype_upper($originalChar))\
    \ {\n      $newChar = strtolower($originalChar);\n    } else if (ctype_lower($originalChar))\
    \ {\n      $newChar = strtoupper($originalChar);\n    }\n    if (in_array($newChar,\
    \ $vowels)) {\n      $newMessage .= $vowels[(array_search($newChar, $vowels) +\
    \ 2) % 5];\n    } else {\n      $newMessage .= $newChar;\n    }\n  }\n  return\
    \ $newMessage;\n}", "  $newStr = '';\n  $vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \  for ($i = 0; $i < strlen($message); $i++) {\n    $ch = $message[$i];\n    if\
    \ (strtolower($ch) == $ch) {\n      if (in_array($ch, $vowels)) {\n        $newStr\
    \ .= ($vowels[(array_search($ch, $vowels) + 2) % 5]);\n      } else {\n      \
    \  $newStr .= strtoupper($ch);\n      }\n    } else {\n      if (in_array(strtolower($ch),\
    \ $vowels)) {\n        $newStr .= strtolower($vowels[(array_search(strtolower($ch),\
    \ $vowels) + 2) % 5]);\n      } else {\n        $newStr .= strtolower($ch);\n\
    \      }\n    }\n  }\n  return $newStr;\n}\n\necho encode(\"test\") . \"<br>\"\
    ;\necho encode(\"This is a message\") . \"<br>\";\n", "  $characters = str_split($message);\n\
    \  $newMessage = \"\";\n  $vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  $charValue\
    \ = \"\";\n  foreach ($characters as $char) {\n    if (ctype_upper($char)) {\n\
    \      $charValue = strtolower($char);\n    } else {\n      $charValue = strtoupper($char);\n\
    \    }\n    if (in_array($charValue, $vowels)) {\n      if ($charValue == \"z\"\
    ) {\n        $charValue = \"b\";\n      } else if ($charValue == \"u\") {\n  \
    \      $charValue = \"a\";\n      } else {\n        $charValue = chr(ord($charValue)\
    \ + 2);\n      }\n    }\n    $newMessage .= $charValue;\n  }\n  return $newMessage;\n\
    }\n\necho encode(\"test\");\necho \"\\n\";\necho encode(\"This is a message\"\
    );\necho \"\\n\";", "\t$message_arr = str_split($message);\n\t$str = \"\";\n\t\
    foreach ($message_arr as $value) {\n\t\tif (ctype_upper($value)) {\n\t\t\t$str\
    \ .= strtolower($value);\n\t\t}\n\t\telse if (ctype_lower($value)) {\n\t\t\t$str\
    \ .= strtoupper($value);\n\t\t}\n\t\telse {\n\t\t\t$str .= $value;\n\t\t}\n\t\
    }\n\treturn $str;\n}\n\n$message = \"This is a message\";\necho encode($message);",
  "\t$alphabet = array('a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l',\
    \ 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z');\n\t$vowels\
    \ = array('a', 'e', 'i', 'o', 'u');\n\t$messageArray = str_split($message);\n\t\
    $newMessage = '';\n\tforeach ($messageArray as $letter) {\n\t\tif (ctype_upper($letter))\
    \ {\n\t\t\t$newMessage .= strtolower($letter);\n\t\t} elseif (ctype_lower($letter))\
    \ {\n\t\t\t$newMessage .= strtoupper($letter);\n\t\t} else {\n\t\t\t$newMessage\
    \ .= $letter;\n\t\t}\n\t}\n\t$newMessageArray = str_split($newMessage);\n\t$encodedMessage\
    \ = '';\n\tforeach ($newMessageArray as $letter) {\n\t\tif (in_array($letter,\
    \ $vowels)) {\n\t\t\t$position = array_search($letter, $alphabet);\n\t\t\t$encodedMessage\
    \ .= $alphabet[$position + 2];\n\t\t} else {\n\t\t\t$encodedMessage .= $letter;\n\
    \t\t}\n\t}\n\treturn $encodedMessage;\n}", "    $table = ['a' => 'c', 'e' => 'g',\
    \ 'i' => 'k', 'o' => 'q', 'u' => 'w'];\n    $encoded = '';\n    $message = strtolower($message);\n\
    \    for ($i = 0; $i < strlen($message); $i++) {\n        if (in_array($message[$i],\
    \ array_keys($table))) {\n            $encoded .= $table[$message[$i]];\n    \
    \    } else {\n            $encoded .= $message[$i];\n        }\n    }\n    return\
    \ strtoupper($encoded);\n}\necho encode(\"test\");\necho \"\\n\";\necho encode(\"\
    This is a message\");\necho \"\\n\";\necho encode(\"this is a message\");\necho\
    \ \"\\n\";\necho encode(\"This is a MESSAGE\");\necho \"\\n\";\n", "    $vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    $result = '';\n    for ($i = 0; $i < strlen($message);\
    \ $i++) {\n        $curr_letter = $message[$i];\n        if (in_array($curr_letter,\
    \ $vowels)) {\n            $next_letter = $message[$i + 1];\n            $result\
    \ .= $next_letter;\n            $i++;\n        } else {\n            $result .=\
    \ $curr_letter;\n        }\n    }\n    return $result;\n}\n\n$original = 'This\
    \ is a message';\n$encoded = encode($original);\n$decoded = encode($encoded);\n\
    \nassert($original == $decoded);\n", "\t// your code here\n\t$message = strtolower($message);\n\
    \t$vowels = ['a','e','i','o','u'];\n\t$newMessage = \"\";\n\t$messageArray = str_split($message);\n\
    \tfor ($i=0; $i < count($messageArray); $i++) { \n\t\tif (in_array($messageArray[$i],\
    \ $vowels)) {\n\t\t\tif ($messageArray[$i] == 'u') {\n\t\t\t\t$newMessage .= 'a';\n\
    \t\t\t}\n\t\t\telse {\n\t\t\t\t$vowelIndex = array_search($messageArray[$i], $vowels);\n\
    \t\t\t\t$newMessage .= $vowels[$vowelIndex+2];\n\t\t\t}\n\t\t}\n\t\telse {\n\t\
    \t\t$newMessage .= $messageArray[$i];\n\t\t}\n\t}\n\treturn strtoupper($newMessage);\n\
    }\necho encode(\"This is a message\");", "\n}\n", "    // write your solution\
    \ here\n    $messageArr = str_split($message);\n    $result = \"\";\n    foreach\
    \ ($messageArr as $character) {\n        $result .= toEncode($character);\n  \
    \  }\n    return $result;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
