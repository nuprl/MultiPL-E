name: HumanEval_161_solve
language: php
prompt: "<?php\n// You are given a string s.\n// if s[i] is a letter, reverse its\
  \ case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If\
  \ the string contains no letters, reverse the string.\n// The function should return\
  \ the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>>\
  \ solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve($s)\
  \ {\n"
tests: "function candidate(...$args) {\n    return solve(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(\"AsDf\") !== \"aSdF\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"1234\") !== \"4321\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"ab\") !== \"AB\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"#a@C\") !== \"#A@c\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"#AsdfW^45\") !== \"#aSDFw^45\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"#6@2\") !== \"2@6#\")\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"#$a^D\") !== \"\
  #$A^d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"#ccc\"\
  ) !== \"#CCC\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $r = '';\n    $key = 0;\n    $result = array();\n    $l = strlen($s);\n\
    \    if ($l < 1) return $s;\n    for ($i = 0; $i < $l; $i++) {\n        if (ctype_alpha($s[$i]))\
    \ {\n            $key = 1;\n            $result[$i] = strtoupper($s[$i]) == $s[$i]\
    \ ? strtolower($s[$i]) : strtoupper($s[$i]);\n        } else {\n            $result[$i]\
    \ = $s[$i];\n        }\n    }\n    if ($key === 0) {\n        $result = array_reverse($result);\n\
    \    }\n    foreach ($result as $v) {\n        $r .= $v;\n    }\n    return $r;\n\
    }\n$s = readline(\"Enter a string: \");\nprint_r(solve($s));", "    if (!preg_match(\"\
    /[a-zA-Z]/\", $s)) {\n        return strrev($s);\n    }\n    $a = str_split($s);\n\
    \    $b = [];\n    foreach ($a as $v) {\n        if (ord($v) < 97) {\n       \
    \     $b[] = chr(ord($v) + 32);\n        } else {\n            $b[] = chr(ord($v)\
    \ - 32);\n        }\n    }\n    return implode(\"\", $b);\n}\n", "    $result\
    \ = \"\";\n    $letters = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    $vowels = [\"a\",\
    \ \"e\", \"i\", \"o\", \"u\"];\n    $consonants = [\"b\", \"c\", \"d\", \"f\"\
    , \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    $len = strlen($s);\n    for\
    \ ($i = 0; $i < $len; $i++) {\n        if (in_array($s[$i], $letters)) {\n   \
    \         if (in_array($s[$i], $vowels)) {\n                $result .= strtoupper($s[$i]);\n\
    \            } else {\n                $result .= strtolower($s[$i]);\n      \
    \      }\n        } else {\n            $result .= $s[$i];\n        }\n    }\n\
    \    return $result;\n}\necho solve(\"ab\") . PHP_EOL;", "    $res = '';\n   \
    \ $count = strlen($s);\n    for ($i = 0; $i < $count; $i++) {\n        if (preg_match('/[a-zA-Z]/',\
    \ $s[$i])) {\n            $res .= (ctype_upper($s[$i])) ? strtolower($s[$i]) :\
    \ strtoupper($s[$i]);\n        } else {\n            $res .= $s[$i];\n       \
    \ }\n    }\n    return (preg_match('/[a-zA-Z]/', $s)) ? $res : strrev($s);\n}\n",
  "    // if (!is_string($s)) return '';\n    // $strlen = strlen($s);\n    // $temp\
    \ = '';\n    // for ($i = 0; $i < $strlen; $i++) {\n    //     if (ctype_alpha($s[$i]))\
    \ {\n    //         $temp .= ($s[$i] === strtoupper($s[$i])) ? strtolower($s[$i])\
    \ : strtoupper($s[$i]);\n    //     } else {\n    //         $temp .= $s[$i];\n\
    \    //     }\n    // }\n    // return strrev($temp);\n    \n    if (!is_string($s))\
    \ return '';\n    $strlen = strlen($s);\n    $temp = '';\n    for ($i = 0; $i\
    \ < $strlen; $i++) {\n        if (ctype_alpha($s[$i])) {\n            $temp .=\
    \ ($s[$i] === strtoupper($s[$i])) ? strtolower($s[$i]) : strtoupper($s[$i]);\n\
    \        } else {\n            $temp .= $s[$i];\n        }\n    }\n    return\
    \ strrev($temp);\n}\n", "    $reversed = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        if (ctype_alpha($s[$i])) {\n            $reversed .= strtoupper($s[$i])\
    \ == $s[$i] ? strtolower($s[$i]) : strtoupper($s[$i]);\n        } else {\n   \
    \         $reversed .= $s[$i];\n        }\n    }\n    return $reversed;\n}\n$s\
    \ = \"ab\";\necho solve($s);", "    $str = strtolower($s);\n    if ($str == $s)\
    \ {\n        $str = strtoupper($s);\n    }\n    return $str;\n}", "    if (preg_match(\"\
    /[a-zA-Z]/\", $s)) {\n        return strtolower($s) ^ strtoupper($s) ^ $s;\n \
    \   }\n    return strrev($s);\n}\necho solve(\"123\");\necho \"<br>\";\necho solve(\"\
    ab\");\necho \"<br>\";\necho solve(\"#a@C\");", "\t$letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n\t$a = str_split($s);\n\t$result = \"\";\n\t$has_letters = false;\n\tforeach\
    \ ($a as $k => $v) {\n\t\tif (strpos($letters, $v) !== false) {\n\t\t\t$has_letters\
    \ = true;\n\t\t\tif (ctype_lower($v)) {\n\t\t\t\t$result .= strtoupper($v);\n\t\
    \t\t} else {\n\t\t\t\t$result .= strtolower($v);\n\t\t\t}\n\t\t} else {\n\t\t\t\
    $result .= $v;\n\t\t}\n\t}\n\tif ($has_letters == false) {\n\t\treturn strrev($s);\n\
    \t}\n\treturn $result;\n}\necho \"<pre>\";\necho solve(\"#a@C\") . \"\\n\";\n\
    echo solve(\"1234\") . \"\\n\";\necho solve(\"@ab\") . \"\\n\";\necho solve(\"\
    12#abc\") . \"\\n\";\necho solve(\"abc#12\") . \"\\n\";\necho solve(\"\") . \"\
    \\n\";\necho \"</pre>\";", "    if(preg_match('/[A-Za-z]/', $s)) {\n        return\
    \ strtolower($s) ^ strtoupper($s) ^ $s;\n    }\n    return strrev($s);\n}\n",
  "\t$len = strlen($s);\n\t$r = '';\n\t$rv = '';\n\tfor ($i = 0; $i < $len; $i++)\
    \ {\n\t\tif ($s[$i] == strtoupper($s[$i])) {\n\t\t\t$rv .= strtolower($s[$i]);\n\
    \t\t} else if ($s[$i] == strtolower($s[$i])) {\n\t\t\t$rv .= strtoupper($s[$i]);\n\
    \t\t} else {\n\t\t\t$rv .= $s[$i];\n\t\t}\n\t}\n\treturn $rv;\n}\necho solve('ab');\n\
    echo solve('#a@C');\necho solve('1234');\n", "    if (preg_match('/[a-zA-Z]/',\
    \ $s)) {\n        return strtolower($s) ^ strtoupper($s) ^ $s;\n    } else {\n\
    \        return strrev($s);\n    }\n}\n", "  $res = '';\n  for ($i = 0; $i < strlen($s);\
    \ $i++) {\n    if (ctype_alpha($s[$i])) {\n      $res .= ctype_upper($s[$i]) ?\
    \ strtolower($s[$i]) : strtoupper($s[$i]);\n    } else {\n      $res .= $s[$i];\n\
    \    }\n  }\n  return empty($res) ? strrev($s) : $res;\n}\n", "  $arr = str_split($s);\n\
    \  $string = '';\n  for ($i=0; $i < count($arr); $i++) { \n    if (ctype_alpha($arr[$i]))\
    \ {\n      $string .= ctype_upper($arr[$i]) ? strtolower($arr[$i]) : strtoupper($arr[$i]);\n\
    \    } else {\n      $string .= $arr[$i];\n    }\n  }\n  return $string;\n}\n\
    echo solve(\"aBc\");\necho solve(\"a\");\necho solve(\"#a@C\");", "    $chars\
    \ = str_split($s);\n    $i = 0;\n    while ($i < count($chars)) {\n        if\
    \ (preg_match('/[a-zA-Z]/', $chars[$i])) {\n            $chars[$i] = strtolower($chars[$i])\
    \ === $chars[$i] ? strtoupper($chars[$i]) : strtolower($chars[$i]);\n        }\n\
    \        $i++;\n    }\n    return implode($chars);\n}\n$s = \"ab\";\n$res = solve($s);\n\
    echo($res);", "    $result = '';\n    $is_letter = false;\n    for ($i = 0; $i\
    \ < strlen($s); $i++) {\n        if (preg_match('/[a-zA-Z]/', $s[$i])) {\n   \
    \         $is_letter = true;\n            if (ctype_lower($s[$i])) {\n       \
    \         $result .= strtoupper($s[$i]);\n            } else {\n             \
    \   $result .= strtolower($s[$i]);\n            }\n        } else {\n        \
    \    $result .= $s[$i];\n        }\n    }\n    if (!$is_letter) {\n        $result\
    \ = strrev($result);\n    }\n    return $result;\n}\n\nprint solve(\"1234\") .\
    \ \"\\n\";\nprint solve(\"ab\") . \"\\n\";\nprint solve(\"#a@C\") . \"\\n\";",
  "  $res = '';\n  $len = strlen($s);\n  for ($i = 0; $i < $len; $i++) {\n    if (ctype_alpha($s[$i]))\
    \ {\n      $res .= $s[$i] === strtoupper($s[$i]) ? strtolower($s[$i]) : strtoupper($s[$i]);\n\
    \    } else {\n      $res .= $s[$i];\n    }\n  }\n  return $res ? $res : strrev($s);\n\
    }", "    if (preg_match(\"/[a-zA-Z]/\", $s)) {\n        $result = '';\n      \
    \  for ($i = 0; $i < strlen($s); $i++) {\n            if (ord($s[$i]) >= 65 &&\
    \ ord($s[$i]) <= 90) {\n                $result .= chr(ord($s[$i]) + 32);\n  \
    \          } else if (ord($s[$i]) >= 97 && ord($s[$i]) <= 122) {\n           \
    \     $result .= chr(ord($s[$i]) - 32);\n            } else {\n              \
    \  $result .= $s[$i];\n            }\n        }\n        return $result;\n   \
    \ } else {\n        return strrev($s);\n    }\n}", "    $result = \"\";\n    if(!preg_match(\"\
    /^[A-Za-z]+$/\", $s)) {\n        return strrev($s);\n    }\n    else {\n     \
    \   for($i = 0; $i < strlen($s); $i++) {\n            if(ctype_upper($s[$i]))\
    \ {\n                $result .= strtolower($s[$i]);\n            }\n         \
    \   else {\n                $result .= strtoupper($s[$i]);\n            }\n  \
    \      }\n    }\n    return $result;\n}", "\tif (strlen($s) == 0) {\n\t\treturn\
    \ $s;\n\t}\n\n\t$s_arr = str_split($s);\n\t$s_arr_len = count($s_arr);\n\t$result\
    \ = '';\n\tfor ($i = 0; $i < $s_arr_len; $i++) {\n\t\tif (ctype_alpha($s_arr[$i]))\
    \ {\n\t\t\tif (ctype_upper($s_arr[$i])) {\n\t\t\t\t$result .= strtolower($s_arr[$i]);\n\
    \t\t\t} else if (ctype_lower($s_arr[$i])) {\n\t\t\t\t$result .= strtoupper($s_arr[$i]);\n\
    \t\t\t}\n\t\t} else {\n\t\t\t$result .= $s_arr[$i];\n\t\t}\n\t}\n\n\treturn $result;\n\
    }\n\nvar_dump(solve(\"ab\"));\nvar_dump(solve(\"1234\"));\nvar_dump(solve(\"#a@C\"\
    ));\nvar_dump(solve(\"\"));", "    $letters = preg_split('/[^a-zA-Z]/', $s, -1,\
    \ PREG_SPLIT_NO_EMPTY);\n    $s = str_split($s);\n    foreach ($s as $key => $value)\
    \ {\n        if (ctype_alpha($value)) {\n            $s[$key] = strtolower($value)\
    \ == $value ? strtoupper($value) : strtolower($value);\n        }\n    }\n   \
    \ return count($letters) > 0 ? implode('', $s) : strrev($s);\n}\n", "    if(is_string($s)){\n\
    \        if(ctype_alpha($s)){\n            return strtoupper($s);\n        }\n\
    \        if(ctype_digit($s)){\n            return strrev($s);\n        }\n   \
    \     if(ctype_space($s)){\n            return;\n        }\n        $characters\
    \ = str_split($s);\n        foreach($characters as $character){\n            if(ctype_alpha($character)){\n\
    \                if(ctype_upper($character)){\n                    $character\
    \ = strtolower($character);\n                }\n                else{\n      \
    \              $character = strtoupper($character);\n                }\n     \
    \       }\n            $output .= $character;\n        }\n        return $output;\n\
    \    }\n    else{\n        return $s;\n    }\n}\n", "    if(!$s) return \"\";\n\
    \    if(!preg_match(\"/[a-zA-Z]/\", $s)){\n        return strrev($s);\n    }\n\
    \    else{\n        $mapped_string = str_split($s);\n        foreach($mapped_string\
    \ as $char){\n            if(preg_match(\"/[a-zA-Z]/\", $char)){\n           \
    \     if(ctype_lower($char)){\n                    $char = strtoupper($char);\n\
    \                }\n                else if(ctype_upper($char)){\n           \
    \         $char = strtolower($char);\n                }\n            }\n     \
    \       $chars[] = $char;\n        }\n        return implode(\"\", $chars);\n\
    \    }\n}\n", "    $result = '';\n    $flag = 0;\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        if ($s[$i] >= 'a' && $s[$i] <= 'z') {\n            $result\
    \ .= strtoupper($s[$i]);\n            $flag = 1;\n        } else if ($s[$i] >=\
    \ 'A' && $s[$i] <= 'Z') {\n            $result .= strtolower($s[$i]);\n      \
    \      $flag = 1;\n        } else {\n            $result .= $s[$i];\n        }\n\
    \    }\n    if ($flag == 0) {\n        $result = strrev($result);\n    }\n   \
    \ return $result;\n}", "    $s = str_split($s);\n    for ($i = 0; $i < count($s);\
    \ $i++) {\n        if (ctype_alpha($s[$i])) {\n            $s[$i] = ctype_upper($s[$i])\
    \ ? strtolower($s[$i]) : strtoupper($s[$i]);\n        }\n    }\n    return implode('',\
    \ $s);\n}\n\necho solve(\"1234\") . \"\\n\";\necho solve(\"ab\") . \"\\n\";\n\
    echo solve(\"#a@C\") . \"\\n\";", "    $letters = preg_split('/[^a-zA-Z]/', $s,\
    \ -1, PREG_SPLIT_NO_EMPTY);\n    $result = '';\n    if(count($letters) == 0) return\
    \ strrev($s);\n    foreach($letters as $l) {\n        $result .= strtoupper($l)\
    \ == $l ? strtolower($l) : strtoupper($l);\n    }\n    return $result;\n}\n\n\
    print_r(solve(\"1234\")); //4321\necho PHP_EOL;\nprint_r(solve(\"ab\")); //AB\n\
    echo PHP_EOL;\nprint_r(solve(\"#a@C\")); //#A@c\necho PHP_EOL;\nprint_r(solve(\"\
    #A@c\")); //#a@c\necho PHP_EOL;\nprint_r(solve(\"#a@C#A@c\")); //#a@c#a@c\necho\
    \ PHP_EOL;\nprint_r(solve(\"!@#$\")); //!@#$\necho PHP_EOL;\nprint_r(solve(\"\"\
    )); //\necho PHP_EOL;\nprint_r(solve(\"ab!@#$%c\")); //AB!@#$%C\necho PHP_EOL;\n\
    print_r(solve(\"aB!@#$%C\")); //Ab!@#$%c\necho PHP_EOL;\nprint_r(solve(\"ab!@#$%cab!@#$%c\"\
    )); //AB!@#$%CAB!@#$%C\necho PHP_EOL;\nprint_r(solve(\"aB!@#$%CaB!@#$%C\")); //Ab!@#$%cab!@#$%c\n\
    echo PHP_EOL;\nprint_r(solve(\"10\")); //01\necho PHP_EOL;\nprint_r(solve(\"10!@#$%\"\
    )); //01!@#$%\necho PHP_EOL;\nprint_r(solve(\"!@#$%10\")); //!@#$%01\necho PHP_EOL;\n",
  "    $toReplace = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\", \"t\"\
    , \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    $replacing = [\"A\", \"B\",\
    \ \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\"\
    , \"N\", \"O\", \"P\", \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\"\
    , \"Y\", \"Z\"];\n    $toReplaceToUpper = [\"A\", \"B\", \"C\", \"D\", \"E\",\
    \ \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"N\", \"O\", \"P\"\
    , \"Q\", \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\"];\n   \
    \ $replacingToUpper = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"\
    , \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    $str_arr = str_split($s);\n\
    \    $match = array_intersect($str_arr, $toReplace);\n    $matchToUpper = array_intersect($str_arr,\
    \ $toReplaceToUpper);\n    if(count($match) > 0 || count($matchToUpper) > 0) {\n\
    \        $result = str_replace($toReplace, $replacing, $s);\n        $result =\
    \ str_replace($toReplaceToUpper, $replacingToUpper, $result);\n    } else {\n\
    \        $result = strrev($s);\n    }\n    return $result;\n}\n\n$s = \"1234\"\
    ;\necho solve($", "  $inputString = str_split($s);\n  $inputString = array_map('strtolower',\
    \ $inputString);\n  $outputString = \"\";\n  $letterCount = 0;\n  foreach ($inputString\
    \ as $char) {\n    if(isLetter($char)) {\n      $letterCount++;\n      $outputString\
    \ .= convertCase($char);\n    } else {\n      $outputString .= $char;\n    }\n\
    \  }\n  if ($letterCount === 0) {\n    $outputString = strrev($outputString);\n\
    \  }\n  return $outputString;\n}\n", "    $pos = strcspn($s, 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ');\n\
    \    if ($pos === strlen($s)) {\n        return strrev($s);\n    }\n    for ($i\
    \ = 0; $i < strlen($s); $i++) {\n        if (ctype_alpha($s[$i])) {\n        \
    \    $s[$i] = ctype_upper($s[$i]) ? strtolower($s[$i]) : strtoupper($s[$i]);\n\
    \        }\n    }\n    return $s;\n}\n", "    $arr=[];\n    $len=strlen($s);\n\
    \    $flag=false;\n    for($i=0;$i<$len;$i++){\n        if(ctype_alpha($s[$i])){\n\
    \            $flag=true;\n            $arr[]=strtolower($s[$i]);\n        }else{\n\
    \            $arr[]=$s[$i];\n        }\n    }\n    if($flag){\n        return\
    \ implode('',array_reverse($arr));\n    }else{\n        return strrev($s);\n \
    \   }\n}\n", "    $len = strlen($s);\n    $result = \"\";\n    $isText = false;\n\
    \    for ($i = 0; $i < $len; $i++) {\n        if (preg_match(\"/[a-zA-Z]/\", $s[$i]))\
    \ {\n            $isText = true;\n            if (ctype_lower($s[$i]))\n     \
    \           $result .= strtoupper($s[$i]);\n            else\n               \
    \ $result .= strtolower($s[$i]);\n        } else\n            $result .= $s[$i];\n\
    \    }\n    if ($isText)\n        return $result;\n    else\n        return strrev($s);\n\
    }", "    if (ctype_alnum($s)) {\n        return strrev($s);\n    }\n    $s = str_split($s);\n\
    \    $r = '';\n    foreach ($s as $char) {\n        if (ctype_alpha($char)) {\n\
    \            $r .= $char === strtoupper($char) ? strtolower($char) : strtoupper($char);\n\
    \        } else {\n            $r .= $char;\n        }\n    }\n    return $r;\n\
    }", "    $low = range('a', 'z');\n    $upper = range('A', 'Z');\n    $res = \"\
    \";\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (in_array($s[$i], $low))\
    \ {\n            $res .= strtoupper($s[$i]);\n        } else if (in_array($s[$i],\
    \ $upper)) {\n            $res .= strtolower($s[$i]);\n        } else {\n    \
    \        $res .= $s[$i];\n        }\n    }\n    return $res;\n}", "    if (strlen($s)\
    \ == 0) {\n        return $s;\n    }\n\n    $str = '';\n    $hasLetters = false;\n\
    \    for ($i = 0; $i < strlen($s); $i++) {\n        if (ctype_alpha($s[$i])) {\n\
    \            $hasLetters = true;\n            if (ctype_upper($s[$i])) {\n   \
    \             $str .= strtolower($s[$i]);\n            } else {\n            \
    \    $str .= strtoupper($s[$i]);\n            }\n        } else {\n          \
    \  $str .= $s[$i];\n        }\n    }\n\n    if ($hasLetters) {\n        return\
    \ $str;\n    } else {\n        return strrev($s);\n    }\n}\n\necho solve(\"1234\"\
    );", "    $returnString = \"\";\n    $letters = \"abcdefghijklmnopqrstuvwxyz\"\
    ;\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (strpos($letters, strtolower($s[$i]))\
    \ !== false) {\n            if (strtolower($s[$i]) == $s[$i]) {\n            \
    \    $returnString .= strtoupper($s[$i]);\n            } else {\n            \
    \    $returnString .= strtolower($s[$i]);\n            }\n        } else {\n \
    \           $returnString .= $s[$i];\n        }\n    }\n    if ($returnString\
    \ == $s) {\n        return strrev($returnString);\n    }\n    return $returnString;\n\
    }\n$tests = [\n    \"1234\",\n    \"ab\",\n    \"#a@C\",\n    \"abcD\",\n    \"\
    1234\",\n    \"123\",\n    \"abcd1234efgh\"\n];\nforeach ($tests as $test) {\n\
    \    echo solve($test) . \"\\n\";\n}", "  // Write your code here\n  if(preg_match(\"\
    /[a-zA-Z]/\", $s)){\n    $strArray = str_split($s);\n    foreach($strArray as\
    \ $v){\n      if(ctype_alpha($v)){\n        $v = strtolower($v) == $v ? strtoupper($v)\
    \ : strtolower($v);\n      }\n      $result[] = $v;\n    }\n    return implode(\"\
    \", $result);\n  }\n  return strrev($s);\n}\n\necho solve(\"aBc\");", "    if\
    \ (strlen($s) == 0) {\n        return $s;\n    }\n    $res = \"\";\n    for ($i\
    \ = 0; $i < strlen($s); $i++) {\n        if ($s[$i] == 'a' || $s[$i] == 'A' ||\
    \ $s[$i] == 'e' || $s[$i] == 'E' || $s[$i] == 'i' || $s[$i] == 'I' || $s[$i] ==\
    \ 'o' || $s[$i] == 'O' || $s[$i] == 'u' || $s[$i] == 'U') {\n            $res\
    \ .= strtoupper($s[$i]);\n        } else if (ctype_upper($s[$i])) {\n        \
    \    $res .= strtolower($s[$i]);\n        } else {\n            $res .= $s[$i];\n\
    \        }\n    }\n    return $res;\n}", "    //..\n    if(ctype_alpha($s)){\n\
    \        $lwr = strtolower($s);\n        $upr = strtoupper($s);\n        for($i\
    \ = 0; $i<strlen($s); $i++){\n            if($s[$i] == $lwr[$i]){\n          \
    \      $s[$i] = $upr[$i];\n            }else{\n                $s[$i] = $lwr[$i];\n\
    \            }\n        }\n    }else{\n        $s = strrev($s);\n    }\n    return\
    \ $s;\n}", "  $low = \"abcdefghijklmnopqrstuvwxyz\";\n  $upp = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n  $out = \"\";\n  $letters = 0;\n  for ($i = 0; $i < strlen($s); $i++) {\n\
    \    if (strpos($low, $s[$i]) !== false) {\n      $out .= strtoupper($s[$i]);\n\
    \      $letters++;\n    } else if (strpos($upp, $s[$i]) !== false) {\n      $out\
    \ .= strtolower($s[$i]);\n      $letters++;\n    } else {\n      $out .= $s[$i];\n\
    \    }\n  }\n  if ($letters === 0) {\n    return strrev($out);\n  }\n  return\
    \ $out;\n}", "    $newString = \"\";\n    for ($i = 0; $i < strlen($s); $i++)\
    \ {\n        if (ctype_alpha($s[$i])) {\n            if (ctype_upper($s[$i]))\
    \ {\n                $newString .= strtolower($s[$i]);\n            } else {\n\
    \                $newString .= strtoupper($s[$i]);\n            }\n        } else\
    \ {\n            $newString .= $s[$i];\n        }\n    }\n    if (ctype_alpha($newString))\
    \ {\n        return strrev($newString);\n    } else {\n        return $newString;\n\
    \    }\n}\n", "    // $arr = str_split($s);\n    // for ($i=0; $i < strlen($s);\
    \ $i++) { \n    //     if (preg_match('/[A-Za-z]/', $arr[$i])) {\n    //     \
    \    if (preg_match('/[A-Z]/', $arr[$i])) {\n    //             $arr[$i] = strtolower($arr[$i]);\n\
    \    //         } else {\n    //             $arr[$i] = strtoupper($arr[$i]);\n\
    \    //         }\n    //     }\n    // }\n    // return join($arr);\n    return\
    \ preg_replace_callback('/[a-z]/i', function ($m) {\n        return strtoupper($m[0])\
    \ ^ strtolower($m[0]) ^ $m[0];\n    }, $s);\n}\necho solve(\"#a@C\");", "    $reversed_string\
    \ = \"\";\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (ctype_alpha($s[$i]))\
    \ {\n            $reversed_string .= $s[$i] ^ ' ';\n        } else {\n       \
    \     $reversed_string .= $s[$i];\n        }\n    }\n    return strrev($reversed_string);\n\
    }\n\necho solve(\"## aa\");\n", "    if (preg_match('/[a-zA-Z]/', $s)) {\n   \
    \     return strtolower($s) ^ strtoupper($s) ^ $s;\n    }\n    return strrev($s);\n\
    }", "    $newString = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n       \
    \ if (!ctype_alpha($s[$i])) {\n            $newString .= $s[$i];\n        } else\
    \ {\n            $newString .= $s[$i] === strtoupper($s[$i]) ? strtolower($s[$i])\
    \ : strtoupper($s[$i]);\n        }\n    }\n    return $newString;\n}\necho solve(\"\
    1234\") . \"\\n\";\necho solve(\"ab\") . \"\\n\";\necho solve(\"#a@C\") . \"\\\
    n\";", "    if (!preg_match('/[a-zA-Z]/', $s))\n        return strrev($s);\n \
    \   $new = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (ctype_alpha($s[$i]))\n\
    \            $new .= strtoupper($s[$i]) == $s[$i] ? strtolower($s[$i]) : strtoupper($s[$i]);\n\
    \        else\n            $new .= $s[$i];\n    }\n    return $new;\n}", "  if\
    \ (preg_match('/[a-zA-Z]/', $s)) {\n    return strtolower($s) ^ strtoupper($s)\
    \ ^ $s;\n  }\n  return strrev($s);\n}\n\n$s = '1234';\nvar_dump(solve($s));\n\n\
    $s = 'ab';\nvar_dump(solve($s));\n\n$s = '#a@C';\nvar_dump(solve($s));", "\t$len\
    \ = strlen($s);\n\t$result = '';\n\tfor ($i = 0; $i < $len; $i++) {\n\t\tif (ctype_alpha($s[$i]))\
    \ {\n\t\t\t$result .= strtoupper($s[$i]) === $s[$i] ? strtolower($s[$i]) : strtoupper($s[$i]);\n\
    \t\t} else {\n\t\t\t$result .= $s[$i];\n\t\t}\n\t}\n\treturn $result;\n}\n$s =\
    \ '#a@C';\nprint_r(solve($s));", "    $count = 0;\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        if (ctype_alpha($s[$i])) {\n            $count++;\n       \
    \ }\n    }\n    if ($count != 0) {\n        $s = strtolower($s);\n        $s =\
    \ str_split($s);\n        $s = array_map(function($n) {\n            if (ctype_alpha($n))\
    \ {\n                $n = strtoupper($n);\n            }\n            return $n;\n\
    \        }, $s);\n        $s = implode($s);\n    } else {\n        $s = strrev($s);\n\
    \    }\n    return $s;\n}\n$s = \"1234\";\necho solve($s);", "    return preg_replace_callback(\"\
    /[a-zA-Z]/\", function($match) {\n        return strtolower($match[0]) === $match[0]\
    \ ? strtoupper($match[0]) : strtolower($match[0]);\n    }, $s);\n}\n", "    $s\
    \ = str_split($s);\n    $letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',\
    \ 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',\
    \ 'z'];\n    $s = array_map(function($x) use ($letters) {\n        if (in_array($x,\
    \ $letters)) {\n            return $x == strtoupper($x) ? strtolower($x) : strtoupper($x);\n\
    \        }\n        return $x;\n    }, $s);\n    return join('', $s);\n}\n", " \
    \   if (!preg_match(\"/[a-zA-Z]/\", $s)) {\n        return strrev($s);\n    }\n\
    \    $res = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (ctype_alpha($s[$i]))\
    \ {\n            $res .= strtoupper($s[$i]) == $s[$i] ? strtolower($s[$i]) : strtoupper($s[$i]);\n\
    \        } else {\n            $res .= $s[$i];\n        }\n    }\n    return $res;\n\
    }\n", "    $result = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        if\
    \ (is_numeric($s[$i])) {\n            $result = $s[$i] . $result;\n        } else\
    \ if ($s[$i] == strtoupper($s[$i])) {\n            $result = strtolower($s[$i])\
    \ . $result;\n        } else {\n            $result = strtoupper($s[$i]) . $result;\n\
    \        }\n    }\n    return $result;\n}\n$s = 'ab';\necho solve($s);", "\t$a\
    \ = '';\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\tif ($s[$i] >= 'a' && $s[$i]\
    \ <= 'z') {\n\t\t\t$a .= strtoupper($s[$i]);\n\t\t} else if ($s[$i] >= 'A' &&\
    \ $s[$i] <= 'Z') {\n\t\t\t$a .= strtolower($s[$i]);\n\t\t} else {\n\t\t\t$a .=\
    \ $s[$i];\n\t\t}\n\t}\n\treturn $a == '' ? strrev($s) : $a;\n}", "    $a = str_split($s);\n\
    \    $result = '';\n    foreach ($a as $c) {\n        if (preg_match('/[a-z]/i',\
    \ $c)) {\n            $result .= strtoupper($c) == $c ? strtolower($c) : strtoupper($c);\n\
    \        } else {\n            $result .= $c;\n        }\n    }\n    return strlen($result)\
    \ ? $result : strrev($s);\n}", "    return preg_replace_callback('/[a-z]/i', function($m)\
    \ {\n        return strtoupper($m[0]) == $m[0] ? strtolower($m[0]) : strtoupper($m[0]);\n\
    \    }, $s);\n}\n\nvar_dump(solve(\"1234\"));\nvar_dump(solve(\"ab\"));\nvar_dump(solve(\"\
    #a@C\"));", "    if(preg_match(\"/[a-zA-Z]/\", $s)) {\n        $new_str = '';\n\
    \        for($i = 0; $i < strlen($s); $i++) {\n            if(preg_match(\"/[a-z]/\"\
    , $s[$i])) {\n                $new_str .= strtoupper($s[$i]);\n            } elseif(preg_match(\"\
    /[A-Z]/\", $s[$i])) {\n                $new_str .= strtolower($s[$i]);\n     \
    \       } else {\n                $new_str .= $s[$i];\n            }\n       \
    \ }\n        return $new_str;\n    } else {\n        return strrev($s);\n    }\n\
    }", "    $size = strlen($s);\n    $str = '';\n    for ($i = 0; $i < $size; $i++)\
    \ {\n        if(is_numeric($s[$i])){\n            $str = $s[$i].$str;\n      \
    \  }else{\n            if(ctype_lower($s[$i])){\n                $str = strtoupper($s[$i]).$str;\n\
    \            }else{\n                $str = strtolower($s[$i]).$str;\n       \
    \     }\n        }\n    }\n    if($str){\n        return $str;\n    }else{\n \
    \       return strrev($s);\n    }\n}\n", "    if (preg_match('/[a-zA-Z]/', $s))\
    \ {\n        return strtolower($s) ^ strtoupper($s) ^ $s;\n    } else {\n    \
    \    return strrev($s);\n    }\n}\n", "    $hasLetter = preg_match(\"/[a-zA-Z]/\"\
    , $s);\n    if (!$hasLetter) {\n        return strrev($s);\n    }\n    $splitedArray\
    \ = str_split($s);\n    $length = count($splitedArray);\n    for ($i = 0; $i <\
    \ $length; $i++) {\n        if (ctype_alpha($splitedArray[$i])) {\n          \
    \  $splitedArray[$i] = ctype_upper($splitedArray[$i]) ? strtolower($splitedArray[$i])\
    \ : strtoupper($splitedArray[$i]);\n        }\n    }\n    return implode($splitedArray);\n\
    }\necho solve(\"1234\");\necho \"<br>\";\necho solve(\"ab\");\necho \"<br>\";\n\
    echo solve(\"#a@C\");", "    if(preg_match('/[a-zA-Z]/', $s)){\n        $s = strtolower($s);\n\
    \        $a = str_split($s);\n        $b = str_split($s);\n        foreach($a\
    \ as $key => $value){\n            if(ctype_upper($value)){\n                $b[$key]\
    \ = strtolower($value);\n            }\n            else{\n                $b[$key]\
    \ = strtoupper($value);\n            }\n        }\n        $s = implode($b);\n\
    \    }\n    else{\n        $s = strrev($s);\n    }\n    return $s;\n}\n", "  \
    \  if(preg_match('~[a-zA-Z]~', $s)) {\n        return strtolower($s) ^ strtoupper($s)\
    \ ^ $s;\n    }\n    return strrev($s);\n}", "    $output = \"\";\n    $length\
    \ = strlen($s);\n    $letter = false;\n    for ($i = 0; $i < $length; $i++) {\n\
    \        if (ctype_alpha($s[$i])) {\n            $letter = true;\n           \
    \ if (ctype_upper($s[$i])) {\n                $output .= strtolower($s[$i]);\n\
    \            } else {\n                $output .= strtoupper($s[$i]);\n      \
    \      }\n        } else {\n            $output .= $s[$i];\n        }\n    }\n\
    \    if ($letter == false) {\n        return strrev($s);\n    } else {\n     \
    \   return $output;\n    }\n}\necho solve(\"ab\");", "  $str = '';\n  $s = str_split($s);\n\
    \  $i = 0;\n  $len = count($s);\n  for ($i; $i < $len; $i++) {\n    if (preg_match('/^[a-zA-Z]+$/',\
    \ $s[$i])) {\n      $str .= strtoupper($s[$i]);\n    } else if (preg_match('/^[a-zA-Z]+$/',\
    \ strtolower($s[$i]))) {\n      $str .= strtolower($s[$i]);\n    } else {\n  \
    \    $str .= $s[$i];\n    }\n  }\n  return $str;\n}", "    if(strlen($s) == 0){\n\
    \        return '';\n    }\n    $string = '';\n    for($i = 0; $i < strlen($s);\
    \ $i++){\n        if(ctype_alpha($s[$i])){\n            if(ctype_upper($s[$i])){\n\
    \                $string .= strtolower($s[$i]);\n            } else {\n      \
    \          $string .= strtoupper($s[$i]);\n            }\n        } else {\n \
    \           $string .= $s[$i];\n        }\n    }\n    return $string;\n}\n", " \
    \   if (ctype_alpha($s)){\n        $s = strtoupper($s);\n    } elseif (ctype_upper($s)){\n\
    \        $s = strtolower($s);\n    } elseif (ctype_digit($s)){\n        $s = strrev($s);\n\
    \    }\n    return $s;\n}\nprint_r(solve(\"Hello World.\"));\nprint_r(solve(\"\
    #a@C\"));\nprint_r(solve(\"TEST\"));\nprint_r(solve(\"1234\"));", "    if(preg_match(\"\
    /[a-zA-Z]/\", $s)) {\n        $output = '';\n        for($i = 0; $i < strlen($s);\
    \ $i++) {\n            if(ctype_alpha($s[$i])) {\n                $output .= ctype_upper($s[$i])\
    \ ? strtolower($s[$i]) : strtoupper($s[$i]);\n            } else {\n         \
    \       $output .= $s[$i];\n            }\n        }\n        return $output;\n\
    \    } else {\n        return strrev($s);\n    }\n}\n", "    $str = str_split($s);\n\
    \    $length = count($str);\n    $i = 0;\n    while ($i < $length) {\n       \
    \ if ($str[$i] >= 'a' && $str[$i] <= 'z') {\n            $str[$i] = strtoupper($str[$i]);\n\
    \        } else if ($str[$i] >= 'A' && $str[$i] <= 'Z') {\n            $str[$i]\
    \ = strtolower($str[$i]);\n        }\n        $i++;\n    }\n    return $str;\n\
    }\nprint_r(solve(\"1234\"));", "    if(ctype_lower($s)) {\n        $s = strtoupper($s);\n\
    \    } else if(ctype_upper($s)) {\n        $s = strtolower($s);\n    } else {\n\
    \        return strrev($s);\n    }\n    return $s;\n}\n", "    $s = str_split($s);\n\
    \    $charMap = array_filter($s, function($c) {\n        return preg_match('/[a-zA-Z]/',\
    \ $c);\n    });\n    $caseMap = array_map(function($c) {\n        if (ctype_upper($c))\
    \ {\n            return strtolower($c);\n        } else {\n            return\
    \ strtoupper($c);\n        }\n    }, $charMap);\n    $letterMap = array_combine(array_keys($charMap),\
    \ $caseMap);\n    return implode('', array_map(function($i, $e) use ($letterMap)\
    \ {\n        if (array_key_exists($i, $letterMap)) {\n            return $letterMap[$i];\n\
    \        } else {\n            return $e;\n        }\n    }, array_keys($s), $s));\n\
    }\necho solve(\"#a@C\");", "  $str = $s;\n  $str = str_split($str);\n  $mapped\
    \ = array_map(function($char) {\n    if(ctype_alpha($char)) {\n      return strtoupper($char)\
    \ === $char ? strtolower($char) : strtoupper($char);\n    }\n    return $char;\n\
    \  }, $str);\n  return implode($mapped);\n}\n$input = array(\"1234\",\"ab\",\"\
    #a@C\");\nforeach ($input as $key => $value) {\n  echo solve($value);\n  echo\
    \ \"\\n\";\n}", "  if(ctype_alpha($s)){\n    return strtoupper($s);\n  }\n  else{\n\
    \    return strtolower($s);\n  }\n}", "    $found = false;\n    for ($i = 0; $i\
    \ < strlen($s); $i++) {\n        if (ctype_alpha($s[$i])) {\n            $found\
    \ = true;\n            $s[$i] = ctype_upper($s[$i]) ? strtolower($s[$i]) : strtoupper($s[$i]);\n\
    \        }\n    }\n    return $found ? $s : strrev($s);\n}", "  $letters = \"\"\
    ;\n  $output = \"\";\n  $reversed_letters = \"\";\n  for ($i = 0; $i < strlen($s);\
    \ $i++) {\n    if (preg_match(\"/[a-zA-Z]/\", $s[$i])) {\n      $letters .= $s[$i];\n\
    \    }\n  }\n  if ($letters == \"\") {\n    return strrev($s);\n  }\n  for ($i\
    \ = strlen($letters) - 1; $i >= 0; $i--) {\n    $reversed_letters .= $letters[$i];\n\
    \  }\n  for ($i = 0; $i < strlen($s); $i++) {\n    if (preg_match(\"/[a-zA-Z]/\"\
    , $s[$i])) {\n      $output .= $reversed_letters[0];\n      $reversed_letters\
    \ = substr($reversed_letters, 1);\n    } else {\n      $output .= $s[$i];\n  \
    \  }\n  }\n  return $output;\n}\necho solve(\"1234\") . \"\\n\";\necho solve(\"\
    ab\") . \"\\n\";\necho solve(\"#a@C\") . \"\\n\";\n", "    // $str = str_split($s);\n\
    \    // $str2 = str_split($s);\n    // if(strlen($s)==1 && ctype_alpha($s)) {\n\
    \    //     $s = strtoupper($s);\n    //     return $s;\n    // }\n    // for($i=0;$i<count($str);$i++)\
    \ {\n    //     if(ctype_alpha($str[$i])) {\n    //         $str2[$i] = strtoupper($str[$i]);\n\
    \    //     }\n    // }\n    // $res = array_diff($str,$str2);\n    // for($i=0;$i<count($res);$i++)\
    \ {\n    //     if(ctype_alpha($res[$i])) {\n    //         $res[$i] = strtolower($res[$i]);\n\
    \    //     }\n    // }\n    // return implode($res);\n    $str = str_split($s);\n\
    \    $str2 = str_split($s);\n    if(strlen($s)==1 && ctype_alpha($s)) {\n    \
    \    $s = strtoupper($s);\n        return $s;\n    }\n    for($i=0;$i<count($str);$i++)\
    \ {\n        if(ctype_alpha($str[$i])) {\n            $str2[$i] = strtoupper($str[$i]);\n\
    \        }\n    }\n    for($i=0;$i<count($str2);$i++) {\n        if(!in_array($str2[$i],$str))\
    \ {\n            $str2[$i] = strtolower($str2[$i]);\n        }\n    }\n    return\
    \ implode($str2);\n}\necho solve(\"1234\");\necho \"<br>\";\necho solve(\"ab\"\
    );\necho \"<br>\";\necho solve(\"#a@C\");\necho \"<br>\";\necho solve(\"a#@C\"\
    );\necho \"<br>\";\necho solve(\"#\");\necho \"<br>\";\necho solve(\"#z\");\n\
    echo", "    $newString = \"\";\n    $words = str_split($s);\n    $newString =\
    \ array_map(function($word) {\n        if ($word === strtoupper($word)) {\n  \
    \          return strtolower($word);\n        }\n        if ($word === strtolower($word))\
    \ {\n            return strtoupper($word);\n        }\n        return $word;\n\
    \    }, $words);\n    return implode($newString);\n}\necho solve(\"1234\") . PHP_EOL;\n\
    echo solve(\"ab\") . PHP_EOL;\necho solve(\"#a@C\") . PHP_EOL;", "  if (!preg_match('/[a-zA-Z]/',\
    \ $s)) {\n    return strrev($s);\n  }\n  $s = str_split($s);\n  $result = '';\n\
    \  foreach ($s as $letter) {\n    if (ctype_upper($letter)) {\n      $result .=\
    \ strtolower($letter);\n    } else if (ctype_lower($letter)) {\n      $result\
    \ .= strtoupper($letter);\n    } else {\n      $result .= $letter;\n    }\n  }\n\
    \  return $result;\n}", "    if (!preg_match('/[a-zA-Z]/', $s)) {\n        return\
    \ strrev($s);\n    }\n    $r = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n\
    \        if (ctype_alpha($s[$i])) {\n            $r .= $s[$i] == strtoupper($s[$i])\
    \ ? strtolower($s[$i]) : strtoupper($s[$i]);\n        } else {\n            $r\
    \ .= $s[$i];\n        }\n    }\n    return $r;\n}\n", "    $result = '';\n   \
    \ for ($i = 0; $i < strlen($s); $i++) {\n        if (ctype_alpha($s[$i])) {\n\
    \            $result .= ctype_upper($s[$i]) ? strtolower($s[$i]) : strtoupper($s[$i]);\n\
    \        } else {\n            $result .= $s[$i];\n        }\n    }\n    return\
    \ strrev($result);\n}\n\n$s = '#a@C';\nprint_r(solve($s));", "    $output = '';\n\
    \    for ($i = 0; $i < strlen($s); $i++) {\n        if (is_numeric($s[$i])) {\n\
    \            $output = $s[$i] . $output;\n        } else {\n            if (strtolower($s[$i])\
    \ == $s[$i]) {\n                $output = strtoupper($s[$i]) . $output;\n    \
    \        } else {\n                $output = strtolower($s[$i]) . $output;\n \
    \           }\n        }\n    }\n    return $output;\n}", "\t$s = str_split($s);\n\
    \t$p = [];\n\tforeach ($s as $v) {\n\t\tif (ctype_alpha($v)) {\n\t\t\tif (ctype_upper($v))\
    \ {\n\t\t\t\t$p[] = strtolower($v);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$p[] = strtoupper($v);\n\
    \t\t\t}\n\t\t}\n\t\telse {\n\t\t\t$p[] = $v;\n\t\t}\n\t}\n\treturn join($p);\n\
    }\n\n$tests = [\n\t[\"1234\", \"4321\"],\n\t[\"ab\", \"AB\"],\n\t[\"#a@C\", \"\
    #A@c\"],\n\t[\"#a@C\", \"#A@c\"],\n\t[\"abC deF\", \"ABC DEF\"],\n\t[\"\", \"\"\
    ],\n\t[\"a\", \"A\"],\n\t[\"A\", \"a\"],\n\t[\"#\", \"#\"],\n\t[\"1234\", \"4321\"\
    ],\n\t[\"ab\", \"AB\"],\n\t[\"A bCd EF\", \"a BCD ef\"],\n\t[\"Ab cd ef\", \"\
    aB CD EF\"],\n\t[\"aB cD eF\", \"Ab CD Ef\"],\n\t[\"aB cD Ef\", \"Ab Cd eF\"],\n\
    \t[\"aB cD eF\", \"Ab Cd EF\"],\n\t[\"aB cD eF\", \"Ab Cd EF\"],\n\t[\"#a@C\"\
    , \"#A@c\"],\n\t[\"1A\", \"1a\"],\n\t[\"Aa aA\", \"aA AA\"],\n\t[\"Aa aA\", \"\
    aA AA\"],\n\t[\"1A\", \"1a\"],\n\t[\"aBcDeF\", \"AbCdEf\"],\n\t[\"aBcDeF\", \"\
    AbCdEf\"],\n\t[\"AbCdEf\", \"aBcDeF\"],\n\t[\"abcdef\", \"ABCDEF\"],\n\t[\"abcdef\"\
    , \"ABCDEF\"],\n\t[\"ABCDEF\", \"abcdef\"],\n\t[\"aBcDef\", \"AbCdEf\"],\n\t[\"\
    aBcDef\", \"AbCdEf\"],\n\t", "    $letters = str_split($s);\n    $hasLetters =\
    \ false;\n    $result = \"\";\n    for ($i = 0; $i < count($letters); $i++) {\n\
    \        if (ctype_alpha($letters[$i])) {\n            $result .= ($letters[$i]\
    \ === strtoupper($letters[$i])) ? \n                strtolower($letters[$i]) :\
    \ strtoupper($letters[$i]);\n            $hasLetters = true;\n        } else {\n\
    \            $result .= $letters[$i];\n        }\n    }\n    return ($hasLetters)\
    \ ? $result : strrev($s);\n}\n", "    $len = strlen($s);\n    $sol = \"\";\n \
    \   $flag = 1;\n    for ($i=0; $i < $len; $i++) { \n        if(ord($s[$i])>=97\
    \ && ord($s[$i])<=122) {\n            $flag = 0;\n            $sol .= chr(ord($s[$i])-32);\n\
    \        }\n        else if(ord($s[$i])>=65 && ord($s[$i])<=90) {\n          \
    \  $flag = 0;\n            $sol .= chr(ord($s[$i])+32);\n        }\n        else\
    \ {\n            $sol .= $s[$i];\n        }\n    }\n    if($flag) {\n        $sol\
    \ = strrev($sol);\n    }\n    return $sol;\n}\necho solve(\"@A$sD\");", "    if\
    \ (strlen($s) === 0) return \"\";\n    $result = \"\";\n    for ($i = 0; $i <\
    \ strlen($s); $i++) {\n        if (ord($s[$i]) >= 65 && ord($s[$i]) <= 90) $result\
    \ .= chr(ord($s[$i]) + 32);\n        else if (ord($s[$i]) >= 97 && ord($s[$i])\
    \ <= 122) $result .= chr(ord($s[$i]) - 32);\n        else $result .= $s[$i];\n\
    \    }\n    return $result;\n}", "    $letters = preg_split('/[^a-zA-Z]/', $s,\
    \ -1, PREG_SPLIT_NO_EMPTY);\n    $reversed = array_reverse($letters);\n    $reversed\
    \ = array_map(function($v) {\n        return strtolower($v) == $v ? strtoupper($v)\
    \ : strtolower($v);\n    }, $reversed);\n    $result = preg_replace_callback('/[a-zA-Z]/',\
    \ function($matches) use (&$reversed) {\n        return array_shift($reversed);\n\
    \    }, $s);\n    return strlen($result) == 0 ? strrev($s) : $result;\n}\n$s =\
    \ 'tHIS iS a SIMPLE tEST';\necho solve($s);", "    if (strlen($s) > 1) {\n   \
    \     for ($i = 0; $i < strlen($s); $i++) {\n            if (ctype_alpha($s[$i]))\
    \ {\n                if (ctype_upper($s[$i])) {\n                    $s[$i] =\
    \ strtolower($s[$i]);\n                } else {\n                    $s[$i] =\
    \ strtoupper($s[$i]);\n                }\n            }\n        }\n    } elseif\
    \ (ctype_alpha($s)) {\n        if (ctype_upper($s)) {\n            $s = strtolower($s);\n\
    \        } else {\n            $s = strtoupper($s);\n        }\n    }\n    $s\
    \ = strrev($s);\n    return $s;\n}\n$inputs = [\n    \"1234\",\n    \"ab\",\n\
    \    \"#a@C\",\n    \"\",\n    \"a\",\n    \"1\",\n    \"#@C\",\n    \"4\",\n\
    \    \"abc\",\n    \"abcd\",\n    \"A1B2C3\"\n];\nforeach ($inputs as $input)\
    \ {\n    echo solve($input) . \"\\n\";\n}", "    $r = '';\n    for ($i = 0; $i\
    \ < strlen($s); $i++) {\n        if (ctype_alpha($s[$i])) {\n            $r .=\
    \ ctype_upper($s[$i]) ? strtolower($s[$i]) : strtoupper($s[$i]);\n        } else\
    \ {\n            $r .= $s[$i];\n        }\n    }\n    return strrev($r);\n}\n\
    echo solve(\"#a@C\");", "    $arr = str_split($s);\n    $str = '';\n    foreach\
    \ ($arr as $key => $value) {\n        if (ctype_alpha($value)) {\n           \
    \ $str .= strtoupper($value) == $value ? strtolower($value) : strtoupper($value);\n\
    \        } else {\n            $str .= $value;\n        }\n    }\n    return $str;\n\
    }\nvar_dump(solve(\"1234\"));\nvar_dump(solve(\"ab\"));\nvar_dump(solve(\"#a@C\"\
    ));", "    $s = str_split($s);\n    foreach ($s as $key => $value) {\n       \
    \ if (preg_match('/[a-z]/', $value)) {\n            $s[$key] = strtoupper($value);\n\
    \        } elseif (preg_match('/[A-Z]/', $value)) {\n            $s[$key] = strtolower($value);\n\
    \        }\n    }\n    $s = implode('', $s);\n    if (preg_match('/[a-zA-Z]/',\
    \ $s)) {\n        return $s;\n    } else {\n        return strrev($s);\n    }\n\
    }\n\necho solve(\"1234\");", "\tif(ctype_alpha($s)){\n\t\t$newString = '';\n\t\
    \tfor($i = 0; $i < strlen($s); $i++){\n\t\t\tif($s[$i] === strtoupper($s[$i])){\n\
    \t\t\t\t$newString .= strtolower($s[$i]);\n\t\t\t} else {\n\t\t\t\t$newString\
    \ .= strtoupper($s[$i]);\n\t\t\t}\n\t\t}\n\t\treturn $newString;\n\t}\n\treturn\
    \ strrev($s);\n}\n\necho solve(\"1234\");\necho \"\\n\";\necho solve(\"ab\");\n\
    echo \"\\n\";\necho solve(\"#a@C\");", "    $arr = str_split($s);\n    $res =\
    \ [];\n    foreach ($arr as $letter) {\n        if (ctype_alpha($letter)) {\n\
    \            $res[] = strtoupper($letter) == $letter ? strtolower($letter) : strtoupper($letter);\n\
    \        } else {\n            $res[] = $letter;\n        }\n    }\n    return\
    \ empty($res) ? $s : implode($res);\n}", "    $hasLetter = false;\n    $res =\
    \ '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (ctype_alpha($s[$i]))\
    \ {\n            $hasLetter = true;\n            $res .= $s[$i] == strtoupper($s[$i])\
    \ ? strtolower($s[$i]) : strtoupper($s[$i]);\n        } else {\n            $res\
    \ .= $s[$i];\n        }\n    }\n    return $hasLetter ? $res : strrev($s);\n}\n\
    echo solve(\"ab\");", "    if(!preg_match(\"/[a-zA-Z]/\", $s)) {\n        return\
    \ strrev($s);\n    } else {\n        $a = \"\";\n        for($i = 0; $i < strlen($s);\
    \ $i++) {\n            if(preg_match(\"/[a-z]/\", $s[$i])) {\n               \
    \ $a .= strtoupper($s[$i]);\n            } else if(preg_match(\"/[A-Z]/\", $s[$i]))\
    \ {\n                $a .= strtolower($s[$i]);\n            } else {\n       \
    \         $a .= $s[$i];\n            }\n        }\n        return $a;\n    }\n\
    }\necho solve(\"1234\");\necho \"<br>\";\necho solve(\"ab\");\necho \"<br>\";\n\
    echo solve(\"#a@C\");\necho \"<br>\";", "  if(ctype_alpha($s)){\n    return strtoupper($s);\n\
    \  }\n  if(ctype_digit($s)){\n    return strrev($s);\n  }\n  if(!ctype_alnum($s)){\n\
    \    return strtolower($s);\n  }\n}\necho solve(\"1234\");\necho solve(\"ab\"\
    );\necho solve(\"#a@C\");\n ?>", "    $r = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        if (ctype_alpha($s[$i])) {\n            $r .= ctype_upper($s[$i])\
    \ ? strtolower($s[$i]) : strtoupper($s[$i]);\n        } else {\n            $r\
    \ .= $s[$i];\n        }\n    }\n    return strrev($r);\n}\necho solve(\"ab\")\
    \ . PHP_EOL;\necho solve(\"1234\") . PHP_EOL;\necho solve(\"#a@C\") . PHP_EOL;",
  "  if(!preg_match(\"/[a-zA-Z]/\", $s)) return strrev($s);\n  $result = '';\n  for($i\
    \ = 0; $i < strlen($s); $i++) {\n    if(preg_match(\"/[a-zA-Z]/\", $s[$i])) {\n\
    \      $result .= strtoupper($s[$i]) === $s[$i] ? strtolower($s[$i]) : strtoupper($s[$i]);\n\
    \    } else {\n      $result .= $s[$i];\n    }\n  }\n  return $result;\n}\necho\
    \ solve(\"ab\") . \"\\n\";", "    $num = preg_match_all('/[a-zA-Z]/', $s);\n \
    \   if ($num === 0) {\n        return strrev($s);\n    } else {\n        $len\
    \ = strlen($s);\n        $arr = str_split($s);\n        for ($i = 0; $i < $len;\
    \ $i++) {\n            if (preg_match('/[a-zA-Z]/', $arr[$i])) {\n           \
    \     if (preg_match('/[a-z]/', $arr[$i])) {\n                    $arr[$i] = strtoupper($arr[$i]);\n\
    \                } else {\n                    $arr[$i] = strtolower($arr[$i]);\n\
    \                }\n            }\n        }\n        return implode('', $arr);\n\
    \    }\n}", "\t$reversed = \"\";\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\t\
    if (ctype_alpha($s[$i])) {\n\t\t\tif (ctype_upper($s[$i])) {\n\t\t\t\t$reversed\
    \ .= strtolower($s[$i]);\n\t\t\t} else {\n\t\t\t\t$reversed .= strtoupper($s[$i]);\n\
    \t\t\t}\n\t\t} else {\n\t\t\t$reversed .= $s[$i];\n\t\t}\n\t}\n\treturn strrev($reversed);\n\
    }\necho solve(\"1234\");\necho \"<br>\";\necho solve(\"ab\");\necho \"<br>\";\n\
    echo solve(\"#a@C\");", "    $newString = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        if (is_numeric($s[$i])) {\n            $newString = $s[$i]\
    \ . $newString;\n        } else if (ctype_lower($s[$i])) {\n            $newString\
    \ = strtoupper($s[$i]) . $newString;\n        } else if (ctype_upper($s[$i]))\
    \ {\n            $newString = strtolower($s[$i]) . $newString;\n        } else\
    \ {\n            $newString = $s[$i] . $newString;\n        }\n    }\n    return\
    \ $newString;\n}\n", "    if (preg_match('/[a-zA-Z]/', $s)) {\n        return\
    \ strtolower($s) ^ strtoupper($s) ^ $s;\n    }\n    return strrev($s);\n}", " \
    \   if(preg_match(\"/[a-zA-Z]/\", $s)){\n        $s = strtolower($s);\n      \
    \  $s = strrev($s);\n        return $s;\n    }\n    else{\n        return strrev($s);\n\
    \    }\n}\necho solve(\"12345\");", "    $str = str_split($s);\n    $str2 = '';\n\
    \    for ($i = count($str) - 1; $i >= 0; $i--) {\n        if (preg_match('/[a-zA-Z]/',\
    \ $str[$i])) {\n            $str2 .= strtoupper($str[$i]);\n        } else {\n\
    \            $str2 .= $str[$i];\n        }\n    }\n    return $str2;\n}\necho\
    \ solve(\"#a@C\");", "    return ctype_alpha($s) ? strtoupper($s) : strtolower($s);\n\
    }\n", "    if(ctype_alpha($s)){\n        return strtoupper($s);\n    }\n    else{\n\
    \        $s = str_split($s);\n        for($i = 0; $i < count($s); $i++){\n   \
    \         if(ctype_alpha($s[$i])){\n                if(ctype_upper($s[$i])){\n\
    \                    $s[$i] = strtolower($s[$i]);\n                }\n       \
    \         else{\n                    $s[$i] = strtoupper($s[$i]);\n          \
    \      }\n            }\n        }\n        return implode(\"\", $s);\n    }\n\
    }", "  if (strlen($s) === strlen(str_replace('a-zA-Z', '', $s))) {\n    return\
    \ strrev($s);\n  }\n  $arr = str_split($s);\n  foreach ($arr as $k => $v) {\n\
    \    if (ctype_alpha($v)) {\n      $arr[$k] = ctype_upper($v) ? strtolower($v)\
    \ : strtoupper($v);\n    }\n  }\n  return implode($arr);\n}\necho solve(\"1234\"\
    ) . PHP_EOL;\necho solve(\"ab\") . PHP_EOL;\necho solve(\"#a@C\") . PHP_EOL;",
  "    if (preg_match('/[a-zA-Z]/', $s)) {\n        return strtolower($s) ^ strtoupper($s)\
    \ ^ $s;\n    }\n    return strrev($s);\n}\necho solve(\"ab\");\necho \"\\n\";\n\
    echo solve(\"aB\");\necho \"\\n\";\necho solve(\"aBcDeF\");\necho \"\\n\";\necho\
    \ solve(\"1234567890\");\necho \"\\n\";\necho solve(\"!@#$%^&*()\");\necho \"\\\
    n\";\necho solve(\"456\");\necho \"\\n\";\necho solve(\"ABC\");\necho \"\\n\";",
  "    $result = [];\n    $has_letter = false;\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        if (ctype_alpha($s[$i])) {\n            $has_letter = true;\n\
    \            if (ctype_upper($s[$i]))\n                $result[] = strtolower($s[$i]);\n\
    \            else\n                $result[] = strtoupper($s[$i]);\n        }\
    \ else {\n            $result[] = $s[$i];\n        }\n    }\n    if (!$has_letter)\n\
    \        $result = array_reverse($result);\n    return implode($result);\n}\n\
    echo solve(\"1234\") . \"\\n\";\necho solve(\"ab\") . \"\\n\";\necho solve(\"\
    #a@C\") . \"\\n\";", "    if (ctype_alpha($s)) {\n        return strtoupper($s);\n\
    \    }\n    if (ctype_digit($s)) {\n        return strrev($s);\n    }\n    if\
    \ (!ctype_alpha($s) && !ctype_digit($s)) {\n        return strtolower($s);\n \
    \   }\n}", "    // check if string contains letter\n    $has_letter = preg_match(\"\
    /[a-zA-Z]/\", $s);\n    // if it does, reverse its case\n    if ($has_letter)\
    \ {\n        $s = strtolower($s);\n        return strtoupper($s);\n    }\n   \
    \ // if it doesn't, reverse string\n    return strrev($s);\n}", "    if (empty($s))\
    \ {\n        return $s;\n    }\n\n    $result = [];\n    $letters = range('a',\
    \ 'z');\n    $lettersUppercase = range('A', 'Z');\n\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        if (in_array($s[$i], $letters) || in_array($s[$i], $lettersUppercase))\
    \ {\n            $result[] = strtoupper($s[$i]) == $s[$i] ? strtolower($s[$i])\
    \ : strtoupper($s[$i]);\n        } else {\n            $result[] = $s[$i];\n \
    \       }\n    }\n\n    return implode('', $result);\n}\n", "    if(!ctype_alpha($s))\
    \ return strrev($s);\n    $res = '';\n    for($i = 0; $i < strlen($s); $i++) {\n\
    \        if(ctype_alpha($s[$i])) {\n            $res .= ctype_upper($s[$i]) ?\
    \ strtolower($s[$i]) : strtoupper($s[$i]);\n        } else {\n            $res\
    \ .= $s[$i];\n        }\n    }\n    return $res;\n}", "  $letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\
    \  $convert = [];\n  for ($i = 0; $i < strlen($letters); $i++) {\n    $convert[$letters[$i]]\
    \ = strrev($letters)[$i];\n  }\n  $result = '';\n  for ($i = 0; $i < strlen($s);\
    \ $i++) {\n    if (isset($convert[$s[$i]])) {\n      $result .= $convert[$s[$i]];\n\
    \    } else {\n      $result .= $s[$i];\n    }\n  }\n  return $result;\n}\n",
  "    if (preg_match('/[a-zA-Z]/', $s)) {\n        return strrev(strtolower($s));\n\
    \    }\n    return strrev($s);\n}", "    if (!preg_match('/[a-zA-Z]/', $s)) {\n\
    \        return strrev($s);\n    }\n    for ($i = 0; $i < strlen($s); $i++) {\n\
    \        if (preg_match('/[a-zA-Z]/', $s[$i])) {\n            $s[$i] = strtolower($s[$i])\
    \ == $s[$i] ? strtoupper($s[$i]) : strtolower($s[$i]);\n        }\n    }\n   \
    \ return $s;\n}\necho solve(\"ab\");", "  $letters = preg_replace('/[^a-zA-Z]/',\
    \ '', $s);\n  if (empty($letters)) {\n    return strrev($s);\n  }\n  $rest = preg_replace('/[a-zA-Z]/',\
    \ '', $s);\n  return str_replace($letters, strtolower($letters) ^ strtoupper($letters)\
    \ ^ $letters, $s) . $rest;\n}\n", "  $s = str_split($s);\n  $result = [];\n  foreach\
    \ ($s as $ch) {\n    if (ctype_alpha($ch)) {\n      $result[] = ($ch == strtoupper($ch))\
    \ ? strtolower($ch) : strtoupper($ch);\n    } else {\n      $result[] = $ch;\n\
    \    }\n  }\n  return (count($result) == count($s)) ? implode($result) : strrev(implode($result));\n\
    }\n", "    if (preg_match(\"/[a-zA-Z]/\", $s)) {\n        return strtolower($s)\
    \ ^ strtoupper($s) ^ $s;\n    } else {\n        return strrev($s);\n    }\n}",
  "    if(!preg_match(\"/[a-zA-Z]/\", $s)) {\n        return strrev($s);\n    }\n\
    \    $new_str = '';\n    for($i = 0; $i < strlen($s); $i++) {\n        if(ctype_alpha($s[$i]))\
    \ {\n            if(ctype_upper($s[$i])) {\n                $new_str .= strtolower($s[$i]);\n\
    \            }\n            else {\n                $new_str .= strtoupper($s[$i]);\n\
    \            }\n        }\n        else {\n            $new_str .= $s[$i];\n \
    \       }\n    }\n    return $new_str;\n}\n", "    $newString = '';\n    $stringLength\
    \ = strlen($s);\n    $flag = false;\n    for ($i = 0; $i < $stringLength; $i++)\
    \ {\n        if (ord($s[$i]) >= 65 && ord($s[$i]) <= 90) {\n            $flag\
    \ = true;\n            $newString .= chr(ord($s[$i]) + 32);\n        } else if\
    \ (ord($s[$i]) >= 97 && ord($s[$i]) <= 122) {\n            $flag = true;\n   \
    \         $newString .= chr(ord($s[$i]) - 32);\n        } else {\n           \
    \ $newString .= $s[$i];\n        }\n    }\n    if ($flag) {\n        return $newString;\n\
    \    } else {\n        return strrev($s);\n    }\n}\n\necho solve(\"1234\") .\
    \ PHP_EOL;\necho solve(\"ab\") . PHP_EOL;\necho solve(\"#a@C\") . PHP_EOL;", " \
    \   $rs = \"\";\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (ctype_alpha($s[$i]))\
    \ {\n            $rs .= (ctype_upper($s[$i])) ? strtolower($s[$i]) : strtoupper($s[$i]);\n\
    \        } else {\n            $rs .= $s[$i];\n        }\n    }\n    if (strlen($rs)\
    \ == 0) {\n        return strrev($s);\n    }\n    return $rs;\n}\n", "    if (!preg_match(\"\
    /[a-zA-Z]/\", $s)) {\n        return strrev($s);\n    }\n    $len = strlen($s);\n\
    \    $arr = [];\n    for ($i = 0; $i < $len; $i++) {\n        if (preg_match(\"\
    /[a-zA-Z]/\", $s[$i])) {\n            if (preg_match(\"/[a-z]/\", $s[$i])) {\n\
    \                $arr[] = strtoupper($s[$i]);\n            } else {\n        \
    \        $arr[] = strtolower($s[$i]);\n            }\n        } else {\n     \
    \       $arr[] = $s[$i];\n        }\n    }\n    return implode(\"\", $arr);\n\
    }\necho solve(\"1234\") . \"\\n\";\necho solve(\"ab\") . \"\\n\";\necho solve(\"\
    #a@C\") . \"\\n\";", "    $s = str_split($s);\n    $result = \"\";\n    $letters\
    \ = \"abcdefghijklmnopqrstuvwxyz\";\n    $letters = str_split($letters);\n   \
    \ $has_letter = false;\n    foreach ($s as $char) {\n        if (in_array($char,\
    \ $letters)) {\n            $has_letter = true;\n            if (ctype_lower($char))\
    \ {\n                $result .= strtoupper($char);\n            } else {\n   \
    \             $result .= strtolower($char);\n            }\n        } else {\n\
    \            $result .= $char;\n        }\n    }\n    if ($has_letter) {\n   \
    \     return $result;\n    } else {\n        return strrev($result);\n    }\n\
    }\n$s = \"ab\";\necho solve($s);", "    $letters = range('a', 'z');\n    $letters\
    \ = array_merge($letters, range('A', 'Z'));\n    $s = str_split($s);\n    $output\
    \ = \"\";\n    foreach ($s as $item) {\n        if(in_array($item, $letters)){\n\
    \            $output .= strtoupper($item) === $item ? strtolower($item) : strtoupper($item);\n\
    \        } else {\n            $output .= $item;\n        }\n    }\n    return\
    \ $output;\n}", "    $result = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n\
    \        if (ctype_alpha($s[$i])) {\n            $result .= $s[$i] == strtoupper($s[$i])\
    \ ? strtolower($s[$i]) : strtoupper($s[$i]);\n        } else {\n            $result\
    \ .= $s[$i];\n        }\n    }\n    return strrev($result);\n}\necho solve(\"\
    0abC#\");", "    if (preg_match(\"#[a-zA-Z]#\", $s)) {\n        $s = str_split($s);\n\
    \        $solved = [];\n        foreach ($s as $char) {\n            if (ctype_alpha($char))\
    \ {\n                $solved[] = strtoupper($char) == $char ? strtolower($char)\
    \ : strtoupper($char);\n            } else {\n                $solved[] = $char;\n\
    \            }\n        }\n        return implode(\"\", $solved);\n    } else\
    \ {\n        return strrev($s);\n    }\n}\n\necho solve(\"#a@C\");", "    if(ctype_alpha($s)){\n\
    \        $res = '';\n        for($i = 0; $i < strlen($s); $i++){\n           \
    \ if(ctype_lower($s[$i])){\n                $res .= strtoupper($s[$i]);\n    \
    \        } else {\n                $res .= strtolower($s[$i]);\n            }\n\
    \        }\n        return $res;\n    }\n    return strrev($s);\n}\n", "    $length\
    \ = strlen($s);\n    $newString = \"\";\n    $letters = 0;\n    for ($i = 0; $i\
    \ < $length; $i++) {\n        if (ctype_alpha($s[$i])) {\n            $letters++;\n\
    \            if (ctype_upper($s[$i])) {\n                $newString .= strtolower($s[$i]);\n\
    \            } else if (ctype_lower($s[$i])) {\n                $newString .=\
    \ strtoupper($s[$i]);\n            }\n        } else {\n            $newString\
    \ .= $s[$i];\n        }\n    }\n    if ($letters === 0) {\n        return strrev($newString);\n\
    \    }\n    return $newString;\n}\n\n$s = \"1234\";\n$result = solve($s);\necho\
    \ \"<pre>solve('$s')\\r\\nReturned: $result</pre>\";\n\n$s = \"ab\";\n$result\
    \ = solve($s);\necho \"<pre>solve('$s')\\r\\nReturned: $result</pre>\";\n\n$s\
    \ = \"#a@C\";\n$result = solve($s);\necho \"<pre>solve('$s')\\r\\nReturned: $result</pre>\"\
    ;", "    $res = \"\";\n    $c = str_split($s);\n    $flag = false;\n    foreach\
    \ ($c as $l) {\n        if(ctype_alpha($l)){\n            $flag = true;\n    \
    \        if(ctype_upper($l))\n                $res .= strtolower($l);\n      \
    \      else\n                $res .= strtoupper($l);\n        }else\n        \
    \    $res .= $l;\n    }\n    if($flag)\n        return $res;\n    else{\n    \
    \    return strrev($s);\n    }\n}\n\necho solve(\"1234\").\"\\n\";\necho solve(\"\
    ab\").\"\\n\";\necho solve(\"#a@C\").\"\\n\";", "    return preg_replace_callback('/[a-z]/i',\
    \ function($m) {\n        return strtoupper($m[0]) ^ strtolower($m[0]) ^ $m[0];\n\
    \    }, $s);\n}\n$solve = solve('#a@C');\necho $solve;", "  $letters = '';\n \
    \ for ($i = 0; $i < strlen($s); $i++) {\n    if (preg_match('/[a-zA-Z]/', $s[$i]))\
    \ {\n      $letters .= $s[$i];\n    }\n  }\n  if (strlen($letters) === 0) {\n\
    \    return strrev($s);\n  }\n  $result = '';\n  for ($i = 0; $i < strlen($s);\
    \ $i++) {\n    if (preg_match('/[a-zA-Z]/', $s[$i])) {\n      $result .= strtolower($letters[strlen($letters)\
    \ - 1]);\n      $letters = substr($letters, 0, strlen($letters) - 1);\n    } else\
    \ {\n      $result .= $s[$i];\n    }\n  }\n  return $result;\n}\necho solve(\"\
    1234\");\necho \"\\n\";\necho solve(\"ab\");\necho \"\\n\";\necho solve(\"#a@C\"\
    );\necho \"\\n\";", "    $letters_count = 0;\n    $result = \"\";\n    for ($i\
    \ = 0; $i < strlen($s); $i++) {\n        if (ctype_alpha($s[$i])) {\n        \
    \    $letters_count++;\n            if (ctype_upper($s[$i])) {\n             \
    \   $result .= strtolower($s[$i]);\n            } else {\n                $result\
    \ .= strtoupper($s[$i]);\n            }\n        } else {\n            $result\
    \ .= $s[$i];\n        }\n    }\n    if ($letters_count == 0) {\n        return\
    \ strrev($result);\n    }\n    return $result;\n}\n", "    $strlen = strlen($s);\n\
    \    $letters = str_split(\"qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM\"\
    );\n    $letters = array_flip($letters);\n    for ($i = 0; $i < $strlen; $i++)\
    \ {\n        if (array_key_exists($s[$i], $letters)) {\n            if (ctype_upper($s[$i]))\
    \ {\n                $s[$i] = strtolower($s[$i]);\n            } else {\n    \
    \            $s[$i] = strtoupper($s[$i]);\n            }\n        }\n    }\n \
    \   return $s;\n}\necho solve(\"1234\") . \"\\n\";\necho solve(\"ab\") . \"\\\
    n\";\necho solve(\"#a@C\") . \"\\n\";\n", "    $s = str_split($s);\n    $is_letter\
    \ = false;\n    foreach ($s as $key => $value) {\n        if(ctype_alpha($value))\
    \ {\n            $is_letter = true;\n            $s[$key] = strtolower($value)\
    \ == $value ? strtoupper($value) : strtolower($value);\n        }\n    }\n   \
    \ if(!$is_letter) {\n        $s = array_reverse($s);\n    }\n    return implode('',\
    \ $s);\n}", "    $s = str_split($s);\n    for ($i = 0; $i < count($s); $i++) {\n\
    \        if (ord($s[$i]) > 64 && ord($s[$i]) < 91) {\n            $s[$i] = chr(ord($s[$i])\
    \ + 32);\n        } else if (ord($s[$i]) > 96 && ord($s[$i]) < 123) {\n      \
    \      $s[$i] = chr(ord($s[$i]) - 32);\n        }\n    }\n    $r = '';\n    foreach\
    \ ($s as $letter) {\n        $r .= $letter;\n    }\n    return $r;\n}", "    if\
    \ (strlen($s) < 2) {\n        return $s;\n    }\n    $s = str_split($s);\n   \
    \ for ($i = 0; $i < strlen($s); $i++) {\n        if (preg_match('/[a-zA-Z]/',\
    \ $s[$i])) {\n            $s[$i] = ctype_lower($s[$i]) ? strtoupper($s[$i]) :\
    \ strtolower($s[$i]);\n        }\n    }\n    return implode($s);\n}\n", "    if\
    \ (!preg_match('/[a-zA-Z]/', $s)) {\n        return strrev($s);\n    }\n    $arr\
    \ = str_split($s);\n    foreach ($arr as $k => $v) {\n        if (preg_match('/[a-zA-Z]/',\
    \ $v)) {\n            $arr[$k] = $v === strtoupper($v) ? strtolower($v) : strtoupper($v);\n\
    \        }\n    }\n    return implode('', $arr);\n}", "  $a = str_split($s);\n\
    \  $r = '';\n  foreach ($a as $char) {\n    if (ctype_alpha($char)) {\n      $r\
    \ .= ($char == strtoupper($char)) ? strtolower($char) : strtoupper($char);\n \
    \   } else {\n      $r .= $char;\n    }\n  }\n  return empty($r) ? strrev($s)\
    \ : $r;\n}\n\n$inputs = [\n  '1234',\n  'ab',\n  '#a@C',\n  '123',\n  '12ab',\n\
    \  'AbCdEfGhIjK',\n  '1234abcdEFG',\n  '',\n  '@#',\n  '@#$%^&*()_',\n  '@#$%^&*()_aBcDe',\n\
    \  '@#$%^&*()_ABCDE',\n  '@#$%^&*()_abcde',\n  'ABCDE',\n  'abcde',\n  'AbcDe',\n\
    \  'AbCdE',\n  'AbcDeF',\n  'abCdEf',\n  'aBcDeF',\n  'abCdEfG',\n  'AbCdEfGh',\n\
    \  'AbCdEfGhI',\n  'AbCdEfGhIj',\n  'AbCdEfGhIjK',\n  'aBcDeFgHiJk',\n  'abCdEfGhIjK',\n\
    \  'aBcDeFgHiJkL',\n  'aBcDeFgHiJkLm',\n  'aBcDeFgHiJkLmN',\n  'aBcDeFgHiJkLmNo',\n\
    \  'aBcDeFgHiJkLmNoP',\n  'aBcDeFgHiJkLmNoPq',\n  'aBcDeFgHiJkLmNoPqR',\n  'aBcDeFgHiJkLmNoPqRs',\n\
    \  'aBc", "    $letters = array_filter(str_split($s), function($char) {\n    \
    \    return ctype_alpha($char);\n    });\n    $numbers = array_filter(str_split($s),\
    \ function($char) {\n        return is_numeric($char);\n    });\n    return ($letters)\
    \ ? strtoupper(implode('', $letters)) . strtolower(implode('', $letters)) : strrev(implode('',\
    \ $numbers));\n}\necho solve(\"#a@C\");", "    if (strlen($s) == 0) {\n      \
    \  return \"\";\n    }\n    $result = \"\";\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        if (ord($s[$i]) >= 65 && ord($s[$i]) <= 90) {\n           \
    \ $result .= chr(ord($s[$i]) + 32);\n        } else if (ord($s[$i]) >= 97 && ord($s[$i])\
    \ <= 122) {\n            $result .= chr(ord($s[$i]) - 32);\n        } else {\n\
    \            $result .= $s[$i];\n        }\n    }\n    return $result;\n}\n",
  "    if(ctype_alpha($s)) {\n        return strtoupper($s);\n    } elseif(ctype_lower($s))\
    \ {\n        return strtoupper($s);\n    } elseif(ctype_upper($s)) {\n       \
    \ return strtolower($s);\n    } else {\n        return $s;\n    }\n}", "    $string\
    \ = '';\n    if (!preg_match('/[a-zA-Z]/', $s)) {\n        $string = strrev($s);\n\
    \    } else {\n        for ($i = 0; $i < strlen($s); $i++) {\n            if (ctype_alpha($s[$i]))\
    \ {\n                $string .= strtoupper($s[$i]) == $s[$i] ? strtolower($s[$i])\
    \ : strtoupper($s[$i]);\n            } else {\n                $string .= $s[$i];\n\
    \            }\n        }\n    }\n    return $string;\n}", "\t$res = '';\n\t$noLetters\
    \ = true;\n\tfor ($i = 0; $i < strlen($s); $i++) {\n\t\tif (ctype_alpha($s[$i]))\
    \ {\n\t\t\t$noLetters = false;\n\t\t\t$res .= $s[$i] == strtoupper($s[$i]) ? strtolower($s[$i])\
    \ : strtoupper($s[$i]);\n\t\t} else {\n\t\t\t$res .= $s[$i];\n\t\t}\n\t}\n\treturn\
    \ $noLetters ? strrev($s) : $res;\n}\n\n$s = readline('s: ');\necho solve($s);",
  "    if (preg_match(\"/[a-zA-Z]/\", $s)){\n        $s = strtolower($s);\n      \
    \  $s = str_split($s);\n        $length = count($s);\n        for ($i = 0; $i\
    \ < $length; $i++){\n            if (ord($s[$i]) >= 97 && ord($s[$i]) <= 122){\n\
    \                $s[$i] = chr(ord($s[$i]) - 32);\n            }\n        }\n \
    \       $s = implode(\"\", $s);\n    }\n    else{\n        $s = str_split($s);\n\
    \        $length = count($s);\n        for ($i = 0; $i < $length/2; $i++){\n \
    \           $temp = $s[$i];\n            $s[$i] = $s[$length - $i - 1];\n    \
    \        $s[$length - $i - 1] = $temp;\n        }\n        $s = implode(\"\",\
    \ $s);\n    }\n    return $s;\n}", "    $reversed = '';\n    for ($i = 0; $i <\
    \ strlen($s); $i++) {\n        if ($s[$i] === strtoupper($s[$i])) {\n        \
    \    $reversed .= strtolower($s[$i]);\n        } else if ($s[$i] === strtolower($s[$i]))\
    \ {\n            $reversed .= strtoupper($s[$i]);\n        } else {\n        \
    \    $reversed .= $s[$i];\n        }\n    }\n    return $reversed;\n}", "    $str\
    \ = str_split($s);\n    $low = \"abcdefghijklmnopqrstuvwxyz\";\n    $up = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n    for ($i=0; $i < count($str); $i++) { \n        if (strpos($low, $str[$i])\
    \ !== false) {\n            $str[$i] = strtoupper($str[$i]);\n        } elseif\
    \ (strpos($up, $str[$i]) !== false) {\n            $str[$i] = strtolower($str[$i]);\n\
    \        }\n    }\n    $rev = implode($str);\n    if ($rev == $s) {\n        $rev\
    \ = implode(array_reverse($str));\n    }\n    return $rev;\n}", "  $regex = '/[a-zA-Z]/';\n\
    \  $result = '';\n  for ($i = 0; $i < strlen($s); $i++) {\n    if (preg_match($regex,\
    \ $s[$i])) {\n      $result .= strtoupper($s[$i]) === $s[$i] ? strtolower($s[$i])\
    \ : strtoupper($s[$i]);\n    } else {\n      $result .= $s[$i];\n    }\n  }\n\
    \  return $result;\n}\n", "  $converted = '';\n  $letters = 'abcdefghijklmnopqrstuvwxyz';\n\
    \  $is_there_letter = false;\n  for ($i = 0; $i < strlen($s); $i++) {\n    if\
    \ (preg_match('/[a-z]/i', $s[$i])) {\n      $is_there_letter = true;\n      $converted\
    \ .= str_replace($letters, strtoupper($letters), $s[$i]);\n    } else {\n    \
    \  $converted .= $s[$i];\n    }\n  }\n  if ($is_there_letter) {\n    return $converted;\n\
    \  } else {\n    return strrev($s);\n  }\n}", "    $result = '';\n    $letters\
    \ = str_split('abcdefghijklmnopqrstuvwxyz');\n    $letters2 = str_split('ABCDEFGHIJKLMNOPQRSTUVWXYZ');\n\
    \    for ($i = 0; $i < strlen($s); $i++) {\n        if (in_array($s[$i], $letters))\
    \ {\n            $result .= strtoupper($s[$i]);\n        } elseif (in_array($s[$i],\
    \ $letters2)) {\n            $result .= strtolower($s[$i]);\n        } else {\n\
    \            $result .= $s[$i];\n        }\n    }\n    if (strcmp($result, $s)\
    \ == 0) {\n        $result = strrev($result);\n    }\n    return $result;\n}\n\
    \necho solve(\"1234\");\necho \"\\n\";\necho solve(\"ab\");\necho \"\\n\";\necho\
    \ solve(\"#a@C\");\necho \"\\n\";", "    $hasLetter = preg_match('/[a-zA-Z]/',\
    \ $s);\n    if ($hasLetter == 0) {\n        return strrev($s);\n    } else {\n\
    \        $arr = str_split($s);\n        foreach ($arr as $key => $value) {\n \
    \           if (ctype_alpha($value)) {\n                $arr[$key] = strtolower($value)\
    \ == $value ? strtoupper($value) : strtolower($value);\n            }\n      \
    \  }\n        return implode('', $arr);\n    }\n}\n", "\t$s = str_split($s);\n\
    \t$b = false;\n\tfor ($i=0; $i < count($s); $i++) { \n\t\tif (ctype_alpha($s[$i]))\
    \ {\n\t\t\t$b = true;\n\t\t\t$s[$i] = ctype_upper($s[$i]) ? strtolower($s[$i])\
    \ : strtoupper($s[$i]);\n\t\t}\n\t}\n\tif (!$b) {\n\t\t$s = array_reverse($s);\n\
    \t}\n\treturn implode($s);\n}", "    $chars = str_split($s);\n    $string = '';\n\
    \    for ($i = 0; $i < count($chars); $i++) {\n        if (preg_match('/[a-z]/i',\
    \ $chars[$i])) {\n            $string .= ctype_lower($chars[$i]) ? strtoupper($chars[$i])\
    \ : strtolower($chars[$i]);\n        } else {\n            $string .= $chars[$i];\n\
    \        }\n    }\n    return $string;\n}\n", "    $letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';\n\
    \    $str = '';\n    $len = strlen($s);\n    for ($i = 0; $i < $len; $i++) {\n\
    \        if (strpos($letters, $s[$i]) !== false) {\n            $str .= strtoupper($s[$i])\
    \ === $s[$i] ? strtolower($s[$i]) : strtoupper($s[$i]);\n        } else {\n  \
    \          $str .= $s[$i];\n        }\n    }\n    return $str === '' ? strrev($s)\
    \ : $str;\n}\n\necho solve(\"#a@C\"), PHP_EOL;", "    $new_string = \"\";\n  \
    \  if(ctype_alpha($s)){\n        for($i = 0; $i < strlen($s); $i++){\n       \
    \     if(ctype_upper($s[$i])){\n                $new_string .= strtolower($s[$i]);\n\
    \            }else{\n                $new_string .= strtoupper($s[$i]);\n    \
    \        }\n        }\n    }else{\n        for($i = strlen($s) - 1; $i >= 0; $i--){\n\
    \            $new_string .= $s[$i];\n        }\n    }\n    return $new_string;\n\
    }", "    if (preg_match(\"/[a-zA-Z]/\", $s)){\n        return strtolower($s) ^\
    \ strtoupper($s) ^ $s;\n    }\n    return strrev($s);\n}\necho solve(\"1234\"\
    ).\"\\n\";\necho solve(\"ab\").\"\\n\";\necho solve(\"#a@C\").\"\\n\";", "   \
    \ $count = strlen($s);\n    if (ctype_alpha($s)) {\n        return strtoupper($s);\n\
    \    } else {\n        $newstring = \"\";\n        for ($i = 0; $i < $count; $i++)\
    \ {\n            if (ctype_alpha($s[$i])) {\n                if (ctype_upper($s[$i]))\
    \ {\n                    $newstring .= strtolower($s[$i]);\n                }\
    \ elseif (ctype_lower($s[$i])) {\n                    $newstring .= strtoupper($s[$i]);\n\
    \                }\n            } else {\n                $newstring .= $s[$i];\n\
    \            }\n        }\n        return $newstring;\n    }\n}\n\necho solve(\"\
    1234\") . \"\\n\";\necho solve(\"ab\") . \"\\n\";\necho solve(\"#a@C\") . \"\\\
    n\";", "    $new_str = \"\";\n    if (!ctype_alpha($s)){\n        $new_str = array_reverse(str_split($s));\n\
    \        return implode(\"\", $new_str);\n    }\n    for ($i=0; $i < strlen($s);\
    \ $i++) { \n        if (ctype_alpha($s[$i])){\n            if (ctype_upper($s[$i]))\
    \ {\n                $new_str .= strtolower($s[$i]);\n            }\n        \
    \    else {\n                $new_str .= strtoupper($s[$i]);\n            }\n\
    \        }\n        else {\n            $new_str .= $s[$i];\n        }\n    }\n\
    \    return $new_str;\n}", "    $str = str_split($s);\n    $count = 0;\n    for\
    \ ($i=0; $i < count($str); $i++) { \n        if (ctype_alpha($str[$i])) {\n  \
    \          $count++;\n        }\n    }\n    if ($count == 0) {\n        $reversed\
    \ = array_reverse($str);\n        $result = implode($reversed);\n        return\
    \ $result;\n    }\n    for ($i=0; $i < count($str); $i++) { \n        if (ctype_alpha($str[$i]))\
    \ {\n            if (ctype_upper($str[$i])) {\n                $str[$i] = strtolower($str[$i]);\n\
    \            } else {\n                $str[$i] = strtoupper($str[$i]);\n    \
    \        }\n        }\n    }\n    $result = implode($str);\n    return $result;\n\
    }", "  $result = \"\";\n  for ($i = 0; $i < strlen($s); $i++) {\n    if (is_numeric($s[$i]))\
    \ {\n      $result = $s[$i] . $result;\n    } else {\n      if (strtoupper($s[$i])\
    \ == $s[$i]) {\n        $result .= strtolower($s[$i]);\n      } else {\n     \
    \   $result .= strtoupper($s[$i]);\n      }\n    }\n  }\n  return $result;\n}\n",
  "  if(ctype_alpha($s)){\n    return strtoupper($s);\n  }\n  else if(ctype_digit($s)){\n\
    \    return strrev($s);\n  }\n  else{\n    $res = '';\n    $arr = str_split($s);\n\
    \    foreach($arr as $char){\n      if(ctype_upper($char)){\n        $res .= strtolower($char);\n\
    \      }\n      else if(ctype_lower($char)){\n        $res .= strtoupper($char);\n\
    \      }\n      else{\n        $res .= $char;\n      }\n    }\n    return $res;\n\
    \  }\n}\necho solve(\"#a@C\").\"\\n\";\necho solve(\"ab\").\"\\n\";\necho solve(\"\
    1234\").\"\\n\";\necho solve(\"5432\").\"\\n\";", "    $s = str_split($s);\n \
    \   $alpha = str_split('abcdefghijklmnopqrstuvwxyz');\n    foreach ($s as $key\
    \ => $value) {\n        if (in_array($value, $alpha)) {\n            $value =\
    \ ctype_upper($value) ? strtolower($value) : strtoupper($value);\n           \
    \ $s[$key] = $value;\n        }\n    }\n    return implode($s);\n}\n", "    $s\
    \ = str_split($s);\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $consonants\
    \ = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z'];\n    $alphas = $vowels + $consonants;\n    $newStr\
    \ = \"\";\n    foreach ($s as $i => $char) {\n        if (in_array($char, $alphas))\
    \ {\n            if (in_array($char, $vowels)) {\n                $newStr .= strtoupper($char);\n\
    \            } else if (in_array($char, $consonants)) {\n                $newStr\
    \ .= strtolower($char);\n            }\n        } else {\n            $newStr\
    \ .= $char;\n        }\n    }\n    return $newStr;\n}", "    if(strlen($s) ==\
    \ 0) {\n        return \"\";\n    }\n    $res = \"\";\n    for($i = 0; $i < strlen($s);\
    \ $i++) {\n        if(ctype_alpha($s[$i])) {\n            if(ctype_upper($s[$i]))\
    \ {\n                $res .= strtolower($s[$i]);\n            } else {\n     \
    \           $res .= strtoupper($s[$i]);\n            }\n        } else {\n   \
    \         $res .= $s[$i];\n        }\n    }\n    return $res;\n}\n", "    $res\
    \ = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (ctype_alpha($s[$i]))\
    \ {\n            $res .= strtoupper($s[$i]) === $s[$i] ? strtolower($s[$i]) :\
    \ strtoupper($s[$i]);\n        } else {\n            $res .= $s[$i];\n       \
    \ }\n    }\n    return $res;\n}", "    $noLetter = true;\n    $len = strlen($s);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        if (ctype_alpha($s[$i])) {\n   \
    \         $noLetter = false;\n            $s[$i] = ctype_upper($s[$i]) ? strtolower($s[$i])\
    \ : strtoupper($s[$i]);\n        }\n    }\n    return $noLetter ? strrev($s) :\
    \ $s;\n}\n\n$cases = [\n    [\"1234\", \"4321\"],\n    [\"ab\", \"AB\"],\n   \
    \ [\"#a@C\", \"#A@c\"],\n    [\"\", \"\"],\n    [\"Dhruv\", \"dhRUV\"],\n    [\"\
    ABC\", \"abc\"],\n    [\"aBC\", \"Abc\"],\n    [\"abC\", \"aBc\"],\n    [\"abCd\"\
    , \"aBcD\"],\n    [\"123\", \"321\"],\n    [\"321\", \"123\"],\n    [\"aBbCcDdEeFf\"\
    , \"AbBcCdDeEfF\"],\n    [\"aBbCcDdEeFf\", \"AbBcCdDeEfF\"],\n    [\"\u0430\u0411\
    \u0431\u0412\u0432\u0413\u0433\u0414\u0434\u0415\u0435\u0401\u0451\u0416\u0436\
    \u0417\u0437\u0418\u0438\u0419\u0439\u041A\u043A\u041B\u043B\u041C\u043C\u041D\
    \u043D\u041E\u043E\u041F\u043F\u0420\u0440\u0421\u0441\u0422\u0442\u0423\u0443\
    \u0424\u0444\u0425\u0445\u0426\u0446\u0427\u0447\u0428\u0448\u0429\u0449\u042A\
    \u044A\u042B\u044B\u042C\u044C\u042D\u044D\u042E\u044E\u042F\u044F\", \"\u0410\
    \u0431\u0411\u0432\u0412\u0433\u0413\u0434\u0414\u0435\u0415\u0451\u0401\u0436\
    \u0416\u0437\u0417\u0438\u0418\u0439\u0419\u043A\u041A\u043B\u041B\u043C\u041C\
    \u043D\u041D\u043E\u041E\u043F\u041F\u0440\u0420\u0441\u0421\u0442\u0422\u0443\
    \u0423\u0444\u0424\u0445\u0425\u0446\u0426\u0447\u0427\u0448\u0428\u0449\u0429\
    \u044A\u042A\u044B\u042B\u044C\u042C\u044D", "    if(!preg_match(\"/[a-zA-Z]/\"\
    , $s)) {\n        return strrev($s);\n    }\n    $a = str_split($s);\n    $b =\
    \ [];\n    foreach($a as $v) {\n        if(preg_match(\"/[a-zA-Z]/\", $v)) {\n\
    \            if(strtolower($v) == $v) {\n                $b[] = strtoupper($v);\n\
    \            } else {\n                $b[] = strtolower($v);\n            }\n\
    \        } else {\n            $b[] = $v;\n        }\n    }\n    return implode(\"\
    \", $b);\n}\n\n$s = \"ab\";\nprint_r(solve($s));", "    return preg_replace_callback('/[a-z]/i',\
    \ function($matches) {\n        return strtolower($matches[0]) ^ strtoupper($matches[0]);\n\
    \    }, $s);\n}\nprint_r(solve(\"#a@C\"));", "  $final = \"\";\n  for ($i = 0;\
    \ $i < strlen($s); $i++) {\n    if (ctype_alpha($s[$i])) {\n      if (ctype_upper($s[$i]))\
    \ {\n        $final .= strtolower($s[$i]);\n      } else {\n        $final .=\
    \ strtoupper($s[$i]);\n      }\n    } else {\n      $final .= $s[$i];\n    }\n\
    \  }\n  return strrev($final);\n}\necho solve(\"ab\").\"\\n\";\necho solve(\"\
    #a@C\").\"\\n\";", "    if (strlen($s) <= 1) return $s;\n    $letters = str_split(strtolower($s));\n\
    \    $length = count($letters);\n    $r = $length - 1;\n    $l = 0;\n    while\
    \ ($l < $r) {\n        while ($l < $length && !ctype_alpha($letters[$l])) $l++;\n\
    \        while ($r >= 0 && !ctype_alpha($letters[$r])) $r--;\n        if ($l <\
    \ $r) {\n            $letters[$l] = ctype_upper($letters[$l]) ? strtolower($letters[$l])\
    \ : strtoupper($letters[$l]);\n            $letters[$r] = ctype_upper($letters[$r])\
    \ ? strtolower($letters[$r]) : strtoupper($letters[$r]);\n            $l++;\n\
    \            $r--;\n        }\n    }\n    return implode('', $letters);\n}\n",
  "  $ans = \"\";\n  $chars = str_split($s);\n  foreach ($chars as $char) {\n    if\
    \ (ctype_alpha($char)) {\n      $ans .= strtoupper($char) == $char ? strtolower($char)\
    \ : strtoupper($char);\n    } else {\n      $ans .= $char;\n    }\n  }\n  return\
    \ strrev($ans);\n}\n", "    if (preg_match(\"/[a-zA-Z]/\", $s)) {\n        $l\
    \ = strlen($s);\n        $a = '';\n        for ($i = 0; $i < $l; $i++) {\n   \
    \         if (preg_match(\"/[a-z]/\", $s[$i])) {\n                $a .= strtoupper($s[$i]);\n\
    \            } else if (preg_match(\"/[A-Z]/\", $s[$i])) {\n                $a\
    \ .= strtolower($s[$i]);\n            } else {\n                $a .= $s[$i];\n\
    \            }\n        }\n        return $a;\n    } else {\n        return strrev($s);\n\
    \    }\n}\n\n$s = \"ab\";\necho solve($s) . PHP_EOL;", "    $strs = str_split($s);\n\
    \    foreach ($strs as $str) {\n        if (preg_match('/[a-z]/', $str)) {\n \
    \           $res[] = strtoupper($str);\n        } elseif (preg_match('/[A-Z]/',\
    \ $str)) {\n            $res[] = strtolower($str);\n        } else {\n       \
    \     $res[] = $str;\n        }\n    }\n    return strrev(implode('', $res));\n\
    }", "    $s = str_split($s);\n    $a = [];\n    foreach ($s as $key => $value)\
    \ {\n        if (ctype_alpha($value)) {\n            $a[] = $value;\n        }\n\
    \    }\n    $a = array_reverse($a);\n    $result = '';\n    foreach ($s as $key\
    \ => $value) {\n        if (ctype_alpha($value)) {\n            $result .= strtolower($a[0]);\n\
    \            array_shift($a);\n        } else {\n            $result .= $value;\n\
    \        }\n    }\n    return $result;\n}", "    $char_array = preg_split('//u',\
    \ $s, -1, PREG_SPLIT_NO_EMPTY);\n    if (strlen($s) > 0) {\n        $s = '';\n\
    \        foreach ($char_array as $char) {\n            if ($char == strtoupper($char))\
    \ {\n                $s .= strtolower($char);\n            } else if ($char ==\
    \ strtolower($char)) {\n                $s .= strtoupper($char);\n           \
    \ } else {\n                $s .= $char;\n            }\n        }\n    } else\
    \ {\n        $s = strrev($s);\n    }\n    return $s;\n}\n", "    $s = array_reverse(str_split($s));\n\
    \    $n = count($s);\n    for ($i = 0; $i < $n; $i++) {\n        if (ctype_alpha($s[$i]))\
    \ {\n            $s[$i] = strtolower($s[$i]) ? strtoupper($s[$i]) : strtolower($s[$i]);\n\
    \        }\n    }\n    return join($s);\n}\n", "    $str = str_split($s);\n  \
    \  $res = '';\n    foreach ($str as $char) {\n        if (preg_match('/[a-zA-Z]/',\
    \ $char)) {\n            $res .= strtoupper($char) == $char ? strtolower($char)\
    \ : strtoupper($char);\n        } else {\n            $res .= $char;\n       \
    \ }\n    }\n    return strlen($res) == 0 ? strrev($s) : $res;\n}", "    return\
    \ implode('', array_map(function($c) {\n        return ctype_alpha($c) ? ($c ===\
    \ strtoupper($c) ? strtolower($c) : strtoupper($c)) : $c;\n    }, str_split(strrev($s))));\n\
    }", "    $nums = '0123456789';\n    $low = 'abcdefghijklmnopqrstuvwxyz';\n   \
    \ $up = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n    $new_s = '';\n    for ($i = 0; $i <\
    \ strlen($s); $i++) {\n        if (strpos($nums, $s[$i]) !== false) {\n      \
    \      $new_s = $s[$i] . $new_s;\n        } else if (strpos($low, $s[$i]) !==\
    \ false) {\n            $new_s = strtoupper($s[$i]) . $new_s;\n        } else\
    \ if (strpos($up, $s[$i]) !== false) {\n            $new_s = strtolower($s[$i])\
    \ . $new_s;\n        }\n    }\n    return $new_s;\n}\necho solve(\"1234\");\n\
    echo solve(\"ab\");\necho solve(\"#a@C\");", "  if (preg_match('/[a-zA-Z]/', $s))\
    \ {\n    for ($i = 0; $i < strlen($s); $i++) {\n      if ($s[$i] == strtoupper($s[$i]))\
    \ {\n        $result .= strtolower($s[$i]);\n      } else {\n        $result .=\
    \ strtoupper($s[$i]);\n      }\n    }\n  } else {\n    $result = strrev($s);\n\
    \  }\n  return $result;\n}", "    $result = '';\n    if(empty(trim($s, '1234567890')))\
    \ {\n        $result = strrev($s);\n    } else {\n        for($i = 0; $i < strlen($s);\
    \ $i++) {\n            if(ctype_alpha($s[$i])) {\n                $result .= strtoupper($s[$i])\
    \ == $s[$i] ? strtolower($s[$i]) : strtoupper($s[$i]);\n            } else {\n\
    \                $result .= $s[$i];\n            }\n        }\n    }\n    return\
    \ $result;\n}\nprint_r(solve(\"1234\"));\nprint_r(solve(\"ab\"));\nprint_r(solve(\"\
    #a@C\"));", "    $letters = array_filter(str_split($s), function($c) { return\
    \ ctype_alpha($c); });\n    if (empty($letters)) {\n        return strrev($s);\n\
    \    }\n    return join(array_map(function($c) {\n        return ctype_upper($c)\
    \ ? strtolower($c) : strtoupper($c);\n    }, $letters));\n}\n\ndo {\n    fwrite(STDOUT,\
    \ 'Enter string: ');\n    $line = trim(fgets(STDIN));\n    if ($line == 'quit')\
    \ {\n        break;\n    }\n    echo 'Result: ' . solve($line) . PHP_EOL;\n} while\
    \ (true);", "    if (!preg_match('/[a-zA-Z]/', $s))\n        return strrev($s);\n\
    \    $res = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        if ($s[$i]\
    \ == strtoupper($s[$i]))\n            $res .= strtolower($s[$i]);\n        else\
    \ if ($s[$i] == strtolower($s[$i]))\n            $res .= strtoupper($s[$i]);\n\
    \        else\n            $res .= $s[$i];\n    }\n    return $res;\n}\n\necho\
    \ solve(\"1234\").PHP_EOL;\necho solve(\"ab\").PHP_EOL;\necho solve(\"#a@C\").PHP_EOL;",
  "    $letters = preg_split('/[^a-zA-Z]/', $s, -1, PREG_SPLIT_NO_EMPTY);\n    if\
    \ (empty($letters)) return strrev($s);\n    foreach ($letters as $letter) {\n\
    \        if ($letter === strtoupper($letter)) {\n            $s = str_replace($letter,\
    \ strtolower($letter), $s);\n        } else {\n            $s = str_replace($letter,\
    \ strtoupper($letter), $s);\n        }\n    }\n    return $s;\n}", "\t$res = '';\n\
    \tif (ctype_alpha($s)) {\n\t\t$res = strtoupper($s);\n\t} else {\n\t\t$res = strrev($s);\n\
    \t}\n\treturn $res;\n}\n\necho solve(\"#a@C\");\necho solve(\"1234\");\necho solve(\"\
    ab\");", "\t$s = str_split($s);\n\tfor ($i=0; $i < count($s); $i++) { \n\t\t$s[$i]\
    \ = ctype_alpha($s[$i]) ? ($s[$i] == strtoupper($s[$i]) ? strtolower($s[$i]) :\
    \ strtoupper($s[$i])) : $s[$i];\n\t}\n\treturn implode($s);\n}\n\nprint_r(solve(\"\
    #a@C\"));", "    $strlen = strlen($s);\n    $str = '';\n    for ($i = 0; $i <\
    \ $strlen; $i++) {\n        if (ctype_alpha($s[$i])) {\n            $s[$i] = strtoupper($s[$i])\
    \ === $s[$i] ? strtolower($s[$i]) : strtoupper($s[$i]);\n        }\n        $str\
    \ .= $s[$i];\n    }\n    if (ctype_alpha($str)) {\n        return strrev($str);\n\
    \    }\n    return $str;\n}\necho solve(\"1234\");\necho \"<br>\";\necho solve(\"\
    ab\");\necho \"<br>\";\necho solve(\"#a@C\");", "    if (!preg_match('/[a-zA-Z]/',\
    \ $s)) return strrev($s);\n    $ret = '';\n    for ($i = 0; $i < strlen($s); $i++)\
    \ {\n        $c = $s[$i];\n        if (preg_match('/[a-zA-Z]/', $c)) {\n     \
    \       $ret .= $c == strtolower($c) ? strtoupper($c) : strtolower($c);\n    \
    \    } else {\n            $ret .= $c;\n        }\n    }\n    return $ret;\n}\n\
    \necho solve(\"1234\"), \"\\n\";\necho solve(\"ab\"), \"\\n\";\necho solve(\"\
    #a@C\"), \"\\n\";", "    $flg = false;\n    $ret = '';\n    for ($i = 0; $i <\
    \ strlen($s); $i++) {\n        if (ctype_alpha($s[$i])) {\n            $flg =\
    \ true;\n            $ret .= strtoupper($s[$i]) == $s[$i] ? strtolower($s[$i])\
    \ : strtoupper($s[$i]);\n        } else {\n            $ret .= $s[$i];\n     \
    \   }\n    }\n    return $flg ? $ret : strrev($s);\n}\necho solve(\"1234\") .\
    \ \"\\n\";\necho solve(\"ab\") . \"\\n\";\necho solve(\"#a@C\") . \"\\n\";", " \
    \   $temp = \"\";\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (ord($s[$i])\
    \ >= 97 && ord($s[$i]) <= 122) {\n            $temp .= chr(ord($s[$i]) - 32);\n\
    \        } else if (ord($s[$i]) >= 65 && ord($s[$i]) <= 90) {\n            $temp\
    \ .= chr(ord($s[$i]) + 32);\n        } else {\n            $temp .= $s[$i];\n\
    \        }\n    }\n    return strrev($temp);\n}\n\necho solve(\"#a@C\");", " \
    \   // Place your code here\n    return \"\";\n}\n", "    if (ctype_alpha($s))\
    \ {\n        return strtoupper($s);\n    } else {\n        return strtolower($s);\n\
    \    }\n    return strrev($s);\n}\n$s = \"ab\";\nvar_dump(solve($s));", "  if\
    \ (!preg_match('/[a-zA-Z]/', $s)) {\n    return strrev($s);\n  }\n  return preg_replace_callback('/[a-zA-Z]/',\
    \ function($match) {\n    return strtolower($match[0]) == $match[0] ? strtoupper($match[0])\
    \ : strtolower($match[0]);\n  }, $s);\n}", "    $strArray = str_split($s);\n \
    \   $result = '';\n    $flag = true;\n    foreach ($strArray as $key => $str)\
    \ {\n        if (ctype_alpha($str)) {\n            $result .= ($flag) ? strtoupper($str)\
    \ : strtolower($str);\n            $flag = false;\n        } else {\n        \
    \    $result .= $str;\n        }\n    }\n    if ($flag) {\n        $result = strrev($result);\n\
    \    }\n    return $result;\n}\n\necho solve(\"1234\") . PHP_EOL;\necho solve(\"\
    ab\") . PHP_EOL;\necho solve(\"#a@C\") . PHP_EOL;", "    // the regexp matches\
    \ a string having at least one letter\n    if (preg_match('/[a-zA-Z]/', $s)) {\n\
    \        // the string has at least one letter\n        // if the string has only\
    \ letters, we must reverse the string\n        // so if the regexp matches the\
    \ string, we must reverse it\n        // otherwise, we must reverse the case of\
    \ each letter\n        $regexp = '/^[a-zA-Z]+$/';\n        if (preg_match($regexp,\
    \ $s)) {\n            $s = strrev($s);\n        } else {\n            $s = str_split($s);\n\
    \            foreach ($s as $key => $value) {\n                if (ctype_alpha($value))\
    \ {\n                    $s[$key] = $value == strtoupper($value) ? strtolower($value)\
    \ : strtoupper($value);\n                }\n            }\n            $s = implode($s);\n\
    \        }\n    } else {\n        // the string has no letters\n        // so\
    \ we just reverse it\n        $s = strrev($s);\n    }\n    return $s;\n}", " \
    \ $letters = range('a', 'z');\n  $letters = array_merge($letters, range('A', 'Z'));\n\
    \  $result = '';\n  $s = str_split($s);\n  foreach ($s as $char) {\n    if (in_array($char,\
    \ $letters)) {\n      $result .= ($char == strtoupper($char)) ? strtolower($char)\
    \ : strtoupper($char);\n    } else {\n      $result .= $char;\n    }\n  }\n  return\
    \ $result;\n}\n", "    $letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',\
    \ 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y',\
    \ 'z'];\n    $result = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n      \
    \  if (in_array($s[$i], $letters)) {\n            if ($s[$i] == strtoupper($s[$i]))\
    \ {\n                $result .= strtolower($s[$i]);\n            } else {\n  \
    \              $result .= strtoupper($s[$i]);\n            }\n        } else {\n\
    \            $result .= $s[$i];\n        }\n    }\n    return $result;\n}", " \
    \   if(preg_match(\"/[a-zA-Z]/\", $s)) {\n        return strtolower($s) ^ strtoupper($s)\
    \ ^ $s;\n    }\n    return strrev($s);\n}\necho solve(\"1234\");\necho solve(\"\
    ab\");\necho solve(\"#a@C\");", "    $n = \"\";\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        if (preg_match(\"/[a-z]/i\", $s[$i])) {\n            $n .=\
    \ strtoupper($s[$i]);\n        } else {\n            $n .= strtolower($s[$i]);\n\
    \        }\n    }\n    return $n;\n}\n", "    $letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz';\n\
    \    $result = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (strpos($letters,\
    \ $s[$i]) !== false) {\n            $result .= $s[$i] === strtoupper($s[$i]) ?\
    \ strtolower($s[$i]) : strtoupper($s[$i]);\n        } else {\n            $result\
    \ .= $s[$i];\n        }\n    }\n    return strlen($result) === 0 ? strrev($s)\
    \ : $result;\n}", "    return (preg_match(\"/[a-zA-Z]/\", $s)) ? strtolower($s)\
    \ : strrev($s);\n}\necho solve(\"ab\");", "\tif(ctype_alpha($s)){\n\t\tif(ctype_upper($s)){\n\
    \t\t\t$s = strtolower($s);\n\t\t}elseif(ctype_lower($s)){\n\t\t\t$s = strtoupper($s);\n\
    \t\t}\n\t}else{\n\t\t$s = strrev($s);\n\t}\n\treturn $s;\n}", "  $n = strlen($s);\n\
    \  $res = '';\n  for ($i = 0; $i < $n; $i++) {\n    if (ctype_alpha($s[$i])) {\n\
    \      $res .= ($s[$i] === strtoupper($s[$i])) ? strtolower($s[$i]) : strtoupper($s[$i]);\n\
    \    } else {\n      $res .= $s[$i];\n    }\n  }\n  return $res;\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
