name: HumanEval_161_solve
language: php
prompt: "<?php\n// You are given a string s.\n// if s[i] is a letter, reverse its\
  \ case from lower to upper or vise versa, \n// otherwise keep it as it is.\n// If\
  \ the string contains no letters, reverse the string.\n// The function should return\
  \ the resulted string.\n// Examples\n// >>> solve(\"1234\")\n// \"4321\"\n// >>>\
  \ solve(\"ab\")\n// \"AB\"\n// >>> solve(\"#a@C\")\n// \"#A@c\"\nfunction solve($s)\
  \ {\n"
tests: "function candidate(...$args) {\n    return solve(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(\"AsDf\") !== \"aSdF\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"1234\") !== \"4321\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"ab\") !== \"AB\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"#a@C\") !== \"#A@c\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"#AsdfW^45\") !== \"#aSDFw^45\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"#6@2\") !== \"2@6#\")\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"#$a^D\") !== \"\
  #$A^d\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"#ccc\"\
  ) !== \"#CCC\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $r = '';\n    $key = 0;\n    $result = array();\n    $l = strlen($s);\n\
    \    if ($l < 1) return $s;\n    for ($i = 0; $i < $l; $i++) {\n        if (ctype_alpha($s[$i]))\
    \ {\n            $key = 1;\n            $result[$i] = strtoupper($s[$i]) == $s[$i]\
    \ ? strtolower($s[$i]) : strtoupper($s[$i]);\n        } else {\n            $result[$i]\
    \ = $s[$i];\n        }\n    }\n    if ($key === 0) {\n        $result = array_reverse($result);\n\
    \    }\n    foreach ($result as $v) {\n        $r .= $v;\n    }\n    return $r;\n\
    }\n$s = readline(\"Enter a string: \");\nprint_r(solve($s));", "    if (!preg_match(\"\
    /[a-zA-Z]/\", $s)) {\n        return strrev($s);\n    }\n    $a = str_split($s);\n\
    \    $b = [];\n    foreach ($a as $v) {\n        if (ord($v) < 97) {\n       \
    \     $b[] = chr(ord($v) + 32);\n        } else {\n            $b[] = chr(ord($v)\
    \ - 32);\n        }\n    }\n    return implode(\"\", $b);\n}\n", "    $result\
    \ = \"\";\n    $letters = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"\
    h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\", \"o\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"u\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    $vowels = [\"a\",\
    \ \"e\", \"i\", \"o\", \"u\"];\n    $consonants = [\"b\", \"c\", \"d\", \"f\"\
    , \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\"\
    , \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n    $len = strlen($s);\n    for\
    \ ($i = 0; $i < $len; $i++) {\n        if (in_array($s[$i], $letters)) {\n   \
    \         if (in_array($s[$i], $vowels)) {\n                $result .= strtoupper($s[$i]);\n\
    \            } else {\n                $result .= strtolower($s[$i]);\n      \
    \      }\n        } else {\n            $result .= $s[$i];\n        }\n    }\n\
    \    return $result;\n}\necho solve(\"ab\") . PHP_EOL;", "    $res = '';\n   \
    \ $count = strlen($s);\n    for ($i = 0; $i < $count; $i++) {\n        if (preg_match('/[a-zA-Z]/',\
    \ $s[$i])) {\n            $res .= (ctype_upper($s[$i])) ? strtolower($s[$i]) :\
    \ strtoupper($s[$i]);\n        } else {\n            $res .= $s[$i];\n       \
    \ }\n    }\n    return (preg_match('/[a-zA-Z]/', $s)) ? $res : strrev($s);\n}\n",
  "    // if (!is_string($s)) return '';\n    // $strlen = strlen($s);\n    // $temp\
    \ = '';\n    // for ($i = 0; $i < $strlen; $i++) {\n    //     if (ctype_alpha($s[$i]))\
    \ {\n    //         $temp .= ($s[$i] === strtoupper($s[$i])) ? strtolower($s[$i])\
    \ : strtoupper($s[$i]);\n    //     } else {\n    //         $temp .= $s[$i];\n\
    \    //     }\n    // }\n    // return strrev($temp);\n    \n    if (!is_string($s))\
    \ return '';\n    $strlen = strlen($s);\n    $temp = '';\n    for ($i = 0; $i\
    \ < $strlen; $i++) {\n        if (ctype_alpha($s[$i])) {\n            $temp .=\
    \ ($s[$i] === strtoupper($s[$i])) ? strtolower($s[$i]) : strtoupper($s[$i]);\n\
    \        } else {\n            $temp .= $s[$i];\n        }\n    }\n    return\
    \ strrev($temp);\n}\n", "    $reversed = '';\n    for ($i = 0; $i < strlen($s);\
    \ $i++) {\n        if (ctype_alpha($s[$i])) {\n            $reversed .= strtoupper($s[$i])\
    \ == $s[$i] ? strtolower($s[$i]) : strtoupper($s[$i]);\n        } else {\n   \
    \         $reversed .= $s[$i];\n        }\n    }\n    return $reversed;\n}\n$s\
    \ = \"ab\";\necho solve($s);", "    $str = strtolower($s);\n    if ($str == $s)\
    \ {\n        $str = strtoupper($s);\n    }\n    return $str;\n}", "    if (preg_match(\"\
    /[a-zA-Z]/\", $s)) {\n        return strtolower($s) ^ strtoupper($s) ^ $s;\n \
    \   }\n    return strrev($s);\n}\necho solve(\"123\");\necho \"<br>\";\necho solve(\"\
    ab\");\necho \"<br>\";\necho solve(\"#a@C\");", "\t$letters = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    ;\n\t$a = str_split($s);\n\t$result = \"\";\n\t$has_letters = false;\n\tforeach\
    \ ($a as $k => $v) {\n\t\tif (strpos($letters, $v) !== false) {\n\t\t\t$has_letters\
    \ = true;\n\t\t\tif (ctype_lower($v)) {\n\t\t\t\t$result .= strtoupper($v);\n\t\
    \t\t} else {\n\t\t\t\t$result .= strtolower($v);\n\t\t\t}\n\t\t} else {\n\t\t\t\
    $result .= $v;\n\t\t}\n\t}\n\tif ($has_letters == false) {\n\t\treturn strrev($s);\n\
    \t}\n\treturn $result;\n}\necho \"<pre>\";\necho solve(\"#a@C\") . \"\\n\";\n\
    echo solve(\"1234\") . \"\\n\";\necho solve(\"@ab\") . \"\\n\";\necho solve(\"\
    12#abc\") . \"\\n\";\necho solve(\"abc#12\") . \"\\n\";\necho solve(\"\") . \"\
    \\n\";\necho \"</pre>\";", "    if(preg_match('/[A-Za-z]/', $s)) {\n        return\
    \ strtolower($s) ^ strtoupper($s) ^ $s;\n    }\n    return strrev($s);\n}\n",
  "\t$len = strlen($s);\n\t$r = '';\n\t$rv = '';\n\tfor ($i = 0; $i < $len; $i++)\
    \ {\n\t\tif ($s[$i] == strtoupper($s[$i])) {\n\t\t\t$rv .= strtolower($s[$i]);\n\
    \t\t} else if ($s[$i] == strtolower($s[$i])) {\n\t\t\t$rv .= strtoupper($s[$i]);\n\
    \t\t} else {\n\t\t\t$rv .= $s[$i];\n\t\t}\n\t}\n\treturn $rv;\n}\necho solve('ab');\n\
    echo solve('#a@C');\necho solve('1234');\n", "    if (preg_match('/[a-zA-Z]/',\
    \ $s)) {\n        return strtolower($s) ^ strtoupper($s) ^ $s;\n    } else {\n\
    \        return strrev($s);\n    }\n}\n", "  $res = '';\n  for ($i = 0; $i < strlen($s);\
    \ $i++) {\n    if (ctype_alpha($s[$i])) {\n      $res .= ctype_upper($s[$i]) ?\
    \ strtolower($s[$i]) : strtoupper($s[$i]);\n    } else {\n      $res .= $s[$i];\n\
    \    }\n  }\n  return empty($res) ? strrev($s) : $res;\n}\n", "  $arr = str_split($s);\n\
    \  $string = '';\n  for ($i=0; $i < count($arr); $i++) { \n    if (ctype_alpha($arr[$i]))\
    \ {\n      $string .= ctype_upper($arr[$i]) ? strtolower($arr[$i]) : strtoupper($arr[$i]);\n\
    \    } else {\n      $string .= $arr[$i];\n    }\n  }\n  return $string;\n}\n\
    echo solve(\"aBc\");\necho solve(\"a\");\necho solve(\"#a@C\");", "    $chars\
    \ = str_split($s);\n    $i = 0;\n    while ($i < count($chars)) {\n        if\
    \ (preg_match('/[a-zA-Z]/', $chars[$i])) {\n            $chars[$i] = strtolower($chars[$i])\
    \ === $chars[$i] ? strtoupper($chars[$i]) : strtolower($chars[$i]);\n        }\n\
    \        $i++;\n    }\n    return implode($chars);\n}\n$s = \"ab\";\n$res = solve($s);\n\
    echo($res);", "    $result = '';\n    $is_letter = false;\n    for ($i = 0; $i\
    \ < strlen($s); $i++) {\n        if (preg_match('/[a-zA-Z]/', $s[$i])) {\n   \
    \         $is_letter = true;\n            if (ctype_lower($s[$i])) {\n       \
    \         $result .= strtoupper($s[$i]);\n            } else {\n             \
    \   $result .= strtolower($s[$i]);\n            }\n        } else {\n        \
    \    $result .= $s[$i];\n        }\n    }\n    if (!$is_letter) {\n        $result\
    \ = strrev($result);\n    }\n    return $result;\n}\n\nprint solve(\"1234\") .\
    \ \"\\n\";\nprint solve(\"ab\") . \"\\n\";\nprint solve(\"#a@C\") . \"\\n\";",
  "  $res = '';\n  $len = strlen($s);\n  for ($i = 0; $i < $len; $i++) {\n    if (ctype_alpha($s[$i]))\
    \ {\n      $res .= $s[$i] === strtoupper($s[$i]) ? strtolower($s[$i]) : strtoupper($s[$i]);\n\
    \    } else {\n      $res .= $s[$i];\n    }\n  }\n  return $res ? $res : strrev($s);\n\
    }", "    if (preg_match(\"/[a-zA-Z]/\", $s)) {\n        $result = '';\n      \
    \  for ($i = 0; $i < strlen($s); $i++) {\n            if (ord($s[$i]) >= 65 &&\
    \ ord($s[$i]) <= 90) {\n                $result .= chr(ord($s[$i]) + 32);\n  \
    \          } else if (ord($s[$i]) >= 97 && ord($s[$i]) <= 122) {\n           \
    \     $result .= chr(ord($s[$i]) - 32);\n            } else {\n              \
    \  $result .= $s[$i];\n            }\n        }\n        return $result;\n   \
    \ } else {\n        return strrev($s);\n    }\n}", "    $result = \"\";\n    if(!preg_match(\"\
    /^[A-Za-z]+$/\", $s)) {\n        return strrev($s);\n    }\n    else {\n     \
    \   for($i = 0; $i < strlen($s); $i++) {\n            if(ctype_upper($s[$i]))\
    \ {\n                $result .= strtolower($s[$i]);\n            }\n         \
    \   else {\n                $result .= strtoupper($s[$i]);\n            }\n  \
    \      }\n    }\n    return $result;\n}", "\tif (strlen($s) == 0) {\n\t\treturn\
    \ $s;\n\t}\n\n\t$s_arr = str_split($s);\n\t$s_arr_len = count($s_arr);\n\t$result\
    \ = '';\n\tfor ($i = 0; $i < $s_arr_len; $i++) {\n\t\tif (ctype_alpha($s_arr[$i]))\
    \ {\n\t\t\tif (ctype_upper($s_arr[$i])) {\n\t\t\t\t$result .= strtolower($s_arr[$i]);\n\
    \t\t\t} else if (ctype_lower($s_arr[$i])) {\n\t\t\t\t$result .= strtoupper($s_arr[$i]);\n\
    \t\t\t}\n\t\t} else {\n\t\t\t$result .= $s_arr[$i];\n\t\t}\n\t}\n\n\treturn $result;\n\
    }\n\nvar_dump(solve(\"ab\"));\nvar_dump(solve(\"1234\"));\nvar_dump(solve(\"#a@C\"\
    ));\nvar_dump(solve(\"\"));"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
