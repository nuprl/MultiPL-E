name: HumanEval_39_prime_fib
language: php
prompt: "<?php\n// prime_fib returns n-th number that is a Fibonacci number and it's\
  \ also prime.\n// >>> prime_fib(1)\n// 2\n// >>> prime_fib(2)\n// 3\n// >>> prime_fib(3)\n\
  // 5\n// >>> prime_fib(4)\n// 13\n// >>> prime_fib(5)\n// 89\nfunction prime_fib($n)\
  \ {\n"
tests: "function candidate(...$args) {\n    return prime_fib(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(1) !== 2) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(2) !== 3) { throw new Exception(\"Test failed!\"); }\n \
  \   if (candidate(3) !== 5) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
  \ !== 13) { throw new Exception(\"Test failed!\"); }\n    if (candidate(5) !== 89)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(6) !== 233) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(7) !== 1597) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(8) !== 28657) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(9) !== 514229) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(10) !== 433494437) { throw new Exception(\"Test\
  \ failed!\"); }\n}\n\ntest();"
completions: ["  $fib_list = array(2, 3);\n  $n--;\n\n  while ($n > 0) {\n    $fib_list[]\
    \ = $fib_list[count($fib_list) - 1] + $fib_list[count($fib_list) - 2];\n    if\
    \ (is_prime($fib_list[count($fib_list) - 1])) {\n      $n--;\n    }\n  }\n\n \
    \ return $fib_list[count($fib_list) - 1];\n}\n", "\t$index = 0;\n\t$i = 1;\n\t\
    while (true) {\n\t\t$i = fib($i);\n\t\tif (is_prime($i)) {\n\t\t\t$index++;\n\t\
    \t\tif ($index == $n) {\n\t\t\t\treturn $i;\n\t\t\t}\n\t\t}\n\t}\n}\n", "    if\
    \ ($n == 1) {\n        return 2;\n    } else if ($n == 2) {\n        return 3;\n\
    \    } else {\n        $fibs = [2, 3];\n        $count = 1;\n        while ($count\
    \ < $n) {\n            $fibs[2] = $fibs[0] + $fibs[1];\n            if (is_prime($fibs[2]))\
    \ {\n                $count++;\n            }\n            $fibs[0] = $fibs[1];\n\
    \            $fibs[1] = $fibs[2];\n        }\n        return $fibs[2];\n    }\n\
    }\n", "\t$arr = fib_arr($n);\n\tfor ($i = 1; $i <= $n; $i++) {\n\t\tif (is_prime($arr[$i]))\
    \ {\n\t\t\treturn $arr[$i];\n\t\t}\n\t}\n}", "  $fib_num = 0;\n  $cur_fib = 1;\n\
    \  $counter = 1;\n  while (TRUE) {\n    if ($n == 1) {\n      return 2;\n    }\n\
    \    $new_fib = $fib_num + $cur_fib;\n    $fib_num = $cur_fib;\n    $cur_fib =\
    \ $new_fib;\n    if (is_prime($cur_fib)) {\n      $counter++;\n    }\n    if ($counter\
    \ == $n) {\n      return $cur_fib;\n    }\n  }\n}", "    $prime_fibs = array();\n\
    \    $current_fib = fib(1);\n    while (count($prime_fibs) < $n) {\n        if\
    \ (is_prime($current_fib))\n            $prime_fibs[] = $current_fib;\n      \
    \  $current_fib = fib(count($prime_fibs) + 1);\n    }\n    return $prime_fibs[$n\
    \ - 1];\n}", "\t$pf = array(2, 3, 5, 13, 89);\n\tif (isset($pf[$n-1])) {\n\t\t\
    return $pf[$n-1];\n\t}\n\t// Calculate all prime fibonacci numbers less than 1000000\n\
    \t$f = array(1, 2);\n\t$i = 2;\n\t$len = 1000000;\n\twhile ($f[$i-1] < $len) {\n\
    \t\t$f[$i] = $f[$i-1] + $f[$i-2];\n\t\t$i++;\n\t}\n\t// Generate array of all\
    \ primes less than 1000000\n\t$primes = gen_primes(floor(sqrt($len)));\n\t// Filter\
    \ array of prime fibonacci numbers\n\t$pf = array_filter($f, function($x) use($primes)\
    \ {\n\t\treturn in_array($x, $primes);\n\t});\n\treturn $pf[$n-1];\n}\n", "  $fib\
    \ = [2, 3];\n  $n_fib = 2;\n  $i = 0;\n  while ($n_fib <= $n) {\n    $fib[$i+2]\
    \ = $fib[$i] + $fib[$i+1];\n    $n_fib++;\n    $i++;\n  }\n  if (is_prime($fib[$i]))\
    \ {\n    return $fib[$i];\n  } else {\n    return \"Not found\";\n  }\n}\necho\
    \ prime_fib(10);", "    $fib_result = 0;\n    $fib_count = 0;\n    $fib_num1 =\
    \ 1;\n    $fib_num2 = 1;\n    while ($fib_count < $n) {\n        $fib_result =\
    \ $fib_num1 + $fib_num2;\n        $fib_num1 = $fib_num2;\n        $fib_num2 =\
    \ $fib_result;\n        if ($fib_result % 2 == 0) {\n            $fib_count++;\n\
    \        }\n    }\n    return $fib_result;\n}\n", "    $fib = fib($n);\n    while\
    \ (!is_prime($fib)) {\n        $fib = fib(++$n);\n    }\n    return $fib;\n}\n",
  "    return 0;\n}", "    $answer = 0;\n    for ($i = 1; $n > 0; $i++) {\n      \
    \  $res = fib($i);\n        if (is_prime($res)) {\n            $answer = $res;\n\
    \            $n--;\n        }\n    }\n    return $answer;\n}\n", "\t$fib = fib($n);\n\
    \tif (is_prime($fib)) {\n\t\treturn $fib;\n\t} else {\n\t\treturn prime_fib($n+1);\n\
    \t}\n}\n", "    $fibs = array(2, 3);\n    $i = 2;\n    while ($i < $n) {\n   \
    \     $fibs[] = $fibs[$i - 1] + $fibs[$i - 2];\n        $i++;\n    }\n    return\
    \ $fibs[$n - 1];\n}\n", "    $fib = 0;\n    $fib_arr = array();\n    $fib_arr[0]\
    \ = 1;\n    $fib_arr[1] = 1;\n    $fib_arr[2] = 2;\n    $i = 2;\n    while (count($fib_arr)\
    \ <= $n) {\n        $fib = $fib_arr[$i-1] + $fib_arr[$i-2];\n        if (is_prime($fib))\
    \ {\n            $fib_arr[] = $fib;\n        }\n        $i++;\n    }\n    return\
    \ $fib_arr[$n];\n}\n", "  $i = 1; // current Fibonacci number being processed\n\
    \  $j = 1; // index of required Fibonacci number\n  while ($j < $n) {\n    $i\
    \ += $j;\n    $j = $i - $j;\n    if (check_prime($i)) {\n      $j++;\n    }\n\
    \  }\n  return $i;\n}\n", "    $fibs = [2, 3];\n    $i = 2;\n    while(count($fibs)\
    \ <= $n) {\n        $fibs[] = next($fibs) + prev($fibs);\n        $i++;\n    }\n\
    \    $prime_fibs = [];\n    foreach($fibs as $fib) {\n        if(is_prime($fib))\
    \ {\n            $prime_fibs[] = $fib;\n        }\n    }\n    return $prime_fibs[$n\
    \ - 1];\n}\n", "  $a = 0;\n  $b = 1;\n  $count = 0;\n  while (1) {\n    $count\
    \ += 1;\n    $c = $a + $b;\n    if ($count == $n) {\n      if (is_prime($c)) {\n\
    \        return $c;\n      }\n    }\n    $a = $b;\n    $b = $c;\n  }\n}\n", " \
    \ $fib = function($n) use (&$fib) {\n    if ($n < 2) return $n;\n    return $fib($n\
    \ - 1) + $fib($n - 2);\n  };\n  $fib = memoize($fib);\n  for ($i = 0; ; $i++)\
    \ {\n    $f = $fib($i);\n    if (is_prime($f)) {\n      $n--;\n      if ($n ===\
    \ 0) {\n        return $f;\n      }\n    }\n  }\n}", "  $first = 0;\n  $second\
    \ = 1;\n  $total = 0;\n  $index = 0;\n  while ($index < $n) {\n    $total = $first\
    \ + $second;\n    $first = $second;\n    $second = $total;\n    if (is_prime($total))\
    \ {\n      $index++;\n    }\n  }\n  return $total;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
