name: HumanEval_65_circular_shift
language: php
prompt: "<?php\n// Circular shift the digits of the integer x, shift the digits right\
  \ by shift\n// and return the result as a string.\n// If shift > number of digits,\
  \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
  \ 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n"
tests: "function candidate(...$args) {\n    return circular_shift(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["    if ($shift == 0) {\n        return $x;\n    }\n    if ($shift >=\
    \ floor(log10($x))) {\n        return strrev((string)$x);\n    }\n    $head =\
    \ $x % pow(10, $shift);\n    $tail = floor($x / pow(10, $shift));\n    return\
    \ $head * pow(10, floor(log10($x) - $shift)) + $tail;\n}\n", "    $x = (string)\
    \ $x;\n    if ($shift >= strlen($x)) {\n        return strrev($x);\n    } else\
    \ {\n        return substr($x, $shift) . substr($x, 0, $shift);\n    }\n}\n",
  "  $x = (string)$x;\n  $len = strlen($x);\n  if ($shift > $len) {\n    return strrev($x);\n\
    \  }\n  $x = substr($x, $shift, $len) . substr($x, 0, $shift);\n  return $x;\n\
    }\n", "    if ($shift == 0) {\n        return (string)$x;\n    }\n    $sx = (string)$x;\n\
    \    if ($shift > strlen($sx)) {\n        return strrev($sx);\n    }\n    return\
    \ substr($sx, $shift) . substr($sx, 0, $shift);\n}\n", "    $x = (string) $x;\n\
    \    $length = strlen($x);\n    $shift = $shift % $length;\n    if ($shift ===\
    \ 0) {\n        return $x;\n    }\n    return substr($x, $shift) . substr($x,\
    \ 0, $shift);\n}\n", "    $x_str = strval($x);\n    $x_len = strlen($x_str);\n\
    \    if ($shift > $x_len) {\n        return strrev($x_str);\n    } else {\n  \
    \      return substr($x_str, $shift) . substr($x_str, 0, $shift);\n    }\n}\n\n",
  "    $string = (string)$x;\n    $length = strlen($string);\n    if ($shift > $length)\
    \ {\n        $string = strrev($string);\n    } else {\n        $string = substr($string,\
    \ $shift) . substr($string, 0, $shift);\n    }\n    return $string;\n}\n", " \
    \   if ($shift <= 0) {\n        return (string)$x;\n    }\n    $digits = str_split((string)$x);\n\
    \    $num_digits = count($digits);\n    if ($shift >= $num_digits) {\n       \
    \ return implode(array_reverse($digits));\n    }\n    $left = array_slice($digits,\
    \ 0, $shift);\n    $right = array_slice($digits, $shift);\n    return implode($right)\
    \ . implode($left);\n}\n", "  $x = (string)$x;\n  $len = strlen($x);\n  if ($shift\
    \ > $len) {\n    return strrev($x);\n  }\n  $first = substr($x, 0, $len - $shift);\n\
    \  $second = substr($x, $len - $shift);\n  return $second . $first;\n}", "   \
    \ $str = \"$x\";\n    $len = strlen($str);\n    if ($shift >= $len) {\n      \
    \  return strrev($str);\n    } else {\n        return substr($str, $shift) . substr($str,\
    \ 0, $shift);\n    }\n}", "    $num_digits = strlen((string)$x);\n    if ($shift\
    \ > $num_digits) {\n        return strrev((string)$x);\n    }\n    else if ($shift\
    \ < 0) {\n        return circular_shift($x, $num_digits - abs($shift));\n    }\n\
    \    else {\n        $first_digit = substr((string)$x, 0, $shift);\n        $shifted_digits\
    \ = substr((string)$x, $shift);\n        return $shifted_digits . $first_digit;\n\
    \    }\n}\n", "    $string = (string)$x;\n    $length = strlen($string);\n   \
    \ if ($shift > $length) {\n        return strrev($string);\n    }\n    return\
    \ substr($string, $shift, $length) . substr($string, 0, $shift);\n}\n", "  $x_str\
    \ = (string)$x;\n  $x_str_len = strlen($x_str);\n  if ($shift > $x_str_len) {\n\
    \    return strrev($x_str);\n  }\n  return substr($x_str, $shift) . substr($x_str,\
    \ 0, $shift);\n}\n", "    $str = (string)$x;\n    $len = strlen($str);\n    $shift\
    \ = $shift % $len;\n    if ($shift == 0) return $str;\n    return substr($str,\
    \ $shift) . substr($str, 0, $shift);\n}\n", "    // Get the length of the number\n\
    \    $length = strlen($x);\n    // Return the number if it has only one digit\n\
    \    if ($length == 1) {\n        return $x;\n    }\n    // If shift is bigger\
    \ than the length of the number, reverse it\n    if ($shift > $length) {\n   \
    \     return strrev($x);\n    }\n    // Remove the last digit from the number\n\
    \    $last_digit = substr($x, -1);\n    // Remove the last digit from the number\
    \ and save it to 'x'\n    $x = substr($x, 0, -1);\n    // Add the last digit to\
    \ the front of the number\n    $x = $last_digit . $x;\n    // Recursively run\
    \ the function until shift is 0\n    if ($shift > 1) {\n        return circular_shift($x,\
    \ $shift - 1);\n    }\n    // Return the number\n    return $x;\n}", "    $digits\
    \ = str_split($x);\n    $digits_length = count($digits);\n    $shift = $shift\
    \ % $digits_length;\n    if ($shift == 0) {\n        return $x;\n    }\n    $shifted_digits\
    \ = array_slice($digits, $shift);\n    $shifted_digits = array_merge($shifted_digits,\
    \ array_slice($digits, 0, $shift));\n    return implode($shifted_digits);\n}",
  "    $s = $x.' ';\n    if (strlen($s) > $shift) {\n        $s = substr($s, $shift,\
    \ strlen($s)-$shift).substr($s, 0, $shift);\n    } else {\n        $s = strrev($s);\n\
    \    }\n    return trim($s);\n}\n", "    $x_string = strval($x);\n    $x_len =\
    \ strlen($x_string);\n    if ($shift > $x_len) {\n        return strrev($x_string);\n\
    \    }\n    return substr($x_string, $shift, $x_len - $shift) . substr($x_string,\
    \ 0, $shift);\n}\n", "  if ($shift <= 0) return strval($x);\n  $x_str = strval($x);\n\
    \  $n = strlen($x_str);\n  if ($shift > $n) {\n    return strrev($x_str);\n  }\n\
    \  $x_str = substr($x_str, $shift) . substr($x_str, 0, $shift);\n  return $x_str;\n\
    }\necho circular_shift(12, 1) . \"\\n\";\necho circular_shift(12, 2) . \"\\n\"\
    ;\n", "    $digits = str_split($x);\n    $digits = array_reverse($digits);\n \
    \   $digits = array_pad($digits, $shift, 0);\n    $digits = array_slice($digits,\
    \ 0, $shift);\n    $digits = array_reverse($digits);\n    return implode($digits);\n\
    }\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
