name: HumanEval_65_circular_shift
language: php
prompt: "<?php\n// Circular shift the digits of the integer x, shift the digits right\
  \ by shift\n// and return the result as a string.\n// If shift > number of digits,\
  \ return digits reversed.\n// >>> circular_shift(12, 1)\n// \"21\"\n// >>> circular_shift(12,\
  \ 2)\n// \"12\"\nfunction circular_shift($x, $shift) {\n"
tests: "function candidate(...$args) {\n    return circular_shift(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(100, 2) !== \"001\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(12, 2) !== \"12\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(97, 8) !== \"79\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(12, 1) !== \"21\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(11, 101) !== \"11\") { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["    if ($shift == 0) {\n        return $x;\n    }\n    if ($shift >=\
    \ floor(log10($x))) {\n        return strrev((string)$x);\n    }\n    $head =\
    \ $x % pow(10, $shift);\n    $tail = floor($x / pow(10, $shift));\n    return\
    \ $head * pow(10, floor(log10($x) - $shift)) + $tail;\n}\n", "    $x = (string)\
    \ $x;\n    if ($shift >= strlen($x)) {\n        return strrev($x);\n    } else\
    \ {\n        return substr($x, $shift) . substr($x, 0, $shift);\n    }\n}\n",
  "  $x = (string)$x;\n  $len = strlen($x);\n  if ($shift > $len) {\n    return strrev($x);\n\
    \  }\n  $x = substr($x, $shift, $len) . substr($x, 0, $shift);\n  return $x;\n\
    }\n", "    if ($shift == 0) {\n        return (string)$x;\n    }\n    $sx = (string)$x;\n\
    \    if ($shift > strlen($sx)) {\n        return strrev($sx);\n    }\n    return\
    \ substr($sx, $shift) . substr($sx, 0, $shift);\n}\n", "    $x = (string) $x;\n\
    \    $length = strlen($x);\n    $shift = $shift % $length;\n    if ($shift ===\
    \ 0) {\n        return $x;\n    }\n    return substr($x, $shift) . substr($x,\
    \ 0, $shift);\n}\n", "    $x_str = strval($x);\n    $x_len = strlen($x_str);\n\
    \    if ($shift > $x_len) {\n        return strrev($x_str);\n    } else {\n  \
    \      return substr($x_str, $shift) . substr($x_str, 0, $shift);\n    }\n}\n\n",
  "    $string = (string)$x;\n    $length = strlen($string);\n    if ($shift > $length)\
    \ {\n        $string = strrev($string);\n    } else {\n        $string = substr($string,\
    \ $shift) . substr($string, 0, $shift);\n    }\n    return $string;\n}\n", " \
    \   if ($shift <= 0) {\n        return (string)$x;\n    }\n    $digits = str_split((string)$x);\n\
    \    $num_digits = count($digits);\n    if ($shift >= $num_digits) {\n       \
    \ return implode(array_reverse($digits));\n    }\n    $left = array_slice($digits,\
    \ 0, $shift);\n    $right = array_slice($digits, $shift);\n    return implode($right)\
    \ . implode($left);\n}\n", "  $x = (string)$x;\n  $len = strlen($x);\n  if ($shift\
    \ > $len) {\n    return strrev($x);\n  }\n  $first = substr($x, 0, $len - $shift);\n\
    \  $second = substr($x, $len - $shift);\n  return $second . $first;\n}", "   \
    \ $str = \"$x\";\n    $len = strlen($str);\n    if ($shift >= $len) {\n      \
    \  return strrev($str);\n    } else {\n        return substr($str, $shift) . substr($str,\
    \ 0, $shift);\n    }\n}", "    $num_digits = strlen((string)$x);\n    if ($shift\
    \ > $num_digits) {\n        return strrev((string)$x);\n    }\n    else if ($shift\
    \ < 0) {\n        return circular_shift($x, $num_digits - abs($shift));\n    }\n\
    \    else {\n        $first_digit = substr((string)$x, 0, $shift);\n        $shifted_digits\
    \ = substr((string)$x, $shift);\n        return $shifted_digits . $first_digit;\n\
    \    }\n}\n", "    $string = (string)$x;\n    $length = strlen($string);\n   \
    \ if ($shift > $length) {\n        return strrev($string);\n    }\n    return\
    \ substr($string, $shift, $length) . substr($string, 0, $shift);\n}\n", "  $x_str\
    \ = (string)$x;\n  $x_str_len = strlen($x_str);\n  if ($shift > $x_str_len) {\n\
    \    return strrev($x_str);\n  }\n  return substr($x_str, $shift) . substr($x_str,\
    \ 0, $shift);\n}\n", "    $str = (string)$x;\n    $len = strlen($str);\n    $shift\
    \ = $shift % $len;\n    if ($shift == 0) return $str;\n    return substr($str,\
    \ $shift) . substr($str, 0, $shift);\n}\n", "    // Get the length of the number\n\
    \    $length = strlen($x);\n    // Return the number if it has only one digit\n\
    \    if ($length == 1) {\n        return $x;\n    }\n    // If shift is bigger\
    \ than the length of the number, reverse it\n    if ($shift > $length) {\n   \
    \     return strrev($x);\n    }\n    // Remove the last digit from the number\n\
    \    $last_digit = substr($x, -1);\n    // Remove the last digit from the number\
    \ and save it to 'x'\n    $x = substr($x, 0, -1);\n    // Add the last digit to\
    \ the front of the number\n    $x = $last_digit . $x;\n    // Recursively run\
    \ the function until shift is 0\n    if ($shift > 1) {\n        return circular_shift($x,\
    \ $shift - 1);\n    }\n    // Return the number\n    return $x;\n}", "    $digits\
    \ = str_split($x);\n    $digits_length = count($digits);\n    $shift = $shift\
    \ % $digits_length;\n    if ($shift == 0) {\n        return $x;\n    }\n    $shifted_digits\
    \ = array_slice($digits, $shift);\n    $shifted_digits = array_merge($shifted_digits,\
    \ array_slice($digits, 0, $shift));\n    return implode($shifted_digits);\n}",
  "    $s = $x.' ';\n    if (strlen($s) > $shift) {\n        $s = substr($s, $shift,\
    \ strlen($s)-$shift).substr($s, 0, $shift);\n    } else {\n        $s = strrev($s);\n\
    \    }\n    return trim($s);\n}\n", "    $x_string = strval($x);\n    $x_len =\
    \ strlen($x_string);\n    if ($shift > $x_len) {\n        return strrev($x_string);\n\
    \    }\n    return substr($x_string, $shift, $x_len - $shift) . substr($x_string,\
    \ 0, $shift);\n}\n", "  if ($shift <= 0) return strval($x);\n  $x_str = strval($x);\n\
    \  $n = strlen($x_str);\n  if ($shift > $n) {\n    return strrev($x_str);\n  }\n\
    \  $x_str = substr($x_str, $shift) . substr($x_str, 0, $shift);\n  return $x_str;\n\
    }\necho circular_shift(12, 1) . \"\\n\";\necho circular_shift(12, 2) . \"\\n\"\
    ;\n", "    $digits = str_split($x);\n    $digits = array_reverse($digits);\n \
    \   $digits = array_pad($digits, $shift, 0);\n    $digits = array_slice($digits,\
    \ 0, $shift);\n    $digits = array_reverse($digits);\n    return implode($digits);\n\
    }\n", "    if ($shift >= strlen($x))\n        return strrev($x);\n    else\n \
    \       return substr($x, -$shift) . substr($x, 0, -$shift);\n}\n", "  $digits\
    \ = str_split($x);\n  $n = count($digits);\n  if ($shift >= $n) {\n    $digits\
    \ = array_reverse($digits);\n  } else {\n    $digits = array_merge(array_slice($digits,\
    \ $shift), array_slice($digits, 0, $shift));\n  }\n  return implode('', $digits);\n\
    }\n", "    if ($shift <= 0) {\n        return $x;\n    }\n    $x = strval($x);\n\
    \    $len = strlen($x);\n    if ($shift >= $len) {\n        return strrev($x);\n\
    \    }\n    $a = substr($x, $shift);\n    $b = substr($x, 0, $shift);\n    return\
    \ $a . $b;\n}", "    $x = (string) $x;\n    $shift = (int) $shift;\n    if ($shift\
    \ >= strlen($x)) {\n        return strrev($x);\n    }\n    else {\n        return\
    \ substr($x, $shift) . substr($x, 0, $shift);\n    }\n}", "  if ($shift <= 0)\
    \ {\n    return (string)$x;\n  }\n  $digits = str_split((string)$x);\n  $n = count($digits);\n\
    \  if ($shift > $n) {\n    return implode(array_reverse($digits));\n  }\n  for\
    \ ($i = 0; $i < $shift; $i++) {\n    $last = array_pop($digits);\n    array_unshift($digits,\
    \ $last);\n  }\n  return implode($digits);\n}\n", "    $int_length = strlen((string)$x);\n\
    \    if ($shift > $int_length) {\n        return strrev((string)$x);\n    } else\
    \ {\n        return substr((string)$x, $shift) . substr((string)$x, 0, $shift);\n\
    \    }\n}\n", "    $digits = str_split((string)$x);\n    $num_digits = count($digits);\n\
    \    if ($shift > $num_digits) {\n        return implode(array_reverse($digits));\n\
    \    }\n    return implode(array_merge(array_slice($digits, $shift), array_slice($digits,\
    \ 0, $shift)));\n}\n", "    if ($shift == 0) return strval($x);\n    $x_str =\
    \ strval($x);\n    $len = strlen($x_str);\n    $shift %= $len;\n    if ($shift\
    \ == 0) return $x_str;\n    $x_reversed = strrev($x_str);\n    $cut = substr($x_reversed,\
    \ 0, $shift);\n    $out = substr($x_reversed, $shift);\n    return strrev($out)\
    \ . strrev($cut);\n}\n", "    $r = strrev(strval($x));\n    $shift %= strlen($r);\n\
    \    $r = substr($r, $shift) . substr($r, 0, $shift);\n    return $r;\n}\n", " \
    \ $s = $x;\n  $result = array();\n  $base = 10;\n  if ($shift < 1) {\n    return\
    \ strval($x);\n  }\n  while ($s > 0) {\n    $result[] = $s % $base;\n    $s =\
    \ floor($s / $base);\n  }\n  if ($shift > count($result)) {\n    return implode('',\
    \ array_reverse($result));\n  }\n  $r1 = array_slice($result, $shift);\n  $r2\
    \ = array_slice($result, 0, $shift);\n  return implode('', array_merge($r1, $r2));\n\
    }\n", "    $str_x = strval($x);\n    $length = strlen($str_x);\n    if ($shift\
    \ > $length) {\n        $rev_x = strrev($str_x);\n        return $rev_x;\n   \
    \ } else {\n        $begin = substr($str_x, 0, $shift);\n        $end = substr($str_x,\
    \ $shift);\n        return $end . $begin;\n    }\n}\n", "    // Convert to string\
    \ and then array\n    $digits = str_split($x);\n    $digits_length = count($digits);\n\
    \    // shift past end, shift right to left instead\n    if ($shift > $digits_length)\
    \ {\n        $shift = $shift % $digits_length;\n        return implode(\"\", array_reverse($digits));\n\
    \    } else {\n        // take slice of digits starting from the end of the string\n\
    \        $left_part = array_slice($digits, $digits_length - $shift);\n       \
    \ // take slice of digits starting from the beginning of the string\n        $right_part\
    \ = array_slice($digits, 0, $digits_length - $shift);\n        // append the left\
    \ part to the end of the right part and return it\n        return implode(\"\"\
    , array_merge($left_part, $right_part));\n    }\n}\n", "    $digits = strlen((string)$x);\n\
    \    $shift = $shift % $digits;\n    $right = substr((string)$x, $shift);\n  \
    \  $left = substr((string)$x, 0, $shift);\n    return $right . $left;\n}\n", " \
    \   $digits = str_split($x);\n    $len = count($digits);\n    if ($shift >= $len)\
    \ {\n        return implode(array_reverse($digits));\n    } else {\n        return\
    \ implode(array_merge(array_slice($digits, $shift), array_slice($digits, 0, $shift)));\n\
    \    }\n}\n", "    $num_digits = strlen($x);\n    if ($shift >= $num_digits)\n\
    \        return strrev($x);\n    $slice = substr($x, $shift);\n    $out = $slice\
    \ . substr($x, 0, $shift);\n    return $out;\n}\n", "    $s = \"$x\";\n    $n\
    \ = strlen($s);\n    if ($shift > $n)\n        return strrev($s);\n    $seg1 =\
    \ substr($s, 0, $n - $shift);\n    $seg2 = substr($s, $n - $shift);\n    return\
    \ $seg2 . $seg1;\n}\n", "    if ($shift >= strlen($x)) {\n        return strrev($x);\n\
    \    }\n    return substr($x, $shift) . substr($x, 0, $shift);\n}\n", "    //\
    \ convert the integer to a string\n    $s = strval($x);\n    // if the shift is\
    \ greater than the number of digits, shift right\n    if ($shift > strlen($s))\
    \ {\n        return strrev($s);\n    }\n    // return the circular shift of the\
    \ digits\n    return substr($s, $shift) . substr($s, 0, $shift);\n}\n", "  $num_digits\
    \ = strlen($x);\n  if ($shift >= $num_digits) {\n    return strrev($x);\n  }\n\
    \  $left = substr($x, 0, $shift);\n  $right = substr($x, $shift);\n  return $right\
    \ . $left;\n}\n\n", "  $array = str_split((string)$x);\n  $len = count($array);\n\
    \  $shifted = array_pad($array, $len + $shift, null);\n  if ($shift > $len) {\n\
    \    $array = array_reverse($array);\n  }\n  foreach (range(0, $len - 1) as $i)\
    \ {\n    $shifted[$i + $shift] = $array[$i];\n  }\n  return implode('', $shifted);\n\
    }\n", "  $x = strval($x);\n  $len = strlen($x);\n  if ($shift > $len) {\n    return\
    \ strrev($x);\n  }\n  return substr($x, $len - $shift) . substr($x, 0, $len -\
    \ $shift);\n}\n", "    $x = (string) $x;\n    $n = strlen($x);\n    if ($shift\
    \ >= $n) {\n        return strrev($x);\n    } else {\n        return substr($x,\
    \ $shift, $n - $shift) . substr($x, 0, $shift);\n    }\n}\n", "    if (floor($x\
    \ / pow(10, $shift)) === 0) {\n        return strrev(strval($x));\n    } else\
    \ {\n        return strval($x % pow(10, $shift)) .\n               strval(floor($x\
    \ / pow(10, $shift)));\n    }\n}\n", "    if ($shift == 0) {\n        return $x;\n\
    \    }\n    $len = strlen($x);\n    if ($shift > $len) {\n        return strrev($x);\n\
    \    }\n    $result = strrev(substr($x, $shift, $len)) . substr($x, 0, $shift);\n\
    \    return $result;\n}\n", "  $x = (string)$x;\n  $x = strrev($x);\n  $x = str_pad($x,\
    \ $shift, '0', STR_PAD_LEFT);\n  $x = substr($x, 0, strlen($x) - $shift);\n  $x\
    \ = strrev($x);\n  return $x;\n}", "    $x = (string) $x;\n    $shift = (int)\
    \ $shift;\n    if ($shift >= strlen($x)) {\n        return strrev($x);\n    }\n\
    \    $right = substr($x, -$shift);\n    $left = substr($x, 0, -$shift);\n    return\
    \ $right . $left;\n}\n", "    $str = (string)$x;\n    if ($shift > strlen($str))\
    \ {\n        return strrev($str);\n    } else {\n        return substr($str, $shift)\
    \ . substr($str, 0, $shift);\n    }\n}\n", "    $digits = strlen($x);\n    $shift\
    \ = $shift % $digits;\n    if ($shift == 0) {\n        return $x;\n    }\n   \
    \ $d0 = substr($x, $shift);\n    $d1 = substr($x, 0, $shift);\n    return $d0\
    \ . $d1;\n}\n", "  // first convert to string, then circular shift\n  $x = strval($x);\n\
    \  $x = strrev($x);\n  if ($shift < strlen($x)) {\n    // to circular shift, put\
    \ the first digit at the end, and chop it off\n    $first_digit = substr($x, 0,\
    \ 1);\n    $x = substr($x, 1);\n    $x = $x . $first_digit;\n  }\n  $x = strrev($x);\n\
    \  return $x;\n}\n", "    $x_arr = str_split($x);\n    $len = count($x_arr);\n\
    \    if ($shift >= $len) {\n        return implode(array_reverse($x_arr));\n \
    \   } else {\n        $n = $len - $shift;\n        $l = array_slice($x_arr, 0,\
    \ $n);\n        $r = array_slice($x_arr, $n);\n        return implode($r) . implode($l);\n\
    \    }\n}\n", "    $digits = digits($x);\n    $n = count($digits);\n    if ($shift\
    \ > $n)\n        return join(\"\", array_reverse($digits));\n    $left = array_slice($digits,\
    \ 0, $shift);\n    $right = array_slice($digits, $shift);\n    return join(\"\"\
    , array_merge($right, $left));\n}\n", "  $digits = array_map('intval', str_split($x));\n\
    \  $i = $shift;\n  while($i--)\n    array_unshift($digits, array_pop($digits));\n\
    \  return implode('', $digits);\n}\n", "    $r = 0;\n    $s = strval($x);\n  \
    \  $len = strlen($s);\n    for ($i = 0; $i < $len; $i++) {\n        $idx = ($i\
    \ + $shift) % $len;\n        $r += $s[$i] * pow(10, $idx);\n    }\n    return\
    \ strval($r);\n}\n", "    $digits = str_split($x);\n    for ($i = 0; $i < $shift;\
    \ $i++) {\n        $c = array_pop($digits);\n        array_unshift($digits, $c);\n\
    \    }\n    return implode($digits);\n}\n", "  $y = strval($x);\n  $n = strlen($y);\n\
    \  if ($shift >= $n) {\n    return strrev($y);\n  }\n  return substr($y, $shift,\
    \ $n - $shift) . substr($y, 0, $shift);\n}\n", "    $digits = str_split($x);\n\
    \    $length = count($digits);\n    if ($shift > $length) {\n        return strrev($x);\n\
    \    }\n    for ($i = 0; $i < $shift; $i++) {\n        $last = array_pop($digits);\n\
    \        array_unshift($digits, $last);\n    }\n    return implode('', $digits);\n\
    }\n", "    if ($shift == 0) {\n        return $x;\n    }\n\n    $str = strval($x);\n\
    \    $len = strlen($str);\n    $shift = $shift % $len;\n\n    if ($shift == 0)\
    \ {\n        return $str;\n    }\n\n    return strrev(substr($str, 0, $shift))\
    \ . substr($str, $shift);\n}\n", "    $s = strval($x);\n    $len = strlen($s);\n\
    \    $a = array();\n    for ($i = 0; $i < $len; $i++) {\n        $a[$i] = $s[$i];\n\
    \    }\n    for ($i = 0; $i < $shift; $i++) {\n        $t = $a[$len - 1];\n  \
    \      for ($j = $len - 1; $j > 0; $j--) {\n            $a[$j] = $a[$j - 1];\n\
    \        }\n        $a[0] = $t;\n    }\n    return implode('', $a);\n}\n", " \
    \   // Number of digits.\n    $n = strlen($x);\n    // Shift right.\n    if ($shift\
    \ < $n) {\n        return substr($x, $shift, $n - $shift) . substr($x, 0, $shift);\n\
    \    }\n    // Shift left.\n    else {\n        return strrev($x);\n    }\n}",
  "    $x = (string) $x;\n    $d = strlen($x);\n    $shift = $shift % $d;\n    if\
    \ ($shift == 0) {\n        return $x;\n    }\n    if ($shift < 0) {\n        $shift\
    \ += $d;\n    }\n    return substr($x, $shift) . substr($x, 0, $shift);\n}\n",
  "    $x_str = \"$x\";\n    if (strlen($x_str) <= $shift)\n        return strrev($x_str);\n\
    \    return substr($x_str, -$shift, $shift) . substr($x_str, 0, -$shift);\n}",
  "  $x = strval($x);\n  $len = strlen($x);\n  $str1 = substr($x, $len - $shift);\n\
    \  $str2 = substr($x, 0, $len - $shift);\n  return $str1 . $str2;\n}\necho circular_shift(12,\
    \ 1) . \"\\n\";\necho circular_shift(12, 2) . \"\\n\";\necho circular_shift(1,\
    \ 2) . \"\\n\";\necho circular_shift(1234, 2) . \"\\n\";\necho circular_shift(1234,\
    \ 23) . \"\\n\";", "    $str = (string)$x;\n    $str_len = strlen($str);\n   \
    \ if ($shift > $str_len) {\n        $str = strrev($str);\n    } else {\n     \
    \   $str = substr($str, $shift) . substr($str, 0, $shift);\n    }\n    return\
    \ $str;\n}\n", "  $x = strval($x);\n  if ($shift >= strlen($x)) {\n    return\
    \ strrev($x);\n  }\n  $a = strrev(substr($x, $shift));\n  $b = substr($x, 0, $shift);\n\
    \  return $a . $b;\n}\n", "    $len = strlen($x);\n    if ($shift > $len) {\n\
    \        return strrev($x);\n    }\n    $x = substr($x, $len - $shift) . substr($x,\
    \ 0, $len - $shift);\n    return $x;\n}\n", "  $x_str = (string)$x;\n  $x_length\
    \ = strlen($x_str);\n  if ($shift >= $x_length) {\n    return strrev($x_str);\n\
    \  }\n  $x_first = substr($x_str, 0, $shift);\n  $x_last = substr($x_str, $shift);\n\
    \  return $x_last . $x_first;\n}\n", "  $digits = array_reverse(str_split($x));\n\
    \  $result = array_merge(array_slice($digits, $shift), array_slice($digits, 0,\
    \ $shift));\n  return implode('', $result);\n}\n", "    $new_x = \"\";\n    $x_str\
    \ = (string)$x;\n    $x_len = strlen($x_str);\n    if ($shift > $x_len) {\n  \
    \      for ($i = $x_len - 1; $i >= 0; $i--) {\n            $new_x .= $x_str[$i];\n\
    \        }\n    } else {\n        for ($i = $x_len - $shift; $i < $x_len; $i++)\
    \ {\n            $new_x .= $x_str[$i];\n        }\n        for ($i = 0; $i < $x_len\
    \ - $shift; $i++) {\n            $new_x .= $x_str[$i];\n        }\n    }\n   \
    \ return $new_x;\n}\n", "    // Use string conversion to get digits into an array.\n\
    \    $digits = str_split((string)$x);\n    $length = count($digits);\n    if ($shift\
    \ >= $length) {\n        return strrev($x);\n    }\n    for ($i = 0; $i < $shift;\
    \ $i++) {\n        array_push($digits, array_shift($digits));\n    }\n    return\
    \ implode('', $digits);\n}\n\n", "    $str = (string)$x;\n    $str .= $str;\n\
    \    $str = substr($str, $shift, strlen($str) - $shift);\n    $str = substr($str,\
    \ 0, strlen($str) / 2);\n    return $str;\n}\n", "  $digits = log10($x) + 1;\n\
    \  if ($shift >= $digits) {\n    return strrev($x);\n  } else {\n    $prefix =\
    \ floor($x / pow(10, $shift));\n    $suffix = $x % pow(10, $shift);\n    return\
    \ $suffix . $prefix;\n  }\n}\n", "    $return = \"\";\n    $size = 0;\n    while($x\
    \ != 0) {\n        $size++;\n        $return = ($x % 10) . $return;\n        $x\
    \ = floor($x / 10);\n    }\n    if($shift > $size) {\n        return strrev($return);\n\
    \    }\n    else {\n        $return = substr($return, -$shift) . substr($return,\
    \ 0, -$shift);\n        return $return;\n    }\n}", "  $digits = str_split($x);\n\
    \  $digits_reverse = array_reverse($digits);\n  return implode('', array_slice($digits_reverse,\
    \ 0, $shift)) . implode('', array_slice($digits_reverse, $shift));\n}\n", "  \
    \  $x_str = (string) $x;\n    $len = strlen($x_str);\n    if ($shift > $len)\n\
    \        return strrev($x_str);\n    $start = substr($x_str, 0, $len - $shift);\n\
    \    $end = substr($x_str, $len - $shift);\n    return $end . $start;\n}\n", " \
    \ $digits = str_split($x);\n  $digits_count = count($digits);\n  while ($shift--)\
    \ {\n    $first = array_shift($digits);\n    $digits[] = $first;\n  }\n  return\
    \ implode($digits);\n}\n", "    $len = strlen($x);\n    if ($shift > $len) {\n\
    \        return strrev($x);\n    }\n    $shifted = '';\n    $shifted .= substr($x,\
    \ $shift);\n    $shifted .= substr($x, 0, $shift);\n    return $shifted;\n}\n",
  "    $x_str = strval($x);\n    $x_len = strlen($x_str);\n    $x_rev = strrev($x_str);\n\
    \    if ($shift > $x_len) {\n        return $x_rev;\n    }\n    $first_part =\
    \ substr($x_str, 0, $x_len - $shift);\n    $second_part = substr($x_str, $x_len\
    \ - $shift);\n    return $second_part . $first_part;\n}\n", "    $len = strlen($x);\n\
    \    if ($shift >= $len) {\n        return strrev($x);\n    }\n    $str = (string)$x;\n\
    \    return substr($str, $shift) . substr($str, 0, $shift);\n}\n", "  $out = strval($x);\n\
    \  if ($shift >= strlen($out)) {\n    $out = strrev($out);\n  } else {\n    $out\
    \ = strrev(substr($out, 0, $shift)) . substr($out, $shift);\n  }\n  return $out;\n\
    }\n", "    $x = strval($x);\n    $length = strlen($x);\n    if ($shift > $length)\
    \ {\n        $x = strrev($x);\n    } else {\n        $x = substr($x, $shift) .\
    \ substr($x, 0, $shift);\n    }\n    return $x;\n}\n", "    $str_x = strval($x);\n\
    \    if (strlen($str_x) <= $shift) {\n        return strrev($str_x);\n    }\n\
    \    $first_n = substr($str_x, 0, $shift);\n    $last_n = substr($str_x, $shift);\n\
    \    return $last_n . $first_n;\n}", "    $x_str = (string)$x;\n    $x_len = strlen($x_str);\n\
    \    if ($shift == 0) {\n        return $x_str;\n    } elseif ($shift > $x_len)\
    \ {\n        return strrev($x_str);\n    } else {\n        $shift_str = substr($x_str,\
    \ $shift);\n        $x_str = substr($x_str, 0, $shift);\n        return $shift_str\
    \ . $x_str;\n    }\n}\n", "    $len = strlen($x);\n    if ($shift > $len) {\n\
    \        return strrev($x);\n    }\n    $right = substr($x, 0, $len - $shift);\n\
    \    $left = substr($x, $len - $shift);\n    return $left . $right;\n}\n", " \
    \ // convert integer to string\n  $str_x = (string)$x;\n  // find number of digits\n\
    \  $num_digits = strlen($str_x);\n  // if shift is greater than digits, reverse\
    \ the string\n  if ($shift > $num_digits) {\n    return strrev($str_x);\n  }\n\
    \  // split string into an array, shift the elements right by shift, then join\n\
    \  // the array to a string\n  $arr_x = str_split($str_x);\n  $right_array = array_splice($arr_x,\
    \ -$shift);\n  $left_array = array_splice($arr_x, 0);\n  $arr_x = array_merge($right_array,\
    \ $left_array);\n  return implode($arr_x);\n}\n", "    $digits = str_split($x);\n\
    \    $num_digits = count($digits);\n    if ($shift > $num_digits) {\n        return\
    \ implode('', array_reverse($digits));\n    }\n    $shifted = array_merge(array_slice($digits,\
    \ $shift), array_slice($digits, 0, $shift));\n    return implode('', $shifted);\n\
    }\n", "    $s = strval($x);\n    $n = strlen($s);\n    if ($shift >= $n) {\n \
    \       return strrev($s);\n    } else {\n        return substr($s, $shift) .\
    \ substr($s, 0, $shift);\n    }\n}\n", "    $string = strval($x);\n    $length\
    \ = strlen($string);\n    if ($shift >= $length) {\n        return strrev($string);\n\
    \    }\n    $shift %= $length;\n    $a = substr($string, $shift);\n    $b = substr($string,\
    \ 0, $shift);\n    return $a . $b;\n}\n", "    $str = strval($x);\n    $num_digits\
    \ = strlen($str);\n    if ($shift > $num_digits) {\n        $str = strrev($str);\n\
    \    } else {\n        $str = substr($str, $shift) . substr($str, 0, $shift);\n\
    \    }\n    return $str;\n}\n", "  $digits = str_split($x);\n  while ($shift >\
    \ 0) {\n    array_unshift($digits, array_pop($digits));\n    $shift--;\n  }\n\
    \  return implode('', $digits);\n}\n", "    $x = (string) $x;\n    $shift = (int)\
    \ $shift;\n    $result = '';\n    if ($shift > strlen($x)) {\n        $result\
    \ = strrev($x);\n    } else {\n        $result = substr($x, $shift) . substr($x,\
    \ 0, $shift);\n    }\n    return $result;\n}\n", "    $len = strlen($x);\n   \
    \ if ($shift >= $len) {\n        return strrev($x);\n    } else {\n        return\
    \ substr($x, $shift) . substr($x, 0, $shift);\n    }\n}\n", "  $digits = str_split($x);\n\
    \  $digits = array_merge(array_slice($digits, $shift),\n                     \
    \   array_slice($digits, 0, $shift));\n  return implode($digits);\n}\n", "   \
    \ $res = strval($x);\n    if ($shift > strlen($res)) {\n        return strrev($res);\n\
    \    } else {\n        $pieces = array();\n        for ($i = $shift; $i < strlen($res);\
    \ $i++) {\n            $pieces[] = $res[$i];\n        }\n        for ($i = 0;\
    \ $i < $shift; $i++) {\n            $pieces[] = $res[$i];\n        }\n       \
    \ return implode('', $pieces);\n    }\n}\n", "  $return = strrev(substr(strrev($x),\
    \ 0, $shift)) .\n            substr(strrev($x), $shift);\n  return $return;\n\
    }\n", "  $x = (string)$x; //convert to string\n\n  //if shift is bigger than the\
    \ digit return it reversed\n  if ($shift > strlen($x)) {\n    return strrev($x);\n\
    \  }\n\n  //explode string into array\n  $x = str_split($x);\n\n  //reverse the\
    \ array\n  $x = array_reverse($x);\n\n  //extract the first shift number of elements\
    \ from the array\n  $first = array_splice($x, 0, $shift);\n\n  //reverse the array\n\
    \  $x = array_reverse($x);\n\n  //merge the two arrays\n  $x = array_merge($x,\
    \ $first);\n\n  //implode the array into a string\n  $x = implode($x);\n\n  return\
    \ $x;\n}\n", "  $num_digits = strlen($x);\n  if ($shift > $num_digits) {\n   \
    \ return strrev($x);\n  }\n  $digits = str_split($x);\n  $shifted = array_slice($digits,\
    \ -$shift);\n  $shifted = array_merge($shifted, array_slice($digits, 0, $num_digits\
    \ - $shift));\n  return implode('', $shifted);\n}", "    $xlen = strlen($x);\n\
    \    if ($shift < 0) {\n        $shift = $xlen + $shift;\n    }\n    if ($shift\
    \ > $xlen) {\n        return strrev($x);\n    }\n    return substr($x, $shift)\
    \ . substr($x, 0, $shift);\n}\n", "    $digits = str_split($x);\n    $num_digits\
    \ = count($digits);\n    $lshift = $num_digits - $shift;\n    $split_point = $num_digits\
    \ - $lshift;\n    $first_chunk = array_slice($digits, 0, $split_point);\n    $second_chunk\
    \ = array_slice($digits, $split_point);\n    $output = array_merge($second_chunk,\
    \ $first_chunk);\n    return implode($output);\n}\n", "    if ($shift < 1) return\
    \ $x;\n    $str = strval($x);\n    $str = substr($str, -1) . substr($str, 0, -1);\n\
    \    return $shift == 1 ? $str : circular_shift($str, $shift - 1);\n}\n", "  \
    \  $s = strval($x);\n    $len = strlen($s);\n    if ($shift > $len)\n        return\
    \ strrev($s);\n    else\n        return substr($s, $len - $shift) . substr($s,\
    \ 0, $len - $shift);\n}\n", "    $x = (string) $x;\n    $shift = (int) $shift;\n\
    \    if ($shift < 1) {\n        return $x;\n    }\n    if ($shift >= strlen($x))\
    \ {\n        return strrev($x);\n    }\n    return substr($x, $shift, strlen($x)\
    \ - $shift) . substr($x, 0, $shift);\n}\n", "  // >>> is_integer(x)\n  // True\n\
    \  if (!is_integer($x)) {\n    // raise ValueError(\"x must be an integer. x={0}\"\
    .format(x))\n    throw new ValueError(\"x must be an integer. x=$x\");\n  }\n\
    \  // >>> is_integer(shift)\n  // True\n  if (!is_integer($shift)) {\n    // raise\
    \ ValueError(\"shift must be an integer. shift={0}\".format(shift))\n    throw\
    \ new ValueError(\"shift must be an integer. shift=$shift\");\n  }\n  // >>> x\
    \ = pow(10, 123)\n  // >>> circular_shift(x, 1)\n
  "    $y = strval($x);\n    $len = strlen($y);\n    if ($shift >= $len) {\n     \
    \   return strrev($y);\n    } else {\n        return substr($y, $shift) . substr($y,\
    \ 0, $shift);\n    }\n}\n", "    $x_str = \"$x\";\n    $x_str_len = strlen($x_str);\n\
    \    if ($shift > $x_str_len) {\n        $shift = $x_str_len;\n    }\n    $result\
    \ = substr($x_str, -$shift);\n    $result .= substr($x_str, 0, $x_str_len - $shift);\n\
    \    return $result;\n}\n", "  $result = (string) $x;\n  while ($shift-- > 0)\
    \ {\n    $last_digit = substr($result, -1);\n    $result = $last_digit . substr($result,\
    \ 0, -1);\n  }\n  return $result;\n}\n", "  $s = \"$x\";\n  while ($shift > 0)\
    \ {\n    $shift -= 1;\n    $s = substr($s, 1) . substr($s, 0, 1);\n  }\n  return\
    \ $s;\n}\n", "    $xstring = strval($x);\n    $length = strlen($xstring);\n  \
    \  if ($shift > $length) {\n        return strrev($xstring);\n    }\n    $s =\
    \ substr($xstring, 0, $shift);\n    $e = substr($xstring, $shift);\n    return\
    \ $e . $s;\n}\n", "  $d = strlen($x);\n  if ($shift >= $d) {\n    return strrev($x);\n\
    \  }\n  $ten_pow = 1;\n  for ($i = 0; $i < $d - $shift; $i++) {\n    $ten_pow\
    \ *= 10;\n  }\n  $div = (int)($x / $ten_pow);\n  $rem = $x % $ten_pow;\n  return\
    \ strval($rem) . strval($div);\n}\n\n$x = 1;\n$shift = 1;\n$result = circular_shift($x,\
    \ $shift);\necho \"result = $result\\n\";", "    $str = (string)$x;\n    $digits\
    \ = strlen($str);\n    $factor = 1;\n    while ($factor < $digits) {\n       \
    \ $factor *= 10;\n    }\n    if ($shift >= $digits) {\n        return strrev($str);\n\
    \    }\n    $part = $x % $factor;\n    return substr($str, $shift, $digits - $shift)\
    \ . strrev(substr($str, 0, $shift));\n}\n", "  $magnitude = 1;\n  while ($x >=\
    \ $magnitude * 10) {\n    $magnitude *= 10;\n  }\n  $x = $x % $magnitude;\n  $shift\
    \ = $shift % $magnitude;\n  if ($shift == 0) {\n    return \"$x\";\n  }\n  $x\
    \ = $x * 10 + $x / $magnitude;\n  return substr($x, $shift) . substr($x, 0, $shift);\n\
    }\n", "    $str = strval($x);\n    $str_len = strlen($str);\n    if ($shift >\
    \ $str_len) {\n        $str = strrev($str);\n    } else {\n        $str = substr($str,\
    \ $shift, $str_len - $shift) . substr($str, 0, $shift);\n    }\n    return $str;\n\
    }\n", "    $digits = str_split($x);\n    $n = count($digits);\n    if ($shift\
    \ >= $n) {\n        return implode(\"\", array_reverse($digits));\n    }\n   \
    \ $shifted = array_merge(array_slice($digits, $shift), array_slice($digits, 0,\
    \ $shift));\n    return implode(\"\", $shifted);\n}\n", "  $length = strlen($x);\n\
    \  if ($shift >= $length) {\n    $shift = $length;\n  }\n  if ($shift > 0) {\n\
    \    $x = $x . substr($x, 0, $shift);\n    $x = substr($x, -$length);\n  }\n \
    \ return $x;\n}\n", "    $n = strlen((string)$x);\n    if ($shift < 0) {\n   \
    \     $shift = $n + $shift;\n    }\n    if ($shift < $n) {\n        $x = ((int)substr((string)$x,\
    \ $shift)) * pow(10, $n - $shift) + (int)substr((string)$x, 0, $shift);\n    }\
    \ else {\n        $x = strrev((string)$x);\n    }\n    return (string)$x;\n}\n\
    echo circular_shift(12, -1);", "  if ($shift < 0) {\n    throw new InvalidArgumentException(\"\
    shift must be positive\");\n  }\n  $n = strlen($x);\n  if ($shift > $n) {\n  \
    \  return strrev($x);\n  }\n  return substr($x, $n - $shift) . substr($x, 0, $n\
    \ - $shift);\n}\n", "    $x = (string) $x;\n    $digits = strlen($x);\n    $mod_shift\
    \ = $shift % $digits;\n    return substr($x, $mod_shift) . substr($x, 0, $mod_shift);\n\
    }\n", "  $digits = str_split($x);\n  $shift = $shift % count($digits);\n  if ($shift\
    \ == 0) {\n    return $x;\n  }\n  return array_reduce(array_slice($digits, $shift),\
    \ function($acc, $val) { return $acc . $val; }, '') . array_reduce(array_slice($digits,\
    \ 0, $shift), function($acc, $val) { return $acc . $val; }, '');\n}\n", "    if\
    \ (is_int($x) && is_int($shift)) {\n        // change to string\n        $str\
    \ = strval($x);\n        $str_arr = str_split($str);\n        // reverse string\n\
    \        $str_rev = strrev($str);\n        $str_rev_arr = str_split($str_rev);\n\
    \        // shift right by shift\n        $shift_arr = array_slice($str_rev_arr,\
    \ 0, $shift);\n        $remaining_arr = array_slice($str_rev_arr, $shift);\n \
    \       $full_arr = array_merge($remaining_arr, $shift_arr);\n        // change\
    \ to string\n        $full_str = implode($full_arr);\n        // reverse the string\n\
    \        $full_str_rev = strrev($full_str);\n        return $full_str_rev;\n \
    \   } else {\n        return NULL;\n    }\n}\n", "    $len = strlen($x);\n   \
    \ if ($shift >= $len) {\n        return strrev($x);\n    } else {\n        return\
    \ substr($x, $shift, $len - $shift) . substr($x, 0, $shift);\n    }\n}", "   \
    \ $str = strval($x);\n    $length = strlen($str);\n    if ($shift >= $length)\
    \ {\n        return strrev($str);\n    } else {\n        return substr($str, $shift,\
    \ $length - $shift) . substr($str, 0, $shift);\n    }\n}\n", "    $digits = array();\n\
    \    $r = array();\n    $result = \"\";\n    while ($x > 0) {\n        $d = $x\
    \ % 10;\n        $digits[] = $d;\n        $x = floor($x / 10);\n    }\n    if\
    \ ($shift > count($digits)) {\n        for ($i = count($digits) - 1; $i >= 0;\
    \ $i--) {\n            $r[] = $digits[$i];\n        }\n    } else {\n        for\
    \ ($i = 0; $i < count($digits); $i++) {\n            $r[] = $digits[($i + $shift)\
    \ % count($digits)];\n        }\n    }\n    for ($i = 0; $i < count($r); $i++)\
    \ {\n        $result .= strval($r[$i]);\n    }\n    return $result;\n}\n", " \
    \ // Your code here\n  $digits = strlen($x);\n  $x_string = strval($x);\n  $x_array\
    \ = str_split($x_string);\n  $first_digit = array_shift($x_array);\n  array_push($x_array,\
    \ $first_digit);\n  $shifted_string = implode(\"\", $x_array);\n  return $shifted_string;\n\
    }\n", "    $num_digits = strlen($x);\n    if ($shift > $num_digits) {\n      \
    \  return strrev($x);\n    }\n    $first_digits = substr($x, 0, $num_digits -\
    \ $shift);\n    $last_digits = substr($x, $num_digits - $shift);\n    return $last_digits\
    \ . $first_digits;\n}\n", "  $shifted = $x;\n  $digits = (int) log10($x) + 1;\n\
    \  while ($shift-- > 0) {\n    $last = $shifted % 10;\n    $shifted = $last *\
    \ pow(10, $digits - 1) + (int) ($shifted / 10);\n  }\n  return (string) $shifted;\n\
    }\n", "    $tmp = array();\n    $str = (string)$x;\n    $n = strlen($str);\n \
    \   if ($shift > $n) {\n        return strrev($str);\n    }\n    for ($i = 0;\
    \ $i < $n; $i++) {\n        $new = ($i + $shift) % $n;\n        $tmp[$new] = $str[$i];\n\
    \    }\n    return implode('', $tmp);\n}\n", "    $x_str = \"$x\";\n    if (strlen($x_str)\
    \ <= $shift) {\n        return strrev($x_str);\n    } else {\n        return substr($x_str,\
    \ $shift) . substr($x_str, 0, $shift);\n    }\n}\n", "    $str = strval($x);\n\
    \    $str = strrev($str);\n    $shift = $shift % strlen($str);\n    $str = substr($str,\
    \ $shift) . substr($str, 0, $shift);\n    return strrev($str);\n}\n", "  $digits\
    \ = str_split($x);\n  $digits = array_reverse($digits);\n  $shift -= 1;\n  $digits[]\
    \ = array_shift($digits);\n  $digits = array_reverse($digits);\n  return implode($digits);\n\
    }\n", "  if ($shift == 0) {\n    return $x;\n  }\n  $digits = str_split($x);\n\
    \  while ($shift-- > 0) {\n    $last = array_pop($digits);\n    array_unshift($digits,\
    \ $last);\n  }\n  return implode('', $digits);\n}\n", "  $x = (string)$x;\n  $len\
    \ = strlen($x);\n  if ($shift > $len) {\n    return strrev($x);\n  }\n  $x = substr($x,\
    \ $shift) . substr($x, 0, $shift);\n  return $x;\n}\n\n", "  if ($shift == 0)\
    \ {\n    return strval($x);\n  }\n  $x_str = strval($x);\n  $len = strlen($x_str);\n\
    \  $shift = $shift % $len;\n  if ($shift == 0) {\n    return $x_str;\n  }\n  $result\
    \ = substr($x_str, $shift) . substr($x_str, 0, $shift);\n  return $result;\n}\n",
  "    $s = intval($x);\n    $t = $s;\n    $d = 0;\n\n    while ($t > 0) {\n     \
    \   $t = intval($t / 10);\n        $d++;\n    }\n\n    if ($shift > $d) {\n  \
    \      $shift = $d;\n    }\n\n    $e = pow(10, $d - $shift);\n    $result = ($s\
    \ % $e) * pow(10, $shift) + intval($s / $e);\n    return strval($result);\n}\n",
  "  $reversed = strrev($x);\n  if (strlen($reversed) > $shift) {\n    $rightmost\
    \ = substr($reversed, 0, $shift);\n    $leftmost = substr($reversed, $shift);\n\
    \    return strrev($leftmost . $rightmost);\n  } else {\n    return $reversed;\n\
    \  }\n}\n", "  if ($shift > strlen($x)) {\n    return strrev($x);\n  }\n  return\
    \ substr($x, $shift) . substr($x, 0, $shift);\n}\n", "  if ($shift == 0) return\
    \ (string)$x;\n  $x_string = (string)$x;\n  $length = strlen($x_string);\n  if\
    \ ($shift >= $length) return strrev($x_string);\n  $left = substr($x_string, 0,\
    \ $shift);\n  $right = substr($x_string, $shift);\n  return strrev($right).strrev($left);\n\
    }\n", "    $reversed = strrev($x);\n    $splitted = str_split($reversed, $shift);\n\
    \    return implode($splitted);\n}\n\necho circular_shift(12, 1), \"\\n\";\necho\
    \ circular_shift(12, 2), \"\\n\";\necho circular_shift(123, 3), \"\\n\";\necho\
    \ circular_shift(123, 5), \"\\n\";\necho circular_shift(123, 7), \"\\n\";\necho\
    \ circular_shift(123, 100), \"\\n\";\n", "  $digits = str_split($x);\n  $digits_count\
    \ = count($digits);\n  if ($shift > $digits_count) {\n    return implode('', array_reverse($digits));\n\
    \  }\n  $right = array_slice($digits, $shift);\n  $left = array_slice($digits,\
    \ 0, $shift);\n  return implode('', array_merge($right, $left));\n}\n", "    $digits\
    \ = str_split($x);\n    if ($shift > count($digits)) {\n        $digits = array_reverse($digits);\n\
    \    } else {\n        for ($i = 0; $i < $shift; $i++) {\n            $digit =\
    \ array_pop($digits);\n            array_unshift($digits, $digit);\n        }\n\
    \    }\n    return implode('', $digits);\n}\n", "    $chars = str_split($x);\n\
    \    $len = count($chars);\n    for ($i = 0; $i < $shift; $i++) {\n        array_unshift($chars,\
    \ array_pop($chars));\n    }\n    return implode($chars);\n}\n\nassert(circular_shift(12,\
    \ 1) == \"21\");\nassert(circular_shift(12, 2) == \"12\");\nassert(circular_shift(12,\
    \ 3) == \"21\");\nassert(circular_shift(12, 4) == \"12\");\nassert(circular_shift(12,\
    \ 5) == \"21\");\nassert(circular_shift(12, 6) == \"12\");\nassert(circular_shift(12,\
    \ 7) == \"21\");\nassert(circular_shift(12, 8) == \"12\");\n", "  // Shift 1 digit\
    \ to the right.\n  $right_shift = function($x) {\n    $digits = str_split($x);\n\
    \    $last_digit = array_pop($digits);\n    array_unshift($digits, $last_digit);\n\
    \    return implode('', $digits);\n  };\n\n  // Shift $shift digits to the right.\n\
    \  $digits = str_split($x);\n  $digits_count = count($digits);\n  $shift = ($shift\
    \ > $digits_count) ? $digits_count : $shift;\n  while ($shift--) {\n    $x = $right_shift($x);\n\
    \  }\n  return $x;\n}\n", "    if (is_null($x)) {\n        return null;\n    }\n\
    \    $x = strval($x);\n    $len = strlen($x);\n    if ($shift >= $len) {\n   \
    \     return strrev($x);\n    }\n    return substr($x, $len - $shift) . substr($x,\
    \ 0, $len - $shift);\n}\n", "    $str = (string)$x;\n    $digits = strlen($str);\n\
    \    $str .= $str;\n    $str = substr($str, $shift, $digits);\n    return $str;\n\
    }", "  $x = strval($x);\n  $len = strlen($x);\n  if ($shift >= $len) {\n    return\
    \ strrev($x);\n  }\n  $div = $len - $shift;\n  $x = substr($x, 0, $div).substr($x,\
    \ $div, $shift).substr($x, $shift, $div);\n  return $x;\n}\n", "    $n_digits\
    \ = strlen($x);\n    if ($shift >= $n_digits) {\n        return strrev($x);\n\
    \    }\n    $numerator = (int)$x * pow(10, $shift);\n    $denominator = pow(10,\
    \ $n_digits);\n    $result = ($numerator % $denominator) . ($numerator / $denominator);\n\
    \    return $result;\n}\n", "    $x_str = strval($x);\n    if ($shift >= strlen($x_str))\
    \ {\n        return strrev($x_str);\n    }\n    $tail = substr($x_str, 0, $shift);\n\
    \    $head = substr($x_str, $shift);\n    return $head . $tail;\n}\n", "  $x =\
    \ (string)$x;\n  $digits = strlen($x);\n  if ($shift >= $digits) {\n    return\
    \ strrev($x);\n  }\n  return substr($x, $shift, $digits - $shift) . substr($x,\
    \ 0, $shift);\n}", "    $numdigits = log10($x);\n    if ($shift >= $numdigits)\
    \ {\n        return strrev($x);\n    }\n    $tenspower = pow(10, $shift);\n  \
    \  $lefthalf = floor($x / $tenspower);\n    $righthalf = $x % $tenspower;\n  \
    \  return strval($righthalf) . strval($lefthalf);\n}\n", "  $digits = (string)$x;\n\
    \  $digits_length = strlen($digits);\n  if ($shift >= $digits_length) {\n    return\
    \ strrev($digits);\n  }\n  $left = substr($digits, 0, $shift);\n  $right = substr($digits,\
    \ $shift);\n  return $right . $left;\n}\n", "    $len = strlen((string)$x);\n\
    \    $shift = $shift % $len;\n    $str = (string)$x;\n    $str = substr($str,\
    \ $shift, $len - $shift) . substr($str, 0, $shift);\n    return $str;\n}\n", " \
    \   if ($shift > strlen($x))\n        return strrev($x);\n    else\n        return\
    \ substr($x, $shift, strlen($x) - $shift) . substr($x, 0, $shift);\n}\n", "  $s\
    \ = (string)$x;\n  if ($shift >= strlen($s)) {\n    return strrev($s);\n  }\n\
    \  $l = substr($s, 0, $shift);\n  $r = substr($s, $shift);\n  return $r . $l;\n\
    }\n", "  if ($shift > strlen($x)) {\n    return strrev($x);\n  }\n  return substr($x,\
    \ $shift) . substr($x, 0, $shift);\n}\n", "  $digits = str_split($x);\n  $num_digits\
    \ = count($digits);\n  if ($shift == 0) {\n    return $x;\n  } elseif ($shift\
    \ > $num_digits) {\n    return implode('', array_reverse($digits));\n  } else\
    \ {\n    $start = array_slice($digits, 0, $shift);\n    $end = array_slice($digits,\
    \ $shift);\n    return implode('', array_merge($end, $start));\n  }\n}\n", " \
    \ $r = strrev($x);\n  $r = str_pad($r, $shift, '0', STR_PAD_LEFT);\n  $r = substr($r,\
    \ 0, $shift);\n  return strrev($r);\n}\n\n$a = array(\n  array(1, 1),\n  array(12,\
    \ 1),\n  array(12, 2),\n  array(123, 1),\n  array(123, 2),\n  array(123, 3),\n\
    \  array(1234, 1),\n  array(1234, 2),\n  array(1234, 3),\n  array(1234, 4),\n\
    \  array(12345, 1),\n  array(12345, 2),\n  array(12345, 3),\n  array(12345, 4),\n\
    \  array(12345, 5),\n  array(123456, 1),\n  array(123456, 2),\n  array(123456,\
    \ 3),\n  array(123456, 4),\n  array(123456, 5),\n  array(123456, 6),\n  array(1234567,\
    \ 1),\n  array(1234567, 2),\n  array(1234567, 3),\n  array(1234567, 4),\n  array(1234567,\
    \ 5),\n  array(1234567, 6),\n  array(1234567, 7),\n  array(12345678, 1),\n  array(12345678,\
    \ 2),\n  array(12345678, 3),\n  array(12345678, 4),\n  array(12345678, 5),\n \
    \ array(12345678, 6),\n  array(12345678, 7),\n  array(12345678, 8),\n  array(123456789,\
    \ 1),\n  array(123456789, 2),\n  array(123456789, 3),\n  array(123456789, 4),\n\
    \  array(123456789, 5),\n  array(123456789, 6),\n  array(123456789, 7),\n  array(123456789,\
    \ 8),\n  array(123456789, 9),\n  array(1234567890, 1),\n  array", "  if ($shift\
    \ == 0) {\n    return $x;\n  }\n\n  $s = array();\n  $tmp = $x;\n  while ($tmp\
    \ > 0) {\n    $s[] = $tmp % 10;\n    $tmp = (int)($tmp / 10);\n  }\n\n  for ($i\
    \ = 0; $i < $shift; $i++) {\n    $digit = array_pop($s);\n    array_unshift($s,\
    \ $digit);\n  }\n\n  $d = count($s);\n  $reversed = '';\n  for ($i = 0; $i < $d;\
    \ $i++) {\n    $reversed .= strval($s[$i]);\n  }\n\n  return $reversed;\n}\n",
  "  if ($shift == 0) {\n    return strval($x);\n  }\n  $x_str = strval($x);\n  if\
    \ ($shift > strlen($x_str)) {\n    return strrev($x_str);\n  }\n  return substr($x_str,\
    \ $shift) . substr($x_str, 0, $shift);\n}\n", "    $res = strrev($x);\n    if\
    \ ($shift > strlen($x)) {\n        return $res;\n    } else {\n        return\
    \ substr($res, 0, $shift) . substr($res, $shift);\n    }\n}\n", "    $len = strlen($x);\n\
    \    if ($shift > $len) {\n        return strrev($x);\n    }\n    return substr($x,\
    \ $len - $shift) . substr($x, 0, $len - $shift);\n}", "    $arr = [];\n    $len\
    \ = strlen($x);\n    $div = $shift % $len;\n    $end = $len - $div;\n    $i =\
    \ 0;\n    while ($i < $end) {\n        $arr[] = $x[$i];\n        $i++;\n    }\n\
    \    while ($i < $len) {\n        $arr[] = $x[$i];\n        $i++;\n    }\n   \
    \ return implode('', $arr);\n}\n", "    $result = $x;\n    if ($shift > 0) {\n\
    \        $result = (string) $x;\n        for ($i = 0; $i < $shift; $i++) {\n \
    \           $result = substr($result, 1) . substr($result, 0, 1);\n        }\n\
    \    }\n    return $result;\n}\n", "    $reverse = strrev((string)$x);\n    if\
    \ ($shift >= strlen($reverse)) {\n        return $reverse;\n    }\n    $s1 = substr($reverse,\
    \ 0, $shift);\n    $s2 = substr($reverse, $shift);\n    return strrev($s2 . $s1);\n\
    }\necho circular_shift(12, 1) . \"\\n\";\necho circular_shift(12, 2) . \"\\n\"\
    ;\necho circular_shift(12, 3) . \"\\n\";\necho circular_shift(12, 4) . \"\\n\"\
    ;", "    $digits = array_reverse(str_split((string)$x));\n    $cut = array_slice($digits,\
    \ 0, $shift);\n    $digits = array_slice($digits, $shift);\n    $digits = array_merge($digits,\
    \ $cut);\n    return implode('', array_reverse($digits));\n}\n\nclass DblInt {\n\
    \    public $val;\n    public $neg;\n    public $dp;\n\n    public function __construct($int,\
    \ $dp = 0) {\n        $this->val = abs($int);\n        $this->neg = $int < 0;\n\
    \        $this->dp = $dp;\n    }\n\n    public function __toString() {\n     \
    \   return ($this->neg ? '-' : '') . $this->val;\n    }\n\n    public function\
    \ set_dp($dp) {\n        $this->dp = $dp;\n    }\n\n    public function digit_split()\
    \ {\n        $digits = str_split($this->val);\n        if ($this->dp > 0) {\n\
    \            $cut = array_slice($digits, 0, count($digits) - $this->dp);\n   \
    \         $digits = array_slice($digits, count($digits) - $this->dp);\n      \
    \      $digits = array_merge($digits, $cut);\n        }\n        return $digits;\n\
    \    }\n\n    public function circular_shift($shift) {\n        $digits = $this->digit_split();\n\
    \        $digits = array_reverse($digits);\n        $cut = array_slice($digits,\
    \ 0, $shift);\n        $digits = array_slice($digits, $shift);\n        $digits\
    \ = array_merge($digits, $cut);\n        $this->val = implode('', array_reverse($digits));\n\
    \        return $this;\n    }\n\n    public function add($di) {\n        $this->val\
    \ += $di->val;\n        return $this;\n    }\n\n    public function sub($di) {\n\
    \        $this->val -= $di->val;\n        return $this;\n    }\n\n    public function\
    \ mult($di) {", "    $len = strlen($x);\n    if ($shift == $len) {\n        return\
    \ $x;\n    }\n    else if ($shift > $len) {\n        return strrev($x);\n    }\n\
    \    else {\n        $lastDigits = substr($x, $len - $shift);\n        $firstDigits\
    \ = substr($x, 0, $len - $shift);\n        return $lastDigits . $firstDigits;\n\
    \    }\n}\n", "    if ($shift > 0) {\n        $x_str = strval($x);\n        $len\
    \ = strlen($x_str);\n        if ($shift > $len) {\n            return strrev($x_str);\n\
    \        }\n        else {\n            return substr($x_str, $len - $shift, $shift)\
    \ . substr($x_str, 0, $len - $shift);\n        }\n    }\n    else {\n        return\
    \ $x;\n    }\n}\n", "  $digits = strlen($x);\n  if ($shift >= $digits)\n    return\
    \ strrev($x);\n  $d = pow(10, $shift);\n  $r = $x % $d;\n  $first = substr($x,\
    \ 0, $digits - $shift);\n  $second = substr($x, $digits - $shift);\n  return $r.$first;\n\
    }\n", "    // does it make sense to shift more than the number of digits?\n  \
    \  $digits = strlen($x);\n    $remainder = $shift % $digits;\n    if ($remainder\
    \ < 0) {\n        $remainder += $digits;\n    }\n    if ($remainder == 0) {\n\
    \        return $x;\n    }\n    // make a string of the digits\n    $s = strval($x);\n\
    \    // make substrings of the digits before and after the shift\n    $a = substr($s,\
    \ 0, $remainder);\n    $b = substr($s, $remainder);\n    return $b . $a;\n}",
  "  // Convert $x to string and split into an array of digits.\n  $x_str = strval($x);\n\
    \  $arr = str_split($x_str);\n  $len = count($arr);\n  // Shift the array.\n \
    \ $arr = array_merge(array_slice($arr, $shift), array_slice($arr, 0, $shift));\n\
    \  // Convert to string.\n  $x_shifted = implode('', $arr);\n  return $x_shifted;\n\
    }\n", "    $x = (string) $x;\n    $len = strlen($x);\n    if ($shift >= $len)\
    \ {\n        return strrev($x);\n    }\n    $a = substr($x, 0, $len - $shift);\n\
    \    $b = substr($x, $len - $shift);\n    return $b . $a;\n}\n", "  $count = 1;\n\
    \  $copy = $x;\n  while ($copy / 10 >= 1) {\n    $copy /= 10;\n    $count++;\n\
    \  }\n  $copy = $x;\n  if ($shift > $count) {\n    $x = intval(strrev($x));\n\
    \  } else {\n    for ($i = 0; $i < $shift; $i++) {\n      $right = $copy % 10;\n\
    \      $copy = intval($copy / 10);\n      $copy += $right * pow(10, $count - 1);\n\
    \    }\n    $x = $copy;\n  }\n  return strval($x);\n}", "    if ($shift == 0)\
    \ {\n        return (string)$x;\n    }\n    $xstr = (string)$x;\n    if ($shift\
    \ >= strlen($xstr)) {\n        return strrev($xstr);\n    }\n    $pre_shift =\
    \ substr($xstr, -1*$shift);\n    $post_shift = substr($xstr, 0, -1*$shift);\n\
    \    return $pre_shift . $post_shift;\n}\n", "  $x = strval($x);\n  $len = strlen($x);\n\
    \  if ($shift >= $len) {\n    return strrev($x);\n  }\n  $left = substr($x, 0,\
    \ $len - $shift);\n  $right = substr($x, $len - $shift);\n  return $right . $left;\n\
    }\n", "  $x = (string)$x;\n  $len = strlen($x);\n  $shift = $shift % $len;\n \
    \ if ($shift === 0) {\n    return $x;\n  }\n  return substr($x, $shift, $len)\
    \ . substr($x, 0, $shift);\n}\n\n$num = 12345;\n$shift = 5;\n$result = circular_shift($num,\
    \ $shift);\necho \"The result of circuar shift $num by $shift is $result\\n\";",
  "    $s = $x;\n    while ($shift > 0) {\n        $right = $s % 10;\n        $s /=\
    \ 10;\n        $s = $right * pow(10, strlen((string)$s)) + $s;\n        $shift--;\n\
    \    }\n    return $s;\n}", "    $x = (string) $x;\n    $n = strlen($x);\n   \
    \ if ($shift > $n) {\n        return strrev($x);\n    }\n    $a = substr($x, 0,\
    \ $n - $shift);\n    $b = substr($x, $n - $shift);\n    return $b . $a;\n}", " \
    \   $str = (string)$x;\n    $rev = strrev($str);\n    if ($shift > strlen($str))\
    \ {\n        return $rev;\n    }\n    $prefix = substr($rev, 0, $shift);\n   \
    \ $suffix = substr($rev, $shift);\n    return strrev($suffix.$prefix);\n}\n",
  "    $s = (string)$x;\n    if (strlen($s) > $shift) {\n        $s = substr($s, $shift)\
    \ . substr($s, 0, $shift);\n    } else {\n        $s = strrev($s);\n    }\n  \
    \  return $s;\n}\n", "    $digits = strlen($x);\n    if ($shift > $digits) {\n\
    \        return strrev($x);\n    }\n    elseif ($shift == $digits) {\n       \
    \ return $x;\n    }\n    else {\n        $first = substr($x, 0, $shift);\n   \
    \     $last = substr($x, $shift);\n        return $last . $first;\n    }\n}\n",
  "    // Convert integer x to string.\n    $x_str = (string)$x;\n    // Get the digits\
    \ of x_str.\n    $digits = str_split($x_str);\n    // Shift digits right.\n  \
    \  $digits = array_pad($digits, count($digits) + $shift, '0');\n    $digits =\
    \ array_slice($digits, -count($digits), count($digits));\n    // Convert digits\
    \ back to an integer.\n    $x_shifted = intval(implode($digits));\n    // Return\
    \ the shifted integer.\n    return $x_shifted;\n}\n", "    $shifted = strval($x);\n\
    \    $digits = strlen($shifted);\n    if ($shift > $digits) {\n        $shifted\
    \ = strrev($shifted);\n    } else {\n        for ($i = 0; $i < $shift; $i++) {\n\
    \            $last = substr($shifted, -1);\n            $shifted = substr($shifted,\
    \ 0, -1);\n            $shifted = $last . $shifted;\n        }\n    }\n    return\
    \ $shifted;\n}\n", "    $len = strlen((string)$x);\n    if ($shift > $len) {\n\
    \        return strrev((string)$x);\n    }\n    $y = (string)$x;\n    $start =\
    \ substr($y, 0, $len - $shift);\n    $end = substr($y, $len - $shift);\n    return\
    \ $end . $start;\n}\n", "    $str = strval($x);\n    if ($shift > strlen($str))\
    \ {\n        return strrev($str);\n    }\n    $left_str = substr($str, 0, $shift);\n\
    \    $right_str = substr($str, $shift);\n    return $right_str . $left_str;\n\
    }\n", "    $str = (string)$x;\n    $n = strlen($str);\n    if ($shift >= $n) {\n\
    \        return strrev($str);\n    }\n    $a = strrev(substr($str, 0, $shift));\n\
    \    $b = substr($str, $shift);\n    return $a . $b;\n}\n", "  $x = abs($x);\n\
    \  $num_digits = strlen($x);\n  if ($shift > $num_digits) {\n    return strrev(\"\
    $x\");\n  }\n  $quotient = $x / pow(10, $shift);\n  $remainder = $x % pow(10,\
    \ $shift);\n  return \"$remainder$quotient\";\n}\n", "  $digits = str_split($x);\n\
    \  if (count($digits) <= $shift) {\n    $digits = array_reverse($digits);\n  }\
    \ else {\n    $tmp = array_slice($digits, 0, $shift);\n    $digits = array_slice($digits,\
    \ $shift);\n    $digits = array_merge($digits, $tmp);\n  }\n  return implode('',\
    \ $digits);\n}\n", "  $x = (string)$x;\n  $n = strlen($x);\n  if ($shift > $n)\
    \ {\n    return strrev($x);\n  } else {\n    return substr($x, $shift) . substr($x,\
    \ 0, $shift);\n  }\n}", "    $s = (string)$x;\n    $l = strlen($s);\n    if ($shift\
    \ > $l) {\n        return strrev($s);\n    }\n    $shift = $l - $shift;\n    return\
    \ substr($s, $shift) . substr($s, 0, $shift);\n}\n", "    // number of digits\
    \ in the string\n    $ndigits = strlen($x);\n    // if shift is more than the\
    \ digits, reverse string\n    if ($shift > $ndigits) {\n        return strrev($x);\n\
    \    }\n    // first part of the string\n    $a = substr($x, 0, $ndigits - $shift);\n\
    \    // second part of the string\n    $b = substr($x, $ndigits - $shift);\n \
    \   // concatenate the two parts\n    return $b . $a;\n}\n", "  if ($shift ==\
    \ 0) {\n    return $x;\n  }\n  $x_reversed = strrev($x);\n  if ($shift > strlen($x))\
    \ {\n    return $x_reversed;\n  }\n  return substr($x_reversed, 0, $shift) . substr($x_reversed,\
    \ $shift);\n}\n", "    if ($shift == 0) {\n        return (string)$x;\n    }\n\
    \n    $parts = str_split($x);\n    if ($shift >= count($parts)) {\n        return\
    \ implode('', array_reverse($parts));\n    }\n\n    $a = array_slice($parts, -$shift);\n\
    \    $b = array_slice($parts, 0, -$shift);\n    return implode('', array_merge($a,\
    \ $b));\n}\n", "  $digits = str_split($x);\n  while ($shift--) {\n    $last =\
    \ array_pop($digits);\n    array_unshift($digits, $last);\n  }\n  return implode($digits);\n\
    }\n\n$start = microtime(true);\n$answer = 0;\n$limit = pow(10, 6);\n$primes =\
    \ make_primes_list($limit);\n\nforeach ($primes as $p) {\n  if ($p < 10) continue;\n\
    \  $digits = str_split($p);\n  if (count($digits) == count(array_unique($digits)))\
    \ {\n    $circular = true;\n    for ($i = 0; $i < count($digits); $i++) {\n  \
    \    $n = circular_shift($p, $i);\n      if (!in_array($n, $primes)) {\n     \
    \   $circular = false;\n        break;\n      }\n    }\n    if ($circular) {\n\
    \      $answer++;\n    }\n  }\n}\n\necho \"Answer: $answer\\n\";\necho \"Elapsed\
    \ time: \" . (microtime(true) - $start) . \" seconds\\n\";", "    if ($shift ==\
    \ 0) return $x;\n    $digits = array();\n    for ($temp = $x; $temp > 0; $temp\
    \ /= 10)\n        $digits[] = $temp % 10;\n    if ($shift > count($digits))\n\
    \        return implode('', array_reverse($digits));\n    $shifted = array_slice($digits,\
    \ -$shift);\n    $digits = array_slice($digits, 0, count($digits) - $shift);\n\
    \    $digits = array_merge($shifted, $digits);\n    return implode('', $digits);\n\
    }\n\necho circular_shift(12, 1) . \"\\n\";\necho circular_shift(12, 2) . \"\\\
    n\";\necho circular_shift(12, 3) . \"\\n\";", "  $s = $x . '';\n  $len = strlen($s);\n\
    \  if ($shift >= $len) {\n    return strrev($s);\n  }\n  for ($i = 0; $i < $shift;\
    \ $i++) {\n    $c = $s[0];\n    $s = substr($s, 1) . $c;\n  }\n  return $s;\n\
    }\n", "  if ($shift > strlen($x)) {\n    return strrev($x);\n  } else {\n    return\
    \ substr($x, $shift) . substr($x, 0, $shift);\n  }\n}\n", "  if ($shift >= strlen($x))\
    \ {\n    return strrev($x);\n  }\n  else {\n    return substr($x, $shift) . substr($x,\
    \ 0, $shift);\n  }\n}\n", "    $digits = strlen((string)$x);\n    $string = str_split((string)$x);\n\
    \    for ($i = 0; $i < $shift; $i++) {\n        $last = array_pop($string);\n\
    \        array_unshift($string, $last);\n    }\n    return implode($string);\n\
    }\n", "    $str = (string)$x;\n    $len = strlen($str);\n    if ($shift > $len)\
    \ {\n        return strrev($str);\n    }\n    return substr($str, $shift, $len)\
    \ . substr($str, 0, $shift);\n}\n\necho circular_shift(12, 1) . \"\\n\";\necho\
    \ circular_shift(12, 2) . \"\\n\";\necho circular_shift(12, 3) . \"\\n\";\necho\
    \ circular_shift(12, 4) . \"\\n\";\necho circular_shift(12, 5) . \"\\n\";\n\n\
    echo \"\\n\";\n\necho circular_shift(123, 1) . \"\\n\";\necho circular_shift(123,\
    \ 2) . \"\\n\";\necho circular_shift(123, 3) . \"\\n\";\necho circular_shift(123,\
    \ 4) . \"\\n\";\necho circular_shift(123, 5) . \"\\n\";\n\necho \"\\n\";\n\necho\
    \ circular_shift(12345, 1) . \"\\n\";\necho circular_shift(12345, 2) . \"\\n\"\
    ;\necho circular_shift(12345, 3) . \"\\n\";\necho circular_shift(12345, 4) . \"\
    \\n\";\necho circular_shift(12345, 5) . \"\\n\";\n", "  $num_digits = strlen($x);\n\
    \  $mod = $shift % $num_digits;\n  if ($mod == 0) {\n    return $x;\n  }\n  $x\
    \ = str_split($x);\n  $temp = array_slice($x, $mod);\n  array_splice($x, $mod);\n\
    \  $x = array_merge($temp, $x);\n  return implode('', $x);\n}", "    $x = (string)\
    \ $x;\n    if ($shift >= strlen($x)) {\n        return strrev($x);\n    }\n  \
    \  return substr($x, $shift) . substr($x, 0, $shift);\n}\n", "    $x = strval($x);\n\
    \    $l = strlen($x);\n    if ($shift > $l) {\n        return strrev($x);\n  \
    \  }\n    return substr($x, $shift, $l - $shift) . substr($x, 0, $shift);\n}",
  "    $x = (string) $x;\n    $shift = (int) $shift;\n    $size = strlen($x);\n  \
    \  if ($shift > $size) {\n        return implode('', array_reverse(str_split($x)));\n\
    \    } else {\n        return substr($x, $shift, $size - $shift) . substr($x,\
    \ 0, $shift);\n    }\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
