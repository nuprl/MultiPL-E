name: HumanEval_59_largest_prime_factor
language: php
prompt: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not a\
  \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
  // 2\nfunction largest_prime_factor($n) {\n"
tests: "function candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n   \
  \ if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
  test();"
completions: ["  // Prime number checker.\n  // >>> is_prime(4)\n  // False\n  //\
    \ >>> is_prime(11)\n  // True\n  function is_prime($n) {\n    $divisor = 2;\n\
    \    while ($divisor < $n) {\n      if ($n % $divisor == 0) {\n        return\
    \ False;\n      }\n      $divisor++;\n    }\n    return True;\n  }\n\n  $divisor\
    \ = 2;\n  while ($divisor < $n) {\n    if ($n % $divisor == 0) {\n      $n = $n\
    \ / $divisor;\n      if (is_prime($n)) {\n        return $n;\n      }\n    }\n\
    \    $divisor++;\n  }\n  return $n;\n}\n", "  // FIXME: Implement\n  return 0;\n\
    }\n", "    $lpf = 2;\n    while ($n % $lpf == 0) {\n        $n /= $lpf;\n    }\n\
    \    $lpf = 3;\n    while ($n > 1) {\n        while ($n % $lpf == 0) {\n     \
    \       $n /= $lpf;\n        }\n        $lpf += 2;\n    }\n    return $lpf - 2;\n\
    }\n", "  for ($i = 2; $i < $n; $i++) {\n    if (is_prime($i) && $n % $i == 0)\
    \ {\n      $lpf = $i;\n    }\n  }\n  return $lpf;\n}\n", "    // write your code\
    \ here\n    $i = 2;\n    while($i * $i <= $n) {\n        if($n % $i == 0) {\n\
    \            $n /= $i;\n        } else {\n            $i++;\n        }\n    }\n\
    \    return $n;\n}\n\necho largest_prime_factor(2048);", "    $i = 2;\n    while\
    \ ($i * $i <= $n) {\n        if ($n % $i == 0) {\n            $n /= $i;\n    \
    \    } else {\n            $i++;\n        }\n    }\n    return $n;\n}\n\nprint\
    \ largest_prime_factor(13195);", "  for ($i = 2; $i < $n; $i++) {\n    if ($n\
    \ % $i == 0) {\n      return largest_prime_factor($n / $i);\n    }\n  }\n  return\
    \ $n;\n}\n\necho largest_prime_factor(600851475143) . \"\\n\";", "  $p = 2;\n\
    \  while ($n > 1) {\n    while ($n % $p == 0) {\n      $n /= $p;\n    }\n    $p++;\n\
    \  }\n  return $p - 1;\n}\n\nvar_dump(largest_prime_factor(13195));\nvar_dump(largest_prime_factor(2048));",
  "    $primes = array();\n    $divisor = 2;\n    while ($n > 1) {\n        while\
    \ ($n % $divisor == 0) {\n            $primes[] = $divisor;\n            $n /=\
    \ $divisor;\n        }\n        $divisor += ($divisor == 2) ? 1 : 2;\n    }\n\
    \    return max($primes);\n}\n", "  $i = 2;\n  while ($i * $i <= $n) {\n    if\
    \ ($n % $i == 0) {\n      $n /= $i;\n    } else {\n      $i++;\n    }\n  }\n \
    \ return $n;\n}\necho largest_prime_factor(600851475143).\"\\n\";", "    $p =\
    \ 2;\n    for (; $p <= $n; $p++) {\n        if ($n % $p == 0) {\n            break;\n\
    \        }\n    }\n    if ($p == $n) {\n        return $n;\n    }\n    return\
    \ largest_prime_factor($n / $p);\n}\n", "  // TODO\n}\n", "    $div = 2;\n   \
    \ while ($n > 1) {\n        while ($n % $div == 0) {\n            $n /= $div;\n\
    \        }\n        $div += 1;\n    }\n    return $div - 1;\n}\n", "    $i = 2;\n\
    \    while ($i * $i <= $n) {\n        if ($n % $i) {\n            $i += 1;\n \
    \       } else {\n            $n /= $i;\n        }\n    }\n    return $n;\n}\n",
  "    $primes = get_primes_less_than($n);\n    $largest = 2;\n    $num = $n;\n  \
    \  foreach ($primes as $prime) {\n        while ($num % $prime == 0) {\n     \
    \       $num /= $prime;\n            $largest = $prime;\n        }\n    }\n  \
    \  return $largest;\n}\n", "  // Find the largest prime factor.\n  $i = 2;\n \
    \ while ($i * $i <= $n) {\n    while ($n % $i == 0) {\n      $n = $n / $i;\n \
    \   }\n    $i = $i + 1;\n  }\n  return $n;\n}\n\nprint(\"\\nThe largest prime\
    \ factor of 13195 is \" . largest_prime_factor(13195));\nprint(\"\\nThe largest\
    \ prime factor of 2048 is \" . largest_prime_factor(2048));\nprint(\"\\n\");",
  "  $result = $n;\n  for ($i = 2; $i <= $n; $i++) {\n    if ($n % $i == 0) {\n  \
    \    $result = $i;\n      break;\n    }\n  }\n  return $result;\n}\n\necho largest_prime_factor(13195);\n\
    echo \"\\n\";\necho largest_prime_factor(2048);\necho \"\\n\";", "    // The largest\
    \ prime factor of a number is the number divided by the \n    // smallest prime\
    \ factor (which must also be the largest prime factor).\n    $smallest_prime_factor\
    \ = smallest_prime_factor($n);\n    return $n / $smallest_prime_factor;\n}\n",
  "  $d = 2;\n  while ($n > 1) {\n    if ($n % $d == 0) {\n      $f = $d;\n      while\
    \ ($n % $d == 0) {\n        $n /= $d;\n      }\n    }\n    $d += 1;\n  }\n  return\
    \ $f;\n}\n", "    for ($i = floor(sqrt($n)); $i > 1; $i--) {\n        if ($n %\
    \ $i == 0 && is_prime($i)) {\n            return $i;\n        }\n    }\n}\n",
  "  // your code goes here\n  $max = sqrt($n);\n  $i = 3;\n  $factors = [];\n  while($i\
    \ <= $max) {\n    if($n % $i == 0) {\n      $factors[] = $i;\n      $n = $n /\
    \ $i;\n      $max = sqrt($n);\n    } else {\n      $i++;\n    }\n  }\n  return\
    \ $n;\n}", "    $primes = array();\n    for ($i = 2; $i <= sqrt($n); $i++) {\n\
    \        if (is_prime($i)) {\n            if ($n % $i == 0) {\n              \
    \  $primes[] = $i;\n            }\n        }\n    }\n    return $primes[count($primes)\
    \ - 1];\n}\n", "    for ($i = 2; $i <= sqrt($n); $i++) {\n        if ($n % $i\
    \ == 0) {\n            $factor = largest_prime_factor($n / $i);\n            if\
    \ ($factor > $i) {\n                return $factor;\n            } else {\n  \
    \              return $i;\n            }\n        }\n    }\n    return $n;\n}\n",
  "  $max_divisor = floor(sqrt($n));\n  for ($i = $max_divisor; $i > 1; $i--) {\n\
    \    if ($n % $i == 0) {\n      $n /= $i;\n      $max_divisor = floor(sqrt($n));\n\
    \      $i = $max_divisor + 1;\n    }\n  }\n  return $n;\n}\necho largest_prime_factor(600851475143)\
    \ . \"\\n\";", "    for ($i = 2; $i < $n; $i++) {\n        if ($n % $i == 0) {\n\
    \            $n /= $i;\n            $i--;\n        }\n    }\n    return $n;\n\
    }\n", "    $i = 2;\n    while($i < sqrt($n)) {\n        if($n % $i == 0) {\n \
    \           $n /= $i;\n        } else {\n            $i++;\n        }\n    }\n\
    \    return $n;\n}\n", "  for ($m = floor(sqrt($n)); $m > 1; $m--) {\n    if (0\
    \ == $n % $m) {\n      if (is_prime($m)) {\n        return $m;\n      }\n    }\n\
    \  }\n  return $n;\n}\n", "  // PHP doesn't support do-while loops, so we need\
    \ a flag.\n  $first = true;\n  $divisor = $n - 1;\n  while ($first || $n % $divisor\
    \ !== 0) {\n    if ($first) {\n      $first = false;\n    }\n    $divisor--;\n\
    \  }\n  // The loop found a divisor, now do a primality test on it.\n  $prime\
    \ = true;\n  $test = 2;\n  while ($prime && $test < $divisor) {\n    if ($divisor\
    \ % $test === 0) {\n      $prime = false;\n    }\n    $test++;\n  }\n  if ($prime)\
    \ {\n    return $divisor;\n  } else {\n    return largest_prime_factor($divisor);\n\
    \  }\n}\n", "    $factors = get_factors($n);\n    $prime_factors = array_filter($factors,\
    \ 'is_prime');\n    return max($prime_factors);\n}\n", "    $i = 2;\n    $isPrime\
    \ = false;\n    if ($n <= 3) {\n        return $n;\n    }\n    while ($n >= 2)\
    \ {\n        if ($n % $i == 0) {\n            $n = $n / $i;\n            $isPrime\
    \ = true;\n        } else {\n            $i++;\n        }\n    }\n    return $i;\n\
    }\n", "    $m = $n;\n    $i = 2;\n    while ($i <= $m) {\n        if ($m % $i\
    \ == 0) {\n            $m /= $i;\n        } else {\n            $i++;\n      \
    \  }\n    }\n    return $i;\n}\necho largest_prime_factor(13195) . \"\\n\";\n\
    echo largest_prime_factor(2048) . \"\\n\";\necho largest_prime_factor(600851475143)\
    \ . \"\\n\";", "  if ($n < 4) {\n    return $n;\n  }\n  $factor = 2;\n  while\
    \ ($n > 1) {\n    if ($n % $factor == 0) {\n      $n /= $factor;\n    } else {\n\
    \      $factor++;\n    }\n  }\n  return $factor;\n}\n", "    $i = 2;\n    while\
    \ ($i <= $n) {\n        if ($n % $i == 0) {\n            $n /= $i;\n        }\
    \ else {\n            $i++;\n        }\n    }\n    return $i;\n}\necho largest_prime_factor(600851475143)\
    \ . \"\\n\";", "  for ($i = 2; $i < $n; $i++) {\n    if ($n % $i == 0) {\n   \
    \   return largest_prime_factor($n / $i);\n    }\n  }\n  return $n;\n}\n", " \
    \ $factor = 2;\n  while ($n > 1) {\n    if ($n % $factor == 0) {\n      $n /=\
    \ $factor;\n    } else {\n      $factor++;\n    }\n  }\n  return $factor;\n}\n\
    \necho largest_prime_factor(600851475143) . \"\\n\";", "    $largest_factor =\
    \ 1;\n    $i = 2;\n    while ($i * $i <= $n) {\n        if ($n % $i == 0) {\n\
    \            $largest_factor = $i;\n            $n /= $i;\n        } else {\n\
    \            $i++;\n        }\n    }\n    if ($n > 1) {\n        $largest_factor\
    \ = $n;\n    }\n    return $largest_factor;\n}\n\necho largest_prime_factor(600851475143)\
    \ . \"\\n\";", "  $factors = array();\n  // get factors\n  $n_sqrt = sqrt($n);\n\
    \  for ($i = 2; $i <= $n_sqrt; $i++) {\n    if (fmod($n, $i) == 0) {\n      $factors[]\
    \ = $i;\n    }\n  }\n  // remove non-primes\n  for ($i = 0; $i < count($factors);\
    \ $i++) {\n    for ($j = $i + 1; $j < count($factors); $j++) {\n      if (fmod($factors[$j],\
    \ $factors[$i]) == 0) {\n        array_splice($factors, $j, 1);\n        $j--;\n\
    \      }\n    }\n  }\n  // get largest\n  $largest = 2;\n  for ($i = 0; $i < count($factors);\
    \ $i++) {\n    if ($factors[$i] > $largest) {\n      $largest = $factors[$i];\n\
    \    }\n  }\n  return $largest;\n}\n", "    $max = 0;\n    $factors = factorize($n);\n\
    \    foreach ($factors as $k => $v) {\n        if ($v == 1) {\n            $max\
    \ = $k;\n        }\n    }\n    return $max;\n}\n", "    $factors = [];\n    for\
    \ ($i = 2; $i < $n; $i++) {\n        if ($n % $i == 0) {\n            array_push($factors,\
    \ $i);\n        }\n    }\n    $primes = array_filter($factors, function($f) {\n\
    \        return is_prime($f);\n    });\n    return max($primes);\n}\n", "    //\
    \ TODO\n}", "  for ($i = 2; $i < $n; $i++) {\n    if ($n % $i == 0) {\n      $n\
    \ /= $i;\n      $i--;\n    }\n  }\n  return $n;\n}\n\nassert(largest_prime_factor(13195)\
    \ == 29);\nassert(largest_prime_factor(2048) == 2);\necho largest_prime_factor(600851475143);",
  "    // Find all prime factors of n.\n    $prime_factors = prime_factors($n);\n\
    \    // Return the largest prime factor.\n    return max($prime_factors);\n}\n",
  "    $largest = null;\n    $candidate = 3;\n\n    while ($n != 1) {\n        while\
    \ ($n % $candidate == 0) {\n            $largest = $candidate;\n            $n\
    \ /= $candidate;\n        }\n        $candidate += 2;\n    }\n\n    return $largest;\n\
    }\n\nassert(29 == largest_prime_factor(13195));\nassert(2 == largest_prime_factor(2048));\n\
    \necho largest_prime_factor(600851475143) . \"\\n\";", "    $largest_prime_factor\
    \ = 1;\n    $divisor = 2;\n    while ($n > 1) {\n        while ($n % $divisor\
    \ == 0) {\n            $largest_prime_factor = $divisor;\n            $n /= $divisor;\n\
    \        }\n        if ($divisor == 2) {\n            $divisor++;\n        } else\
    \ {\n            $divisor += 2;\n        }\n    }\n    return $largest_prime_factor;\n\
    }\necho largest_prime_factor(13195) . \"\\n\";\necho largest_prime_factor(2048)\
    \ . \"\\n\";\necho largest_prime_factor(600851475143) . \"\\n\";\n", "  $prime_factor\
    \ = 2;\n  $largest_prime_factor = 1;\n  $limit = sqrt($n);\n  while ($prime_factor\
    \ <= $limit) {\n    if ($n % $prime_factor == 0) {\n      $n /= $prime_factor;\n\
    \      $largest_prime_factor = $prime_factor;\n    } else {\n      $prime_factor++;\n\
    \    }\n  }\n  // $n must be the largest prime factor (and prime) at this point.\n\
    \  if ($n > $largest_prime_factor) {\n    $largest_prime_factor = $n;\n  }\n \
    \ return $largest_prime_factor;\n}\n\nlargest_prime_factor(600851475143);", " \
    \ $factor = 2;\n  while ($n != 1) {\n    if ($n % $factor == 0) {\n      $n /=\
    \ $factor;\n    } else {\n      $factor++;\n    }\n  }\n  return $factor;\n}\n\
    \nprintf(\"%d\\n\", largest_prime_factor(13195));\nprintf(\"%d\\n\", largest_prime_factor(2048));\n\
    printf(\"%d\\n\", largest_prime_factor(600851475143));", "    $div = 2;\n    while\
    \ ($n > 1) {\n        while ($n % $div == 0) {\n            $n /= $div;\n    \
    \    }\n        $div++;\n    }\n    return $div - 1;\n}\n", "    for ($i = 2;\
    \ $i < $n; $i++) {\n        if ($n % $i == 0) {\n            return largest_prime_factor($n\
    \ / $i);\n        }\n    }\n    return $n;\n}\necho largest_prime_factor(2048);",
  "    $m = floor(sqrt($n));\n    for ($i = 2; $i <= $m; $i++) {\n        if ($n %\
    \ $i == 0) {\n            return max(largest_prime_factor($n / $i), largest_prime_factor($i));\n\
    \        }\n    }\n    return $n;\n}\n", "  $divisor = 2;\n  while ($n > 1) {\n\
    \    while ($n % $divisor === 0) {\n      $n /= $divisor;\n    }\n    $divisor++;\n\
    \  }\n  return $divisor - 1;\n}\n\necho largest_prime_factor(13195) . \"\\n\"\
    ;\necho largest_prime_factor(2048) . \"\\n\";", "    $max_prime = 1;\n    $i =\
    \ 2;\n    while ($i * $i <= $n) {\n        if ($n % $i == 0) {\n            $max_prime\
    \ = $i;\n            $n = $n / $i;\n        } else {\n            $i += 1;\n \
    \       }\n    }\n    if ($n > $max_prime) {\n        $max_prime = $n;\n    }\n\
    \    return $max_prime;\n}\n\n$n = 100;\n$result = largest_prime_factor($n);\n\
    print \"The largest prime factor of $n is $result.\\n\";", "  for ($i = 2; $i\
    \ < $n; $i++) {\n    if ($n % $i == 0) {\n      return largest_prime_factor($n\
    \ / $i);\n    }\n  }\n  return $n;\n}\n\necho largest_prime_factor(600851475143);",
  "  $factor = 2;\n  while ($n > 1) {\n    if ($n % $factor == 0) {\n      $n /= $factor;\n\
    \    } else {\n      $factor++;\n    }\n  }\n  return $factor;\n}\n\nassert_options(ASSERT_BAIL,\
    \ 1);\nassert(largest_prime_factor(13195) == 29);\nassert(largest_prime_factor(2048)\
    \ == 2);\n\n$start = microtime(true);\necho \"Result: \" . largest_prime_factor(600851475143)\
    \ . \"\\n\";\n$end = microtime(true);\necho \"Time: \" . ($end - $start) . \"\\\
    n\";", "  $c = 0;\n  $lpf = 0;\n  for ($i = 2; $i < $n; $i++) {\n    if ($n %\
    \ $i == 0) {\n      if (is_prime($i)) {\n        $lpf = $i;\n      }\n    }\n\
    \  }\n  return $lpf;\n}\n", "  // The largest prime factor must be less than the\
    \ square root of $n.\n  $max = sqrt($n);\n  // If $n is even, then 2 is a factor,\
    \ but 2 is prime.\n  if ($n % 2 == 0) {\n    $result = 2;\n    $n /= 2;\n  }\n\
    \  else {\n    $result = 1;\n  }\n  // $f is a candidate prime factor.\n  for\
    \ ($f = 3; $f <= $max; $f += 2) {\n    // If $f is a factor, then it's prime.\n\
    \    if ($n % $f == 0) {\n      $result = $f;\n      $n /= $f;\n    }\n  }\n \
    \ // $n is now the largest prime factor of the original $n.\n  return $n;\n}\n",
  "    // prime factorization of n\n    $prime_factors = array();\n    for ($factor\
    \ = 2; $factor <= $n; $factor++) {\n        if ($n % $factor === 0) {\n      \
    \      $prime_factors[] = $factor;\n            $n /= $factor;\n        }\n  \
    \  }\n    return max($prime_factors);\n}\n\necho largest_prime_factor(600851475143),\
    \ \"\\n\";", "    $factor = 0;\n    $divisor = 2;\n    while ($n > 1) {\n    \
    \    while ($n % $divisor == 0) {\n            $factor = $divisor;\n         \
    \   $n /= $divisor;\n        }\n        $divisor++;\n    }\n    return $factor;\n\
    }\n", "    $prime = 2;\n    while($n % $prime != 0) {\n        $prime += 1;\n\
    \    }\n    if($n == $prime) {\n        return $n;\n    }\n    return largest_prime_factor($n\
    \ / $prime);\n}\n\n$ans = largest_prime_factor(600851475143);\nprint(\"Answer:\
    \ $ans\\n\");", "    $factors = [];\n    while ($n % 2 == 0) {\n        $factors[]\
    \ = 2;\n        $n /= 2;\n    }\n    for ($i = 3; $i <= sqrt($n); $i += 2) {\n\
    \        while ($n % $i == 0) {\n            $factors[] = $i;\n            $n\
    \ /= $i;\n        }\n    }\n    if ($n > 2) {\n        $factors[] = $n;\n    }\n\
    \    return $factors[count($factors) - 1];\n}\n\necho largest_prime_factor(600851475143);",
  "  $div = 2;\n  while ($n > 1) {\n    if ($n % $div == 0) {\n      $n /= $div;\n\
    \    } else {\n      $div++;\n    }\n  }\n  return $div;\n}\n\n$n = largest_prime_factor(13195);\n\
    echo \"Test 1: expected 29, got $n\\n\";\n$n = largest_prime_factor(2048);\necho\
    \ \"Test 2: expected 2, got $n\\n\";", "  $n = abs($n);\n  $factor = 0;\n  for\
    \ ($i = 3; $i < sqrt($n); $i += 2) {\n    if ($n % $i == 0) {\n      $factor =\
    \ $i;\n      break;\n    }\n  }\n  if ($factor > 0) {\n    return largest_prime_factor($n\
    \ / $factor);\n  } else {\n    return $n;\n  }\n}\n", "  $prime_factors = array();\n\
    \  $primes = array();\n  $sqrt_n = sqrt($n);\n  for ($i = 2; $i <= $sqrt_n; $i++)\
    \ {\n    if (is_prime($i, $primes)) {\n      $primes[] = $i;\n      if ($n % $i\
    \ == 0) {\n        $prime_factors[] = $i;\n      }\n    }\n  }\n  return max($prime_factors);\n\
    }\n", "  $i = 2;\n  while ($i < $n) {\n    if ($n % $i == 0) {\n      $n = $n\
    \ / $i;\n    } else {\n      $i++;\n    }\n  }\n  return $n;\n}", "  $i = 2;\n\
    \  while ($i * $i <= $n) {\n    if ($n % $i == 0) {\n      $n /= $i;\n    } else\
    \ {\n      $i++;\n    }\n  }\n  return $n;\n}\n\necho largest_prime_factor(13195)\
    \ . \"\\n\";\necho largest_prime_factor(2048) . \"\\n\";", "  $l = largest_prime_factor_helper($n);\n\
    \  return $l;\n}\n", "    $numPrimes = 0;\n    for ($i = 1; $i <= $n; $i++) {\n\
    \        if (is_prime($i)) {\n            $primeFactors[$numPrimes] = $i;\n  \
    \          $numPrimes++;\n        }\n    }\n    $numDivisors = 0;\n    for ($i\
    \ = 1; $i <= $n; $i++) {\n        if (is_divisor($n, $i)) {\n            $divisors[$numDivisors]\
    \ = $i;\n            $numDivisors++;\n        }\n    }\n    for ($i = 0; $i <\
    \ $numDivisors; $i++) {\n        for ($j = 0; $j < $numPrimes; $j++) {\n     \
    \       if ($divisors[$i] == $primeFactors[$j]) {\n                $largestPrimeFactor\
    \ = $divisors[$i];\n            }\n        }\n    }\n    return $largestPrimeFactor;\n\
    }\n", "    $largest = 2;\n    while ($n > 1) {\n        if ($n % $largest == 0)\
    \ {\n            $n /= $largest;\n        } else {\n            $largest += ($largest\
    \ == 2) ? 1 : 2;\n        }\n    }\n    return $largest;\n}\n\nvar_dump(largest_prime_factor(13195));\n\
    var_dump(largest_prime_factor(2048));", "    $factor = 2;\n    while ($n % $factor\
    \ != 0) {\n        $factor++;\n    }\n    if ($n == $factor) {\n        return\
    \ $n;\n    } else {\n        return largest_prime_factor($n / $factor);\n    }\n\
    }\n\necho largest_prime_factor(13195);", "    $i = 2;\n    while ($i * $i <= $n)\
    \ {\n        if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n  \
    \          $i++;\n        }\n    }\n    return $n;\n}", "    for ($i = 2; $i <=\
    \ $n; $i++) {\n        if ($n % $i == 0) {\n            $n /= $i;\n          \
    \  $i--;\n        }\n    }\n    return $i;\n}\n", "    $i = 2;\n    while ($i\
    \ * $i <= $n) {\n        if ($n % $i == 0) {\n            $n /= $i;\n        }\
    \ else {\n            $i++;\n        }\n    }\n    return $n;\n}\n", "    $largest_factor\
    \ = 1;\n    $i = 2;\n    while ($i <= $n) {\n        if (fmod($n, $i) == 0) {\n\
    \            $n = $n / $i;\n            $largest_factor = $i;\n        } else\
    \ {\n            $i++;\n        }\n    }\n    return $largest_factor;\n}", " \
    \ for ($i = 2; $i <= $n / 2; $i++) {\n    if ($n % $i == 0) {\n      return largest_prime_factor($n\
    \ / $i);\n    }\n  }\n  return $n;\n}\n", "    $primes = primes_less_than($n);\n\
    \    for ($i = count($primes) - 1; $i >= 0; $i--) {\n        if ($n % $primes[$i]\
    \ == 0) {\n            return $primes[$i];\n        }\n    }\n}\n", "    for ($i\
    \ = 2; $i <= $n / 2; $i++) {\n        if ($n % $i == 0) {\n            return\
    \ largest_prime_factor($n / $i);\n        }\n    }\n    return $n;\n}\n\necho\
    \ largest_prime_factor(600851475143);\necho \"\\n\";", "  $i = 2;\n  while ($i\
    \ <= sqrt($n)) {\n    while ($n % $i == 0) {\n      $n /= $i;\n    }\n    $i++;\n\
    \  }\n  return $n;\n}\n\necho largest_prime_factor(600851475143) . \"\\n\";",
  "    $factors = array();\n    $t = 2;\n    while ($n > 1) {\n        while ($n %\
    \ $t == 0) {\n            $factors[] = $t;\n            $n /= $t;\n        }\n\
    \        $t++;\n    }\n    $largest = max($factors);\n    return $largest;\n}\n\
    echo largest_prime_factor(600851475143);", "  for ($factor = 2; $factor * $factor\
    \ <= $n; $factor++) {\n    if ($n % $factor == 0) {\n      $n /= $factor;\n  \
    \    $factor--;\n    }\n  }\n  return $n;\n}\n\necho largest_prime_factor(13195)\
    \ . \"\\n\";\necho largest_prime_factor(2048) . \"\\n\";", "    $smallest_prime_factor\
    \ = 2;\n    $largest_prime_factor = 1;\n    while ($n > 1) {\n        if ($n %\
    \ $smallest_prime_factor == 0) {\n            $largest_prime_factor = $smallest_prime_factor;\n\
    \            $n /= $smallest_prime_factor;\n        } else {\n            ++$smallest_prime_factor;\n\
    \        }\n    }\n    return $largest_prime_factor;\n}\n", "  $last = $n;\n \
    \ for ($i = 2; $i <= $last; $i++) {\n    if ($n % $i == 0) {\n      $last = $n\
    \ / $i;\n      $n = $last;\n    }\n  }\n  return $last;\n}\n\necho largest_prime_factor(13195)\
    \ . \"\\n\";\necho largest_prime_factor(2048) . \"\\n\";", "    for ($i = 2; $i\
    \ <= $n; $i++) {\n        if ($n % $i == 0) {\n            $n /= $i;\n       \
    \     $i--;\n        }\n    }\n    return $i;\n}", "  $largest_prime_factor =\
    \ null;\n  $primes = primes(intval(sqrt($n)));\n  foreach ($primes as $p) {\n\
    \    if ($n % $p == 0) {\n      $largest_prime_factor = $p;\n    }\n  }\n  return\
    \ $largest_prime_factor;\n}", "    // Find the factors of n.\n    $factors = array();\n\
    \    for ($i = 2; $i <= sqrt($n); $i++) {\n        while ($n % $i == 0) {\n  \
    \          $factors[] = $i;\n            $n /= $i;\n        }\n    }\n    // If\
    \ we haven't actually factored n, just add it.\n    if ($n > 1) {\n        $factors[]\
    \ = $n;\n    }\n    // Since we're only interested in the largest prime factor,\
    \ we can\n    // simply return the last prime.\n    return end($factors);\n}\n",
  "    $prime = false;\n    $factor = $n;\n    while (!$prime) {\n        $factor--;\n\
    \        $prime = is_prime($factor);\n    }\n    return $factor;\n}\n", "    $i\
    \ = 2;\n    while ($i * $i <= $n) {\n        if ($n % $i) {\n            $i +=\
    \ 1;\n        } else {\n            $n /= $i;\n        }\n    }\n    return $n;\n\
    }\n", "    if ($n <= 1) return 0;\n    $i = 2;\n    while ($i < $n) {\n      \
    \  if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n            $i++;\n\
    \        }\n    }\n    return $n;\n}\n", "  $largest_prime_factor = 1;\n  $i =\
    \ 2;\n  while ($i * $i <= $n) {\n    while ($n % $i == 0) {\n      $largest_prime_factor\
    \ = $i;\n      $n /= $i;\n    }\n    $i++;\n  }\n  return $largest_prime_factor;\n\
    }\n\n$result = largest_prime_factor(600851475143);\nprintf(\"Largest prime factor\
    \ of 600851475143 is %d.\\n\", $result);", "    if ($n == 1) return 1;\n    for\
    \ ($i = 2; $i <= $n; $i++) {\n        if ($n % $i == 0) {\n            return\
    \ max($i, largest_prime_factor($n / $i));\n        }\n    }\n}", "  // If there's\
    \ a prime factor 2, it's the largest\n  if ($n % 2 == 0) {\n    $n /= 2;\n   \
    \ // If $n is even, the largest prime factor is 2.\n    if ($n == 1) {\n     \
    \ return 2;\n    }\n  }\n  // If $n is odd, we start at 3\n  $factor = 3;\n  //\
    \ Only increment by 2 as we don't need to check even numbers.\n  while ($n !=\
    \ 1) {\n    if ($n % $factor == 0) {\n      $n /= $factor;\n    }\n    else {\n\
    \      $factor += 2;\n    }\n  }\n  return $factor;\n}\n\necho largest_prime_factor(13195);\n\
    echo \"\\n\";\necho largest_prime_factor(2048);\necho \"\\n\";\necho largest_prime_factor(600851475143);\n\
    echo \"\\n\";", "    $p = 2;\n    $factor = 0;\n    while ($n != 1) {\n      \
    \  if ($n % $p == 0) {\n            $factor = $p;\n            $n /= $p;\n   \
    \     } else {\n            $p += 1;\n        }\n    }\n    return $factor;\n}",
  "    // Start with the largest possible prime factor, floor(sqrt(n))\n    $prime\
    \ = floor(sqrt($n));\n    // Decrement through odd numbers only\n    while ($prime\
    \ > 1) {\n        $prime -= 2;\n        // If the current number is a factor and\
    \ is prime, we're done\n        if ($n % $prime == 0 && is_prime($prime))\n  \
    \          return $prime;\n    }\n}\n", "  // TODO\n}\n", "  $p = $n;\n  for ($i\
    \ = 2; $i <= sqrt($n); $i++) {\n    if ($p % $i == 0) {\n      while ($p % $i\
    \ == 0) {\n        $p /= $i;\n      }\n    }\n  }\n  return $p;\n}\n", "    for\
    \ ($i = 2; $i <= $n; $i++) {\n        if (is_prime($i) && $n % $i == 0) {\n  \
    \          return $i;\n        }\n    }\n}", "    $m = floor(sqrt($n));\n    for\
    \ ($i = 2; $i <= $m; $i++) {\n        if ($n % $i == 0) {\n            return\
    \ max(largest_prime_factor($n / $i), largest_prime_factor($i));\n        }\n \
    \   }\n    return $n;\n}\n\n$n = 13195;\n$res = largest_prime_factor($n);\necho\
    \ \"largest prime factor of $n is $res\\n\";\n\n$n = 2048;\n$res = largest_prime_factor($n);\n\
    echo \"largest prime factor of $n is $res\\n\";", "  $i = 2;\n  while ($i <= $n)\
    \ {\n    if ($n % $i == 0) {\n      $n /= $i;\n    } else {\n      $i++;\n   \
    \ }\n  }\n  return $i;\n}\n\necho largest_prime_factor(13195) . PHP_EOL;\necho\
    \ largest_prime_factor(2048) . PHP_EOL;", "    if ($n < 1) return false;\n   \
    \ // Simple case\n    if ($n <= 3) return $n;\n    // Small numbers\n    if ($n\
    \ % 2 == 0) return 2;\n    if ($n % 3 == 0) return 3;\n    // General case\n \
    \   for ($i = 3; $i <= sqrt($n); $i++) {\n        if ($n % $i == 0) {\n      \
    \      if (is_prime($i)) return $i;\n        }\n    }\n    return $n;\n}", " \
    \ for ($i = 2; $i < $n; $i++) {\n    if ($n % $i == 0) {\n      // $i is a factor\
    \ of $n.\n      $largest_factor = largest_prime_factor($n / $i);\n      if ($largest_factor\
    \ > $i) {\n        return $largest_factor;\n      } else {\n        return $i;\n\
    \      }\n    }\n  }\n  return $n;\n}\n", "  $largest_prime_factor = 0;\n  //\
    \ We just need to check up to sqrt(n).\n  $sqrt_n = (int)sqrt($n);\n  for ($i\
    \ = 2; $i <= $sqrt_n; $i++) {\n    // If $i is a factor of $n, update $largest_prime_factor.\n\
    \    if ($n % $i == 0) {\n      // We only want prime factors.\n      if (is_prime($i))\
    \ {\n        $largest_prime_factor = $i;\n      }\n    }\n  }\n  return $largest_prime_factor;\n\
    }\n", "  $factor = 2;\n  $last_factor = 1;\n  while ($n != 1) {\n    if ($n %\
    \ $factor != 0) {\n      $factor++;\n    } else {\n      $n /= $factor;\n    \
    \  if ($factor != $last_factor) {\n        $last_factor = $factor;\n      }\n\
    \    }\n  }\n  return $last_factor;\n}\n\necho largest_prime_factor(13195) . \"\
    \\n\";\necho largest_prime_factor(2048) . \"\\n\";\necho largest_prime_factor(600851475143)\
    \ . \"\\n\";", "    $lpf = 0;\n    $prime = 2;\n    while ($n != 1) {\n      \
    \  while ($n % $prime == 0) {\n            $lpf = $prime;\n            $n /= $prime;\n\
    \        }\n        $prime++;\n    }\n    return $lpf;\n}\n\nprint(largest_prime_factor(13195));\n\
    print(\"\\n\");\nprint(largest_prime_factor(2048));\nprint(\"\\n\");", "  $i =\
    \ 2;\n  while ($i * $i <= $n) {\n    if ($n % $i == 0) {\n      $n /= $i;\n  \
    \  } else {\n      $i += 1;\n    }\n  }\n  return $n;\n}\n\necho largest_prime_factor(13195)\
    \ . \"\\n\";\necho largest_prime_factor(2048) . \"\\n\";", "  for ($divisor =\
    \ 2; $divisor < $n; $divisor++) {\n    if ($n % $divisor == 0) {\n      $factor\
    \ = $n / $divisor;\n      return largest_prime_factor($factor);\n    }\n  }\n\
    \  return $n;\n}\n", "    $p = 2;\n    while ($n > 1) {\n        if ($n % $p ==\
    \ 0) {\n            $n /= $p;\n        } else {\n            $p++;\n        }\n\
    \    }\n    return $p;\n}\n\n$r = largest_prime_factor(13195);\nassert($r == 29);\n\
    \n$r = largest_prime_factor(2048);\nassert($r == 2);\n\necho \"Success\";", " \
    \   for ($i = floor(sqrt($n)); $i > 1; $i--) {\n        if ($n % $i == 0) {\n\
    \            if (is_prime($i)) return $i;\n        }\n    }\n}\n", "    // Initialize\
    \ $lpf, the largest prime factor, to 2.\n    $lpf = 2;\n    // Loop through all\
    \ odd numbers from 3 to $n / 2,\n    // setting $lpf to the larger of $lpf and\
    \ the largest prime factor of $n.\n    for ($i = 3; $i <= $n / 2; $i += 2) {\n\
    \        if ($n % $i === 0) {\n            $lpf = max($lpf, largest_prime_factor($n\
    \ / $i));\n        }\n    }\n    // Return $lpf.\n    return $lpf;\n}\n", "  //\
    \ Code here.\n}\n", "  $p = 2;\n  $q = $n;\n  while ($q > $p) {\n    if ($q %\
    \ $p == 0) {\n      $q = $q / $p;\n    } else {\n      $p = $p + 1;\n    }\n \
    \ }\n  return $p;\n}\n", "    // First, the simple optimizations.\n    if ($n\
    \ % 2 == 0) {\n        return largest_prime_factor($n / 2);\n    }\n\n    // Each\
    \ time we call this function, we check for 2 and 3.\n    // So we can start with\
    \ 5, which is 2 + 3.\n    $factor = 5;\n    $max_factor = sqrt($n);\n\n    while\
    \ ($n > 1 && $factor <= $max_factor) {\n        while ($n % $factor == 0) {\n\
    \            $n /= $factor;\n            $max_factor = sqrt($n);\n        }\n\
    \        $factor += 2;\n    }\n\n    return $n;\n}", "  if ($n <= 1) {\n    return\
    \ 0;\n  }\n  $factor = 2;\n  $prime_factor = $n;\n  while ($factor <= $n) {\n\
    \    if ($n % $factor == 0) {\n      if (is_prime($factor)) {\n        $prime_factor\
    \ = $factor;\n      }\n      $n /= $factor;\n    } else {\n      $factor++;\n\
    \    }\n  }\n  return $prime_factor;\n}\n", "    if ($n == 2) return 2;\n    $factors\
    \ = [];\n    while ($n % 2 == 0) {\n        $factors[] = 2;\n        $n /= 2;\n\
    \    }\n    for ($i = 3; $i <= $n; $i += 2) {\n        while ($n % $i == 0) {\n\
    \            $factors[] = $i;\n            $n /= $i;\n        }\n    }\n    return\
    \ max($factors);\n}\n", "    // This method assumes that $n is an integer.\n \
    \   $max = $n / 2;\n    for ($i = 2; $i <= $max; $i++) {\n        $r = $n % $i;\n\
    \        if ($r == 0) {\n            $primes[] = $i;\n        }\n    }\n    //\
    \ print_r($primes);\n    $largest = array_pop($primes);\n    return $largest;\n\
    }\n", "  $max = 1;\n  for ($i = 2; $i <= $n; $i++) {\n    if ($n % $i == 0) {\n\
    \      $max = $i;\n      $n /= $i;\n      $i = 1;\n    }\n  }\n  return $max;\n\
    }\necho largest_prime_factor(13195) . PHP_EOL;\necho largest_prime_factor(2048)\
    \ . PHP_EOL;", "  if ($n == 1) return 1;\n  for ($i = 2; $i <= sqrt($n); $i++)\
    \ {\n    if ($n % $i == 0) {\n      $factor1 = $i;\n      $factor2 = $n / $i;\n\
    \      if (is_prime($factor1)) return $factor1;\n      if (is_prime($factor2))\
    \ return $factor2;\n    }\n  }\n}\n", "  // Your code here.\n}\n\nassert_options(ASSERT_BAIL,\
    \ 1);\nassert(largest_prime_factor(13195) == 29);\nassert(largest_prime_factor(2048)\
    \ == 2);\necho \"All tests passed.\\n\";", "    $prime_factors = array();\n  \
    \  $i = 2;\n    while ($n > 1) {\n        while ($n % $i == 0) {\n           \
    \ $prime_factors[] = $i;\n            $n /= $i;\n        }\n        $i++;\n  \
    \  }\n    return max($prime_factors);\n}\necho largest_prime_factor(13195);\n\
    echo PHP_EOL;\necho largest_prime_factor(2048);\necho PHP_EOL;\necho largest_prime_factor(600851475143);\n\
    echo PHP_EOL;", "    $result = 1;\n    $i = 2;\n    while ($i <= $n) {\n     \
    \   if ($n % $i == 0) {\n            $result = $i;\n            $n /= $i;\n  \
    \      } else {\n            $i++;\n        }\n    }\n    return $result;\n}\n\
    echo largest_prime_factor(600851475143);", "  $factor = 2;\n  while ($n > 1) {\n\
    \    while ($n % $factor == 0) {\n      $n /= $factor;\n    }\n    $factor++;\n\
    \  }\n  return $factor - 1;\n}\n", "  $factors = array_filter(array_values(prime_factors($n)),\
    \ function($f) {\n    return $f != 1;\n  });\n  return max($factors);\n}\n", " \
    \   $prime_factor = 1;\n    $factor = 2;\n    while ($n != 1) {\n        while\
    \ ($n % $factor == 0) {\n            $prime_factor = $factor;\n            $n\
    \ /= $factor;\n        }\n        $factor += 1;\n    }\n    return $prime_factor;\n\
    }\n\necho largest_prime_factor(600851475143), \"\\n\";", "    for ($i = 2; $i\
    \ < $n; $i++) {\n        if ($n % $i == 0) {\n            return max(largest_prime_factor($n\
    \ / $i), largest_prime_factor($i));\n        }\n    }\n    return $n;\n}\n\nlargest_prime_factor(13195);",
  "    $f = 2;\n    while ($n > 1) {\n        while ($n % $f == 0) {\n           \
    \ $n /= $f;\n        }\n        $f++;\n    }\n    return $f-1;\n}\n", "  for ($i\
    \ = 2; $i <= $n; $i++) {\n    if ($n % $i == 0) {\n      $n /= $i;\n      $largest\
    \ = $i;\n    }\n  }\n  return $largest;\n}", "    // TODO\n}\n", "  $i = 2;\n\
    \  while($i * $i <= $n) {\n    if ($n % $i == 0) {\n      $n /= $i;\n    } else\
    \ {\n      $i += 1;\n    }\n  }\n  return $n;\n}\n", "  // Start with the smallest\
    \ prime factor, 2.\n  $i = 2;\n  while ($i <= $n) {\n    // While i divides n,\
    \ divide n by i.\n    while ($n % $i == 0) {\n      $n = $n / $i;\n    }\n   \
    \ // Increment i until it is > n.\n    if ($i < $n) {\n      $i++;\n    }\n  }\n\
    \  return $i;\n}\n", "  $i = 2;\n  while ($i <= $n) {\n    if ($n % $i == 0) {\n\
    \      $n /= $i;\n    } else {\n      $i++;\n    }\n  }\n  return $i;\n}\n\necho\
    \ largest_prime_factor(600851475143);", "    $d = 2;\n    while ($n > 1) {\n \
    \       while ($n % $d == 0) {\n            $n /= $d;\n        }\n        $d +=\
    \ 1;\n    }\n    return $d - 1;\n}\necho largest_prime_factor(13195), PHP_EOL;\n\
    echo largest_prime_factor(2048), PHP_EOL;", "  // Find all the prime factors of\
    \ n.\n  $factors = array();\n  $factors = get_all_prime_factors($n);\n  // Return\
    \ the largest one.\n  return max($factors);\n}\n", "  $f = 2;\n  while ($n % $f\
    \ != 0) {\n    $f++;\n  }\n  if ($n == $f) {\n    return $n;\n  }\n  return largest_prime_factor($n\
    \ / $f);\n}\n\nassert(29 == largest_prime_factor(13195));\nassert(2 == largest_prime_factor(2048));\n\
    assert(5 == largest_prime_factor(25));\nassert(29 == largest_prime_factor(13195));\n\
    assert(997 == largest_prime_factor(997));\nassert(37 == largest_prime_factor(1337));\n\
    assert(325115 == largest_prime_factor(600851475143));", "    $primes = [1];\n\
    \    for ($i = 2; $i <= $n; $i++) {\n        if ($n % $i == 0) {\n           \
    \ $primes[] = $i;\n            while ($n % $i == 0) {\n                $n /= $i;\n\
    \            }\n        }\n    }\n    return $primes[count($primes) - 1];\n}",
  "    $factors = array();\n    for ($i = 2; $i <= sqrt($n); $i++) {\n        if ($n\
    \ % $i == 0) {\n            $factors[] = $i;\n            if (is_prime($n / $i))\
    \ {\n                $factors[] = $n / $i;\n                break;\n         \
    \   }\n        }\n    }\n    return max($factors);\n}\n\nassert(largest_prime_factor(13195)\
    \ == 29);\nassert(largest_prime_factor(2048) == 2);\n\necho largest_prime_factor(600851475143)\
    \ . \"\\n\";", "    $i = floor(sqrt($n));\n    while ($i > 0) {\n        if ($n\
    \ % $i == 0) {\n            if (is_prime($i)) return $i;\n        }\n        $i--;\n\
    \    }\n}\n", "    $i = floor(sqrt($n));\n    while ($i > 1) {\n        if ($n\
    \ % $i == 0) {\n            if (is_prime($i)) {\n                return $i;\n\
    \            }\n        }\n        $i--;\n    }\n}", "  $i = 2;\n  while ($i <=\
    \ $n) {\n    if ($n % $i == 0) {\n      $n /= $i;\n    } else {\n      $i++;\n\
    \    }\n  }\n  return $i;\n}\n\necho largest_prime_factor(13195).\"\\n\";", " \
    \   // write your code here\n}\n", "    $i = 2;\n    while ($i <= $n) {\n    \
    \    if (is_prime($i) && $n % $i == 0) {\n            $n /= $i;\n        } else\
    \ {\n            $i++;\n        }\n    }\n    return $i;\n}\n", "    $p = 2;\n\
    \    while ($n > 1) {\n        while ($n % $p == 0) {\n            $n /= $p;\n\
    \        }\n        $p++;\n    }\n    return $p - 1;\n}", "  for ($i = 2; $i <=\
    \ $n; $i++) {\n    if ($n % $i == 0) {\n      $n /= $i;\n      $i = 1;\n    }\n\
    \  }\n  return $n;\n}", "  $i = 2;\n  while ($i < $n) {\n    while ($n % $i ==\
    \ 0) {\n      $n /= $i;\n    }\n    $i++;\n  }\n  return $n;\n}\n", "    $x =\
    \ $n;\n    $factors = [];\n    $isPrime = function($n) use (&$isPrime) {\n   \
    \     if ($n == 2) return true;\n        $sqrt = sqrt($n);\n        for ($i =\
    \ 2; $i <= $sqrt; $i++) {\n            if ($n % $i == 0) return false;\n     \
    \   }\n        return true;\n    };\n    while ($x > 1) {\n        $sqrt = sqrt($x);\n\
    \        for ($i = 2; $i <= $sqrt; $i++) {\n            if ($x % $i == 0) {\n\
    \                if ($isPrime($i)) {\n                    $factors[] = $i;\n \
    \                   $x /= $i;\n                    break;\n                }\n\
    \            }\n        }\n    }\n    return $factors[count($factors) - 1];\n\
    }\necho largest_prime_factor(600851475143);", "    if ($n < 2) return false;\n\
    \    $factor = 2;\n    while ($n % $factor != 0) {\n        $factor++;\n    }\n\
    \    if ($n == $factor) return $n;\n    $div = $n / $factor;\n    return largest_prime_factor($div);\n\
    }", "  $factor = 2;\n  $n = $n / $factor;\n  while ($n != 1) {\n    if ($n % $factor\
    \ == 0) {\n      $n = $n / $factor;\n    } else {\n      $factor += 1;\n    }\n\
    \  }\n  return $factor;\n}\necho \"Largest prime factor of 13195: \" . largest_prime_factor(13195)\
    \ . \"\\n\";\necho \"Largest prime factor of 2048: \" . largest_prime_factor(2048)\
    \ . \"\\n\";", "    $factors = [];\n    $fac = 2;\n    while ($n != 1) {\n   \
    \     while ($n % $fac == 0) {\n            $factors[] = $fac;\n            $n\
    \ /= $fac;\n        }\n        $fac++;\n    }\n    return max($factors);\n}\n",
  "    for ($i = 2; $i <= floor(sqrt($n)); $i++) {\n        if ($n % $i == 0) {\n\
    \            return max(largest_prime_factor($n / $i), largest_prime_factor($i));\n\
    \        }\n    }\n    return $n;\n}\n", "    //Return the last prime factor\n\
    \    for ($i = 2; $i < $n; $i++) {\n        if ($n % $i == 0) {\n            return\
    \ largest_prime_factor($n / $i);\n        }\n    }\n    return $n;\n}\n\necho\
    \ largest_prime_factor(2048);", "    $i = 2;\n    while ($i <= $n) {\n       \
    \ if ($n % $i == 0) {\n            $n /= $i;\n        } else {\n            $i++;\n\
    \        }\n    }\n    return $i;\n}\n\necho largest_prime_factor(13195).\"\\\
    n\";\necho largest_prime_factor(2048).\"\\n\";\necho largest_prime_factor(600851475143).\"\
    \\n\";", "    $prime_factors = array();\n    for ($i = 2; $i <= $n; $i++) {\n\
    \        while ($n % $i == 0) {\n            $prime_factors[] = $i;\n        \
    \    $n /= $i;\n        }\n    }\n    return max($prime_factors);\n}\necho \"\
    Largest prime factor of 13195: \" . largest_prime_factor(13195) . \"\\n\";\necho\
    \ \"Largest prime factor of 2048: \" . largest_prime_factor(2048) . \"\\n\";\n\
    echo \"Largest prime factor of 600851475143: \" . largest_prime_factor(600851475143)\
    \ . \"\\n\";", "    // $primes = array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31,\
    \ 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97);\n    $primes = array(2,\
    \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73,\
    \ 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157,\
    \ 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241,\
    \ 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347,\
    \ 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439,\
    \ 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547,\
    \ 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643,\
    \ 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751,\
    \ 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859,\
    \ 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977,\
    \ 983, 991, 997);\n    $largest = 1;\n    for ($i = 0; $i < count($primes); $i++)\
    \ {\n        if", "    $i = 2;\n    $factor = 1;\n    while ($i <= $n / $i) {\n\
    \        if ($n % $i == 0) {\n            $factor = $i;\n            $n /= $i;\n\
    \        } else {\n            $i++;\n        }\n    }\n    if ($n > 1) {\n  \
    \      $factor = $n;\n    }\n    return $factor;\n}\n", "    $factors = [];\n\
    \    // Try dividing by 2 and odd numbers up to sqrt(n).\n    for ($divisor =\
    \ 2; $divisor <= sqrt($n); $divisor++) {\n        while ($n % $divisor == 0) {\n\
    \            $factors[] = $divisor;\n            $n /= $divisor;\n        }\n\
    \    }\n    if ($n > 1) {\n        $factors[] = $n;\n    }\n    // Return the\
    \ largest factor.\n    return max($factors);\n}\nlargest_prime_factor(13195);",
  "  // Implement this function.\n}\n", "  if ($n == 2) return 2;\n  if ($n == 3)\
    \ return 3;\n  if ($n % 2 == 0) return 2;\n  if ($n % 3 == 0) return 3;\n  $p\
    \ = 5;\n  while ($p * $p <= $n) {\n    if ($n % $p == 0) return $p;\n    if ($n\
    \ % ($p + 2) == 0) return $p + 2;\n    $p += 6;\n  }\n  return $n;\n}\necho largest_prime_factor(600851475143)\
    \ . \"\\n\";", "    $factor = 2;\n    while ($n != 1) {\n        while ($n % $factor\
    \ == 0) {\n            $n /= $factor;\n        }\n        $factor++;\n    }\n\
    \    return $factor - 1;\n}\n", "    $i = 2;\n    $limit = ceil(sqrt($n));\n \
    \   while ($i <= $limit) {\n        if ($n % $i == 0) {\n            $n /= $i;\n\
    \            $limit = ceil(sqrt($n));\n        } else {\n            $i++;\n \
    \       }\n    }\n    return $n;\n}\n\n$input = isset($argv[1]) ? $argv[1] : 1000;\n\
    $start = microtime(true);\n$result = largest_prime_factor($input);\n$end = microtime(true);\n\
    \nprintf(\"The largest prime factor of %d is %d.\\n\", $input, $result);\nprintf(\"\
    Elapsed time: %f sec.\\n\", $end - $start);", "  $factors = [];\n  $prime_factors\
    \ = [];\n  for ($i = 1; $i <= sqrt($n); $i++) {\n    if ($n % $i == 0) {\n   \
    \   $factors[] = $i;\n      $factors[] = $n / $i;\n    }\n  }\n  foreach ($factors\
    \ as $factor) {\n    $is_prime = true;\n    if ($factor == 1) {\n      $is_prime\
    \ = false;\n    }\n    for ($i = 2; $i <= sqrt($factor); $i++) {\n      if ($factor\
    \ % $i == 0) {\n        $is_prime = false;\n        break;\n      }\n    }\n \
    \   if ($is_prime) {\n      $prime_factors[] = $factor;\n    }\n  }\n  return\
    \ max($prime_factors);\n}\necho \"largest_prime_factor(13195): \" . largest_prime_factor(13195)\
    \ . \"\\n\";\necho \"largest_prime_factor(2048): \" . largest_prime_factor(2048)\
    \ . \"\\n\";", "    $i = 1;\n    $factors = [];\n    while ($i < $n) {\n     \
    \   $i++;\n        if ($n % $i == 0) {\n            $factors[] = $i;\n       \
    \ }\n    }\n    $divisors = [];\n    foreach ($factors as $factor) {\n       \
    \ $k = 1;\n        while ($k < $factor) {\n            $k++;\n            if ($factor\
    \ % $k == 0) {\n                $divisors[] = $k;\n            }\n        }\n\
    \    }\n    $prime_factors = array_diff($factors, $divisors);\n    return max($prime_factors);\n\
    }", "    $prime_factors = prime_factors($n);\n    return max($prime_factors);\n\
    }\n", "  $prime = 1;\n  $prime_factor = 2;\n  while ($n > 1) {\n    while ($n\
    \ % $prime_factor == 0) {\n      $prime = $prime_factor;\n      $n /= $prime_factor;\n\
    \    }\n    $prime_factor++;\n  }\n  return $prime;\n}\n", "    $primes = array();\n\
    \    while ($n % 2 == 0) {\n        $primes[] = 2;\n        $n /= 2;\n    }\n\
    \    $p = 3;\n    while ($n != 1) {\n        while ($n % $p == 0) {\n        \
    \    $primes[] = $p;\n            $n /= $p;\n        }\n        $p += 2;\n   \
    \ }\n    return $primes[count($primes) - 1];\n}\n", "    $factor = 2;\n    while\
    \ ($n > 1) {\n        if ($n % $factor == 0) {\n            $n /= $factor;\n \
    \       } else {\n            $factor++;\n        }\n    }\n    return $factor;\n\
    }\n", "    $lpf = null;\n    $divisor = 2;\n    while ($n > 1) {\n        if (is_prime($divisor))\
    \ {\n            if ($n % $divisor == 0) {\n                $lpf = $divisor;\n\
    \                $n /= $divisor;\n            } else {\n                $divisor++;\n\
    \            }\n        } else {\n            $divisor++;\n        }\n    }\n\
    \    return $lpf;\n}\n", "    $largest_factor = 0;\n    for ($factor = 1; $factor\
    \ < $n; $factor++) {\n        if ($n % $factor == 0) {\n            $largest_factor\
    \ = $factor;\n        }\n    }\n    return $largest_factor;\n}\n", "  $factors\
    \ = prime_factors($n);\n  return array_pop($factors);\n}\n", "    $i = 2;\n  \
    \  while ($i * $i <= $n) {\n        if ($n % $i == 0) {\n            $n /= $i;\n\
    \        } else {\n            $i++;\n        }\n    }\n    return $n;\n}\n\n\
    echo largest_prime_factor(15), \"\\n\";\necho largest_prime_factor(13195), \"\\\
    n\";\necho largest_prime_factor(2048), \"\\n\";\necho largest_prime_factor(600851475143),\
    \ \"\\n\";", "    $largest = 1;\n    $i = 2;\n    while ($i <= $n) {\n       \
    \ while ($n % $i == 0) {\n            $largest = $i;\n            $n /= $i;\n\
    \        }\n        $i++;\n    }\n    return $largest;\n}\n", "  if($n <= 1) {\n\
    \    return \"ERROR: number must be greater than 1\";\n  }\n  for($i = 2; $i <=\
    \ $n; $i++) {\n    if($n % $i == 0) {\n      $n /= $i;\n      $i--;\n    }\n \
    \ }\n  return $i;\n}\necho largest_prime_factor(2048);", "  // 2 is the smallest\
    \ prime number\n  if ($n < 2) return;\n  $n2 = $n;\n  $largest = 1;\n  $next_prime\
    \ = 2;\n  while ($n2 > 1) {\n    if ($n2 % $next_prime == 0) {\n      $n2 /= $next_prime;\n\
    \      $largest = $next_prime;\n    } else {\n      $next_prime = next_prime($next_prime);\n\
    \    }\n  }\n  return $largest;\n}\n", "    $largest_prime_factor = 1;\n    $divisor\
    \ = 2;\n    while ($n != 1) {\n        if ($n % $divisor == 0) {\n           \
    \ $largest_prime_factor = $divisor;\n            $n /= $divisor;\n        } else\
    \ {\n            $divisor++;\n        }\n    }\n    return $largest_prime_factor;\n\
    }\n", "    $largest_factor = 1;\n    $factor = 2;\n    while ($n > 1) {\n    \
    \    if ($n % $factor == 0) {\n            $largest_factor = $factor;\n      \
    \      $n /= $factor;\n            $factor = 2;\n        } else {\n          \
    \  $factor++;\n        }\n    }\n    return $largest_factor;\n}\necho largest_prime_factor(600851475143);",
  "    // Because $n > 1, the first factor will always be 2.\n    $prime = 2;\n  \
    \  while ($n > 1) {\n        if ($n % $prime === 0) {\n            $n /= $prime;\n\
    \        } else {\n            $prime += 1;\n        }\n    }\n    return $prime;\n\
    }", "  $prime_factors = array();\n  $i = 2;\n  while ($n > 1) {\n    if ($n %\
    \ $i == 0) {\n      $prime_factors[] = $i;\n      $n /= $i;\n    } else {\n  \
    \    $i++;\n    }\n  }\n  $answer = array_pop($prime_factors);\n  return $answer;\n\
    }\n", "    $i = 2;\n    while ($i <= $n) {\n        if ($n % $i == 0) {\n    \
    \        $n /= $i;\n        } else {\n            $i++;\n        }\n    }\n  \
    \  return $i;\n}\n\necho largest_prime_factor(600851475143);", "    $i = 2;\n\
    \    while ($i * $i <= $n) {\n        if ($n % $i == 0) {\n            $n /= $i;\n\
    \        } else {\n            $i++;\n        }\n    }\n    return $n;\n}\n\n\
    echo largest_prime_factor(600851475143);", "  $i = 2;\n  while ($i <= $n) {\n\
    \    if ($n % $i == 0) {\n      $n /= $i;\n    } else {\n      $i++;\n    }\n\
    \  }\n  return $i;\n}\n", "  // Your code here\n}", "    $pfs = factor($n);\n\
    \    return end($pfs);\n}\n", "    $factor = $n;\n    // If the number is divisible\
    \ by 2 then we should divide by 2.\n    while ($factor % 2 == 0) {\n        $factor\
    \ = $factor / 2;\n    }\n    $divisor = 3;\n    // If a number is divisible by\
    \ another number, then one of the factors\n    // of that number is at most its\
    \ square root.\n    while ($divisor <= floor(sqrt($factor))) {\n        if ($factor\
    \ % $divisor == 0) {\n            $factor = $factor / $divisor;\n        } else\
    \ {\n            $divisor += 2;\n        }\n    }\n    return $factor;\n}\necho\
    \ largest_prime_factor(13195).\"\\n\";\necho largest_prime_factor(2048).\"\\n\"\
    ;\necho largest_prime_factor(600851475143).\"\\n\";\n", "    $prime_factor = 2;\n\
    \n    while ($n > $prime_factor) {\n        if ($n % $prime_factor == 0) {\n \
    \           $n /= $prime_factor;\n        } else {\n            $prime_factor++;\n\
    \        }\n    }\n\n    return $prime_factor;\n}\n\necho largest_prime_factor(2048);\n\
    echo \"\\n\";", "    $factor = 2;\n    while ($n > 1) {\n        if ($n % $factor\
    \ == 0) {\n            $n /= $factor;\n        } else {\n            $factor +=\
    \ 1;\n        }\n    }\n    return $factor;\n}\n", "    $i = 1;\n    $last_prime\
    \ = 1;\n    while ($i < $n) {\n        $i++;\n        if ($n % $i != 0) {\n  \
    \          continue;\n        }\n        $last_prime = $i;\n        $n = $n /\
    \ $i;\n    }\n    return $last_prime;\n}\n\necho largest_prime_factor(172073)\
    \ . \"\\n\";", "    $min = 1;\n\n    for ($i = $n - 1; $i > $min; $i--) {\n  \
    \      if ($n % $i == 0) {\n            $min = $i;\n            break;\n     \
    \   }\n    }\n\n    for ($i = $min - 1; $i > 1; $i--) {\n        if ($min % $i\
    \ == 0) {\n            return largest_prime_factor($min);\n        }\n    }\n\n\
    \    return $min;\n}\n", "    $i = 2;\n    while ($i * $i <= $n) {\n        if\
    \ ($n % $i == 0) {\n            $n /= $i;\n        } else {\n            $i++;\n\
    \        }\n    }\n    return $n;\n}", "    $d = 2;\n    while ($n > 1) {\n  \
    \      while ($n % $d == 0) {\n            $n /= $d;\n        }\n        $d +=\
    \ 1;\n    }\n    return $d;\n}\n\n$time_start = microtime(true);\n\necho largest_prime_factor(600851475143).\"\
    \\n\";\n\n$time_end = microtime(true);\n$time = $time_end - $time_start;\necho\
    \ \"Completed in {$time} seconds.\\n\";", "    // Go down factors of n to find\
    \ the largest prime factor.\n    $largest_factor = 1;\n    $factor = 2;\n    while\
    \ ($factor <= $n) {\n        // If factor divides n, find the next factor, and\
    \ set n to the quotient.\n        if ($n % $factor == 0) {\n            $largest_factor\
    \ = $factor;\n            $n /= $factor;\n        } else {\n            // If\
    \ the next number is prime, then go to it. Otherwise, go to the\n            //\
    \ next prime.\n            $factor = (is_prime($factor + 1)) ? $factor + 1 : next_prime($factor);\n\
    \        }\n    }\n    return $largest_factor;\n}\n", "    $factor = 2;\n    while\
    \ ($n > 1) {\n        if ($n % $factor === 0) {\n            $n /= $factor;\n\
    \        } else {\n            $factor += 1;\n        }\n    }\n    return $factor;\n\
    }\n", "    $largest = 1;\n    $last = floor(sqrt($n));\n    for ($i = 2; $i <=\
    \ $last; $i++) {\n        if ($n % $i == 0) {\n            $largest = $i;\n  \
    \          do {\n                $n /= $i;\n            } while ($n % $i == 0);\n\
    \            $last = floor(sqrt($n));\n        }\n    }\n    return $n > 1 ? $n\
    \ : $largest;\n}\n", "    $i = 2;\n    $result = 1;\n    while ($i < $n) {\n \
    \       if (is_prime($i) && $n % $i == 0) {\n            $result = $i;\n     \
    \   }\n        $i++;\n    }\n    return $result;\n}\n", "    $max = floor(sqrt($n));\n\
    \    for ($i = $max; $i > 1; $i--) {\n        if ($n % $i == 0) {\n          \
    \  return largest_prime_factor($n / $i);\n        }\n    }\n    return $n;\n}\n\
    \nif (count($argv) > 1) {\n    print_r(largest_prime_factor($argv[1]));\n}", " \
    \ if ($n == 1) return 0;\n  if ($n % 2 == 0) {\n    $max_factor = 2;\n    $n /=\
    \ 2;\n    while ($n % 2 == 0) {\n      $n /= 2;\n    }\n  } else {\n    $max_factor\
    \ = 1;\n  }\n  $p = 3;\n  $max_prime = sqrt($n);\n  while ($n > 1 && $p <= $max_prime)\
    \ {\n    if ($n % $p == 0) {\n      $max_factor = $p;\n      $n /= $p;\n     \
    \ while ($n % $p == 0) {\n        $n /= $p;\n      }\n      $max_prime = sqrt($n);\n\
    \    }\n    $p += 2;\n  }\n  if ($n == 1) {\n    return $max_factor;\n  } else\
    \ {\n    return $n;\n  }\n}\n\n$n = (int)$argv[1];\n$result = largest_prime_factor($n);\n\
    echo $result . \"\\n\";", "    $i = 2;\n    while ($i * $i <= $n) {\n        if\
    \ ($n % $i == 0) {\n            $n /= $i;\n        } else {\n            $i++;\n\
    \        }\n    }\n    return $n;\n}\n\necho \"Answer is: \" . largest_prime_factor(600851475143)\
    \ . \"\\n\";", "    for ($i = 2; $i < $n; $i++) {\n        if ($n % $i == 0) {\n\
    \            $n /= $i;\n            $i--;\n        }\n    }\n    return $n;\n\
    }\n\necho largest_prime_factor(600851475143);\necho \"\\n\";", "  // TODO: Implement\
    \ this function.\n  $largest = $n;\n  $i = 2;\n  while ($i < $largest) {\n   \
    \ if ($largest % $i == 0) {\n      $largest = $largest / $i;\n    }\n    $i++;\n\
    \  }\n  return $largest;\n}\n\nlargest_prime_factor(13195);\n", "    $divisor\
    \ = 2;\n    while($n > 1) {\n        if($n % $divisor == 0) {\n            $n\
    \ /= $divisor;\n        } else {\n            $divisor++;\n        }\n    }\n\
    \    return $divisor;\n}\n\necho largest_prime_factor(600851475143) . \"\\n\";",
  "    $prime_factors = [];\n    $p = 2;\n    while ($n > 1) {\n        while ($n\
    \ % $p == 0) {\n            $prime_factors[] = $p;\n            $n /= $p;\n  \
    \      }\n        $p++;\n    }\n    return $prime_factors[count($prime_factors)\
    \ - 1];\n}\n", "    $i = 2;\n    while ($i * $i <= $n) {\n        if ($n % $i\
    \ == 0) {\n            $n /= $i;\n        } else {\n            $i++;\n      \
    \  }\n    }\n    return $n;\n}", "    $result = 1;\n    // Get all the prime factors\
    \ of n.\n    $factors = prime_factors($n);\n    // Return the largest of them.\n\
    \    return array_pop($factors);\n}\n", "    if (is_prime($n)) {\n        return\
    \ $n;\n    }\n    $mid = floor(sqrt($n));\n    for ($i = 2; $i <= $mid; $i++)\
    \ {\n        if ($n % $i == 0) {\n            return largest_prime_factor($n /\
    \ $i);\n        }\n    }\n}\n", "    $max = 1;\n    for ($i = 2; $i < $n; $i++)\
    \ {\n        if ($n % $i == 0) {\n            $max = $i;\n            $n = $n\
    \ / $i;\n            $i = 1;\n        }\n    }\n    return $max;\n}\n", "  $largest\
    \ = 1;\n  while ($n % 2 == 0) {\n    $largest = 2;\n    $n /= 2;\n  }\n  $p =\
    \ 3;\n  while ($n > 1) {\n    if ($n % $p == 0) {\n      $largest = $p;\n    \
    \  $n /= $p;\n    } else {\n      $p += 2;\n    }\n  }\n  return $largest;\n}\n\
    \nvar_dump(largest_prime_factor(13195));\nvar_dump(largest_prime_factor(2048));"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
