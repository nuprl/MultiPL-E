name: HumanEval_59_largest_prime_factor
language: php
prompt: "<?php\n// Return the largest prime factor of n. Assume n > 1 and is not a\
  \ prime.\n// >>> largest_prime_factor(13195)\n// 29\n// >>> largest_prime_factor(2048)\n\
  // 2\nfunction largest_prime_factor($n) {\n"
tests: "function candidate(...$args) {\n    return largest_prime_factor(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(15) !== 5) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(27) !== 3) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(63) !== 7) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(330) !== 11) { throw new Exception(\"Test failed!\"); }\n   \
  \ if (candidate(13195) !== 29) { throw new Exception(\"Test failed!\"); }\n}\n\n\
  test();"
completions: ["  // Prime number checker.\n  // >>> is_prime(4)\n  // False\n  //\
    \ >>> is_prime(11)\n  // True\n  function is_prime($n) {\n    $divisor = 2;\n\
    \    while ($divisor < $n) {\n      if ($n % $divisor == 0) {\n        return\
    \ False;\n      }\n      $divisor++;\n    }\n    return True;\n  }\n\n  $divisor\
    \ = 2;\n  while ($divisor < $n) {\n    if ($n % $divisor == 0) {\n      $n = $n\
    \ / $divisor;\n      if (is_prime($n)) {\n        return $n;\n      }\n    }\n\
    \    $divisor++;\n  }\n  return $n;\n}\n", "  // FIXME: Implement\n  return 0;\n\
    }\n", "    $lpf = 2;\n    while ($n % $lpf == 0) {\n        $n /= $lpf;\n    }\n\
    \    $lpf = 3;\n    while ($n > 1) {\n        while ($n % $lpf == 0) {\n     \
    \       $n /= $lpf;\n        }\n        $lpf += 2;\n    }\n    return $lpf - 2;\n\
    }\n", "  for ($i = 2; $i < $n; $i++) {\n    if (is_prime($i) && $n % $i == 0)\
    \ {\n      $lpf = $i;\n    }\n  }\n  return $lpf;\n}\n", "    // write your code\
    \ here\n    $i = 2;\n    while($i * $i <= $n) {\n        if($n % $i == 0) {\n\
    \            $n /= $i;\n        } else {\n            $i++;\n        }\n    }\n\
    \    return $n;\n}\n\necho largest_prime_factor(2048);", "    $i = 2;\n    while\
    \ ($i * $i <= $n) {\n        if ($n % $i == 0) {\n            $n /= $i;\n    \
    \    } else {\n            $i++;\n        }\n    }\n    return $n;\n}\n\nprint\
    \ largest_prime_factor(13195);", "  for ($i = 2; $i < $n; $i++) {\n    if ($n\
    \ % $i == 0) {\n      return largest_prime_factor($n / $i);\n    }\n  }\n  return\
    \ $n;\n}\n\necho largest_prime_factor(600851475143) . \"\\n\";", "  $p = 2;\n\
    \  while ($n > 1) {\n    while ($n % $p == 0) {\n      $n /= $p;\n    }\n    $p++;\n\
    \  }\n  return $p - 1;\n}\n\nvar_dump(largest_prime_factor(13195));\nvar_dump(largest_prime_factor(2048));",
  "    $primes = array();\n    $divisor = 2;\n    while ($n > 1) {\n        while\
    \ ($n % $divisor == 0) {\n            $primes[] = $divisor;\n            $n /=\
    \ $divisor;\n        }\n        $divisor += ($divisor == 2) ? 1 : 2;\n    }\n\
    \    return max($primes);\n}\n", "  $i = 2;\n  while ($i * $i <= $n) {\n    if\
    \ ($n % $i == 0) {\n      $n /= $i;\n    } else {\n      $i++;\n    }\n  }\n \
    \ return $n;\n}\necho largest_prime_factor(600851475143).\"\\n\";", "    $p =\
    \ 2;\n    for (; $p <= $n; $p++) {\n        if ($n % $p == 0) {\n            break;\n\
    \        }\n    }\n    if ($p == $n) {\n        return $n;\n    }\n    return\
    \ largest_prime_factor($n / $p);\n}\n", "  // TODO\n}\n", "    $div = 2;\n   \
    \ while ($n > 1) {\n        while ($n % $div == 0) {\n            $n /= $div;\n\
    \        }\n        $div += 1;\n    }\n    return $div - 1;\n}\n", "    $i = 2;\n\
    \    while ($i * $i <= $n) {\n        if ($n % $i) {\n            $i += 1;\n \
    \       } else {\n            $n /= $i;\n        }\n    }\n    return $n;\n}\n",
  "    $primes = get_primes_less_than($n);\n    $largest = 2;\n    $num = $n;\n  \
    \  foreach ($primes as $prime) {\n        while ($num % $prime == 0) {\n     \
    \       $num /= $prime;\n            $largest = $prime;\n        }\n    }\n  \
    \  return $largest;\n}\n", "  // Find the largest prime factor.\n  $i = 2;\n \
    \ while ($i * $i <= $n) {\n    while ($n % $i == 0) {\n      $n = $n / $i;\n \
    \   }\n    $i = $i + 1;\n  }\n  return $n;\n}\n\nprint(\"\\nThe largest prime\
    \ factor of 13195 is \" . largest_prime_factor(13195));\nprint(\"\\nThe largest\
    \ prime factor of 2048 is \" . largest_prime_factor(2048));\nprint(\"\\n\");",
  "  $result = $n;\n  for ($i = 2; $i <= $n; $i++) {\n    if ($n % $i == 0) {\n  \
    \    $result = $i;\n      break;\n    }\n  }\n  return $result;\n}\n\necho largest_prime_factor(13195);\n\
    echo \"\\n\";\necho largest_prime_factor(2048);\necho \"\\n\";", "    // The largest\
    \ prime factor of a number is the number divided by the \n    // smallest prime\
    \ factor (which must also be the largest prime factor).\n    $smallest_prime_factor\
    \ = smallest_prime_factor($n);\n    return $n / $smallest_prime_factor;\n}\n",
  "  $d = 2;\n  while ($n > 1) {\n    if ($n % $d == 0) {\n      $f = $d;\n      while\
    \ ($n % $d == 0) {\n        $n /= $d;\n      }\n    }\n    $d += 1;\n  }\n  return\
    \ $f;\n}\n", "    for ($i = floor(sqrt($n)); $i > 1; $i--) {\n        if ($n %\
    \ $i == 0 && is_prime($i)) {\n            return $i;\n        }\n    }\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
