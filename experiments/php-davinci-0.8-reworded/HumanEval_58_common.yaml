name: HumanEval_58_common
language: php
prompt: "<?php\n// Return sorted unique common elements for two arrays.\n// >>> common(array(1,\
  \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121))\n// array(1, 5, 653)\n//\
  \ >>> common(array(5, 3, 2, 8), array(3, 2))\n// array(2, 3)\nfunction common($l1,\
  \ $l2) {\n"
tests: "function candidate(...$args) {\n    return common(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(1, 4, 3, 34, 653, 2, 5), array(5, 7, 1,\
  \ 5, 9, 653, 121)) !== array(1, 5, 653)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(5, 3, 2, 8), array(3, 2)) !== array(2, 3)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 8), array(3,\
  \ 2, 4)) !== array(2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if\
  \ (candidate(array(4, 3, 2, 8), array()) !== array()) { throw new Exception(\"Test\
  \ failed!\"); }\n}\n\ntest();"
completions: ["    $uniqueKeys = array_flip(array_unique(array_merge($l1, $l2)));\n\
    \    // find elements that are not common between both arrays\n    $l1 = array_diff_key($l1,\
    \ $uniqueKeys);\n    $l2 = array_diff_key($l2, $uniqueKeys);\n    // fill the\
    \ uniqueKeys with the common elements\n    foreach($l1 as $el) {\n        if(isset($l2[$el]))\
    \ {\n            $uniqueKeys[$el] = null;\n        }\n    }\n    return array_keys($uniqueKeys);\n\
    }", "  return array_unique(array_intersect($l1, $l2));\n}", "\treturn array_values(array_unique(array_intersect($l1,\
    \ $l2)));\n}\n", "  $out = array();\n  sort($l1);\n  sort($l2);\n  $set1 = array_unique($l1);\n\
    \  $set2 = array_unique($l2);\n  foreach ($set1 as $i) {\n    if (in_array($i,\
    \ $set2)) {\n      $out[] = $i;\n    }\n  }\n  return $out;\n}\n", "  $s = array_intersect($l1,\
    \ $l2);\n  sort($s);\n  return $s;\n}\n", "  $result = array();\n  $toFind = array();\n\
    \  foreach ($l1 as $e) {\n    $toFind[$e] = false;\n  }\n  foreach ($l2 as $e)\
    \ {\n    if (array_key_exists($e, $toFind)) {\n      $toFind[$e] = true;\n   \
    \ }\n  }\n  foreach ($toFind as $k => $v) {\n    if ($v === true) {\n      $result[]\
    \ = $k;\n    }\n  }\n  return $result;\n}\n", "    $result = [];\n    foreach\
    \ ($l1 as $e1) {\n        foreach ($l2 as $e2) {\n            if ($e1 == $e2)\
    \ {\n                $result[] = $e1;\n            }\n        }\n    }\n    return\
    \ array_unique($result);\n}\n", "  sort($l1);\n  sort($l2);\n  $count1 = count($l1);\n\
    \  $count2 = count($l2);\n  $result = array();\n  $i = 0;\n  $j = 0;\n  while\
    \ ($i < $count1 && $j < $count2) {\n    if ($l1[$i] == $l2[$j]) {\n      $result[]\
    \ = $l1[$i];\n      $i++;\n      $j++;\n    } elseif ($l1[$i] < $l2[$j]) {\n \
    \     $i++;\n    } else {\n      $j++;\n    }\n  }\n  return $result;\n}\nprint_r(common(array(1,\
    \ 4, 3, 34, 653, 2, 5), array(5, 7, 1, 5, 9, 653, 121)));\nprint_r(common(array(5,\
    \ 3, 2, 8), array(3, 2)));", "  $result = array();\n  $s1 = array_unique($l1);\n\
    \  $s2 = array_unique($l2);\n  sort($s1);\n  sort($s2);\n  $i = 0;\n  $j = 0;\n\
    \  while ($i < count($s1) && $j < count($s2)) {\n    if ($s1[$i] == $s2[$j]) {\n\
    \      $result[] = $s1[$i];\n      $i++;\n      $j++;\n    } else if ($s1[$i]\
    \ < $s2[$j]) {\n      $i++;\n    } else {\n      $j++;\n    }\n  }\n  return $result;\n\
    }\n$l1 = array(1, 4, 3, 34, 653, 2, 5);\n$l2 = array(5, 7, 1, 5, 9, 653, 121);\n\
    $l3 = array(5, 3, 2, 8);\n$l4 = array(3, 2);\nprint_r(common($l1, $l2));\nprint_r(common($l3,\
    \ $l4));", "\t$result = array();\n\t$iter = function($l1, $l2) use (&$result,\
    \ &$iter) {\n\t\tif (count($l1) === 0 || count($l2) === 0) return;\n\t\t$head\
    \ = array_shift($l1);\n\t\tif (in_array($head, $l2)) $result[] = $head;\n\t\t\
    $iter($l1, $l2);\n\t};\n\t$iter($l1, $l2);\n\treturn array_unique($result);\n\
    }\n\n$l1 = [1, 4, 3, 34, 653, 2, 5];\n$l2 = [5, 7, 1, 5, 9, 653, 121];\nassert(common($l1,\
    \ $l2) === [1, 5, 653]);\n$l1 = [5, 3, 2, 8];\n$l2 = [3, 2];\nassert(common($l1,\
    \ $l2) === [2, 3]);\n", "\t$l1 = array_unique($l1);\n\t$l2 = array_unique($l2);\n\
    \tsort($l1);\n\tsort($l2);\n\treturn array_intersect($l1, $l2);\n}\n", "  $l1_sorted\
    \ = $l1;\n  sort($l1_sorted);\n  $l2_sorted = $l2;\n  sort($l2_sorted);\n  $i1\
    \ = 0;\n  $i2 = 0;\n  $result = array();\n  while ($i1 < count($l1_sorted) &&\
    \ $i2 < count($l2_sorted)) {\n    if ($l1_sorted[$i1] == $l2_sorted[$i2]) {\n\
    \      if (count($result) == 0 || $result[count($result) - 1] != $l1_sorted[$i1])\
    \ {\n        $result[] = $l1_sorted[$i1];\n      }\n      $i1++;\n      $i2++;\n\
    \    } else if ($l1_sorted[$i1] < $l2_sorted[$i2]) {\n      $i1++;\n    } else\
    \ {\n      $i2++;\n    }\n  }\n  return $result;\n}\n\n$failed = false;", "  $l1\
    \ = array_values(array_unique($l1));\n  $l2 = array_values(array_unique($l2));\n\
    \  $n1 = count($l1);\n  $n2 = count($l2);\n  $i1 = 0;\n  $i2 = 0;\n  $result =\
    \ array();\n  while ($i1 < $n1 && $i2 < $n2) {\n    if ($l1[$i1] == $l2[$i2])\
    \ {\n      $result[] = $l1[$i1];\n      $i1++;\n      $i2++;\n    } else if ($l1[$i1]\
    \ < $l2[$i2]) {\n      $i1++;\n    } else {\n      $i2++;\n    }\n  }\n  return\
    \ $result;\n}\n", "  $set1 = array_flip($l1);\n  $result = array();\n  foreach\
    \ ($l2 as $item) {\n    if (isset($set1[$item])) {\n      $result[] = $item;\n\
    \    }\n  }\n  return $result;\n}\n", "  $l1 = array_unique($l1);\n  $l2 = array_unique($l2);\n\
    \  sort($l1);\n  sort($l2);\n  $i = 0;\n  $j = 0;\n  $l = array();\n  while ($i\
    \ < count($l1) && $j < count($l2)) {\n    if ($l1[$i] < $l2[$j]) {\n      $i +=\
    \ 1;\n    } else if ($l1[$i] > $l2[$j]) {\n      $j += 1;\n    } else {\n    \
    \  $l[] = $l1[$i];\n      $i += 1;\n      $j += 1;\n    }\n  }\n  return $l;\n\
    }\n", "    $common = array();\n    for ($i = 0; $i < count($l1); $i++) {\n   \
    \     for ($j = 0; $j < count($l2); $j++) {\n            if ($l1[$i] == $l2[$j])\
    \ {\n                $common[] = $l1[$i];\n            }\n        }\n    }\n \
    \   return $common;\n}\n", "    // TODO\n}\n", "    $list1 = $l1;\n    $list2\
    \ = $l2;\n    sort($list1);\n    sort($list2);\n    $i = 0;\n    $j = 0;\n   \
    \ $result = array();\n    while ($i < count($list1) && $j < count($list2)) {\n\
    \        if ($list1[$i] < $list2[$j]) {\n            $i++;\n        } else if\
    \ ($list1[$i] > $list2[$j]) {\n            $j++;\n        } else {\n         \
    \   $result[] = $list1[$i];\n            $i++;\n            $j++;\n        }\n\
    \    }\n    return $result;\n}\n$list1 = array(5, 3, 2, 8);\n$list2 = array(3,\
    \ 2);\n\necho \"<pre>\";\nprint_r(common($list1, $list2));\necho \"</pre>\";",
  "    //test_compare_array($l1, $l2);\n    $length = min(count($l1), count($l2));\n\
    \    $i = 0;\n    $j = 0;\n    $result = array();\n    while ($i < $length &&\
    \ $j < $length) {\n        if ($l1[$i] == $l2[$j]) {\n            $result[] =\
    \ $l1[$i];\n            $i++;\n            $j++;\n        } else if ($l1[$i] <\
    \ $l2[$j]) {\n            $i++;\n        } else {\n            $j++;\n       \
    \ }\n    }\n    return $result;\n}\n", "    $h1 = array_count_values($l1);\n \
    \   $h2 = array_count_values($l2);\n    $ret = array();\n    foreach ($h1 as $key\
    \ => $value) {\n        if (isset($h2[$key])) {\n            array_push($ret,\
    \ $key);\n        }\n    }\n    sort($ret);\n    return $ret;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
