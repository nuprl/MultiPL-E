language: php
name: HumanEval_117_select_words
results:
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $s_array\
    \ = preg_split('/ /', $s);\n    $consonants = array('b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z');\n\
    \    $result = array();\n    foreach ($s_array as $key => $value) {\n        $count\
    \ = 0;\n        $value_array = str_split($value);\n        foreach ($value_array\
    \ as $value_array_key => $value_array_value) {\n            if (in_array($value_array_value,\
    \ $consonants)) {\n                $count++;\n            }\n        }\n     \
    \   if ($count == $n) {\n            array_push($result, $value);\n        }\n\
    \    }\n    return $result;\n}\nprint_r(select_words(\"Mary had a little lamb\"\
    , 4));\nprint_r(select_words(\"Mary had a little lamb\", 3));\nprint_r(select_words(\"\
    simple white space\", 2));\nprint_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"\
    Uncle sam\", 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => little\n)\nArray\n(\n    [0] => lamb\n)\nArray\n(\n\
    )\nArray\n(\n    [0] => world\n)\nArray\n(\n    [0] => Uncle\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpb7wtevoo.php:47\nStack trace:\n\
    #0 /tmp/tmpb7wtevoo.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpb7wtevoo.php\
    \ on line 47\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $words\
    \ = explode(' ', $s);\n  $result = [];\n  foreach ($words as $word) {\n    if\
    \ (number_of_consonants($word) == $n) {\n      $result[] = $word;\n    }\n  }\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function number_of_consonants()\
    \ in /tmp/tmpo6c30_ho.php:22\nStack trace:\n#0 /tmp/tmpo6c30_ho.php(30): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpo6c30_ho.php(34): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpo6c30_ho.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpo6c30_ho.php\
    \ on line 22\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    if\
    \ (empty($s)) return array();\n    $words = explode(' ', $s);\n    $result = array();\n\
    \    foreach ($words as $word) {\n        if (count_consonants($word) == $n) {\n\
    \            $result[] = $word;\n        }\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmpv8gag59s.php:23\nStack trace:\n#0 /tmp/tmpv8gag59s.php(31): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpv8gag59s.php(35): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpv8gag59s.php(44): test()\n#3 {main}\n  thrown in /tmp/tmpv8gag59s.php\
    \ on line 23\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $regex\
    \ = \"/[bcdfghjklmnpqrstvwxyz]/\";\n    $words = explode(\" \", $s);\n    $result\
    \ = [];\n    foreach ($words as $w) {\n        if (strlen($w) == $n) {\n     \
    \       if (preg_match_all($regex, $w, $matches)) {\n                $result[]\
    \ = $w;\n            }\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyi20y0e1.php:36\n\
    Stack trace:\n#0 /tmp/tmpyi20y0e1.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpyi20y0e1.php\
    \ on line 36\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $words\
    \ = array();\n  $s = str_replace(' ', '&', $s);\n  $s = explode('&', $s);\n  foreach\
    \ ($s as $word) {\n    $c = count_consonants($word);\n    if ($c == $n) {\n  \
    \    $words[] = $word;\n    }\n  }\n  return $words;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmplm_027yc.php:23\nStack trace:\n#0 /tmp/tmplm_027yc.php(32): select_words(Array,\
    \ 4)\n#1 /tmp/tmplm_027yc.php(36): candidate('Mary had a litt...', 4)\n#2 /tmp/tmplm_027yc.php(45):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmplm_027yc.php on line 23\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n\t$words\
    \ = array();\n\t$arr = preg_split('/ /', $s);\n\tforeach ($arr as $word) {\n\t\
    \tif (has_n_consonants($word, $n)) {\n\t\t\t$words[] = $word;\n\t\t}\n\t}\n\t\
    return $words;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function has_n_consonants()\
    \ in /tmp/tmpbyxwfoxt.php:22\nStack trace:\n#0 /tmp/tmpbyxwfoxt.php(30): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpbyxwfoxt.php(34): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpbyxwfoxt.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpbyxwfoxt.php\
    \ on line 22\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $output\
    \ = [];\n  $s = explode(' ', $s);\n  foreach ($s as $word) {\n    if (strlen($word)\
    \ > 0) {\n      $vowels = ['a', 'e', 'i', 'o', 'u'];\n      $count = 0;\n    \
    \  for ($i = 0; $i < strlen($word); $i++) {\n        if (!in_array($word[$i],\
    \ $vowels)) {\n          $count++;\n        }\n      }\n      if ($count == $n)\
    \ {\n        $output[] = $word;\n      }\n    }\n  }\n  return $output;\n}\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp83i3syvn.php:46\n\
    Stack trace:\n#0 /tmp/tmp83i3syvn.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp83i3syvn.php\
    \ on line 46\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr\
    \ = explode(\" \", $s);\n    $len = count($arr);\n    $result = [];\n    for ($i\
    \ = 0; $i < $len; $i++) {\n        $consonants = 0;\n        $array = str_split($arr[$i]);\n\
    \        $len_array = count($array);\n        for ($j = 0; $j < $len_array; $j++)\
    \ {\n            if ($array[$j] == \"b\" || $array[$j] == \"c\" || $array[$j]\
    \ == \"d\" ||\n                $array[$j] == \"f\" || $array[$j] == \"g\" || $array[$j]\
    \ == \"h\" ||\n                $array[$j] == \"j\" || $array[$j] == \"k\" || $array[$j]\
    \ == \"l\" ||\n                $array[$j] == \"m\" || $array[$j] == \"n\" || $array[$j]\
    \ == \"p\" ||\n                $array[$j] == \"q\" || $array[$j] == \"r\" || $array[$j]\
    \ == \"s\" ||\n                $array[$j] == \"t\" || $array[$j] == \"v\" || $array[$j]\
    \ == \"w\" ||\n                $array[$j] == \"x\" || $array[$j] == \"z\") {\n\
    \                $consonants++;\n            }\n        }\n        if ($consonants\
    \ == $n) {\n            array_push($result, $arr[$i]);\n        }\n    }\n   \
    \ return $result;\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp65omdy3z.php:49\n\
    Stack trace:\n#0 /tmp/tmp65omdy3z.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp65omdy3z.php\
    \ on line 49\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $result\
    \ = [];\n    $words = explode(' ', $s);\n    foreach ($words as $word) {\n   \
    \     if ($n === get_constant_number($word)) {\n            $result[] = $word;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_constant_number()\
    \ in /tmp/tmp7n8gfhau.php:22\nStack trace:\n#0 /tmp/tmp7n8gfhau.php(30): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp7n8gfhau.php(34): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp7n8gfhau.php(43): test()\n#3 {main}\n  thrown in /tmp/tmp7n8gfhau.php\
    \ on line 22\n"
  timestamp: 1659824629
- exit_code: 0
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $consonants\
    \ = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z'];\n    $words = explode(' ', $s);\n    $result\
    \ = [];\n    foreach ($words as $word) {\n        $counter = 0;\n        for ($i\
    \ = 0; $i < strlen($word); $i++) {\n            if (in_array(strtolower($word[$i]),\
    \ $consonants)) {\n                $counter++;\n            }\n        }\n   \
    \     if ($counter == $n) {\n            $result[] = $word;\n        }\n    }\n\
    \    return $result;\n}\n\n$string = 'Mary had a little lamb';\n$n = 4;\n\nprint_r(select_words($string,\
    \ $n));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => little\n)\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr\
    \ = explode(\" \", $s);\n    $result = [];\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        $count = 0;\n        for ($j = 0; $j < strlen($arr[$i]); $j++)\
    \ {\n            if (preg_match(\"/[bcdfghjklmnpqrstvwxyz]/\", $arr[$i][$j]))\
    \ {\n                $count++;\n            }\n        }\n        if ($count ==\
    \ $n) {\n            array_push($result, $arr[$i]);\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdlak_pra.php:41\n\
    Stack trace:\n#0 /tmp/tmpdlak_pra.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpdlak_pra.php\
    \ on line 41\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n\t$s =\
    \ preg_replace('/[^a-zA-Z ]/', '', $s); // asumiendo que tiene solo letras y espacios\n\
    \t$words = explode(' ', $s);\n\t$response = [];\n\tforeach ($words as $word) {\n\
    \t\tif (count_consonants($word) == $n) {\n\t\t\t$response[] = $word;\n\t\t}\n\t\
    }\n\treturn $response;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmppiglivbl.php:23\nStack trace:\n#0 /tmp/tmppiglivbl.php(31): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmppiglivbl.php(35): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmppiglivbl.php(44): test()\n#3 {main}\n  thrown in /tmp/tmppiglivbl.php\
    \ on line 23\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $result\
    \ = [];\n    $words = explode(' ', $s);\n    foreach ($words as $word) {\n   \
    \     if (count_consonants($word) == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmpqhw1m2rp.php:22\nStack trace:\n#0 /tmp/tmpqhw1m2rp.php(30): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpqhw1m2rp.php(34): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpqhw1m2rp.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpqhw1m2rp.php\
    \ on line 22\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $arr\
    \ = explode(\" \", $s);\n  $result = [];\n  foreach ($arr as $key => $value) {\n\
    \    if (substr_count($value, \"a\") +\n        substr_count($value, \"e\") +\n\
    \        substr_count($value, \"i\") +\n        substr_count($value, \"o\") +\n\
    \        substr_count($value, \"u\") +\n        substr_count($value, \"y\") +\n\
    \        substr_count($value, \"A\") +\n        substr_count($value, \"E\") +\n\
    \        substr_count($value, \"I\") +\n        substr_count($value, \"O\") +\n\
    \        substr_count($value, \"U\") +\n        substr_count($value, \"Y\") ==\
    \ $n) {\n      array_push($result, $value);\n    }\n  }\n  return $result;\n}\n\
    $s = \"Uncle sam\";\n$n = 3;\nprint_r(select_words($s, $n));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd28qhkmp.php:47\n\
    Stack trace:\n#0 /tmp/tmpd28qhkmp.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpd28qhkmp.php\
    \ on line 47\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    if(!$s)\
    \ return [];\n    $words = explode(' ', $s);\n    $words = array_filter($words,\
    \ function($word) use ($n) {\n        preg_match_all('/[^aeiou]/i', $word, $matches);\n\
    \        return count($matches[0]) === $n;\n    });\n    return $words;\n}\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [3] => little\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp31tlmwcm.php:33\nStack trace:\n#0 /tmp/tmp31tlmwcm.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp31tlmwcm.php on line 33\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $words\
    \ = explode(' ', $s);\n    $res = [];\n    foreach ($words as $word) {\n     \
    \   if (consonantsCount($word) == $n) {\n            $res[] = $word;\n       \
    \ }\n    }\n    return $res;\n}\n\nfunction candidate(...$args) {\n    return\
    \ select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonantsCount()\
    \ in /tmp/tmp38dzox4w.php:22\nStack trace:\n#0 /tmp/tmp38dzox4w.php(30): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp38dzox4w.php(34): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp38dzox4w.php(43): test()\n#3 {main}\n  thrown in /tmp/tmp38dzox4w.php\
    \ on line 22\n"
  timestamp: 1659824629
- exit_code: 0
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    $consonants = ['b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n\
    \    $letters = str_split(strtolower($s));\n    $words = explode(' ', $s);\n \
    \   $results = [];\n    foreach ($words as $key => $word) {\n        $count =\
    \ 0;\n        $letters = str_split(strtolower($word));\n        foreach ($letters\
    \ as $letter) {\n            if (in_array($letter, $consonants)) {\n         \
    \       $count++;\n            }\n        }\n        if ($count == $n) {\n   \
    \         $results[] = $word;\n        }\n    }\n    return $results;\n}\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  //Your\
    \ code here\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo97o6n0u.php:27\n\
    Stack trace:\n#0 /tmp/tmpo97o6n0u.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpo97o6n0u.php\
    \ on line 27\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n\n}\n\n\
    function candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphs71cyd9.php:27\n\
    Stack trace:\n#0 /tmp/tmphs71cyd9.php(36): test()\n#1 {main}\n  thrown in /tmp/tmphs71cyd9.php\
    \ on line 27\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $s\
    \ = preg_replace('/[^a-z ]/i', '', $s);\n    $words = explode(' ', $s);\n    $res\
    \ = [];\n    foreach ($words as $word) {\n        $word = strtolower($word);\n\
    \        $c = preg_replace('/[^bcdfghjklmnpqrstvwxyz]/i', '', $word);\n      \
    \  if (strlen($c) == $n) {\n            $res[] = $word;\n        }\n    }\n  \
    \  return $res;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnqfm6nsv.php:38\n\
    Stack trace:\n#0 /tmp/tmpnqfm6nsv.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpnqfm6nsv.php\
    \ on line 38\n"
  timestamp: 1659824629
