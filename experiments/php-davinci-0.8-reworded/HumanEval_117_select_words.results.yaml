language: php
name: HumanEval_117_select_words
results:
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $s_array\
    \ = preg_split('/ /', $s);\n    $consonants = array('b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z');\n\
    \    $result = array();\n    foreach ($s_array as $key => $value) {\n        $count\
    \ = 0;\n        $value_array = str_split($value);\n        foreach ($value_array\
    \ as $value_array_key => $value_array_value) {\n            if (in_array($value_array_value,\
    \ $consonants)) {\n                $count++;\n            }\n        }\n     \
    \   if ($count == $n) {\n            array_push($result, $value);\n        }\n\
    \    }\n    return $result;\n}\nprint_r(select_words(\"Mary had a little lamb\"\
    , 4));\nprint_r(select_words(\"Mary had a little lamb\", 3));\nprint_r(select_words(\"\
    simple white space\", 2));\nprint_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"\
    Uncle sam\", 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => little\n)\nArray\n(\n    [0] => lamb\n)\nArray\n(\n\
    )\nArray\n(\n    [0] => world\n)\nArray\n(\n    [0] => Uncle\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpb7wtevoo.php:47\nStack trace:\n\
    #0 /tmp/tmpb7wtevoo.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpb7wtevoo.php\
    \ on line 47\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $words\
    \ = explode(' ', $s);\n  $result = [];\n  foreach ($words as $word) {\n    if\
    \ (number_of_consonants($word) == $n) {\n      $result[] = $word;\n    }\n  }\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function number_of_consonants()\
    \ in /tmp/tmpo6c30_ho.php:22\nStack trace:\n#0 /tmp/tmpo6c30_ho.php(30): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpo6c30_ho.php(34): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpo6c30_ho.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpo6c30_ho.php\
    \ on line 22\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    if\
    \ (empty($s)) return array();\n    $words = explode(' ', $s);\n    $result = array();\n\
    \    foreach ($words as $word) {\n        if (count_consonants($word) == $n) {\n\
    \            $result[] = $word;\n        }\n    }\n    return $result;\n}\n\n\
    function candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmpv8gag59s.php:23\nStack trace:\n#0 /tmp/tmpv8gag59s.php(31): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpv8gag59s.php(35): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpv8gag59s.php(44): test()\n#3 {main}\n  thrown in /tmp/tmpv8gag59s.php\
    \ on line 23\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $regex\
    \ = \"/[bcdfghjklmnpqrstvwxyz]/\";\n    $words = explode(\" \", $s);\n    $result\
    \ = [];\n    foreach ($words as $w) {\n        if (strlen($w) == $n) {\n     \
    \       if (preg_match_all($regex, $w, $matches)) {\n                $result[]\
    \ = $w;\n            }\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyi20y0e1.php:36\n\
    Stack trace:\n#0 /tmp/tmpyi20y0e1.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpyi20y0e1.php\
    \ on line 36\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $words\
    \ = array();\n  $s = str_replace(' ', '&', $s);\n  $s = explode('&', $s);\n  foreach\
    \ ($s as $word) {\n    $c = count_consonants($word);\n    if ($c == $n) {\n  \
    \    $words[] = $word;\n    }\n  }\n  return $words;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmplm_027yc.php:23\nStack trace:\n#0 /tmp/tmplm_027yc.php(32): select_words(Array,\
    \ 4)\n#1 /tmp/tmplm_027yc.php(36): candidate('Mary had a litt...', 4)\n#2 /tmp/tmplm_027yc.php(45):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmplm_027yc.php on line 23\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n\t$words\
    \ = array();\n\t$arr = preg_split('/ /', $s);\n\tforeach ($arr as $word) {\n\t\
    \tif (has_n_consonants($word, $n)) {\n\t\t\t$words[] = $word;\n\t\t}\n\t}\n\t\
    return $words;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function has_n_consonants()\
    \ in /tmp/tmpbyxwfoxt.php:22\nStack trace:\n#0 /tmp/tmpbyxwfoxt.php(30): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpbyxwfoxt.php(34): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpbyxwfoxt.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpbyxwfoxt.php\
    \ on line 22\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $output\
    \ = [];\n  $s = explode(' ', $s);\n  foreach ($s as $word) {\n    if (strlen($word)\
    \ > 0) {\n      $vowels = ['a', 'e', 'i', 'o', 'u'];\n      $count = 0;\n    \
    \  for ($i = 0; $i < strlen($word); $i++) {\n        if (!in_array($word[$i],\
    \ $vowels)) {\n          $count++;\n        }\n      }\n      if ($count == $n)\
    \ {\n        $output[] = $word;\n      }\n    }\n  }\n  return $output;\n}\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp83i3syvn.php:46\n\
    Stack trace:\n#0 /tmp/tmp83i3syvn.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp83i3syvn.php\
    \ on line 46\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr\
    \ = explode(\" \", $s);\n    $len = count($arr);\n    $result = [];\n    for ($i\
    \ = 0; $i < $len; $i++) {\n        $consonants = 0;\n        $array = str_split($arr[$i]);\n\
    \        $len_array = count($array);\n        for ($j = 0; $j < $len_array; $j++)\
    \ {\n            if ($array[$j] == \"b\" || $array[$j] == \"c\" || $array[$j]\
    \ == \"d\" ||\n                $array[$j] == \"f\" || $array[$j] == \"g\" || $array[$j]\
    \ == \"h\" ||\n                $array[$j] == \"j\" || $array[$j] == \"k\" || $array[$j]\
    \ == \"l\" ||\n                $array[$j] == \"m\" || $array[$j] == \"n\" || $array[$j]\
    \ == \"p\" ||\n                $array[$j] == \"q\" || $array[$j] == \"r\" || $array[$j]\
    \ == \"s\" ||\n                $array[$j] == \"t\" || $array[$j] == \"v\" || $array[$j]\
    \ == \"w\" ||\n                $array[$j] == \"x\" || $array[$j] == \"z\") {\n\
    \                $consonants++;\n            }\n        }\n        if ($consonants\
    \ == $n) {\n            array_push($result, $arr[$i]);\n        }\n    }\n   \
    \ return $result;\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp65omdy3z.php:49\n\
    Stack trace:\n#0 /tmp/tmp65omdy3z.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp65omdy3z.php\
    \ on line 49\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $result\
    \ = [];\n    $words = explode(' ', $s);\n    foreach ($words as $word) {\n   \
    \     if ($n === get_constant_number($word)) {\n            $result[] = $word;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_constant_number()\
    \ in /tmp/tmp7n8gfhau.php:22\nStack trace:\n#0 /tmp/tmp7n8gfhau.php(30): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp7n8gfhau.php(34): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp7n8gfhau.php(43): test()\n#3 {main}\n  thrown in /tmp/tmp7n8gfhau.php\
    \ on line 22\n"
  timestamp: 1659824629
- exit_code: 0
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $consonants\
    \ = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z'];\n    $words = explode(' ', $s);\n    $result\
    \ = [];\n    foreach ($words as $word) {\n        $counter = 0;\n        for ($i\
    \ = 0; $i < strlen($word); $i++) {\n            if (in_array(strtolower($word[$i]),\
    \ $consonants)) {\n                $counter++;\n            }\n        }\n   \
    \     if ($counter == $n) {\n            $result[] = $word;\n        }\n    }\n\
    \    return $result;\n}\n\n$string = 'Mary had a little lamb';\n$n = 4;\n\nprint_r(select_words($string,\
    \ $n));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => little\n)\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr\
    \ = explode(\" \", $s);\n    $result = [];\n    for ($i = 0; $i < count($arr);\
    \ $i++) {\n        $count = 0;\n        for ($j = 0; $j < strlen($arr[$i]); $j++)\
    \ {\n            if (preg_match(\"/[bcdfghjklmnpqrstvwxyz]/\", $arr[$i][$j]))\
    \ {\n                $count++;\n            }\n        }\n        if ($count ==\
    \ $n) {\n            array_push($result, $arr[$i]);\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdlak_pra.php:41\n\
    Stack trace:\n#0 /tmp/tmpdlak_pra.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpdlak_pra.php\
    \ on line 41\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n\t$s =\
    \ preg_replace('/[^a-zA-Z ]/', '', $s); // asumiendo que tiene solo letras y espacios\n\
    \t$words = explode(' ', $s);\n\t$response = [];\n\tforeach ($words as $word) {\n\
    \t\tif (count_consonants($word) == $n) {\n\t\t\t$response[] = $word;\n\t\t}\n\t\
    }\n\treturn $response;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmppiglivbl.php:23\nStack trace:\n#0 /tmp/tmppiglivbl.php(31): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmppiglivbl.php(35): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmppiglivbl.php(44): test()\n#3 {main}\n  thrown in /tmp/tmppiglivbl.php\
    \ on line 23\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $result\
    \ = [];\n    $words = explode(' ', $s);\n    foreach ($words as $word) {\n   \
    \     if (count_consonants($word) == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmpqhw1m2rp.php:22\nStack trace:\n#0 /tmp/tmpqhw1m2rp.php(30): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpqhw1m2rp.php(34): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpqhw1m2rp.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpqhw1m2rp.php\
    \ on line 22\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $arr\
    \ = explode(\" \", $s);\n  $result = [];\n  foreach ($arr as $key => $value) {\n\
    \    if (substr_count($value, \"a\") +\n        substr_count($value, \"e\") +\n\
    \        substr_count($value, \"i\") +\n        substr_count($value, \"o\") +\n\
    \        substr_count($value, \"u\") +\n        substr_count($value, \"y\") +\n\
    \        substr_count($value, \"A\") +\n        substr_count($value, \"E\") +\n\
    \        substr_count($value, \"I\") +\n        substr_count($value, \"O\") +\n\
    \        substr_count($value, \"U\") +\n        substr_count($value, \"Y\") ==\
    \ $n) {\n      array_push($result, $value);\n    }\n  }\n  return $result;\n}\n\
    $s = \"Uncle sam\";\n$n = 3;\nprint_r(select_words($s, $n));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd28qhkmp.php:47\n\
    Stack trace:\n#0 /tmp/tmpd28qhkmp.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpd28qhkmp.php\
    \ on line 47\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    if(!$s)\
    \ return [];\n    $words = explode(' ', $s);\n    $words = array_filter($words,\
    \ function($word) use ($n) {\n        preg_match_all('/[^aeiou]/i', $word, $matches);\n\
    \        return count($matches[0]) === $n;\n    });\n    return $words;\n}\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [3] => little\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp31tlmwcm.php:33\nStack trace:\n#0 /tmp/tmp31tlmwcm.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp31tlmwcm.php on line 33\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $words\
    \ = explode(' ', $s);\n    $res = [];\n    foreach ($words as $word) {\n     \
    \   if (consonantsCount($word) == $n) {\n            $res[] = $word;\n       \
    \ }\n    }\n    return $res;\n}\n\nfunction candidate(...$args) {\n    return\
    \ select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonantsCount()\
    \ in /tmp/tmp38dzox4w.php:22\nStack trace:\n#0 /tmp/tmp38dzox4w.php(30): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp38dzox4w.php(34): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp38dzox4w.php(43): test()\n#3 {main}\n  thrown in /tmp/tmp38dzox4w.php\
    \ on line 22\n"
  timestamp: 1659824629
- exit_code: 0
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    $consonants = ['b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n\
    \    $letters = str_split(strtolower($s));\n    $words = explode(' ', $s);\n \
    \   $results = [];\n    foreach ($words as $key => $word) {\n        $count =\
    \ 0;\n        $letters = str_split(strtolower($word));\n        foreach ($letters\
    \ as $letter) {\n            if (in_array($letter, $consonants)) {\n         \
    \       $count++;\n            }\n        }\n        if ($count == $n) {\n   \
    \         $results[] = $word;\n        }\n    }\n    return $results;\n}\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  //Your\
    \ code here\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo97o6n0u.php:27\n\
    Stack trace:\n#0 /tmp/tmpo97o6n0u.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpo97o6n0u.php\
    \ on line 27\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n\n}\n\n\
    function candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphs71cyd9.php:27\n\
    Stack trace:\n#0 /tmp/tmphs71cyd9.php(36): test()\n#1 {main}\n  thrown in /tmp/tmphs71cyd9.php\
    \ on line 27\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $s\
    \ = preg_replace('/[^a-z ]/i', '', $s);\n    $words = explode(' ', $s);\n    $res\
    \ = [];\n    foreach ($words as $word) {\n        $word = strtolower($word);\n\
    \        $c = preg_replace('/[^bcdfghjklmnpqrstvwxyz]/i', '', $word);\n      \
    \  if (strlen($c) == $n) {\n            $res[] = $word;\n        }\n    }\n  \
    \  return $res;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnqfm6nsv.php:38\n\
    Stack trace:\n#0 /tmp/tmpnqfm6nsv.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpnqfm6nsv.php\
    \ on line 38\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    //\
    \ write your code here\n}\n\nprint_r(select_words(\"Mary had a little lamb\",\
    \ 4));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdk15xydy.php:28\n\
    Stack trace:\n#0 /tmp/tmpdk15xydy.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpdk15xydy.php\
    \ on line 28\n"
  timestamp: 1660004052
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $results\
    \ = [];\n  $vowels = ['a', 'e', 'i', 'o', 'u'];\n  $words = explode(' ', $s);\n\
    \  foreach ($words as $word) {\n    $count = 0;\n    for ($i = 0; $i < strlen($word);\
    \ $i++) {\n      if (!in_array($word[$i], $vowels)) {\n        $count++;\n   \
    \   }\n    }\n    if ($count === $n) {\n      $results[] = $word;\n    }\n  }\n\
    \  return $results;\n}\n$s = 'Mary had a little lamb';\necho implode(select_words($s,\
    \ 4));\necho PHP_EOL;\necho implode(select_words($s, 3));\necho PHP_EOL;\n$s =\
    \ 'simple white space';\necho implode(select_words($s, 2));\necho PHP_EOL;\n$s\
    \ = 'Hello world';\necho implode(select_words($s, 4));\necho PHP_EOL;\n$s = 'Uncle\
    \ sam';\necho implode(select_words($s, 3));\necho PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "little\nMarylamb\n\nworld\n\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpwad8rej8.php:58\nStack trace:\n#0 /tmp/tmpwad8rej8.php(63): test()\n\
    #1 {main}\n  thrown in /tmp/tmpwad8rej8.php on line 58\n"
  timestamp: 1660004052
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    if\
    \ (empty($s)) {\n        return array();\n    }\n    $split = explode(' ', $s);\n\
    \    $r = array();\n    foreach ($split as $w) {\n        if (substr_count($w,\
    \ 'a') + substr_count($w, 'e') + substr_count($w, 'i') + substr_count($w, 'o')\
    \ + substr_count($w, 'u') == $n) {\n            $r[] = $w;\n        }\n    }\n\
    \    return $r;\n}\n\n$a = select_words(\"Mary had a little lamb\", 4);\nprint_r($a);\n\
    echo '<br/>';\n$a = select_words(\"Mary had a little lamb\", 3);\nprint_r($a);\n\
    echo '<br/>';\n$a = select_words(\"simple white space\", 2);\nprint_r($a);\necho\
    \ '<br/>';\n$a = select_words(\"Hello world\", 4);\nprint_r($a);\necho '<br/>';\n\
    $a = select_words(\"Uncle sam\", 3);\nprint_r($a);\necho '<br/>';\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\n<br/>Array\n(\n)\n<br/>Array\n(\n    [0] => simple\n    [1]\
    \ => white\n    [2] => space\n)\n<br/>Array\n(\n)\n<br/>Array\n(\n)\n<br/>\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpcd8lhr6m.php:52\nStack trace:\n\
    #0 /tmp/tmpcd8lhr6m.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpcd8lhr6m.php\
    \ on line 52\n"
  timestamp: 1660004052
- exit_code: 0
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n\t$arr\
    \ = array();\n\t$s = str_replace('  ', ' ', $s);\n\t$s = explode(' ', $s);\n\t\
    foreach ($s as $word) {\n\t\t$sum = 0;\n\t\t$letters = str_split($word);\n\t\t\
    foreach ($letters as $letter) {\n\t\t\tif (!(preg_match('/^[aeiou]$/i', $letter)))\
    \ {\n\t\t\t\t$sum++;\n\t\t\t}\n\t\t}\n\t\tif ($sum == $n) {\n\t\t\tarray_push($arr,\
    \ $word);\n\t\t}\n\t}\n\treturn $arr;\n}\nfunction candidate(...$args) {\n   \
    \ return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004052
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $retArray\
    \ = array();\n  $allWords = explode(\" \", $s);\n  foreach ($allWords as $word)\
    \ {\n    if (countConsonants($word) == $n) {\n      array_push($retArray, $word);\n\
    \    }\n  }\n  return $retArray;\n}\nfunction candidate(...$args) {\n    return\
    \ select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function countConsonants()\
    \ in /tmp/tmpazby2gfu.php:22\nStack trace:\n#0 /tmp/tmpazby2gfu.php(29): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpazby2gfu.php(33): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpazby2gfu.php(42): test()\n#3 {main}\n  thrown in /tmp/tmpazby2gfu.php\
    \ on line 22\n"
  timestamp: 1660004052
- exit_code: 0
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $words\
    \ = explode(' ', $s);\n    $len = count($words);\n    $result = [];\n    for ($i\
    \ = 0; $i < $len; $i++) {\n        $word = $words[$i];\n        $count = 0;\n\
    \        for ($j = 0; $j < strlen($word); $j++) {\n            if (!preg_match('/[AEIOUaeiou]/',\
    \ $word[$j])) {\n                $count++;\n            }\n        }\n       \
    \ if ($count == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\n\n$test_cases = array(\n    \"Mary had a little lamb\" => array(\n\
    \        array(\"little\", 4),\n        array(\"Mary\", 3),\n        array(array(),\
    \ 2),\n        array(\"world\", 4),\n        array(\"Uncle\", 3)\n    )\n);\n\n\
    foreach ($test_cases as $string => $test_data) {\n    foreach ($test_data as $test_case)\
    \ {\n        echo select_words($string, $test_case[1]) == $test_case[0]\n    \
    \        ? \"All good\"\n            : \"Failed \" . $string . \" \" . $test_case[1]\
    \ . \"\\n\";\n    }\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Failed Mary had a little lamb 4

    Failed Mary had a little lamb 3

    Failed Mary had a little lamb 2

    Failed Mary had a little lamb 4

    Failed Mary had a little lamb 3

    '
  timestamp: 1660004052
- exit_code: 0
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $result\
    \ = [];\n  $words = preg_split('/[\\s]+/', $s);\n  foreach ($words as $word) {\n\
    \    if (preg_match_all('/[bcdfghjklmnpqrstvwxyz]/i', $word, $matches) && count($matches[0])\
    \ == $n) {\n      $result[] = $word;\n    }\n  }\n  return $result;\n}\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\"\
    , 3));\nprint_r(select_words(\"simple white space\", 2));\nprint_r(select_words(\"\
    Hello world\", 4));\nprint_r(select_words(\"Uncle sam\", 3));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => little\n)\nArray\n(\n    [0] => Mary\n    [1] => lamb\n\
    )\nArray\n(\n)\nArray\n(\n    [0] => world\n)\nArray\n(\n    [0] => Uncle\n)\n"
  timestamp: 1660004052
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $s\
    \ = str_replace(' ', '', $s);\n    $len = strlen($s);\n    $res = [];\n    for\
    \ ($i = 0; $i < $len; $i++) {\n        if (!isVowel($s[$i])) {\n            if\
    \ (isset($res[$i])) {\n                $res[$i]++;\n            } else {\n   \
    \             $res[$i] = 1;\n            }\n        }\n    }\n    $res = array_filter($res,\
    \ function($value) use ($n) {\n        return $value == $n;\n    });\n    return\
    \ array_keys($res);\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isVowel() in\
    \ /tmp/tmpki9r97dh.php:23\nStack trace:\n#0 /tmp/tmpki9r97dh.php(38): select_words('Maryhadalittlel...',\
    \ 4)\n#1 /tmp/tmpki9r97dh.php(42): candidate('Mary had a litt...', 4)\n#2 /tmp/tmpki9r97dh.php(51):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpki9r97dh.php on line 23\n"
  timestamp: 1660004052
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n    $result =\
    \ [];\n    foreach ($words as $w) {\n        $count = 0;\n        for ($i = 0;\
    \ $i < strlen($w); $i++) {\n            if (!in_array($w[$i], $vowels)) {\n  \
    \              $count++;\n            }\n        }\n        if ($count == $n)\
    \ {\n            $result[] = $w;\n        }\n    }\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpymsdylxk.php:44\n\
    Stack trace:\n#0 /tmp/tmpymsdylxk.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpymsdylxk.php\
    \ on line 44\n"
  timestamp: 1660004052
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $arr\
    \ = preg_split('/[\\s]+/', $s);\n  $regex = \"/[^aeiou]{{$n}}/\";\n  $result =\
    \ [];\n  foreach ($arr as $i => $v) {\n    if (preg_match($regex, $v)) {\n   \
    \   $result[] = $v;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9msgmic8.php:35\n\
    Stack trace:\n#0 /tmp/tmp9msgmic8.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp9msgmic8.php\
    \ on line 35\n"
  timestamp: 1660004052
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      if (countConsonants($word) == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function countConsonants()\
    \ in /tmp/tmp2ul3glb0.php:22\nStack trace:\n#0 /tmp/tmp2ul3glb0.php(30): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp2ul3glb0.php(34): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp2ul3glb0.php(43): test()\n#3 {main}\n  thrown in /tmp/tmp2ul3glb0.php\
    \ on line 22\n"
  timestamp: 1660004052
- exit_code: 0
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n\t$arr\
    \ = explode(\" \", $s);\n\t$lst = array();\n\tforeach ($arr as $i => $word) {\n\
    \t\t$c = 0;\n\t\tfor ($j = 0; $j < strlen($word); $j++) {\n\t\t\t$c += (preg_match(\"\
    /[aeiou]/i\", $word[$j])) ? 0 : 1;\n\t\t}\n\t\tif ($c == $n) {\n\t\t\tarray_push($lst,\
    \ $word);\n\t\t}\n\t}\n\treturn $lst;\n}\n$lst = select_words(\"Mary had a little\
    \ lamb\", 4);\necho \"[\";\nforeach ($lst as $i => $word) {\n\techo \"\\\"\" .\
    \ $word . \"\\\"\";\n\tif ($i != count($lst) - 1) {\n\t\techo \", \";\n\t}\n}\n\
    echo \"]\";\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '["little"]'
  timestamp: 1660004052
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($arr as $value) {\n \
    \       if (countConsonants($value) == $n) {\n            $result[] = $value;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function countConsonants()\
    \ in /tmp/tmp_6thg_r5.php:22\nStack trace:\n#0 /tmp/tmp_6thg_r5.php(30): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp_6thg_r5.php(34): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp_6thg_r5.php(43): test()\n#3 {main}\n  thrown in /tmp/tmp_6thg_r5.php\
    \ on line 22\n"
  timestamp: 1660004052
- exit_code: 0
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n\t$s =\
    \ preg_replace('/[^a-z\\s]+/i', '', $s);\n\tif (!$s) return array();\n\t$arr =\
    \ explode(' ', $s);\n\t$consonants = ['B', 'C', 'D', 'F', 'G', 'H', 'J', 'K',\
    \ 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z'];\n\t$newArr\
    \ = [];\n\tforeach ($arr as $word) {\n\t\t$consCount = 0;\n\t\tfor ($i = 0; $i\
    \ < strlen($word); $i++) {\n\t\t\tif (in_array(strtoupper($word[$i]), $consonants))\
    \ $consCount++;\n\t\t}\n\t\tif ($consCount == $n) array_push($newArr, $word);\n\
    \t}\n\treturn $newArr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004052
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    if(empty($s))\
    \ {\n        return array();\n    }\n    $words = explode(' ', $s);\n    $result\
    \ = array();\n    foreach($words as $word) {\n        if(is_numeric($word) ||\
    \ count(consonants($word)) == $n) {\n            $result[] = $word;\n        }\n\
    \    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonants()\
    \ in /tmp/tmpxhxm8mll.php:25\nStack trace:\n#0 /tmp/tmpxhxm8mll.php(32): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpxhxm8mll.php(36): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpxhxm8mll.php(45): test()\n#3 {main}\n  thrown in /tmp/tmpxhxm8mll.php\
    \ on line 25\n"
  timestamp: 1660004052
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $return\
    \ = array();\n  $vowels = array('a', 'e', 'i', 'o', 'u');\n  $s = explode(' ',\
    \ $s);\n  foreach ($s as $key => $word) {\n    $numConsonants = 0;\n    for ($i\
    \ = 0; $i < strlen($word); $i++) {\n      if (!in_array($word[$i], $vowels)) {\n\
    \        $numConsonants++;\n      }\n    }\n    if ($numConsonants == $n) {\n\
    \      $return[] = $word;\n    }\n  }\n  return $return;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_8nsgizc.php:45\n\
    Stack trace:\n#0 /tmp/tmp_8nsgizc.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp_8nsgizc.php\
    \ on line 45\n"
  timestamp: 1660004052
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $words\
    \ = array();\n    $words_with_n_consonants = array();\n    $index = 0;\n    $w\
    \ = '';\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (strstr(\"bcdfghjklmnpqrstvwxyz\"\
    , strtolower($s[$i]))) {\n            $w .= $s[$i];\n        } else {\n      \
    \      if ($w != '') {\n                $words[$index] = $w;\n               \
    \ $index++;\n                $w = '';\n            }\n        }\n    }\n    if\
    \ ($w != '') {\n        $words[$index] = $w;\n    }\n    for ($i = 0; $i < count($words);\
    \ $i++) {\n        if (get_n_consonants($words[$i]) == $n) {\n            $words_with_n_consonants[]\
    \ = $words[$i];\n        }\n    }\n    return $words_with_n_consonants;\n}\n\n\
    function candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_n_consonants()\
    \ in /tmp/tmp08uretma.php:38\nStack trace:\n#0 /tmp/tmp08uretma.php(46): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp08uretma.php(50): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp08uretma.php(59): test()\n#3 {main}\n  thrown in /tmp/tmp08uretma.php\
    \ on line 38\n"
  timestamp: 1660004052
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $words\
    \ = explode(' ', $s);\n  $result = [];\n  foreach ($words as $word) {\n    if\
    \ (count_consonants($word) === $n) {\n      $result[] = $word;\n    }\n  }\n \
    \ return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp33zqv954.php:22\nStack trace:\n#0 /tmp/tmp33zqv954.php(30): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp33zqv954.php(34): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp33zqv954.php(43): test()\n#3 {main}\n  thrown in /tmp/tmp33zqv954.php\
    \ on line 22\n"
  timestamp: 1660004052
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr\
    \ = explode(\" \", $s);\n    $ret_arr = [];\n    foreach ($arr as $word) {\n \
    \       if (count_consonants($word) == $n) {\n            $ret_arr[] = $word;\n\
    \        }\n    }\n    return $ret_arr;\n}\nfunction candidate(...$args) {\n \
    \   return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmppsrrc3y9.php:22\nStack trace:\n#0 /tmp/tmppsrrc3y9.php(29): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmppsrrc3y9.php(33): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmppsrrc3y9.php(42): test()\n#3 {main}\n  thrown in /tmp/tmppsrrc3y9.php\
    \ on line 22\n"
  timestamp: 1660004052
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      if (count_consonants($word) == $n) {\n            $result[] = $word;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmpj4zocchv.php:22\nStack trace:\n#0 /tmp/tmpj4zocchv.php(30): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpj4zocchv.php(34): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpj4zocchv.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpj4zocchv.php\
    \ on line 22\n"
  timestamp: 1660004052
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $r =\
    \ [];\n  $w = preg_split('/[^a-zA-Z]+/', $s);\n  foreach ($w as $word) {\n   \
    \ $word = strtolower($word);\n    $l = strlen($word);\n    $c = 0;\n    for ($i\
    \ = 0; $i < $l; $i++) {\n      $letter = $word[$i];\n      if (preg_match('/[^aeiou]/',\
    \ $letter)) {\n        $c++;\n      }\n    }\n    if ($c == $n) {\n      $r[]\
    \ = $word;\n    }\n  }\n  return $r;\n}\necho implode(select_words(\"Mary had\
    \ a little lamb\", 4), ',') . \"\\n\";\necho implode(select_words(\"Mary had a\
    \ little lamb\", 3), ',') . \"\\n\";\necho implode(select_words(\"simple white\
    \ space\", 2), ',') . \"\\n\";\necho implode(select_words(\"Hello world\", 4),\
    \ ',') . \"\\n\";\necho implode(select_words(\"Uncle sam\", 3), ',') . \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: implode(): Argument #2 ($array) must\
    \ be of type ?array, string given in /tmp/tmpefqytshh.php:37\nStack trace:\n#0\
    \ /tmp/tmpefqytshh.php(37): implode(Array, ',')\n#1 {main}\n  thrown in /tmp/tmpefqytshh.php\
    \ on line 37\n"
  timestamp: 1660004052
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    if\
    \ ($s == null) return array();\n    $consonants = array('b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z');\n\
    \    $a = explode(\" \", $s);\n    $res = array();\n    foreach ($a as $k => $v)\
    \ {\n        $nCon = 0;\n        $v = strtolower($v);\n        for ($i = 0; $i\
    \ < strlen($v); $i++) {\n            if (in_array($v[$i], $consonants)) $nCon++;\n\
    \        }\n        if ($nCon == $n) $res[] = $v;\n    }\n    return $res;\n}\n\
    function candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcgo4e7w_.php:39\n\
    Stack trace:\n#0 /tmp/tmpcgo4e7w_.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpcgo4e7w_.php\
    \ on line 39\n"
  timestamp: 1660004052
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $result\
    \ = [];\n    $vowels = array('a', 'e', 'i', 'o', 'u');\n    $words = explode('\
    \ ', $s);\n    foreach ($words as $word) {\n        $wordVowels = array_intersect(str_split($word),\
    \ $vowels);\n        $wordLetters = str_split($word);\n        $wordConsonants\
    \ = array_diff($wordLetters, $wordVowels);\n        if (count($wordConsonants)\
    \ == $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\nprint_r(select_words(\"Mary had a little lamb\", 4));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => little\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpz7ql1478.php:42\nStack trace:\n#0 /tmp/tmpz7ql1478.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpz7ql1478.php on line 42\n"
  timestamp: 1660004052
- exit_code: 0
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      if (preg_match_all('/[^aeiou]/i', $word) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\"\
    , 3));\nprint_r(select_words(\"simple white space\", 2));\nprint_r(select_words(\"\
    Hello world\", 4));\nprint_r(select_words(\"Uncle sam\", 3));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => little\n)\nArray\n(\n    [0] => Mary\n    [1] => lamb\n\
    )\nArray\n(\n)\nArray\n(\n    [0] => world\n)\nArray\n(\n    [0] => Uncle\n)\n"
  timestamp: 1660004052
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n}\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmi5evlgd.php:25\n\
    Stack trace:\n#0 /tmp/tmpmi5evlgd.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpmi5evlgd.php\
    \ on line 25\n"
  timestamp: 1660004052
- exit_code: 0
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $result\
    \ = [];\n    $array = preg_split('/ /', $s);\n    foreach ($array as $word) {\n\
    \        if (preg_match_all('/[bcdfghjklmnpqrstvwxyz]/i', $word, $matches) ===\
    \ $n) {\n            $result[] = $word;\n        }\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004052
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n\t$words\
    \ = explode(\" \", $s);\n\t$result = [];\n\tforeach ($words as $word) {\n\t\t\
    if (substr_count($word, \"a\") + substr_count($word, \"e\") + substr_count($word,\
    \ \"i\") + substr_count($word, \"o\") + substr_count($word, \"u\") == $n) {\n\t\
    \t\t$result[] = $word;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbn5lsfqz.php:34\n\
    Stack trace:\n#0 /tmp/tmpbn5lsfqz.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpbn5lsfqz.php\
    \ on line 34\n"
  timestamp: 1660004052
- exit_code: 0
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr_s\
    \ = explode(\" \", $s);\n    $arr_s_consonants = [];\n    foreach ($arr_s as $index\
    \ => $value) {\n        $vowels = preg_match_all('/[aeiou]/i', $value, $matches);\n\
    \        $consonants = strlen($value) - $vowels;\n        if ($consonants == $n)\
    \ {\n            $arr_s_consonants[] = $value;\n        }\n    }\n    return $arr_s_consonants;\n\
    }\n\necho \"<pre>\";\nprint_r(select_words(\"Mary had a little lamb\", 4));\n\
    echo \"</pre>\";\n\necho \"<pre>\";\nprint_r(select_words(\"Mary had a little\
    \ lamb\", 3));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(select_words(\"simple\
    \ white space\", 2));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(select_words(\"\
    Hello world\", 4));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(select_words(\"\
    Uncle sam\", 3));\necho \"</pre>\";\nfunction candidate(...$args) {\n    return\
    \ select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => little\n)\n</pre><pre>Array\n(\n    [0] => Mary\n\
    \    [1] => lamb\n)\n</pre><pre>Array\n(\n)\n</pre><pre>Array\n(\n    [0] => world\n\
    )\n</pre><pre>Array\n(\n    [0] => Uncle\n)\n</pre>"
  timestamp: 1660004052
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $s\
    \ = explode(' ', $s);\n    foreach ($s as $word) {\n        $consonants = 0;\n\
    \        $chars = str_split($word);\n        foreach ($chars as $char) {\n   \
    \         if (!in_array($char, ['a', 'e', 'i', 'o', 'u'])) {\n               \
    \ $consonants++;\n            }\n        }\n        if ($consonants == $n) {\n\
    \            $selected[] = $word;\n        }\n    }\n    return $selected ?? [];\n\
    }\n\n$array1 = select_words(\"Mary had a little lamb\", 4);\nvar_dump($array1);\n\
    $array2 = select_words(\"Mary had a little lamb\", 3);\nvar_dump($array2);\n$array3\
    \ = select_words(\"simple white space\", 2);\nvar_dump($array3);\n$array4 = select_words(\"\
    Hello world\", 4);\nvar_dump($array4);\n$array5 = select_words(\"Uncle sam\",\
    \ 3);\nvar_dump($array5);\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(1) {\n  [0]=>\n  string(6) \"little\"\n}\narray(2) {\n  [0]=>\n \
    \ string(4) \"Mary\"\n  [1]=>\n  string(4) \"lamb\"\n}\narray(0) {\n}\narray(1)\
    \ {\n  [0]=>\n  string(5) \"world\"\n}\narray(0) {\n}\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp3vark0fx.php:54\nStack trace:\n#0 /tmp/tmp3vark0fx.php(59):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp3vark0fx.php on line 54\n"
  timestamp: 1660004052
- exit_code: 0
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    //\
    \ write your code here\n    $arr = [];\n    $vowels = \"aeiou\";\n    $strArr\
    \ = preg_split(\"/[\\s]+/\", $s);\n    $strArr = array_filter($strArr);\n    $strArr\
    \ = array_values($strArr);\n    foreach ($strArr as $word) {\n        $wordArr\
    \ = str_split($word);\n        $nConsec = 0;\n        foreach ($wordArr as $char)\
    \ {\n            if (!stristr($vowels, $char)) {\n                $nConsec++;\n\
    \            }\n        }\n        if ($nConsec == $n) {\n            $arr[] =\
    \ $word;\n        }\n    }\n    return $arr;\n}\n\n$arr = select_words(\"Mary\
    \ had a little lamb\", 4);\nprint_r($arr);\necho \"\\n\";\n\n$arr = select_words(\"\
    Mary had a little lamb\", 3);\nprint_r($arr);\necho \"\\n\";\n\n$arr = select_words(\"\
    simple white space\", 2);\nprint_r($arr);\necho \"\\n\";\n\n$arr = select_words(\"\
    Hello world\", 4);\nprint_r($arr);\necho \"\\n\";\n\n$arr = select_words(\"Uncle\
    \ sam\", 3);\nprint_r($arr);\necho \"\\n\";\n\nfunction candidate(...$args) {\n\
    \    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => little\n)\n\nArray\n(\n    [0] => Mary\n    [1] =>\
    \ lamb\n)\n\nArray\n(\n)\n\nArray\n(\n    [0] => world\n)\n\nArray\n(\n    [0]\
    \ => Uncle\n)\n\n"
  timestamp: 1660004052
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  // your\
    \ code here\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3jd8hlb9.php:27\n\
    Stack trace:\n#0 /tmp/tmp3jd8hlb9.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp3jd8hlb9.php\
    \ on line 27\n"
  timestamp: 1660004052
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n\t// your\
    \ code\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpm4uial1q.php:26\n\
    Stack trace:\n#0 /tmp/tmpm4uial1q.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpm4uial1q.php\
    \ on line 26\n"
  timestamp: 1660004052
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $s1\
    \ = array_filter(explode(' ', $s));\n    $consonants = ['b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n\
    \    $result = [];\n    foreach ($s1 as $item) {\n        $count = 0;\n      \
    \  for ($i = 0; $i < strlen($item); $i++) {\n            if (in_array($item[$i],\
    \ $consonants)) {\n                $count++;\n            }\n        }\n     \
    \   if ($count == $n) {\n            $result[] = $item;\n        }\n    }\n  \
    \  return $result;\n}\n\n$s = 'Mary had a little lamb';\n$n = 4;\nprint_r(select_words($s,\
    \ $n));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => little\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpmjusbl6o.php:45\nStack trace:\n#0 /tmp/tmpmjusbl6o.php(53):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpmjusbl6o.php on line 45\n"
  timestamp: 1660004052
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $words\
    \ = preg_split('/\\s+/', $s);\n  $result = [];\n  foreach ($words as $word) {\n\
    \    if (strlen($word) - get_vowel_count($word) == $n) {\n      $result[] = $word;\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_vowel_count()\
    \ in /tmp/tmpmazecijw.php:22\nStack trace:\n#0 /tmp/tmpmazecijw.php(30): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpmazecijw.php(34): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpmazecijw.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpmazecijw.php\
    \ on line 22\n"
  timestamp: 1660004052
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $vowels\
    \ = array('a', 'e', 'i', 'o', 'u');\n  $result = array();\n  $sArr = explode('\
    \ ', $s);\n  foreach ($sArr as $word) {\n    $cons = str_split($word);\n    $count\
    \ = 0;\n    foreach ($cons as $v) {\n      if (!in_array($v, $vowels)) {\n   \
    \     $count++;\n      }\n    }\n    if ($count == $n) {\n      $result[] = $word;\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl95qr3jf.php:46\n\
    Stack trace:\n#0 /tmp/tmpl95qr3jf.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpl95qr3jf.php\
    \ on line 46\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr\
    \ = explode(\" \", $s);\n    $ret = [];\n    foreach ($arr as $word) {\n     \
    \   if (count_consonants($word) == $n) {\n            $ret[] = $word;\n      \
    \  }\n    }\n    return $ret;\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmpmd9ik6ek.php:22\nStack trace:\n#0 /tmp/tmpmd9ik6ek.php(29): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpmd9ik6ek.php(33): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpmd9ik6ek.php(42): test()\n#3 {main}\n  thrown in /tmp/tmpmd9ik6ek.php\
    \ on line 22\n"
  timestamp: 1660004052
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $words\
    \ = [];\n    $a = explode(' ', $s);\n    foreach ($a as $word) {\n        $consonants\
    \ = preg_replace('/[aeiou]/', '', $word);\n        if (strlen($consonants) ==\
    \ $n) {\n            $words[] = $word;\n        }\n    }\n    return $words;\n\
    }\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => little\n)\nArray\n(\n    [0] => Mary\n    [1] => lamb\n\
    )\nArray\n(\n)\nArray\n(\n    [0] => world\n)\nArray\n(\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpacz_pvef.php:43\nStack trace:\n#0 /tmp/tmpacz_pvef.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpacz_pvef.php on line 43\n"
  timestamp: 1660004052
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    //\
    \ Your code here\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe26kdf6o.php:27\n\
    Stack trace:\n#0 /tmp/tmpe26kdf6o.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpe26kdf6o.php\
    \ on line 27\n"
  timestamp: 1660004052
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n\t$consonants\
    \ = array(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    );\n\t$words = explode(\" \", $s);\n\t$results = array();\n\tforeach ($words as\
    \ $word) {\n\t\t$count = 0;\n\t\tforeach (str_split($word) as $letter) {\n\t\t\
    \tif (in_array($letter, $consonants)) {\n\t\t\t\t$count++;\n\t\t\t}\n\t\t}\n\t\
    \tif ($count == $n) {\n\t\t\tarray_push($results, $word);\n\t\t}\n\t}\n\treturn\
    \ $results;\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpucu5wwl2.php:41\n\
    Stack trace:\n#0 /tmp/tmpucu5wwl2.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpucu5wwl2.php\
    \ on line 41\n"
  timestamp: 1660004052
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $s\
    \ = str_split($s);\n    $r = [];\n    $v = false;\n    foreach ($s as $c) {\n\
    \        if ($c == ' ') {\n            if ($v) {\n                $v = false;\n\
    \                $r[] = $w;\n            }\n            $p = 0;\n            $w\
    \ = '';\n        } else {\n            $w .= $c;\n            if (in_array($c,\
    \ ['a', 'e', 'i', 'o', 'u'])) {\n                $p++;\n            }\n      \
    \      if ($p == $n) {\n                $v = true;\n            }\n        }\n\
    \    }\n    if ($v) {\n        $r[] = $w;\n    }\n    return $r;\n}\n\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $w in /tmp/tmphy4jwxq5.php on line 31\n\n\
    Warning: Undefined variable $p in /tmp/tmphy4jwxq5.php on line 35\n\nWarning:\
    \ Undefined variable $p in /tmp/tmphy4jwxq5.php on line 33\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmphy4jwxq5.php:51\nStack trace:\n#0 /tmp/tmphy4jwxq5.php(60):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmphy4jwxq5.php on line 51\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n\t\n\t\
    $array = explode(\" \", $s);\n\t$output = array();\n\t$consonants = array('b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z');\n\t\n\tforeach($array as $word) {\n\t\t$i = 0;\n\t\tforeach($consonants\
    \ as $letter) {\n\t\t\tif(strrpos($word, $letter) != 0) {\n\t\t\t\t$i++;\n\t\t\
    \t}\n\t\t}\n\t\tif($i == $n) {\n\t\t\tarray_push($output, $word);\n\t\t}\n\t}\n\
    \t\n\tprint_r($output);\n}\n\nselect_words(\"Mary had a little lamb\", 4);\nselect_words(\"\
    Mary had a little lamb\", 3);\nselect_words(\"simple white space\", 2);\nselect_words(\"\
    Hello world\", 4);\nselect_words(\"Uncle sam\", 3);\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => white\n    [1] => space\n\
    )\nArray\n(\n)\nArray\n(\n    [0] => Uncle\n)\nArray\n(\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpgclsjjj8.php:49\nStack trace:\n#0 /tmp/tmpgclsjjj8.php(58):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpgclsjjj8.php on line 49\n"
  timestamp: 1660004052
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr\
    \ = explode(\" \", $s);\n    $array = [];\n    foreach ($arr as $value) {\n  \
    \      $val = preg_replace(\"/[^a-zA-Z]/\", \"\", $value);\n        if (substr_count($val,\
    \ \"a\") + substr_count($val, \"e\") + substr_count($val, \"i\") +\n         \
    \   substr_count($val, \"o\") + substr_count($val, \"u\") == $n) {\n         \
    \   $array[] = $value;\n        }\n    }\n    return $array;\n}\n$input1 = \"\
    Mary had a little lamb\";\n$input2 = \"simple white space\";\n$input3 = \"Hello\
    \ world\";\n$input4 = \"Uncle sam\";\n$n1 = 4;\n$n2 = 3;\n$n3 = 4;\n$n4 = 3;\n\
    print_r(select_words($input1, $n1));\nprint_r(select_words($input2, $n2));\nprint_r(select_words($input3,\
    \ $n3));\nprint_r(select_words($input4, $n4));\nfunction candidate(...$args) {\n\
    \    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmptxxewsjw.php:47\nStack trace:\n#0 /tmp/tmptxxewsjw.php(56):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmptxxewsjw.php on line 47\n"
  timestamp: 1660004052
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $s\
    \ = explode(' ', $s);\n    $out = [];\n    foreach ($s as $word) {\n        $vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n        $vowelsCount = 0;\n        for ($i = 0;\
    \ $i < strlen($word); $i++) {\n            if (in_array($word[$i], $vowels)) {\n\
    \                $vowelsCount++;\n            }\n        }\n        if (strlen($word)\
    \ - $vowelsCount == $n) {\n            $out[] = $word;\n        }\n    }\n   \
    \ return $out;\n}\necho implode(', ', select_words(\"Mary had a little lamb\"\
    , 4)) . PHP_EOL;\necho implode(', ', select_words(\"Mary had a little lamb\",\
    \ 3)) . PHP_EOL;\necho implode(', ', select_words(\"simple white space\", 2))\
    \ . PHP_EOL;\necho implode(', ', select_words(\"Hello world\", 4)) . PHP_EOL;\n\
    echo implode(', ', select_words(\"Uncle sam\", 3)) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "little\nMary, lamb\n\nworld\n\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmphhn7lbg5.php:49\nStack trace:\n#0 /tmp/tmphhn7lbg5.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmphhn7lbg5.php on line 49\n"
  timestamp: 1660004052
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $words\
    \ = explode(' ', $s);\n  $vowels = array('a', 'e', 'i', 'o', 'u');\n  $result\
    \ = array();\n  foreach ($words as $word) {\n    $count = 0;\n    $word = strtolower($word);\n\
    \    for ($i = 0; $i < strlen($word); $i++) {\n      if (!in_array($word[$i],\
    \ $vowels)) {\n        $count++;\n      }\n    }\n    if ($count == $n) {\n  \
    \    $result[] = $word;\n    }\n  }\n  return $result;\n}\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\necho \"\\n\";\nprint_r(select_words(\"Mary had\
    \ a little lamb\", 3));\necho \"\\n\";\nprint_r(select_words(\"simple white space\"\
    , 2));\necho \"\\n\";\nprint_r(select_words(\"Hello world\", 4));\necho \"\\n\"\
    ;\nprint_r(select_words(\"Uncle sam\", 3));\necho \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => little\n)\n\nArray\n(\n    [0] => mary\n    [1] =>\
    \ lamb\n)\n\nArray\n(\n)\n\nArray\n(\n    [0] => world\n)\n\nArray\n(\n    [0]\
    \ => uncle\n)\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj3892xuk.php:53\n\
    Stack trace:\n#0 /tmp/tmpj3892xuk.php(61): test()\n#1 {main}\n  thrown in /tmp/tmpj3892xuk.php\
    \ on line 53\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  if (preg_match_all('/[aeiou]/i',\
    \ $s, $m) === false) return [];\n  $s = str_replace(' ', '', $s);\n  return preg_grep(\"\
    /^[^aeiou]{$n}$/i\", str_split($s));\n}\nfunction candidate(...$args) {\n    return\
    \ select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplfnr51tu.php:28\n\
    Stack trace:\n#0 /tmp/tmplfnr51tu.php(37): test()\n#1 {main}\n  thrown in /tmp/tmplfnr51tu.php\
    \ on line 28\n"
  timestamp: 1660004052
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $words\
    \ = explode(' ', $s);\n    $results = [];\n    foreach ($words as $word) {\n \
    \       if (substr_count($word, 'a') + substr_count($word, 'e') + substr_count($word,\
    \ 'i') + substr_count($word, 'o') + substr_count($word, 'u') == $n) {\n      \
    \      $results[] = $word;\n        }\n    }\n    return $results;\n}\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\"\
    , 3));\nprint_r(select_words(\"simple white space\", 2));\nprint_r(select_words(\"\
    Hello world\", 4));\nprint_r(select_words(\"Uncle sam\", 3));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpw6zsp568.php:38\nStack trace:\n#0 /tmp/tmpw6zsp568.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpw6zsp568.php on line 38\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $result\
    \ = [];\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n\
    \    foreach ($words as $word) {\n        $count = 0;\n        for ($i = 0; $i\
    \ < strlen($word); $i++) {\n            if (!in_array($word[$i], $vowels)) {\n\
    \                $count++;\n            }\n        }\n        if ($count == $n)\
    \ {\n            $result[] = $word;\n        }\n    }\n    return $result;\n}\n\
    \nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => little\n)\nArray\n(\n    [0] => Mary\n    [1] => lamb\n\
    )\nArray\n(\n)\nArray\n(\n    [0] => world\n)\nArray\n(\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpaqddkei5.php:50\nStack trace:\n#0 /tmp/tmpaqddkei5.php(55):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpaqddkei5.php on line 50\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $words\
    \ = explode(' ', $s);\n  $result = [];\n  foreach ($words as $word) {\n    if\
    \ (preg_match('/[aeiou]/i', $word)) {\n      $consonants = substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u');\n      if ($consonants == $n) {\n        $result[]\
    \ = $word;\n      }\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoz21fdib.php:37\n\
    Stack trace:\n#0 /tmp/tmpoz21fdib.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpoz21fdib.php\
    \ on line 37\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n\t$res\
    \ = [];\n\t$arr = explode(' ', $s);\n\tfor ($i = 0; $i < count($arr); $i++) {\n\
    \t\tif (substr_count($arr[$i], 'a') == 0 \n\t\t\t&& substr_count($arr[$i], 'e')\
    \ == 0 \n\t\t\t&& substr_count($arr[$i], 'i') == 0 \n\t\t\t&& substr_count($arr[$i],\
    \ 'o') == 0 \n\t\t\t&& substr_count($arr[$i], 'u') == 0) {\n\t\t\tif (strlen($arr[$i])\
    \ == $n) {\n\t\t\t\tarray_push($res, $arr[$i]);\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ $res;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmp3wftlu3p.php:45\nStack trace:\n\
    #0 /tmp/tmp3wftlu3p.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp3wftlu3p.php\
    \ on line 45\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $vowels\
    \ = array('a', 'e', 'i', 'o', 'u');\n  $result = array();\n  $words = explode('\
    \ ', $s);\n  foreach ($words as $word) {\n    $consonants = 0;\n    $len = strlen($word);\n\
    \    for ($i = 0; $i < $len; $i++) {\n      if (!in_array($word[$i], $vowels))\
    \ {\n        $consonants++;\n      }\n    }\n    if ($consonants == $n) {\n  \
    \    $result[] = $word;\n    }\n  }\n  return $result;\n}\necho implode(', ',\
    \ select_words(\"Mary had a little lamb\", 4));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "little\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphebpvt5c.php:46\n\
    Stack trace:\n#0 /tmp/tmphebpvt5c.php(51): test()\n#1 {main}\n  thrown in /tmp/tmphebpvt5c.php\
    \ on line 46\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    $words = explode(' ', $s);\n    $selected_words\
    \ = [];\n    foreach ($words as $word) {\n        $consonants = 0;\n        for\
    \ ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i], $vowels))\
    \ {\n                $consonants++;\n            }\n        }\n        if ($consonants\
    \ == $n) {\n            $selected_words[] = $word;\n        }\n    }\n    return\
    \ $selected_words;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa0_ofdko.php:45\n\
    Stack trace:\n#0 /tmp/tmpa0_ofdko.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpa0_ofdko.php\
    \ on line 45\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  // your\
    \ code goes here\n  $arr = explode(\" \", $s);\n  $words = [];\n  $vowels = ['a',\
    \ 'e', 'i', 'o', 'u'];\n  foreach ($arr as $word) {\n    $count = 0;\n    for\
    \ ($i = 0; $i < strlen($word); $i++) {\n      if (!in_array($word[$i], $vowels))\
    \ {\n        $count++;\n      }\n    }\n    if ($count == $n) {\n      $words[]\
    \ = $word;\n    }\n  }\n  return $words;\n}\nvar_dump(select_words(\"Mary had\
    \ a little lamb\", 4));\nvar_dump(select_words(\"Mary had a little lamb\", 3));\n\
    var_dump(select_words(\"simple white space\", 2));\nvar_dump(select_words(\"Hello\
    \ world\", 4));\nvar_dump(select_words(\"Uncle sam\", 3));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(1) {\n  [0]=>\n  string(6) \"little\"\n}\narray(2) {\n  [0]=>\n \
    \ string(4) \"Mary\"\n  [1]=>\n  string(4) \"lamb\"\n}\narray(0) {\n}\narray(1)\
    \ {\n  [0]=>\n  string(5) \"world\"\n}\narray(0) {\n}\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpalwccn6w.php:50\nStack trace:\n#0 /tmp/tmpalwccn6w.php(55):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpalwccn6w.php on line 50\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\";\n    $consonants_array = str_split($consonants);\n\
    \    $s_array = explode(\" \", $s);\n    $return_array = [];\n    for ($i = 0;\
    \ $i < count($s_array); $i++) {\n        $count = 0;\n        for ($j = 0; $j\
    \ < strlen($s_array[$i]); $j++) {\n            if (in_array($s_array[$i][$j],\
    \ $consonants_array)) {\n                $count++;\n            }\n        }\n\
    \        if ($count == $n) {\n            array_push($return_array, $s_array[$i]);\n\
    \        }\n    }\n    return $return_array;\n}\nprint_r(select_words(\"Mary had\
    \ a little lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\", 3));\n\
    print_r(select_words(\"simple white space\", 2));\nprint_r(select_words(\"Hello\
    \ world\", 4));\nprint_r(select_words(\"Uncle sam\", 3));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => little\n)\nArray\n(\n    [0] => lamb\n)\nArray\n(\n\
    )\nArray\n(\n    [0] => world\n)\nArray\n(\n    [0] => Uncle\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpanvu5t1y.php:47\nStack trace:\n\
    #0 /tmp/tmpanvu5t1y.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpanvu5t1y.php\
    \ on line 47\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n\t\n}\n\
    \nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjduqeqcv.php:27\n\
    Stack trace:\n#0 /tmp/tmpjduqeqcv.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpjduqeqcv.php\
    \ on line 27\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $a =\
    \ [];\n  $words = explode(' ', $s);\n  $len = count($words);\n  for ($i = 0; $i\
    \ < $len; $i++) {\n    $word = $words[$i];\n    $num = 0;\n    $word_len = strlen($word);\n\
    \    for ($j = 0; $j < $word_len; $j++) {\n      if (!is_vowel($word[$j])) $num++;\n\
    \    }\n    if ($num == $n) array_push($a, $word);\n  }\n  return $a;\n}\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_vowel() in\
    \ /tmp/tmpo9wswbrv.php:27\nStack trace:\n#0 /tmp/tmpo9wswbrv.php(34): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpo9wswbrv.php(38): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpo9wswbrv.php(47): test()\n#3 {main}\n  thrown in /tmp/tmpo9wswbrv.php\
    \ on line 27\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n\t$arr\
    \ = [];\n\t$s = explode(' ', $s);\n\tforeach ($s as $word) {\n\t\tif (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n\t\t\t$arr[] = $word;\n\t\t}\n\t}\n\
    \treturn $arr;\n}\nprint_r(select_words(\"Mary had a little lamb\", 4));\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6bliq3j1.php:34\n\
    Stack trace:\n#0 /tmp/tmp6bliq3j1.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp6bliq3j1.php\
    \ on line 34\n"
  timestamp: 1660004053
- exit_code: 0
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n\t$s =\
    \ preg_replace('/[^a-zA-Z ]/', '', $s);\n\t$words = explode(' ', $s);\n\t$count\
    \ = 0;\n\t$final_arr = [];\n\tfor ($i = 0; $i < count($words); $i++) {\n\t\t$cur_word\
    \ = $words[$i];\n\t\t$cur_word = strtolower($cur_word);\n\t\t$count = 0;\n\t\t\
    for ($j = 0; $j < strlen($cur_word); $j++) {\n\t\t\tif ($cur_word[$j] !== 'a'\
    \ && $cur_word[$j] !== 'e' && $cur_word[$j] !== 'i' && $cur_word[$j] !== 'o' &&\
    \ $cur_word[$j] !== 'u') {\n\t\t\t\t$count++;\n\t\t\t}\n\t\t}\n\t\tif ($count\
    \ === $n) {\n\t\t\tarray_push($final_arr, $words[$i]);\n\t\t}\n\t}\n\treturn $final_arr;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $result\
    \ = [];\n  $words = explode(' ', $s);\n  foreach ($words as $word) {\n    if (consonants_count($word)\
    \ == $n) {\n      $result[] = $word;\n    }\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonants_count()\
    \ in /tmp/tmp_ulns5_5.php:22\nStack trace:\n#0 /tmp/tmp_ulns5_5.php(30): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp_ulns5_5.php(34): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp_ulns5_5.php(43): test()\n#3 {main}\n  thrown in /tmp/tmp_ulns5_5.php\
    \ on line 22\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n\t$result\
    \ = array();\n\t$s = explode(\" \", $s);\n\t\n\tfor ($i = 0; $i < count($s); $i++)\
    \ {\n\t\tif (consonants($s[$i]) == $n) {\n\t\t\tarray_push($result, $s[$i]);\n\
    \t\t}\n\t}\n\t\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonants()\
    \ in /tmp/tmp7r0x72y7.php:23\nStack trace:\n#0 /tmp/tmp7r0x72y7.php(32): select_words(Array,\
    \ 4)\n#1 /tmp/tmp7r0x72y7.php(36): candidate('Mary had a litt...', 4)\n#2 /tmp/tmp7r0x72y7.php(45):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp7r0x72y7.php on line 23\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $s\
    \ = str_replace(' ', '', $s);\n    $vowels = array('a', 'e', 'i', 'o', 'u');\n\
    \    $arr = [];\n    for ($i = 0; $i < strlen($s); $i++) {\n        if (!in_array($s[$i],\
    \ $vowels)) {\n            $arr[] = $s[$i];\n        }\n    }\n    return array_count_values($arr);\n\
    }\nprint_r(select_words(\"Mary had a little lamb\", 4));\necho \"<br>\";\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\necho \"<br>\";\nprint_r(select_words(\"simple\
    \ white space\", 2));\necho \"<br>\";\nprint_r(select_words(\"Hello world\", 4));\n\
    echo \"<br>\";\nprint_r(select_words(\"Uncle sam\", 3));\necho \"<br>\";\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [M] => 1\n    [r] => 1\n    [y] => 1\n    [h] => 1\n    [d]\
    \ => 1\n    [l] => 3\n    [t] => 2\n    [m] => 1\n    [b] => 1\n)\n<br>Array\n\
    (\n    [M] => 1\n    [r] => 1\n    [y] => 1\n    [h] => 1\n    [d] => 1\n    [l]\
    \ => 3\n    [t] => 2\n    [m] => 1\n    [b] => 1\n)\n<br>Array\n(\n    [s] =>\
    \ 2\n    [m] => 1\n    [p] => 2\n    [l] => 1\n    [w] => 1\n    [h] => 1\n  \
    \  [t] => 1\n    [c] => 1\n)\n<br>Array\n(\n    [H] => 1\n    [l] => 3\n    [w]\
    \ => 1\n    [r] => 1\n    [d] => 1\n)\n<br>Array\n(\n    [U] => 1\n    [n] =>\
    \ 1\n    [c] => 1\n    [l] => 1\n    [s] => 1\n    [m] => 1\n)\n<br>\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmplredc_m3.php:44\nStack trace:\n\
    #0 /tmp/tmplredc_m3.php(53): test()\n#1 {main}\n  thrown in /tmp/tmplredc_m3.php\
    \ on line 44\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n\t$res\
    \ = array();\n\t$arr = preg_split('/\\s+/', $s);\n\tforeach ($arr as $i => $word)\
    \ {\n\t\tif (substr_count($word, 'a') + substr_count($word, 'e') + substr_count($word,\
    \ 'i') + substr_count($word, 'o') + substr_count($word, 'u') == $n) {\n\t\t\t\
    $res[] = $word;\n\t\t}\n\t}\n\treturn $res;\n}\necho '<pre>';\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\"\
    , 3));\nprint_r(select_words(\"simple white space\", 2));\nprint_r(select_words(\"\
    Hello world\", 4));\nprint_r(select_words(\"Uncle sam\", 3));\necho '</pre>';\n\
    function candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] =>\
    \ white\n    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n</pre>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpu0pj1isb.php:40\nStack trace:\n#0 /tmp/tmpu0pj1isb.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpu0pj1isb.php on line 40\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $words\
    \ = explode(' ', $s);\n  $matches = [];\n  foreach ($words as $word) {\n    if\
    \ (is_consonant($word, $n)) {\n      $matches[] = $word;\n    }\n  }\n  return\
    \ $matches;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_consonant()\
    \ in /tmp/tmp91lb8r9n.php:22\nStack trace:\n#0 /tmp/tmp91lb8r9n.php(30): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp91lb8r9n.php(34): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp91lb8r9n.php(43): test()\n#3 {main}\n  thrown in /tmp/tmp91lb8r9n.php\
    \ on line 22\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($arr as $word) {\n  \
    \      if (check_consonants($word, $n)) {\n            $result[] = $word;\n  \
    \      }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n  \
    \  return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function check_consonants()\
    \ in /tmp/tmp04j_endc.php:22\nStack trace:\n#0 /tmp/tmp04j_endc.php(30): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp04j_endc.php(34): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp04j_endc.php(43): test()\n#3 {main}\n  thrown in /tmp/tmp04j_endc.php\
    \ on line 22\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    //\
    \ write your code here\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7znxpipt.php:26\n\
    Stack trace:\n#0 /tmp/tmp7znxpipt.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp7znxpipt.php\
    \ on line 26\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n\t$vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\t$consonants = [];\n\t$array = explode(\"\
    \ \", $s);\n\tforeach ($array as $word) {\n\t\t$count = 0;\n\t\tfor ($i = 0; $i\
    \ < strlen($word); $i++) {\n\t\t\tif (!in_array($word[$i], $vowels)) {\n\t\t\t\
    \t$count++;\n\t\t\t}\n\t\t}\n\t\tif ($count == $n) {\n\t\t\tarray_push($consonants,\
    \ $word);\n\t\t}\n\t}\n\treturn $consonants;\n}\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp324rmvpj.php:44\n\
    Stack trace:\n#0 /tmp/tmp324rmvpj.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp324rmvpj.php\
    \ on line 44\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n\t$vowels\
    \ = array('a', 'e', 'i', 'o', 'u');\n\t$result = array();\n\t$words = explode('\
    \ ', $s);\n\tforeach ($words as $word) {\n\t\t$count = 0;\n\t\tfor ($i = 0; $i\
    \ < strlen($word); $i++) {\n\t\t\tif (!in_array($word[$i], $vowels)) {\n\t\t\t\
    \t$count++;\n\t\t\t}\n\t\t}\n\t\tif ($count == $n) {\n\t\t\t$result[] = $word;\n\
    \t\t}\n\t}\n\treturn $result;\n}\necho \"<pre>\";\nprint_r(select_words(\"Mary\
    \ had a little lamb\", 4));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(select_words(\"\
    simple white space\", 2));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(select_words(\"\
    Hello world\", 4));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(select_words(\"\
    Uncle sam\", 3));\necho \"</pre>\";\nfunction candidate(...$args) {\n    return\
    \ select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => little\n)\n</pre><pre>Array\n(\n    [0] => Mary\n\
    \    [1] => lamb\n)\n</pre><pre>Array\n(\n)\n</pre><pre>Array\n(\n    [0] => world\n\
    )\n</pre><pre>Array\n(\n)\n</pre>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp_3oojvaz.php:63\nStack trace:\n#0 /tmp/tmp_3oojvaz.php(68): test()\n\
    #1 {main}\n  thrown in /tmp/tmp_3oojvaz.php on line 63\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $s\
    \ = str_replace(\" \", \"\", $s);\n    $vowels = \"aeiou\";\n    $arr = [];\n\
    \    for ($i = 0; $i < strlen($s); $i++) {\n        if (strpos($vowels, $s[$i])\
    \ === false) {\n            $arr[] = $s[$i];\n        }\n    }\n    if (count($arr)\
    \ === $n) {\n        return [$s];\n    }\n    return [];\n}\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0vfhpj0c.php:37\n\
    Stack trace:\n#0 /tmp/tmp0vfhpj0c.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp0vfhpj0c.php\
    \ on line 37\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $result\
    \ = [];\n    $words = explode(' ', $s);\n    foreach ($words as $word) {\n   \
    \     if (consonants_count($word) == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonants_count()\
    \ in /tmp/tmptk80ysit.php:22\nStack trace:\n#0 /tmp/tmptk80ysit.php(30): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmptk80ysit.php(34): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmptk80ysit.php(43): test()\n#3 {main}\n  thrown in /tmp/tmptk80ysit.php\
    \ on line 22\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $result\
    \ = [];\n    $words = explode(' ', $s);\n    foreach ($words as $word) {\n   \
    \     if (countConsonants($word) == $n) {\n            $result[] = $word;\n  \
    \      }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n  \
    \  return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function countConsonants()\
    \ in /tmp/tmpg69xvi_b.php:22\nStack trace:\n#0 /tmp/tmpg69xvi_b.php(30): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpg69xvi_b.php(34): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpg69xvi_b.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpg69xvi_b.php\
    \ on line 22\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  // TODO:\
    \ Implement me!\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp90y_b8kv.php:27\n\
    Stack trace:\n#0 /tmp/tmp90y_b8kv.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp90y_b8kv.php\
    \ on line 27\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n\t// TODO\
    \ - write your code below\n\t$res = [];\n\t$letters = str_split($s);\n\t$count\
    \ = 0;\n\t$current = \"\";\n\t$isWord = false;\n\tforeach ($letters as $l) {\n\
    \t\tif (in_array($l, [' ', ',', '.', ';', '?', '!', ')', ':', '-'])) {\n\t\t\t\
    if (strlen($current) > 0) {\n\t\t\t\tif ($count == $n) {\n\t\t\t\t\t$res[] = $current;\n\
    \t\t\t\t}\n\t\t\t\t$count = 0;\n\t\t\t\t$current = \"\";\n\t\t\t}\n\t\t} else\
    \ {\n\t\t\t$current .= $l;\n\t\t\tif (!in_array($l, ['a', 'e', 'i', 'o', 'u',\
    \ 'y'])) {\n\t\t\t\t$count++;\n\t\t\t}\n\t\t}\n\t}\n\tif (strlen($current) > 0)\
    \ {\n\t\tif ($count == $n) {\n\t\t\t$res[] = $current;\n\t\t}\n\t}\n\treturn $res;\n\
    }\n$test = \"Mary had a little lamb\";\n$n = 4;\nvar_dump(select_words($test,\
    \ $n));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(1) {\n  [0]=>\n  string(6) \"little\"\n}\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpgrmz7thp.php:57\nStack trace:\n#0 /tmp/tmpgrmz7thp.php(65):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpgrmz7thp.php on line 57\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $arr\
    \ = [];\n  if (strlen($s) == 0) return $arr;\n  $strs = explode(\" \", $s);\n\
    \  foreach ($strs as $str) {\n    if (hasXConsonants($str, $n)) $arr[] = $str;\n\
    \  }\n  return $arr;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function hasXConsonants()\
    \ in /tmp/tmpdnfe12us.php:23\nStack trace:\n#0 /tmp/tmpdnfe12us.php(29): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpdnfe12us.php(33): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpdnfe12us.php(42): test()\n#3 {main}\n  thrown in /tmp/tmpdnfe12us.php\
    \ on line 23\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $a\
    \ = explode(\" \", $s);\n    $consonants = array(\"b\", \"c\", \"d\", \"f\", \"\
    g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"\
    t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n    $result = array();\n    foreach\
    \ ($a as $word) {\n        $j = 0;\n        for ($i = 0; $i < strlen($word); $i++)\
    \ {\n            if (in_array($word[$i], $consonants)) {\n                $j++;\n\
    \            }\n        }\n        if ($j == $n) {\n            array_push($result,\
    \ $word);\n        }\n    }\n    return $result;\n}\nprint_r(select_words(\"Mary\
    \ had a little lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\",\
    \ 3));\nprint_r(select_words(\"simple white space\", 2));\nprint_r(select_words(\"\
    Hello world\", 4));\nprint_r(select_words(\"Uncle sam\", 3));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => little\n)\nArray\n(\n    [0] => lamb\n)\nArray\n(\n\
    )\nArray\n(\n    [0] => world\n)\nArray\n(\n    [0] => Uncle\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmps7ax1a3r.php:46\nStack trace:\n\
    #0 /tmp/tmps7ax1a3r.php(54): test()\n#1 {main}\n  thrown in /tmp/tmps7ax1a3r.php\
    \ on line 46\n"
  timestamp: 1660004053
- exit_code: 0
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n\t$s =\
    \ preg_replace('/\\s+/', ' ', $s);\n\t$s = preg_replace('/\\s+$/', '', $s);\n\t\
    $words = explode(' ', $s);\n\t$result = array();\n\tforeach ($words as $word)\
    \ {\n\t\tif (preg_match_all('/[^aeiou]/i', $word, $matches) == $n) {\n\t\t\t$result[]\
    \ = $word;\n\t\t}\n\t}\n\treturn $result;\n}\nfunction candidate(...$args) {\n\
    \    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n\t$arr\
    \ = explode(\" \", $s);\n\t$res = [];\n\tforeach ($arr as $key => $value) {\n\t\
    \tif (count_consonants($value) == $n) {\n\t\t\t$res[] = $value;\n\t\t}\n\t}\n\t\
    return $res;\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmp5krj7r2x.php:22\nStack trace:\n#0 /tmp/tmp5krj7r2x.php(29): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp5krj7r2x.php(33): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp5krj7r2x.php(42): test()\n#3 {main}\n  thrown in /tmp/tmp5krj7r2x.php\
    \ on line 22\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    //split\
    \ the string\n    $words = preg_split('/[\\s]+/', $s);\n    $consonants = array();\n\
    \    //loop through each word\n    foreach($words as $word) {\n        //split\
    \ each word again\n        $characters = str_split($word);\n        $count = 0;\n\
    \        //loop through each character of each word\n        foreach($characters\
    \ as $character) {\n            //count the consonants\n            if(isConsonant($character))\
    \ {\n                $count++;\n            }\n        }\n        //if the count\
    \ is equal to $n, push the word to the consonants array\n        if($count ==\
    \ $n) {\n            array_push($consonants, $word);\n        }\n    }\n    return\
    \ $consonants;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isConsonant()\
    \ in /tmp/tmp46xcirc_.php:30\nStack trace:\n#0 /tmp/tmp46xcirc_.php(43): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp46xcirc_.php(47): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp46xcirc_.php(56): test()\n#3 {main}\n  thrown in /tmp/tmp46xcirc_.php\
    \ on line 30\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $result\
    \ = [];\n    $words = explode(' ', $s);\n    foreach ($words as $word) {\n   \
    \     if (substr_count($word, 'a') + substr_count($word, 'e') + substr_count($word,\
    \ 'i') + substr_count($word, 'o') + substr_count($word, 'u') == $n) {\n      \
    \      $result[] = $word;\n        }\n    }\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdib4jdbi.php:33\n\
    Stack trace:\n#0 /tmp/tmpdib4jdbi.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpdib4jdbi.php\
    \ on line 33\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      if (substr_count($word, 'a') + substr_count($word, 'e') + substr_count($word,\
    \ 'i') + substr_count($word, 'o') + substr_count($word, 'u') == $n) {\n      \
    \      $result[] = $word;\n        }\n    }\n    return $result;\n}\n\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\"\
    , 3));\nprint_r(select_words(\"simple white space\", 2));\nprint_r(select_words(\"\
    Hello world\", 4));\nprint_r(select_words(\"Uncle sam\", 3));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp48zthz6t.php:39\nStack trace:\n#0 /tmp/tmp48zthz6t.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp48zthz6t.php on line 39\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $words\
    \ = explode(' ', $s);\n    $new_words = [];\n    foreach ($words as $word) {\n\
    \        if (substr_count($word, 'a') + substr_count($word, 'e') + substr_count($word,\
    \ 'i') + substr_count($word, 'o') + substr_count($word, 'u') == $n) {\n      \
    \      $new_words[] = $word;\n        }\n    }\n    return $new_words;\n}\n\n\
    print_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpr783v434.php:39\nStack trace:\n#0 /tmp/tmpr783v434.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpr783v434.php on line 39\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $words\
    \ = explode(' ', $s);\n  $selected_words = [];\n  foreach ($words as $word) {\n\
    \    if (count_consonants($word) === $n) {\n      $selected_words[] = $word;\n\
    \    }\n  }\n  return $selected_words;\n}\n\nfunction candidate(...$args) {\n\
    \    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmpip4u_324.php:22\nStack trace:\n#0 /tmp/tmpip4u_324.php(30): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpip4u_324.php(34): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpip4u_324.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpip4u_324.php\
    \ on line 22\n"
  timestamp: 1660004053
- exit_code: 0
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n\t$s =\
    \ explode(' ', $s);\n\t$c = 0;\n\t$output = [];\n\tforeach ($s as $word) {\n\t\
    \t$c = 0;\n\t\tforeach (str_split($word) as $char) {\n\t\t\t$c += (preg_match('/[aeiou]/i',\
    \ $char)) ? 0 : 1;\n\t\t}\n\t\tif ($c == $n) {\n\t\t\t$output[] = $word;\n\t\t\
    }\n\t}\n\treturn $output;\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $words\
    \ = array();\n    $s = explode(\" \", $s);\n    foreach ($s as $word) {\n    \
    \    if (consonants($word) == $n)\n            $words[] = $word;\n    }\n    return\
    \ $words;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonants()\
    \ in /tmp/tmphl55s22j.php:22\nStack trace:\n#0 /tmp/tmphl55s22j.php(29): select_words(Array,\
    \ 4)\n#1 /tmp/tmphl55s22j.php(33): candidate('Mary had a litt...', 4)\n#2 /tmp/tmphl55s22j.php(42):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmphl55s22j.php on line 22\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $s =\
    \ explode(' ', $s);\n  $n_array = [];\n  $vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \  foreach ($s as $word) {\n    $consonants = 0;\n    for ($i = 0; $i < strlen($word);\
    \ $i++) {\n      if (!in_array($word[$i], $vowels)) {\n        $consonants++;\n\
    \      }\n    }\n    if ($consonants == $n) {\n      $n_array[] = $word;\n   \
    \ }\n  }\n  return $n_array;\n}\n$result = select_words(\"Mary had a little lamb\"\
    , 4);\nprint_r($result);\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => little\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpre9hc4qi.php:46\nStack trace:\n#0 /tmp/tmpre9hc4qi.php(51):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpre9hc4qi.php on line 46\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n\t$split_string\
    \ = explode(\" \", $s);\n\t$matching_array = array();\n\t$vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n\t$consonants = array(\"b\", \"c\", \"d\", \"\
    f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"\
    s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n\tfor ($i = 0; $i < count($split_string);\
    \ $i++) {\n\t\t$counter = 0;\n\t\tfor ($j = 0; $j < strlen($split_string[$i]);\
    \ $j++) {\n\t\t\tif (in_array($split_string[$i][$j], $consonants)) {\n\t\t\t\t\
    $counter++;\n\t\t\t}\n\t\t}\n\t\tif ($counter == $n) {\n\t\t\tarray_push($matching_array,\
    \ $split_string[$i]);\n\t\t}\n\t}\n\treturn $matching_array;\n}\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => little\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpox3jw7n6.php:43\nStack trace:\n#0 /tmp/tmpox3jw7n6.php(51):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpox3jw7n6.php on line 43\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $s =\
    \ explode(' ', $s);\n  $result = [];\n  foreach ($s as $word) {\n    $count =\
    \ 0;\n    foreach (str_split($word) as $letter) {\n      $count += !in_array($letter,\
    \ ['a', 'e', 'i', 'o', 'u', 'y']);\n    }\n    if ($count === $n) {\n      $result[]\
    \ = $word;\n    }\n  }\n  return $result;\n}\n\nprint_r(select_words(\"Mary had\
    \ a little lamb\", 4));\necho '<br />';\nprint_r(select_words(\"Mary had a little\
    \ lamb\", 3));\necho '<br />';\nprint_r(select_words(\"simple white space\", 2));\n\
    echo '<br />';\nprint_r(select_words(\"Hello world\", 4));\necho '<br />';\nprint_r(select_words(\"\
    Uncle sam\", 3));\necho '<br />';\nfunction candidate(...$args) {\n    return\
    \ select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => little\n)\n<br />Array\n(\n    [0] => lamb\n)\n<br\
    \ />Array\n(\n)\n<br />Array\n(\n    [0] => world\n)\n<br />Array\n(\n)\n<br />\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmph2_55p7d.php:49\nStack\
    \ trace:\n#0 /tmp/tmph2_55p7d.php(57): test()\n#1 {main}\n  thrown in /tmp/tmph2_55p7d.php\
    \ on line 49\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    if\
    \ (empty($s)) return array();\n    $s = strtolower($s);\n    $s = preg_replace('#[^a-z]#',\
    \ ' ', $s);\n    $words = preg_split('#\\s+#', $s);\n    $n = (int)$n;\n    if\
    \ ($n == 0) return array();\n    $matches = array();\n    foreach ($words as $word)\
    \ {\n        $vowels = preg_match_all('#[aeiou]#', $word, $out);\n        $consonants\
    \ = strlen($word) - $vowels;\n        if ($consonants == $n) $matches[] = $word;\n\
    \    }\n    return $matches;\n}\nprint_r(select_words(\"Mary had a little lamb\"\
    , 4));\nprint_r(select_words(\"Mary had a little lamb\", 3));\nprint_r(select_words(\"\
    simple white space\", 2));\nprint_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"\
    Uncle sam\", 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => little\n)\nArray\n(\n    [0] => mary\n    [1] => lamb\n\
    )\nArray\n(\n)\nArray\n(\n    [0] => world\n)\nArray\n(\n    [0] => uncle\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmppgo2aqn_.php:44\nStack\
    \ trace:\n#0 /tmp/tmppgo2aqn_.php(52): test()\n#1 {main}\n  thrown in /tmp/tmppgo2aqn_.php\
    \ on line 44\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $words\
    \ = explode(' ', $s);\n  $vowels = ['a', 'e', 'i', 'o', 'u'];\n  $result = [];\n\
    \  foreach ($words as $word) {\n    $consonants = 0;\n    for ($i = 0; $i < strlen($word);\
    \ $i++) {\n      if (!in_array($word[$i], $vowels)) {\n        $consonants++;\n\
    \      }\n    }\n    if ($consonants == $n) {\n      $result[] = $word;\n    }\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8of7mx8m.php:45\n\
    Stack trace:\n#0 /tmp/tmp8of7mx8m.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp8of7mx8m.php\
    \ on line 45\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $result\
    \ = [];\n  $words = explode(' ', $s);\n  foreach ($words as $word) {\n    if (substr_count($word,\
    \ 'a') + substr_count($word, 'e') + substr_count($word, 'i') + substr_count($word,\
    \ 'o') + substr_count($word, 'u') == $n) {\n      $result[] = $word;\n    }\n\
    \  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyxbtc12x.php:33\n\
    Stack trace:\n#0 /tmp/tmpyxbtc12x.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpyxbtc12x.php\
    \ on line 33\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $array\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($array as $item) {\n\
    \        if (substr_count($item, \"a\") + substr_count($item, \"e\") + substr_count($item,\
    \ \"i\") +\n            substr_count($item, \"o\") + substr_count($item, \"u\"\
    ) == $n) {\n            array_push($result, $item);\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuj6mvj31.php:35\n\
    Stack trace:\n#0 /tmp/tmpuj6mvj31.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpuj6mvj31.php\
    \ on line 35\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $sArr\
    \ = explode(\" \", $s);\n  $rArr = [];\n  $matchCount = 0;\n  $vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"];\n  for ($i = 0; $i < count($sArr); $i++) {\n  \
    \  for ($j = 0; $j < strlen($sArr[$i]); $j++) {\n      if (!in_array($sArr[$i][$j],\
    \ $vowels)) {\n        $matchCount++;\n      }\n    }\n    if ($matchCount ==\
    \ $n) {\n      array_push($rArr, $sArr[$i]);\n    }\n    $matchCount = 0;\n  }\n\
    \  return $rArr;\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjn8u3d4i.php:45\n\
    Stack trace:\n#0 /tmp/tmpjn8u3d4i.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpjn8u3d4i.php\
    \ on line 45\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr\
    \ = explode(\" \", $s);\n    $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\"\
    );\n    $result = array();\n    foreach ($arr as $key => $val) {\n        $count\
    \ = 0;\n        for ($i = 0; $i < strlen($val); $i++) {\n            if (!in_array($val[$i],\
    \ $vowels)) {\n                $count++;\n            }\n        }\n        if\
    \ ($count == $n) {\n            array_push($result, $val);\n        }\n    }\n\
    \    return $result;\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphk_dj8kh.php:44\n\
    Stack trace:\n#0 /tmp/tmphk_dj8kh.php(49): test()\n#1 {main}\n  thrown in /tmp/tmphk_dj8kh.php\
    \ on line 44\n"
  timestamp: 1660004053
- exit_code: 0
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $s\
    \ = preg_replace('/[^a-zA-Z ]/', '', $s);\n    $words = explode(' ', $s);\n  \
    \  $filtered_words = array();\n    foreach ($words as $word) {\n        $num_of_consonants\
    \ = 0;\n        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array(strtolower($word[$i]),\
    \ ['a', 'e', 'i', 'o', 'u'])) {\n                $num_of_consonants++;\n     \
    \       }\n        }\n        if ($num_of_consonants == $n) {\n            $filtered_words[]\
    \ = $word;\n        }\n    }\n    return $filtered_words;\n}\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n\t$s =\
    \ trim($s);\n\t$arr1 = explode(\" \", $s);\n\t$count = 0;\n\t$result = array();\n\
    \tforeach ($arr1 as $key => $value) {\n\t\t$count = 0;\n\t\tfor ($i=0; $i < strlen($value);\
    \ $i++) { \n\t\t\tif ($value[$i] == 'a' || $value[$i] == 'e' || $value[$i] ==\
    \ 'i' || $value[$i] == 'o' || $value[$i] == 'u') {\n\t\t\t\t$count++;\n\t\t\t\
    }\n\t\t}\n\t\tif ($count == $n) {\n\t\t\tarray_push($result, $value);\n\t\t}\n\
    \t}\n\treturn $result;\n}\nprint_r(select_words(\"Mary had a little lamb\", 4));\n\
    function candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9pj_43zx.php:42\n\
    Stack trace:\n#0 /tmp/tmp9pj_43zx.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp9pj_43zx.php\
    \ on line 42\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $s\
    \ = str_replace(' ', '', $s);\n    $res = [];\n    $len = strlen($s);\n    $p1\
    \ = 0;\n    $p2 = $len - 1;\n    for ($i = 0; $i < $len; $i++) {\n        if (preg_match('/^[^aeiou]/',\
    \ $s[$i])) {\n            $p1++;\n        }\n        if (preg_match('/^[^aeiou]/',\
    \ $s[$len - $i - 1])) {\n            $p2--;\n        }\n        if ($p1 == $n)\
    \ {\n            $res[] = substr($s, 0, $i + 1);\n        }\n        if ($p2 ==\
    \ $len - $n - 1) {\n            $res[] = substr($s, $len - $i - 1, $i + 1);\n\
    \        }\n    }\n    return $res;\n}\n\n$s = 'Mary had a little lamb';\n$n =\
    \ 4;\nprint_r(select_words($s, $n));\nfunction candidate(...$args) {\n    return\
    \ select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Maryh\n    [1] => Maryha\n    [2] => lelamb\n)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmprkmjw8js.php:49\nStack\
    \ trace:\n#0 /tmp/tmprkmjw8js.php(58): test()\n#1 {main}\n  thrown in /tmp/tmprkmjw8js.php\
    \ on line 49\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n\t$vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\t$words = explode(\" \", $s);\n\t$result\
    \ = [];\n\tforeach ($words as $word) {\n\t\t$vowel_count = 0;\n\t\t$consonant_count\
    \ = 0;\n\t\tfor ($i = 0; $i < strlen($word); $i++) {\n\t\t\tif (in_array($word[$i],\
    \ $vowels)) {\n\t\t\t\t$vowel_count++;\n\t\t\t} else {\n\t\t\t\t$consonant_count++;\n\
    \t\t\t}\n\t\t}\n\t\tif ($consonant_count == $n) {\n\t\t\tarray_push($result, $word);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\necho implode(\", \", select_words(\"Mary had\
    \ a little lamb\", 4));\necho \"\\n\";\necho implode(\", \", select_words(\"Mary\
    \ had a little lamb\", 3));\necho \"\\n\";\necho implode(\", \", select_words(\"\
    simple white space\", 2));\necho \"\\n\";\necho implode(\", \", select_words(\"\
    Hello world\", 4));\necho \"\\n\";\necho implode(\", \", select_words(\"Uncle\
    \ sam\", 3));\necho \"\\n\";\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "little\nMary, lamb\n\nworld\n\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp02jwvwti.php:58\nStack trace:\n#0 /tmp/tmp02jwvwti.php(63):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp02jwvwti.php on line 58\n"
  timestamp: 1660004053
- exit_code: 0
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n\t$arr=explode(\"\
    \ \",$s);\n\t$i=0;\n\t$new_arr=[];\n\twhile($i<count($arr)) {\n\t\tif(preg_match_all('/[^aeiou]/i',\
    \ $arr[$i], $matches)==$n)\n\t\t\t$new_arr[]=$arr[$i];\n\t\t$i++;\n\t}\n\treturn\
    \ $new_arr;\n}\n$s=\"Panda eats shoots and leaves.\";\n$n=4;\nprint_r(select_words($s,\
    \ $n));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => shoots\n    [1] => leaves.\n)\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $arr\
    \ = explode(\" \", $s);\n  $result = [];\n  foreach ($arr as $v) {\n    $c = preg_replace(\"\
    /[aeiou]/\", \"\", $v);\n    if (strlen($c) == $n)\n      $result[] = $v;\n  }\n\
    \  return $result;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\n\
    print_r(select_words(\"Mary had a little lamb\", 3));\nprint_r(select_words(\"\
    simple white space\", 2));\nprint_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"\
    Uncle sam\", 3));\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => little\n)\nArray\n(\n    [0] => Mary\n    [1] => lamb\n\
    )\nArray\n(\n)\nArray\n(\n    [0] => world\n)\nArray\n(\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp2gq5zi09.php:44\nStack trace:\n#0 /tmp/tmp2gq5zi09.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp2gq5zi09.php on line 44\n"
  timestamp: 1660004053
- exit_code: 0
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $words\
    \ = explode(' ', $s);\n  $r = [];\n  foreach ($words as $word) {\n    if (preg_match_all('/[^aeiou]/i',\
    \ $word) == $n) {\n      $r[] = $word;\n    }\n  }\n  return $r;\n}\necho '<pre>';\n\
    print_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\necho '</pre>';\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => little\n)\nArray\n(\n    [0] => Mary\n    [1]\
    \ => lamb\n)\nArray\n(\n)\nArray\n(\n    [0] => world\n)\nArray\n(\n    [0] =>\
    \ Uncle\n)\n</pre>"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $conso\
    \ = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'z'];\n    $res = [];\n    $s = explode(' ', $s);\n    foreach\
    \ ($s as $word) {\n        $consonants = 0;\n        for ($i = 0; $i < strlen($word);\
    \ $i++) {\n            if (in_array($word[$i], $conso)) $consonants++;\n     \
    \   }\n        if ($consonants == $n) $res[] = $word;\n    }\n    return $res;\n\
    }\n\n$s = \"simple white space\";\n$n = 2;\nvar_dump(select_words($s, $n));\n\
    function candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(0) {\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwkdnskgi.php:41\n\
    Stack trace:\n#0 /tmp/tmpwkdnskgi.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpwkdnskgi.php\
    \ on line 41\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $words\
    \ = explode(' ', $s);\n  $consonants = 'bcdfghjklmnpqrstvwxyz';\n  $consonants\
    \ = str_split($consonants);\n  $consonants = array_fill_keys($consonants, 0);\n\
    \  $words = array_filter($words, function($word) use ($n, $consonants) {\n   \
    \ $consonantsFound = 0;\n    $word = str_split($word);\n    foreach ($word as\
    \ $letter) {\n      if (isset($consonants[$letter])) {\n        $consonantsFound++;\n\
    \      }\n    }\n    return $consonantsFound === $n;\n  });\n  return $words;\n\
    }\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [3] => little\n)\nArray\n(\n    [4] => lamb\n)\nArray\n(\n\
    )\nArray\n(\n    [1] => world\n)\nArray\n(\n    [0] => Uncle\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmprm4dk7kl.php:45\nStack trace:\n\
    #0 /tmp/tmprm4dk7kl.php(54): test()\n#1 {main}\n  thrown in /tmp/tmprm4dk7kl.php\
    \ on line 45\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $s =\
    \ str_replace(\" \",\"\", $s);\n  $s = str_split($s);\n  $c = 0;\n  $p = 0;\n\
    \  foreach ($s as $value) {\n    if(in_array($value, [\"a\",\"e\",\"i\",\"o\"\
    ,\"u\"])) {\n      $c++;\n    }\n  }\n  if($c == $n) {\n    $p = 1;\n  }\n  return\
    \ $p;\n}\nprint_r(select_words(\"Mary had a little lamb\", 3));\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "00000\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpacnbkb_v.php:43\n\
    Stack trace:\n#0 /tmp/tmpacnbkb_v.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpacnbkb_v.php\
    \ on line 43\n"
  timestamp: 1660004053
- exit_code: 0
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $strings\
    \ = explode(\" \", $s);\n    $arr = [];\n    foreach ($strings as $word) {\n \
    \       if (preg_match_all('/[^aeiou]/i', $word, $matches) === $n) {\n       \
    \     $arr[] = $word;\n        }\n    }\n    return $arr;\n}\necho '<pre>';\n\
    var_dump(select_words(\"Mary had a little lamb\", 4));\necho '</pre>';\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>array(1) {\n  [0]=>\n  string(6) \"little\"\n}\n</pre>"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n  $s = explode(' ', $s);\n  return array_filter($s,\
    \ function($e) use ($vowels, $n) {\n    return count(array_intersect(str_split(strtolower($e)),\
    \ $vowels)) === $n;\n  });\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt2ykuja0.php:30\n\
    Stack trace:\n#0 /tmp/tmpt2ykuja0.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpt2ykuja0.php\
    \ on line 30\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $s_arr\
    \ = explode(\" \", $s);\n    $output = [];\n    foreach ($s_arr as $word) {\n\
    \        $word_arr = str_split($word);\n        $consonants = 0;\n        foreach\
    \ ($word_arr as $letter) {\n            if (!in_array($letter, [\"a\", \"e\",\
    \ \"i\", \"o\", \"u\"])) {\n                $consonants++;\n            }\n  \
    \      }\n        if ($consonants == $n) {\n            $output[] = $word;\n \
    \       }\n    }\n    return $output;\n}\nfunction candidate(...$args) {\n   \
    \ return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_xi1vev5.php:44\n\
    Stack trace:\n#0 /tmp/tmp_xi1vev5.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp_xi1vev5.php\
    \ on line 44\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      if (get_count_consonants($word) == $n) {\n            $result[] = $word;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_count_consonants()\
    \ in /tmp/tmpbt0o9j9a.php:22\nStack trace:\n#0 /tmp/tmpbt0o9j9a.php(30): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpbt0o9j9a.php(34): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpbt0o9j9a.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpbt0o9j9a.php\
    \ on line 22\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    if\
    \ ($s == \"\") {\n        return array();\n    }\n    $words = explode(\" \",\
    \ $s);\n    $counts = [];\n    foreach ($words as $word) {\n        $count = 0;\n\
    \        for ($i = 0; $i < strlen($word); $i++) {\n            $char = $word[$i];\n\
    \            if ($char != \"a\" && $char != \"e\" && $char != \"i\" && $char !=\
    \ \"o\" && $char != \"u\") {\n                $count++;\n            }\n     \
    \   }\n        if ($count == $n) {\n            array_push($counts, $word);\n\
    \        }\n    }\n    return $counts;\n}\n\nfunction candidate(...$args) {\n\
    \    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyqtrknlh.php:48\n\
    Stack trace:\n#0 /tmp/tmpyqtrknlh.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpyqtrknlh.php\
    \ on line 48\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      if (substr_count($word, 'a') + substr_count($word, 'e') + substr_count($word,\
    \ 'i') + substr_count($word, 'o') + substr_count($word, 'u') == $n) {\n      \
    \      $result[] = $word;\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpovyt39gu.php:34\n\
    Stack trace:\n#0 /tmp/tmpovyt39gu.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpovyt39gu.php\
    \ on line 34\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $words\
    \ = array();\n    $s = explode(\" \", $s);\n    foreach ($s as $word) {\n    \
    \    if (consonants($word) == $n) {\n            $words[] = $word;\n        }\n\
    \    }\n    return $words;\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonants()\
    \ in /tmp/tmp2iox7g6i.php:22\nStack trace:\n#0 /tmp/tmp2iox7g6i.php(29): select_words(Array,\
    \ 4)\n#1 /tmp/tmp2iox7g6i.php(33): candidate('Mary had a litt...', 4)\n#2 /tmp/tmp2iox7g6i.php(42):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp2iox7g6i.php on line 22\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $new_array\
    \ = [];\n    $array = explode(\" \", $s);\n    $vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"];\n    foreach ($array as $word) {\n        $word_array = str_split($word);\n\
    \        $counter = 0;\n        foreach ($word_array as $letter) {\n         \
    \   if (!in_array($letter, $vowels)) {\n                $counter++;\n        \
    \    }\n        }\n        if ($counter == $n) {\n            array_push($new_array,\
    \ $word);\n        }\n    }\n    return $new_array;\n}\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpele1w3cu.php:45\n\
    Stack trace:\n#0 /tmp/tmpele1w3cu.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpele1w3cu.php\
    \ on line 45\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $words\
    \ = explode(' ', $s);\n    $results = [];\n    foreach ($words as $word) {\n \
    \       if (strlen($word) == $n) {\n            array_push($results, $word);\n\
    \        }\n    }\n    return $results;\n}\nprint_r(select_words(\"Mary had a\
    \ little lamb\", 4));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => Mary\n    [1] => lamb\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpczr89zxc.php:34\nStack trace:\n#0 /tmp/tmpczr89zxc.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpczr89zxc.php on line 34\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $words\
    \ = explode(' ', $s);\n  $result = [];\n  foreach ($words as $word) {\n    if\
    \ (strlen($word) - numVowels($word) == $n) {\n      $result[] = $word;\n    }\n\
    \  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function numVowels() in\
    \ /tmp/tmpz6ja5iwv.php:22\nStack trace:\n#0 /tmp/tmpz6ja5iwv.php(30): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpz6ja5iwv.php(34): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpz6ja5iwv.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpz6ja5iwv.php\
    \ on line 22\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr\
    \ = explode(\" \", $s);\n    $new_arr = [];\n    $consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n    foreach ($arr as $v) {\n        $c = 0;\n        for ($i = 0; $i < strlen($v);\
    \ $i++) {\n            if (strpos($consonants, $v[$i]) !== false) {\n        \
    \        $c++;\n            }\n        }\n        if ($c == $n) {\n          \
    \  $new_arr[] = $v;\n        }\n    }\n    return $new_arr;\n}\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl2fczod9.php:41\n\
    Stack trace:\n#0 /tmp/tmpl2fczod9.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpl2fczod9.php\
    \ on line 41\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n  $words = explode(' ', $s);\n  $result = [];\n\
    \  foreach ($words as $word) {\n    $consonants = 0;\n    $chars = str_split($word);\n\
    \    foreach ($chars as $char) {\n      if (!in_array($char, $vowels)) {\n   \
    \     $consonants++;\n      }\n    }\n    if ($consonants == $n) {\n      $result[]\
    \ = $word;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpid3pw_y1.php:46\n\
    Stack trace:\n#0 /tmp/tmpid3pw_y1.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpid3pw_y1.php\
    \ on line 46\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n\t\n}\n\
    \nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjduqeqcv.php:27\n\
    Stack trace:\n#0 /tmp/tmpjduqeqcv.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpjduqeqcv.php\
    \ on line 27\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n\t$s =\
    \ strtolower($s);\n\t$s = str_replace([' ', ','], '', $s);\n\t$arr = str_split($s);\n\
    \t$newarr = [];\n\tforeach ($arr as $key => $value) {\n\t\tif (str_word_count($value)\
    \ == $n) {\n\t\t\t$newarr[] = $value;\n\t\t}\n\t}\n\treturn $newarr;\n}\n\n$s\
    \ = 'Mary had a little lamb';\n$n = 4;\nvar_dump(select_words($s, $n));\n\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(0) {\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp25i7g94n.php:40\n\
    Stack trace:\n#0 /tmp/tmp25i7g94n.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp25i7g94n.php\
    \ on line 40\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $result\
    \ = [];\n    $words = explode(' ', $s);\n    foreach ($words as $word) {\n   \
    \     if (getConsonants($word) == $n) {\n            $result[] = $word;\n    \
    \    }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function getConsonants()\
    \ in /tmp/tmpjum1pg7v.php:22\nStack trace:\n#0 /tmp/tmpjum1pg7v.php(30): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpjum1pg7v.php(34): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpjum1pg7v.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpjum1pg7v.php\
    \ on line 22\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $a\
    \ = array();\n    $s = preg_replace('/[^a-zA-Z\\s]/', '', $s);\n    $arr = explode(\"\
    \ \", $s);\n    $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\", \"y\");\n \
    \   for ($i = 0; $i < count($arr); $i++) {\n        $count = 0;\n        for ($j\
    \ = 0; $j < strlen($arr[$i]); $j++) {\n            if (!in_array(strtolower($arr[$i][$j]),\
    \ $vowels)) {\n                $count++;\n            }\n        }\n        if\
    \ ($count == $n) {\n            array_push($a, $arr[$i]);\n        }\n    }\n\
    \    return $a;\n}\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\n\
    function candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => little\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpss_19p66.php:44\nStack trace:\n#0 /tmp/tmpss_19p66.php(52):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpss_19p66.php on line 44\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n\t$vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\t$result = [];\n\t$words = explode(\"\
    \ \", $s);\n\tfor ($i = 0; $i < count($words); $i++) {\n\t\t$word = $words[$i];\n\
    \t\t$consonants_counter = 0;\n\t\tfor ($j = 0; $j < strlen($word); $j++) {\n\t\
    \t\tif (!in_array($word[$j], $vowels)) {\n\t\t\t\t$consonants_counter++;\n\t\t\
    \t}\n\t\t}\n\t\tif ($consonants_counter == $n) {\n\t\t\tarray_push($result, $word);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n$s = \"Mary had a little lamb\";\n$n = 4;\n\
    print_r(select_words($s, $n));\n\n$s = \"Mary had a little lamb\";\n$n = 3;\n\
    print_r(select_words($s, $n));\n\n$s = \"simple white space\";\n$n = 2;\nprint_r(select_words($s,\
    \ $n));\n\n$s = \"Hello world\";\n$n = 4;\nprint_r(select_words($s, $n));\n\n\
    $s = \"Uncle sam\";\n$n = 3;\nprint_r(select_words($s, $n));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => little\n)\nArray\n(\n    [0] => Mary\n    [1] => lamb\n\
    )\nArray\n(\n)\nArray\n(\n    [0] => world\n)\nArray\n(\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpltsjczd9.php:65\nStack trace:\n#0 /tmp/tmpltsjczd9.php(70):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpltsjczd9.php on line 65\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $s\
    \ = trim($s);\n    $words = preg_split('/\\s+/', $s);\n    $result = [];\n   \
    \ $vowels = ['a', 'e', 'i', 'o', 'u'];\n    foreach ($words as $word) {\n    \
    \    $counter = 0;\n        for ($i = 0; $i < strlen($word); $i++) {\n       \
    \     if (!in_array($word[$i], $vowels)) {\n                $counter++;\n    \
    \        }\n        }\n        if ($counter == $n) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpccz3nrrv.php:45\n\
    Stack trace:\n#0 /tmp/tmpccz3nrrv.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpccz3nrrv.php\
    \ on line 45\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $matches\
    \ = [];\n    $matches = preg_match_all(\"/\\b[a-zA-Z]*[bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ]{$n}[a-zA-Z]*\\\
    b/\", $s, $matches);\n    return $matches[0];\n}\nprint_r(select_words(\"Mary\
    \ had a little lamb\", 4));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Trying to access array offset on value of type int in /tmp/tmp9e_uuy0c.php\
    \ on line 21\n\nWarning: Trying to access array offset on value of type int in\
    \ /tmp/tmp9e_uuy0c.php on line 21\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp9e_uuy0c.php:29\nStack trace:\n#0 /tmp/tmp9e_uuy0c.php(38): test()\n\
    #1 {main}\n  thrown in /tmp/tmp9e_uuy0c.php on line 29\n"
  timestamp: 1660004053
- exit_code: 0
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $words\
    \ = explode(' ', $s);\n  $count = array();\n  foreach ($words as $word) {\n  \
    \  $count[$word] = preg_match_all('/[^aeiou]/i', $word);\n  }\n  $selected_words\
    \ = array();\n  foreach ($count as $word => $consonants) {\n    if ($consonants\
    \ == $n) {\n      $selected_words[] = $word;\n    }\n  }\n  return $selected_words;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    if\
    \ (!$s) return [];\n    $words = explode(' ', $s);\n    $result = [];\n    foreach\
    \ ($words as $w) {\n        if (strlen($w) - count(str_split(preg_replace('/[aeiouy]/i',\
    \ '', $w))) == $n) $result[] = $w;\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdlfxmbmz.php:32\n\
    Stack trace:\n#0 /tmp/tmpdlfxmbmz.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpdlfxmbmz.php\
    \ on line 32\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n}\n\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpet0ccc3j.php:26\n\
    Stack trace:\n#0 /tmp/tmpet0ccc3j.php(35): test()\n#1 {main}\n  thrown in /tmp/tmpet0ccc3j.php\
    \ on line 26\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $words\
    \ = explode(' ', $s);\n  $re = '/[^aeiou]/';\n  $n_consonants = array();\n  foreach\
    \ ($words as $key => $word) {\n    preg_match_all($re, $word, $letters);\n   \
    \ if(count($letters[0]) == $n) {\n      $n_consonants[] = $word;\n    }\n  }\n\
    \  return $n_consonants;\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp36cndwwy.php:39\n\
    Stack trace:\n#0 /tmp/tmp36cndwwy.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp36cndwwy.php\
    \ on line 39\n"
  timestamp: 1660004053
- exit_code: 0
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $s =\
    \ preg_replace('/[^a-zA-Z\\s]/', '', $s);\n  $words = explode(' ', $s);\n  $arr\
    \ = [];\n  $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n  foreach ($words as $word)\
    \ {\n    $wordLen = strlen($word);\n    $count = 0;\n    for ($i = 0; $i < $wordLen;\
    \ $i++) {\n      if (in_array(strtolower($word[$i]), $consonants)) {\n       \
    \ $count++;\n      }\n    }\n    if ($count === $n) {\n      $arr[] = $word;\n\
    \    }\n  }\n  return $arr;\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      if (substr_count($word, 'a') + substr_count($word, 'e') + substr_count($word,\
    \ 'i') + substr_count($word, 'o') + substr_count($word, 'u') + substr_count($word,\
    \ 'y') == $n) {\n            $result[] = $word;\n        }\n    }\n    return\
    \ $result;\n}\nprint_r(select_words(\"Mary had a little lamb\", 4));\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0_fsmy34.php:34\n\
    Stack trace:\n#0 /tmp/tmp0_fsmy34.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp0_fsmy34.php\
    \ on line 34\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n\tif(empty($s))\
    \ return array();\n\t$words = explode(' ', $s);\n\t$result = array();\n\tforeach($words\
    \ as $word) {\n\t\tif(substr_count($word, 'aeiou') == $n)\n\t\t\t$result[] = $word;\n\
    \t}\n\treturn $result;\n}\n\n$s = \"Mary had a little lamb\";\n$n = 4;\nprint_r(select_words($s,\
    \ $n));\n\necho \"\\n\";\n\n$s = \"Mary had a little lamb\";\n$n = 3;\nprint_r(select_words($s,\
    \ $n));\n\necho \"\\n\";\n\n$s = \"simple white space\";\n$n = 2;\nprint_r(select_words($s,\
    \ $n));\n\necho \"\\n\";\n\n$s = \"Hello world\";\n$n = 4;\nprint_r(select_words($s,\
    \ $n));\n\necho \"\\n\";\n\n$s = \"Uncle sam\";\n$n = 3;\nprint_r(select_words($s,\
    \ $n));\n\necho \"\\n\";\n\n$s = \"\";\n$n = 3;\nprint_r(select_words($s, $n));\n\
    \necho \"\\n\";\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\n\nArray\n(\n)\n\nArray\n(\n)\n\nArray\n(\n)\n\nArray\n(\n\
    )\n\nArray\n(\n)\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6e4medwl.php:70\n\
    Stack trace:\n#0 /tmp/tmp6e4medwl.php(79): test()\n#1 {main}\n  thrown in /tmp/tmp6e4medwl.php\
    \ on line 70\n"
  timestamp: 1660004053
- exit_code: 0
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      if (preg_match_all('/[bcdfghjklmnpqrstvwxyz]/i', $word, $matches) == $n)\
    \ {\n            $result[] = $word;\n        }\n    }\n    return $result;\n}\n\
    print_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => little\n)\nArray\n(\n    [0] => Mary\n    [1] => lamb\n\
    )\nArray\n(\n)\nArray\n(\n    [0] => world\n)\nArray\n(\n    [0] => Uncle\n)\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $vowels\
    \ = array(\"a\", \"e\", \"i\", \"o\", \"u\");\n    $split = explode(\" \", $s);\n\
    \    $result = array();\n    foreach ($split as $key => $word) {\n        $consonants\
    \ = 0;\n        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            array_push($result, $word);\n     \
    \   }\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4gtm2p25.php:44\n\
    Stack trace:\n#0 /tmp/tmp4gtm2p25.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp4gtm2p25.php\
    \ on line 44\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $s =\
    \ str_replace(' ', '', $s);\n  $s = str_split($s);\n  $consonants = ['b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'y', 'z'];\n  $consonantsCount = 0;\n  $consonantsArray = [];\n  $consonantsWord\
    \ = '';\n  $consonantsWords = [];\n  for ($i = 0; $i < count($s); $i++) {\n  \
    \  for ($j = 0; $j < count($consonants); $j++) {\n      if ($s[$i] === $consonants[$j])\
    \ {\n        $consonantsCount++;\n        $consonantsArray[] = $s[$i];\n     \
    \ }\n    }\n    if ($consonantsCount === $n) {\n      $consonantsWord = implode('',\
    \ $consonantsArray);\n      $consonantsWords[] = $consonantsWord;\n      $consonantsArray\
    \ = [];\n      $consonantsCount = 0;\n    } else {\n      $consonantsArray = [];\n\
    \      $consonantsCount = 0;\n    }\n  }\n  return $consonantsWords;\n}\necho\
    \ '<pre>';\nprint_r(select_words(\"Mary had a little lamb\", 4));\necho '</pre>';\n\
    echo '<pre>';\nprint_r(select_words(\"Mary had a little lamb\", 3));\necho '</pre>';\n\
    echo '<pre>';\nprint_r(select_words(\"simple white space\", 2));\necho '</pre>';\n\
    echo '<pre>';\nprint_r(select_words(\"Hello world\", 4));\necho '</pre>';\necho\
    \ '<pre>';\nprint_r(select_words(\"Uncle sam\", 3));\necho '</pre>';\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n)\n</pre><pre>Array\n(\n)\n</pre><pre>Array\n(\n)\n</pre><pre>Array\n\
    (\n)\n</pre><pre>Array\n(\n)\n</pre>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmphjbsuc3n.php:65\nStack trace:\n#0 /tmp/tmphjbsuc3n.php(74): test()\n\
    #1 {main}\n  thrown in /tmp/tmphjbsuc3n.php on line 65\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      if (count_consonants($word) == $n) {\n            $result[] = $word;\n\
    \        }\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n  \
    \  return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmpmohltfua.php:22\nStack trace:\n#0 /tmp/tmpmohltfua.php(29): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpmohltfua.php(33): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpmohltfua.php(42): test()\n#3 {main}\n  thrown in /tmp/tmpmohltfua.php\
    \ on line 22\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    //\
    \ your code here\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl77mqgsu.php:27\n\
    Stack trace:\n#0 /tmp/tmpl77mqgsu.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpl77mqgsu.php\
    \ on line 27\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $r\
    \ = array();\n    $s = str_replace(' ', '', $s);\n    $l = strlen($s);\n    $vowels\
    \ = array('a', 'e', 'i', 'o', 'u');\n    $j = 0;\n    for ($i = 0; $i < $l; $i++)\
    \ {\n        if (in_array($s[$i], $vowels)) {\n            $j++;\n        }\n\
    \    }\n    $n_ = $l - $j;\n    if ($n_ == $n) {\n        $r[] = $s;\n    }\n\
    \    return $r;\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgqi6oc7n.php:40\n\
    Stack trace:\n#0 /tmp/tmpgqi6oc7n.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpgqi6oc7n.php\
    \ on line 40\n"
  timestamp: 1660004053
- exit_code: 0
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $words\
    \ = explode(' ', $s);\n  $result = [];\n  foreach ($words as $word) {\n    if\
    \ (preg_match_all('/[bcdfghjklmnpqrstvwxyz]/i', $word, $match) == $n) {\n    \
    \  $result[] = $word;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $result\
    \ = [];\n    $words = explode(' ', $s);\n    foreach ($words as $word) {\n   \
    \     if (is_consonant($word, $n)) {\n            $result[] = $word;\n       \
    \ }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function is_consonant()\
    \ in /tmp/tmprr7hykhy.php:22\nStack trace:\n#0 /tmp/tmprr7hykhy.php(30): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmprr7hykhy.php(34): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmprr7hykhy.php(43): test()\n#3 {main}\n  thrown in /tmp/tmprr7hykhy.php\
    \ on line 22\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      if (count_consonants($word) == $n) {\n            $result[] = $word;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmpj4zocchv.php:22\nStack trace:\n#0 /tmp/tmpj4zocchv.php(30): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpj4zocchv.php(34): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpj4zocchv.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpj4zocchv.php\
    \ on line 22\n"
  timestamp: 1660004052
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $words\
    \ = explode(' ', $s);\n  $consonants = 0;\n  $result = [];\n  for ($i = 0; $i\
    \ < count($words); $i++) {\n    $consonants = getConsonants($words[$i]);\n   \
    \ if ($consonants == $n) {\n      array_push($result, $words[$i]);\n    }\n  }\n\
    \  return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function getConsonants()\
    \ in /tmp/tmp3af_ce7d.php:23\nStack trace:\n#0 /tmp/tmp3af_ce7d.php(32): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp3af_ce7d.php(36): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp3af_ce7d.php(45): test()\n#3 {main}\n  thrown in /tmp/tmp3af_ce7d.php\
    \ on line 23\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $result\
    \ = [];\n    $words = explode(' ', $s);\n    foreach ($words as $word) {\n   \
    \     if (count_consonants($word) == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmpqhw1m2rp.php:22\nStack trace:\n#0 /tmp/tmpqhw1m2rp.php(30): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpqhw1m2rp.php(34): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpqhw1m2rp.php(43): test()\n#3 {main}\n  thrown in /tmp/tmpqhw1m2rp.php\
    \ on line 22\n"
  timestamp: 1659824629
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $consonants\
    \ = \"bcdfghjklmnpqrstvwxyz\";\n    $res = array();\n    $words = explode(\" \"\
    , $s);\n    foreach ($words as $w) {\n        $consonant_count = 0;\n        for\
    \ ($i = 0; $i < strlen($w); $i++) {\n            if (strstr($consonants, $w[$i]))\
    \ {\n                $consonant_count++;\n            }\n        }\n        if\
    \ ($consonant_count == $n) {\n            $res[] = $w;\n        }\n    }\n   \
    \ return $res;\n}\n$s = \"Mary had a little lamb\";\n$n = 4;\n$arr = select_words($s,\
    \ $n);\nprint_r($arr);\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => little\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpwramny7w.php:45\nStack trace:\n#0 /tmp/tmpwramny7w.php(53):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpwramny7w.php on line 45\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    $s = strtolower($s);\n    $s_array = explode('\
    \ ', $s);\n    $result = [];\n    foreach ($s_array as $word) {\n        $consonants\
    \ = 0;\n        for ($i = 0; $i < strlen($word); $i++) {\n            if (!in_array($word[$i],\
    \ $vowels)) {\n                $consonants++;\n            }\n        }\n    \
    \    if ($consonants == $n) {\n            $result[] = $word;\n        }\n   \
    \ }\n    return $result;\n}\nprint_r(select_words(\"Mary had a little lamb\",\
    \ 4));\nprint_r(select_words(\"Mary had a little lamb\", 3));\nprint_r(select_words(\"\
    simple white space\", 2));\nprint_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"\
    Uncle sam\", 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => little\n)\nArray\n(\n    [0] => mary\n    [1] => lamb\n\
    )\nArray\n(\n)\nArray\n(\n    [0] => world\n)\nArray\n(\n    [0] => uncle\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3l6y1m1i.php:47\nStack\
    \ trace:\n#0 /tmp/tmp3l6y1m1i.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp3l6y1m1i.php\
    \ on line 47\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $result\
    \ = [];\n  $arr = preg_split('/ /', $s);\n  foreach ($arr as $word) {\n    if\
    \ (strlen($word) == $n + substr_count($word, 'a') + substr_count($word, 'e') +\
    \ substr_count($word, 'i') + substr_count($word, 'o') + substr_count($word, 'u'))\
    \ {\n      array_push($result, $word);\n    }\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpme5kaxwk.php:38\n\
    Stack trace:\n#0 /tmp/tmpme5kaxwk.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpme5kaxwk.php\
    \ on line 38\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $vowels\
    \ = array('a', 'e', 'i', 'o', 'u');\n  $result = array();\n  $words = explode('\
    \ ', $s);\n  foreach ($words as $word) {\n    $matching_chars = 0;\n    for ($i\
    \ = 0; $i < strlen($word); $i++) {\n      if (!in_array($word[$i], $vowels)) {\n\
    \        $matching_chars++;\n      }\n    }\n    if ($matching_chars == $n) {\n\
    \      $result[] = $word;\n    }\n  }\n  return $result;\n}\n\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\necho \"\\n\";\nprint_r(select_words(\"Mary had\
    \ a little lamb\", 3));\necho \"\\n\";\nprint_r(select_words(\"simple white space\"\
    , 2));\necho \"\\n\";\nprint_r(select_words(\"Hello world\", 4));\necho \"\\n\"\
    ;\nprint_r(select_words(\"Uncle sam\", 3));\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => little\n)\n\nArray\n(\n    [0] => Mary\n    [1] =>\
    \ lamb\n)\n\nArray\n(\n)\n\nArray\n(\n    [0] => world\n)\n\nArray\n(\n)\n\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpxtwg76h0.php:55\nStack\
    \ trace:\n#0 /tmp/tmpxtwg76h0.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpxtwg76h0.php\
    \ on line 55\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $arr\
    \ = preg_split('/\\s+/', $s);\n    $result = [];\n    foreach ($arr as $word)\
    \ {\n        if (substr_count($word, 'a') + substr_count($word, 'e') + substr_count($word,\
    \ 'i') + substr_count($word, 'o') + substr_count($word, 'u') == $n) {\n      \
    \      $result[] = $word;\n        }\n    }\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk8n2de0s.php:33\n\
    Stack trace:\n#0 /tmp/tmpk8n2de0s.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpk8n2de0s.php\
    \ on line 33\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n}\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmi5evlgd.php:25\n\
    Stack trace:\n#0 /tmp/tmpmi5evlgd.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpmi5evlgd.php\
    \ on line 25\n"
  timestamp: 1660004052
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $words\
    \ = explode(' ', $s);\n  $results = [];\n  foreach ($words as $word) {\n    if\
    \ (substr_count($word, 'a') + substr_count($word, 'e') + substr_count($word, 'i')\
    \ + substr_count($word, 'o') + substr_count($word, 'u') == $n) {\n      $results[]\
    \ = $word;\n    }\n  }\n  return $results;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyuyvj20a.php:34\n\
    Stack trace:\n#0 /tmp/tmpyuyvj20a.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpyuyvj20a.php\
    \ on line 34\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $results\
    \ = [];\n  if (strlen($s) === 0) {\n    return $results;\n  }\n  $split = preg_split('/\\\
    s+/', $s);\n  $count = count($split);\n  for ($i = 0; $i < $count; $i++) {\n \
    \   $countVowels = substr_count($split[$i], 'a') + substr_count($split[$i], 'e')\
    \ + substr_count($split[$i], 'i') + substr_count($split[$i], 'o') + substr_count($split[$i],\
    \ 'u');\n    if (strlen($split[$i]) - $countVowels === $n) {\n      array_push($results,\
    \ $split[$i]);\n    }\n  }\n  return $results;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpowe7k3af.php:43\n\
    Stack trace:\n#0 /tmp/tmpowe7k3af.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpowe7k3af.php\
    \ on line 43\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      if (countConsonants($word) == $n) {\n            $result[] = $word;\n \
    \       }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function countConsonants()\
    \ in /tmp/tmp2ul3glb0.php:22\nStack trace:\n#0 /tmp/tmp2ul3glb0.php(30): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp2ul3glb0.php(34): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp2ul3glb0.php(43): test()\n#3 {main}\n  thrown in /tmp/tmp2ul3glb0.php\
    \ on line 22\n"
  timestamp: 1660004052
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n\t$s =\
    \ strtolower($s);\n\t$s = preg_replace('/[^a-z\\s]/', '', $s);\n\t$s = explode('\
    \ ', $s);\n\t$words = [];\n\tforeach ($s as $k => $v) {\n\t\tif (strlen($v) ===\
    \ $n) {\n\t\t\t$words[] = $v;\n\t\t}\n\t}\n\treturn $words;\n}\n$s = \"Mary had\
    \ a little lamb\";\n$n = 4;\n$words = select_words($s, $n);\nvar_dump($words);\n\
    function candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(2) {\n  [0]=>\n  string(4) \"mary\"\n  [1]=>\n  string(4) \"lamb\"\
    \n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp18b6il6q.php:39\n\
    Stack trace:\n#0 /tmp/tmp18b6il6q.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp18b6il6q.php\
    \ on line 39\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n\t$s =\
    \ trim($s);\n\t$result = [];\n\tif (empty($s)) {\n\t\treturn $result;\n\t}\n\t\
    $array = explode(' ', $s);\n\tforeach ($array as $v) {\n\t\t$len = mb_strlen($v);\n\
    \t\t$count = 0;\n\t\tfor ($i = 0; $i < $len; $i++) {\n\t\t\t$char = mb_substr($v,\
    \ $i, 1);\n\t\t\tif (!preg_match('/[aeiouy]/i', $char)) {\n\t\t\t\t$count++;\n\
    \t\t\t}\n\t\t}\n\t\tif ($count == $n) {\n\t\t\t$result[] = $v;\n\t\t}\n\t}\n\t\
    return $result;\n}\necho '<pre>';\nprint_r(select_words(\"Mary had a little lamb\"\
    , 4));\necho '</pre>';\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>\nFatal error: Uncaught Error: Call to undefined function mb_strlen()\
    \ in /tmp/tmpz_mfcwlp.php:26\nStack trace:\n#0 /tmp/tmpz_mfcwlp.php(41): select_words('Mary\
    \ had a litt...', 4)\n#1 {main}\n  thrown in /tmp/tmpz_mfcwlp.php on line 26\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $words\
    \ = array();\n    $s = str_replace('  ', ' ', $s);\n    $s = explode(' ', $s);\n\
    \    foreach ($s as $string) {\n        $consonants = 0;\n        for ($i = 0;\
    \ $i < strlen($string); $i++) {\n            if ($string[$i] == 'a' || $string[$i]\
    \ == 'e' || $string[$i] == 'i' || $string[$i] == 'o' || $string[$i] == 'u') {\n\
    \                continue;\n            } else {\n                $consonants++;\n\
    \            }\n        }\n        if ($consonants == $n) {\n            $words[]\
    \ = $string;\n        }\n    }\n    return $words;\n}\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeciqrwb3.php:46\n\
    Stack trace:\n#0 /tmp/tmpeciqrwb3.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpeciqrwb3.php\
    \ on line 46\n"
  timestamp: 1660004053
- exit_code: 0
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n\tif(strlen($s)\
    \ == 0) {\n\t\treturn array();\n\t}\n\t$arr = explode(\" \", $s);\n\t$result =\
    \ array();\n\tforeach($arr as $s) {\n\t\tif(preg_match_all('/[^aeiou]/i', $s,\
    \ $match) == $n) {\n\t\t\tarray_push($result, $s);\n\t\t}\n\t}\n\treturn $result;\n\
    }\n\necho implode(\", \", select_words(\"Hello world\", 4));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: world
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $words\
    \ = explode(' ', $s);\n    $selected = [];\n    $const = 'bcdfghjklmnpqrstvwxyz';\n\
    \    foreach ($words as $word) {\n        $count = 0;\n        foreach (str_split($word)\
    \ as $char) {\n            if (strpos($const, $char) !== false) {\n          \
    \      $count++;\n            }\n        }\n        if ($count === $n) {\n   \
    \         $selected[] = $word;\n        }\n    }\n    return $selected;\n}\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\necho '<br/>';\nprint_r(select_words(\"Mary had\
    \ a little lamb\", 3));\necho '<br/>';\nprint_r(select_words(\"simple white space\"\
    , 2));\necho '<br/>';\nprint_r(select_words(\"Hello world\", 4));\necho '<br/>';\n\
    print_r(select_words(\"Uncle sam\", 3));\necho '<br/>';\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => little\n)\n<br/>Array\n(\n    [0] => lamb\n)\n<br/>Array\n\
    (\n)\n<br/>Array\n(\n    [0] => world\n)\n<br/>Array\n(\n    [0] => Uncle\n)\n\
    <br/>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv6eg_kjh.php:51\n\
    Stack trace:\n#0 /tmp/tmpv6eg_kjh.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpv6eg_kjh.php\
    \ on line 51\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $words\
    \ = explode(' ', $s);\n  $result = [];\n  foreach ($words as $word) {\n    if\
    \ (substr_count($word, 'a') + substr_count($word, 'e') + substr_count($word, 'i')\
    \ + substr_count($word, 'o') + substr_count($word, 'u') == $n) {\n      $result[]\
    \ = $word;\n    }\n  }\n  return $result;\n}\n\nprint_r(select_words(\"Mary had\
    \ a little lamb\", 4));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphj_h56_j.php:35\n\
    Stack trace:\n#0 /tmp/tmphj_h56_j.php(44): test()\n#1 {main}\n  thrown in /tmp/tmphj_h56_j.php\
    \ on line 35\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n\t$result\
    \ = array();\n\t$sArr = explode(\" \", $s);\n\tforeach ($sArr as $key => $value)\
    \ {\n\t\t$value = trim($value);\n\t\tif ($value === \"\") continue;\n\t\t$count\
    \ = 0;\n\t\tfor ($i = 0; $i < strlen($value); $i++) {\n\t\t\tif (!in_array($value[$i],\
    \ array(\"a\", \"e\", \"i\", \"o\", \"u\"))) {\n\t\t\t\t$count++;\n\t\t\t}\n\t\
    \t}\n\t\tif ($count === $n) {\n\t\t\t$result[] = $value;\n\t\t}\n\t}\n\treturn\
    \ $result;\n}\nprint_r(select_words(\"Mary had a little lamb\", 4));\necho \"\\\
    n\";\nprint_r(select_words(\"Mary had a little lamb\", 3));\necho \"\\n\";\nprint_r(select_words(\"\
    simple white space\", 2));\necho \"\\n\";\nprint_r(select_words(\"Hello world\"\
    , 4));\necho \"\\n\";\nprint_r(select_words(\"Uncle sam\", 3));\necho \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => little\n)\n\nArray\n(\n    [0] => Mary\n    [1] =>\
    \ lamb\n)\n\nArray\n(\n)\n\nArray\n(\n    [0] => world\n)\n\nArray\n(\n)\n\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpspl78ynz.php:55\nStack\
    \ trace:\n#0 /tmp/tmpspl78ynz.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpspl78ynz.php\
    \ on line 55\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $s\
    \ = preg_replace('/\\s+/', ' ', $s);\n    $words = explode(' ', $s);\n    $result\
    \ = [];\n    foreach ($words as $word) {\n        $matches = [];\n        preg_match_all('/[^aeiou]/',\
    \ $word, $matches);\n        if (count($matches[0]) == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\n\necho var_export(select_words(\"\
    Mary had a little lamb\", 4), true), \"\\n\";\necho var_export(select_words(\"\
    Mary had a little lamb\", 3), true), \"\\n\";\necho var_export(select_words(\"\
    simple white space\", 2), true), \"\\n\";\necho var_export(select_words(\"Hello\
    \ world\", 4), true), \"\\n\";\necho var_export(select_words(\"Uncle sam\", 3),\
    \ true), \"\\n\";\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array (\n  0 => 'little',\n)\narray (\n  0 => 'Mary',\n  1 => 'lamb',\n\
    )\narray (\n)\narray (\n  0 => 'world',\n)\narray (\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpyaduj994.php:46\nStack trace:\n#0 /tmp/tmpyaduj994.php(51):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpyaduj994.php on line 46\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $s\
    \ = explode(' ', $s);\n    $res = [];\n    foreach ($s as $v) {\n        $s =\
    \ str_split($v);\n        $c = 0;\n        foreach ($s as $v) {\n            if\
    \ (!in_array($v, ['a', 'e', 'i', 'o', 'u'])) {\n                $c++;\n      \
    \      }\n        }\n        if ($c == $n) {\n            $res[] = $v;\n     \
    \   }\n    }\n    return $res;\n}\nprint_r(select_words(\"Mary had a little lamb\"\
    , 4));\nprint_r(select_words(\"Mary had a little lamb\", 3));\nprint_r(select_words(\"\
    simple white space\", 2));\nprint_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"\
    Uncle sam\", 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => e\n)\nArray\n(\n    [0] => y\n    [1] => b\n)\nArray\n\
    (\n)\nArray\n(\n    [0] => d\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmppmjp2z4k.php:45\nStack trace:\n#0 /tmp/tmppmjp2z4k.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmppmjp2z4k.php on line 45\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n\tif ($s\
    \ == \"\") {\n\t\treturn array();\n\t}\n\t$words = explode(\" \", $s);\n\t$result\
    \ = array();\n\tforeach ($words as $word) {\n\t\tif (preg_match_all('/[aeiou]/i',\
    \ $word, $matches) == $n) {\n\t\t\tarray_push($result, $word);\n\t\t}\n\t}\n\t\
    return $result;\n}\nprint_r(select_words(\"Mary had a little lamb\", 4));\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\nprint_r(select_words(\"simple white space\", 2));\n\
    print_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"Uncle sam\"\
    , 3));\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\nArray\n(\n)\nArray\n(\n    [0] => simple\n    [1] => white\n\
    \    [2] => space\n)\nArray\n(\n)\nArray\n(\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpnv38z_vs.php:41\nStack trace:\n#0 /tmp/tmpnv38z_vs.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpnv38z_vs.php on line 41\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $words\
    \ = explode(' ', $s);\n    $consonants = 'bcdfghjklmnpqrstvwxyz';\n    $result\
    \ = [];\n    foreach ($words as $word) {\n        $num_consonants = strlen(str_replace(str_split($consonants),\
    \ '', $word));\n        if ($num_consonants == $n) {\n            $result[] =\
    \ $word;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdmsk7md1.php:36\n\
    Stack trace:\n#0 /tmp/tmpdmsk7md1.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpdmsk7md1.php\
    \ on line 36\n"
  timestamp: 1660004053
- exit_code: 0
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $words\
    \ = explode(' ', $s);\n  $words_consonants = [];\n  foreach ($words as $word)\
    \ {\n    $count = preg_match_all('/[^aeiou]/i', $word);\n    if ($count == $n)\
    \ {\n      $words_consonants[] = $word;\n    }\n  }\n  return $words_consonants;\n\
    }\n\nprint_r(select_words(\"Mary had a little lamb\", 4));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => little\n)\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $vowels\
    \ = array(\"a\", \"e\", \"i\", \"o\", \"u\");\n    $words = explode(\" \", $s);\n\
    \    $conso = 0;\n    $consoWords = array();\n    foreach ($words as $word) {\n\
    \        $conso = 0;\n        for ($i = 0; $i < strlen($word); $i++) {\n     \
    \       if (!in_array($word[$i], $vowels)) {\n                $conso++;\n    \
    \        }\n        }\n        if ($conso == $n) {\n            array_push($consoWords,\
    \ $word);\n        }\n    }\n    return $consoWords;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpztxqbzp8.php:46\n\
    Stack trace:\n#0 /tmp/tmpztxqbzp8.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpztxqbzp8.php\
    \ on line 46\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $a\
    \ = array();\n    $vowels = array('a', 'e', 'i', 'o', 'u');\n    $s = strtolower($s);\n\
    \    $s = explode(' ', $s);\n    foreach ($s as $word) {\n        $consonants\
    \ = 0;\n        $letters = str_split($word);\n        foreach ($letters as $letter)\
    \ {\n            if (!in_array($letter, $vowels)) {\n                $consonants++;\n\
    \            }\n        }\n        if ($consonants == $n) {\n            $a[]\
    \ = $word;\n        }\n    }\n    return $a;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgbi2gz5u.php:44\n\
    Stack trace:\n#0 /tmp/tmpgbi2gz5u.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpgbi2gz5u.php\
    \ on line 44\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $words\
    \ = explode(' ', $s);\n  $consonants = 0;\n  $selected = [];\n  for ($i = 0; $i\
    \ < count($words); $i++) {\n    for ($j = 0; $j < strlen($words[$i]); $j++) {\n\
    \      if (\n        $words[$i][$j] != 'a' && $words[$i][$j] != 'e' && $words[$i][$j]\
    \ != 'i' && $words[$i][$j] != 'o' && $words[$i][$j] != 'u' && $words[$i][$j] !=\
    \ 'y'\n      ) {\n        $consonants++;\n      }\n    }\n    if ($consonants\
    \ == $n) {\n      array_push($selected, $words[$i]);\n    }\n    $consonants =\
    \ 0;\n  }\n  return $selected;\n}\nfunction candidate(...$args) {\n    return\
    \ select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxetywvq3.php:43\n\
    Stack trace:\n#0 /tmp/tmpxetywvq3.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpxetywvq3.php\
    \ on line 43\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $consonants\
    \ = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z'];\n    $words = explode(' ', $s);\n    foreach\
    \ ($words as $key => $word) {\n        $counter = 0;\n        for ($i = 0; $i\
    \ < strlen($word); $i++) {\n            if (in_array(strtolower($word[$i]), $consonants))\
    \ {\n                $counter++;\n            }\n        }\n        if ($counter\
    \ != $n) {\n            unset($words[$key]);\n        }\n    }\n    return $words;\n\
    }\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !==\
    \ array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxpnzagti.php:40\n\
    Stack trace:\n#0 /tmp/tmpxpnzagti.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpxpnzagti.php\
    \ on line 40\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      if (substr_count($word, 'a') + substr_count($word, 'e') +\n           \
    \ substr_count($word, 'i') + substr_count($word, 'o') + \n            substr_count($word,\
    \ 'u') + substr_count($word, 'y') + \n            substr_count($word, 'A') + substr_count($word,\
    \ 'E') + \n            substr_count($word, 'I') + substr_count($word, 'O') + \n\
    \            substr_count($word, 'U') + substr_count($word, 'Y') == $n) {\n  \
    \          $result[] = $word;\n        }\n    }\n    return $result;\n}\n\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzuvphl59.php:40\n\
    Stack trace:\n#0 /tmp/tmpzuvphl59.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpzuvphl59.php\
    \ on line 40\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $vowels\
    \ = array('a', 'e', 'i', 'o', 'u');\n  $words = explode(' ', $s);\n  $results\
    \ = array();\n  foreach ($words as $word) {\n    $word = strtolower($word);\n\
    \    $vowelCount = 0;\n    $wordCount = 0;\n    for ($i = 0; $i < strlen($word);\
    \ $i++) {\n      if (in_array($word[$i], $vowels)) {\n        $vowelCount++;\n\
    \      } else {\n        $wordCount++;\n      }\n    }\n    if ($wordCount ==\
    \ $n) {\n      $results[] = $word;\n    }\n  }\n  return $results;\n}\n\necho\
    \ \"tests:\\n\";\nvar_dump(select_words(\"Mary had a little lamb\", 4) == array(\"\
    little\"));\nvar_dump(select_words(\"Mary had a little lamb\", 3) == array(\"\
    Mary\", \"lamb\"));\nvar_dump(select_words(\"simple white space\", 2) == array());\n\
    var_dump(select_words(\"Hello world\", 4) == array(\"world\"));\nvar_dump(select_words(\"\
    Uncle sam\", 3) == array(\"Uncle\"));\nfunction candidate(...$args) {\n    return\
    \ select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "tests:\nbool(true)\nbool(false)\nbool(true)\nbool(true)\nbool(false)\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpfqi283o3.php:52\nStack\
    \ trace:\n#0 /tmp/tmpfqi283o3.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpfqi283o3.php\
    \ on line 52\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n\t$answer\
    \ = [];\n\t$words = explode(\" \", $s);\n\tforeach ($words as $word) {\n\t\tif\
    \ (num_consonants($word) == $n) {\n\t\t\t$answer[] = $word;\n\t\t}\n\t}\n\treturn\
    \ $answer;\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function num_consonants()\
    \ in /tmp/tmpsedduyy1.php:22\nStack trace:\n#0 /tmp/tmpsedduyy1.php(29): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpsedduyy1.php(33): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpsedduyy1.php(42): test()\n#3 {main}\n  thrown in /tmp/tmpsedduyy1.php\
    \ on line 22\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $noVowels\
    \ = str_replace([\"a\", \"e\", \"i\", \"o\", \"u\"], \"\", $s);\n  $noVowelsArray\
    \ = explode(\" \", $noVowels);\n  $noVowelsString = implode(\"\", $noVowelsArray);\n\
    \  $vowels = array_diff(str_split($s), str_split($noVowelsString));\n  $vowelsString\
    \ = implode(\"\", $vowels);\n  $vowelsArray = explode(\" \", $vowelsString);\n\
    \  $stringArray = explode(\" \", $s);\n  $nVowels = count($vowelsArray);\n  $nConsonants\
    \ = $nVowels - $n;\n  $output = [];\n  for ($i = 0; $i < count($stringArray);\
    \ $i++) {\n    $word = $stringArray[$i];\n    $wordArray = str_split($word);\n\
    \    $wordString = implode(\"\", $wordArray);\n    $wordNoVowels = str_replace([\"\
    a\", \"e\", \"i\", \"o\", \"u\"], \"\", $wordString);\n    $wordNoVowelsArray\
    \ = str_split($wordNoVowels);\n    $wordNoVowelsString = implode(\"\", $wordNoVowelsArray);\n\
    \    $wordVowels = array_diff(str_split($wordString), str_split($wordNoVowelsString));\n\
    \    $wordVowelsString = implode(\"\", $wordVowels);\n    $wordVowelsArray = explode(\"\
    \ \", $wordVowelsString);\n    $wordNVowels = count($wordVowelsArray);\n    $wordNConsonants\
    \ = $wordNVowels - $n;\n    if ($wordNConsonants === 0) {\n      array_push($output,\
    \ $word);\n    }\n  }\n  return $output;\n}\nprint_r(select_words(\"Mary had a\
    \ little lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\", 3));\n\
    print_r(select_words(\"simple white space\", 2));\nprint_r(select_words(\"Hello\n\
    function candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"\
    little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary\
    \ had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Mary", expecting ")" in /tmp/tmp0isx3sbc.php
    on line 56

    '
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $words\
    \ = preg_split('/\\s+/', $s);\n  foreach ($words as $key => $word) {\n    if (strlen(preg_replace('/[^a-z]/i',\
    \ '', $word)) - strlen(preg_replace('/[^aeiou]/i', '', $word)) != $n) {\n    \
    \  unset($words[$key]);\n    }\n  }\n  return $words;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpybhin6nm.php:33\n\
    Stack trace:\n#0 /tmp/tmpybhin6nm.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpybhin6nm.php\
    \ on line 33\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $words\
    \ = explode(' ', $s);\n  foreach ($words as $key => $word) {\n    if (strlen(str_replace(array('a',\
    \ 'e', 'i', 'o', 'u'), '', $word)) !== $n) {\n      unset($words[$key]);\n   \
    \ }\n  }\n  return $words;\n}\nprint_r(select_words(\"Mary had a little lamb\"\
    , 4));\nprint_r(select_words(\"Mary had a little lamb\", 3));\nprint_r(select_words(\"\
    simple white space\", 2));\nprint_r(select_words(\"Hello world\", 4));\nprint_r(select_words(\"\
    Uncle sam\", 3));\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [3] => little\n)\nArray\n(\n    [0] => Mary\n    [4] => lamb\n\
    )\nArray\n(\n)\nArray\n(\n    [1] => world\n)\nArray\n(\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp5ei0miah.php:38\nStack trace:\n#0 /tmp/tmp5ei0miah.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp5ei0miah.php on line 38\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $array\
    \ = explode(\" \", $s);\n    $result = [];\n    foreach ($array as $value) {\n\
    \        if (strlen($value) == $n) {\n            $result[] = $value;\n      \
    \  }\n    }\n    return $result;\n}\necho \"<pre>\";\nvar_dump(select_words(\"\
    Mary had a little lamb\", 4));\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>array(2) {\n  [0]=>\n  string(4) \"Mary\"\n  [1]=>\n  string(4) \"\
    lamb\"\n}\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2t05g1tw.php:36\n\
    Stack trace:\n#0 /tmp/tmp2t05g1tw.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp2t05g1tw.php\
    \ on line 36\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n\t$a_result\
    \ = array();\n\t$vowels = array('a', 'e', 'i', 'o', 'u');\n\t$a_words = explode('\
    \ ', $s);\n\tforeach ($a_words as $word) {\n\t\t$vowel_count = 0;\n\t\t$consonant_count\
    \ = 0;\n\t\tfor ($i = 0; $i < strlen($word); $i++) {\n\t\t\tif (in_array($word[$i],\
    \ $vowels)) {\n\t\t\t\t$vowel_count++;\n\t\t\t} else {\n\t\t\t\t$consonant_count++;\n\
    \t\t\t}\n\t\t}\n\t\tif ($n == $consonant_count) {\n\t\t\t$a_result[] = $word;\n\
    \t\t}\n\t}\n\treturn $a_result;\n}\necho '<pre>';\nprint_r(select_words(\"Mary\
    \ had a little lamb\", 4));\necho '</pre>';\nfunction candidate(...$args) {\n\
    \    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => little\n)\n</pre>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpkey5i4fy.php:50\nStack trace:\n#0 /tmp/tmpkey5i4fy.php(55):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpkey5i4fy.php on line 50\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $arr\
    \ = explode(\" \", $s);\n  $results = [];\n  foreach ($arr as $key => $word) {\n\
    \    if (consonants($word) == $n) {\n      $results[] = $word;\n    }\n  }\n \
    \ return $results;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonants()\
    \ in /tmp/tmp5x4yzk6p.php:22\nStack trace:\n#0 /tmp/tmp5x4yzk6p.php(30): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp5x4yzk6p.php(34): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp5x4yzk6p.php(43): test()\n#3 {main}\n  thrown in /tmp/tmp5x4yzk6p.php\
    \ on line 22\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    if\
    \ (empty($s)) return array();\n    $arr = explode(' ', $s);\n    $r = array();\n\
    \    foreach ($arr as $k => $v) {\n        if (consonants($v) == $n) {\n     \
    \       $r[] = $v;\n        }\n    }\n    return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function consonants()\
    \ in /tmp/tmp18yf_6_8.php:23\nStack trace:\n#0 /tmp/tmp18yf_6_8.php(31): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp18yf_6_8.php(35): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp18yf_6_8.php(44): test()\n#3 {main}\n  thrown in /tmp/tmp18yf_6_8.php\
    \ on line 23\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  if (empty($s))\
    \ {\n    return array();\n  }\n  $result = array();\n  $words = explode(' ', $s);\n\
    \  foreach ($words as $word) {\n    $word_len = strlen($word);\n    $matches =\
    \ array();\n    preg_match_all('/[^aeiou]/', $word, $matches);\n    if ($word_len\
    \ - count($matches[0]) == $n) {\n      $result[] = $word;\n    }\n  }\n  return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptt44fw84.php:39\n\
    Stack trace:\n#0 /tmp/tmptt44fw84.php(48): test()\n#1 {main}\n  thrown in /tmp/tmptt44fw84.php\
    \ on line 39\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n  $a =\
    \ str_word_count($s, 1);\n  $l = count($a);\n  $result = array();\n  $current\
    \ = 0;\n  for ($i = 0; $i < $l; $i++) {\n    $current = 0;\n    $current = count_consonants($a[$i]);\n\
    \    if ($current == $n) {\n      array_push($result, $a[$i]);\n    }\n  }\n \
    \ return $result;\n}\n\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function count_consonants()\
    \ in /tmp/tmpyi6s3u6f.php:25\nStack trace:\n#0 /tmp/tmpyi6s3u6f.php(34): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmpyi6s3u6f.php(38): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmpyi6s3u6f.php(47): test()\n#3 {main}\n  thrown in /tmp/tmpyi6s3u6f.php\
    \ on line 25\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $s\
    \ = trim($s);\n    $arr = explode(\" \", $s);\n    $result = [];\n    foreach\
    \ ($arr as $word) {\n        if (substr_count($word, \"a\") + substr_count($word,\
    \ \"e\") + substr_count($word, \"i\") + substr_count($word, \"o\") + substr_count($word,\
    \ \"u\") + substr_count($word, \"y\") == $n) {\n            $result[] = $word;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkc79ayd4.php:35\n\
    Stack trace:\n#0 /tmp/tmpkc79ayd4.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpkc79ayd4.php\
    \ on line 35\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $result\
    \ = [];\n    if(empty($s)) return $result;\n    $words = explode(' ', $s);\n \
    \   $vowels = [ 'a', 'e', 'i', 'o', 'u' ];\n    foreach($words as $word) {\n \
    \       $count = 0;\n        for($i = 0; $i < strlen($word); $i++) {\n       \
    \     if(in_array($word[$i], $vowels)) {\n                $count++;\n        \
    \    }\n        }\n        if(strlen($word) - $count == $n) {\n            $result[]\
    \ = $word;\n        }\n    }\n    return $result;\n}\necho '<pre>';\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\necho '</pre>';\necho '<pre>';\nprint_r(select_words(\"\
    Mary had a little lamb\", 3));\necho '</pre>';\necho '<pre>';\nprint_r(select_words(\"\
    simple white space\", 2));\necho '</pre>';\necho '<pre>';\nprint_r(select_words(\"\
    Hello world\", 4));\necho '</pre>';\necho '<pre>';\nprint_r(select_words(\"Uncle\
    \ sam\", 3));\necho '</pre>';\nfunction candidate(...$args) {\n    return select_words(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"Mary had a little lamb\", 4)\
    \ !== array(\"little\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Mary had a little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\"\
    , 4) !== array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"\
    c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => little\n)\n</pre><pre>Array\n(\n    [0] => Mary\n\
    \    [1] => lamb\n)\n</pre><pre>Array\n(\n)\n</pre><pre>Array\n(\n    [0] => world\n\
    )\n</pre><pre>Array\n(\n)\n</pre>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpuiiv81xl.php:60\nStack trace:\n#0 /tmp/tmpuiiv81xl.php(65): test()\n\
    #1 {main}\n  thrown in /tmp/tmpuiiv81xl.php on line 60\n"
  timestamp: 1660004053
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n}\nfunction\
    \ candidate(...$args) {\n    return select_words(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"Mary had a little lamb\", 4) !== array(\"little\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a\
    \ little lamb\", 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"simple white space\", 2) !== array()) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !==\
    \ array(\"world\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    Uncle sam\", 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"\
    f\")) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmi5evlgd.php:25\n\
    Stack trace:\n#0 /tmp/tmpmi5evlgd.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpmi5evlgd.php\
    \ on line 25\n"
  timestamp: 1660004052
- exit_code: 255
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n    $words\
    \ = explode(' ', $s);\n    $result = [];\n    foreach ($words as $word) {\n  \
    \      if (count(removeVowels($word)) == $n) {\n            $result[] = $word;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return select_words(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    Mary had a little lamb\", 4) !== array(\"little\")) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(\"Mary had a little lamb\", 3) !== array(\"\
    Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    simple white space\", 2) !== array()) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"Hello world\", 4) !== array(\"world\")) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Uncle sam\", 3) !== array(\"Uncle\"))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\", 4) !== array())\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"a b c d e f\"\
    , 1) !== array(\"b\", \"c\", \"d\", \"f\")) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function removeVowels()\
    \ in /tmp/tmp_1xa4aza.php:22\nStack trace:\n#0 /tmp/tmp_1xa4aza.php(30): select_words('Mary\
    \ had a litt...', 4)\n#1 /tmp/tmp_1xa4aza.php(34): candidate('Mary had a litt...',\
    \ 4)\n#2 /tmp/tmp_1xa4aza.php(43): test()\n#3 {main}\n  thrown in /tmp/tmp_1xa4aza.php\
    \ on line 22\n"
  timestamp: 1660004053
- exit_code: 0
  program: "<?php\n// Given a string s and a natural number n, you have been tasked\
    \ to implement \n// a function that returns an array of all words from string\
    \ s that contain exactly \n// n consonants, in order these words appear in the\
    \ string s.\n// If the string s is empty then the function should return an empty\
    \ array.\n// Note: you may assume the input string contains only letters and spaces.\n\
    // Examples:\n// >>> select_words(\"Mary had a little lamb\", 4)\n// array(\"\
    little\")\n// >>> select_words(\"Mary had a little lamb\", 3)\n// array(\"Mary\"\
    , \"lamb\")\n// >>> select_words(\"simple white space\", 2)\n// array()\n// >>>\
    \ select_words(\"Hello world\", 4)\n// array(\"world\")\n// >>> select_words(\"\
    Uncle sam\", 3)\n// array(\"Uncle\")\nfunction select_words($s, $n) {\n\t$words\
    \ = explode(\" \", $s);\n\t$result = [];\n\tforeach ($words as $word) {\n\t\t\
    $consonants = 0;\n\t\t$vowels = 0;\n\t\tfor ($i = 0; $i < strlen($word); $i++)\
    \ {\n\t\t\tif (strpos(\"aeiouAEIOU\", $word[$i]) !== false) {\n\t\t\t\t$vowels++;\n\
    \t\t\t} else {\n\t\t\t\t$consonants++;\n\t\t\t}\n\t\t}\n\t\tif ($consonants ==\
    \ $n) {\n\t\t\t$result[] = $word;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(select_words(\"\
    Mary had a little lamb\", 4));\nprint_r(select_words(\"Mary had a little lamb\"\
    , 3));\nprint_r(select_words(\"simple white space\", 2));\nprint_r(select_words(\"\
    Hello world\", 4));\nprint_r(select_words(\"Uncle sam\", 3));\nfunction candidate(...$args)\
    \ {\n    return select_words(...$args);\n}\n\nfunction test(): void {\n    if\
    \ (candidate(\"Mary had a little lamb\", 4) !== array(\"little\")) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"Mary had a little lamb\"\
    , 3) !== array(\"Mary\", \"lamb\")) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"simple white space\", 2) !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"Hello world\", 4) !== array(\"world\"\
    )) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Uncle sam\"\
    , 3) !== array(\"Uncle\")) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(\"\", 4) !== array()) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\"a b c d e f\", 1) !== array(\"b\", \"c\", \"d\", \"f\"))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => little\n)\nArray\n(\n    [0] => Mary\n    [1] => lamb\n\
    )\nArray\n(\n)\nArray\n(\n    [0] => world\n)\nArray\n(\n    [0] => Uncle\n)\n"
  timestamp: 1660004053
