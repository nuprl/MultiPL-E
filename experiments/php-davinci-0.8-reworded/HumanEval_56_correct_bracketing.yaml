name: HumanEval_56_correct_bracketing
language: php
prompt: "<?php\n// brackets is a string of \"<\" and \">\".\n// return true if every\
  \ opening bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"\
  <\")\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
  <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing($brackets)\
  \ {\n"
tests: "function candidate(...$args) {\n    return correct_bracketing(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(\"<>\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"<<><>>\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"<><><<><>><>\") !== true) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"<><><<<><><>><>><<><><<>>>\") !== true)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<><>>>>\") !==\
  \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"><<>\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<<<\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\">\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<<>\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>><<>\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"<><><<><>><>>><>\"\
  ) !== false) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $brackets = str_split($brackets);\n  $open = 0;\n  foreach ($brackets\
    \ as $bracket) {\n    if ($bracket == '<') {\n      $open++;\n    } else {\n \
    \     $open--;\n    }\n    if ($open < 0) {\n      return false;\n    }\n  }\n\
    \  return $open == 0;\n}\n", "    $bracket_stack = array();\n    for ($i = 0;\
    \ $i < strlen($brackets); $i++) {\n        $bracket = $brackets[$i];\n       \
    \ if ($bracket == '<') {\n            array_push($bracket_stack, $bracket);\n\
    \        } else if ($bracket == '>') {\n            if (count($bracket_stack)\
    \ == 0) {\n                return false;\n            }\n            array_pop($bracket_stack);\n\
    \        }\n    }\n    return count($bracket_stack) == 0;\n}\n", "    // YOUR\
    \ CODE HERE\n}", "    // Set a counter to keep track of the number of opening\
    \ brackets.\n    $opening_brackets = 0;\n    // For each bracket in the string.\n\
    \    for ($i = 0; $i < strlen($brackets); $i++) {\n        // If the bracket is\
    \ \"<\" add one to the counter.\n        if ($brackets[$i] == \"<\") {\n     \
    \       $opening_brackets += 1;\n        }\n        // Else the bracket is \"\
    >\" and subtract one from the counter.\n        else {\n            $opening_brackets\
    \ -= 1;\n        }\n        // If the counter is ever negative return false,\n\
    \        // else return true if the number of opening brackets is 0.\n       \
    \ if ($opening_brackets < 0) {\n            return false;\n        }\n    }\n\
    \    return $opening_brackets == 0;\n}\n", "  // CODE HERE\n  $opening = substr_count($brackets,\
    \ '<');\n  $closing = substr_count($brackets, '>');\n  if ($opening == $closing)\
    \ {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "    $temp_array\
    \ = [];\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i]\
    \ == '<') {\n            array_push($temp_array, $brackets[$i]);\n        } else\
    \ {\n            if (!empty($temp_array)) {\n                array_pop($temp_array);\n\
    \            } else {\n                return false;\n            }\n        }\n\
    \    }\n    if (empty($temp_array)) {\n        return true;\n    } else {\n  \
    \      return false;\n    }\n}", "    $open = 0;\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        if ($brackets[$i] == \"<\") {\n            $open++;\n     \
    \   } else {\n            $open--;\n        }\n        if ($open < 0) {\n    \
    \        return false;\n        }\n    }\n    return $open == 0;\n}", "  // your\
    \ code here.\n  $bracketCount = 0;\n  for ($i = 0; $i < strlen($brackets); $i++)\
    \ {\n    if ($brackets[$i] == \"<\") {\n      $bracketCount++;\n    } else {\n\
    \      $bracketCount--;\n    }\n    if ($bracketCount < 0) {\n      return false;\n\
    \    }\n  }\n  return ($bracketCount == 0);\n}", "  $brackets_split = str_split($brackets);\n\
    \  $leng = count($brackets_split);\n  $num = 0;\n  for ($i = 0; $i < $leng; $i++)\
    \ {\n    if ($brackets_split[$i] == \"<\") {\n      $num = $num + 1;\n    } else\
    \ {\n      $num = $num - 1;\n    }\n    if ($num < 0) {\n      return false;\n\
    \    }\n  }\n  if ($num == 0) {\n    return true;\n  } else {\n    return false;\n\
    \  }\n}\n", "    $bracketStack = [];\n    $bracketMap = [\n        '>' => '<',\n\
    \    ];\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        $char = $brackets[$i];\n\
    \        if (array_key_exists($char, $bracketMap)) {\n            if (array_pop($bracketStack)\
    \ !== $bracketMap[$char]) {\n                return false;\n            }\n  \
    \      } else {\n            array_push($bracketStack, $char);\n        }\n  \
    \  }\n    return count($bracketStack) === 0;\n}\n", "  $index = 0;\n  for ($index\
    \ = 0; $index < strlen($brackets); $index++) {\n    if ($brackets[$index] == '<')\
    \ {\n      if ($brackets[$index + 1] == '>') {\n        $brackets = substr_replace($brackets,\
    \ '', $index, 2);\n        $index = 0;\n      }\n    }\n  }\n  if ($brackets ==\
    \ \"\") {\n    return true;\n  } else {\n    return false;\n  }\n}\n", "    //\
    \ Fill this in!\n}", "\t// your code here\n\t$i = 0;\n\t$answer = 0;\n\t$length\
    \ = strlen($brackets);\n\twhile ($i < $length) {\n\t\tif ($brackets[$i] == \"\
    <\") {\n\t\t\t$answer++;\n\t\t}\n\t\telseif ($brackets[$i] == \">\") {\n\t\t\t\
    $answer--;\n\t\t}\n\t\tif ($answer < 0) {\n\t\t\treturn false;\n\t\t}\n\t\t$i++;\n\
    \t}\n\tif ($answer == 0) {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\
    \t}\n}\n", "\t$count = 0;\n\tfor ($i = 0; $i < strlen($brackets); $i++) {\n\t\t\
    if ($brackets[$i] == \"<\") {\n\t\t\t$count++;\n\t\t} else {\n\t\t\t$count--;\n\
    \t\t}\n\t\tif ($count < 0) {\n\t\t\treturn false;\n\t\t}\n\t}\n\treturn $count\
    \ == 0;\n}\n", "    $open_brackets = [];\n    for ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n        $current_bracket = $brackets[$i];\n        if ($current_bracket\
    \ == \"<\") {\n            $open_brackets[] = $current_bracket;\n        } else\
    \ {\n            if (count($open_brackets) == 0) {\n                return false;\n\
    \            }\n            array_pop($open_brackets);\n        }\n    }\n   \
    \ return count($open_brackets) == 0;\n}", "  $stack = [];\n  for ($i = 0; $i <\
    \ strlen($brackets); $i++) {\n    $current = $brackets[$i];\n    if ($current\
    \ == '<') {\n      array_push($stack, $current);\n    } else {\n      array_pop($stack);\n\
    \    }\n  }\n  return count($stack) == 0;\n}\n", "    $open_count = 0;\n    $close_count\
    \ = 0;\n    for ($i = 0; $i < strlen($brackets); $i++) {\n        if ($brackets[$i]\
    \ == \"<\") {\n            $open_count++;\n        } else {\n            $close_count++;\n\
    \        }\n        if ($close_count > $open_count) {\n            return false;\n\
    \        }\n    }\n    return $open_count == $close_count;\n}\necho \"correct_bracketing(\\\
    \"<\\\"): \".correct_bracketing(\"<\").\"\\n\";\necho \"correct_bracketing(\\\"\
    <>\\\"): \".correct_bracketing(\"<>\").\"\\n\";\necho \"correct_bracketing(\\\"\
    <<><>>\\\"): \".correct_bracketing(\"<<><>>\").\"\\n\";\necho \"correct_bracketing(\\\
    \"><<>\\\"): \".correct_bracketing(\"><<>\").\"\\n\";\n", "    $pattern = '/<[^>]*>/';\n\
    \    $tokens = preg_split($pattern, $brackets, -1, PREG_SPLIT_OFFSET_CAPTURE);\n\
    \    $endIndex = count($tokens) - 1;\n    $startIndex = 0;\n    while (count($tokens)\
    \ > 1) {\n        $start = $tokens[$startIndex][1];\n        $end = $tokens[$endIndex][1]\
    \ + strlen($tokens[$endIndex][0]);\n        if ($start >= $end) {\n          \
    \  return false;\n        }\n        array_shift($tokens);\n        array_pop($tokens);\n\
    \    }\n    return true;\n}\n\n$result = correct_bracketing('<>');\necho $result;",
  "\t// your code here\n}\n", "\t$stack = new SplStack();\n\n\tfor ($i = 0; $i < strlen($brackets);\
    \ $i++) {\n\t\t$char = $brackets[$i];\n\t\tif ($char == '<') {\n\t\t\t$stack->push($char);\n\
    \t\t} else if ($char == '>') {\n\t\t\tif ($stack->isEmpty()) {\n\t\t\t\treturn\
    \ false;\n\t\t\t} else {\n\t\t\t\t$stack->pop();\n\t\t\t}\n\t\t}\n\t}\n\n\treturn\
    \ $stack->isEmpty();\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
