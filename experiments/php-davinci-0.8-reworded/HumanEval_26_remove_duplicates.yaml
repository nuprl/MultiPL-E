name: HumanEval_26_remove_duplicates
language: php
prompt: "<?php\n// From an array of integers, remove all elements that occur more\
  \ than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates(array(1,\
  \ 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers) {\n"
tests: "function candidate(...$args) {\n    return remove_duplicates(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
  \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
  ); }\n}\n\ntest();"
completions: ["    $length = count($numbers);\n    $result = array();\n    for ($i\
    \ = 0; $i < $length; $i++) {\n        $is_unique = true;\n        for ($j = 0;\
    \ $j < $length; $j++) {\n            if ($i !== $j && $numbers[$i] === $numbers[$j])\
    \ {\n                $is_unique = false;\n                break;\n           \
    \ }\n        }\n        if ($is_unique) {\n            $result[] = $numbers[$i];\n\
    \        }\n    }\n    return $result;\n}\n", "    $unique = array();\n    $unique_elements\
    \ = array();\n    foreach ($numbers as $number) {\n        if (!isset($unique[$number]))\
    \ {\n            $unique[$number] = 0;\n        }\n        $unique[$number]++;\n\
    \    }\n    foreach ($unique as $number => $occurrences) {\n        if ($occurrences\
    \ == 1) {\n            $unique_elements[] = $number;\n        }\n    }\n    return\
    \ $unique_elements;\n}\n$result = remove_duplicates(array(1, 2, 3, 2, 4));\necho\
    \ \"$result[0], $result[1], $result[2]\\n\";", "    $result = array();\n    foreach\
    \ ($numbers as $number) {\n        if (!in_array($number, $result)) {\n      \
    \      $result[] = $number;\n        }\n    }\n    return $result;\n}\n", "  \
    \  $uniques = array();\n    foreach ($numbers as $number) {\n        if (! in_array($number,\
    \ $uniques)) {\n            $uniques[] = $number;\n        }\n    }\n    return\
    \ $uniques;\n}\n", "  // your code here\n  $size = count($numbers);\n  $num_index\
    \ = 0;\n  $last_num_index = 0;\n  $not_dupe = [];\n  $is_dupe = false;\n  while\
    \ ($num_index < $size) {\n    $key = $numbers[$num_index];\n    if (!isset($not_dupe[$key]))\
    \ {\n      $not_dupe[$key] = true;\n      $last_num_index = $num_index;\n    }\
    \ else {\n      $numbers[$num_index] = $numbers[$last_num_index];\n      $numbers[$last_num_index]\
    \ = $key;\n      $last_num_index = $last_num_index - 1;\n    }\n    $num_index\
    \ = $num_index + 1;\n  }\n  return array_slice($numbers, 0, $last_num_index +\
    \ 1);\n}\n\n$numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n\
    $numbers = remove_duplicates($numbers);\nprint_r($numbers);", "\t$unique_numbers\
    \ = array();\n\t$numbers_counts = array_count_values($numbers);\n\tforeach ($numbers_counts\
    \ as $number => $count) {\n\t\tif ($count === 1) {\n\t\t\t$unique_numbers[] =\
    \ $number;\n\t\t}\n\t}\n\treturn $unique_numbers;\n}\n\nvar_dump(remove_duplicates(array(1,\
    \ 2, 3, 2, 4)));", "    $out = array();\n    foreach ($numbers as $num) {\n  \
    \      if (!in_array($num, $out)) {\n            $out[] = $num;\n        }\n \
    \   }\n    return $out;\n}\n", "    $unique = array();\n    $result = array();\n\
    \    foreach ($numbers as $number) {\n        if (!in_array($number, $unique))\
    \ {\n            $unique[] = $number;\n            $result[] = $number;\n    \
    \    }\n    }\n    return $result;\n}\n", "    // $results = array();\n    //\
    \ foreach ($numbers as $number) {\n    //     if (!isset($count[$number])) {\n\
    \    //         $count[$number] = 0;\n    //     }\n    //     $count[$number]++;\n\
    \    // }\n    // foreach ($count as $number => $occurrences) {\n    //     if\
    \ ($occurrences == 1) {\n    //         $results[] = $number;\n    //     }\n\
    \    // }\n    // return $results;\n\n    $count = array_count_values($numbers);\n\
    \    return array_keys($count, 1);\n}\n\n$res = remove_duplicates(array(1, 2,\
    \ 3, 2, 4));\nvar_dump($res);", "  $output = array();\n  $hash = array();\n  foreach\
    \ ($numbers as $number) {\n    if (!array_key_exists($number, $hash)) {\n    \
    \  $hash[$number] = 1;\n      $output[] = $number;\n    }\n  }\n  return $output;\n\
    }\n$input = array(1, 2, 3, 2, 4);\nvar_dump(remove_duplicates($input));", "\t\
    $data = [];\n\t$duplicate = [];\n\t$end = count($numbers);\n\tfor ($i = 0; $i\
    \ < $end; $i++) {\n\t\t$index = array_search($numbers[$i], $data);\n\t\tif ($index\
    \ !== false) {\n\t\t\t$duplicate[] = $numbers[$i];\n\t\t} else {\n\t\t\t$data[]\
    \ = $numbers[$i];\n\t\t}\n\t}\n\t$temp = [];\n\tforeach ($data as $value) {\n\t\
    \tif (!in_array($value, $duplicate)) {\n\t\t\t$temp[] = $value;\n\t\t}\n\t}\n\t\
    return $temp;\n}", "    $output = array();\n    foreach ($numbers as $number)\
    \ {\n        if (!in_array($number, $output)) {\n            $output[] = $number;\n\
    \        }\n    }\n    return $output;\n}\n", "    $temp = array();\n    $result\
    \ = array();\n    foreach ($numbers as $number) {\n        if (in_array($number,\
    \ $temp)) {\n            if (!in_array($number, $result)) {\n                $result[]\
    \ = $number;\n            }\n        } else {\n            $temp[] = $number;\n\
    \        }\n    }\n    return $result;\n}\n\n$a = array(1, 2, 3, 2, 4);\nvar_dump(remove_duplicates($a));",
  "\t$count = array_count_values($numbers);\n\treturn array_filter($numbers, function($element)\
    \ use ($count) {\n\t\treturn $count[$element] == 1;\n\t});\n}\n", "  // TODO:\
    \ Complete function\n  $newArr = [];\n  $counter = 0;\n  for ($i = 0; $i < count($numbers);\
    \ $i++) {\n    for ($j = 0; $j < count($numbers); $j++) {\n      if ($numbers[$i]\
    \ == $numbers[$j]) {\n        $counter++;\n      }\n    }\n    if ($counter <=\
    \ 1) {\n      array_push($newArr, $numbers[$i]);\n    }\n    $counter = 0;\n \
    \ }\n  return $newArr;\n}", "  $unique_numbers = array();\n  foreach ($numbers\
    \ as $number) {\n    if (!in_array($number, $unique_numbers)) {\n      $unique_numbers[]\
    \ = $number;\n    }\n  }\n  return $unique_numbers;\n}\n\nassert_options(ASSERT_BAIL,\
    \ 1);\nassert(remove_duplicates(array(1, 2, 3, 2, 4)) == array(1, 3, 4));\necho\
    \ \"All tests pass\\n\";", "\t$counts = array_count_values($numbers);\n\tforeach\
    \ ($counts as $key => $value) {\n\t\tif ($value > 1) {\n\t\t\tunset($numbers[array_search($key,\
    \ $numbers)]);\n\t\t}\n\t}\n\treturn $numbers;\n}\n", "    $numbers = array_values(array_unique($numbers));\n\
    \    return $numbers;\n}\n", "  $array = [];\n  foreach ($numbers as $key => $value)\
    \ {\n    if (!in_array($value, $array)) {\n      $array[] = $value;\n    }\n \
    \ }\n  return $array;\n}\n$array = [1, 2, 3, 2, 4];\necho '<pre>';\nprint_r(remove_duplicates($array));\n\
    echo '</pre>';\n", "    $unique_numbers = array();\n    $duplicate_numbers = array();\n\
    \    foreach ($numbers as $number) {\n        if (array_key_exists($number, $unique_numbers))\
    \ {\n            $duplicate_numbers[$number] = $number;\n        } else {\n  \
    \          $unique_numbers[$number] = $number;\n        }\n    }\n    $output\
    \ = array();\n    foreach ($numbers as $number) {\n        if (!array_key_exists($number,\
    \ $duplicate_numbers)) {\n            $output[] = $number;\n        }\n    }\n\
    \    return $output;\n}\n\necho \"\\n\";\necho \"input: array(1, 2, 3, 2, 4)\\\
    n\";\necho \"output: \\n\";\nprint_r(remove_duplicates(array(1, 2, 3, 2, 4)));\n\
    echo \"\\n\";\necho \"input: array(1, 2, 3, 4, 1, 2, 4, 3)\\n\";\necho \"output:\
    \ \\n\";\nprint_r(remove_duplicates(array(1, 2, 3, 4, 1, 2, 4, 3)));\necho \"\\\
    n\";\n", "  $result = array();\n  $tmp = array();\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $tmp)) {\n      $tmp[] = $number;\n      $result[]\
    \ = $number;\n    }\n  }\n  return $result;\n}\n$numbers = array(1, 2, 3, 2, 4);\n\
    $result = remove_duplicates($numbers);\nvar_dump($result);", "  $result = array();\n\
    \  $uniques = array();\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $uniques)) {\n      $uniques[] = $number;\n      $result[] = $number;\n    }\n\
    \  }\n  return $result;\n}\n", "  $i = 0;\n  $counter = count($numbers);\n  while\
    \ ($i < $counter) {\n    $j = $i + 1;\n    while ($j < $counter) {\n      if ($numbers[$i]\
    \ == $numbers[$j]) {\n        unset($numbers[$j]);\n        $counter--;\n    \
    \  }\n      $j++;\n    }\n    $i++;\n  }\n  $numbers = array_values($numbers);\n\
    \  return $numbers;\n}\n\n$numbers = array(1, 2, 3, 2, 4);\nvar_dump(remove_duplicates($numbers));",
  "    $numbers_tmp = array();\n    $result = array();\n    foreach ($numbers as $number)\
    \ {\n        if (!in_array($number, $numbers_tmp)) {\n            $numbers_tmp[]\
    \ = $number;\n            $result[] = $number;\n        }\n    }\n    return $result;\n\
    }\n", "    $result = array();\n    foreach ($numbers as $number) {\n        if\
    \ (! in_array($number, $result)) {\n            $result[] = $number;\n       \
    \ }\n    }\n    return $result;\n}", "\t$results = array();\n\tforeach ($numbers\
    \ as $number) {\n\t\tif (!in_array($number, $results)) {\n\t\t\t$results[] = $number;\n\
    \t\t}\n\t}\n\treturn $results;\n}", "    $elements = array();\n    $result = array();\n\
    \    foreach ($numbers as $number) {\n        if (!in_array($number, $elements))\
    \ {\n            $elements[] = $number;\n            $result[] = $number;\n  \
    \      }\n    }\n    return $result;\n}\n", "    $output = array();\n    $counter\
    \ = array();\n    foreach ($numbers as $number) {\n        if (isset($counter[$number]))\
    \ {\n            $counter[$number] += 1;\n        } else {\n            $counter[$number]\
    \ = 1;\n        }\n    }\n    foreach ($numbers as $number) {\n        if ($counter[$number]\
    \ == 1) {\n            $output[] = $number;\n        }\n    }\n    return $output;\n\
    }", "  $result = array();\n  foreach ($numbers as $number) {\n    if (!isset($result[$number]))\
    \ {\n      $result[$number] = 1;\n    } else {\n      $result[$number] += 1;\n\
    \    }\n  }\n  return array_keys(array_filter($result, function($v) { return $v\
    \ == 1; }));\n}\n\nprint_r(remove_duplicates(array(1, 2, 3, 2, 4)));", "\t$uniques\
    \ = array();\n\tforeach ($numbers as $number) {\n\t\tif (!in_array($number, $uniques))\
    \ {\n\t\t\t$uniques[] = $number;\n\t\t}\n\t}\n\treturn $uniques;\n}\n", "  $result\
    \ = array();\n  $duplicates = array();\n  foreach ($numbers as $number) {\n  \
    \  if (in_array($number, $result)) {\n      $duplicates[] = $number;\n    } else\
    \ {\n      $result[] = $number;\n    }\n  }\n  foreach ($duplicates as $duplicate)\
    \ {\n    $key = array_search($duplicate, $result);\n    unset($result[$key]);\n\
    \  }\n  return $result;\n}\n", "  $result = array();\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $result)) {\n      $result[] = $number;\n    }\n\
    \  }\n  return $result;\n}\n", "  $numbers_counter = array_count_values($numbers);\n\
    \  $result = array();\n  foreach ($numbers_counter as $number => $count) {\n \
    \   if ($count === 1) {\n      $result[] = $number;\n    }\n  }\n  return $result;\n\
    }\nprint_r(remove_duplicates(array(1, 2, 3, 2, 4)));", "\t$ret = array();\n\t\
    foreach ($numbers as $number) {\n\t\tif (!in_array($number, $ret)) {\n\t\t\t$ret[]\
    \ = $number;\n\t\t}\n\t}\n\treturn $ret;\n}\nprint_r(remove_duplicates(array(1,\
    \ 2, 3, 2, 4)));", "  $all_numbers = array();\n  $res = array();\n  for ($i =\
    \ 0; $i < count($numbers); $i++) {\n    if (!in_array($numbers[$i], $all_numbers))\
    \ {\n      $all_numbers[] = $numbers[$i];\n      $res[] = $numbers[$i];\n    }\n\
    \  }\n  return $res;\n}\n$numbers = array(1, 2, 3, 2, 4);\nvar_dump(remove_duplicates($numbers));",
  "  $filtered_numbers = array();\n  $occurences = array();\n  foreach ($numbers as\
    \ $number) {\n    if (!isset($occurences[$number])) {\n      $occurences[$number]\
    \ = 1;\n    } else {\n      $occurences[$number] += 1;\n    }\n  }\n  foreach\
    \ ($numbers as $number) {\n    if ($occurences[$number] == 1) {\n      $filtered_numbers[]\
    \ = $number;\n    }\n  }\n  return $filtered_numbers;\n}\n\nprint_r(remove_duplicates(array(1,\
    \ 2, 3, 2, 4)));", "    $uniques = array();\n    foreach ($numbers as $number)\
    \ {\n        if (!isset($uniques[$number])) {\n            $uniques[$number] =\
    \ 1;\n        } else {\n            $uniques[$number] += 1;\n        }\n    }\n\
    \    foreach ($uniques as $key => $value) {\n        if ($value > 1) {\n     \
    \       unset($uniques[$key]);\n        }\n    }\n    return array_keys($uniques);\n\
    }\n\necho \"----------remove_duplicates----------\\n\";\nvar_dump(remove_duplicates(array(1,\
    \ 2, 3, 2, 4)));\n", "\t$unique_numbers = array();\n\tforeach ($numbers as $number)\
    \ {\n\t\tif (!in_array($number, $unique_numbers)) {\n\t\t\t$unique_numbers[] =\
    \ $number;\n\t\t}\n\t}\n\treturn $unique_numbers;\n}\necho PHP_EOL . 'remove_duplicates(array(1,\
    \ 2, 3, 2, 4))' . PHP_EOL;\nprint_r(remove_duplicates(array(1, 2, 3, 2, 4)));\n\
    echo PHP_EOL;", "  $unique_numbers = array();\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $unique_numbers)) {\n      $unique_numbers[] =\
    \ $number;\n    }\n  }\n  return $unique_numbers;\n}\n$numbers = array(1, 2, 3,\
    \ 2, 4);\n$unique_numbers = remove_duplicates($numbers);\nprint_r($unique_numbers);",
  "    $numbers = array_unique($numbers);\n    return $numbers;\n}\n\nprint_r(remove_duplicates(array(1,\
    \ 2, 3, 2, 4)));", "  $unique_numbers = array();\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $unique_numbers)) {\n      $unique_numbers[] =\
    \ $number;\n    }\n  }\n  return $unique_numbers;\n}", "    return array_unique($numbers);\n\
    }\n", "  $numbers_no_dups = array();\n  foreach ($numbers as $number) {\n    $numbers_no_dups[$number]\
    \ = 1;\n  }\n  return array_keys($numbers_no_dups);\n}\n", "  $hash = array();\n\
    \  foreach ($numbers as $number) {\n    if (!isset($hash[$number])) {\n      $hash[$number]\
    \ = 1;\n    } else {\n      $hash[$number]++;\n    }\n  }\n  $unique = array();\n\
    \  foreach ($numbers as $number) {\n    if ($hash[$number] == 1) {\n      $unique[]\
    \ = $number;\n    }\n  }\n  return $unique;\n}\n", "    $uniques = array();\n\
    \    foreach ($numbers as $number) {\n        if (!in_array($number, $uniques))\
    \ {\n            $uniques[] = $number;\n        }\n    }\n    return $uniques;\n\
    }\n", "  $result = array();\n  $numbers_counted = array_count_values($numbers);\n\
    \  foreach ($numbers_counted as $number => $count) {\n    if ($count === 1) {\n\
    \      $result[] = $number;\n    }\n  }\n  return $result;\n}\n", "  // Your code\
    \ here.\n}\n", "\treturn array_unique($numbers);\n}\n", "  if (count($numbers)\
    \ == 0) {\n    return array();\n  }\n  $finalArray = array();\n  foreach ($numbers\
    \ as $key => $value) {\n    if (!in_array($value, $finalArray)) {\n      $finalArray[]\
    \ = $value;\n    }\n  }\n  return $finalArray;\n}\n", "    $uniques = array();\n\
    \    foreach ($numbers as $num) {\n        if (!in_array($num, $uniques)) {\n\
    \            $uniques[] = $num;\n        }\n    }\n    return $uniques;\n}\n",
  "\treturn array_unique($numbers);\n}\n", "    // TODO\n}\n", "\tforeach ($numbers\
    \ as $key => $value) {\n\t\t$numbers[$value] = 1;\n\t}\n\t//echo \"numbers: \"\
    ; print_r($numbers); echo \"<br>\";\n\tforeach ($numbers as $key => $value) {\n\
    \t\t$result[$key] = $value;\n\t}\n\t//echo \"result: \"; print_r($result); echo\
    \ \"<br>\";\n\treturn $result;\n}\n", "  $unique = array();\n  foreach ($numbers\
    \ as $number) {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n\
    \    }\n  }\n  return $unique;\n}\n\n$data = array(1, 2, 3, 2, 4);\n\nvar_dump(remove_duplicates($data));",
  "  $result = array();\n  $results = array();\n  $count = count($numbers);\n  for\
    \ ($i = 0; $i < $count; $i++) {\n    $result[] = $numbers[$i];\n    $search_key\
    \ = array_search($numbers[$i], $numbers);\n    if ($search_key > $i) {\n     \
    \ $result = array_diff($result, array($numbers[$i]));\n    }\n  }\n  $result =\
    \ array_values($result);\n  return $result;\n}\necho '<pre>';\nprint_r(remove_duplicates(array(1,\
    \ 2, 3, 2, 4)));\necho '</pre>';", "  // your code here\n}\n\nvar_dump(remove_duplicates(array(1,\
    \ 2, 3, 2, 4)));", "    // TODO: Implement me!\n}\n", "  // $uniques = array();\n\
    \  // foreach ($numbers as $number) {\n  //   if (!in_array($number, $uniques))\
    \ {\n  //     $uniques[] = $number;\n  //   }\n  // }\n  // return $uniques;\n\
    \n  return array_unique($numbers);\n}", "    $numbers = array_unique($numbers);\n\
    \    return $numbers;\n}\n", "    // Your solution here.\n}", "    return array_unique($numbers);\n\
    }\n", "  $result = array();\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $result)) {\n      $result[] = $number;\n    }\n  }\n  return $result;\n}\n\
    $numbers = array(1, 2, 3, 2, 4);\nprint_r(remove_duplicates($numbers));", "  $unique_numbers\
    \ = array();\n  foreach ($numbers as $number) {\n    if (in_array($number, $unique_numbers))\
    \ {\n      continue;\n    }\n    $unique_numbers[] = $number;\n  }\n  return $unique_numbers;\n\
    }", "  $hash = array();\n  foreach ($numbers as $number) {\n    if (isset($hash[$number]))\
    \ {\n      $hash[$number] += 1;\n    } else {\n      $hash[$number] = 1;\n   \
    \ }\n  }\n  $output = array();\n  foreach ($numbers as $number) {\n    if ($hash[$number]\
    \ == 1) {\n      $output[] = $number;\n    }\n  }\n  return $output;\n}\n", " \
    \ $duplicates = array();\n  $no_duplicates = array();\n  foreach ($numbers as\
    \ $number) {\n    if (in_array($number, $no_duplicates)) {\n      array_push($duplicates,\
    \ $number);\n    } else {\n      array_push($no_duplicates, $number);\n    }\n\
    \  }\n  return array_values(array_diff($no_duplicates, $duplicates));\n}\necho\
    \ implode(', ', remove_duplicates(array(1, 2, 3, 2, 4)));\necho \"\\n\";\n", " \
    \   $result = array();\n    for ($i = 0; $i < count($numbers); $i++) {\n     \
    \   if (array_search($numbers[$i], $numbers) == $i) {\n            $result[] =\
    \ $numbers[$i];\n        }\n    }\n    return $result;\n}\necho implode(remove_duplicates(array(1,\
    \ 2, 3, 2, 4)), ',');", "    $duplicates = array();\n    $unique = array();\n\
    \    foreach ($numbers as $number) {\n        if (array_key_exists($number, $duplicates))\
    \ {\n            $duplicates[$number] += 1;\n        } else {\n            $duplicates[$number]\
    \ = 1;\n        }\n    }\n    foreach ($numbers as $number) {\n        if ($duplicates[$number]\
    \ == 1) {\n            $unique[] = $number;\n        }\n    }\n    return $unique;\n\
    }\n", "    $unique = array();\n    foreach ($numbers as $number) {\n        if\
    \ (! in_array($number, $unique)) {\n            $unique[] = $number;\n       \
    \ }\n    }\n    return $unique;\n}\n\n$numbers = array(1, 2, 3, 2, 4);\nprint_r(remove_duplicates($numbers));\n",
  "\t$uniques = array();\n\tforeach ($numbers as $number) {\n\t\tif (!in_array($number,\
    \ $uniques)) {\n\t\t\t$uniques[] = $number;\n\t\t}\n\t}\n\treturn $uniques;\n\
    }\n\n$numbers = array(1, 2, 3, 2, 4);\nprint_r(remove_duplicates($numbers));\n",
  "    $numbers = array_count_values($numbers);\n    $newArray = [];\n    foreach\
    \ ($numbers as $key => $value) {\n        if ($value == 1) {\n            $newArray[]\
    \ = $key;\n        }\n    }\n    return $newArray;\n}\n\necho '<h2>\u0423\u0434\
    \u0430\u043B\u0435\u043D\u0438\u0435 \u0434\u0443\u0431\u043B\u0438\u043A\u0430\
    \u0442\u043E\u0432 \u0438\u0437 \u043C\u0430\u0441\u0441\u0438\u0432\u0430</h2>';\n\
    $numbers = [1, 2, 3, 2, 4];\necho '<pre>';\nprint_r($numbers);\necho '</pre>';\n\
    $result = remove_duplicates($numbers);\necho '<pre>';\nprint_r($result);\necho\
    \ '</pre>';\n", "  $unique = array();\n  foreach ($numbers as $number) {\n   \
    \ if (!in_array($number, $unique)) {\n      $unique[] = $number;\n    }\n  }\n\
    \  return $unique;\n}", "    $unique = array();\n    foreach ($numbers as $number)\
    \ {\n        if (!in_array($number, $unique)) {\n            $unique[] = $number;\n\
    \        }\n    }\n    return $unique;\n}\n\n$array = array(1, 2, 3, 2, 4);\n\
    $array = remove_duplicates($array);\necho implode(\", \", $array);", "    $temp_array\
    \ = array();\n    $temp_array[0] = $numbers[0];\n    $i = 1;\n    for ($j = 1;\
    \ $j < count($numbers); $j++) {\n        if ($numbers[$j] != $numbers[$j - 1])\
    \ {\n            $temp_array[$i] = $numbers[$j];\n            $i++;\n        }\n\
    \    }\n    return $temp_array;\n}\n\n$array = array(1, 2, 3, 2, 4);\nvar_dump(remove_duplicates($array));",
  "  // Your code here.\n}\n", "    $arr = array();\n    foreach ($numbers as $number)\
    \ {\n        if (!in_array($number, $arr)) {\n            $arr[] = $number;\n\
    \        }\n    }\n    return $arr;\n}\n", "    // Your code here\n}\n", "  $myarray\
    \ = array_count_values($numbers);\n  $newarray = array();\n  foreach ($myarray\
    \ as $key => $value) {\n    if ($value === 1) {\n      array_push($newarray, $key);\n\
    \    }\n  }\n  return $newarray;\n}\necho '<pre>';\nvar_dump(remove_duplicates(array(1,\
    \ 2, 3, 2, 4)));\necho '</pre>';", "    $result = array();\n    $counts = array_count_values($numbers);\n\
    \    foreach ($numbers as $num) {\n        if ($counts[$num] == 1) {\n       \
    \     $result[] = $num;\n        }\n    }\n    return $result;\n}\n", "    $tmp\
    \ = array();\n    foreach ($numbers as $number) {\n        if (!in_array($number,\
    \ $tmp)) {\n            $tmp[] = $number;\n        }\n    }\n    return $tmp;\n\
    }\necho json_encode(remove_duplicates(array(1, 2, 3, 2, 4)));", "\t$new_array\
    \ = array();\n\tforeach ($numbers as $number) {\n\t\tif ( !in_array($number, $new_array)\
    \ ) {\n\t\t\t$new_array[] = $number;\n\t\t}\n\t}\n\treturn $new_array;\n}\n\n\
    $test = array(1, 2, 3, 2, 4);\nprint_r(remove_duplicates($test));", "  $result\
    \ = array();\n  $occurences = array();\n  foreach ($numbers as $num) {\n    if\
    \ (!array_key_exists($num, $occurences)) {\n      $occurences[$num] = 1;\n   \
    \ } else {\n      $occurences[$num]++;\n    }\n  }\n  foreach ($numbers as $num)\
    \ {\n    if ($occurences[$num] == 1) {\n      $result[] = $num;\n    }\n  }\n\
    \  return $result;\n}\n", "    $result = array();\n    $unique = array();\n  \
    \  foreach ($numbers as $num) {\n        if (!isset($unique[$num])) {\n      \
    \      $unique[$num] = true;\n            $result[] = $num;\n        }\n    }\n\
    \    return $result;\n}\n", "    // Fill in the missing code.\n    $output_array\
    \ = array();\n    $dupes = array();\n    foreach ($numbers as $number) {\n   \
    \     if (in_array($number, $output_array)) {\n            $dupes[] = $number;\n\
    \        } else {\n            $output_array[] = $number;\n        }\n    }\n\
    \    return array_diff($output_array, $dupes);\n}\n\nvar_dump(remove_duplicates(array(1,\
    \ 2, 3, 2, 4)));", "  $unique_numbers = array();\n  foreach ($numbers as $number)\
    \ {\n    if (!in_array($number, $unique_numbers)) {\n      $unique_numbers[] =\
    \ $number;\n    }\n  }\n  return $unique_numbers;\n}\n", "  return array_values(array_unique($numbers));\n\
    }\n\necho json_encode(remove_duplicates(array(1, 2, 3, 2, 4)));", "  //...\n}\n",
  "    $unique = array();\n    foreach ($numbers as $number) {\n        if (!in_array($number,\
    \ $unique)) {\n            $unique[] = $number;\n        }\n    }\n    return\
    \ $unique;\n}\n", "    $unique_numbers = array();\n    foreach ($numbers as $number)\
    \ {\n        if (count(array_keys($unique_numbers, $number)) == 0) {\n       \
    \     $unique_numbers[] = $number;\n        }\n    }\n    return $unique_numbers;\n\
    }\n\nassert(remove_duplicates(array(1, 2, 3, 2, 4)) == array(1, 3, 4));\n", " \
    \   $uniqueNumbers = [];\n    $numberCounts = [];\n    foreach ($numbers as $number)\
    \ {\n        if (!isset($numberCounts[$number])) {\n            $numberCounts[$number]\
    \ = 0;\n        }\n        $numberCounts[$number]++;\n    }\n    foreach ($numbers\
    \ as $number) {\n        if ($numberCounts[$number] === 1) {\n            $uniqueNumbers[]\
    \ = $number;\n        }\n    }\n    return $uniqueNumbers;\n}\necho \"Exercise\
    \ 1 results: <br />\";\necho \"<pre>\";\nprint_r(remove_duplicates([1, 2, 3, 2,\
    \ 4]));\necho \"</pre>\";\necho \"<hr />\";\n", "  $numbers = array_flip($numbers);\n\
    \  $numbers = array_flip($numbers);\n  return $numbers;\n}\n", "    return array_unique($numbers);\n\
    }\nprint_r(remove_duplicates(array(1, 2, 3, 2, 4)));\n\necho \"<br><br>\";\necho\
    \ \"<br><br>\";\n", "    $newArray = [];\n    $duplicate = [];\n    foreach ($numbers\
    \ as $number) {\n        if (in_array($number, $newArray)) {\n            array_push($duplicate,\
    \ $number);\n        } else {\n            array_push($newArray, $number);\n \
    \       }\n    }\n    foreach ($duplicate as $item) {\n        $key = array_search($item,\
    \ $newArray);\n        unset($newArray[$key]);\n    }\n    return $newArray;\n\
    }", "  $result = array();\n  $seen = array();\n  foreach ($numbers as $number)\
    \ {\n    if (!isset($seen[$number])) {\n      $result[] = $number;\n      $seen[$number]\
    \ = true;\n    }\n  }\n  return $result;\n}\n", "    $counter = array_count_values($numbers);\n\
    \    $result = array();\n    foreach ($counter as $key => $value) {\n        if\
    \ ($value === 1) {\n            $result[] = $key;\n        }\n    }\n    return\
    \ $result;\n}", "\t$numbers_distinct = array();\n\tforeach ($numbers as $number)\
    \ {\n\t\tif (!in_array($number, $numbers_distinct)) {\n\t\t\t$numbers_distinct[]\
    \ = $number;\n\t\t}\n\t}\n\treturn $numbers_distinct;\n}\n\nvar_dump(remove_duplicates(array(1,\
    \ 2, 3, 2, 4)));\n", "  $arrlength = count($numbers);\n  $output = array();\n\
    \  for($x = 0; $x < $arrlength; $x++) {\n    if(!in_array($numbers[$x], $output))\
    \ {\n      array_push($output, $numbers[$x]);\n    }\n  }\n  return $output;\n\
    }\n", "  $uniques = array();\n  foreach ($numbers as $num) {\n    if (!in_array($num,\
    \ $uniques)) {\n      $uniques[] = $num;\n    }\n  }\n  return $uniques;\n}\n",
  "  $numbers_arr = [];\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $numbers_arr)) {\n      $numbers_arr[] = $number;\n    }\n  }\n  return $numbers_arr;\n\
    }\n", "\t$non_duplicates = array();\n\tforeach ($numbers as $number) {\n\t\tif\
    \ (!in_array($number, $non_duplicates)) {\n\t\t\t$non_duplicates[] = $number;\n\
    \t\t}\n\t}\n\treturn $non_duplicates;\n}\n$numbers = array(1, 2, 3, 2, 4);\nprint_r(remove_duplicates($numbers));\n\
    echo \"\\n\";", "    $output = array();\n    foreach ($numbers as $number) {\n\
    \        if (!in_array($number, $output)) {\n            $output[] = $number;\n\
    \        }\n    }\n    return $output;\n}\n", "  $uniques = array();\n  foreach\
    \ ($numbers as $number) {\n    if (!in_array($number, $uniques)) {\n      $uniques[]\
    \ = $number;\n    }\n  }\n  return $uniques;\n}\n\n$numbers = array(1, 2, 3, 2,\
    \ 4);\nprint_r(remove_duplicates($numbers));", "\t$numbers1 = array_unique($numbers);\n\
    \treturn $numbers1;\n}", "    $result = array();\n    $counts = array_count_values($numbers);\n\
    \    foreach ($numbers as $key => $value) {\n        if ($counts[$value] == 1)\
    \ {\n            $result[] = $value;\n        }\n    }\n    return $result;\n\
    }\n\n$a = array(1, 2, 3, 2, 4);\n$result = remove_duplicates($a);\nprint_r($result);\n",
  "  $unique = array();\n  foreach ($numbers as $number) {\n    if (in_array($number,\
    \ $unique)) {\n      continue;\n    }\n    array_push($unique, $number);\n  }\n\
    \  return $unique;\n}\n\n$numbers = array(1, 2, 3, 2, 4);\nprint_r(remove_duplicates($numbers));",
  "    $numbers_mapped = array();\n    foreach ($numbers as $number) {\n        if\
    \ ( ! isset($numbers_mapped[$number])) {\n            $numbers_mapped[$number]\
    \ = 1;\n        } else {\n            $numbers_mapped[$number]++;\n        }\n\
    \    }\n    $numbers_filtered = array();\n    foreach ($numbers_mapped as $number\
    \ => $count) {\n        if ($count === 1) {\n            $numbers_filtered[] =\
    \ $number;\n        }\n    }\n    return $numbers_filtered;\n}\n", "\t$result\
    \ = array();\n\tforeach ($numbers as $number) {\n\t\tif (!in_array($number, $result))\
    \ {\n\t\t\t$result[] = $number;\n\t\t}\n\t}\n\treturn $result;\n}\n", "    $unique_numbers\
    \ = array();\n    foreach ($numbers as $number) {\n        if (!in_array($number,\
    \ $unique_numbers)) {\n            $unique_numbers[] = $number;\n        }\n \
    \   }\n    return $unique_numbers;\n}\n\necho \"\\nRemove duplicates:\\n\";\n\
    echo implode(', ', remove_duplicates(array(1, 2, 3, 2, 4))); // 1, 3, 4\necho\
    \ \"\\n\";\n", "\t$new_array = array();\n\t$occurrences = array();\n\tforeach\
    \ ($numbers as $number) {\n\t\tif (!in_array($number, $occurrences)) {\n\t\t\t\
    $occurrences[] = $number;\n\t\t\t$new_array[] = $number;\n\t\t}\n\t}\n\treturn\
    \ $new_array;\n}\n", "\t$unique = array();\n\t$unique_count = array();\n\tforeach\
    \ ($numbers as $number) {\n\t\tif (isset($unique_count[$number])) {\n\t\t\t$unique_count[$number]++;\n\
    \t\t} else {\n\t\t\t$unique_count[$number] = 1;\n\t\t}\n\t}\n\tforeach ($numbers\
    \ as $number) {\n\t\tif ($unique_count[$number] == 1) {\n\t\t\t$unique[] = $number;\n\
    \t\t}\n\t}\n\treturn $unique;\n}\n$arr = array(1, 2, 3, 2, 4);\nprint_r(remove_duplicates($arr));",
  "\t$numbers_count = count($numbers);\n\t$last_number = $numbers[0];\n\t$duplicates\
    \ = array();\n\tfor ($i = 1; $i < $numbers_count; $i++) {\n\t\tif ($last_number\
    \ == $numbers[$i]) {\n\t\t\t$duplicates[] = $numbers[$i];\n\t\t}\n\t\t$last_number\
    \ = $numbers[$i];\n\t}\n\treturn array_diff($numbers, $duplicates);\n}\n$numbers\
    \ = array(1, 2, 3, 2, 4);\necho \"Remove duplicates in (\" . implode(\", \", $numbers)\
    \ . \"): \";\n$numbers = remove_duplicates($numbers);\necho \"(\" . implode(\"\
    , \", $numbers) . \")\";\necho \"\\n\";\n", "  return array_unique($numbers);\n\
    }\n", "    $new_array = [];\n    foreach ($numbers as $number) {\n        if (!in_array($number,\
    \ $new_array)) {\n            $new_array[] = $number;\n        }\n    }\n    return\
    \ $new_array;\n}\nprint_r(remove_duplicates([1, 2, 3, 2, 4]));", "  return array_values(array_unique($numbers));\n\
    }\n", "  $deduped = array();\n  $already_seen = array();\n  foreach ($numbers\
    \ as $num) {\n    if (!in_array($num, $already_seen)) {\n      $deduped[] = $num;\n\
    \      $already_seen[] = $num;\n    }\n  }\n  return $deduped;\n}", "\t$result\
    \ = array();\n\tforeach ($numbers as $number) {\n\t\tif (!in_array($number, $result))\
    \ {\n\t\t\t$result[] = $number;\n\t\t}\n\t}\n\treturn $result;\n}\n", "  $result\
    \ = array();\n  foreach ($numbers as $number) {\n    if (!in_array($number, $result))\
    \ {\n      $result[] = $number;\n    }\n  }\n  return $result;\n}\n", "  $new_array\
    \ = array();\n  foreach ($numbers as $number) {\n    if (!in_array($number, $new_array))\
    \ {\n      $new_array[] = $number;\n    }\n  }\n  return $new_array;\n}\n", " \
    \   $result = array();\n    foreach ($numbers as $index => $number) {\n      \
    \  if (array_key_exists($number, $result)) {\n            unset($result[$number]);\n\
    \        } else {\n            $result[$number] = $index;\n        }\n    }\n\
    \    return array_keys($result);\n}\n", "    $numbers_unique = array_unique($numbers);\n\
    \    foreach ($numbers as $item) {\n        if (!in_array($item, $numbers_unique))\
    \ {\n            unset($item);\n        }\n    }\n    return $numbers;\n}\n$numbers\
    \ = array(1, 2, 3, 2, 4);\necho \"<pre>\";\nprint_r(remove_duplicates($numbers));\n\
    echo \"</pre>\";", "  $filtered = array();\n  foreach ($numbers as $number) {\n\
    \    if (!in_array($number, $filtered)) {\n      $filtered[] = $number;\n    }\n\
    \  }\n  return $filtered;\n}\n\nassert_options(ASSERT_BAIL, 1);\nassert(remove_duplicates(array(1,\
    \ 2, 3, 2, 4)) == array(1, 3, 4));\nassert(remove_duplicates(array(1, 2, 3, 4))\
    \ == array(1, 2, 3, 4));\nassert(remove_duplicates(array(1, 2, 3, 3, 3, 4)) ==\
    \ array(1, 2, 4));\nassert(remove_duplicates(array(1, 2, 2, 3, 3, 3, 4)) == array(1,\
    \ 4));\necho \"All tests passed.\\n\";", "\t$result = array();\n\tforeach ($numbers\
    \ as $number) {\n\t\tif (!isset($seen[$number])) {\n\t\t\t$result[] = $number;\n\
    \t\t\t$seen[$number] = true;\n\t\t}\n\t}\n\treturn $result;\n}\nprint_r(remove_duplicates(array(1,\
    \ 2, 3, 2, 4)));", "    $distinct = array();\n    foreach ($numbers as $num) {\n\
    \        if (!in_array($num, $distinct)) {\n            $distinct[] = $num;\n\
    \        }\n    }\n    return $distinct;\n}\n\n$numbers = array(1, 2, 3, 2, 4);\n\
    print_r(remove_duplicates($numbers));", "  $uniques = array();\n  foreach ($numbers\
    \ as $number) {\n    if (!in_array($number, $uniques)) {\n      $uniques[] = $number;\n\
    \    }\n  }\n  return $uniques;\n}\n", "    $no_duplicates = array();\n    foreach\
    \ ($numbers as $number) {\n        if (count(array_keys($no_duplicates, $number))\
    \ == 0) {\n            $no_duplicates[] = $number;\n        }\n    }\n    return\
    \ $no_duplicates;\n}\n", "  // TODO: Implement me!\n}\n", "  $numbersArray = [];\n\
    \  $duplicatesArray = [];\n  $outputArray = [];\n  foreach ($numbers as $number)\
    \ {\n    if (in_array($number, $numbersArray)) {\n      $duplicatesArray[] = $number;\n\
    \    } else {\n      $numbersArray[] = $number;\n    }\n  }\n  foreach ($numbers\
    \ as $number) {\n    if (!in_array($number, $duplicatesArray)) {\n      $outputArray[]\
    \ = $number;\n    }\n  }\n  return $outputArray;\n}", "  $arr = array();\n  foreach\
    \ ($numbers as $num) {\n    if (!in_array($num, $arr)) {\n      $arr[] = $num;\n\
    \    }\n  }\n  return $arr;\n}\n\n$arr = array(1, 2, 3, 2, 4);\nprint_r(remove_duplicates($arr));\n",
  "    return array_unique($numbers);\n}\n", "\t$uniques = array();\n\tforeach ($numbers\
    \ as $number) {\n\t\tif (array_search($number, $uniques) === false) {\n\t\t\t\
    $uniques[] = $number;\n\t\t}\n\t}\n\treturn $uniques;\n}\n", "    $uniques = array();\n\
    \    foreach ($numbers as $n) {\n        if (!in_array($n, $uniques))\n      \
    \      $uniques[] = $n;\n    }\n    return $uniques;\n}\necho '<pre>' . implode(',\
    \ ', remove_duplicates(array(1, 2, 3, 2, 4))) . '</pre>';\n", "    $result = array();\n\
    \    $map = array();\n    foreach ($numbers as $n) {\n        if (!isset($map[$n]))\
    \ {\n            $map[$n] = 1;\n            $result[] = $n;\n        }\n    }\n\
    \    return $result;\n}", "\t$final = array();\n\t$count = count($numbers);\n\t\
    $key = 0;\n\t$last = 0;\n\tfor ($i = 0; $i < $count; $i++) {\n\t\t$key = $numbers[$i];\n\
    \t\tif ($last != $key) {\n\t\t\t$first = -1;\n\t\t\tfor ($j = 0; $j < $count;\
    \ $j++) {\n\t\t\t\tif ($numbers[$j] == $key) {\n\t\t\t\t\tif ($first == -1) {\n\
    \t\t\t\t\t\t$first = $j;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$first = $j;\n\t\t\t\
    \t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($first == $i) {\n\t\t\
    \t\t$final[] = $key;\n\t\t\t}\n\t\t}\n\t\t$last = $key;\n\t}\n\treturn $final;\n\
    }", "    $count = count($numbers);\n    for ($i = 0; $i < $count; $i++) {\n  \
    \      for ($j = $i + 1; $j < $count; $j++) {\n            if ($numbers[$i] ==\
    \ $numbers[$j]) {\n                unset($numbers[$i]);\n            }\n     \
    \   }\n    }\n    return $numbers;\n}\n\n$array = array(1, 2, 3, 2, 4);\n$result\
    \ = remove_duplicates($array);\n", "  $out = array();\n  $cnt = array_count_values($numbers);\n\
    \  foreach ($numbers as $n) {\n    if ($cnt[$n] == 1) {\n      $out[] = $n;\n\
    \    }\n  }\n  return $out;\n}\n", "\t$occurrences = [];\n\tforeach ($numbers\
    \ as $number) {\n\t\tif (isset($occurrences[$number])) {\n\t\t\t$occurrences[$number]++;\n\
    \t\t} else {\n\t\t\t$occurrences[$number] = 1;\n\t\t}\n\t}\n\t$unique_numbers\
    \ = [];\n\tforeach ($numbers as $number) {\n\t\tif ($occurrences[$number] == 1)\
    \ {\n\t\t\t$unique_numbers[] = $number;\n\t\t}\n\t}\n\treturn $unique_numbers;\n\
    }\n", "    $frequencies = array_count_values($numbers);\n    $result = array();\n\
    \    foreach ($numbers as $number) {\n        if ($frequencies[$number] == 1)\
    \ {\n            $result[] = $number;\n        }\n    }\n    return $result;\n\
    }\n", "    // return array_unique($numbers);\n    $result = [];\n    foreach ($numbers\
    \ as $value) {\n        if (count(array_keys($numbers, $value)) === 1) {\n   \
    \         $result[] = $value;\n        }\n    }\n    return $result;\n}\n", " \
    \   $result = array();\n    $number_occurrence = array();\n    foreach ($numbers\
    \ as $number) {\n        if (!isset($number_occurrence[$number])) {\n        \
    \    $number_occurrence[$number] = 1;\n        } else {\n            $number_occurrence[$number]++;\n\
    \        }\n    }\n    foreach ($numbers as $number) {\n        if ($number_occurrence[$number]\
    \ == 1) {\n            $result[] = $number;\n        }\n    }\n    return $result;\n\
    }", "    // your code goes here\n    $unique = array_unique($numbers);\n    return\
    \ $unique;\n}", "    $unique_numbers = array();\n    foreach ($numbers as $number)\
    \ {\n        if (!in_array($number, $unique_numbers)) {\n            $unique_numbers[]\
    \ = $number;\n        }\n    }\n    return $unique_numbers;\n}\n", "    $array\
    \ = array();\n    for ($i = 0; $i < count($numbers); $i++) {\n        if (! in_array($numbers[$i],\
    \ $array)) {\n            $array[] = $numbers[$i];\n        }\n    }\n    return\
    \ $array;\n}\n", "    $unique = array();\n    foreach ($numbers as $number) {\n\
    \        if (!in_array($number, $unique)) {\n            $unique[] = $number;\n\
    \        }\n    }\n    return $unique;\n}\n", "    $results = array();\n    foreach\
    \ ($numbers as $num) {\n        if (!in_array($num, $results)) {\n           \
    \ $results[] = $num;\n        }\n    }\n    return $results;\n}\n", "\t$numbers\
    \ = array_count_values($numbers);\n\tforeach ($numbers as $key => $value) {\n\t\
    \tif ($value > 1) {\n\t\t\tunset($numbers[$key]);\n\t\t}\n\t}\n\treturn $numbers;\n\
    }\n", "    $elements = array();\n    foreach ($numbers as $number) {\n       \
    \ if (!in_array($number, $elements)) {\n            $elements[] = $number;\n \
    \       }\n    }\n    return $elements;\n}\n", "    return array_unique($numbers);\n\
    }\n\n$numbers = array(1, 2, 3, 2, 4);\nvar_dump(remove_duplicates($numbers));",
  "    $numbers = array_flip($numbers);\n    $numbers = array_flip($numbers);\n  \
    \  $numbers = array_values($numbers);\n    return $numbers;\n}\n", "\t// count\
    \ occurences of each number\n\t$counts = array_count_values($numbers);\n\t\n\t\
    // loop through each occurence\n\tforeach ($counts as $number => $count) {\n\t\
    \t// if the number occurs more than once\n\t\tif ($count > 1) {\n\t\t\t// remove\
    \ all occurences of the number\n\t\t\t$numbers = array_diff($numbers, array($number));\n\
    \t\t}\n\t}\n\t\n\treturn $numbers;\n}\n", "  $unique = array();\n  foreach ($numbers\
    \ as $number) {\n    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n\
    \    }\n  }\n  return $unique;\n}\n", "\t// YOUR CODE HERE\n}\n", "\t$count =\
    \ 0;\n\tforeach ($numbers as $key => $val) {\n\t\tif (in_array($val, $numbers))\
    \ {\n\t\t\t$count++;\n\t\t}\n\t\tif ($count > 1) {\n\t\t\tunset($numbers[$key]);\n\
    \t\t}\n\t}\n\tprint_r($numbers);\n}", "    $ret = array();\n    for ($i = 0; $i\
    \ < count($numbers); $i++) {\n        $times = 0;\n        for ($j = 0; $j < count($numbers);\
    \ $j++) {\n            if ($numbers[$i] == $numbers[$j]) {\n                $times++;\n\
    \            }\n        }\n        if ($times == 1) {\n            $ret[] = $numbers[$i];\n\
    \        }\n    }\n    return $ret;\n}\n\necho implode(\", \", remove_duplicates(array(1,\
    \ 2, 3, 2, 4))) . \"\\n\";", "    $counts = array_count_values($numbers);\n  \
    \  $result = array();\n    foreach ($numbers as $number) {\n        if ($counts[$number]\
    \ == 1) {\n            $result[] = $number;\n        }\n    }\n    return $result;\n\
    }", "    $result = array();\n    $occurrences = array();\n    foreach ($numbers\
    \ as $number) {\n        if (!array_key_exists($number, $occurrences)) {\n   \
    \         $occurrences[$number] = 1;\n        } else {\n            $occurrences[$number]\
    \ += 1;\n        }\n    }\n    foreach ($numbers as $number) {\n        if ($occurrences[$number]\
    \ == 1) {\n            $result[] = $number;\n        }\n    }\n    return $result;\n\
    }\n", "\t$res = array();\n\tforeach ($numbers as $number) {\n\t\tif (!in_array($number,\
    \ $res)) {\n\t\t\t$res[] = $number;\n\t\t}\n\t}\n\treturn $res;\n}\n\n$ret = remove_duplicates(array(1,\
    \ 2, 3, 2, 4));\nprint_r($ret);", "  $output = array();\n  $numbers_count = count($numbers);\n\
    \  for ($i = 0; $i < $numbers_count; $i++) {\n    $already_present = FALSE;\n\
    \    for ($j = 0; $j < $i; $j++) {\n      if ($numbers[$i] == $numbers[$j]) {\n\
    \        $already_present = TRUE;\n        break;\n      }\n    }\n    if (!$already_present)\
    \ {\n      $output[] = $numbers[$i];\n    }\n  }\n  return $output;\n}\n\nprint_r(remove_duplicates(array(1,\
    \ 2, 3, 2, 4)));\n", "    return array_reverse(array_diff_assoc(array_reverse($numbers),\
    \ array_reverse(array_unique($numbers))));\n}\n\n$result = remove_duplicates(array(1,\
    \ 2, 3, 2, 4));\nprint_r($result);", "    $uniques = array();\n    foreach ($numbers\
    \ as $number) {\n        if (!in_array($number, $uniques)) {\n            $uniques[]\
    \ = $number;\n        }\n    }\n    return $uniques;\n}\n", "\t$newArray = array();\n\
    \tfor ($i = 0; $i < count($numbers); $i++) {\n\t\tif (!in_array($numbers[$i],\
    \ $newArray)) {\n\t\t\tarray_push($newArray, $numbers[$i]);\n\t\t}\n\t}\n\treturn\
    \ $newArray;\n}\n\n$newArray = remove_duplicates(array(1, 2, 3, 2, 4));\nprint_r($newArray);\n\
    \necho \"<br>\";\n", "\treturn array_values(array_unique($numbers));\n}\n", " \
    \ $unique = array();\n  foreach ($numbers as $number) {\n    if (!in_array($number,\
    \ $unique)) {\n      $unique[] = $number;\n    }\n  }\n  return $unique;\n}\n\n\
    echo '<h2>Remove duplicates</h2>';\necho '<p>';\necho json_encode(remove_duplicates(array(1,\
    \ 2, 3, 2, 4)));\necho '</p>';\n", "    $duplicates = array();\n    foreach ($numbers\
    \ as $number) {\n        if (isset($duplicates[$number])) {\n            unset($numbers[$key]);\n\
    \        } else {\n            $duplicates[$number] = 1;\n        }\n    }\n \
    \   return $numbers;\n}\n\n$numbers = array(1, 2, 3, 2, 4);\nvar_dump(remove_duplicates($numbers));",
  "    $numbers = array_unique($numbers);\n    return $numbers;\n}\n\n$numbers = array(1,\
    \ 2, 3, 2, 4);\necho '<pre>';\nprint_r(remove_duplicates($numbers));\necho '</pre>';",
  "  $result = array();\n  $index = 0;\n  for ($i = 0; $i < count($numbers); $i++)\
    \ {\n    $found = false;\n    for ($j = 0; $j < $index; $j++) {\n      if ($numbers[$i]\
    \ == $result[$j]) {\n        $found = true;\n        break;\n      }\n    }\n\
    \    if (!$found) {\n      $result[$index] = $numbers[$i];\n      $index++;\n\
    \    }\n  }\n  return $result;\n}\n\n$numbers = array(1, 2, 3, 2, 4);\n$result\
    \ = remove_duplicates($numbers);\nfor ($i = 0; $i < count($result); $i++) {\n\
    \  print($result[$i] . \" \");\n}\nprint(\"\\n\");", "  // your code here\n}\n",
  "    $uniques = array();\n    foreach ($numbers as $number) {\n        if (!in_array($number,\
    \ $uniques)) {\n            $uniques[] = $number;\n        }\n    }\n    return\
    \ $uniques;\n}", "  $numbers=array_unique($numbers);\n  return $numbers;\n}\n",
  "    $result = array();\n    $count = array_count_values($numbers);\n    foreach\
    \ ($numbers as $number) {\n        if ($count[$number] == 1) {\n            $result[]\
    \ = $number;\n        }\n    }\n    return $result;\n}\n\nprint_r(remove_duplicates(array(1,\
    \ 2, 3, 2, 4)));\nprint_r(remove_duplicates(array(1, 1, 2, 3, 2, 4)));\nprint_r(remove_duplicates(array(1,\
    \ 2, 3, 4)));\nprint_r(remove_duplicates(array(1, 1, 1, 1)));", "    $output =\
    \ array();\n    foreach ($numbers as $number) {\n        if (!in_array($number,\
    \ $output)) {\n            $output[] = $number;\n        }\n    }\n    return\
    \ $output;\n}\n", "\t$results = array();\n\t$duplicates = array();\n\tforeach\
    \ ($numbers as $key => $value) {\n\t\tif (!in_array($value, $results)) {\n\t\t\
    \t$results[] = $value;\n\t\t} else {\n\t\t\t$duplicates[] = $value;\n\t\t}\n\t\
    }\n\treturn array_diff($results, $duplicates);\n}\n", "  $unique_numbers = array();\n\
    \  $unique_numbers_indices = array();\n  foreach ($numbers as $index => $number)\
    \ {\n    if (!in_array($number, $unique_numbers)) {\n      $unique_numbers[] =\
    \ $number;\n      $unique_numbers_indices[] = $index;\n    }\n  }\n  return array_intersect_key($numbers,\
    \ array_flip($unique_numbers_indices));\n}\n$numbers = array(1, 2, 3, 2, 4);\n\
    print_r(remove_duplicates($numbers));", "\t$no_dups = array();\n\tforeach ($numbers\
    \ as $number) {\n\t\tif (!in_array($number, $no_dups)) {\n\t\t\t$no_dups[] = $number;\n\
    \t\t}\n\t}\n\treturn $no_dups;\n}\n\nprint_r(remove_duplicates(array(1, 2, 3,\
    \ 2, 4)));\n", "  // Fill in your code here\n}", "  $counts = array_count_values($numbers);\n\
    \  $result = array();\n  foreach ($numbers as $number) {\n    if ($counts[$number]\
    \ == 1) {\n      $result[] = $number;\n    }\n  }\n  return $result;\n}\n\nclass\
    \ RemoveDuplicatesTest extends PHPUnit_Framework_TestCase {\n  function test_without_duplicates()\
    \ {\n    $this->assertEquals(array(1, 2, 3), remove_duplicates(array(1, 2, 3)));\n\
    \  }\n\n  function test_with_duplicates() {\n    $this->assertEquals(array(1,\
    \ 3, 4), remove_duplicates(array(1, 2, 3, 2, 4)));\n  }\n}", "  // Write your\
    \ code here\n  $result = [];\n  foreach ($numbers as $key => $number) {\n    if\
    \ (!in_array($number, $result)) {\n      $result[] = $number;\n    }\n  }\n  return\
    \ $result;\n}\n\n$numbers = [1, 2, 3, 2, 4];\nprint_r(remove_duplicates($numbers));\n",
  "  $res = array();\n  $seen = array();\n  for ($i = 0; $i < count($numbers); $i++)\
    \ {\n    $el = $numbers[$i];\n    if (array_key_exists($el, $seen)) {\n      $seen[$el]\
    \ += 1;\n    } else {\n      $seen[$el] = 1;\n    }\n  }\n  for ($i = 0; $i <\
    \ count($numbers); $i++) {\n    $el = $numbers[$i];\n    if ($seen[$el] === 1)\
    \ {\n      $res[] = $el;\n    }\n  }\n  return $res;\n}\n", "  $count = array_count_values($numbers);\n\
    \  $values = array_unique($numbers);\n  $unique = array();\n  foreach ($values\
    \ as $value) {\n    if ($count[$value] == 1) {\n      $unique[] = $value;\n  \
    \  }\n  }\n  return $unique;\n}\n", "\treturn array_unique($numbers);\n}\n\n$remove_duplicates\
    \ = remove_duplicates([2, 2, 3, 4, 5, 5, 5, 1, 0, 0, 5, 9, 9, 9, 5, 6, 7, 8, 8,\
    \ 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\
    \ 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\
    \ 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\
    \ 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\
    \ 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\
    \ 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\
    \ 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\
    \ 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8,\
    \ 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8", "    $newArray = [];\n    $isDuplicate\
    \ = false;\n    foreach ($numbers as $number) {\n        foreach ($newArray as\
    \ $element) {\n            if ($number == $element) {\n                $isDuplicate\
    \ = true;\n            }\n        }\n        if (!$isDuplicate) {\n          \
    \  $newArray[] = $number;\n        }\n        $isDuplicate = false;\n    }\n \
    \   return $newArray;\n}\n", "    $values = array();\n    $result = array();\n\
    \    foreach ($numbers as $value) {\n        if (!isset($values[$value])) {\n\
    \            $values[$value] = 0;\n        }\n        $values[$value]++;\n   \
    \ }\n    foreach ($numbers as $value) {\n        if ($values[$value] == 1) {\n\
    \            $result[] = $value;\n        }\n    }\n    return $result;\n}\nvar_dump(remove_duplicates(array(1,\
    \ 2, 3, 2, 4)));", "  $unique = array();\n  foreach ($numbers as $number) {\n\
    \    if (!in_array($number, $unique)) {\n      $unique[] = $number;\n    }\n \
    \ }\n  return $unique;\n}\n$numbers = array(1, 2, 3, 2, 4);\necho \"<<< remove_duplicates(array(1,\
    \ 2, 3, 2, 4))\\n\";\necho \"array(\" . implode(', ', remove_duplicates($numbers))\
    \ . \")\\n\";\n", "  // TODO: write this function\n  // Hint: you will need an\
    \ array of seen numbers,\n  // and a new array of the final result\n  $result\
    \ = array();\n  $seen = array();\n  foreach ($numbers as $value) {\n    if (array_key_exists($value,\
    \ $seen)) {\n      $seen[$value]++;\n    } else {\n      $seen[$value] = 1;\n\
    \    }\n  }\n  foreach ($numbers as $number) {\n    if ($seen[$number] == 1) {\n\
    \      $result[] = $number;\n    }\n  }\n  return $result;\n}\n", "  // TODO:\
    \ Implement remove_duplicates.\n}\n", "  // build array of numbers to their counts\n\
    \  $number_counts = array();\n  foreach ($numbers as $number) {\n    if (array_key_exists($number,\
    \ $number_counts)) {\n      $number_counts[$number]++;\n    } else {\n      $number_counts[$number]\
    \ = 1;\n    }\n  }\n\n  // build array of numbers to keep\n  $unique_numbers =\
    \ array();\n  foreach ($number_counts as $number => $count) {\n    if ($count\
    \ == 1) {\n      $unique_numbers[] = $number;\n    }\n  }\n\n  return $unique_numbers;\n\
    }\n", "\tif (empty($numbers)) {\n\t\treturn null;\n\t}\n\t$new_array = array();\n\
    \tforeach ($numbers as $number) {\n\t\tif (!in_array($number, $new_array)) {\n\
    \t\t\t$new_array[] = $number;\n\t\t}\n\t}\n\treturn $new_array;\n}\n", "    $result\
    \ = array();\n    // write your code here\n    $result = array_unique($numbers);\n\
    \    return $result;\n}\n", "    $uniques = array();\n    foreach ($numbers as\
    \ $num) {\n        if (!in_array($num, $uniques)) {\n            $uniques[] =\
    \ $num;\n        }\n    }\n    return $uniques;\n}\n", "  $unique = array();\n\
    \  foreach ($numbers as $number) {\n    if (!in_array($number, $unique)) {\n \
    \     $unique[] = $number;\n    }\n  }\n  return $unique;\n}\n$numbers = array(1,\
    \ 2, 3, 2, 4);\nprint_r(remove_duplicates($numbers));", "\t$result = array();\n\
    \tforeach ($numbers as $number) {\n\t\tif (!in_array($number, $result)) {\n\t\t\
    \t$result[] = $number;\n\t\t}\n\t}\n\treturn $result;\n}\n", "  $result = array();\n\
    \  $seen = array();\n  foreach ($numbers as $number) {\n    if (!isset($seen[$number]))\
    \ {\n      $result[] = $number;\n      $seen[$number] = 1;\n    }\n  }\n  return\
    \ $result;\n}\n", "  $uniques = array();\n  $uniqueSet = array();\n  foreach ($numbers\
    \ as $number) {\n    if (!in_array($number, $uniqueSet)) {\n      $uniqueSet[]\
    \ = $number;\n      $uniques[] = $number;\n    }\n  }\n  return $uniques;\n}\n",
  "    $retval = array();\n    $seen = array();\n    foreach ($numbers as $number)\
    \ {\n        if (!in_array($number, $seen)) {\n            $retval[] = $number;\n\
    \            $seen[] = $number;\n        }\n    }\n    return $retval;\n}\n",
  "    $output = array();\n    $i = 0;\n    while ($i < count($numbers)) {\n     \
    \   $count = 0;\n        $k = 0;\n        while ($k < count($numbers)) {\n   \
    \         if ($numbers[$i] == $numbers[$k]) {\n                $count++;\n   \
    \         }\n            $k++;\n        }\n        if ($count == 1) {\n      \
    \      array_push($output, $numbers[$i]);\n        }\n        $i++;\n    }\n \
    \   return $output;\n}\nprint_r(remove_duplicates(array(1, 2, 3, 2, 4)));", " \
    \ $unique = array();\n  $last = null;\n  foreach ($numbers as $number) {\n   \
    \ if (!in_array($number, $unique) && $number != $last) {\n      $unique[] = $number;\n\
    \    }\n    $last = $number;\n  }\n  return $unique;\n}\n", "    // Remove duplicates,\
    \ then use array_values to reset index keys\n    return array_values(array_unique($numbers));\n\
    }\n\nprint_r(remove_duplicates(array(1, 2, 3, 2, 4)));", "    return array_unique($numbers);\n\
    }\n", "    $numbers = array_unique($numbers);\n    return $numbers;\n}\n$numbers\
    \ = array(1, 2, 3, 2, 4);\nprint_r(remove_duplicates($numbers));", "    // $current_number\
    \ = null;\n    // $duplicate_number = null;\n    // $counter = 0;\n    // foreach\
    \ ($numbers as $index => $number) {\n    //     if ($current_number === $number)\
    \ {\n    //         $duplicate_number = $number;\n    //         $counter++;\n\
    \    //     } else {\n    //         $counter = 0;\n    //     }\n    //     if\
    \ ($counter > 1) {\n    //         unset($numbers[$index]);\n    //     }\n  \
    \  //     $current_number = $number;\n    // }\n    // return $numbers;\n\n  \
    \  $numbers_hash = array_count_values($numbers);\n    foreach ($numbers_hash as\
    \ $number => $count) {\n        if ($count > 1) {\n            unset($numbers_hash[$number]);\n\
    \        }\n    }\n    $result = array_keys($numbers_hash);\n    return $result;\n\
    }\n$numbers = array(1, 2, 3, 2, 4);\n$numbers_result = remove_duplicates($numbers);\n\
    var_dump($numbers_result);\n", "\t$result = array();\n\t// check for every number\
    \ if it is also in the result array\n\tforeach ($numbers as $number) {\n\t\tif\
    \ (!in_array($number, $result)) {\n\t\t\t$result[] = $number;\n\t\t}\n\t}\n\t\
    return $result;\n}\n\nprint_r(remove_duplicates(array(1, 2, 3, 2, 4)));", "  $unique_numbers\
    \ = array();\n  $unique_number_indices = array();\n  foreach ($numbers as $index\
    \ => $number) {\n    if (!array_key_exists($number, $unique_number_indices)) {\n\
    \      $unique_number_indices[$number] = $index;\n    } else {\n      $duplicate_index\
    \ = $unique_number_indices[$number];\n      unset($unique_numbers[$duplicate_index]);\n\
    \      unset($unique_number_indices[$number]);\n    }\n    $unique_numbers[$index]\
    \ = $number;\n  }\n  return $unique_numbers;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
