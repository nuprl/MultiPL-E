name: HumanEval_26_remove_duplicates
language: php
prompt: "<?php\n// From an array of integers, remove all elements that occur more\
  \ than once.\n// Keep order of elements left the same as in the input.\n// >>> remove_duplicates(array(1,\
  \ 2, 3, 2, 4))\n// array(1, 3, 4)\nfunction remove_duplicates($numbers) {\n"
tests: "function candidate(...$args) {\n    return remove_duplicates(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(array()) !== array()) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1,\
  \ 2, 3, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 2, 3, 2, 4, 3, 5)) !== array(1, 4, 5)) { throw new Exception(\"Test failed!\"\
  ); }\n}\n\ntest();"
completions: ["    $length = count($numbers);\n    $result = array();\n    for ($i\
    \ = 0; $i < $length; $i++) {\n        $is_unique = true;\n        for ($j = 0;\
    \ $j < $length; $j++) {\n            if ($i !== $j && $numbers[$i] === $numbers[$j])\
    \ {\n                $is_unique = false;\n                break;\n           \
    \ }\n        }\n        if ($is_unique) {\n            $result[] = $numbers[$i];\n\
    \        }\n    }\n    return $result;\n}\n", "    $unique = array();\n    $unique_elements\
    \ = array();\n    foreach ($numbers as $number) {\n        if (!isset($unique[$number]))\
    \ {\n            $unique[$number] = 0;\n        }\n        $unique[$number]++;\n\
    \    }\n    foreach ($unique as $number => $occurrences) {\n        if ($occurrences\
    \ == 1) {\n            $unique_elements[] = $number;\n        }\n    }\n    return\
    \ $unique_elements;\n}\n$result = remove_duplicates(array(1, 2, 3, 2, 4));\necho\
    \ \"$result[0], $result[1], $result[2]\\n\";", "    $result = array();\n    foreach\
    \ ($numbers as $number) {\n        if (!in_array($number, $result)) {\n      \
    \      $result[] = $number;\n        }\n    }\n    return $result;\n}\n", "  \
    \  $uniques = array();\n    foreach ($numbers as $number) {\n        if (! in_array($number,\
    \ $uniques)) {\n            $uniques[] = $number;\n        }\n    }\n    return\
    \ $uniques;\n}\n", "  // your code here\n  $size = count($numbers);\n  $num_index\
    \ = 0;\n  $last_num_index = 0;\n  $not_dupe = [];\n  $is_dupe = false;\n  while\
    \ ($num_index < $size) {\n    $key = $numbers[$num_index];\n    if (!isset($not_dupe[$key]))\
    \ {\n      $not_dupe[$key] = true;\n      $last_num_index = $num_index;\n    }\
    \ else {\n      $numbers[$num_index] = $numbers[$last_num_index];\n      $numbers[$last_num_index]\
    \ = $key;\n      $last_num_index = $last_num_index - 1;\n    }\n    $num_index\
    \ = $num_index + 1;\n  }\n  return array_slice($numbers, 0, $last_num_index +\
    \ 1);\n}\n\n$numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 1, 2, 3, 4, 5, 6, 7, 8, 9];\n\
    $numbers = remove_duplicates($numbers);\nprint_r($numbers);", "\t$unique_numbers\
    \ = array();\n\t$numbers_counts = array_count_values($numbers);\n\tforeach ($numbers_counts\
    \ as $number => $count) {\n\t\tif ($count === 1) {\n\t\t\t$unique_numbers[] =\
    \ $number;\n\t\t}\n\t}\n\treturn $unique_numbers;\n}\n\nvar_dump(remove_duplicates(array(1,\
    \ 2, 3, 2, 4)));", "    $out = array();\n    foreach ($numbers as $num) {\n  \
    \      if (!in_array($num, $out)) {\n            $out[] = $num;\n        }\n \
    \   }\n    return $out;\n}\n", "    $unique = array();\n    $result = array();\n\
    \    foreach ($numbers as $number) {\n        if (!in_array($number, $unique))\
    \ {\n            $unique[] = $number;\n            $result[] = $number;\n    \
    \    }\n    }\n    return $result;\n}\n", "    // $results = array();\n    //\
    \ foreach ($numbers as $number) {\n    //     if (!isset($count[$number])) {\n\
    \    //         $count[$number] = 0;\n    //     }\n    //     $count[$number]++;\n\
    \    // }\n    // foreach ($count as $number => $occurrences) {\n    //     if\
    \ ($occurrences == 1) {\n    //         $results[] = $number;\n    //     }\n\
    \    // }\n    // return $results;\n\n    $count = array_count_values($numbers);\n\
    \    return array_keys($count, 1);\n}\n\n$res = remove_duplicates(array(1, 2,\
    \ 3, 2, 4));\nvar_dump($res);", "  $output = array();\n  $hash = array();\n  foreach\
    \ ($numbers as $number) {\n    if (!array_key_exists($number, $hash)) {\n    \
    \  $hash[$number] = 1;\n      $output[] = $number;\n    }\n  }\n  return $output;\n\
    }\n$input = array(1, 2, 3, 2, 4);\nvar_dump(remove_duplicates($input));", "\t\
    $data = [];\n\t$duplicate = [];\n\t$end = count($numbers);\n\tfor ($i = 0; $i\
    \ < $end; $i++) {\n\t\t$index = array_search($numbers[$i], $data);\n\t\tif ($index\
    \ !== false) {\n\t\t\t$duplicate[] = $numbers[$i];\n\t\t} else {\n\t\t\t$data[]\
    \ = $numbers[$i];\n\t\t}\n\t}\n\t$temp = [];\n\tforeach ($data as $value) {\n\t\
    \tif (!in_array($value, $duplicate)) {\n\t\t\t$temp[] = $value;\n\t\t}\n\t}\n\t\
    return $temp;\n}", "    $output = array();\n    foreach ($numbers as $number)\
    \ {\n        if (!in_array($number, $output)) {\n            $output[] = $number;\n\
    \        }\n    }\n    return $output;\n}\n", "    $temp = array();\n    $result\
    \ = array();\n    foreach ($numbers as $number) {\n        if (in_array($number,\
    \ $temp)) {\n            if (!in_array($number, $result)) {\n                $result[]\
    \ = $number;\n            }\n        } else {\n            $temp[] = $number;\n\
    \        }\n    }\n    return $result;\n}\n\n$a = array(1, 2, 3, 2, 4);\nvar_dump(remove_duplicates($a));",
  "\t$count = array_count_values($numbers);\n\treturn array_filter($numbers, function($element)\
    \ use ($count) {\n\t\treturn $count[$element] == 1;\n\t});\n}\n", "  // TODO:\
    \ Complete function\n  $newArr = [];\n  $counter = 0;\n  for ($i = 0; $i < count($numbers);\
    \ $i++) {\n    for ($j = 0; $j < count($numbers); $j++) {\n      if ($numbers[$i]\
    \ == $numbers[$j]) {\n        $counter++;\n      }\n    }\n    if ($counter <=\
    \ 1) {\n      array_push($newArr, $numbers[$i]);\n    }\n    $counter = 0;\n \
    \ }\n  return $newArr;\n}", "  $unique_numbers = array();\n  foreach ($numbers\
    \ as $number) {\n    if (!in_array($number, $unique_numbers)) {\n      $unique_numbers[]\
    \ = $number;\n    }\n  }\n  return $unique_numbers;\n}\n\nassert_options(ASSERT_BAIL,\
    \ 1);\nassert(remove_duplicates(array(1, 2, 3, 2, 4)) == array(1, 3, 4));\necho\
    \ \"All tests pass\\n\";", "\t$counts = array_count_values($numbers);\n\tforeach\
    \ ($counts as $key => $value) {\n\t\tif ($value > 1) {\n\t\t\tunset($numbers[array_search($key,\
    \ $numbers)]);\n\t\t}\n\t}\n\treturn $numbers;\n}\n", "    $numbers = array_values(array_unique($numbers));\n\
    \    return $numbers;\n}\n", "  $array = [];\n  foreach ($numbers as $key => $value)\
    \ {\n    if (!in_array($value, $array)) {\n      $array[] = $value;\n    }\n \
    \ }\n  return $array;\n}\n$array = [1, 2, 3, 2, 4];\necho '<pre>';\nprint_r(remove_duplicates($array));\n\
    echo '</pre>';\n", "    $unique_numbers = array();\n    $duplicate_numbers = array();\n\
    \    foreach ($numbers as $number) {\n        if (array_key_exists($number, $unique_numbers))\
    \ {\n            $duplicate_numbers[$number] = $number;\n        } else {\n  \
    \          $unique_numbers[$number] = $number;\n        }\n    }\n    $output\
    \ = array();\n    foreach ($numbers as $number) {\n        if (!array_key_exists($number,\
    \ $duplicate_numbers)) {\n            $output[] = $number;\n        }\n    }\n\
    \    return $output;\n}\n\necho \"\\n\";\necho \"input: array(1, 2, 3, 2, 4)\\\
    n\";\necho \"output: \\n\";\nprint_r(remove_duplicates(array(1, 2, 3, 2, 4)));\n\
    echo \"\\n\";\necho \"input: array(1, 2, 3, 4, 1, 2, 4, 3)\\n\";\necho \"output:\
    \ \\n\";\nprint_r(remove_duplicates(array(1, 2, 3, 4, 1, 2, 4, 3)));\necho \"\\\
    n\";\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
