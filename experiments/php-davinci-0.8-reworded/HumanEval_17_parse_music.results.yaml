language: php
name: HumanEval_17_parse_music
results:
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n\t$notes = [];\n\t$length = 0;\n\tfor ($i\
    \ = 0; $i < strlen($music_string); $i++) {\n\t\tif ($music_string[$i] == 'o')\
    \ {\n\t\t\t$length += 4;\n\t\t} elseif ($music_string[$i] == '|') {\n\t\t\t$notes[]\
    \ = $length;\n\t\t\t$length = 0;\n\t\t}\n\t}\n\t$notes[] = $length;\n\treturn\
    \ $notes;\n}\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0uon0u9c.php:30\n\
    Stack trace:\n#0 /tmp/tmp0uon0u9c.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp0uon0u9c.php\
    \ on line 30\n"
  timestamp: 1659824206
- exit_code: 0
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n  $music_array = explode(' ', $music_string);\n\
    \  $result = [];\n  foreach ($music_array as $m) {\n    switch ($m) {\n      case\
    \ 'o':\n        $result[] = 4;\n        break;\n      case 'o|':\n        $result[]\
    \ = 2;\n        break;\n      case '.|':\n        $result[] = 1;\n        break;\n\
    \    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824206
- exit_code: 0
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n\t$arr = str_split($music_string);\n\t\
    $tunes = array();\n\t$tune = '';\n\tforeach ($arr as $char) {\n\t\tif ($char !=\
    \ ' ') {\n\t\t\t$tune .= $char;\n\t\t} else {\n\t\t\t$tunes[] = $tune;\n\t\t\t\
    $tune = '';\n\t\t}\n\t}\n\t$tunes[] = $tune;\n\t$arr = array();\n\tforeach ($tunes\
    \ as $tune) {\n\t\tif ($tune == 'o') {\n\t\t\t$arr[] = 4;\n\t\t} elseif ($tune\
    \ == 'o|') {\n\t\t\t$arr[] = 2;\n\t\t} elseif ($tune == '.|') {\n\t\t\t$arr[]\
    \ = 1;\n\t\t}\n\t}\n\treturn $arr;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n\t$music_string = preg_replace('/\\s+/',\
    \ '', $music_string);\n\t$notes = preg_split('/\\|/', $music_string);\n\t$beats\
    \ = array();\n\tforeach ($notes as $note) {\n\t\tif (strpos($note, 'o') !== false)\
    \ {\n\t\t\t$note_type = strlen($note);\n\t\t\t$beats[] = $note_type;\n\t\t} else\
    \ {\n\t\t\t$beats[] = 1;\n\t\t}\n\t}\n\treturn $beats;\n}\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq984eab7.php:30\n\
    Stack trace:\n#0 /tmp/tmpq984eab7.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpq984eab7.php\
    \ on line 30\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n\t$oneBeat = ['.','|'];\n\t$twoBeat = ['o','|'];\n\
    \t$fourBeat = ['o'];\n\t$results = [];\n\t$index = 0;\n\t$strLength = strlen($music_string);\n\
    \t\n\twhile($index < $strLength) {\n\t\t$tmp = substr($music_string, $index, 2);\n\
    \t\tif(in_array($tmp[0], $fourBeat) && $tmp[1] == ' ') {\n\t\t\t$results[] = 4;\n\
    \t\t\t$index += 2;\n\t\t} else if(in_array($tmp[0], $twoBeat) && $tmp[1] == '|')\
    \ {\n\t\t\t$results[] = 2;\n\t\t\t$index += 2;\n\t\t} else if(in_array($tmp[0],\
    \ $oneBeat) && $tmp[1] == '|') {\n\t\t\t$results[] = 1;\n\t\t\t$index += 2;\n\t\
    \t} else {\n\t\t\t$results[] = 4;\n\t\t\t$index += 1;\n\t\t}\n\t}\n\treturn $results;\n\
    }\n\n$str = \"o o| .| o| o| .| .| .| .| o o\";\nprint_r(parse_music($str));\n\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Uninitialized string offset 1 in /tmp/tmpnhqlsbsn.php on line\
    \ 21\n\nWarning: Uninitialized string offset 1 in /tmp/tmpnhqlsbsn.php on line\
    \ 24\nArray\n(\n    [0] => 4\n    [1] => 2\n    [2] => 4\n    [3] => 1\n    [4]\
    \ => 4\n    [5] => 2\n    [6] => 4\n    [7] => 2\n    [8] => 4\n    [9] => 1\n\
    \    [10] => 4\n    [11] => 1\n    [12] => 4\n    [13] => 1\n    [14] => 4\n \
    \   [15] => 1\n    [16] => 4\n    [17] => 4\n    [18] => 4\n)\n\nWarning: Uninitialized\
    \ string offset 1 in /tmp/tmpnhqlsbsn.php on line 21\n\nWarning: Uninitialized\
    \ string offset 1 in /tmp/tmpnhqlsbsn.php on line 24\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpnhqlsbsn.php:48\nStack trace:\n#0 /tmp/tmpnhqlsbsn.php(53):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpnhqlsbsn.php on line 48\n"
  timestamp: 1659824206
- exit_code: 0
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $music_string = trim($music_string);\n\
    \    $notes = explode(' ', $music_string);\n    $result = [];\n    foreach ($notes\
    \ as $note) {\n        switch (substr($note, 0, 1)) {\n            case 'o':\n\
    \                $result[] = substr($note, 1) == '|' ? 2 : 4;\n              \
    \  break;\n            case '.':\n                $result[] = 1;\n           \
    \     break;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824206
- exit_code: 0
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $result = array();\n    $notes = explode('\
    \ ', $music_string);\n    foreach ($notes as $note) {\n        switch ($note)\
    \ {\n            case 'o':\n                $result[] = 4;\n                break;\n\
    \            case 'o|':\n                $result[] = 2;\n                break;\n\
    \            case '.|':\n                $result[] = 1;\n                break;\n\
    \        }\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n  \
    \  return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $note_value = array(4, 2, 1);\n   \
    \ $notes = str_split($music_string);\n    $notes_beats = array();\n    $i = 0;\n\
    \    foreach ($notes as $note) {\n        if ($note == 'o') {\n            $notes_beats[]\
    \ = $note_value[$i];\n            $i = 0;\n        } elseif ($note == '|') {\n\
    \            $i++;\n        }\n    }\n    return $notes_beats;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjafc4vqz.php:34\n\
    Stack trace:\n#0 /tmp/tmpjafc4vqz.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpjafc4vqz.php\
    \ on line 34\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n\t$ret = [];\n\t$music_string = str_replace('o|',\
    \ 'o| ', $music_string);\n\t$music_string = str_replace('|.', '| .', $music_string);\n\
    \t$music_string = str_replace(' o', ' o ', $music_string);\n\t$array = explode('\
    \ ', $music_string);\n\tfor ($i = 0; $i < count($array); $i++) {\n\t\tif ($array[$i]\
    \ == 'o') {\n\t\t\t$ret[] = 4;\n\t\t} else if ($array[$i] == 'o|') {\n\t\t\t$ret[]\
    \ = 2;\n\t\t} else if ($array[$i] == '|.') {\n\t\t\t$ret[] = 1;\n\t\t}\n\t}\n\t\
    return $ret;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppcyo1atw.php:36\n\
    Stack trace:\n#0 /tmp/tmppcyo1atw.php(41): test()\n#1 {main}\n  thrown in /tmp/tmppcyo1atw.php\
    \ on line 36\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n\t$music_string = str_replace('o', 'o',\
    \ $music_string);\n\t$music_string = str_replace('o|', 'o1', $music_string);\n\
    \t$music_string = str_replace('.|', 'o0', $music_string);\n\t$music_string = str_replace('\
    \ ', '', $music_string);\n\t$x = str_split($music_string);\n\t$result = array();\n\
    \tforeach ($x as $value) {\n\t\tif ($value == 'o') {\n\t\t\t$result[] = 4;\n\t\
    \t} elseif ($value == 'o1') {\n\t\t\t$result[] = 2;\n\t\t} elseif ($value == 'o0')\
    \ {\n\t\t\t$result[] = 1;\n\t\t}\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxbrmy8g1.php:37\n\
    Stack trace:\n#0 /tmp/tmpxbrmy8g1.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpxbrmy8g1.php\
    \ on line 37\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $timeArray = array();\n    $valueArray\
    \ = array(\"o\" => 4, \"o|\" => 2, \".|\" => 1);\n    $tokenArray = explode(\"\
    \ \", $music_string);\n    foreach ($tokenArray as $token) {\n        $timeArray[]\
    \ = $valueArray[$token];\n    }\n    return $timeArray;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key \"\" in /tmp/tmp90cw9cl9.php on line 16\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp90cw9cl9.php:26\nStack\
    \ trace:\n#0 /tmp/tmp90cw9cl9.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp90cw9cl9.php\
    \ on line 26\n"
  timestamp: 1659824206
- exit_code: 0
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n\t$notes = str_split($music_string);\n\t\
    $beats = [];\n\tfor ($i = 0; $i < count($notes); $i++) {\n\t\tswitch ($notes[$i])\
    \ {\n\t\t\tcase 'o':\n\t\t\t\tif ($notes[$i + 1] === '|') {\n\t\t\t\t\t$beats[]\
    \ = 2;\n\t\t\t\t\t$i++;\n\t\t\t\t} else {\n\t\t\t\t\t$beats[] = 4;\n\t\t\t\t}\n\
    \t\t\t\tbreak;\n\t\t\tcase '.':\n\t\t\t\tif ($notes[$i + 1] === '|') {\n\t\t\t\
    \t\t$beats[] = 1;\n\t\t\t\t\t$i++;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t\
    return $beats;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 7 in /tmp/tmp74rq8g94.php on line 17


    Warning: Undefined array key 19 in /tmp/tmp74rq8g94.php on line 17

    '
  timestamp: 1659824206
- exit_code: 0
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $array = explode(' ', $music_string);\n\
    \    $out = [];\n    foreach ($array as $symbol) {\n        switch ($symbol) {\n\
    \            case 'o':\n                $out[] = 4;\n                break;\n\
    \            case 'o|':\n                $out[] = 2;\n                break;\n\
    \            case '.|':\n                $out[] = 1;\n                break;\n\
    \        }\n    }\n    return $out;\n}\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824206
- exit_code: 0
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n  $beat = 4;\n  $result = [];\n  $parts\
    \ = explode(' ', $music_string);\n  foreach ($parts as $part) {\n    if ($part\
    \ === 'o') {\n      $result[] = $beat;\n    } elseif ($part === 'o|') {\n    \
    \  $result[] = $beat / 2;\n    } elseif ($part === '.|') {\n      $result[] =\
    \ $beat / 4;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824206
- exit_code: 0
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    // CODE HERE\n    $arr = array();\n\
    \    $music_string_arr = explode(\" \", $music_string);\n    foreach ($music_string_arr\
    \ as $value) {\n        if ($value == \"o\") {\n            $arr[] = 4;\n    \
    \    } elseif ($value == \"o|\") {\n            $arr[] = 2;\n        } elseif\
    \ ($value == \".|\") {\n            $arr[] = 1;\n        }\n    }\n    return\
    \ $arr;\n}\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $length = strlen($music_string);\n\
    \    $result = array();\n    $beat = 4;\n    for ($i = 0; $i < $length; $i++)\
    \ {\n        if ($music_string[$i] == 'o') {\n            $result[] = $beat;\n\
    \        } else if ($music_string[$i] == '.') {\n            $result[] = $beat\
    \ / 2;\n        }\n        if ($music_string[$i] == '|') {\n            $beat\
    \ = $beat / 2;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcl2f2xc4.php:35\n\
    Stack trace:\n#0 /tmp/tmpcl2f2xc4.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpcl2f2xc4.php\
    \ on line 35\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $notes = str_split($music_string);\n\
    \    $rhythm = array();\n    $count = 0;\n    foreach ($notes as $note) {\n  \
    \      if ($note == 'o') {\n            $count++;\n        } elseif ($note ==\
    \ '|') {\n            if ($count == 2) {\n                $rhythm[] = 2;\n   \
    \         } elseif ($count == 4) {\n                $rhythm[] = 4;\n         \
    \   }\n            $count = 0;\n        } elseif ($note == '.') {\n          \
    \  $rhythm[] = 1;\n        }\n    }\n    return $rhythm;\n}\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpprg7qx2u.php:37\n\
    Stack trace:\n#0 /tmp/tmpprg7qx2u.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpprg7qx2u.php\
    \ on line 37\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $notes = array(\n        \"o\" => 4,\n\
    \        \"o|\" => 2,\n        \".|\" => 1\n    );\n    $notes_order = array_keys($notes);\n\
    \    $notes_count = count($notes_order);\n    $music_array = explode(\" \", $music_string);\n\
    \    $result = array();\n    foreach ($music_array as $music_string) {\n     \
    \   for ($i = 0; $i < $notes_count; $i++) {\n            if (strpos($music_string,\
    \ $notes_order[$i]) !== false) {\n                $result[] = $notes[$notes_order[$i]];\n\
    \                break;\n            }\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3hqno9zk.php:40\n\
    Stack trace:\n#0 /tmp/tmp3hqno9zk.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp3hqno9zk.php\
    \ on line 40\n"
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n  $music_string = explode(' ', $music_string);\n\
    \  $beat = array();\n  foreach ($music_string as $key => $value) {\n    if ($value\
    \ == 'o') {\n      $beat[] = 4;\n    } elseif ($value == 'o|') {\n      $beat[]\
    \ = 2;\n    } elseif ($value == '.|') {\n      $beat[] = 1;\n    }\n  }\n  return\
    \ $beat;\n}\n\n$test = array(\n  'o o| .| o| o| .| .| .| .| o o',\n  'o| .| .|\
    \ .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .|\
    \ .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .|\
    \ .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .|\
    \ .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .|\
    \ .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .|\
    \ .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .|\
    \ .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .| .|\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "o| .| .| .| .| .| .| .|
    .| .| ...", expecting ")" in /tmp/tmp__4m9kcm.php on line 28

    '
  timestamp: 1659824206
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $notes = explode(' ', $music_string);\n\
    \    $beats = [];\n    foreach ($notes as $note) {\n        if (strlen($note)\
    \ == 1) {\n            $beats[] = 4;\n        } else {\n            $beats[] =\
    \ 2;\n        }\n    }\n    return $beats;\n}\n\necho '<pre>';\nprint_r(parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\"));\necho '</pre>';\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 4\n    [1] => 2\n    [2] => 2\n    [3] => 2\n\
    \    [4] => 2\n    [5] => 2\n    [6] => 2\n    [7] => 2\n    [8] => 2\n    [9]\
    \ => 4\n    [10] => 4\n)\n</pre>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpzw7hc7bk.php:32\nStack trace:\n#0 /tmp/tmpzw7hc7bk.php(39): test()\n\
    #1 {main}\n  thrown in /tmp/tmpzw7hc7bk.php on line 32\n"
  timestamp: 1659824206
- exit_code: 0
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n\t$output_arr = array();\n\t$input_arr\
    \ = explode(\" \", $music_string);\n\tfor ($i = 0; $i < count($input_arr); $i++)\
    \ {\n\t\tif ($input_arr[$i] == \"o\") {\n\t\t\t$output_arr[] = 4;\n\t\t} elseif\
    \ ($input_arr[$i] == \"o|\") {\n\t\t\t$output_arr[] = 2;\n\t\t} elseif ($input_arr[$i]\
    \ == \".|\") {\n\t\t\t$output_arr[] = 1;\n\t\t}\n\t}\n\treturn $output_arr;\n\
    }\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660008851
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $i = 0;\n    $cur = '';\n    $result\
    \ = [];\n    while($i < strlen($music_string)) {\n        if($music_string[$i]\
    \ === ' ') {\n            if($cur === 'o') {\n                $result[] = 4;\n\
    \            } elseif($cur === 'o|') {\n                $result[] = 2;\n     \
    \       } elseif($cur === '.|') {\n                $result[] = 1;\n          \
    \  }\n            $cur = '';\n        } else {\n            $cur .= $music_string[$i];\n\
    \        }\n        $i++;\n    }\n    return $result;\n}\n\nvar_dump(parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\"));\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(10) {\n  [0]=>\n  int(4)\n  [1]=>\n  int(2)\n  [2]=>\n  int(1)\n\
    \  [3]=>\n  int(2)\n  [4]=>\n  int(2)\n  [5]=>\n  int(1)\n  [6]=>\n  int(1)\n\
    \  [7]=>\n  int(1)\n  [8]=>\n  int(1)\n  [9]=>\n  int(4)\n}\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpcr3okgd9.php:40\nStack trace:\n#0 /tmp/tmpcr3okgd9.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpcr3okgd9.php on line 40\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $notes = str_split($music_string);\n\
    \    $beats = array();\n    $note_length = 4;\n    foreach ($notes as $note) {\n\
    \        if ($note == ' ') {\n            $note_length = 4;\n        } else if\
    \ ($note == 'o') {\n            array_push($beats, $note_length);\n          \
    \  $note_length = 4;\n        } else if ($note == '|') {\n            $note_length\
    \ /= 2;\n        } else if ($note == '.') {\n            array_push($beats, $note_length);\n\
    \            $note_length = 4;\n        }\n    }\n    return $beats;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvlmriut4.php:38\n\
    Stack trace:\n#0 /tmp/tmpvlmriut4.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpvlmriut4.php\
    \ on line 38\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n  $music_string = str_replace(\" \", \"\
    \", $music_string);\n  $arr = str_split($music_string);\n  $result = [];\n  foreach\
    \ ($arr as $el) {\n    if ($el == 'o') {\n      $result[] = 4;\n    } else if\
    \ ($el == '|') {\n      $result[] = 1;\n    }\n  }\n  return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptcqori65.php:32\n\
    Stack trace:\n#0 /tmp/tmptcqori65.php(36): test()\n#1 {main}\n  thrown in /tmp/tmptcqori65.php\
    \ on line 32\n"
  timestamp: 1660028700
- exit_code: 0
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n\t$notes = explode(' ', $music_string);\n\
    \t$output = array();\n\tforeach ($notes as $note) {\n\t\tswitch($note) {\n\t\t\
    \tcase 'o':\n\t\t\t\t$output[] = 4;\n\t\t\t\tbreak;\n\t\t\tcase 'o|':\n\t\t\t\t\
    $output[] = 2;\n\t\t\t\tbreak;\n\t\t\tcase '.|':\n\t\t\t\t$output[] = 1;\n\t\t\
    \t\tbreak;\n\t\t}\n\t}\n\treturn $output;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $a = str_split($music_string);\n  \
    \  $result = [];\n    $j = 0;\n    $z = 0;\n    foreach ($a as $i => $b) {\n \
    \       if ($b == 'o') {\n            $result[$j] = 4;\n            $j++;\n  \
    \      } elseif ($b == '.') {\n            $result[$j] = 1;\n            $j++;\n\
    \        } elseif ($b == '|') {\n            $z++;\n            if ($z == 2) {\n\
    \                $result[$j - 1] = 2;\n                $z = 0;\n            }\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0oxn7hd5.php:41\n\
    Stack trace:\n#0 /tmp/tmp0oxn7hd5.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp0oxn7hd5.php\
    \ on line 41\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $fractions = [\n        'o' => 4,\n\
    \        'o|' => 2,\n        '.|' => 1\n    ];\n    $notes = explode(' ', $music_string);\n\
    \    $result = [];\n    foreach ($notes as $note) {\n        $result[] = $fractions[$note];\n\
    \    }\n    return $result;\n}\n\necho parse_music(\"o o| .| o| o| .| .| .| .|\
    \ o o\");\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Array to string conversion in /tmp/tmpwscbzm_d.php on line 25\n\
    Array\nWarning: Undefined array key \"\" in /tmp/tmpwscbzm_d.php on line 20\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmpwscbzm_d.php:31\nStack\
    \ trace:\n#0 /tmp/tmpwscbzm_d.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpwscbzm_d.php\
    \ on line 31\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n  $notes = str_split($music_string);\n\
    \  $output = [];\n  $count = 0;\n  foreach ($notes as $note) {\n    if (isset($last_note)\
    \ && $note == $last_note) {\n      $count += 1;\n    } elseif ($note == '|') {\n\
    \      $count = 1;\n    } else {\n      if ($count > 0) {\n        $output[] =\
    \ $count;\n      }\n      $count = 1;\n    }\n    $last_note = $note;\n  }\n \
    \ if ($count > 0) {\n    $output[] = $count;\n  }\n  return $output;\n}\n\nprint_r(parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\"));\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 1\n    [2] => 1\n    [3] => 1\n    [4]\
    \ => 1\n    [5] => 1\n    [6] => 1\n    [7] => 1\n    [8] => 1\n    [9] => 1\n\
    \    [10] => 1\n    [11] => 1\n    [12] => 1\n    [13] => 1\n    [14] => 1\n \
    \   [15] => 1\n    [16] => 1\n    [17] => 1\n    [18] => 1\n    [19] => 1\n  \
    \  [20] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppvv8pj1q.php:40\n\
    Stack trace:\n#0 /tmp/tmppvv8pj1q.php(47): test()\n#1 {main}\n  thrown in /tmp/tmppvv8pj1q.php\
    \ on line 40\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $notes = explode(' ', $music_string);\n\
    \    $result = [];\n    foreach ($notes as $note) {\n        $length = 4;\n  \
    \      if (substr($note, -1) === '|') {\n            $length /= 2;\n        }\n\
    \        if (substr($note, 0, 1) === '.') {\n            $length /= 2;\n     \
    \   }\n        $result[] = $length;\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1t3qhy0_.php:31\n\
    Stack trace:\n#0 /tmp/tmp1t3qhy0_.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp1t3qhy0_.php\
    \ on line 31\n"
  timestamp: 1660028700
- exit_code: 0
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $result = [];\n    $notes = explode('\
    \ ', $music_string);\n    $notesCount = count($notes);\n    for ($i = 0; $i <\
    \ $notesCount; $i++) {\n        $note = $notes[$i];\n        $firstChar = substr($note,\
    \ 0, 1);\n        $secondChar = substr($note, 1, 1);\n        switch ($firstChar)\
    \ {\n            case 'o':\n                switch ($secondChar) {\n         \
    \           case '|':\n                        $result[] = 2;\n              \
    \          break;\n                    default:\n                        $result[]\
    \ = 4;\n                        break;\n                }\n                break;\n\
    \            case '.':\n                switch ($secondChar) {\n             \
    \       case '|':\n                        $result[] = 1;\n                  \
    \      break;\n                    default:\n                        break;\n\
    \                }\n                break;\n            default:\n           \
    \     break;\n        }\n    }\n    return $result;\n}\necho '<pre>';\nprint_r(parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\"));\necho '</pre>';\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 4\n    [1] => 2\n    [2] => 1\n    [3] => 2\n\
    \    [4] => 2\n    [5] => 1\n    [6] => 1\n    [7] => 1\n    [8] => 1\n    [9]\
    \ => 4\n    [10] => 4\n)\n</pre>"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $a = explode(' ', $music_string);\n\
    \    $b = array();\n    foreach ($a as $v) {\n        if ($v == 'o') $b[] = 4;\n\
    \        else $b[] = 2;\n    }\n    return $b;\n}\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk9btlmr_.php:25\n\
    Stack trace:\n#0 /tmp/tmpk9btlmr_.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpk9btlmr_.php\
    \ on line 25\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n  $music_array = str_split($music_string);\n\
    \  $beat_count = 0;\n  $output_array = array();\n  $beat_count = 0;\n  foreach\
    \ ($music_array as $note) {\n    if ($note == 'o') {\n      $beat_count = 4;\n\
    \    } elseif ($note == '|') {\n      $beat_count = $beat_count / 2;\n    } elseif\
    \ ($note == '.') {\n      $beat_count = $beat_count - 1;\n    }\n    if ($beat_count\
    \ > 0) {\n      $output_array[] = $beat_count;\n    }\n  }\n  return $output_array;\n\
    }\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4of7osez.php:36\n\
    Stack trace:\n#0 /tmp/tmp4of7osez.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp4of7osez.php\
    \ on line 36\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n\t$beats=0;\n\t$music_array=preg_split('//',\
    \ $music_string, -1, PREG_SPLIT_NO_EMPTY);\n\tforeach ($music_array as $beat){\n\
    \t\tif ($beat == \"o\"){\n\t\t\t$beats=$beats+4;\n\t\t}\n\t\telseif ($beat ==\
    \ \"|\"){\n\t\t\t$beats=$beats+1;\n\t\t}\n\t\telseif ($beat == \".\"){\n\t\t\t\
    $beats=$beats+1;\n\t\t}\n\t\telseif ($beat == \" \"){\n\t\t\t$beats=$beats+0;\n\
    \t\t}\n\t}\n\treturn $beats;\n}\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph3owjahl.php:35\n\
    Stack trace:\n#0 /tmp/tmph3owjahl.php(42): test()\n#1 {main}\n  thrown in /tmp/tmph3owjahl.php\
    \ on line 35\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $r = preg_match_all('/o o| o\\||\\\
    .\\|/', $music_string, $match);\n    $result = [];\n    if($r) {\n        foreach($match[0]\
    \ as $item) {\n            switch($item) {\n                case 'o o':\n    \
    \                $result[] = 4;\n                    break;\n                case\
    \ ' o|':\n                    $result[] = 2;\n                    break;\n   \
    \             case '.|':\n                    $result[] = 1;\n               \
    \     break;\n            }\n        }\n    }\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdpsdw7ut.php:37\n\
    Stack trace:\n#0 /tmp/tmpdpsdw7ut.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpdpsdw7ut.php\
    \ on line 37\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n  // Your code here...\n}\necho implode(\"\
    , \", parse_music(\"o o| .| o| o| .| .| .| .| o o\"));\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: implode(): Argument #1 ($pieces) must\
    \ be of type array, string given in /tmp/tmphfqlz8i4.php:14\nStack trace:\n#0\
    \ /tmp/tmphfqlz8i4.php(14): implode(', ', NULL)\n#1 {main}\n  thrown in /tmp/tmphfqlz8i4.php\
    \ on line 14\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n  $notes = [\n    \"o\" => 4,\n    \"o|\"\
    \ => 2,\n    \".|\" => 1\n  ];\n  $music_array = explode(\" \", $music_string);\n\
    \  $music_notes = [];\n  foreach ($music_array as $value) {\n    $music_notes[]\
    \ = $notes[$value];\n  }\n  return $music_notes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key \"\" in /tmp/tmp_bn_1cyc.php on line 20\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_bn_1cyc.php:30\nStack\
    \ trace:\n#0 /tmp/tmp_bn_1cyc.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp_bn_1cyc.php\
    \ on line 30\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $notes = array_map(function($note)\
    \ {\n        switch ($note) {\n            case 'o':\n                return 4;\n\
    \            case 'o|':\n                return 2;\n            case '.|':\n \
    \               return 1;\n        }\n    }, explode(' ', $music_string));\n \
    \   return $notes;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg9x3xlgd.php:30\n\
    Stack trace:\n#0 /tmp/tmpg9x3xlgd.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpg9x3xlgd.php\
    \ on line 30\n"
  timestamp: 1660028700
- exit_code: 0
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $result = array();\n    $music_array\
    \ = explode(\" \", $music_string);\n    foreach ($music_array as $music_element)\
    \ {\n        if ($music_element == \"o\") {\n            $result[] = 4;\n    \
    \    } elseif ($music_element == \"o|\") {\n            $result[] = 2;\n     \
    \   } elseif ($music_element == \".|\") {\n            $result[] = 1;\n      \
    \  }\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028700
- exit_code: 0
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $music_arr = explode(' ', $music_string);\n\
    \    $res = [];\n    foreach ($music_arr as $elem) {\n        switch ($elem) {\n\
    \            case 'o':\n                $res[] = 4;\n                break;\n\
    \            case 'o|':\n                $res[] = 2;\n                break;\n\
    \            case '.|':\n                $res[] = 1;\n                break;\n\
    \        }\n    }\n    return $res;\n}\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n  $outputArray = array();\n  $splitArray\
    \ = str_split($music_string);\n  $bars = array_count_values($splitArray);\n  $bars['.']\
    \ = $bars['.']/2;\n  $bars['|'] = $bars['|']/2;\n  $bars[' '] = $bars[' ']/2;\n\
    \  $bars['o'] = $bars['o']*4;\n  return $bars;\n}\n$result = parse_music(\"o o|\
    \ .| o| o| .| .| .| .| o o\");\nprint_r($result);\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [o] => 24\n    [ ] => 5\n    [|] => 4\n    [.] => 2.5\n)\n\
    \nWarning: Undefined array key \".\" in /tmp/tmphepnnmti.php on line 15\n\nWarning:\
    \ Undefined array key \"|\" in /tmp/tmphepnnmti.php on line 16\n\nWarning: Undefined\
    \ array key \" \" in /tmp/tmphepnnmti.php on line 17\n\nWarning: Undefined array\
    \ key \"o\" in /tmp/tmphepnnmti.php on line 18\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmphepnnmti.php:28\nStack trace:\n#0 /tmp/tmphepnnmti.php(35):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmphepnnmti.php on line 28\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    // Your code here\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpui2yd4rt.php:20\n\
    Stack trace:\n#0 /tmp/tmpui2yd4rt.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpui2yd4rt.php\
    \ on line 20\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $notes = array_flip(array('o','o|','.|'));\n\
    \n    $music_notes = explode(' ', $music_string);\n    foreach ($music_notes as\
    \ $note) {\n        $notes_list[] = $notes[$note];\n    }\n\n    return $notes_list;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key \"\" in /tmp/tmpczigt8vl.php on line 16\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpczigt8vl.php:27\nStack\
    \ trace:\n#0 /tmp/tmpczigt8vl.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpczigt8vl.php\
    \ on line 27\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n  $music_string_arr = str_split($music_string);\n\
    \  $music_string_count = count($music_string_arr);\n  $music_string_count_arr\
    \ = range(0, $music_string_count - 1);\n  $beat_count_arr = array();\n  $beat_count\
    \ = 0;\n  foreach ($music_string_count_arr as $i) {\n    if ($music_string_arr[$i]\
    \ == 'o') {\n      $beat_count = 4;\n    } elseif ($music_string_arr[$i] == 'o'\
    \ && $music_string_arr[$i + 1] == '|') {\n      $beat_count = 2;\n    } elseif\
    \ ($music_string_arr[$i] == '.' && $music_string_arr[$i + 1] == '|') {\n     \
    \ $beat_count = 1;\n    }\n    $beat_count_arr[] = $beat_count;\n  }\n  return\
    \ $beat_count_arr;\n}\n\necho '<pre>';\nprint_r(parse_music(\"o o| .| o| o| .|\
    \ .| .| .| o o\"));\necho '</pre>';\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 4\n    [1] => 4\n    [2] => 4\n    [3] => 4\n\
    \    [4] => 4\n    [5] => 1\n    [6] => 1\n    [7] => 1\n    [8] => 4\n    [9]\
    \ => 4\n    [10] => 4\n    [11] => 4\n    [12] => 4\n    [13] => 4\n    [14] =>\
    \ 1\n    [15] => 1\n    [16] => 1\n    [17] => 1\n    [18] => 1\n    [19] => 1\n\
    \    [20] => 1\n    [21] => 1\n    [22] => 1\n    [23] => 1\n    [24] => 1\n \
    \   [25] => 1\n    [26] => 4\n    [27] => 4\n    [28] => 4\n)\n</pre>\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp3sk0n_ku.php:39\nStack trace:\n\
    #0 /tmp/tmp3sk0n_ku.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp3sk0n_ku.php\
    \ on line 39\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $notes = str_split($music_string);\n\
    \    $result = [];\n    $current = '';\n    foreach ($notes as $note) {\n    \
    \    if ($note == ' ') {\n            $result[] = get_note_length($current);\n\
    \            $current = '';\n        } else {\n            $current .= $note;\n\
    \        }\n    }\n    $result[] = get_note_length($current);\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_note_length()\
    \ in /tmp/tmpat_h888s.php:23\nStack trace:\n#0 /tmp/tmpat_h888s.php(28): parse_music('')\n\
    #1 /tmp/tmpat_h888s.php(32): candidate('')\n#2 /tmp/tmpat_h888s.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpat_h888s.php on line 23\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n\t$regex = \"/[o.|]/\";\n\tpreg_match_all($regex,\
    \ $music_string, $matches);\n\t//print_r($matches);\n\t$result = array();\n\t\
    $len = count($matches[0]);\n\tfor ($i = 0; $i < $len; $i++) {\n\t\tif ($matches[0][$i]\
    \ == 'o') {\n\t\t\t$result[] = 4;\n\t\t} else if ($matches[0][$i] == 'o|') {\n\
    \t\t\t$result[] = 2;\n\t\t} else if ($matches[0][$i] == '.|') {\n\t\t\t$result[]\
    \ = 1;\n\t\t}\n\t}\n\t//print_r($result);\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4v0qp4oo.php:37\n\
    Stack trace:\n#0 /tmp/tmp4v0qp4oo.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp4v0qp4oo.php\
    \ on line 37\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n  $result = [];\n  $beats = ['o' => 4,\
    \ 'o|' => 2, '.|' => 1];\n  $string_array = str_split($music_string);\n  $current_note\
    \ = '';\n  foreach ($string_array as $item) {\n    if (isset($beats[$current_note\
    \ . $item])) {\n      $current_note .= $item;\n    } else {\n      $result[] =\
    \ $beats[$current_note];\n      $current_note = $item;\n    }\n  }\n  $result[]\
    \ = $beats[$current_note];\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key \"\" in /tmp/tmprn8smire.php on line 20\n\
    \nWarning: Undefined array key \"\" in /tmp/tmprn8smire.php on line 24\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmprn8smire.php:33\nStack trace:\n\
    #0 /tmp/tmprn8smire.php(40): test()\n#1 {main}\n  thrown in /tmp/tmprn8smire.php\
    \ on line 33\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $result = array();\n    $notes = str_split($music_string);\n\
    \    $length = count($notes);\n    $chord = array();\n    $i = 0;\n    $w = 0;\n\
    \    $h = 0;\n    $q = 0;\n    while ($i < $length) {\n        if ($notes[$i]\
    \ == 'o') {\n            $w = 4;\n            $chord[] = $w;\n            $i++;\n\
    \        } elseif ($notes[$i] == 'o' && $notes[$i + 1] == '|') {\n           \
    \ $h = 2;\n            $chord[] = $h;\n            $i = $i + 2;\n        } elseif\
    \ ($notes[$i] == '.' && $notes[$i + 1] == '|') {\n            $q = 1;\n      \
    \      $chord[] = $q;\n            $i = $i + 2;\n        } else {\n          \
    \  $i++;\n        }\n    }\n    return $chord;\n}\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsbu_ed3j.php:47\n\
    Stack trace:\n#0 /tmp/tmpsbu_ed3j.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpsbu_ed3j.php\
    \ on line 47\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $music_array = str_split($music_string);\n\
    \    $count = 0;\n    $result = [];\n    foreach ($music_array as $symbol) {\n\
    \        switch ($symbol) {\n            case 'o':\n                $count +=\
    \ 4;\n                break;\n            case 'o|':\n                $count +=\
    \ 2;\n                break;\n            case '.|':\n                $count +=\
    \ 1;\n                break;\n            case ' ':\n                $result[]\
    \ = $count;\n                $count = 0;\n                break;\n        }\n\
    \    }\n    $result[] = $count;\n    return $result;\n}\n\necho implode(', ',\
    \ parse_music(\"o o| .| o| o| .| .| .| .| o o\")) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "4, 4, 0, 4, 4, 0, 0, 0, 0, 4, 4\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpwnnfd9_4.php:42\nStack trace:\n#0 /tmp/tmpwnnfd9_4.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpwnnfd9_4.php on line 42\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $beat = array(\n        'o' => 4,\n\
    \        'o|' => 2,\n        '.|' => 1\n    );\n    $music_array = explode(' ',\
    \ $music_string);\n    $arr = array();\n    foreach ($music_array as $key => $value)\
    \ {\n        $arr[] = $beat[$value];\n    }\n    return $arr;\n}\nprint_r(parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\"));\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 4\n    [1] => 2\n    [2] => 1\n    [3] => 2\n    [4]\
    \ => 2\n    [5] => 1\n    [6] => 1\n    [7] => 1\n    [8] => 1\n    [9] => 4\n\
    \    [10] => 4\n)\n\nWarning: Undefined array key \"\" in /tmp/tmpr3uw7v9i.php\
    \ on line 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr3uw7v9i.php:31\n\
    Stack trace:\n#0 /tmp/tmpr3uw7v9i.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpr3uw7v9i.php\
    \ on line 31\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $notes = array(\n        'o' => 4,\n\
    \        'o|' => 2,\n        '.|' => 1\n    );\n    $array_music = explode(' ',\
    \ $music_string);\n    $result = array();\n    foreach ($array_music as $m) {\n\
    \        $result[] = $notes[$m];\n    }\n    return $result;\n}\nprint_r(parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\"));\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 4\n    [1] => 2\n    [2] => 1\n    [3] => 2\n    [4]\
    \ => 2\n    [5] => 1\n    [6] => 1\n    [7] => 1\n    [8] => 1\n    [9] => 4\n\
    \    [10] => 4\n)\n\nWarning: Undefined array key \"\" in /tmp/tmpn3nkyw3f.php\
    \ on line 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn3nkyw3f.php:30\n\
    Stack trace:\n#0 /tmp/tmpn3nkyw3f.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpn3nkyw3f.php\
    \ on line 30\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    // your code here\n}\n```\n\n```php\n\
    <?php\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "`" in /tmp/tmpurp49msd.php on line
    14

    '
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $notes = str_split($music_string);\n\
    \    $result = [];\n    foreach ($notes as $note) {\n        if ($note == 'o')\
    \ {\n            $result[] = 4;\n        } elseif ($note == '.') {\n         \
    \   $result[] = 1;\n        } elseif ($note == '|') {\n            $result[] =\
    \ 2;\n        }\n    }\n    return $result;\n}\n\n$result = parse_music(\"o o|\
    \ .| o| o| .| .| .| .| o o\");\nvar_dump($result);\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(19) {\n  [0]=>\n  int(4)\n  [1]=>\n  int(4)\n  [2]=>\n  int(2)\n\
    \  [3]=>\n  int(1)\n  [4]=>\n  int(2)\n  [5]=>\n  int(4)\n  [6]=>\n  int(2)\n\
    \  [7]=>\n  int(4)\n  [8]=>\n  int(2)\n  [9]=>\n  int(1)\n  [10]=>\n  int(2)\n\
    \  [11]=>\n  int(1)\n  [12]=>\n  int(2)\n  [13]=>\n  int(1)\n  [14]=>\n  int(2)\n\
    \  [15]=>\n  int(1)\n  [16]=>\n  int(2)\n  [17]=>\n  int(4)\n  [18]=>\n  int(4)\n\
    }\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1akw98kk.php:35\n\
    Stack trace:\n#0 /tmp/tmp1akw98kk.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp1akw98kk.php\
    \ on line 35\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $bars_string = explode(' ', $music_string);\n\
    \    $result = [];\n    foreach ($bars_string as $bar) {\n        $beat = 4;\n\
    \        if (strpos($bar, '|') !== false) {\n            $beat = 1;\n        }\n\
    \        if (strpos($bar, '.') !== false) {\n            $beat = 2;\n        }\n\
    \        $result[] = $beat;\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbswtaq31.php:31\n\
    Stack trace:\n#0 /tmp/tmpbswtaq31.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpbswtaq31.php\
    \ on line 31\n"
  timestamp: 1660028700
- exit_code: 0
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n  $result = [];\n  $notes = explode(' ',\
    \ $music_string);\n  foreach ($notes as $note) {\n    switch ($note) {\n     \
    \ case 'o':\n        $result[] = 4;\n        break;\n      case 'o|':\n      \
    \  $result[] = 2;\n        break;\n      case '.|':\n        $result[] = 1;\n\
    \        break;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n  $tock_length = [\n    'o' => 4,\n   \
    \ 'o|' => 2,\n    '.|' => 1\n  ];\n  $tock = [];\n  preg_match_all('/o|o\\||\\\
    .\\|/', $music_string, $tock);\n  $tock = $tock[0];\n  $result = [];\n  foreach\
    \ ($tock as $key => $value) {\n    $result[] = $tock_length[$value];\n  }\n  return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0nugfzy9.php:34\n\
    Stack trace:\n#0 /tmp/tmp0nugfzy9.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp0nugfzy9.php\
    \ on line 34\n"
  timestamp: 1660028700
- exit_code: 0
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $keys = explode(' ', $music_string);\n\
    \    $result = [];\n    foreach ($keys as $key) {\n        switch ($key) {\n \
    \           case 'o':\n                $result[] = 4;\n                break;\n\
    \            case 'o|':\n                $result[] = 2;\n                break;\n\
    \            case '.|':\n                $result[] = 1;\n                break;\n\
    \        }\n    }\n    return $result;\n}\n\necho '<pre>';\nvar_dump(parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\"));\necho '</pre>';\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>array(11) {\n  [0]=>\n  int(4)\n  [1]=>\n  int(2)\n  [2]=>\n  int(1)\n\
    \  [3]=>\n  int(2)\n  [4]=>\n  int(2)\n  [5]=>\n  int(1)\n  [6]=>\n  int(1)\n\
    \  [7]=>\n  int(1)\n  [8]=>\n  int(1)\n  [9]=>\n  int(4)\n  [10]=>\n  int(4)\n\
    }\n</pre>"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $arr = str_split($music_string);\n\
    \    $ar = [];\n    $flag = 0;\n    foreach ($arr as $value) {\n        if ($value\
    \ === 'o') {\n            $ar[] = 4;\n        } elseif ($value === '.') {\n  \
    \          $ar[] = 1;\n        } elseif ($value === '|') {\n            $flag++;\n\
    \            if ($flag == 2) {\n                $ar[] = 2;\n                $flag\
    \ = 0;\n            }\n        }\n    }\n    return $ar;\n}\n\nvar_dump(parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\"));\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(15) {\n  [0]=>\n  int(4)\n  [1]=>\n  int(4)\n  [2]=>\n  int(1)\n\
    \  [3]=>\n  int(2)\n  [4]=>\n  int(4)\n  [5]=>\n  int(4)\n  [6]=>\n  int(2)\n\
    \  [7]=>\n  int(1)\n  [8]=>\n  int(1)\n  [9]=>\n  int(2)\n  [10]=>\n  int(1)\n\
    \  [11]=>\n  int(1)\n  [12]=>\n  int(2)\n  [13]=>\n  int(4)\n  [14]=>\n  int(4)\n\
    }\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx191915z.php:39\n\
    Stack trace:\n#0 /tmp/tmpx191915z.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpx191915z.php\
    \ on line 39\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $music_string_arr = str_split($music_string);\n\
    \    $result = [];\n    $temp = 0;\n    foreach ($music_string_arr as $key =>\
    \ $value) {\n        if($value == 'o') {\n            $temp++;\n        }\n  \
    \      if($value == '|') {\n            $result[] = $temp;\n            $temp\
    \ = 0;\n        }\n    }\n    return $result;\n}\n\nvar_dump(parse_music(\"o o|\
    \ .| o| o| .| .| .| .| o o\"));\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(8) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(0)\n  [2]=>\n  int(1)\n \
    \ [3]=>\n  int(1)\n  [4]=>\n  int(0)\n  [5]=>\n  int(0)\n  [6]=>\n  int(0)\n \
    \ [7]=>\n  int(0)\n}\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuk4unv6y.php:34\n\
    Stack trace:\n#0 /tmp/tmpuk4unv6y.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpuk4unv6y.php\
    \ on line 34\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n\t$octopus = [];\n\t$music_string = str_replace('o',\
    \ 'o|o|o|o|', $music_string);\n\t$music_string = str_replace('|', ' ', $music_string);\n\
    \t$octopus = explode(' ', $music_string);\n\t$octopus = array_map('strlen', $octopus);\n\
    \t\n\treturn $octopus;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdeqtrtdt.php:26\n\
    Stack trace:\n#0 /tmp/tmpdeqtrtdt.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpdeqtrtdt.php\
    \ on line 26\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n\t$notes = str_split($music_string);\n\t\
    $whole_note = 'o';\n\t$half_note = 'o|';\n\t$quarter_note = '.|';\n\t$four_beats\
    \ = '4';\n\t$two_beats = '2';\n\t$one_beat = '1';\n\t$beat_arr = array();\n\t\
    foreach ($notes as $note) {\n\t\tif ($note == $whole_note) {\n\t\t\t$beat_arr[]\
    \ = $four_beats;\n\t\t} elseif ($note == $half_note) {\n\t\t\t$beat_arr[] = $two_beats;\n\
    \t\t} elseif ($note == $quarter_note) {\n\t\t\t$beat_arr[] = $one_beat;\n\t\t\
    }\n\t}\n\treturn $beat_arr;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd7p2_dhi.php:38\n\
    Stack trace:\n#0 /tmp/tmpd7p2_dhi.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpd7p2_dhi.php\
    \ on line 38\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n}\nfunction candidate(...$args) {\n   \
    \ return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwhcjn8_e.php:18\n\
    Stack trace:\n#0 /tmp/tmpwhcjn8_e.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpwhcjn8_e.php\
    \ on line 18\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n\n}\n\nprint_r(parse_music(\"o o| .| o|\
    \ o| .| .| .| .| o o\"));\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplm5o4zlb.php:21\n\
    Stack trace:\n#0 /tmp/tmplm5o4zlb.php(28): test()\n#1 {main}\n  thrown in /tmp/tmplm5o4zlb.php\
    \ on line 21\n"
  timestamp: 1660028700
- exit_code: 0
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n  $array = explode(\" \", $music_string);\n\
    \  $length = count($array);\n  $result = array();\n  for ($i = 0; $i < $length;\
    \ $i++) {\n    if ($array[$i] == \"o\") {\n      array_push($result, 4);\n   \
    \ } elseif ($array[$i] == \"o|\") {\n      array_push($result, 2);\n    } elseif\
    \ ($array[$i] == \".|\") {\n      array_push($result, 1);\n    }\n  }\n  return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028700
- exit_code: 0
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n\t$music_string = trim($music_string);\n\
    \t$notes = explode(' ', $music_string);\n\t$dur = array();\n\tforeach ($notes\
    \ as $note) {\n\t\tif ($note == 'o') {\n\t\t\t$dur[] = 4;\n\t\t} elseif ($note\
    \ == 'o|') {\n\t\t\t$dur[] = 2;\n\t\t} elseif ($note == '.|') {\n\t\t\t$dur[]\
    \ = 1;\n\t\t}\n\t}\n\treturn $dur;\n}\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028700
- exit_code: 0
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    // TODO: Implement parse_music function.\n\
    \    $count = 0;\n    $result = [];\n    $music_arr = explode(' ', $music_string);\n\
    \    for ($i = 0; $i < count($music_arr); $i++) {\n        if ($music_arr[$i]\
    \ == 'o') {\n            $result[$count] = 4;\n            $count++;\n       \
    \ } else if ($music_arr[$i] == 'o|') {\n            $result[$count] = 2;\n   \
    \         $count++;\n        } else if ($music_arr[$i] == '.|') {\n          \
    \  $result[$count] = 1;\n            $count++;\n        }\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028700
- exit_code: 0
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $music_arr = str_split($music_string);\n\
    \    $result = [];\n    $part = '';\n    $music_arr_count = count($music_arr);\n\
    \    foreach ($music_arr as $i => $char) {\n        if ($char === ' ') {\n   \
    \         if ($part === 'o') {\n                $result[] = 4;\n            }\
    \ elseif ($part === 'o|') {\n                $result[] = 2;\n            } elseif\
    \ ($part === '.|') {\n                $result[] = 1;\n            }\n        \
    \    $part = '';\n        } else {\n            $part .= $char;\n            if\
    \ ($i === $music_arr_count - 1) {\n                if ($part === 'o') {\n    \
    \                $result[] = 4;\n                } elseif ($part === 'o|') {\n\
    \                    $result[] = 2;\n                } elseif ($part === '.|')\
    \ {\n                    $result[] = 1;\n                }\n            }\n  \
    \      }\n    }\n    return $result;\n}\n\n$music_string = 'o o| .| o| o| .| .|\
    \ .| .| o o';\nprint_r(parse_music($music_string));\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 4\n    [1] => 2\n    [2] => 1\n    [3] => 2\n    [4]\
    \ => 2\n    [5] => 1\n    [6] => 1\n    [7] => 1\n    [8] => 1\n    [9] => 4\n\
    \    [10] => 4\n)\n"
  timestamp: 1660028700
- exit_code: 0
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n  $return_array = array();\n  $parsed_notes\
    \ = explode(\" \", $music_string);\n  foreach ($parsed_notes as $note) {\n   \
    \ switch ($note) {\n      case 'o':\n        $return_array[] = 4;\n        break;\n\
    \      case 'o|':\n        $return_array[] = 2;\n        break;\n      case '.|':\n\
    \        $return_array[] = 1;\n        break;\n    }\n  }\n  return $return_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n}\nfunction candidate(...$args) {\n   \
    \ return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwhcjn8_e.php:18\n\
    Stack trace:\n#0 /tmp/tmpwhcjn8_e.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpwhcjn8_e.php\
    \ on line 18\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n\t$beatArray = array();\n\t$beatString\
    \ = \"\";\n\tfor ($i = 0; $i < strlen($music_string); $i++) {\n\t\tif ($music_string[$i]\
    \ == \"o\") {\n\t\t\tif ($music_string[$i + 1] == \" \") {\n\t\t\t\t$beatString\
    \ .= \"4\";\n\t\t\t} else if ($music_string[$i + 1] == \"|\") {\n\t\t\t\t$beatString\
    \ .= \"2\";\n\t\t\t}\n\t\t} else if ($music_string[$i] == \".\") {\n\t\t\t$beatString\
    \ .= \"1\";\n\t\t}\n\t}\n\t$beatArray = explode(\" \", $beatString);\n\treturn\
    \ $beatArray;\n}\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgxiyee1m.php:33\n\
    Stack trace:\n#0 /tmp/tmpgxiyee1m.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpgxiyee1m.php\
    \ on line 33\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n\t$beats = array(\n\t\t'o' => 4,\n\t\t\
    'o|' => 2,\n\t\t'.|' => 1\n\t);\n\t$pattern = '/o|o\\||\\.\\|/';\n\tpreg_match_all($pattern,\
    \ $music_string, $matches);\n\t$result = array();\n\tforeach ($matches[0] as $match)\
    \ {\n\t\t$result[] = $beats[$match];\n\t}\n\treturn $result;\n}\n\necho \"<pre>\"\
    ;\necho print_r(parse_music(\"o o| .| o| o| .| .| .| .| o o\"));\necho \"</pre>\"\
    ;\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 4\n    [1] => 4\n    [2] => 1\n    [3] => 4\n\
    \    [4] => 4\n    [5] => 1\n    [6] => 1\n    [7] => 1\n    [8] => 1\n    [9]\
    \ => 4\n    [10] => 4\n)\n1</pre>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp9fmekn5m.php:38\nStack trace:\n#0 /tmp/tmp9fmekn5m.php(42): test()\n\
    #1 {main}\n  thrown in /tmp/tmp9fmekn5m.php on line 38\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n\n}\nfunction candidate(...$args) {\n \
    \   return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt0kdiy2c.php:19\n\
    Stack trace:\n#0 /tmp/tmpt0kdiy2c.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpt0kdiy2c.php\
    \ on line 19\n"
  timestamp: 1660028700
- exit_code: 0
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n  $results = array();\n  $notes = explode('\
    \ ', $music_string);\n  foreach ($notes as $note) {\n    switch ($note) {\n  \
    \    case 'o':\n        $results[] = 4;\n        break;\n      case 'o|':\n  \
    \      $results[] = 2;\n        break;\n      case '.|':\n        $results[] =\
    \ 1;\n        break;\n    }\n  }\n  return $results;\n}\n\necho '<pre>';\nprint_r(parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\"));\necho '</pre>';\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 4\n    [1] => 2\n    [2] => 1\n    [3] => 2\n\
    \    [4] => 2\n    [5] => 1\n    [6] => 1\n    [7] => 1\n    [8] => 1\n    [9]\
    \ => 4\n    [10] => 4\n)\n</pre>"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $notes = str_split($music_string);\n\
    \    $beats = array();\n    $bars = 0;\n    foreach ($notes as $note) {\n    \
    \    switch ($note) {\n            case 'o':\n                $beats[] = 4;\n\
    \                break;\n            case 'o|':\n                $beats[] = 2;\n\
    \                break;\n            case '.|':\n                $beats[] = 1;\n\
    \                break;\n            case '|':\n                $bars++;\n   \
    \             break;\n        }\n    }\n    return $beats;\n}\n\necho \"<pre>\"\
    ;\nprint_r(parse_music(\"o o| .| o| o| .| .| .| .| o o\"));\necho \"</pre>\";\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 4\n    [1] => 4\n    [2] => 4\n    [3] => 4\n\
    \    [4] => 4\n    [5] => 4\n)\n</pre>\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp5_tol8qw.php:44\nStack trace:\n#0 /tmp/tmp5_tol8qw.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp5_tol8qw.php on line 44\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n  $notes = array();\n  $len = strlen($music_string);\n\
    \  $count = 0;\n  $sum = 0;\n  while($count < $len) {\n    $note = $music_string[$count];\n\
    \    if ($note == 'o') {\n      $sum += 4;\n      $notes[] = 4;\n    } else if\
    \ ($note == '.') {\n      $notes[] = 1;\n      $sum += 1;\n    }\n    if ($music_string[$count\
    \ + 1] == '|') {\n      $notes[] = $sum;\n      $sum = 0;\n    }\n    $count +=\
    \ 2;\n  }\n  return $notes;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Uninitialized string offset 7 in /tmp/tmpb49rduqz.php on line\
    \ 25\n\nWarning: Uninitialized string offset 11 in /tmp/tmpb49rduqz.php on line\
    \ 25\n\nWarning: Uninitialized string offset 19 in /tmp/tmpb49rduqz.php on line\
    \ 25\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb49rduqz.php:42\n\
    Stack trace:\n#0 /tmp/tmpb49rduqz.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpb49rduqz.php\
    \ on line 42\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n}\nfunction candidate(...$args) {\n   \
    \ return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwhcjn8_e.php:18\n\
    Stack trace:\n#0 /tmp/tmpwhcjn8_e.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpwhcjn8_e.php\
    \ on line 18\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $note_map = [\n        'o' => 4,\n\
    \        'o|' => 2,\n        '.|' => 1\n    ];\n    $notes = explode(' ', $music_string);\n\
    \    $result = [];\n    foreach ($notes as $note) {\n        $result[] = $note_map[$note];\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key \"\" in /tmp/tmp3div_l5z.php on line 20\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3div_l5z.php:30\nStack\
    \ trace:\n#0 /tmp/tmp3div_l5z.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp3div_l5z.php\
    \ on line 30\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n\t$music_array = str_split($music_string);\n\
    \t$music_array_chunked = array_chunk($music_array, 2);\n\t$music_array_chunked_flipped\
    \ = array_flip($music_array_chunked);\n\t$music_array_chunked_flipped_keys = array_keys($music_array_chunked_flipped);\n\
    \tforeach ($music_array_chunked_flipped_keys as $key => $value) {\n\t\tif ($value\
    \ == 'o ') {\n\t\t\t$music_array_chunked_flipped_keys[$key] = 4;\n\t\t} elseif\
    \ ($value == 'o|') {\n\t\t\t$music_array_chunked_flipped_keys[$key] = 2;\n\t\t\
    } elseif ($value == '.|') {\n\t\t\t$music_array_chunked_flipped_keys[$key] = 1;\n\
    \t\t}\n\t}\n\treturn $music_array_chunked_flipped_keys;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: array_flip(): Can only flip string and integer values, entry\
    \ skipped in /tmp/tmpgdndv5qk.php on line 14\n\nWarning: array_flip(): Can only\
    \ flip string and integer values, entry skipped in /tmp/tmpgdndv5qk.php on line\
    \ 14\n\nWarning: array_flip(): Can only flip string and integer values, entry\
    \ skipped in /tmp/tmpgdndv5qk.php on line 14\n\nWarning: array_flip(): Can only\
    \ flip string and integer values, entry skipped in /tmp/tmpgdndv5qk.php on line\
    \ 14\n\nWarning: array_flip(): Can only flip string and integer values, entry\
    \ skipped in /tmp/tmpgdndv5qk.php on line 14\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpgdndv5qk.php:34\nStack trace:\n#0 /tmp/tmpgdndv5qk.php(40):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpgdndv5qk.php on line 34\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n}\n\nfunction candidate(...$args) {\n \
    \   return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpozq5dm12.php:19\n\
    Stack trace:\n#0 /tmp/tmpozq5dm12.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpozq5dm12.php\
    \ on line 19\n"
  timestamp: 1660028700
- exit_code: 0
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $music_string = explode(' ', $music_string);\n\
    \    $to_return = [];\n    foreach ($music_string as $note) {\n        if ($note\
    \ === 'o') {\n            $to_return[] = 4;\n        } elseif ($note === 'o|')\
    \ {\n            $to_return[] = 2;\n        } elseif ($note === '.|') {\n    \
    \        $to_return[] = 1;\n        }\n    }\n    return $to_return;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n  $result = [];\n  $music_string = explode('\
    \ ', $music_string);\n  foreach ($music_string as $music_string_value) {\n   \
    \ if ($music_string_value == 'o') {\n      $result[] = 4;\n    } else if ($music_string_value\
    \ == 'o|') {\n      $result[] = 2;\n    } else if ($music_string_value == '.|')\
    \ {\n      $result[] = 1;\n    }\n  }\n  return $result;\n}\n\nprint_r(parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\"));\nprint_r(parse_music(\"o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o.|..|.o\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected double-quoted string ") !== array()) { throw
    new Exc...", expecting ")" in /tmp/tmp1b0e9p8p.php on line 33

    '
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n\t// Complete this function\n}\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr7768o9a.php:19\n\
    Stack trace:\n#0 /tmp/tmpr7768o9a.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpr7768o9a.php\
    \ on line 19\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $result = [];\n    $notes = explode('\
    \ ', $music_string);\n    foreach ($notes as $note) {\n        $beats = 0;\n \
    \       switch ($note) {\n            case 'o':\n                $beats = 4;\n\
    \                break;\n            case 'o|':\n                $beats = 2;\n\
    \                break;\n            case '.|':\n                $beats = 1;\n\
    \                break;\n        }\n        $result[] = $beats;\n    }\n    return\
    \ $result;\n}\n\n$music_string = 'o o| .| o| o| .| .| .| .| o o';\n$beats = parse_music($music_string);\n\
    echo implode(', ', $beats);\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpjbpv1w6m.php:40\nStack trace:\n#0 /tmp/tmpjbpv1w6m.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpjbpv1w6m.php on line 40\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n  $chars = str_split($music_string);\n\
    \  $res = [];\n  foreach ($chars as $char) {\n    if (ctype_alpha($char)) {\n\
    \      $res[] = 4;\n    } elseif ($char == '|') {\n      if (is_numeric($res[count($res)\
    \ - 1])) {\n        $res[count($res) - 1] *= 2;\n      } else {\n        $res[]\
    \ = 2;\n      }\n    } elseif ($char == '.') {\n      $res[] = 1;\n    }\n  }\n\
    \  return $res;\n}\n\n$music = \"o o| .| o| o| .| .| .| .| o o\";\nvar_dump(parse_music($music));\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(11) {\n  [0]=>\n  int(4)\n  [1]=>\n  int(8)\n  [2]=>\n  int(2)\n\
    \  [3]=>\n  int(8)\n  [4]=>\n  int(8)\n  [5]=>\n  int(2)\n  [6]=>\n  int(2)\n\
    \  [7]=>\n  int(2)\n  [8]=>\n  int(2)\n  [9]=>\n  int(4)\n  [10]=>\n  int(4)\n\
    }\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcdikn_g2.php:39\n\
    Stack trace:\n#0 /tmp/tmpcdikn_g2.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpcdikn_g2.php\
    \ on line 39\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $array_notes = str_split($music_string);\n\
    \n    //array of notes, where key is note and value is duration of the note\n\
    \    $notes = array();\n    $temp_note = '';\n\n    foreach ($array_notes as $note)\
    \ {\n        $temp_note .= $note;\n        //make sure that it's not 'o|' as it\
    \ is half note\n        if($note == 'o' && strlen($temp_note) == 2) {\n      \
    \      $notes[] = array('note' => $temp_note, 'duration' => 4);\n            $temp_note\
    \ = '';\n        }\n        elseif($note == '|') {\n            $notes[] = array('note'\
    \ => $temp_note, 'duration' => 2);\n            $temp_note = '';\n        }\n\
    \        elseif($note == '.') {\n            $notes[] = array('note' => $temp_note,\
    \ 'duration' => 1);\n            $temp_note = '';\n        }\n    }\n\n    //array\
    \ of durations\n    $durations = array();\n    foreach ($notes as $note) {\n \
    \       $durations[] = $note['duration'];\n    }\n\n    return $durations;\n}\n\
    \nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpglal67ds.php:50\n\
    Stack trace:\n#0 /tmp/tmpglal67ds.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpglal67ds.php\
    \ on line 50\n"
  timestamp: 1660028700
- exit_code: 0
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n\t$music_string = trim($music_string);\n\
    \t$notes = explode(' ', $music_string);\n\t$output = array();\n\tforeach ($notes\
    \ as $note) {\n\t\tif ($note == 'o') {\n\t\t\t$output[] = 4;\n\t\t} elseif ($note\
    \ == 'o|') {\n\t\t\t$output[] = 2;\n\t\t} elseif ($note == '.|') {\n\t\t\t$output[]\
    \ = 1;\n\t\t}\n\t}\n\treturn $output;\n}\n\nfunction candidate(...$args) {\n \
    \   return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028700
- exit_code: 0
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $note_lengths = [];\n    $temp_array\
    \ = explode(\" \", $music_string);\n    for ($i = 0; $i < count($temp_array);\
    \ $i++) {\n        if ($temp_array[$i] == \"o\") {\n            array_push($note_lengths,\
    \ 4);\n        } elseif ($temp_array[$i] == \"o|\") {\n            array_push($note_lengths,\
    \ 2);\n        } elseif ($temp_array[$i] == \".|\") {\n            array_push($note_lengths,\
    \ 1);\n        }\n    }\n    return $note_lengths;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n  $result = [];\n  $notes = str_split($music_string);\n\
    \  foreach ($notes as $note) {\n    if ($note == 'o') {\n      $result[] = 4;\n\
    \    } elseif ($note == 'o' && $note == '|') {\n      $result[] = 2;\n    } elseif\
    \ ($note == '.' && $note == '|') {\n      $result[] = 1;\n    }\n  }\n  return\
    \ $result;\n}\nvar_dump(parse_music(\"o o| .| o| o| .| .| .| .| o o\"));\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(6) {\n  [0]=>\n  int(4)\n  [1]=>\n  int(4)\n  [2]=>\n  int(4)\n \
    \ [3]=>\n  int(4)\n  [4]=>\n  int(4)\n  [5]=>\n  int(4)\n}\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpmvoc1tlq.php:33\nStack trace:\n#0 /tmp/tmpmvoc1tlq.php(38):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpmvoc1tlq.php on line 33\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n}\nfunction candidate(...$args) {\n   \
    \ return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwhcjn8_e.php:18\n\
    Stack trace:\n#0 /tmp/tmpwhcjn8_e.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpwhcjn8_e.php\
    \ on line 18\n"
  timestamp: 1660028700
- exit_code: 0
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $music_string = trim($music_string);\n\
    \    $notes = explode(' ', $music_string);\n    $result = [];\n    foreach ($notes\
    \ as $note) {\n        if ($note == 'o') {\n            $result[] = 4;\n     \
    \   } else if ($note == 'o|') {\n            $result[] = 2;\n        } else if\
    \ ($note == '.|') {\n            $result[] = 1;\n        }\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028700
- exit_code: 0
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $notes = explode(' ', $music_string);\n\
    \    $result = [];\n    foreach ($notes as $note) {\n        if ($note === 'o')\
    \ {\n            $result[] = 4;\n        } elseif ($note === 'o|') {\n       \
    \     $result[] = 2;\n        } elseif ($note === '.|') {\n            $result[]\
    \ = 1;\n        }\n    }\n    return $result;\n}\n\n$a = parse_music(\"o o| .|\
    \ o| o| .| .| .| .| o o\");\nprint_r($a);\nfunction candidate(...$args) {\n  \
    \  return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 4\n    [1] => 2\n    [2] => 1\n    [3] => 2\n    [4]\
    \ => 2\n    [5] => 1\n    [6] => 1\n    [7] => 1\n    [8] => 1\n    [9] => 4\n\
    \    [10] => 4\n)\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n\t$music_string = preg_replace(\"#\\s+#\"\
    , \"\", $music_string);\n\t$music_string = preg_replace(\"#(o|\\.\\|)#\", \"$1|\"\
    , $music_string);\n\t$split_music = explode(\"|\", $music_string);\n\t\n\t$return_array\
    \ = array();\n\t\n\tforeach($split_music as $music_part) {\n\t\tif ($music_part\
    \ == \"o\") {\n\t\t\t$return_array[] = 4;\n\t\t} else if ($music_part == \"o|\"\
    ) {\n\t\t\t$return_array[] = 2;\n\t\t} else if ($music_part == \".|\") {\n\t\t\
    \t$return_array[] = 1;\n\t\t}\n\t}\n\t\n\treturn $return_array;\n}\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9cjwlvnn.php:37\n\
    Stack trace:\n#0 /tmp/tmp9cjwlvnn.php(42): test()\n#1 {main}\n  thrown in /tmp/tmp9cjwlvnn.php\
    \ on line 37\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    //...\n}\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdi_p6vyw.php:19\n\
    Stack trace:\n#0 /tmp/tmpdi_p6vyw.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpdi_p6vyw.php\
    \ on line 19\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n  $music_string = preg_replace('/o/', 'o|o|o|o|',\
    \ $music_string);\n  $music_string = preg_replace('/o\\|o\\|o\\|o\\|/', 'o', $music_string);\n\
    \  $music_string = preg_replace('/\\.\\|/', '1', $music_string);\n  $music_string\
    \ = preg_replace('/o\\|/', '2', $music_string);\n  $music_array = explode(' ',\
    \ $music_string);\n  return $music_array;\n}\n\necho \"<pre>\";\nprint_r(parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\"));\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => o\n    [1] => 2\n    [2] => 1\n    [3] => 2\n\
    \    [4] => 2\n    [5] => 1\n    [6] => 1\n    [7] => 1\n    [8] => 1\n    [9]\
    \ => o\n    [10] => o\n)\n</pre>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp8i_nwhln.php:28\nStack trace:\n#0 /tmp/tmp8i_nwhln.php(35): test()\n\
    #1 {main}\n  thrown in /tmp/tmp8i_nwhln.php on line 28\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n  // Write your code here\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa9jagwlh.php:20\n\
    Stack trace:\n#0 /tmp/tmpa9jagwlh.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpa9jagwlh.php\
    \ on line 20\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n\t$arr = str_split($music_string);\n\t\
    $notes = [];\n\t$current = 1;\n\tfor ($i = 0; $i < count($arr); $i++) {\n\t\t\
    if ($arr[$i] == 'o') {\n\t\t\tif ($i < count($arr) - 1 && $arr[$i + 1] == ' ')\
    \ {\n\t\t\t\t$notes[] = 4;\n\t\t\t\t$current = 1;\n\t\t\t} else {\n\t\t\t\t$current\
    \ *= 2;\n\t\t\t}\n\t\t} else if ($arr[$i] == '|') {\n\t\t\t$notes[] = $current;\n\
    \t\t\t$current = 1;\n\t\t} else if ($arr[$i] == '.') {\n\t\t\t$current /= 2;\n\
    \t\t}\n\t}\n\treturn $notes;\n}\n\necho implode(', ', parse_music(\"o o| .| o|\
    \ o| .| .| .| .| o o\"));\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "4, 2, 0.5, 2, 2, 0.5, 0.5, 0.5, 0.5, 4\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp00y71ysz.php:40\nStack trace:\n#0 /tmp/tmp00y71ysz.php(46):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp00y71ysz.php on line 40\n"
  timestamp: 1660028700
- exit_code: -1
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $input = str_split($music_string);\n\
    \    $array = array();\n    $len = count($input);\n    $i = 0;\n    while ($i\
    \ < $len) {\n        if ($input[$i] == 'o') {\n            if ($input[$i + 1]\
    \ == '|') {\n                $array[] = 2;\n                $i += 2;\n       \
    \     } else {\n                $array[] = 4;\n                $i++;\n       \
    \     }\n        } elseif ($input[$i] == '.') {\n            $array[] = 1;\n \
    \           $i += 2;\n        }\n    }\n    return $array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660028705
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9ngnrq03.php:20\n\
    Stack trace:\n#0 /tmp/tmp9ngnrq03.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp9ngnrq03.php\
    \ on line 20\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $music_string = str_replace(\"o\",\"\
    1111\",$music_string);\n    $music_string = str_replace(\"o|\",\"1100\",$music_string);\n\
    \    $music_string = str_replace(\".|\",\"1000\",$music_string);\n    $music_string\
    \ = str_replace(\" \",\"\",$music_string);\n    $music_array = str_split($music_string);\n\
    \    foreach ($music_array as $key => $value) {\n        $array_result[] = substr_count($value,\"\
    1\");\n    }\n    return $array_result;\n}\nprint_r(parse_music(\"o o| .| o| o|\
    \ .| .| .| .| o o\"));\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 1\n    [1] => 1\n    [2] => 1\n    [3] => 1\n    [4]\
    \ => 1\n    [5] => 1\n    [6] => 1\n    [7] => 1\n    [8] => 0\n    [9] => 1\n\
    \    [10] => 0\n    [11] => 0\n    [12] => 0\n    [13] => 1\n    [14] => 1\n \
    \   [15] => 1\n    [16] => 1\n    [17] => 0\n    [18] => 1\n    [19] => 1\n  \
    \  [20] => 1\n    [21] => 1\n    [22] => 0\n    [23] => 1\n    [24] => 0\n   \
    \ [25] => 0\n    [26] => 0\n    [27] => 1\n    [28] => 0\n    [29] => 0\n    [30]\
    \ => 0\n    [31] => 1\n    [32] => 0\n    [33] => 0\n    [34] => 0\n    [35] =>\
    \ 1\n    [36] => 0\n    [37] => 0\n    [38] => 0\n    [39] => 1\n    [40] => 1\n\
    \    [41] => 1\n    [42] => 1\n    [43] => 1\n    [44] => 1\n    [45] => 1\n \
    \   [46] => 1\n)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8r9ns2l2.php:28\n\
    Stack trace:\n#0 /tmp/tmp8r9ns2l2.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp8r9ns2l2.php\
    \ on line 28\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n\t$answ = [];\n\t$music_string = str_replace(\"\
    |\", \"\", $music_string);\n\t$music_array = explode(\" \", $music_string);\n\t\
    for ($i = 0; $i < count($music_array); $i++) {\n\t\tif ($music_array[$i] == \"\
    o\") {\n\t\t\t$answ[] = 4;\n\t\t} elseif ($music_array[$i] == \".\") {\n\t\t\t\
    $answ[] = 1;\n\t\t}\n\t}\n\treturn $answ;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyo8yaggr.php:33\n\
    Stack trace:\n#0 /tmp/tmpyo8yaggr.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpyo8yaggr.php\
    \ on line 33\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $notas = explode(' ', $music_string);\n\
    \    foreach ($notas as $nota) {\n        switch ($nota) {\n            case 'o':\n\
    \                $int[] = 4;\n                break;\n            case 'o|':\n\
    \                $int[] = 2;\n                break;\n            case '.|':\n\
    \                $int[] = 1;\n                break;\n        }\n    }\n    return\
    \ $int;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $int in /tmp/tmp1vdak7ep.php on line 26\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1vdak7ep.php:34\nStack\
    \ trace:\n#0 /tmp/tmp1vdak7ep.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp1vdak7ep.php\
    \ on line 34\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n\t$notes = str_split($music_string);\n\t\
    $output = array();\n\t$note_buffer = null;\n\tforeach ($notes as $note) {\n\t\t\
    switch ($note) {\n\t\t\tcase 'o':\n\t\t\t\tif ($note_buffer !== null) {\n\t\t\t\
    \t\t$output[] = $note_buffer;\n\t\t\t\t}\n\t\t\t\t$note_buffer = 4;\n\t\t\t\t\
    break;\n\t\t\tcase '|':\n\t\t\t\tif ($note_buffer !== null) {\n\t\t\t\t\t$note_buffer--;\n\
    \t\t\t\t}\n\t\t\t\tbreak;\n\t\t\tcase '.':\n\t\t\t\tif ($note_buffer !== null)\
    \ {\n\t\t\t\t\t$output[] = $note_buffer;\n\t\t\t\t\t$note_buffer = null;\n\t\t\
    \t\t}\n\t\t\t\t$output[] = 1;\n\t\t\t\tbreak;\n\t\t\tcase ' ':\n\t\t\t\tif ($note_buffer\
    \ !== null) {\n\t\t\t\t\t$output[] = $note_buffer;\n\t\t\t\t\t$note_buffer = null;\n\
    \t\t\t\t}\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn $output;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7gjw0gay.php:52\n\
    Stack trace:\n#0 /tmp/tmp7gjw0gay.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp7gjw0gay.php\
    \ on line 52\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $notes = str_split($music_string);\n\
    \    $index = 0;\n    $count = count($notes);\n    $result = [];\n    while ($index\
    \ < $count) {\n        $note = $notes[$index];\n        if ($note === 'o') {\n\
    \            $next = $notes[$index + 1];\n            if ($next === '|') {\n \
    \               $result[] = 2;\n                $index += 2;\n            } else\
    \ {\n                $result[] = 4;\n                $index++;\n            }\n\
    \        } else {\n            $result[] = 1;\n            $index += 2;\n    \
    \    }\n    }\n    return $result;\n}\n\n$test = parse_music(\"o o| .| o| o| .|\
    \ .| .| .| o o\");\nprint_r($test);\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 4\n    [1] => 1\n    [2] => 1\n    [3] => 1\n    [4]\
    \ => 1\n    [5] => 1\n    [6] => 2\n    [7] => 1\n    [8] => 1\n    [9] => 1\n\
    \    [10] => 1\n    [11] => 1\n    [12] => 1\n    [13] => 1\n    [14] => 1\n)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp440tl1dq.php:42\nStack\
    \ trace:\n#0 /tmp/tmp440tl1dq.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp440tl1dq.php\
    \ on line 42\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $count = [];\n    $notes = explode('\
    \ ', $music_string);\n    foreach ($notes as $note) {\n        if (strpos($note,\
    \ 'o|') !== false) {\n            $count[] = 2;\n        } elseif (strpos($note,\
    \ '.') !== false) {\n            $count[] = 1;\n        } else {\n           \
    \ $count[] = 4;\n        }\n    }\n    return $count;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8l7q1p89.php:31\n\
    Stack trace:\n#0 /tmp/tmp8l7q1p89.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp8l7q1p89.php\
    \ on line 31\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $notes = [\n        'o' => 4,\n   \
    \     'o|' => 2,\n        '.|' => 1\n    ];\n    $result = [];\n    foreach ($notes\
    \ as $note => $duration) {\n        $music_string = str_replace($note, $duration,\
    \ $music_string);\n    }\n    $music_string = explode(' ', $music_string);\n \
    \   foreach ($music_string as $note) {\n        $result[] = intval($note);\n \
    \   }\n    return $result;\n}\nvar_dump(parse_music(\"o o| .| o| o| .| .| .| .|\
    \ o o\"));\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(11) {\n  [0]=>\n  int(4)\n  [1]=>\n  int(4)\n  [2]=>\n  int(1)\n\
    \  [3]=>\n  int(4)\n  [4]=>\n  int(4)\n  [5]=>\n  int(1)\n  [6]=>\n  int(1)\n\
    \  [7]=>\n  int(1)\n  [8]=>\n  int(1)\n  [9]=>\n  int(4)\n  [10]=>\n  int(4)\n\
    }\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_78jhj3l.php:33\n\
    Stack trace:\n#0 /tmp/tmp_78jhj3l.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp_78jhj3l.php\
    \ on line 33\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n\t// replace oo and o|o| with oo|\n\t$music_string\
    \ = preg_replace('/((o|\\.)\\|?){2}/', '$1|', $music_string);\n\t// replace o|oo\
    \ and o|.|o| with o|o\n\t$music_string = preg_replace('/(o|\\.)\\|(o|\\.){2}/',\
    \ '$1|$2', $music_string);\n\t// replace o.|.o| with o.|o|\n\t$music_string =\
    \ preg_replace('/o\\.(\\|\\.)*o\\|/', 'o.$1o|', $music_string);\n\t// replace\
    \ .o.|.o| with .o.|o|\n\t$music_string = preg_replace('/\\.o\\.(\\|\\.)*o\\|/',\
    \ '.o.$1o|', $music_string);\n\t// replace o.|.o with o.|o\n\t$music_string =\
    \ preg_replace('/o\\.(\\|\\.)*o/', 'o.$1o', $music_string);\n\t// replace .o.|.o\
    \ with .o.|o\n\t$music_string = preg_replace('/\\.o\\.(\\|\\.)*o/', '.o.$1o',\
    \ $music_string);\n\t// count beats\n\t$beats = array();\n\tforeach (explode('\
    \ ', $music_string) as $note) {\n\t\t$beats[] = substr_count($note, '|') + 1;\n\
    \t}\n\treturn $beats;\n}\n\nprint_r(parse_music(\"o o| .| o| o| .| .| .| .| o\
    \ o\"));\nprint_r(parse_music(\"o o| o.| o.| o.| o.| o.| o.| o.| o o\"));\nprint_r(parse_music(\"\
    o o| o.| o.| o.| o.| o.| o.| o.| o o| o o| o o| o o| o o| o o| o o| o o| o\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected double-quoted string ") !== array()) { throw
    new Exc...", expecting ")" in /tmp/tmpsrtv8bif.php on line 40

    '
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    // regex for whole note\n    $regex_pattern_whole\
    \ = '/o/';\n    // regex for half note\n    $regex_pattern_half = '/o\\|/';\n\
    \    // regex for quarter note\n    $regex_pattern_quarter = '/\\.\\|/';\n   \
    \ // array for matched whole notes\n    $whole_note_array = [];\n    // array\
    \ for matched half notes\n    $half_note_array = [];\n    // array for matched\
    \ quarter notes\n    $quarter_note_array = [];\n    // size of whole note array\n\
    \    $size_whole_note_array = 0;\n    // size of half note array\n    $size_half_note_array\
    \ = 0;\n    // size of quarter note array\n    $size_quarter_note_array = 0;\n\
    \    // array of the final result\n    $parse_music_result = [];\n    // get how\
    \ many whole notes in the array\n    $size_whole_note_array = preg_match_all($regex_pattern_whole,\
    \ $music_string, $whole_note_array);\n    // get how many half notes in the array\n\
    \    $size_half_note_array = preg_match_all($regex_pattern_half, $music_string,\
    \ $half_note_array);\n    // get how many quarter notes in the array\n    $size_quarter_note_array\
    \ = preg_match_all($regex_pattern_quarter, $music_string, $quarter_note_array);\n\
    \    // loop through the whole note array and add 4 to the parse_music_result\
    \ array\n    for ($i = 0; $i < $size_whole_note_array; $i++) {\n        array_push($parse_music_result,\
    \ 4);\n    }\n    // loop through the half note array and add 2 to the parse_music_result\
    \ array\n    for ($i = 0; $i < $size_half_note_array; $i++) {\n        array_push($parse_music_result,\
    \ 2);\n    }\n    // loop through the quarter note array and add 1 to the parse_music_result\
    \ array\n    for ($i = 0; $i < $size_quarter_note\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting ";" in /tmp/tmpof2bemwv.php
    on line 48

    '
  timestamp: 1660028700
- exit_code: 0
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n\t$music_array = explode(\" \", $music_string);\n\
    \t$output_array = array();\n\tforeach ($music_array as $key => $value) {\n\t\t\
    if ($value === \"o\") {\n\t\t\t$output_array[] = 4;\n\t\t} elseif ($value ===\
    \ \"o|\") {\n\t\t\t$output_array[] = 2;\n\t\t} elseif ($value === \".|\") {\n\t\
    \t\t$output_array[] = 1;\n\t\t}\n\t}\n\treturn $output_array;\n}\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028700
- exit_code: 0
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    // Write your code here\n    $arr =\
    \ explode(\" \", $music_string);\n    $newArr = [];\n    foreach ($arr as $value)\
    \ {\n        if ($value == \"o\")\n            $newArr[] = 4;\n        else if\
    \ ($value == \"o|\")\n            $newArr[] = 2;\n        else if ($value == \"\
    .|\")\n            $newArr[] = 1;\n    }\n    return $newArr;\n}\n\necho \"<pre>\"\
    ;\nprint_r(parse_music(\"o o| .| o| o| .| .| .| .| o o\"));\necho \"</pre>\";\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 4\n    [1] => 2\n    [2] => 1\n    [3] => 2\n\
    \    [4] => 2\n    [5] => 1\n    [6] => 1\n    [7] => 1\n    [8] => 1\n    [9]\
    \ => 4\n    [10] => 4\n)\n</pre>"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n\t$arrMusic = str_split($music_string);\n\
    \t$arrBeat = [];\n\t$beat = 0;\n\tforeach ($arrMusic as $strMusic) {\n\t\tif (strpos($strMusic,\
    \ 'o') !== false) {\n\t\t\t$arrBeat[] = 4;\n\t\t} elseif (strpos($strMusic, '.')\
    \ !== false) {\n\t\t\t$arrBeat[] = 1;\n\t\t} elseif (strpos($strMusic, '|') !==\
    \ false) {\n\t\t\t$arrBeat[] = 2;\n\t\t}\n\t}\n\treturn $arrBeat;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0lw6aags.php:34\n\
    Stack trace:\n#0 /tmp/tmp0lw6aags.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp0lw6aags.php\
    \ on line 34\n"
  timestamp: 1660028700
- exit_code: 0
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n  // parse the string and return array\
    \ of integers\n  // the result array should correspond to how many beats does\
    \ each note last\n  // you can assume the input string is always in the right\
    \ format\n  // you can assume the input string is valid\n  // you can assume the\
    \ input string always contains at least one note\n\n  // Your solution here.\n\
    \  $result = array();\n  $music_list = explode(\" \", $music_string);\n  foreach\
    \ ($music_list as $key => $value) {\n    if($value == \"o\") {\n      $result[]\
    \ = 4;\n    }\n    elseif ($value == \"o|\") {\n      $result[] = 2;\n    }\n\
    \    elseif ($value == \".|\") {\n      $result[] = 1;\n    }\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $music_array = str_split($music_string);\n\
    \    $music_notes = array_keys($music_array, 'o');\n    $music_notes_with_bars\
    \ = array_keys($music_array, 'o|');\n    $music_notes_with_points = array_keys($music_array,\
    \ '.|');\n    $music_notes_count = count($music_notes);\n    $music_notes_with_bars_count\
    \ = count($music_notes_with_bars);\n    $music_notes_with_points_count = count($music_notes_with_points);\n\
    \    $music_array_output = array();\n    for ($i = 0; $i < $music_notes_count;\
    \ $i++) {\n        $music_array_output[] = 4;\n    }\n    for ($i = 0; $i < $music_notes_with_bars_count;\
    \ $i++) {\n        $music_array_output[] = 2;\n    }\n    for ($i = 0; $i < $music_notes_with_points_count;\
    \ $i++) {\n        $music_array_output[] = 1;\n    }\n    return $music_array_output;\n\
    }\n\nparse_music(\"o o| .| o| o| .| .| .| .| o o\");\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpp8t870sz.php:40\n\
    Stack trace:\n#0 /tmp/tmpp8t870sz.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpp8t870sz.php\
    \ on line 40\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n  return \"\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpna1b7sny.php:20\n\
    Stack trace:\n#0 /tmp/tmpna1b7sny.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpna1b7sny.php\
    \ on line 20\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n\t//$arr = explode(\" \", $music_string);\n\
    \t$arr = preg_split(\"/\\s/\", $music_string);\n\t$arr_of_results = array();\n\
    \tforeach ($arr as $note) {\n\t\t$arr_of_results[] = strlen($note) - substr_count($note,\
    \ \"|\");\n\t}\n\treturn $arr_of_results;\n}\n\n$music_string = \"o o| .| o| o|\
    \ .| .| .| .| o o\";\n$result = parse_music($music_string);\necho \"Input: $music_string<br>\"\
    ;\necho \"Output: \";\nprint_r($result);\nfunction candidate(...$args) {\n   \
    \ return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Input: o o| .| o| o| .| .| .| .| o o<br>Output: Array\n(\n    [0] => 1\n\
    \    [1] => 1\n    [2] => 1\n    [3] => 1\n    [4] => 1\n    [5] => 1\n    [6]\
    \ => 1\n    [7] => 1\n    [8] => 1\n    [9] => 1\n    [10] => 1\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp72nlliit.php:31\nStack trace:\n\
    #0 /tmp/tmp72nlliit.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp72nlliit.php\
    \ on line 31\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n  $notes = [\n    'o' => 4,\n    'o|' =>\
    \ 2,\n    '.|' => 1\n  ];\n  $result = [];\n  foreach(explode(' ', $music_string)\
    \ as $note) {\n    $result[] = $notes[$note];\n  }\n  return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key \"\" in /tmp/tmp3f6qzrti.php on line 19\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3f6qzrti.php:28\nStack\
    \ trace:\n#0 /tmp/tmp3f6qzrti.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp3f6qzrti.php\
    \ on line 28\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n\t$note_beat = array(\n\t\t\"o\" => 4,\n\
    \t\t\"o|\" => 2,\n\t\t\".|\" => 1\n\t);\n\t$note_string = preg_split(\"/\\s+/\"\
    , $music_string);\n\t$note_value = array();\n\tfor ($i = 0; $i < count($note_string);\
    \ $i++) {\n\t\t$note_value[] = $note_beat[$note_string[$i]];\n\t}\n\treturn $note_value;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key \"\" in /tmp/tmp7os2ufgh.php on line 20\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7os2ufgh.php:30\nStack\
    \ trace:\n#0 /tmp/tmp7os2ufgh.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp7os2ufgh.php\
    \ on line 30\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n  $num_beats = strlen($music_string);\n\
    \  $current_beat = 0;\n  $beat_array = array();\n  while ($current_beat < $num_beats)\
    \ {\n    $note = $music_string[$current_beat];\n    if ($note == 'o') {\n    \
    \  $next_note = $music_string[$current_beat + 1];\n      if ($next_note == '|')\
    \ {\n        $beat_array[] = 2;\n        $current_beat += 2;\n      } else {\n\
    \        $beat_array[] = 4;\n        $current_beat += 1;\n      }\n    } else\
    \ {\n      $beat_array[] = 1;\n      $current_beat += 2;\n    }\n  }\n  return\
    \ $beat_array;\n}\n\necho \"<pre>\";\nvar_dump(parse_music(\"o o| .| o| o| .|\
    \ .| .| .| o o\"));\necho \"</pre>\";\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>array(15) {\n  [0]=>\n  int(4)\n  [1]=>\n  int(1)\n  [2]=>\n  int(1)\n\
    \  [3]=>\n  int(1)\n  [4]=>\n  int(1)\n  [5]=>\n  int(1)\n  [6]=>\n  int(2)\n\
    \  [7]=>\n  int(1)\n  [8]=>\n  int(1)\n  [9]=>\n  int(1)\n  [10]=>\n  int(1)\n\
    \  [11]=>\n  int(1)\n  [12]=>\n  int(1)\n  [13]=>\n  int(1)\n  [14]=>\n  int(1)\n\
    }\n</pre>\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsz2ouocr.php:44\n\
    Stack trace:\n#0 /tmp/tmpsz2ouocr.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpsz2ouocr.php\
    \ on line 44\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $music_string = str_replace(\"o|\"\
    , \"o/\", $music_string);\n    $array = explode(\" \", $music_string);\n    for\
    \ ($i = 0; $i < count($array); $i++) {\n        switch ($array[$i]) {\n      \
    \      case 'o':\n                $array[$i] = 4;\n                break;\n  \
    \          case 'o/':\n                $array[$i] = 2;\n                break;\n\
    \            case '.|':\n                $array[$i] = 1;\n                break;\n\
    \        }\n    }\n    return $array;\n}\nfunction candidate(...$args) {\n   \
    \ return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvd29b7gs.php:34\n\
    Stack trace:\n#0 /tmp/tmpvd29b7gs.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpvd29b7gs.php\
    \ on line 34\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $regex = '#([.]+\\|)|([o]+\\|)|([o]+)#';\n\
    \    preg_match_all($regex, $music_string, $matches);\n    $res = [];\n    foreach\
    \ ($matches[0] as $match) {\n        if ($match[0] == '.') {\n            $res[]\
    \ = strlen($match);\n        } else {\n            $res[] = strlen($match) + (strlen($match)\
    \ % 2);\n        }\n    }\n    return $res;\n}\n$res = parse_music(\"o o| .| o|\
    \ o| .| .| .| .| o o\");\nprint_r($res);\necho \"\\n\";\n$res = parse_music(\"\
    o | o o| o o o o o o o o o o o o o o o o o o o o o o o o| o o o o o o o o o o\
    \ o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o\
    \ o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o\
    \ o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o\
    \ o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o\
    \ o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o\
    \ o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o\
    \ o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o\
    \ o o o o o o o o o o o o o o o o o o o o o o o o o o\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected double-quoted string ") !== array()) { throw
    new Exc...", expecting ")" in /tmp/tmpiphei5o4.php on line 33

    '
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n}\nfunction candidate(...$args) {\n   \
    \ return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwhcjn8_e.php:18\n\
    Stack trace:\n#0 /tmp/tmpwhcjn8_e.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpwhcjn8_e.php\
    \ on line 18\n"
  timestamp: 1660028700
- exit_code: 0
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $str = str_replace(\"\\r\", \"\", $music_string);\n\
    \    $notes = preg_split(\"/\\n/\", $str);\n    $music = [];\n    foreach ($notes\
    \ as $note) {\n        $music[] = explode(\" \", $note);\n    }\n    $beats =\
    \ [];\n    foreach ($music as $measure) {\n        foreach ($measure as $note)\
    \ {\n            if ($note == \"o\") {\n                $beats[] = 4;\n      \
    \      } elseif ($note == \"o|\") {\n                $beats[] = 2;\n         \
    \   } elseif ($note == \".|\") {\n                $beats[] = 1;\n            }\n\
    \        }\n    }\n    return $beats;\n}\nfunction candidate(...$args) {\n   \
    \ return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n  $music_beats = [];\n  $music_arr = str_split($music_string);\n\
    \  foreach ($music_arr as $value) {\n    switch ($value) {\n      case 'o':\n\
    \        $music_beats[] = 4;\n        break;\n      case 'o|':\n        $music_beats[]\
    \ = 2;\n        break;\n      case '.|':\n        $music_beats[] = 1;\n      \
    \  break;\n    }\n  }\n  return $music_beats;\n}\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdygpkv28.php:36\n\
    Stack trace:\n#0 /tmp/tmpdygpkv28.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpdygpkv28.php\
    \ on line 36\n"
  timestamp: 1660028700
- exit_code: 0
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $music_string_arr = explode(' ', $music_string);\n\
    \    $result = [];\n    foreach ($music_string_arr as $music_symbol) {\n     \
    \   if ($music_symbol === 'o') {\n            $result[] = 4;\n        } elseif\
    \ ($music_symbol === 'o|') {\n            $result[] = 2;\n        } elseif ($music_symbol\
    \ === '.|') {\n            $result[] = 1;\n        }\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028700
- exit_code: 0
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $music_array = str_split($music_string);\n\
    \    $parsed_music = [];\n    $current_beat = 0;\n    for ($i = 0; $i < count($music_array);\
    \ $i++) {\n        if ($music_array[$i] == 'o') {\n            if ($music_array[$i\
    \ + 1] == '|') {\n                array_push($parsed_music, 2);\n            \
    \    $i++;\n            } else {\n                array_push($parsed_music, 4);\n\
    \            }\n        } elseif ($music_array[$i] == '.') {\n            array_push($parsed_music,\
    \ 1);\n            $i++;\n        }\n    }\n    return $parsed_music;\n}\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 7 in /tmp/tmp8idixdxf.php on line 17


    Warning: Undefined array key 19 in /tmp/tmp8idixdxf.php on line 17

    '
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n}\nfunction candidate(...$args) {\n   \
    \ return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwhcjn8_e.php:18\n\
    Stack trace:\n#0 /tmp/tmpwhcjn8_e.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpwhcjn8_e.php\
    \ on line 18\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n  // break the music string into an array\
    \ of characters\n  $music_array = str_split($music_string);\n  // create a blank\
    \ return array\n  $return_array = array();\n  // create a var to keep track of\
    \ note count\n  $last_count = 4;\n  // loop through the music array\n  foreach\
    \ ($music_array as $note) {\n    //if the current note is a '.', push a 1 to the\
    \ return array and reset the note count\n    if ($note == '.') {\n      array_push($return_array,\
    \ 1);\n      $last_count = 1;\n    }\n    //if the current note is a 'o', push\
    \ the last note count to the return array and reset the note count\n    if ($note\
    \ == 'o') {\n      array_push($return_array, $last_count);\n      $last_count\
    \ = 4;\n    }\n    //if the current note is a '|', push the last note count to\
    \ the return array and reset the note count\n    if ($note == '|') {\n      array_push($return_array,\
    \ $last_count);\n      $last_count = 2;\n    }\n  }\n  // return the return array\n\
    \  return $return_array;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc8tu28qa.php:47\n\
    Stack trace:\n#0 /tmp/tmpc8tu28qa.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpc8tu28qa.php\
    \ on line 47\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n  $return_array = array();\n  $music_array\
    \ = str_split($music_string);\n  foreach ($music_array as $note) {\n    switch\
    \ ($note) {\n      case 'o':\n        $return_array[] = 4;\n        break;\n \
    \     case '|':\n        $return_array[] = 2;\n        break;\n      case '.':\n\
    \        $return_array[] = 1;\n        break;\n      default:\n        // Skip\
    \ non-note characters\n        break;\n    }\n  }\n  return $return_array;\n}\n\
    \nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuc0ru3rj.php:40\n\
    Stack trace:\n#0 /tmp/tmpuc0ru3rj.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpuc0ru3rj.php\
    \ on line 40\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n\t// your code here\n}\n\necho '<pre>';\n\
    print_r(parse_music(\"o o| .| o| o| .| .| .| .| o o\"));\nprint_r(parse_music(\"\
    o o| o| o| o| o| o| o| o| o o\"));\nprint_r(parse_music(\"o o| o| o| o| o| o|\
    \ o| o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o|\
    \ o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o\
    \ o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o|\
    \ o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o\
    \ o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o|\
    \ o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o\
    \ o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o|\
    \ o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o\
    \ o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected double-quoted string ") !== array()) { throw
    new Exc...", expecting ")" in /tmp/tmpe6lgu51w.php on line 24

    '
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n\t$noteLengths = array('o' => 4, 'o|' =>\
    \ 2, '.|' => 1);\n\t$noteLength = 1;\n\t$lengths = array();\n\t\n\t$notes = str_split($music_string);\n\
    \tforeach ($notes as $note) {\n\t\tif (array_key_exists($noteLength . $note, $noteLengths))\
    \ {\n\t\t\t$lengths[] = $noteLengths[$noteLength . $note];\n\t\t\t$noteLength\
    \ = 1;\n\t\t} else {\n\t\t\t$noteLength .= $note;\n\t\t}\n\t}\n\t\n\treturn $lengths;\n\
    }\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpomxdpbax.php:34\n\
    Stack trace:\n#0 /tmp/tmpomxdpbax.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpomxdpbax.php\
    \ on line 34\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n  $music_array = str_split($music_string);\n\
    \  $parsed_array = [];\n  $music_item = \"\";\n  foreach ($music_array as $char)\
    \ {\n    if (preg_match(\"/[o|.]/\", $char)) {\n      $music_item .= $char;\n\
    \    }\n    if (preg_match(\"/\\s/\", $char)) {\n      $parsed_array[] = beat_count($music_item);\n\
    \      $music_item = \"\";\n    }\n  }\n  return $parsed_array;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function beat_count()\
    \ in /tmp/tmpp6mcqsxx.php:20\nStack trace:\n#0 /tmp/tmpp6mcqsxx.php(28): parse_music('o\
    \ o o o')\n#1 /tmp/tmpp6mcqsxx.php(33): candidate('o o o o')\n#2 /tmp/tmpp6mcqsxx.php(39):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpp6mcqsxx.php on line 20\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n  $music_string = str_replace(\"|\", \"\
    \ \", $music_string);\n  $music_string = preg_replace(\"/\\s+/\", \" \", $music_string);\n\
    \  $music_string = trim($music_string);\n  $music_string = explode(\" \", $music_string);\n\
    \  foreach ($music_string as $value) {\n    switch ($value) {\n      case 'o':\n\
    \        $music_array[] = 4;\n        break;\n      case '.':\n        $music_array[]\
    \ = 1;\n        break;\n    }\n  }\n  return $music_array;\n}\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $music_array in /tmp/tmpqqrsw1nt.php on line\
    \ 26\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqqrsw1nt.php:33\n\
    Stack trace:\n#0 /tmp/tmpqqrsw1nt.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpqqrsw1nt.php\
    \ on line 33\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n  $music_length = strlen($music_string);\n\
    \  for ($i = 0; $i < $music_length; $i++) {\n    switch ($music_string[$i]) {\n\
    \      case 'o':\n        $result[] = 4;\n        break;\n      case 'o|':\n \
    \       $result[] = 2;\n        break;\n      case '.|':\n        $result[] =\
    \ 1;\n        break;\n    }\n  }\n  return $result;\n}\n\n$music_string = 'o o|\
    \ .| o| o| .| .| .| .| o o';\nvar_dump(parse_music($music_string));\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(6) {\n  [0]=>\n  int(4)\n  [1]=>\n  int(4)\n  [2]=>\n  int(4)\n \
    \ [3]=>\n  int(4)\n  [4]=>\n  int(4)\n  [5]=>\n  int(4)\n}\n\nWarning: Undefined\
    \ variable $result in /tmp/tmpwqtj5zxd.php on line 26\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpwqtj5zxd.php:36\nStack trace:\n#0 /tmp/tmpwqtj5zxd.php(43):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpwqtj5zxd.php on line 36\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n\t$result = array();\n\t$notes = explode('\
    \ ', $music_string);\n\t$notes_beat = array(\n\t\t'o' => 4,\n\t\t'o|' => 2,\n\t\
    \t'.|' => 1\n\t);\n\tforeach ($notes as $note) {\n\t\tarray_push($result, $notes_beat[$note]);\n\
    \t}\n\treturn $result;\n}\n\n$music_string = \"o o| .| o| o| .| .| .| .| o o\"\
    ;\necho json_encode(parse_music($music_string));\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "[4,2,1,2,2,1,1,1,1,4,4]\nWarning: Undefined array key \"\" in /tmp/tmpcrhsyyt9.php\
    \ on line 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcrhsyyt9.php:32\n\
    Stack trace:\n#0 /tmp/tmpcrhsyyt9.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpcrhsyyt9.php\
    \ on line 32\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $beat_per_note = array(\n        'o'\
    \ => 4,\n        'o|' => 2,\n        '.|' => 1\n    );\n    $notes = explode('\
    \ ', $music_string);\n    $beat_array = array();\n    foreach ($notes as $note)\
    \ {\n        $beat_array[] = $beat_per_note[$note];\n    }\n    return $beat_array;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key \"\" in /tmp/tmp2axwq9b3.php on line 20\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2axwq9b3.php:30\nStack\
    \ trace:\n#0 /tmp/tmp2axwq9b3.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp2axwq9b3.php\
    \ on line 30\n"
  timestamp: 1660028700
- exit_code: 0
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n  $music_array = [];\n  $temp_array = str_split($music_string);\n\
    \  $temp_music_string = \"\";\n  $temp_count = 0;\n  foreach ($temp_array as $key\
    \ => $value) {\n    if ($value == \" \") {\n      if ($temp_music_string == \"\
    o|\") {\n        $music_array[] = 2;\n      } elseif ($temp_music_string == \"\
    .|\") {\n        $music_array[] = 1;\n      } elseif ($temp_music_string == \"\
    o\") {\n        $music_array[] = 4;\n      }\n      $temp_music_string = \"\"\
    ;\n    } else {\n      $temp_music_string .= $value;\n    }\n  }\n  if ($temp_music_string\
    \ == \"o|\") {\n    $music_array[] = 2;\n  } elseif ($temp_music_string == \"\
    .|\") {\n    $music_array[] = 1;\n  } elseif ($temp_music_string == \"o\") {\n\
    \    $music_array[] = 4;\n  }\n  return $music_array;\n}\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028700
- exit_code: 0
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $arr = explode(' ', $music_string);\n\
    \    $res = [];\n    foreach ($arr as $item) {\n        switch ($item) {\n   \
    \         case 'o':\n                $res[] = 4;\n                break;\n   \
    \         case 'o|':\n                $res[] = 2;\n                break;\n  \
    \          case '.|':\n                $res[] = 1;\n                break;\n \
    \       }\n    }\n    return $res;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n  return array();\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpawv7kpbo.php:21\n\
    Stack trace:\n#0 /tmp/tmpawv7kpbo.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpawv7kpbo.php\
    \ on line 21\n"
  timestamp: 1660028700
- exit_code: 0
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $notes = explode(' ', $music_string);\n\
    \    $beats = [];\n    foreach ($notes as $note) {\n        switch ($note) {\n\
    \            case 'o':\n                $beats[] = 4;\n                break;\n\
    \            case 'o|':\n                $beats[] = 2;\n                break;\n\
    \            case '.|':\n                $beats[] = 1;\n                break;\n\
    \        }\n    }\n    return $beats;\n}\n\n$music_notes = 'o o| .| o| o| .| .|\
    \ .| .| o o';\nvar_dump(parse_music($music_notes));\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(11) {\n  [0]=>\n  int(4)\n  [1]=>\n  int(2)\n  [2]=>\n  int(1)\n\
    \  [3]=>\n  int(2)\n  [4]=>\n  int(2)\n  [5]=>\n  int(1)\n  [6]=>\n  int(1)\n\
    \  [7]=>\n  int(1)\n  [8]=>\n  int(1)\n  [9]=>\n  int(4)\n  [10]=>\n  int(4)\n\
    }\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n  $music_string = trim($music_string);\n\
    \  $result = explode(' ', $music_string);\n  $result_count = count($result);\n\
    \  $result_str = \"\";\n  for ($i = 0; $i < $result_count; $i++) {\n    $result_str\
    \ .= $result[$i] . \" \";\n  }\n  $result_str = trim($result_str);\n  $result_str\
    \ = str_replace(\"|\", \"\", $result_str);\n  $result_str = str_replace(\".\"\
    , \"1\", $result_str);\n  $result_str = str_replace(\"o\", \"4\", $result_str);\n\
    \  $result_str = trim($result_str);\n  $result = explode(' ', $result_str);\n\
    \  $result_count = count($result);\n  $result_int = array();\n  for ($i = 0; $i\
    \ < $result_count; $i++) {\n    $result_int[$i] = intval($result[$i]);\n  }\n\
    \  return $result_int;\n}\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqml7bbsx.php:37\n\
    Stack trace:\n#0 /tmp/tmpqml7bbsx.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpqml7bbsx.php\
    \ on line 37\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $note_times = [\n        'o' => 4,\n\
    \        'o|' => 2,\n        '.|' => 1\n    ];\n    $notes = explode(' ', $music_string);\n\
    \    return array_map(function($note) use ($note_times) {\n        return $note_times[$note];\n\
    \    }, $notes);\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key \"\" in /tmp/tmppcpmhng2.php on line 19\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmppcpmhng2.php:28\nStack\
    \ trace:\n#0 /tmp/tmppcpmhng2.php(35): test()\n#1 {main}\n  thrown in /tmp/tmppcpmhng2.php\
    \ on line 28\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    // >>> parse_music(\"o o| .| o| o|\
    \ .| .| .| .| o o\")\n    // array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n    $notes\
    \ = str_split($music_string);\n    $parsed_notes = [];\n    $note_map = [\n  \
    \      'o' => 4,\n        '|' => 2,\n        '.' => 1\n    ];\n    $current_note\
    \ = '';\n    foreach ($notes as $note) {\n        if ($note === ' ' || $note ===\
    \ '|') {\n            $parsed_notes[] = $note_map[$current_note];\n          \
    \  $current_note = '';\n        } else {\n            $current_note .= $note;\n\
    \        }\n    }\n    if ($current_note !== '') {\n        $parsed_notes[] =\
    \ $note_map[$current_note];\n    }\n    return $parsed_notes;\n}\n\n$music_string\
    \ = \"o o| .| o| o| .| .| .| .| o o\";\nvar_dump(parse_music($music_string));\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key \"\" in /tmp/tmpzvw7lagy.php on line 24\n\
    \nWarning: Undefined array key \"\" in /tmp/tmpzvw7lagy.php on line 24\n\nWarning:\
    \ Undefined array key \"\" in /tmp/tmpzvw7lagy.php on line 24\n\nWarning: Undefined\
    \ array key \"\" in /tmp/tmpzvw7lagy.php on line 24\n\nWarning: Undefined array\
    \ key \"\" in /tmp/tmpzvw7lagy.php on line 24\n\nWarning: Undefined array key\
    \ \"\" in /tmp/tmpzvw7lagy.php on line 24\n\nWarning: Undefined array key \"\"\
    \ in /tmp/tmpzvw7lagy.php on line 24\n\nWarning: Undefined array key \"\" in /tmp/tmpzvw7lagy.php\
    \ on line 24\narray(19) {\n  [0]=>\n  int(4)\n  [1]=>\n  int(4)\n  [2]=>\n  NULL\n\
    \  [3]=>\n  int(1)\n  [4]=>\n  NULL\n  [5]=>\n  int(4)\n  [6]=>\n  NULL\n  [7]=>\n\
    \  int(4)\n  [8]=>\n  NULL\n  [9]=>\n  int(1)\n  [10]=>\n  NULL\n  [11]=>\n  int(1)\n\
    \  [12]=>\n  NULL\n  [13]=>\n  int(1)\n  [14]=>\n  NULL\n  [15]=>\n  int(1)\n\
    \  [16]=>\n  NULL\n  [17]=>\n  int(4)\n  [18]=>\n  int(4)\n}\n\nWarning: Undefined\
    \ array key \"\" in /tmp/tmpzvw7lagy.php on line 24\n\nWarning: Undefined array\
    \ key \"\" in /tmp/tmpzvw7lagy.php on line 24\n\nWarning: Undefined array key\
    \ \"\" in /tmp/tmpzvw7lagy.php on line 24\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpzvw7lagy.php:45\nStack trace:\n#0 /tmp/tmpzvw7lagy.php(50):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpzvw7lagy.php on line 45\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $look_up = array(\n        'o' => 4,\n\
    \        'o|' => 2,\n        '.|' => 1\n    );\n    $music_array = explode(' ',\
    \ $music_string);\n    $result = array();\n    foreach ($music_array as $note)\
    \ {\n        $result[] = $look_up[$note];\n    }\n    return $result;\n}\n\n$music_string\
    \ = \"o o| .| o| o| .| .| .| .| o o\";\n$result = parse_music($music_string);\n\
    print_r($result);\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 4\n    [1] => 2\n    [2] => 1\n    [3] => 2\n    [4]\
    \ => 2\n    [5] => 1\n    [6] => 1\n    [7] => 1\n    [8] => 1\n    [9] => 4\n\
    \    [10] => 4\n)\n\nWarning: Undefined array key \"\" in /tmp/tmpk1u213rb.php\
    \ on line 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk1u213rb.php:33\n\
    Stack trace:\n#0 /tmp/tmpk1u213rb.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpk1u213rb.php\
    \ on line 33\n"
  timestamp: 1660028700
- exit_code: 0
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $result = array();\n    $notes = explode('\
    \ ', $music_string);\n    foreach ($notes as $note) {\n        if($note == 'o')\
    \ {\n            $result[] = 4;\n        } elseif($note == 'o|') {\n         \
    \   $result[] = 2;\n        } elseif($note == '.|') {\n            $result[] =\
    \ 1;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $notes = str_split($music_string);\n\
    \    $result = [];\n    foreach ($notes as $note) {\n        if ($note == 'o')\
    \ {\n            $result[] = 4;\n        } elseif ($note == '.') {\n         \
    \   $result[] = 1;\n        } elseif ($note == '|') {\n            $result[] =\
    \ 2;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n\
    \    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxinx1jxd.php:32\n\
    Stack trace:\n#0 /tmp/tmpxinx1jxd.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpxinx1jxd.php\
    \ on line 32\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9ngnrq03.php:20\n\
    Stack trace:\n#0 /tmp/tmp9ngnrq03.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp9ngnrq03.php\
    \ on line 20\n"
  timestamp: 1660028700
- exit_code: 0
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n\t// For now, return an array of random\
    \ integers\n\t$music_array = explode(\" \", $music_string);\n\t$beat_array = array();\n\
    \tforeach ($music_array as $beat) {\n\t\tswitch ($beat) {\n\t\t\tcase \"o\":\n\
    \t\t\t\t$beat_array[] = 4;\n\t\t\t\tbreak;\n\t\t\tcase \"o|\":\n\t\t\t\t$beat_array[]\
    \ = 2;\n\t\t\t\tbreak;\n\t\t\tcase \".|\":\n\t\t\t\t$beat_array[] = 1;\n\t\t\t\
    \tbreak;\n\t\t}\n\t}\n\treturn $beat_array;\n}\nfunction candidate(...$args) {\n\
    \    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n  $result = [];\n  $notes = str_split($music_string);\n\
    \  for ($i = 0; $i < count($notes); $i++) {\n    if ($notes[$i] == 'o') {\n  \
    \    if ($notes[$i + 1] == ' ') {\n        $result[] = 4;\n      } else if ($notes[$i\
    \ + 1] == '|') {\n        $result[] = 2;\n        $i++;\n      }\n    } else if\
    \ ($notes[$i] == '.') {\n      $result[] = 1;\n      $i++;\n    }\n  }\n  return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 7 in /tmp/tmp0qv1eecu.php on line 16\n\n\
    Warning: Undefined array key 7 in /tmp/tmp0qv1eecu.php on line 18\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmp0qv1eecu.php:35\nStack trace:\n\
    #0 /tmp/tmp0qv1eecu.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp0qv1eecu.php\
    \ on line 35\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n  $music_arr = str_split($music_string);\n\
    \  $notes = array();\n  $i = 0;\n  $note = '';\n  foreach ($music_arr as $key\
    \ => $value) {\n    if ($value == 'o') {\n      $note .= $value;\n    } elseif\
    \ ($value == '|') {\n      $note .= $value;\n    } elseif ($value == ' ') {\n\
    \      switch ($note) {\n        case 'o':\n          $notes[$i] = 4;\n      \
    \    $i++;\n          break;\n        case 'o|':\n          $notes[$i] = 2;\n\
    \          $i++;\n          break;\n        case '.|':\n          $notes[$i] =\
    \ 1;\n          $i++;\n          break;\n      }\n      $note = '';\n    }\n \
    \ }\n  switch ($note) {\n    case 'o':\n      $notes[$i] = 4;\n      $i++;\n \
    \     break;\n    case 'o|':\n      $notes[$i] = 2;\n      $i++;\n      break;\n\
    \    case '.|':\n      $notes[$i] = 1;\n      $i++;\n      break;\n  }\n  return\
    \ $notes;\n}\n\nparse_music(\"o o| .| o| o| .| .| .| .| o o\");\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprs67dd09.php:64\n\
    Stack trace:\n#0 /tmp/tmprs67dd09.php(69): test()\n#1 {main}\n  thrown in /tmp/tmprs67dd09.php\
    \ on line 64\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $output = [];\n    $string_array =\
    \ str_split($music_string);\n    foreach ($string_array as $value) {\n       \
    \ if ($value == 'o') {\n            $output[] = 4;\n        } elseif ($value ==\
    \ '.') {\n            $output[] = 1;\n        } elseif ($value == '|') {\n   \
    \         $output[] = 2;\n        }\n    }\n    return $output;\n}\n\necho json_encode(parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")) . \"\\n\";\necho json_encode(parse_music(\"\
    o o| o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o|\
    \ o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o\
    \ o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o|\
    \ o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o\
    \ o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o|\
    \ o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o\
    \ o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o|\
    \ o o| o o| o o| o o| o o| o o| o o| o o| o o| o o| o o|\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected double-quoted string ") !== array()) { throw
    new Exc...", expecting ")" in /tmp/tmpxtad3h3k.php on line 33

    '
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n  $n = 0;\n  $music_array = str_split($music_string);\n\
    \  foreach ($music_array as $value) {\n    if ($value == 'o'){\n      $n++;\n\
    \    }\n    elseif ($value == 'o|'){\n      $n = $n + 2;\n    }\n    elseif ($value\
    \ == '.|'){\n      $n++;\n    }\n  }\n  return $n;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr6du01ct.php:33\n\
    Stack trace:\n#0 /tmp/tmpr6du01ct.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpr6du01ct.php\
    \ on line 33\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n\t// You implementation goes here\n\t$music_notes\
    \ = str_split($music_string);\n\t$result = array();\n\t$beat = 0;\n\tforeach ($music_notes\
    \ as $m_note) {\n\t\tswitch ($m_note) {\n\t\t\tcase 'o':\n\t\t\t\t$beat = 4;\n\
    \t\t\t\tbreak;\n\t\t\tcase 'o|':\n\t\t\t\t$beat = 2;\n\t\t\t\tbreak;\n\t\t\tcase\
    \ '.|':\n\t\t\t\t$beat = 1;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$beat = 0;\n\
    \t\t\t\tbreak;\n\t\t}\n\t\tarray_push($result, $beat);\n\t}\n\treturn $result;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw4zy9pqy.php:41\n\
    Stack trace:\n#0 /tmp/tmpw4zy9pqy.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpw4zy9pqy.php\
    \ on line 41\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $splitted_string = str_split($music_string);\n\
    \    $is_dot = false;\n    $nums = [];\n    $temp = 0;\n    foreach ($splitted_string\
    \ as $char) {\n        if ($char === 'o') {\n            if ($is_dot) {\n    \
    \            $temp = 1;\n                $is_dot = false;\n            } else\
    \ {\n                $temp = 4;\n            }\n        } elseif ($char === '|')\
    \ {\n            if ($is_dot) {\n                $temp = 1;\n                $is_dot\
    \ = false;\n            } else {\n                $temp = 2;\n            }\n\
    \        } elseif ($char === '.') {\n            $is_dot = true;\n        }\n\
    \        if ($temp > 0) {\n            $nums[] = $temp;\n            $temp = 0;\n\
    \        }\n    }\n    return $nums;\n}\n\nfunction candidate(...$args) {\n  \
    \  return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf9giv68i.php:50\n\
    Stack trace:\n#0 /tmp/tmpf9giv68i.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpf9giv68i.php\
    \ on line 50\n"
  timestamp: 1660028700
- exit_code: -1
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $tokens = str_split($music_string);\n\
    \    $ret = array();\n    $pos = 0;\n    while ($pos < count($tokens)) {\n   \
    \     if ($tokens[$pos] == 'o') {\n            $ret[] = 4;\n            $pos +=\
    \ 1;\n        } else if ($tokens[$pos] == '.') {\n            $ret[] = 1;\n  \
    \          $pos += 3;\n        }\n    }\n    return $ret;\n}\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1660028705
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n  // Implement function here\n}\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkc_i4jho.php:19\n\
    Stack trace:\n#0 /tmp/tmpkc_i4jho.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpkc_i4jho.php\
    \ on line 19\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n\t\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkmup8bm_.php:20\n\
    Stack trace:\n#0 /tmp/tmpkmup8bm_.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpkmup8bm_.php\
    \ on line 20\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    // Write your implementation here\n\
    }\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxpdie9va.php:19\n\
    Stack trace:\n#0 /tmp/tmpxpdie9va.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpxpdie9va.php\
    \ on line 19\n"
  timestamp: 1660028700
- exit_code: 0
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $notes = [];\n    foreach (explode('\
    \ ', $music_string) as $note) {\n        switch ($note) {\n            case 'o':\n\
    \                $notes[] = 4;\n                break;\n            case 'o|':\n\
    \                $notes[] = 2;\n                break;\n            case '.|':\n\
    \                $notes[] = 1;\n                break;\n        }\n    }\n   \
    \ return $notes;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n}\n\nfunction candidate(...$args) {\n \
    \   return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpozq5dm12.php:19\n\
    Stack trace:\n#0 /tmp/tmpozq5dm12.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpozq5dm12.php\
    \ on line 19\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $result = array();\n    $cursor = -1;\n\
    \    for ($i = 0; $i < strlen($music_string); $i++) {\n        $cursor++;\n  \
    \      if ($music_string[$i] == 'o') {\n            if ($music_string[$i + 1]\
    \ == '|') {\n                $result[$cursor] = 2;\n                $i++;\n  \
    \          } else {\n                $result[$cursor] = 4;\n            }\n  \
    \      } else {\n            $result[$cursor] = 1;\n            $i++;\n      \
    \  }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa9psaw9t.php:37\n\
    Stack trace:\n#0 /tmp/tmpa9psaw9t.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpa9psaw9t.php\
    \ on line 37\n"
  timestamp: 1660028700
- exit_code: 0
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n  $notes_string = explode(' ', $music_string);\n\
    \  $notes_length = count($notes_string);\n  $notes_array = array();\n  for ($i\
    \ = 0; $i < $notes_length; $i++) {\n    $note = $notes_string[$i];\n    if ($note\
    \ == 'o') {\n      $notes_array[] = 4;\n    } elseif ($note == 'o|') {\n     \
    \ $notes_array[] = 2;\n    } elseif ($note == '.|') {\n      $notes_array[] =\
    \ 1;\n    }\n  }\n  return $notes_array;\n}\nfunction candidate(...$args) {\n\
    \    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $music = str_split($music_string);\n\
    \    $beat = 0;\n    $beats = [];\n    for ($i = 0; $i < count($music); $i++)\
    \ {\n        if ($music[$i] == 'o') {\n            $beat += 4;\n            $beats[]\
    \ = $beat;\n            $beat = 0;\n        } elseif ($music[$i] == 'o' && $music[$i\
    \ + 1] == '|') {\n            $beat += 2;\n            $beats[] = $beat;\n   \
    \         $beat = 0;\n        } elseif ($music[$i] == '.' && $music[$i + 1] ==\
    \ '|') {\n            $beat += 1;\n            $beats[] = $beat;\n           \
    \ $beat = 0;\n        }\n    }\n    return $beats;\n}\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3uv5d2mt.php:40\n\
    Stack trace:\n#0 /tmp/tmp3uv5d2mt.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp3uv5d2mt.php\
    \ on line 40\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $beats = [\n        'o' => 4,\n   \
    \     'o|' => 2,\n        '.|' => 1\n    ];\n    $notes = explode(' ', $music_string);\n\
    \    $beats_array = [];\n    foreach ($notes as $note) {\n        $beats_array[]\
    \ = $beats[$note];\n    }\n    return $beats_array;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key \"\" in /tmp/tmp7draxop2.php on line 20\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7draxop2.php:30\nStack\
    \ trace:\n#0 /tmp/tmp7draxop2.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp7draxop2.php\
    \ on line 30\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n  $music_array = str_split($music_string);\n\
    \  foreach ($music_array as $key => $char) {\n    if ($char === 'o') {\n     \
    \ $music_array[$key] = 4;\n    } elseif ($char === '.') {\n      $music_array[$key]\
    \ = 1;\n    } elseif ($char === '|') {\n      $music_array[$key] = 2;\n    }\n\
    \  }\n  return $music_array;\n}\n\n$music_array = parse_music(\"o o| .| o| o|\
    \ .| .| .| .| o o\");\nprint_r($music_array);\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 4\n    [1] =>  \n    [2] => 4\n    [3] => 2\n    [4]\
    \ =>  \n    [5] => 1\n    [6] => 2\n    [7] =>  \n    [8] => 4\n    [9] => 2\n\
    \    [10] =>  \n    [11] => 4\n    [12] => 2\n    [13] =>  \n    [14] => 1\n \
    \   [15] => 2\n    [16] =>  \n    [17] => 1\n    [18] => 2\n    [19] =>  \n  \
    \  [20] => 1\n    [21] => 2\n    [22] =>  \n    [23] => 1\n    [24] => 2\n   \
    \ [25] =>  \n    [26] => 4\n    [27] =>  \n    [28] => 4\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpxdpbhfkh.php:33\nStack trace:\n#0 /tmp/tmpxdpbhfkh.php(40):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpxdpbhfkh.php on line 33\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n  $count = 0;\n  $result = [];\n  for ($i\
    \ = 0; $i < strlen($music_string); $i++) {\n    $ch = $music_string[$i];\n   \
    \ switch ($ch) {\n      case 'o':\n        $count += 4;\n        break;\n    \
    \  case '|':\n        if ($music_string[$i - 1] == 'o') {\n          $count +=\
    \ 2;\n        } else {\n          $count += 1;\n        }\n        break;\n  \
    \    case ' ':\n        $result[] = $count;\n        $count = 0;\n        break;\n\
    \    }\n  }\n  $result[] = $count;\n  return $result;\n}\n\nvar_dump(parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\"));\n\n/*\n* Here is a legend:\n* 'o' - whole note,\
    \ lasts four beats\n* 'o|' - half note, lasts two beats\n* '.|' - quater note,\
    \ lasts one beat\n* >>> parse_music(\"o o| .| o| o| .| .| .| .| o o\")\n* array(4,\
    \ 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n*/\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(11) {\n  [0]=>\n  int(4)\n  [1]=>\n  int(6)\n  [2]=>\n  int(1)\n\
    \  [3]=>\n  int(6)\n  [4]=>\n  int(6)\n  [5]=>\n  int(1)\n  [6]=>\n  int(1)\n\
    \  [7]=>\n  int(1)\n  [8]=>\n  int(1)\n  [9]=>\n  int(4)\n  [10]=>\n  int(4)\n\
    }\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpop9pph8u.php:52\n\
    Stack trace:\n#0 /tmp/tmpop9pph8u.php(59): test()\n#1 {main}\n  thrown in /tmp/tmpop9pph8u.php\
    \ on line 52\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $music_array = explode(' ', $music_string);\n\
    \    $music_beats = [];\n    foreach ($music_array as $key => $note) {\n     \
    \   $length = strlen($note);\n        if ($length === 1) {\n            array_push($music_beats,\
    \ 4);\n        } else {\n            array_push($music_beats, $length - 1);\n\
    \        }\n    }\n    return $music_beats;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphgbe_31j.php:30\n\
    Stack trace:\n#0 /tmp/tmphgbe_31j.php(37): test()\n#1 {main}\n  thrown in /tmp/tmphgbe_31j.php\
    \ on line 30\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n\tpreg_match_all('/\\.?\\|?/', $music_string,\
    \ $matches);\n\t$notes = $matches[0];\n\t$lengths = array();\n\tforeach ($notes\
    \ as $note) {\n\t\tswitch ($note) {\n\t\t\tcase '':\n\t\t\t\t$lengths[] = 4;\n\
    \t\t\t\tbreak;\n\t\t\tcase '|':\n\t\t\t\t$lengths[] = 2;\n\t\t\t\tbreak;\n\t\t\
    \tcase '.|':\n\t\t\t\t$lengths[] = 1;\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn $lengths;\n\
    }\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiemhnmjw.php:36\n\
    Stack trace:\n#0 /tmp/tmpiemhnmjw.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpiemhnmjw.php\
    \ on line 36\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    // your code goes here\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp47_sdk2a.php:20\n\
    Stack trace:\n#0 /tmp/tmp47_sdk2a.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp47_sdk2a.php\
    \ on line 20\n"
  timestamp: 1660028700
- exit_code: 0
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $ar = explode(' ', $music_string);\n\
    \    $ar2 = array();\n    $ar3 = array();\n    foreach ($ar as $key) {\n     \
    \   if ($key == 'o') {\n            $ar2[] = 4;\n        } elseif ($key == 'o|')\
    \ {\n            $ar2[] = 2;\n        } elseif ($key == '.|') {\n            $ar2[]\
    \ = 1;\n        }\n    }\n    $ar3 = array_values($ar2);\n    return $ar3;\n}\n\
    echo \"<pre>\";\nprint_r(parse_music(\"o o| .| o| o| .| .| .| .| o o\"));\necho\
    \ \"</pre>\";\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 4\n    [1] => 2\n    [2] => 1\n    [3] => 2\n\
    \    [4] => 2\n    [5] => 1\n    [6] => 1\n    [7] => 1\n    [8] => 1\n    [9]\
    \ => 4\n    [10] => 4\n)\n</pre>"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    // your code here\n}\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyhkbkmyy.php:19\n\
    Stack trace:\n#0 /tmp/tmpyhkbkmyy.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpyhkbkmyy.php\
    \ on line 19\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $music_array = array();\n    $notes\
    \ = explode(\" \", $music_string);\n    foreach ($notes as $note) {\n        if\
    \ ($note == \"o\") {\n            $note = 4;\n        } else if ($note == \"o|\"\
    ) {\n            $note = 2;\n        } else if ($note == \".|\") {\n         \
    \   $note = 1;\n        }\n        array_push($music_array, $note);\n    }\n \
    \   return $music_array;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu0v0rf4e.php:32\n\
    Stack trace:\n#0 /tmp/tmpu0v0rf4e.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpu0v0rf4e.php\
    \ on line 32\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n  $music_arr = explode(' ', $music_string);\n\
    \  $music_len = count($music_arr);\n  $music_beats = array();\n  for ($i = 0;\
    \ $i < $music_len; $i++) {\n    $note = $music_arr[$i];\n    if (strlen($note)\
    \ == 1) {\n      $music_beats[] = 4;\n    } else {\n      $music_beats[] = 2;\n\
    \    }\n  }\n  return $music_beats;\n}\n\n$music_string = \"o o| .| o| o| .| .|\
    \ .| .| o o\";\necho '<pre>';\nprint_r(parse_music($music_string));\necho '</pre>';\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 4\n    [1] => 2\n    [2] => 2\n    [3] => 2\n\
    \    [4] => 2\n    [5] => 2\n    [6] => 2\n    [7] => 2\n    [8] => 2\n    [9]\
    \ => 4\n    [10] => 4\n)\n</pre>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpozwt4x14.php:35\nStack trace:\n#0 /tmp/tmpozwt4x14.php(42): test()\n\
    #1 {main}\n  thrown in /tmp/tmpozwt4x14.php on line 35\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $music_notes = str_split($music_string);\n\
    \    $result = [];\n    foreach ($music_notes as $music_note) {\n        switch\
    \ ($music_note) {\n            case 'o':\n                $result[] = 4;\n   \
    \             break;\n            case 'o|':\n                $result[] = 2;\n\
    \                break;\n            case '.|':\n                $result[] = 1;\n\
    \                break;\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq39r98_m.php:37\n\
    Stack trace:\n#0 /tmp/tmpq39r98_m.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpq39r98_m.php\
    \ on line 37\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $duration_map = [\n        'o' => 4,\n\
    \        'o|' => 2,\n        '.|' => 1\n    ];\n    $notes = explode(' ', $music_string);\n\
    \    $duration = [];\n    foreach ($notes as $note) {\n        $duration[] = $duration_map[$note];\n\
    \    }\n    return $duration;\n}\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key \"\" in /tmp/tmplm_5c7oa.php on line 20\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmplm_5c7oa.php:30\nStack\
    \ trace:\n#0 /tmp/tmplm_5c7oa.php(37): test()\n#1 {main}\n  thrown in /tmp/tmplm_5c7oa.php\
    \ on line 30\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n}\n\nfunction candidate(...$args) {\n \
    \   return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpozq5dm12.php:19\n\
    Stack trace:\n#0 /tmp/tmpozq5dm12.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpozq5dm12.php\
    \ on line 19\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $array = str_split($music_string);\n\
    \    $sum = 0;\n    $num_of_musical_notes = 0;\n    $musical_notes = array();\n\
    \    foreach ($array as $key => $value) {\n        if ($value == '|') {\n    \
    \        $sum++;\n        } else if ($value == 'o') {\n            $sum += 4;\n\
    \        } else if ($value == '.') {\n            $sum += 1;\n        } else if\
    \ ($value == ' ') {\n            $musical_notes[$num_of_musical_notes] = $sum;\n\
    \            $num_of_musical_notes++;\n            $sum = 0;\n        }\n    }\n\
    \    $musical_notes[$num_of_musical_notes] = $sum;\n    return $musical_notes;\n\
    }\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkdlq27ej.php:37\n\
    Stack trace:\n#0 /tmp/tmpkdlq27ej.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpkdlq27ej.php\
    \ on line 37\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $pattern = '/((o)|(o\\|)|(\\|))/';\n\
    \    preg_match_all($pattern, $music_string, $matches);\n    foreach ($matches[0]\
    \ as $match) {\n        if ($match == 'o') {\n            $result[] = 4;\n   \
    \     } elseif ($match == 'o|') {\n            $result[] = 2;\n        } elseif\
    \ ($match == '|') {\n            $result[] = 1;\n        }\n    }\n    return\
    \ $result;\n}\n\necho json_encode(parse_music(\"o o| .| o| o| .| .| .| .| o o\"\
    ));\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "[4,4,1,1,4,1,4,1,1,1,1,1,4,4]\nWarning: Undefined variable $result in /tmp/tmppu8qs6ji.php\
    \ on line 23\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppu8qs6ji.php:32\n\
    Stack trace:\n#0 /tmp/tmppu8qs6ji.php(39): test()\n#1 {main}\n  thrown in /tmp/tmppu8qs6ji.php\
    \ on line 32\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9ngnrq03.php:20\n\
    Stack trace:\n#0 /tmp/tmp9ngnrq03.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp9ngnrq03.php\
    \ on line 20\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n\t$notes = str_split($music_string);\n\t\
    \n\t$out = array();\n\t$note_count = 0;\n\tforeach($notes as $note) {\n\t\tif\
    \ ($note == '.') {\n\t\t\tcontinue;\n\t\t} elseif ($note == 'o') {\n\t\t\t$note_count++;\n\
    \t\t} elseif ($note == '|') {\n\t\t\t$out[] = $note_count;\n\t\t\t$note_count\
    \ = 0;\n\t\t}\n\t}\n\t\n\treturn $out;\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpptlvmt_b.php:36\n\
    Stack trace:\n#0 /tmp/tmpptlvmt_b.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpptlvmt_b.php\
    \ on line 36\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $result = [];\n    $note = [\n    \
    \    'o' => 4,\n        'o|' => 2,\n        '.|' => 1\n    ];\n    $music_string\
    \ = explode(' ', $music_string);\n    foreach ($music_string as $item) {\n   \
    \     $result[] = $note[$item];\n    }\n    return $result;\n}\n\n$result = parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\");\necho '<pre>';\nprint_r($result);\necho '</pre>';\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 4\n    [1] => 2\n    [2] => 1\n    [3] => 2\n\
    \    [4] => 2\n    [5] => 1\n    [6] => 1\n    [7] => 1\n    [8] => 1\n    [9]\
    \ => 4\n    [10] => 4\n)\n</pre>\nWarning: Undefined array key \"\" in /tmp/tmp1tdgw49h.php\
    \ on line 20\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1tdgw49h.php:34\n\
    Stack trace:\n#0 /tmp/tmp1tdgw49h.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp1tdgw49h.php\
    \ on line 34\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $count=0;\n    $arr=array();\n    $music_string=explode(\"\
    \ \",$music_string);\n    foreach($music_string as $value){\n      $arr[]=substr_count($value,\
    \ \"|\")+1;\n    }\n    return $arr;\n}\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphhs8t58p.php:25\n\
    Stack trace:\n#0 /tmp/tmphhs8t58p.php(32): test()\n#1 {main}\n  thrown in /tmp/tmphhs8t58p.php\
    \ on line 25\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n  $notes = ['o' => 4, 'o|' => 2, '.|' =>\
    \ 1];\n  $beats = [];\n  foreach (explode(' ', $music_string) as $note) {\n  \
    \  $beats[] = $notes[$note];\n  }\n  return $beats;\n}\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key \"\" in /tmp/tmp1wei_ngk.php on line 15\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1wei_ngk.php:24\nStack\
    \ trace:\n#0 /tmp/tmp1wei_ngk.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp1wei_ngk.php\
    \ on line 24\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $result = [];\n    $string = str_replace('\
    \ ', '', $music_string);\n    $notes = explode('|', $string);\n    foreach ($notes\
    \ as $note) {\n        if ($note == 'o') {\n            $result[] = 4;\n     \
    \   } elseif ($note == 'o.') {\n            $result[] = 2;\n        } elseif ($note\
    \ == '.o') {\n            $result[] = 1;\n        }\n    }\n    return $result;\n\
    }\n\necho '<pre>';\nvar_dump(parse_music(\"o o| .| o| o| .| .| .| .| o o\"));\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>array(2) {\n  [0]=>\n  int(4)\n  [1]=>\n  int(4)\n}\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpl39tv793.php:35\nStack trace:\n\
    #0 /tmp/tmpl39tv793.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpl39tv793.php\
    \ on line 35\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $elements = array('o' => 4, 'o|' =>\
    \ 2, '.|' => 1);\n    $notes = str_split($music_string);\n    $musical_notes =\
    \ array();\n    $cnt = 0;\n    for ($i = 0; $i < count($notes); $i++) {\n    \
    \    if ($notes[$i] != ' ') {\n            $cnt++;\n        } else {\n       \
    \     $musical_notes[] = $elements[substr($music_string, $i - $cnt, $cnt)];\n\
    \            $cnt = 0;\n        }\n    }\n    $musical_notes[] = $elements[substr($music_string,\
    \ $i - $cnt, $cnt)];\n    return $musical_notes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key \"\" in /tmp/tmprikr0dja.php on line 24\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmprikr0dja.php:33\nStack\
    \ trace:\n#0 /tmp/tmprikr0dja.php(40): test()\n#1 {main}\n  thrown in /tmp/tmprikr0dja.php\
    \ on line 33\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n\t$music_string = preg_replace(\"/\\s+/\"\
    , \"\", $music_string);\n\t$arr1 = explode(\"o\", $music_string);\n\t$result =\
    \ array();\n\tforeach ($arr1 as $item) {\n\t\tif ($item === '') {\n\t\t\tarray_push($result,\
    \ 4);\n\t\t} else {\n\t\t\t$arr2 = explode(\"|\", $item);\n\t\t\tforeach ($arr2\
    \ as $item2) {\n\t\t\t\tif ($item2 === '') {\n\t\t\t\t\tarray_push($result, 2);\n\
    \t\t\t\t} else {\n\t\t\t\t\tarray_push($result, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphumvnhxi.php:37\n\
    Stack trace:\n#0 /tmp/tmphumvnhxi.php(44): test()\n#1 {main}\n  thrown in /tmp/tmphumvnhxi.php\
    \ on line 37\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n  $arr = str_split($music_string);\n  $new_arr\
    \ = [];\n  foreach ($arr as $value) {\n    if ($value == '.') {\n      $new_arr[]\
    \ = 1;\n    } elseif ($value == 'o') {\n      $new_arr[] = 4;\n    } elseif ($value\
    \ == '|') {\n      $new_arr[] = 2;\n    }\n  }\n  return $new_arr;\n}\n\necho\
    \ \"<pre>\";\nprint_r(parse_music(\"o o| .| o| o| .| .| .| .| o o\"));\necho \"\
    </pre>\";\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 4\n    [1] => 4\n    [2] => 2\n    [3] => 1\n\
    \    [4] => 2\n    [5] => 4\n    [6] => 2\n    [7] => 4\n    [8] => 2\n    [9]\
    \ => 1\n    [10] => 2\n    [11] => 1\n    [12] => 2\n    [13] => 1\n    [14] =>\
    \ 2\n    [15] => 1\n    [16] => 2\n    [17] => 4\n    [18] => 4\n)\n</pre>\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpnefkdx37.php:36\nStack trace:\n\
    #0 /tmp/tmpnefkdx37.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpnefkdx37.php\
    \ on line 36\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    // TODO: implement this function\n\
    }\nfunction candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpof2uofjp.php:19\n\
    Stack trace:\n#0 /tmp/tmpof2uofjp.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpof2uofjp.php\
    \ on line 19\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n}\nvar_dump(parse_music(\"o o| .| o| o|\
    \ .| .| .| .| o o\"));\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "NULL\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq8gzq97z.php:19\n\
    Stack trace:\n#0 /tmp/tmpq8gzq97z.php(26): test()\n#1 {main}\n  thrown in /tmp/tmpq8gzq97z.php\
    \ on line 19\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $notes = [\n        'o' => 4,\n   \
    \     'o|' => 2,\n        '.|' => 1\n    ];\n    $beats = [];\n    foreach (explode('\
    \ ', $music_string) as $note) {\n        $beats[] = $notes[$note];\n    }\n  \
    \  return $beats;\n}\n\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key \"\" in /tmp/tmps8_5et4j.php on line 19\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmps8_5et4j.php:29\nStack\
    \ trace:\n#0 /tmp/tmps8_5et4j.php(36): test()\n#1 {main}\n  thrown in /tmp/tmps8_5et4j.php\
    \ on line 29\n"
  timestamp: 1660028700
- exit_code: 0
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $music_split = explode(' ', $music_string);\n\
    \    $notes = array();\n    foreach ($music_split as $note) {\n        if ($note\
    \ == 'o') {\n            $notes[] = 4;\n        } elseif ($note == 'o|') {\n \
    \           $notes[] = 2;\n        } elseif ($note == '.|') {\n            $notes[]\
    \ = 1;\n        }\n    }\n    return $notes;\n}\necho '<pre>';\nprint_r(parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\"));\necho '</pre>';\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 4\n    [1] => 2\n    [2] => 1\n    [3] => 2\n\
    \    [4] => 2\n    [5] => 1\n    [6] => 1\n    [7] => 1\n    [8] => 1\n    [9]\
    \ => 4\n    [10] => 4\n)\n</pre>"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n\t$chars = str_split($music_string);\n\t\
    $result = [];\n\t$prev = \"\";\n\tforeach ($chars as $char) {\n\t\tif ($char ===\
    \ \"|\") {\n\t\t\tif ($prev === \".\") {\n\t\t\t\t$result[] = 1;\n\t\t\t} elseif\
    \ ($prev === \"o\") {\n\t\t\t\t$result[] = 2;\n\t\t\t}\n\t\t} elseif ($char ===\
    \ \" \") {\n\t\t\tif ($prev === \"o\") {\n\t\t\t\t$result[] = 4;\n\t\t\t}\n\t\t\
    }\n\t\t$prev = $char;\n\t}\n\treturn $result;\n}\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv5p2_19g.php:37\n\
    Stack trace:\n#0 /tmp/tmpv5p2_19g.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpv5p2_19g.php\
    \ on line 37\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $notes = ['o' => 4, 'o|' => 2, '.|'\
    \ => 1];\n    $chars = str_split($music_string);\n    $notes_array = [];\n   \
    \ $note = '';\n    for ($i = 0; $i < count($chars); $i++) {\n        $note .=\
    \ $chars[$i];\n        if (array_key_exists($note, $notes)) {\n            $notes_array[]\
    \ = $notes[$note];\n            $note = '';\n        }\n    }\n    return $notes_array;\n\
    }\nvar_dump(parse_music(\"o o| .| o| o| .| .| .| .| o o\"));\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "array(1) {\n  [0]=>\n  int(4)\n}\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpmy9pu48e.php:32\nStack trace:\n#0 /tmp/tmpmy9pu48e.php(38):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpmy9pu48e.php on line 32\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $beats = array();\n    $currentNote\
    \ = \"\";\n    for ($i = 0; $i < strlen($music_string); $i++) {\n        $currentChar\
    \ = $music_string[$i];\n        if ($currentChar == \" \") {\n            if ($currentNote\
    \ != \"\") {\n                array_push($beats, strlen($currentNote));\n    \
    \            $currentNote = \"\";\n            }\n        } else if ($currentChar\
    \ == \"|\") {\n            if ($music_string[$i - 1] == \"o\") {\n           \
    \     $currentNote .= \"o\";\n            }\n        } else {\n            $currentNote\
    \ .= $currentChar;\n        }\n    }\n    if ($currentNote != \"\") {\n      \
    \  array_push($beats, strlen($currentNote));\n    }\n    return $beats;\n}\n\n\
    function candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1,\
    \ 1, 1, 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o|\
    \ o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2,\
    \ 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9prfznvn.php:41\n\
    Stack trace:\n#0 /tmp/tmp9prfznvn.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp9prfznvn.php\
    \ on line 41\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $result = [];\n    // Write your code\
    \ here\n    return $result;\n}\nfunction candidate(...$args) {\n    return parse_music(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(\"\") !== array()) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(\"o o o o\") !== array(4,\
    \ 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\".|\
    \ .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2, 1, 1, 4, 4, 4,\
    \ 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| .| o|\
    \ .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgn9ewx07.php:22\n\
    Stack trace:\n#0 /tmp/tmpgn9ewx07.php(28): test()\n#1 {main}\n  thrown in /tmp/tmpgn9ewx07.php\
    \ on line 22\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n  $notes = str_split($music_string);\n\
    \  $parsed_notes = [];\n  foreach ($notes as $key => $note) {\n    if (isset($notes[$key+1]))\
    \ {\n      if ($note === 'o' && $notes[$key+1] === ' ') {\n        $parsed_notes[]\
    \ = 4;\n      } elseif ($note === 'o' && $notes[$key+1] === '|') {\n        $parsed_notes[]\
    \ = 2;\n      } elseif ($note === '.' && $notes[$key+1] === '|') {\n        $parsed_notes[]\
    \ = 1;\n      }\n    }\n  }\n  return $parsed_notes;\n}\n\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpafp4qi_q.php:34\n\
    Stack trace:\n#0 /tmp/tmpafp4qi_q.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpafp4qi_q.php\
    \ on line 34\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n  $parsed_string = str_replace(array('o|','o'),\
    \ array('!','.|'), $music_string);\n  $parsed_array = explode(' ', $parsed_string);\n\
    \  $result = array();\n  foreach ($parsed_array as $i) {\n    if ($i == '.') {\n\
    \      $result[] = 1;\n    } elseif ($i == '|') {\n      $result[] = 2;\n    }\
    \ elseif ($i == '!') {\n      $result[] = 4;\n    } elseif ($i == 'o') {\n   \
    \   $result[] = 8;\n    }\n  }\n  return $result;\n}\nprint_r(parse_music(\"o\
    \ o| .| o| o| .| .| .| .| o o\"));\n\nfunction candidate(...$args) {\n    return\
    \ parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\"\
    ) !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 4\n    [1] => 4\n    [2] => 4\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp23qrisnv.php:36\nStack trace:\n#0 /tmp/tmp23qrisnv.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp23qrisnv.php on line 36\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n  $music_string_array = explode(\" \",\
    \ $music_string);\n  $notes_array = array();\n  $i = 0;\n  $m = count($music_string_array);\n\
    \  while ($i < $m) {\n    $current_note = $music_string_array[$i];\n    $note_length\
    \ = strlen($current_note);\n    if ($note_length == 1) {\n      $notes_array[]\
    \ = 4;\n    } else {\n      $notes_array[] = ($current_note[$note_length - 1]\
    \ == \"|\") ? 2 : 1;\n    }\n    $i++;\n  }\n  return $notes_array;\n}\n\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Uninitialized string offset -1 in /tmp/tmpxjmig8az.php on line\
    \ 22\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxjmig8az.php:34\n\
    Stack trace:\n#0 /tmp/tmpxjmig8az.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpxjmig8az.php\
    \ on line 34\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n\n}\n\nfunction candidate(...$args) {\n\
    \    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9ngnrq03.php:20\n\
    Stack trace:\n#0 /tmp/tmp9ngnrq03.php(27): test()\n#1 {main}\n  thrown in /tmp/tmp9ngnrq03.php\
    \ on line 20\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $notes = str_split($music_string);\n\
    \    $result = [];\n    foreach ($notes as $note) {\n        if ($note == 'o')\
    \ {\n            $result[] = 4;\n        } elseif ($note == 'o|') {\n        \
    \    $result[] = 2;\n        } elseif ($note == '.|') {\n            $result[]\
    \ = 1;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpopm4ee4u.php:32\n\
    Stack trace:\n#0 /tmp/tmpopm4ee4u.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpopm4ee4u.php\
    \ on line 32\n"
  timestamp: 1660028700
- exit_code: 255
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n\t$music_array = array();\n\t$music_array\
    \ = str_split($music_string);\n\t$music_string_replaced = preg_replace('/[\\s+]/',\
    \ '', $music_string);\n\n\t$music_string_cleaned = preg_replace('/[^a-zA-Z0-9\\\
    s+]/', '', $music_string_replaced);\n\t$music_string_split = str_split($music_string_cleaned);\n\
    \t$final_array = array();\n\tfor ($i = 0; $i < count($music_string_split); $i++)\
    \ {\n\t\tif ($music_string_split[$i] == 'o') {\n\t\t\t$final_array[] = 4;\n\t\t\
    } elseif ($music_string_split[$i] == 'o|') {\n\t\t\t$final_array[] = 2;\n\t\t\
    } elseif ($music_string_split[$i] == '.|') {\n\t\t\t$final_array[] = 1;\n\t\t\
    }\n\t}\n\treturn $final_array;\n}\n$test_music = 'o o| .| o| o| .| .| .| .| o\
    \ o';\nprint_r(parse_music($test_music));\necho \"<br>\";\nfunction candidate(...$args)\
    \ {\n    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 4\n    [1] => 4\n    [2] => 4\n    [3] => 4\n    [4]\
    \ => 4\n    [5] => 4\n)\n<br>\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpgg2cioxe.php:40\nStack trace:\n#0 /tmp/tmpgg2cioxe.php(45): test()\n\
    #1 {main}\n  thrown in /tmp/tmpgg2cioxe.php on line 40\n"
  timestamp: 1660028700
- exit_code: 0
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n    $whole_note = 4;\n    $half_note =\
    \ 2;\n    $quater_note = 1;\n    $notes = explode(' ', $music_string);\n    $result\
    \ = [];\n    foreach ($notes as $note) {\n        if ($note == 'o') {\n      \
    \      $result[] = $whole_note;\n        } else if ($note == 'o|') {\n       \
    \     $result[] = $half_note;\n        } else if ($note == '.|') {\n         \
    \   $result[] = $quater_note;\n        }\n    }\n    return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return parse_music(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(\"\") !== array()) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"o| o| .| .|\
    \ o o o o\") !== array(2, 2, 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(\"o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2,\
    \ 4, 2)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028700
- exit_code: 0
  program: "<?php\n// Input to this function is a string representing musical notes\
    \ in a special ASCII format.\n// Your task is to parse this string and return\
    \ array of integers corresponding to how many beats does each\n// not last.\n\
    // Here is a legend:\n// 'o' - whole note, lasts four beats\n// 'o|' - half note,\
    \ lasts two beats\n// '.|' - quater note, lasts one beat\n// >>> parse_music(\"\
    o o| .| o| o| .| .| .| .| o o\")\n// array(4, 2, 1, 2, 2, 1, 1, 1, 1, 4, 4)\n\
    function parse_music($music_string) {\n\t$notes = preg_split('/\\s+/', $music_string);\n\
    \t$result = array();\n\tforeach ($notes as $note) {\n\t\tswitch ($note) {\n\t\t\
    \tcase 'o':\n\t\t\t\t$result[] = 4;\n\t\t\t\tbreak;\n\t\t\tcase 'o|':\n\t\t\t\t\
    $result[] = 2;\n\t\t\t\tbreak;\n\t\t\tcase '.|':\n\t\t\t\t$result[] = 1;\n\t\t\
    \t\tbreak;\n\t\t}\n\t}\n\treturn $result;\n}\nfunction candidate(...$args) {\n\
    \    return parse_music(...$args);\n}\n\nfunction test(): void {\n    if (candidate(\"\
    \") !== array()) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o o o o\") !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(\".| .| .| .|\") !== array(1, 1, 1, 1)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(\"o| o| .| .| o o o o\") !== array(2, 2,\
    \ 1, 1, 4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
    o| .| o| .| o o| o o|\") !== array(2, 1, 2, 1, 4, 2, 4, 2)) { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028700
