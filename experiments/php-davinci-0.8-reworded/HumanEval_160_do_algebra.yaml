name: HumanEval_160_do_algebra
language: php
prompt: "<?php\n// Given two arrays operator, and operand. The first array has basic\
  \ algebra operations, and \n// the second array is an array of integers. Use the\
  \ two given arrays to build the algebric \n// expression and return the evaluation\
  \ of this expression.\n// The basic algebra operations:\n// Addition ( + ) \n//\
  \ Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division ( // ) \n// Exponentiation\
  \ ( ** ) \n// Example:\n// operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n//\
  \ result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n// The length of operator\
  \ array is equal to the length of operand array minus one.\n// Operand is an array\
  \ of of non-negative integers.\n// Operator array has at least one operator, and\
  \ operand array has at least two operands.\nfunction do_algebra($operator, $operand)\
  \ {\n"
tests: "function candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
  \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
  +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
  \ Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    if(count($operator) + 1 != count($operand)){\n        return \"\
    Incorrect arguments\";\n    }\n    $result = $operand[0];\n    for($i = 0; $i\
    \ < count($operator); $i++){\n        switch($operator[$i]){\n            case\
    \ '+':\n                $result += $operand[$i + 1];\n                break;\n\
    \            case '-':\n                $result -= $operand[$i + 1];\n       \
    \         break;\n            case '*':\n                $result *= $operand[$i\
    \ + 1];\n                break;\n            case '//':\n                $result\
    \ = floor($result / $operand[$i + 1]);\n                break;\n            case\
    \ '**':\n                $result = pow($result, $operand[$i + 1]);\n         \
    \       break;\n            default:\n                return \"Unknown operator\"\
    ;\n        }\n    }\n    return $result;\n}\necho do_algebra(['+', '*', '-'],\
    \ [2, 3, 4, 5]);\necho \"\\n\";\necho do_algebra(['//', '**'], [10, 2, 3]);\n\
    echo \"\\n\";\necho do_algebra(['+', '*', '-', '**'], [2, 3, 4, 5, 6]);\necho\
    \ \"\\n\";\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6]);\necho \"\\n\";\n\
    echo do_algebra(['=='], [2, 3, 4, 5, 6]);\necho \"\\n\";\necho do_algebra(['*',\
    \ '-'], [2, 3, 4, 5]);\necho \"\\n\";", "    $operator_index = 0;\n    $result\
    \ = $operand[0];\n    for ($i = 1; $i < count($operand); $i++) {\n        $op\
    \ = $operator[$operator_index];\n        switch ($op) {\n            case '+':\n\
    \                $result += $operand[$i];\n                break;\n          \
    \  case '-':\n                $result -= $operand[$i];\n                break;\n\
    \            case '*':\n                $result *= $operand[$i];\n           \
    \     break;\n            case '//':\n                $result = floor($result\
    \ / $operand[$i]);\n                break;\n            case '**':\n         \
    \       $result = pow($result, $operand[$i]);\n                break;\n      \
    \  }\n        $operator_index++;\n    }\n    return $result;\n}\n\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]); // 9\necho PHP_EOL;\necho do_algebra(['+', '*', '//',\
    \ '-'], [3, 4, 2, 5]); // 0\necho PHP_EOL;\necho do_algebra(['+', '*', '//', '-'],\
    \ [5, 5, 2, 5]); // 5\necho PHP_EOL;\necho do_algebra(['*', '//', '**'], [4, 2,\
    \ 2]); // 16\necho PHP_EOL;\necho do_algebra(['*', '//', '**'], [4, 2, 2, 2]);\
    \ // 256\necho PHP_EOL;\necho do_algebra(['*', '//', '**'], [2, 4, 2, 4]); //\
    \ 2\necho PHP_EOL;", "    if (empty($operator) || empty($operand)) {\n       \
    \ return null;\n    }\n    if (count($operator) != count($operand) - 1) {\n  \
    \      return null;\n    }\n    $result = $operand[0];\n    $len = count($operator);\n\
    \    for ($i = 0; $i < $len; $i++) {\n        switch ($operator[$i]) {\n     \
    \       case '+':\n                $result += $operand[$i + 1];\n            \
    \    break;\n            case '-':\n                $result -= $operand[$i + 1];\n\
    \                break;\n            case '*':\n                $result *= $operand[$i\
    \ + 1];\n                break;\n            case '//':\n                $result\
    \ = floor($result / $operand[$i + 1]);\n                break;\n            case\
    \ '**':\n                $result = pow($result, $operand[$i + 1]);\n         \
    \       break;\n            default:\n                break;\n        }\n    }\n\
    \    return $result;\n}\n$operator = ['+', '*', '-'];\n$operand = [2, 3, 4, 5];\n\
    var_dump(do_algebra($operator, $operand));", "    $result = $operand[0];\n   \
    \ for ($i = 0; $i < count($operator); $i++) {\n        if ($operator[$i] == '+')\
    \ {\n            $result += $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == '-') {\n            $result -= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == '*') {\n            $result *= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == '//') {\n            $result /= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == '**') {\n            $result **= $operand[$i + 1];\n        }\n    }\n  \
    \  return $result;\n}\necho do_algebra([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) .\
    \ PHP_EOL;", "  $result = $operand[0];\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    switch ($operator[$i]) {\n      case '+':\n        $result += $operand[$i\
    \ + 1];\n        break;\n      case '-':\n        $result -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $result *= $operand[$i + 1];\n     \
    \   break;\n      case '//':\n        $result = floor($result / $operand[$i +\
    \ 1]);\n        break;\n      case '**':\n        $result = pow($result, $operand[$i\
    \ + 1]);\n        break;\n    }\n  }\n  return $result;\n}", "    $result = $operand[0];\n\
    \    for ($i = 0; $i < count($operator); $i++) {\n        if ($operator[$i] ==\
    \ \"+\") {\n            $result += $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == \"-\") {\n            $result -= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == \"*\") {\n            $result *= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == \"//\") {\n            $result /= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == \"**\") {\n            $result **= $operand[$i + 1];\n        }\n    }\n\
    \    return $result;\n}\n\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5]) . \"\
    \\n\"; // => 9\necho do_algebra(['+', '//', '*'], [5, 2, 4, 2]); // => 10\necho\
    \ do_algebra(['+', '-', '//', '*'], [5, 3, 2, 4, 2]); // => 10\necho do_algebra(['+',\
    \ '-', '//', '*'], [1, 2, 3, 4, 5]); // => 9", "    $result = 0;\n    if(count($operator)\
    \ == 0 || count($operand) == 0) {\n        return $result;\n    }\n    else {\n\
    \        for($i = 0; $i < count($operator); $i++) {\n            if($i == 0) {\n\
    \                $result = $operand[$i];\n            }\n            if($operator[$i]\
    \ == '+') {\n                $result += $operand[$i + 1];\n            }\n   \
    \         else if($operator[$i] == '-') {\n                $result -= $operand[$i\
    \ + 1];\n            }\n            else if($operator[$i] == '*') {\n        \
    \        $result *= $operand[$i + 1];\n            }\n            else if($operator[$i]\
    \ == '//') {\n                $result = floor($result / $operand[$i + 1]);\n \
    \           }\n            else if($operator[$i] == '**') {\n                $result\
    \ = pow($result, $operand[$i + 1]);\n            }\n        }\n        return\
    \ $result;\n    }\n}\nprint_r(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) . PHP_EOL);\n\
    print_r(do_algebra(['+', '//', '*', '-'], [4, 2, 4, 4, 5]) . PHP_EOL);\nprint_r(do_algebra(['*',\
    \ '**', '-'], [2, 3, 4, 5]) . PHP_EOL);", "    $ans = $operand[0];\n    $count\
    \ = 0;\n    for($i = 1; $i < count($operand); $i++){\n        switch($operator[$count]){\n\
    \            case '+':\n                $ans += $operand[$i];\n              \
    \  break;\n            case '-':\n                $ans -= $operand[$i];\n    \
    \            break;\n            case '*':\n                $ans *= $operand[$i];\n\
    \                break;\n            case '//':\n                $ans = intval($ans\
    \ / $operand[$i]);\n                break;\n            case '**':\n         \
    \       $ans = pow($ans, $operand[$i]);\n                break;\n        }\n \
    \       $count++;\n    }\n    return $ans;\n}", "  $result = array_shift($operand);\n\
    \  foreach ($operator as $key => $value) {\n    $result = $value($result, $operand[$key]);\n\
    \  }\n  return $result;\n}", "  // Write your code here\n  $result = array_shift($operand);\n\
    \  foreach($operator as $key => $value){\n    $num = array_shift($operand);\n\
    \    switch($value){\n      case '+':\n        $result += $num;\n        break;\n\
    \      case '-':\n        $result -= $num;\n        break;\n      case '*':\n\
    \        $result *= $num;\n        break;\n      case '//':\n        $result =\
    \ floor($result / $num);\n        break;\n      case '**':\n        $result =\
    \ pow($result, $num);\n        break;\n    }\n  }\n  return $result;\n}\nprint_r(do_algebra(['*',\
    \ '-', '//'], [2, 3, 6, 8]));", "    $sum = $operand[0];\n    for($i = 0; $i <\
    \ count($operator); $i++){\n        switch($operator[$i]){\n            case '+':\n\
    \                $sum += $operand[$i+1];\n                break;\n           \
    \ case '-':\n                $sum -= $operand[$i+1];\n                break;\n\
    \            case '*':\n                $sum *= $operand[$i+1];\n            \
    \    break;\n            case '//':\n                $sum = floor($sum / $operand[$i+1]);\n\
    \                break;\n            case '**':\n                $sum = pow($sum,\
    \ $operand[$i+1]);\n                break;\n        }\n    }\n    return $sum;\n\
    }", "    $result = $operand[0];\n    for ($i = 0; $i < count($operator); $i++)\
    \ {\n        switch ($operator[$i]) {\n            case '+':\n               \
    \ $result += $operand[$i + 1];\n                break;\n            case '-':\n\
    \                $result -= $operand[$i + 1];\n                break;\n      \
    \      case '*':\n                $result *= $operand[$i + 1];\n             \
    \   break;\n            case '//':\n                $result = floor($result /\
    \ $operand[$i + 1]);\n                break;\n            case '**':\n       \
    \         $result = pow($result, $operand[$i + 1]);\n                break;\n\
    \        }\n    }\n    return $result;\n}", "  $res = $operand[0];\n  for ($i\
    \ = 0; $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n      case\
    \ '+':\n        $res += $operand[$i + 1];\n        break;\n      case '-':\n \
    \       $res -= $operand[$i + 1];\n        break;\n      case '*':\n        $res\
    \ *= $operand[$i + 1];\n        break;\n      case '//':\n        $res = floor($res\
    \ / $operand[$i + 1]);\n        break;\n      case '**':\n        $res = pow($res,\
    \ $operand[$i + 1]);\n        break;\n    }\n  }\n  return $res;\n}\n\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]) . PHP_EOL; // 9\necho do_algebra(['//', '*', '+'],\
    \ [2, 3, 4, 5]) . PHP_EOL; // 9\necho do_algebra(['//', '**', '*'], [2, 3, 4,\
    \ 5]) . PHP_EOL; // 6", "    $length = count($operator);\n    $opr = $operand[0];\n\
    \    for($i = 0; $i < $length; $i++) {\n        switch($operator[$i]) {\n    \
    \        case '+':\n                $opr += $operand[$i + 1];\n              \
    \  break;\n            case '-':\n                $opr -= $operand[$i + 1];\n\
    \                break;\n            case '*':\n                $opr *= $operand[$i\
    \ + 1];\n                break;\n            case '//':\n                $opr\
    \ = floor($opr / $operand[$i + 1]);\n                break;\n            case\
    \ '**':\n                $opr = pow($opr, $operand[$i + 1]);\n               \
    \ break;\n        }\n    }\n    return $opr;\n}\n$operator = ['+', '*', '-'];\n\
    $operand = [2, 3, 4, 5];\nvar_dump(do_algebra($operator, $operand));\n$operator\
    \ = ['//', '**', '-'];\n$operand = [16, 3, 5, 10];\nvar_dump(do_algebra($operator,\
    \ $operand));\n$operator = ['*', '+', '//'];\n$operand = [2, 3, 6, 9];\nvar_dump(do_algebra($operator,\
    \ $operand));", "  \n}\nprint_r(do_algebra(['+', '*', '-'], [2, 3, 4, 5])); //\
    \ return: 9", "    \n    if (count($operator) !== count($operand) - 1) {\n   \
    \     return;\n    }\n\n    $result = $operand[0];\n    for ($i = 0; $i < count($operator);\
    \ $i++) {\n        switch ($operator[$i]) {\n            case '+':\n         \
    \       $result += $operand[$i + 1];\n                break;\n            case\
    \ '-':\n                $result -= $operand[$i + 1];\n                break;\n\
    \            case '*':\n                $result *= $operand[$i + 1];\n       \
    \         break;\n            case '//':\n                $result = floor($result\
    \ / $operand[$i + 1]);\n                break;\n            case '**':\n     \
    \           $result = pow($result, $operand[$i + 1]);\n                break;\n\
    \        }\n    }\n    return $result;\n}\n\n$operator = ['+', '*', '-'];\n$operand\
    \ = [2, 3, 4, 5];\necho do_algebra($operator, $operand);", "    $result = 0;\n\
    \    for ($i = 0; $i < count($operator); $i++) {\n        if ($i == 0) {\n   \
    \         $result = $operand[$i];\n        }\n        switch ($operator[$i]) {\n\
    \            case '+':\n                $result += $operand[$i + 1];\n       \
    \         break;\n            case '-':\n                $result -= $operand[$i\
    \ + 1];\n                break;\n            case '*':\n                $result\
    \ *= $operand[$i + 1];\n                break;\n            case '//':\n     \
    \           $result /= $operand[$i + 1];\n                break;\n           \
    \ case '**':\n                $result **= $operand[$i + 1];\n                break;\n\
    \        }\n    }\n    return $result;\n}\n$operator = [\"+\", \"*\", \"-\"];\n\
    $operand = [2, 3, 4, 5];\necho do_algebra($operator, $operand);", "    $result\
    \ = $operand[0];\n    for ($i = 0; $i < count($operator); $i++) {\n        switch\
    \ ($operator[$i]) {\n            case '+':\n                $result += $operand[$i\
    \ + 1];\n                break;\n            case '-':\n                $result\
    \ -= $operand[$i + 1];\n                break;\n            case '*':\n      \
    \          $result *= $operand[$i + 1];\n                break;\n            case\
    \ '//':\n                $result = (int)($result / $operand[$i + 1]);\n      \
    \          break;\n            case '**':\n                $result = (int)pow($result,\
    \ $operand[$i + 1]);\n                break;\n        }\n    }\n    return $result;\n\
    }\n\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5]);", "    $operation = \"\"\
    ;\n    $arr_length = count($operand);\n    for ($i = 0; $i < $arr_length - 1;\
    \ $i++) {\n        $operation .= $operand[$i];\n        $operation .= $operator[$i];\n\
    \    }\n    $operation .= $operand[$arr_length - 1];\n    return eval(\"return\
    \ $operation;\");\n}", "   // Write your code here\n   $total = $operand[0];\n\
    \   for($i = 0; $i < count($operator); $i++){\n       switch($operator[$i]){\n\
    \           case '+':\n               $total += $operand[$i+1];\n            \
    \   break;\n           case '-':\n               $total -= $operand[$i+1];\n \
    \              break;\n           case '*':\n               $total *= $operand[$i+1];\n\
    \               break;\n           case '//':\n               $total = floor($total\
    \ / $operand[$i+1]);\n               break;\n           case '**':\n         \
    \      $total = pow($total, $operand[$i+1]);\n               break;\n       }\n\
    \   }\n   return $total;\n}\n", "  $op = array_shift($operator);\n  $res = array_shift($operand);\n\
    \  while(count($operator) > 0){\n    $op = array_shift($operator);\n    $tmp =\
    \ array_shift($operand);\n    switch($op){\n      case '+':\n        $res += $tmp;\n\
    \        break;\n      case '-':\n        $res -= $tmp;\n        break;\n    \
    \  case '*':\n        $res *= $tmp;\n        break;\n      case '//':\n      \
    \  $res /= $tmp;\n        break;\n      case '**':\n        $res **= $tmp;\n \
    \       break;\n    }\n  }\n  return $res;\n}\n\necho do_algebra(['+', '*', '-'],\
    \ [2, 3, 4, 5]);", "    $result = $operand[0];\n    for ($i = 0; $i < count($operator);\
    \ $i++) {\n        switch ($operator[$i]) {\n            case '+':\n         \
    \       $result += $operand[$i + 1];\n                break;\n            case\
    \ '-':\n                $result -= $operand[$i + 1];\n                break;\n\
    \            case '*':\n                $result *= $operand[$i + 1];\n       \
    \         break;\n            case '//':\n                $result /= $operand[$i\
    \ + 1];\n                break;\n            case '**':\n                $result\
    \ **= $operand[$i + 1];\n                break;\n        }\n    }\n    return\
    \ $result;\n}\n\n$operator = ['+', '*', '-'];\n$operand = [2, 3, 4, 5];\n\necho\
    \ do_algebra($operator, $operand);", "  // Write your code here...\n}", "  $result\
    \ = $operand[0];\n  for ($i = 0; $i < count($operator); $i++) {\n    switch ($operator[$i])\
    \ {\n      case '+':\n        $result += $operand[$i + 1];\n        break;\n \
    \     case '-':\n        $result -= $operand[$i + 1];\n        break;\n      case\
    \ '*':\n        $result *= $operand[$i + 1];\n        break;\n      case '//':\n\
    \        $result = floor($result / $operand[$i + 1]);\n        break;\n      case\
    \ '**':\n        $result = pow($result, $operand[$i + 1]);\n        break;\n \
    \   }\n  }\n  return $result;\n}\n", "  \n}\n", "    $result = 0;\n    $result\
    \ = $operand[0];\n    $i = 0;\n    foreach($operator as $op){\n        switch($op){\n\
    \            case '+':\n                $result += $operand[$i+1];\n         \
    \       break;\n            case '-':\n                $result -= $operand[$i+1];\n\
    \                break;\n            case '*':\n                $result *= $operand[$i+1];\n\
    \                break;\n            case '//':\n                $result = intval($result\
    \ / $operand[$i+1]);\n                break;\n            case '**':\n       \
    \         $result = pow($result, $operand[$i+1]);\n                break;\n  \
    \      }\n        $i++;\n    }\n    return $result;\n}", "  // Your code goes\
    \ here!\n}\n", "  // Your code here...\n}", "  //your code here\n}\n", "  $result\
    \ = $operand[0];\n  for ($i = 0; $i < count($operator); $i++) {\n    switch ($operator[$i])\
    \ {\n      case '+':\n        $result += $operand[$i + 1];\n        break;\n \
    \     case '-':\n        $result -= $operand[$i + 1];\n        break;\n      case\
    \ '*':\n        $result *= $operand[$i + 1];\n        break;\n      case '//':\n\
    \        $result = floor($result / $operand[$i + 1]);\n        break;\n      case\
    \ '**':\n        $result = $result ** $operand[$i + 1];\n        break;\n    }\n\
    \  }\n  return $result;\n}\n", "  $result = $operand[0];\n  for ($i = 0; $i <\
    \ count($operator); $i++) {\n    if ($operator[$i] == '+') {\n      $result +=\
    \ $operand[$i + 1];\n    } else if ($operator[$i] == '-') {\n      $result -=\
    \ $operand[$i + 1];\n    } else if ($operator[$i] == '*') {\n      $result *=\
    \ $operand[$i + 1];\n    } else if ($operator[$i] == '//') {\n      $result =\
    \ floor($result / $operand[$i + 1]);\n    } else if ($operator[$i] == '**') {\n\
    \      $result = pow($result, $operand[$i + 1]);\n    }\n  }\n  return $result;\n\
    }\n\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5]); // 9\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5, 4]); // 8\necho do_algebra(['+', '//', '**'], [20, 2,\
    \ 3]); // 19\necho do_algebra(['+', '//', '**'], [2, 3, 2]); // 4\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5, 6, 7]); // 8\necho do_algebra(['+', '//', '**'], [2,\
    \ 3, 2, 4]); // 4\necho do_algebra(['+', '//', '**'], [20, 2, 3, 4]); // 19\n\
    echo do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8]); // 8\necho do_algebra(['+',\
    \ '//', '**'], [2, 3, 2, 4, 5]); // 4\necho do_algebra(['+', '//', '**'], [20,\
    \ 2, 3, 4, 5]); // 19\necho do_algebra(['+', '*', '-'], [2, 3, 4", "  $num = count($operand)\
    \ - 1;\n  $ans = $operand[0];\n  for ($i = 0; $i < $num; $i++) {\n    switch ($operator[$i])\
    \ {\n      case '+':\n        $ans += $operand[$i + 1];\n        break;\n    \
    \  case '-':\n        $ans -= $operand[$i + 1];\n        break;\n      case '*':\n\
    \        $ans *= $operand[$i + 1];\n        break;\n      case '//':\n       \
    \ $ans = floor($ans / $operand[$i + 1]);\n        break;\n      case '**':\n \
    \       $ans = pow($ans, $operand[$i + 1]);\n        break;\n    }\n  }\n  return\
    \ $ans;\n}\n$operators = ['+', '*', '-'];\n$array = [2, 3, 4, 5];\necho do_algebra($operators,\
    \ $array);", "    $result = $operand[0];\n    for ($i = 0; $i < count($operator);\
    \ $i++) {\n        switch ($operator[$i]) {\n            case '+':\n         \
    \       $result += $operand[$i + 1];\n                break;\n            case\
    \ '-':\n                $result -= $operand[$i + 1];\n                break;\n\
    \            case '*':\n                $result *= $operand[$i + 1];\n       \
    \         break;\n            case '//':\n                $result = floor($result\
    \ / $operand[$i + 1]);\n                break;\n            case '**':\n     \
    \           $result = pow($result, $operand[$i + 1]);\n                break;\n\
    \        }\n    }\n    return $result;\n}", "    // Write your code here...\n\
    \    $result = '';\n    $op_len = count($operator);\n    $num_len = count($operand);\n\
    \    for($i = 0; $i < $op_len; $i++){\n        $result .= $operator[$i];\n   \
    \     $result .= $operand[$i];\n    }\n    $result .= $operand[$num_len - 1];\n\
    \    echo $result;\n    return eval('return ' . $result . ';');\n}\n\necho do_algebra([\"\
    +\",\"*\",\"-\",\"**\"], [2,3,4,5]);", "  $value = '';\n  $len = count($operand);\n\
    \  for ($i = 0; $i < $len - 1; $i++) {\n    $value .= $operand[$i];\n    $value\
    \ .= $operator[$i];\n  }\n  $value .= $operand[$len - 1];\n  return eval(\"return\
    \ $value;\");\n}\n\necho do_algebra([\"+\", \"*\", \"-\"], [2, 3, 4, 5]); // 9\n\
    echo do_algebra([\"+\", \"-\"], [2, 3, 4]); // -1\necho do_algebra([\"+\", \"\
    -\"], [2, 3, 4, 5]); // -1\necho do_algebra([\"+\", \"-\"], [2, 3, 4, 5, 6]);\
    \ // -1", "    $total = $operand[0];\n    for ($i = 0; $i < count($operator);\
    \ $i++) {\n        switch ($operator[$i]) {\n            case '+':\n         \
    \       $total += $operand[$i + 1];\n                break;\n            case\
    \ '-':\n                $total -= $operand[$i + 1];\n                break;\n\
    \            case '*':\n                $total *= $operand[$i + 1];\n        \
    \        break;\n            case '//':\n                $total = floor($total\
    \ / $operand[$i + 1]);\n                break;\n            case '**':\n     \
    \           $total = pow($total, $operand[$i + 1]);\n                break;\n\
    \        }\n    }\n    return $total;\n}\n\necho do_algebra(['+', '*', '-'], [2,\
    \ 3, 4, 5]) . \"\\n\"; // 9\necho do_algebra(['+', '*', '-'], [1, 2, 3, 4, 5])\
    \ . \"\\n\"; // 14\necho do_algebra(['+', '*', '-', '//'], [2, 3, 4, 5, 8]) .\
    \ \"\\n\"; // 2\necho do_algebra(['+', '*', '-', '//', '**'], [2, 3, 4, 5, 8,\
    \ 7]) . \"\\n\"; // 5\necho do_algebra(['+', '*', '-', '//', '**'], [2, 3, 4,\
    \ 5, 8, 7, 1]) . \"\\n\"; // 1\necho do_algebra(['+', '*', '-', '//', '**'], [2,\
    \ 3, 4, 5, 8, 7, 1, 0]) . \"\\n\"; // 1", "    $result = $operand[0];\n    for\
    \ ($i = 0; $i < count($operator); $i++) {\n        switch ($operator[$i]) {\n\
    \            case '+':\n                $result += $operand[$i + 1];\n       \
    \         break;\n            case '-':\n                $result -= $operand[$i\
    \ + 1];\n                break;\n            case '*':\n                $result\
    \ *= $operand[$i + 1];\n                break;\n            case '//':\n     \
    \           $result /= $operand[$i + 1];\n                break;\n           \
    \ case '**':\n                $result = pow($result, $operand[$i + 1]);\n    \
    \            break;\n        }\n    }\n    return $result;\n}\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]) . \"\\n\"; // 9\necho do_algebra(['//', '*', '//'],\
    \ [8, 2, 3, 2]) . \"\\n\"; // 2\necho do_algebra(['+', '-'], [10, 4, 6]) . \"\\\
    n\"; // 10\necho do_algebra(['+', '-', '*'], [4, 6, 2, 3]) . \"\\n\"; // -4\n\
    echo do_algebra(['//', '*', '//'], [6, 6, 2, 2]) . \"\\n\"; // 3\necho do_algebra(['//',\
    \ '*', '//'], [6, 2, 3, 3]) . \"\\n\"; // 1\necho do_algebra(['+', '*', '//'],\
    \ [5, 8, 3, 3]) . \"\\n\"; // 13\necho do_algebra(['//', '*', '//'], [3, 3, 4,\
    \ 5]) . \"\\n\"; // 0\necho do_algebra(['+', '//', '-'], [4, 4, 2, 1]) . \"\\\
    n\"; // 1\necho do_algebra(['+', '//', '-'], [4, 4, 2, 1, 5]) . \"\\n\"; // 1\n\
    echo do_algebra(['//', '*', '//'], [", "  if (count($operator) != count($operand)\
    \ - 1) {\n    return false;\n  }\n  $result = $operand[0];\n  for ($i = 0; $i\
    \ < count($operator); $i++) {\n    if ($operator[$i] == '+') {\n      $result\
    \ += $operand[$i + 1];\n    } else if ($operator[$i] == '-') {\n      $result\
    \ -= $operand[$i + 1];\n    } else if ($operator[$i] == '*') {\n      $result\
    \ *= $operand[$i + 1];\n    } else if ($operator[$i] == '//') {\n      $result\
    \ = floor($result / $operand[$i + 1]);\n    } else if ($operator[$i] == '**')\
    \ {\n      $result = pow($result, $operand[$i + 1]);\n    }\n  }\n  return $result;\n\
    }\n\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5]) . PHP_EOL;\necho do_algebra(['*',\
    \ '//', '**'], [2, 3, 4, 5]) . PHP_EOL;\necho do_algebra(['-', '+', '-'], [1,\
    \ 2, 3, 4, 5]) . PHP_EOL;\necho do_algebra(['*', '//', '*'], [2, 3, 4, 5]) . PHP_EOL;\n\
    echo do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6]) . PHP_EOL;\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4]) . PHP_EOL;\necho do_algebra(['+', '*', '-'], [2, 3, 4,\
    \ 5, 6, 7]) . PHP_EOL;", "    $result = $operand[0];\n    for ($i = 0; $i < count($operator);\
    \ $i++) {\n        switch ($operator[$i]) {\n            case '+':\n         \
    \       $result += $operand[$i + 1];\n                break;\n            case\
    \ '-':\n                $result -= $operand[$i + 1];\n                break;\n\
    \            case '*':\n                $result *= $operand[$i + 1];\n       \
    \         break;\n            case '//':\n                $result = floor($result\
    \ / $operand[$i + 1]);\n                break;\n            case '**':\n     \
    \           $result = pow($result, $operand[$i + 1]);\n                break;\n\
    \        }\n    }\n    return $result;\n}", "  $result = $operand[0];\n  $len\
    \ = count($operand) - 1;\n  for ($i = 0; $i < $len; $i++) {\n    switch ($operator[$i])\
    \ {\n      case '+':\n        $result += $operand[$i + 1];\n        break;\n \
    \     case '-':\n        $result -= $operand[$i + 1];\n        break;\n      case\
    \ '*':\n        $result *= $operand[$i + 1];\n        break;\n      case '//':\n\
    \        $result = floor($result / $operand[$i + 1]);\n        break;\n      case\
    \ '**':\n        $result = pow($result, $operand[$i + 1]);\n        break;\n \
    \   }\n  }\n  return $result;\n}\n", "    $result = $operand[0];\n    for ($i\
    \ = 0; $i < count($operator); $i++) {\n        switch ($operator[$i]) {\n    \
    \        case '+':\n                $result += $operand[$i + 1];\n           \
    \     break;\n            case '-':\n                $result -= $operand[$i +\
    \ 1];\n                break;\n            case '*':\n                $result\
    \ *= $operand[$i + 1];\n                break;\n            case '//':\n     \
    \           $result = (int)($result / $operand[$i + 1]);\n                break;\n\
    \            case '**':\n                $result = pow($result, $operand[$i +\
    \ 1]);\n                break;\n        }\n    }\n    return $result;\n}\necho\
    \ do_algebra(['+', '*', '-'], [2, 3, 4, 5]) . \"\\n\"; // 9\necho do_algebra(['+',\
    \ '//', '-'], [2, 3, 4, 5]) . \"\\n\"; // 3\necho do_algebra(['+', '*', '-'],\
    \ [5, 10, 3, 4]) . \"\\n\"; // 45\necho do_algebra(['+', '*', '-', '//'], [1,\
    \ 2, 3, 4, 5]) . \"\\n\"; // 0\necho do_algebra(['+', '*', '-', '//', '**'], [3,\
    \ 4, 2, 3, 3]) . \"\\n\"; // -5\necho do_algebra(['+', '//', '*', '-'], [10, 5,\
    \ 2, 1]) . \"\\n\"; // 20\necho do_algebra(['+', '//', '-', '*'], [10, 5, 2, 1])\
    \ . \"\\n\"; // 9\necho do_algebra(['+', '//', '-', '**'], [3, 4, 2, 3]) . \"\\\
    n\"; // 5\necho do_algebra(['+', '-', '*', '//', '**'], [4, 2, 3, 3, 3]) . \"\\\
    n\"; // -10", "  $result = $operand[0];\n  $operand_count = count($operand);\n\
    \  for ($i = 0; $i < $operand_count - 1; $i++) {\n    $result = do_algebra_operator($operator[$i],\
    \ $result, $operand[$i + 1]);\n  }\n  return $result;\n}\n", "    // Write your\
    \ code here...\n    $result = $operand[0];\n    for($i = 0; $i < count($operator);\
    \ $i++){\n        switch($operator[$i]){\n            case '+':\n            \
    \    $result += $operand[$i+1];\n                break;\n            case '-':\n\
    \                $result -= $operand[$i+1];\n                break;\n        \
    \    case '*':\n                $result *= $operand[$i+1];\n                break;\n\
    \            case '//':\n                $result = floor($result / $operand[$i+1]);\n\
    \                break;\n            case '**':\n                $result = pow($result,\
    \ $operand[$i+1]);\n                break;\n        }\n    }\n    return $result;\n\
    }", "  for($i = 0; $i < count($operator); $i++) {\n    if($operator[$i] == '+')\
    \ {\n      $operand[$i+1] = $operand[$i] + $operand[$i+1];\n    } else if($operator[$i]\
    \ == '-') {\n      $operand[$i+1] = $operand[$i] - $operand[$i+1];\n    } else\
    \ if($operator[$i] == '*') {\n      $operand[$i+1] = $operand[$i] * $operand[$i+1];\n\
    \    } else if($operator[$i] == '//') {\n      $operand[$i+1] = floor($operand[$i]\
    \ / $operand[$i+1]);\n    } else if($operator[$i] == '**') {\n      $operand[$i+1]\
    \ = pow($operand[$i], $operand[$i+1]);\n    }\n  }\n  return $operand[count($operand)-1];\n\
    }\n\n$operator = ['+', '*', '-'];\n$operand = [2, 3, 4, 5];\necho do_algebra($operator,\
    \ $operand);", "    $res = $operand[0];\n    for ($i = 0; $i < count($operator);\
    \ $i++) {\n        if ($operator[$i] == '+') {\n            $res += $operand[$i\
    \ + 1];\n        } else if ($operator[$i] == '-') {\n            $res -= $operand[$i\
    \ + 1];\n        } else if ($operator[$i] == '*') {\n            $res *= $operand[$i\
    \ + 1];\n        } else if ($operator[$i] == '//') {\n            $res = intval($res\
    \ / $operand[$i + 1]);\n        } else if ($operator[$i] == '**') {\n        \
    \    $res = pow($res, $operand[$i + 1]);\n        }\n    }\n    return $res;\n\
    }", "  $result = $operand[0];\n  $prevOp = \"\";\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    $op = $operator[$i];\n    $op1 = $operand[$i + 1];\n    if ($prevOp\
    \ === \"\") {\n      $result = doMath($result, $op, $op1);\n    } else {\n   \
    \   $result = doMath($result, $prevOp, doMath($result, $op, $op1));\n    }\n \
    \   $prevOp = $op;\n  }\n  return $result;\n}\n", "  $result = 0;\n  for ($i =\
    \ 0; $i < count($operator); $i++) {\n    if ($i == 0) {\n      $result = eval(\"\
    return {$operand[$i]} {$operator[$i]} {$operand[$i + 1]};\");\n    } else {\n\
    \      $result = eval(\"return $result {$operator[$i]} {$operand[$i + 1]};\");\n\
    \    }\n  }\n  return $result;\n}\n", "    $array = array_merge($operand, $operator);\n\
    \    $result = array_shift($array);\n    foreach ($array as $a) {\n        if\
    \ ($a == '+') {\n            $result += array_shift($array);\n        } elseif\
    \ ($a == '-') {\n            $result -= array_shift($array);\n        } elseif\
    \ ($a == '*') {\n            $result *= array_shift($array);\n        } elseif\
    \ ($a == '//') {\n            $result = floor($result / array_shift($array));\n\
    \        } elseif ($a == '**') {\n            $result = pow($result, array_shift($array));\n\
    \        }\n    }\n    return $result;\n}\necho do_algebra(array('+', '*', '-'),\
    \ array(2, 3, 4, 5));", "  $num = count($operand);\n  for($i = 0; $i < $num; $i++)\
    \ {\n    switch($operator[$i]) {\n      case '+':\n        $operand[$i+1] = $operand[$i]\
    \ + $operand[$i+1];\n        break;\n      case '-':\n        $operand[$i+1] =\
    \ $operand[$i] - $operand[$i+1];\n        break;\n      case '*':\n        $operand[$i+1]\
    \ = $operand[$i] * $operand[$i+1];\n        break;\n      case '//':\n       \
    \ $operand[$i+1] = floor($operand[$i] / $operand[$i+1]);\n        break;\n   \
    \   case '**':\n        $operand[$i+1] = $operand[$i] ** $operand[$i+1];\n   \
    \     break;\n    }\n  }\n  return $operand[$num-1];\n}", "  $result = $operand[0];\n\
    \  for ($i = 0; $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n\
    \      case '+':\n        $result += $operand[$i + 1];\n        break;\n     \
    \ case '-':\n        $result -= $operand[$i + 1];\n        break;\n      case\
    \ '*':\n        $result *= $operand[$i + 1];\n        break;\n      case '//':\n\
    \        $result = floor($result / $operand[$i + 1]);\n        break;\n      case\
    \ '**':\n        $result = $result ** $operand[$i + 1];\n        break;\n    }\n\
    \  }\n  return $result;\n}\n\n$arr1 = ['+', '*', '-'];\n$arr2 = [2, 3, 4, 5];\n\
    print_r(do_algebra($arr1, $arr2));", "  // Write your code here\n}", "  $total\
    \ = $operand[0];\n  for ($i = 0; $i < count($operator); $i++) {\n    if ($operator[$i]\
    \ == \"+\") {\n      $total += $operand[$i + 1];\n    } else if ($operator[$i]\
    \ == \"-\") {\n      $total -= $operand[$i + 1];\n    } else if ($operator[$i]\
    \ == \"*\") {\n      $total *= $operand[$i + 1];\n    } else if ($operator[$i]\
    \ == \"//\") {\n      $total = floor($total / $operand[$i + 1]);\n    } else if\
    \ ($operator[$i] == \"**\") {\n      $total = pow($total, $operand[$i + 1]);\n\
    \    }\n  }\n  return $total;\n}\n\n$operator = ['+', '*', '-'];\n$operand = [2,\
    \ 3, 4, 5];\necho do_algebra($operator, $operand);", "    $result = $operand[0];\n\
    \    for ($i = 0; $i < count($operator); $i++) {\n        switch ($operator[$i])\
    \ {\n            case '+':\n                $result += $operand[$i + 1];\n   \
    \             break;\n            case '-':\n                $result -= $operand[$i\
    \ + 1];\n                break;\n            case '*':\n                $result\
    \ *= $operand[$i + 1];\n                break;\n            case '//':\n     \
    \           $result /= $operand[$i + 1];\n                break;\n           \
    \ case '**':\n                $result **= $operand[$i + 1];\n                break;\n\
    \        }\n    }\n    return $result;\n}\n", "  $result = $operand[0];\n  for\
    \ ($i = 0; $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n    \
    \  case '+':\n        $result += $operand[$i + 1];\n        break;\n      case\
    \ '-':\n        $result -= $operand[$i + 1];\n        break;\n      case '*':\n\
    \        $result *= $operand[$i + 1];\n        break;\n      case '//':\n    \
    \    $result = (int) $result / $operand[$i + 1];\n        break;\n      case '**':\n\
    \        $result = pow($result, $operand[$i + 1]);\n        break;\n    }\n  }\n\
    \  return $result;\n}\n$operator = ['+', '*', '-'];\n$operand = [2, 3, 4, 5];\n\
    echo do_algebra($operator, $operand);\necho \"\\n\";\n$operator = ['//', '+',\
    \ '*', '-'];\n$operand = [2, 3, 4, 5, 7];\necho do_algebra($operator, $operand);\n\
    echo \"\\n\";\n$operator = ['//', '**', '//', '**', '//', '**', '+', '*', '-'];\n\
    $operand = [2, 3, 4, 5, 7, 8, 9, 10, 11, 12];\necho do_algebra($operator, $operand);\n\
    echo \"\\n\";", "  // your code goes here\n}\n$operator = [\"+\", \"*\", \"-\"\
    ];\n$operand = [2, 3, 4, 5];\necho do_algebra($operator, $operand);", "    $result\
    \ = 0;\n    if (count($operator) == count($operand) - 1) {\n        $result =\
    \ $operand[0];\n        for ($i = 0; $i < count($operator); $i++) {\n        \
    \    if ($operator[$i] == '+') {\n                $result += $operand[$i + 1];\n\
    \            } else if ($operator[$i] == '-') {\n                $result -= $operand[$i\
    \ + 1];\n            } else if ($operator[$i] == '*') {\n                $result\
    \ *= $operand[$i + 1];\n            } else if ($operator[$i] == '//') {\n    \
    \            $result = (int)($result / $operand[$i + 1]);\n            } else\
    \ if ($operator[$i] == '**') {\n                $result = pow($result, $operand[$i\
    \ + 1]);\n            }\n        }\n    }\n    return $result;\n}\n", "  $result\
    \ = $operand[0];\n  for ($i = 0; $i < count($operator); $i++) {\n    switch ($operator[$i])\
    \ {\n      case '+':\n        $result += $operand[$i + 1];\n        break;\n \
    \     case '-':\n        $result -= $operand[$i + 1];\n        break;\n      case\
    \ '*':\n        $result *= $operand[$i + 1];\n        break;\n      case '//':\n\
    \        $result = floor($result / $operand[$i + 1]);\n        break;\n      case\
    \ '**':\n        $result = pow($result, $operand[$i + 1]);\n        break;\n \
    \   }\n  }\n  return $result;\n}", "    $len = count($operand);\n    $ops = [];\n\
    \    $result = $operand[0];\n    for ($i = 0; $i < $len - 1; $i++) {\n       \
    \ switch ($operator[$i]) {\n            case '+':\n                $result +=\
    \ $operand[$i + 1];\n                break;\n            case '-':\n         \
    \       $result -= $operand[$i + 1];\n                break;\n            case\
    \ '*':\n                $result *= $operand[$i + 1];\n                break;\n\
    \            case '//':\n                $result = floor($result / $operand[$i\
    \ + 1]);\n                break;\n            case '**':\n                $result\
    \ = pow($result, $operand[$i + 1]);\n                break;\n        }\n    }\n\
    \    return $result;\n}\necho do_algebra(['+', '-', '*', '//', '**'], [1, 2, 3,\
    \ 4, 5]) . \"\\n\"; // -33\necho do_algebra(['+', '-', '*', '//', '**'], [1, 1,\
    \ 2, 2, 2]) . \"\\n\"; // -5\necho do_algebra(['+', '-', '*', '//', '**'], [2,\
    \ 3, 3, 3, 3]) . \"\\n\"; // -4\necho do_algebra(['+', '-', '*', '//', '**'],\
    \ [1, 2, 3, 4, 5]) . \"\\n\"; // -33\necho do_algebra(['+', '-', '*', '//', '**'],\
    \ [1, 1, 2, 2, 2]) . \"\\n\"; // -5\necho do_algebra(['+', '-', '*', '//', '**'],\
    \ [2, 3, 3, 3, 3]) . \"\\n\"; // -4\necho do_algebra(['+', '-', '*', '//', '**'],\
    \ [1, 2, 3, 4, 5]) . \"\\n\"; // -33\necho do_algebra(['+', '-', '*', '//', '**'],\
    \ [1", "  return eval(implode($operand, $operator));\n}", "  $res = $operand[0];\n\
    \  for ($i = 0; $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n\
    \      case '+':\n        $res += $operand[$i + 1];\n        break;\n      case\
    \ '-':\n        $res -= $operand[$i + 1];\n        break;\n      case '*':\n \
    \       $res *= $operand[$i + 1];\n        break;\n      case '//':\n        $res\
    \ = intdiv($res, $operand[$i + 1]);\n        break;\n      case '**':\n      \
    \  $res = pow($res, $operand[$i + 1]);\n        break;\n    }\n  }\n  return $res;\n\
    }\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5]), PHP_EOL;\necho do_algebra(['+',\
    \ '//', '*', '//', '-'], [10, 2, 4, 2, 5]), PHP_EOL;\necho do_algebra(['+', '-',\
    \ '+', '*', '-'], [3, 8, 2, 9, 4, 1]), PHP_EOL;\necho do_algebra(['+', '-', '*',\
    \ '//', '**'], [5, 1, 2, 3, 2]), PHP_EOL;", "  $array = array();\n  $result =\
    \ 0;\n  for($i = 0; $i < count($operator); $i++){\n    $array[] = $operand[$i];\n\
    \    $array[] = $operator[$i];\n  }\n  $array[] = $operand[count($operand) - 1];\n\
    \  $result = $array[0];\n  for($i = 1; $i < count($array); $i+=2){\n    if($array[$i]\
    \ == \"+\"){\n      $result += $array[$i + 1];\n    }\n    if($array[$i] == \"\
    -\"){\n      $result -= $array[$i + 1];\n    }\n    if($array[$i] == \"*\"){\n\
    \      $result *= $array[$i + 1];\n    }\n    if($array[$i] == \"//\"){\n    \
    \  $result = floor($result / $array[$i + 1]);\n    }\n    if($array[$i] == \"\
    **\"){\n      $result = pow($result, $array[$i + 1]);\n    }\n  }\n  return $result;\n\
    }", "    $res = $operand[0];\n    for ($i = 0; $i < count($operator); $i++) {\n\
    \        switch ($operator[$i]) {\n            case '+':\n                $res\
    \ += $operand[$i + 1];\n                break;\n            case '-':\n      \
    \          $res -= $operand[$i + 1];\n                break;\n            case\
    \ '*':\n                $res *= $operand[$i + 1];\n                break;\n  \
    \          case '//':\n                $res = intdiv($res, $operand[$i + 1]);\n\
    \                break;\n            case '**':\n                $res = pow($res,\
    \ $operand[$i + 1]);\n                break;\n        }\n    }\n    return $res;\n\
    }", "  $result = 0;\n  for ($i = 0; $i < count($operator); $i++) {\n    if ($i\
    \ == 0) {\n      $result = $operand[$i] . $operator[$i] . $operand[$i + 1];\n\
    \    } else {\n      $result = $result . $operator[$i] . $operand[$i + 1];\n \
    \   }\n  }\n  return eval(\"return $result;\");\n}\n", "  $result = $operand[0];\n\
    \  for ($i = 0; $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n\
    \      case '+':\n        $result += $operand[$i + 1];\n        break;\n     \
    \ case '-':\n        $result -= $operand[$i + 1];\n        break;\n      case\
    \ '*':\n        $result *= $operand[$i + 1];\n        break;\n      case '//':\n\
    \        $result /= $operand[$i + 1];\n        break;\n      case '**':\n    \
    \    $result **= $operand[$i + 1];\n        break;\n    }\n  }\n  return $result;\n\
    }\nprint_r(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\necho \"\\n\";\nprint_r(do_algebra(['//',\
    \ '**', '+'], [3, 4, 5, 6]));\necho \"\\n\";\nprint_r(do_algebra(['+', '+', '*'],\
    \ [3, 4, 5, 6]));\necho \"\\n\";\n", "  $result = $operand[0];\n  for ($i = 0;\
    \ $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n      case '+':\n\
    \        $result += $operand[$i + 1];\n        break;\n      case '-':\n     \
    \   $result -= $operand[$i + 1];\n        break;\n      case '*':\n        $result\
    \ *= $operand[$i + 1];\n        break;\n      case '//':\n        $result /= $operand[$i\
    \ + 1];\n        break;\n      case '**':\n        $result = pow($result, $operand[$i\
    \ + 1]);\n        break;\n    }\n  }\n  return $result;\n}", "  // Write your\
    \ code here\n  $operand2 = array_shift($operand);\n  $result = 0;\n  $op_count\
    \ = count($operator);\n  foreach($operator as $key => $op){\n    $op1 = $operand2;\n\
    \    $op2 = array_shift($operand);\n    if($op === '+'){\n      $result = $op1\
    \ + $op2;\n    }\n    if($op === '-'){\n      $result = $op1 - $op2;\n    }\n\
    \    if($op === '*'){\n      $result = $op1 * $op2;\n    }\n    if($op === '//'){\n\
    \      $result = intdiv($op1, $op2);\n    }\n    if($op === '**'){\n      $result\
    \ = pow($op1, $op2);\n    }\n    $operand2 = $result;\n  }\n  return $result;\n\
    }\n", "    $total = 0;\n    for($i = 0; $i < count($operator); $i++) {\n     \
    \   switch($operator[$i]) {\n            case '+':\n                $total +=\
    \ $operand[$i] + $operand[$i + 1];\n                break;\n            case '-':\n\
    \                $total += $operand[$i] - $operand[$i + 1];\n                break;\n\
    \            case '*':\n                $total += $operand[$i] * $operand[$i +\
    \ 1];\n                break;\n            case '//':\n                $total\
    \ += floor($operand[$i] / $operand[$i + 1]);\n                break;\n       \
    \     case '**':\n                $total += pow($operand[$i], $operand[$i + 1]);\n\
    \                break;\n        }\n    }\n    return $total;\n}\n", "  $result\
    \ = 0;\n  $operator_index = 0;\n  $operand_index = 0;\n  $end_reached = false;\n\
    \  while (!$end_reached) {\n    if ($operator_index == 0) {\n      $result = $operand[$operand_index];\n\
    \      $operand_index++;\n    } else {\n      switch ($operator[$operator_index\
    \ - 1]) {\n        case '+':\n          $result += $operand[$operand_index];\n\
    \          break;\n        case '-':\n          $result -= $operand[$operand_index];\n\
    \          break;\n        case '*':\n          $result *= $operand[$operand_index];\n\
    \          break;\n        case '//':\n          $result = floor($result / $operand[$operand_index]);\n\
    \          break;\n        case '**':\n          $result = pow($result, $operand[$operand_index]);\n\
    \          break;\n      }\n      $operand_index++;\n    }\n    if ($operand_index\
    \ == count($operand)) {\n      $end_reached = true;\n    }\n    $operator_index++;\n\
    \  }\n  return $result;\n}", "  $ops = new SplStack();\n  foreach($operator as\
    \ $key => $op) {\n    if($op === '+' || $op === '-') {\n      while(!$ops->isEmpty()\
    \ && $ops->top() !== '(') {\n        $operand[$key] = $operand[$key] === null\
    \ ? $ops->pop()($operand[$key - 1], $operand[$key]) : $ops->pop()($operand[$key],\
    \ $operand[$key + 1]);\n      }\n    } else if($op === '*' || $op === '/') {\n\
    \      while(!$ops->isEmpty() && ($ops->top() === '*' || $ops->top() === '/'))\
    \ {\n        $operand[$key] = $operand[$key] === null ? $ops->pop()($operand[$key\
    \ - 1], $operand[$key]) : $ops->pop()($operand[$key], $operand[$key + 1]);\n \
    \     }\n    } else if($op === '(') {\n      $ops->push($op);\n    } else if($op\
    \ === ')') {\n      while(!$ops->isEmpty() && $ops->top() !== '(') {\n       \
    \ $operand[$key] = $operand[$key] === null ? $ops->pop()($operand[$key - 1], $operand[$key])\
    \ : $ops->pop()($operand[$key], $operand[$key + 1]);\n      }\n      $ops->pop();\n\
    \    }\n    $ops->push($op);\n  }\n  while(!$ops->isEmpty()) {\n    $operand[count($operand)\
    \ - 1] = $ops->pop()($operand[count($operand) - 2], $operand[count($operand) -\
    \ 1]);\n  }\n  return $operand[count($operand) - 1];\n}\n", "  $result = 0;\n\
    \  $operator_length = count($operator);\n  $operand_length = count($operand);\n\
    \  for ($i = 0; $i < $operator_length; $i++) {\n    if ($i == 0) {\n      $result\
    \ = $operand[$i];\n    }\n    if ($operator[$i] == '+') {\n      $result += $operand[$i\
    \ + 1];\n    } elseif ($operator[$i] == '-') {\n      $result -= $operand[$i +\
    \ 1];\n    } elseif ($operator[$i] == '*') {\n      $result *= $operand[$i + 1];\n\
    \    } elseif ($operator[$i] == '//') {\n      $result = floor($result / $operand[$i\
    \ + 1]);\n    } elseif ($operator[$i] == '**') {\n      $result = pow($result,\
    \ $operand[$i + 1]);\n    }\n  }\n  return $result;\n}\n\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]);", "  $res = $operand[0];\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    switch ($operator[$i]) {\n      case '+':\n        $res += $operand[$i\
    \ + 1];\n        break;\n      case '-':\n        $res -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $res *= $operand[$i + 1];\n        break;\n\
    \      case '//':\n        $res = intdiv($res, $operand[$i + 1]);\n        break;\n\
    \      case '**':\n        $res = pow($res, $operand[$i + 1]);\n        break;\n\
    \    }\n  }\n  return $res;\n}\n\n$operators = array('+', '*', '-');\n$operands\
    \ = array(2, 3, 4, 5);\n\necho do_algebra($operators, $operands);", "  $result\
    \ = $operand[0];\n  for ($i = 0; $i < count($operator); $i++) {\n    if ($operator[$i]\
    \ == '+') {\n      $result += $operand[$i + 1];\n    } else if ($operator[$i]\
    \ == '-') {\n      $result -= $operand[$i + 1];\n    } else if ($operator[$i]\
    \ == '*') {\n      $result *= $operand[$i + 1];\n    } else if ($operator[$i]\
    \ == '//') {\n      $result = (int)($result / $operand[$i + 1]);\n    } else if\
    \ ($operator[$i] == '**') {\n      $result = pow($result, $operand[$i + 1]);\n\
    \    }\n  }\n  return $result;\n}\n\ndo_algebra(['*', '//', '**'], [2, 3, 4, 5]);",
  "    for ($i = 0; $i < count($operator); $i++) {\n        if ($operator[$i] == '**')\
    \ {\n            $operand[$i + 1] = pow($operand[$i], $operand[$i + 1]);\n   \
    \         unset($operand[$i]);\n            unset($operator[$i]);\n        }\n\
    \    }\n    $operator = array_values($operator);\n    $operand = array_values($operand);\n\
    \    for ($i = 0; $i < count($operator); $i++) {\n        if ($operator[$i] ==\
    \ '*') {\n            $operand[$i + 1] = $operand[$i] * $operand[$i + 1];\n  \
    \          unset($operand[$i]);\n            unset($operator[$i]);\n        }\n\
    \    }\n    $operator = array_values($operator);\n    $operand = array_values($operand);\n\
    \    for ($i = 0; $i < count($operator); $i++) {\n        if ($operator[$i] ==\
    \ '//') {\n            $operand[$i + 1] = floor($operand[$i] / $operand[$i + 1]);\n\
    \            unset($operand[$i]);\n            unset($operator[$i]);\n       \
    \ }\n    }\n    $operator = array_values($operator);\n    $operand = array_values($operand);\n\
    \    for ($i = 0; $i < count($operator); $i++) {\n        if ($operator[$i] ==\
    \ '+') {\n            $operand[$i + 1] = $operand[$i] + $operand[$i + 1];\n  \
    \          unset($operand[$i]);\n            unset($operator[$i]);\n        }\n\
    \    }\n    $operator = array_values($operator);\n    $operand = array_values($operand);\n\
    \    for ($i = 0; $i < count($operator); $i++) {\n        if ($operator[$i] ==\
    \ '-') {\n            $operand[$i + 1] = $operand[$i] - $operand[$i", "    if\
    \ (empty($operator) || empty($operand)) return 0;\n    if (count($operator) !=\
    \ count($operand) - 1) return 0;\n    $result = $operand[0];\n    for ($i = 0;\
    \ $i < count($operator); $i++) {\n        switch ($operator[$i]) {\n         \
    \   case '+':\n                $result += $operand[$i + 1];\n                break;\n\
    \            case '-':\n                $result -= $operand[$i + 1];\n       \
    \         break;\n            case '*':\n                $result *= $operand[$i\
    \ + 1];\n                break;\n            case '//':\n                $result\
    \ = floor($result / $operand[$i + 1]);\n                break;\n            case\
    \ '**':\n                $result = pow($result, $operand[$i + 1]);\n         \
    \       break;\n            default:\n                break;\n        }\n    }\n\
    \    return $result;\n}\necho do_algebra(['*', '//', '+'], [5, 2, 3, 4]);\necho\
    \ do_algebra(['-', '*', '-'], [2, 3, 4, 5]);\necho do_algebra(['**', '-', '*'],\
    \ [2, 3, 4, 5]);\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5]);\necho do_algebra(['+',\
    \ '+', '-'], [2, 3, 4, 5]);\necho do_algebra(['//', '-', '+'], [2, 3, 4, 5]);",
  "  // Your code here\n}", "    if(count($operator) == 0 || count($operand) == 0)\
    \ return 0;\n    if(count($operator) == 1 && count($operand) == 2) return $operand[0]\
    \ + $operand[1];\n    if(count($operator) == 2 && count($operand) == 3) return\
    \ $operand[0] + $operand[1] + $operand[2];\n    if(count($operator) == 2 && count($operand)\
    \ == 3) return $operand[0] * $operand[1] * $operand[2];\n    $final = 0;\n   \
    \ $prev_op = '+';\n    foreach($operand as $key => $val) {\n        if($key ==\
    \ 0) {\n            $final = $val;\n            continue;\n        }\n       \
    \ $operator[$key - 1] == '+' ? $final += $val : $final -= $val;\n    }\n    return\
    \ $final;\n}\n$operator = ['+'];\n$operand = [2, 3];\necho do_algebra($operator,\
    \ $operand) . PHP_EOL;", "    $result = $operand[0];\n    for ($i = 0; $i < count($operator);\
    \ $i++) {\n        switch ($operator[$i]) {\n            case '+':\n         \
    \       $result += $operand[$i + 1];\n                break;\n            case\
    \ '-':\n                $result -= $operand[$i + 1];\n                break;\n\
    \            case '*':\n                $result *= $operand[$i + 1];\n       \
    \         break;\n            case '//':\n                $result = floor($result\
    \ / $operand[$i + 1]);\n                break;\n            case '**':\n     \
    \           $result = pow($result, $operand[$i + 1]);\n                break;\n\
    \        }\n    }\n    return $result;\n}\necho(do_algebra(['+', '*', '-'], [2,\
    \ 3, 4, 5]));", "  // your code here\n}", "    $result = $operand[0];\n    for\
    \ ($i = 0; $i < count($operator); $i++) {\n        if ($operator[$i] == '+') {\n\
    \            $result += $operand[$i + 1];\n        } else if ($operator[$i] ==\
    \ '-') {\n            $result -= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == '*') {\n            $result *= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == '//') {\n            $result /= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == '**') {\n            $result **= $operand[$i + 1];\n        }\n    }\n  \
    \  return $result;\n}\n\n$operator = ['+', '*', '-', '//', '**'];\n$operand =\
    \ [2, 3, 4, 5, 3];\n$expected = 1;\n\n$result = do_algebra($operator, $operand);\n\
    echo $result;", "  $count = 0;\n  foreach($operator as $key => $val){\n    switch($val){\n\
    \      case \"+\":\n        $count += $operand[$key+1];\n        break;\n    \
    \  case \"-\":\n        $count -= $operand[$key+1];\n        break;\n      case\
    \ \"*\":\n        $count *= $operand[$key+1];\n        break;\n      case \"//\"\
    :\n        $count = floor($count / $operand[$key+1]);\n        break;\n      case\
    \ \"**\":\n        $count = pow($count, $operand[$key+1]);\n        break;\n \
    \   }\n  }\n  return $count + $operand[0];\n}\necho do_algebra(['+', '*', '-'],\
    \ [2, 3, 4, 5]);\necho \"<br>\";\necho do_algebra(['*', '//', '+'], [2, 3, 4,\
    \ 5]);", "    $result = array_shift($operand);\n    while($currentOperator = array_shift($operator))\
    \ {\n        $currentOperand = array_shift($operand);\n        switch($currentOperator)\
    \ {\n            case '+':\n                $result += $currentOperand;\n    \
    \            break;\n            case '-':\n                $result -= $currentOperand;\n\
    \                break;\n            case '*':\n                $result *= $currentOperand;\n\
    \                break;\n            case '//':\n                $result = floor($result\
    \ / $currentOperand);\n                break;\n            case '**':\n      \
    \          $result = pow($result, $currentOperand);\n                break;\n\
    \        }\n    }\n    return $result;\n}\n$operator = array('**', '*', '-');\n\
    $operand = array(2, 3, 4, 5);\necho do_algebra($operator, $operand);\necho \"\\\
    n\";", "  $result = $operand[0];\n  $operand = array_slice($operand, 1);\n  foreach\
    \ ($operator as $key => $value) {\n    switch ($value) {\n      case '+':\n  \
    \      $result += $operand[$key];\n        break;\n      case '-':\n        $result\
    \ -= $operand[$key];\n        break;\n      case '*':\n        $result *= $operand[$key];\n\
    \        break;\n      case '//':\n        $result = floor($result / $operand[$key]);\n\
    \        break;\n      case '**':\n        $result = pow($result, $operand[$key]);\n\
    \        break;\n    }\n  }\n  return $result;\n}\n", "    $expression = $operand[0];\n\
    \    for ($i = 0; $i < count($operator); $i++) {\n        $expression .= $operator[$i]\
    \ . $operand[$i + 1];\n    }\n    return eval(\"return $expression;\");\n}\n\n\
    $op = [\"+\", \"*\", \"-\"];\n$arg = [2, 3, 4, 5];\necho do_algebra($op, $arg);\n",
  "    $output = $operand[0];\n    for ($i = 0; $i < count($operator); $i++) {\n \
    \       if ($operator[$i] == '+') {\n            $output += $operand[$i + 1];\n\
    \        } elseif ($operator[$i] == '-') {\n            $output -= $operand[$i\
    \ + 1];\n        } elseif ($operator[$i] == '*') {\n            $output *= $operand[$i\
    \ + 1];\n        } elseif ($operator[$i] == '//') {\n            $output = floor($output\
    \ / $operand[$i + 1]);\n        } elseif ($operator[$i] == '**') {\n         \
    \   $output = pow($output, $operand[$i + 1]);\n        }\n    }\n    return $output;\n\
    }", "  $res = $operand[0];\n  for ($i = 0; $i < count($operator); $i++) {\n  \
    \  if ($operator[$i] == '+') {\n      $res += $operand[$i + 1];\n    } else if\
    \ ($operator[$i] == '-') {\n      $res -= $operand[$i + 1];\n    } else if ($operator[$i]\
    \ == '*') {\n      $res *= $operand[$i + 1];\n    } else if ($operator[$i] ==\
    \ '//') {\n      $res = floor($res / $operand[$i + 1]);\n    } else if ($operator[$i]\
    \ == '**') {\n      $res = pow($res, $operand[$i + 1]);\n    }\n  }\n  return\
    \ $res;\n}\n\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5]) . PHP_EOL;\necho\
    \ do_algebra(['*', '**', '+'], [2, 3, 4, 5]) . PHP_EOL;\necho do_algebra(['//',\
    \ '**', '//'], [2, 3, 4, 5]) . PHP_EOL;\necho do_algebra(['+', '*', '-'], [10,\
    \ 2, 2, 3]) . PHP_EOL;\necho do_algebra(['//', '**', '//'], [10, 2, 2, 3]) . PHP_EOL;\n\
    echo do_algebra(['+', '*', '-'], [10, 2, 2, 3, 7]) . PHP_EOL;\necho do_algebra(['//',\
    \ '**', '//'], [10, 2, 2, 3, 7]) . PHP_EOL;\necho do_algebra(['//', '**', '//'],\
    \ [10, 2, 2, 3, 7, 2]) . PHP_EOL;\necho do_algebra(['//', '**', '//'], [10, 2,\
    \ 2, 3, 7, 2, 2]) . PHP_EOL;", "  $n = count($operand);\n  $expression = $operand[0];\n\
    \  for ($i = 1; $i < $n; $i++) {\n    switch ($operator[$i - 1]) {\n      case\
    \ '+':\n        $expression += $operand[$i];\n        break;\n      case '-':\n\
    \        $expression -= $operand[$i];\n        break;\n      case '*':\n     \
    \   $expression *= $operand[$i];\n        break;\n      case '//':\n        $expression\
    \ //= $operand[$i];\n        break;\n      case '**':\n        $expression **=\
    \ $operand[$i];\n        break;\n    }\n  }\n  return $expression;\n}\n", "  \
    \  // Write your code here\n    $result = $operand[0];\n    for($i = 0; $i < count($operator);\
    \ $i++){\n        if($operator[$i] == \"+\"){\n            $result += $operand[$i+1];\n\
    \        }else if($operator[$i] == \"-\"){\n            $result -= $operand[$i+1];\n\
    \        }else if($operator[$i] == \"*\"){\n            $result *= $operand[$i+1];\n\
    \        }else if($operator[$i] == \"//\"){\n            $result = (int)($result\
    \ / $operand[$i+1]);\n        }else if($operator[$i] == \"**\"){\n           \
    \ $result = (int)pow($result, $operand[$i+1]);\n        }\n    }\n    return $result;\n\
    }\n\n$operator = ['+', '*', '-'];\n$operand = [2, 3, 4, 5];\necho do_algebra($operator,\
    \ $operand); // result = 9", "    $result = $operand[0];\n    for ($i = 0; $i\
    \ < count($operator); $i++) {\n        if ($operator[$i] == \"+\") {\n       \
    \     $result += $operand[$i + 1];\n        } else if ($operator[$i] == \"-\"\
    ) {\n            $result -= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == \"*\") {\n            $result *= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == \"//\") {\n            $result /= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == \"**\") {\n            $result **= $operand[$i + 1];\n        }\n    }\n\
    \    return $result;\n}", "    $result = $operand[0];\n    for ($i = 0; $i < count($operator);\
    \ $i++) {\n        switch ($operator[$i]) {\n            case '+':\n         \
    \       $result += $operand[$i + 1];\n                break;\n            case\
    \ '-':\n                $result -= $operand[$i + 1];\n                break;\n\
    \            case '*':\n                $result *= $operand[$i + 1];\n       \
    \         break;\n            case '//':\n                $result = floor($result\
    \ / $operand[$i + 1]);\n                break;\n            case '**':\n     \
    \           $result = $result ** $operand[$i + 1];\n                break;\n \
    \       }\n    }\n    return $result;\n}\n\n$operator = [\"+\", \"*\", \"-\"];\n\
    $operand = [2, 3, 4, 5];\necho do_algebra($operator, $operand);\n", "    $num1\
    \ = array_shift($operand);\n    while(count($operand) > 0) {\n        $num2 =\
    \ array_shift($operand);\n        $operator = array_shift($operator);\n      \
    \  switch($operator) {\n            case '+':\n                $num1 += $num2;\n\
    \                break;\n            case '-':\n                $num1 -= $num2;\n\
    \                break;\n            case '*':\n                $num1 *= $num2;\n\
    \                break;\n            case '//':\n                $num1 = (int)($num1\
    \ / $num2);\n                break;\n            case '**':\n                $num1\
    \ = pow($num1, $num2);\n                break;\n        }\n    }\n    return $num1;\n\
    }", "    $result = $operand[0];\n    $index = 0;\n    foreach($operator as $op)\
    \ {\n        switch($op) {\n            case '+':\n                $result +=\
    \ $operand[$index + 1];\n                break;\n            case '-':\n     \
    \           $result -= $operand[$index + 1];\n                break;\n       \
    \     case '*':\n                $result *= $operand[$index + 1];\n          \
    \      break;\n            case '//':\n                $result /= $operand[$index\
    \ + 1];\n                break;\n            case '**':\n                $result\
    \ **= $operand[$index + 1];\n                break;\n        }\n        $index++;\n\
    \    }\n    return $result;\n}\n\n$op = ['+', '*', '-'];\n$arr = [2, 3, 4, 5];\n\
    echo do_algebra($op, $arr);", "  $operator = array_reverse($operator);\n  $operand\
    \ = array_reverse($operand);\n  while (count($operator) > 0) {\n    $operator_current\
    \ = array_pop($operator);\n    $operand_1 = array_pop($operand);\n    $operand_2\
    \ = array_pop($operand);\n    switch ($operator_current) {\n      case '+':\n\
    \        $operand[] = $operand_1 + $operand_2;\n        break;\n      case '-':\n\
    \        $operand[] = $operand_1 - $operand_2;\n        break;\n      case '*':\n\
    \        $operand[] = $operand_1 * $operand_2;\n        break;\n      case '//':\n\
    \        $operand[] = floor($operand_1 / $operand_2);\n        break;\n      case\
    \ '**':\n        $operand[] = pow($operand_1, $operand_2);\n        break;\n \
    \   }\n  }\n  return $operand[0];\n}\ndo_algebra(['*', '+', '+'], [6, 2, 4, 8]);\
    \ //52\ndo_algebra(['+', '*', '-'], [2, 3, 4, 5]); //9\ndo_algebra(['+', '-',\
    \ '*'], [3, 1, 2, 4]); //-3\ndo_algebra(['//', '*', '-', '+'], [12, 3, 4, 3, 7]);\
    \ //6\ndo_algebra(['+', '+', '+', '+'], [5, 5, 5, 5, 5]); //25\ndo_algebra(['+',\
    \ '+', '+', '+'], [5, 5, 5, 6, 7]); //28\ndo_algebra(['//', '*', '//', '*'], [12,\
    \ 6, 7, 5, 4]); //6\ndo_algebra(['*', '*', '*', '*'], [1, 2, 3, 4, 5]); //120\n\
    do_algebra(['+', '+', '*', '+'],", "    $result = 0;\n    $operation = '';\n \
    \   $number = '';\n    for ($i = 0; $i < count($operator); $i++) {\n        if\
    \ ($i == 0) {\n            $result = $operand[$i];\n            $operation = $operator[$i];\n\
    \            $number = $operand[$i + 1];\n        } else {\n            if ($operation\
    \ == '+') {\n                $result += $number;\n            } elseif ($operation\
    \ == '-') {\n                $result -= $number;\n            } elseif ($operation\
    \ == '*') {\n                $result *= $number;\n            } elseif ($operation\
    \ == '//') {\n                $result = floor($result / $number);\n          \
    \  } elseif ($operation == '**') {\n                $result = pow($result, $number);\n\
    \            }\n            $operation = $operator[$i];\n            $number =\
    \ $operand[$i + 1];\n        }\n    }\n    if ($operation == '+') {\n        $result\
    \ += $number;\n    } elseif ($operation == '-') {\n        $result -= $number;\n\
    \    } elseif ($operation == '*') {\n        $result *= $number;\n    } elseif\
    \ ($operation == '//') {\n        $result = floor($result / $number);\n    } elseif\
    \ ($operation == '**') {\n        $result = pow($result, $number);\n    }\n  \
    \  return $result;\n}\n$operator = ['+', '*', '-'];\n$operand = [2, 3, 4, 5];\n\
    echo do_algebra($operator, $operand);", "    $res = $operand[0];\n    for ($i\
    \ = 0; $i < count($operator); $i++) {\n        switch ($operator[$i]) {\n    \
    \        case '+':\n                $res += $operand[$i + 1];\n              \
    \  break;\n            case '-':\n                $res -= $operand[$i + 1];\n\
    \                break;\n            case '*':\n                $res *= $operand[$i\
    \ + 1];\n                break;\n            case '//':\n                $res\
    \ = floor($res / $operand[$i + 1]);\n                break;\n            case\
    \ '**':\n                $res = pow($res, $operand[$i + 1]);\n               \
    \ break;\n        }\n    }\n    return $res;\n}\n", "  $result = $operand[0];\n\
    \  for ($i = 0; $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n\
    \      case '+':\n        $result += $operand[$i + 1];\n        break;\n     \
    \ case '-':\n        $result -= $operand[$i + 1];\n        break;\n      case\
    \ '*':\n        $result *= $operand[$i + 1];\n        break;\n      case '//':\n\
    \        $result = floor($result / $operand[$i + 1]);\n        break;\n      case\
    \ '**':\n        $result = $result ** $operand[$i + 1];\n        break;\n    }\n\
    \  }\n  return $result;\n}", "    if (!is_array($operator) || !is_array($operand))\
    \ return false;\n    $res = $operand[0];\n    for ($i = 0; $i < count($operator);\
    \ $i++) {\n        switch ($operator[$i]) {\n            case '+':\n         \
    \       $res += $operand[$i + 1];\n                break;\n            case '-':\n\
    \                $res -= $operand[$i + 1];\n                break;\n         \
    \   case '*':\n                $res *= $operand[$i + 1];\n                break;\n\
    \            case '//':\n                $res = floor($res / $operand[$i + 1]);\n\
    \                break;\n            case '**':\n                $res = pow($res,\
    \ $operand[$i + 1]);\n                break;\n            default:\n         \
    \       return false;\n        }\n    }\n    return $res;\n}\n", "  $count = count($operand);\n\
    \  $result = $operand[0];\n  for ($i = 1; $i < $count; $i++) {\n    $op = $operator[$i\
    \ - 1];\n    $v = $operand[$i];\n    switch ($op) {\n      case '+':\n       \
    \ $result += $v;\n        break;\n      case '-':\n        $result -= $v;\n  \
    \      break;\n      case '*':\n        $result *= $v;\n        break;\n     \
    \ case '//':\n        $result = floor($result / $v);\n        break;\n      case\
    \ '**':\n        $result = pow($result, $v);\n        break;\n    }\n  }\n  return\
    \ $result;\n}\n", "  $result = $operand[0];\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    switch ($operator[$i]) {\n      case '+':\n        $result += $operand[$i\
    \ + 1];\n        break;\n      case '-':\n        $result -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $result *= $operand[$i + 1];\n     \
    \   break;\n      case '//':\n        $result = floor($result / $operand[$i +\
    \ 1]);\n        break;\n      case '**':\n        $result = $result ** $operand[$i\
    \ + 1];\n        break;\n    }\n  }\n  return $result;\n}\n\n$operator = ['+',\
    \ '*', '-'];\n$operand = [2, 3, 4, 5];\n\necho do_algebra($operator, $operand);",
  "    $result = $operand[0];\n    for ($i = 0; $i < count($operator); $i++) {\n \
    \       switch ($operator[$i]) {\n            case '+':\n                $result\
    \ += $operand[$i + 1];\n                break;\n            case '-':\n      \
    \          $result -= $operand[$i + 1];\n                break;\n            case\
    \ '*':\n                $result *= $operand[$i + 1];\n                break;\n\
    \            case '//':\n                $result = floor($result / $operand[$i\
    \ + 1]);\n                break;\n            case '**':\n                $result\
    \ = $result ** $operand[$i + 1];\n                break;\n        }\n    }\n \
    \   return $result;\n}\n", "    $result = array_shift($operand);\n    foreach\
    \ ($operator as $i => $op) {\n        switch ($op) {\n            case '+':\n\
    \                $result += $operand[$i];\n                break;\n          \
    \  case '-':\n                $result -= $operand[$i];\n                break;\n\
    \            case '*':\n                $result *= $operand[$i];\n           \
    \     break;\n            case '//':\n                $result = floor($result\
    \ / $operand[$i]);\n                break;\n            case '**':\n         \
    \       $result = pow($result, $operand[$i]);\n                break;\n      \
    \  }\n    }\n    return $result;\n}\n\n$operator = ['+', '*', '-'];\n$operand\
    \ = [2, 3, 4, 5];\necho do_algebra($operator, $operand) . PHP_EOL;", "    if(count($operator)\
    \ !== count($operand) - 1) {\n        throw new Exception(\"operator and operand\
    \ are not equal\");\n    }\n    $operand = array_reverse($operand);\n    $result\
    \ = array_shift($operand);\n    foreach($operator as $val) {\n        $result\
    \ = calc($val, array_shift($operand), $result);\n    }\n    return $result;\n\
    }\n", "  $result = 0;\n  $arr_len = count($operand);\n  for ($i = 0; $i < $arr_len\
    \ - 1; $i++) {\n    switch ($operator[$i]) {\n      case '+':\n        $result\
    \ = $operand[$i] + $operand[$i + 1];\n        break;\n      case '-':\n      \
    \  $result = $operand[$i] - $operand[$i + 1];\n        break;\n      case '*':\n\
    \        $result = $operand[$i] * $operand[$i + 1];\n        break;\n      case\
    \ '//':\n        $result = floor($operand[$i] / $operand[$i + 1]);\n        break;\n\
    \      case '**':\n        $result = pow($operand[$i], $operand[$i + 1]);\n  \
    \      break;\n    }\n    $operand[$i + 1] = $result;\n  }\n  return $result;\n\
    }\n\necho do_algebra(['+', '-', '*', '//', '**'], [2, 2, 3, 2, 5]) . PHP_EOL;\n\
    echo do_algebra(['+', '-', '*', '//', '**'], [4, 2, 1, 2, 5]) . PHP_EOL;\necho\
    \ do_algebra(['+', '-', '*', '//', '**'], [2, 2, 3, 2, 6]) . PHP_EOL;\necho do_algebra(['+',\
    \ '-', '*', '//', '**'], [4, 2, 1, 2, 4]) . PHP_EOL;\necho do_algebra(['+', '-',\
    \ '*', '//', '**'], [2, 2, 3, 2, 2]) . PHP_EOL;\necho do_algebra(['+', '-', '*',\
    \ '//', '**'], [4, 2, 1, 2, 2]) . PHP_EOL;\necho do_algebra(['+', '-', '*', '//',\
    \ '**'], [2, 2, 3,", "  $result = 0;\n  $arr = count($operand);\n  for ($i = 0;\
    \ $i < $arr - 1; $i++) {\n    if ($operator[$i] == \"+\") {\n      $result = $operand[$i]\
    \ + $operand[$i + 1];\n    } elseif ($operator[$i] == \"-\") {\n      $result\
    \ = $operand[$i] - $operand[$i + 1];\n    } elseif ($operator[$i] == \"*\") {\n\
    \      $result = $operand[$i] * $operand[$i + 1];\n    } elseif ($operator[$i]\
    \ == \"//\") {\n      $result = $operand[$i] / $operand[$i + 1];\n    } elseif\
    \ ($operator[$i] == \"**\") {\n      $result = $operand[$i] ** $operand[$i + 1];\n\
    \    }\n    $operand[$i + 1] = $result;\n  }\n  return $result;\n}\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]);", "    $operandCount = count($operand);\n    $result\
    \ = $operand[0];\n    for ($i = 0; $i < $operandCount - 1; $i++) {\n        switch\
    \ ($operator[$i]) {\n            case '+':\n                $result += $operand[$i\
    \ + 1];\n                break;\n            case '-':\n                $result\
    \ -= $operand[$i + 1];\n                break;\n            case '*':\n      \
    \          $result *= $operand[$i + 1];\n                break;\n            case\
    \ '//':\n                $result = (int)($result / $operand[$i + 1]);\n      \
    \          break;\n            case '**':\n                $result = (int)pow($result,\
    \ $operand[$i + 1]);\n                break;\n        }\n    }\n    return $result;\n\
    }\n$operator = ['+', '*', '-'];\n$operand = [2, 3, 4, 5];\necho do_algebra($operator,\
    \ $operand);", "    $result = $operand[0];\n    for ($i = 0; $i < count($operator);\
    \ $i++) {\n        switch ($operator[$i]) {\n            case '+':\n         \
    \       $result += $operand[$i + 1];\n                break;\n            case\
    \ '-':\n                $result -= $operand[$i + 1];\n                break;\n\
    \            case '*':\n                $result *= $operand[$i + 1];\n       \
    \         break;\n            case '//':\n                $result /= $operand[$i\
    \ + 1];\n                break;\n            case '**':\n                $result\
    \ = pow($result, $operand[$i + 1]);\n                break;\n        }\n    }\n\
    \    return $result;\n}\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5]);", "\t\
    $operand = array_map('intval', $operand);\n\t$operand = implode(' ', $operand);\n\
    \t$operator = implode(' ', $operator);\n\t$expression = $operand . ' ' . $operator;\n\
    \t\n\treturn eval(\"return $expression;\");\n}\necho do_algebra(['+', '*', '-'],\
    \ [2, 3, 4, 5]); // 2 + 3 * 4 - 5 => 9\necho do_algebra(['*', '//', '**'], [2,\
    \ 3, 4, 5]); // 2 * 3 // 4 ** 5 => 2147483647\necho do_algebra(['*', '//', '**'],\
    \ [2, -3, 4, 5]); // 2 * -3 // 4 ** 5 => -2\necho do_algebra(['*', '//', '**'],\
    \ [2, 3, 4, -5]); // 2 * 3 // 4 ** -5 => -0.04\necho do_algebra(['+', '-', '*',\
    \ '//', '**'], [2, 3, 4, 5, 6]); // 2 + 3 - 4 * 5 // 6 ** 0 => 6\necho do_algebra(['+',\
    \ '-', '*', '//', '**'], [2, 3, 4, 5, 6, 7]); // 2 + 3 - 4 * 5 // 6 ** 7 => 3\n\
    echo do_algebra(['+', '-', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8]); // 2 + 3\
    \ - 4 * 5 // 6 ** 7 + 8 => 11\necho do_algebra(['+', '-', '*', '//', '**'], [2,\
    \ 3, 4, 5, 6, 7, 8, 9]); // 2 + 3 - 4 * 5 // 6 ** 7 + 8 - 9 => 2", "  $result\
    \ = $operand[0];\n  for ($i = 0; $i < count($operator); $i++) {\n    if ($operator[$i]\
    \ == '+') {\n      $result += $operand[$i + 1];\n    } else if ($operator[$i]\
    \ == '-') {\n      $result -= $operand[$i + 1];\n    } else if ($operator[$i]\
    \ == '*') {\n      $result *= $operand[$i + 1];\n    } else if ($operator[$i]\
    \ == '//') {\n      $result = floor($result / $operand[$i + 1]);\n    } else if\
    \ ($operator[$i] == '**') {\n      $result = pow($result, $operand[$i + 1]);\n\
    \    }\n  }\n  return $result;\n}\n", "  $length = count($operator);\n  for ($i\
    \ = 0; $i < $length; $i++) {\n    if ($operator[$i] == '//') {\n      $tmp = $operand[$i]\
    \ / $operand[$i + 1];\n      array_splice($operand, $i, 2, floor($tmp));\n   \
    \   array_splice($operator, $i, 1);\n      $length--;\n      $i--;\n    }\n  }\n\
    \  $length = count($operator);\n  for ($i = 0; $i < $length; $i++) {\n    if ($operator[$i]\
    \ == '**') {\n      $tmp = pow($operand[$i], $operand[$i + 1]);\n      array_splice($operand,\
    \ $i, 2, $tmp);\n      array_splice($operator, $i, 1);\n      $length--;\n   \
    \   $i--;\n    }\n  }\n  $length = count($operator);\n  for ($i = 0; $i < $length;\
    \ $i++) {\n    if ($operator[$i] == '*') {\n      $tmp = $operand[$i] * $operand[$i\
    \ + 1];\n      array_splice($operand, $i, 2, $tmp);\n      array_splice($operator,\
    \ $i, 1);\n      $length--;\n      $i--;\n    }\n  }\n  $length = count($operator);\n\
    \  for ($i = 0; $i < $length; $i++) {\n    if ($operator[$i] == '+') {\n     \
    \ $tmp = $operand[$i] + $operand[$i + 1];\n      array_splice($operand, $i, 2,\
    \ $tmp);\n      array_splice($operator, $i, 1);\n      $length--;\n      $i--;\n\
    \    }\n  }\n  $length = count($operator);\n  for ($i = 0; $i < $length; $i++)\
    \ {\n    if ($operator[$i] == '-') {\n      $tmp = $operand[$i] - $operand[$",
  "    $result = $operand[0];\n    for ($i = 0; $i < count($operator); $i++) {\n \
    \       switch ($operator[$i]) {\n            case '+':\n                $result\
    \ += $operand[$i + 1];\n                break;\n            case '-':\n      \
    \          $result -= $operand[$i + 1];\n                break;\n            case\
    \ '*':\n                $result *= $operand[$i + 1];\n                break;\n\
    \            case '//':\n                $result /= $operand[$i + 1];\n      \
    \          break;\n            case '**':\n                $result = pow($result,\
    \ $operand[$i + 1]);\n                break;\n        }\n    }\n    return $result;\n\
    }", "  $operationString = \"\";\n  for ($i = 0; $i < count($operand); $i++) {\n\
    \    $operationString .= $operand[$i];\n    if (isset($operator[$i])) {\n    \
    \  $operationString .= $operator[$i];\n    }\n  }\n  return (string) eval(\"return\
    \ $operationString;\");\n}\n", "  $result = $operand[0];\n  for ($i = 0; $i <\
    \ count($operator); $i++) {\n    switch ($operator[$i]) {\n      case '+':\n \
    \       $result += $operand[$i + 1];\n        break;\n      case '-':\n      \
    \  $result -= $operand[$i + 1];\n        break;\n      case '*':\n        $result\
    \ *= $operand[$i + 1];\n        break;\n      case '//':\n        $result = (int)\
    \ ($result / $operand[$i + 1]);\n        break;\n      case '**':\n        $result\
    \ = pow($result, $operand[$i + 1]);\n        break;\n    }\n  }\n  return $result;\n\
    }\n\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5]) . PHP_EOL; // 9\necho do_algebra(['+',\
    \ '*', '//', '**'], [2, 3, 4, 5]) . PHP_EOL; // 79", "    $i = 0;\n    while ($i\
    \ < count($operator)) {\n        if ($operator[$i] == \"**\") {\n            $operand[$i]\
    \ = pow($operand[$i], $operand[$i + 1]);\n            unset($operand[$i + 1]);\n\
    \            unset($operator[$i]);\n            $operand = array_values($operand);\n\
    \            $operator = array_values($operator);\n            $i--;\n       \
    \ }\n        elseif ($operator[$i] == \"//\") {\n            $operand[$i] = floor($operand[$i]\
    \ / $operand[$i + 1]);\n            unset($operand[$i + 1]);\n            unset($operator[$i]);\n\
    \            $operand = array_values($operand);\n            $operator = array_values($operator);\n\
    \            $i--;\n        }\n        $i++;\n    }\n    $i = 0;\n    while ($i\
    \ < count($operator)) {\n        if ($operator[$i] == \"*\") {\n            $operand[$i]\
    \ = $operand[$i] * $operand[$i + 1];\n            unset($operand[$i + 1]);\n \
    \           unset($operator[$i]);\n            $operand = array_values($operand);\n\
    \            $operator = array_values($operator);\n            $i--;\n       \
    \ }\n        $i++;\n    }\n    $i = 0;\n    while ($i < count($operator)) {\n\
    \        if ($operator[$i] == \"+\") {\n            $operand[$i] = $operand[$i]\
    \ + $operand[$i + 1];\n            unset($operand[$i + 1]);\n            unset($operator[$i]);\n\
    \            $operand = array_values($operand);\n            $operator = array_values($operator);\n\
    \            $i--;\n        }\n        elseif ($operator[$i] == \"-\") {\n   \
    \         $operand[$i] = $operand[$i] - $operand[$i + 1];\n            unset($operand[$i\
    \ + 1", "  if (count($operator) == 0 || count($operand) == 0) return 0;\n  $result\
    \ = $operand[0];\n  for ($i = 0; $i < count($operator); $i++) {\n    $op = $operator[$i];\n\
    \    switch ($op) {\n      case '+':\n        $result += $operand[$i + 1];\n \
    \       break;\n      case '-':\n        $result -= $operand[$i + 1];\n      \
    \  break;\n      case '*':\n        $result *= $operand[$i + 1];\n        break;\n\
    \      case '//':\n        $result = floor($result / $operand[$i + 1]);\n    \
    \    break;\n      case '**':\n        $result = pow($result, $operand[$i + 1]);\n\
    \        break;\n    }\n  }\n  return $result;\n}\necho do_algebra(['+', '*',\
    \ '-'], [2, 3, 4, 5]) . \"\\n\"; // 9\necho do_algebra(['+', '*', '//', '**'],\
    \ [1, 2, 2, 3]); // 3", "\tif(!empty($operator) && !empty($operand)){\n\t\t$result\
    \ = $operand[0];\n\t\tfor($i = 0; $i < count($operator); $i++){\n\t\t\tswitch($operator[$i]){\n\
    \t\t\t\tcase '+':\n\t\t\t\t\t$result += $operand[$i+1];\n\t\t\t\t\tbreak;\n\t\t\
    \t\tcase '-':\n\t\t\t\t\t$result -= $operand[$i+1];\n\t\t\t\t\tbreak;\n\t\t\t\t\
    case '*':\n\t\t\t\t\t$result *= $operand[$i+1];\n\t\t\t\t\tbreak;\n\t\t\t\tcase\
    \ '//':\n\t\t\t\t\t$result /= $operand[$i+1];\n\t\t\t\t\tbreak;\n\t\t\t\tcase\
    \ '**':\n\t\t\t\t\t$result **= $operand[$i+1];\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\
    }\n\t\treturn $result;\n\t}\n\treturn false;\n}\n\necho do_algebra(['+', '*',\
    \ '-'], [2, 3, 4, 5]); // 9\necho \"\\n\";\necho do_algebra(['+', '//', '-'],\
    \ [10, 2, 3, 4]); // 5\necho \"\\n\";\necho do_algebra(['+', '*', '-'], [1, 2,\
    \ 3, 4, 5]); // 8\necho \"\\n\";\necho do_algebra(['+', '*', '-'], [1, 2, 3, 4,\
    \ 5, 6]); // 13\necho \"\\n\";\necho do_algebra(['+', '*', '-'], [0, 2, 3, 4,\
    \ 5, 6]); // 11\necho \"\\n\";\necho do_algebra(['+', '*', '-'], [0, 0, 2, 3,\
    \ 4, 5, 6]); // 15\necho \"\\n\";\necho do_algebra(['+', '*', '-'], [2, 3, 4,\
    \ 0, 5, 6]); // 9\necho \"\\n\";\necho", "    $result = $operand[0];\n    for\
    \ ($i = 0; $i < count($operator); $i++) {\n        switch ($operator[$i]) {\n\
    \            case '+':\n                $result += $operand[$i + 1];\n       \
    \         break;\n            case '-':\n                $result -= $operand[$i\
    \ + 1];\n                break;\n            case '*':\n                $result\
    \ *= $operand[$i + 1];\n                break;\n            case '//':\n     \
    \           $result = floor($result / $operand[$i + 1]);\n                break;\n\
    \            case '**':\n                $result = pow($result, $operand[$i +\
    \ 1]);\n                break;\n        }\n    }\n    return $result;\n}\n\n$operator\
    \ = array('+', '*', '-');\n$operand = array(2, 3, 4, 5);\n$result = do_algebra($operator,\
    \ $operand);\necho $result;", "  $result = $operand[0];\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    switch ($operator[$i]) {\n      case '+':\n        $result += $operand[$i\
    \ + 1];\n        break;\n      case '-':\n        $result -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $result *= $operand[$i + 1];\n     \
    \   break;\n      case '//':\n        $result = floor($result / $operand[$i +\
    \ 1]);\n        break;\n      case '**':\n        $result = pow($result, $operand[$i\
    \ + 1]);\n        break;\n    }\n  }\n  return $result;\n}\n\n$arr = array('+',\
    \ '*', '-');\n$arr2 = array(2, 3, 4, 5);\necho do_algebra($arr, $arr2);", "  if\
    \ (count($operator) != count($operand) - 1) {\n    return \"Can't build algebraic\
    \ expression\";\n  }\n\n  if (count($operator) < 1 || count($operand) < 2) {\n\
    \    return \"Can't build algebraic expression\";\n  }\n\n  $result = $operand[0];\n\
    \  $i = 0;\n  while ($i < count($operator)) {\n    if ($operator[$i] == '+') {\n\
    \      $result += $operand[$i + 1];\n    } else if ($operator[$i] == '-') {\n\
    \      $result -= $operand[$i + 1];\n    } else if ($operator[$i] == '*') {\n\
    \      $result *= $operand[$i + 1];\n    } else if ($operator[$i] == '//') {\n\
    \      $result /= $operand[$i + 1];\n    } else if ($operator[$i] == '**') {\n\
    \      $result **= $operand[$i + 1];\n    } else {\n      return \"Can't build\
    \ algebraic expression\";\n    }\n    $i++;\n  }\n  return $result;\n}\n", " \
    \   //$res = $operand[0];\n    //for($i = 0; $i < count($operator); $i++){\n \
    \   //    if($operator[$i] == \"+\") $res += $operand[$i+1];\n    //    if($operator[$i]\
    \ == \"-\") $res -= $operand[$i+1];\n    //    if($operator[$i] == \"*\") $res\
    \ *= $operand[$i+1];\n    //    if($operator[$i] == \"//\") $res /= $operand[$i+1];\n\
    \    //    if($operator[$i] == \"**\") $res **= $operand[$i+1];\n    //}\n   \
    \ //return $res;\n    \n    //$str = \"\";\n    //for($i = 0; $i < count($operator);\
    \ $i++){\n    //    $str .= $operand[$i].$operator[$i];\n    //}\n    //$str .=\
    \ $operand[count($operand)-1];\n    //return eval('return '.$str.';');\n    \n\
    \    $str = \"\";\n    for($i = 0; $i < count($operator); $i++){\n        $str\
    \ .= $operand[$i].$operator[$i];\n    }\n    $str .= $operand[count($operand)-1];\n\
    \    return eval('return '.$str.';');\n}\n", "    $result = $operand[0];\n   \
    \ for ($i = 0; $i < count($operator); $i++) {\n        if ($operator[$i] == '+')\
    \ {\n            $result += $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == '-') {\n            $result -= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == '*') {\n            $result *= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == '//') {\n            $result = floor($result / $operand[$i + 1]);\n     \
    \   } else if ($operator[$i] == '**') {\n            $result = pow($result, $operand[$i\
    \ + 1]);\n        }\n    }\n    return $result;\n}\n", "  $r = array_shift($operand);\n\
    \  foreach($operator as $i => $op) {\n    switch($op) {\n      case '+':\n   \
    \     $r += $operand[$i];\n        break;\n      case '-':\n        $r -= $operand[$i];\n\
    \        break;\n      case '*':\n        $r *= $operand[$i];\n        break;\n\
    \      case '//':\n        $r = floor($r / $operand[$i]);\n        break;\n  \
    \    case '**':\n        $r = pow($r, $operand[$i]);\n        break;\n    }\n\
    \  }\n  return $r;\n}\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5]) . \"\\n\"\
    ;", "  $i = 0;\n  while ($i < count($operator)) {\n    if ($operator[$i] == \"\
    **\") {\n      $output = pow($operand[$i], $operand[$i + 1]);\n      array_splice($operand,\
    \ $i, 2, $output);\n      array_splice($operator, $i, 1);\n      $i = 0;\n   \
    \ } else {\n      $i++;\n    }\n  }\n  $i = 0;\n  while ($i < count($operator))\
    \ {\n    if ($operator[$i] == \"//\") {\n      $output = intdiv($operand[$i],\
    \ $operand[$i + 1]);\n      array_splice($operand, $i, 2, $output);\n      array_splice($operator,\
    \ $i, 1);\n      $i = 0;\n    } else {\n      $i++;\n    }\n  }\n  $i = 0;\n \
    \ while ($i < count($operator)) {\n    if ($operator[$i] == \"*\") {\n      $output\
    \ = $operand[$i] * $operand[$i + 1];\n      array_splice($operand, $i, 2, $output);\n\
    \      array_splice($operator, $i, 1);\n      $i = 0;\n    } else {\n      $i++;\n\
    \    }\n  }\n  $i = 0;\n  while ($i < count($operator)) {\n    if ($operator[$i]\
    \ == \"+\") {\n      $output = $operand[$i] + $operand[$i + 1];\n      array_splice($operand,\
    \ $i, 2, $output);\n      array_splice($operator, $i, 1);\n      $i = 0;\n   \
    \ } else {\n      $i++;\n    }\n  }\n  $i = 0;\n  while ($i < count($operator))\
    \ {\n    if ($operator[$i] == \"-\") {\n      $output = $operand[$i] - $operand[$i\
    \ + 1];\n      array_splice($operand, $i, 2, $output);\n      array_spl", "  $algebra\
    \ = '';\n  for ($i = 0; $i < count($operand); $i++) {\n    $algebra .= $operand[$i];\n\
    \    if ($i < count($operator)) {\n      $algebra .= $operator[$i];\n    }\n \
    \ }\n  eval(\"\\$result = $algebra;\");\n  return $result;\n}\n\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]);", "    \n}\n", "    for ($i = 0; $i < count($operator);\
    \ $i++) {\n        if ($operator[$i] == '**') {\n            $result = pow($operand[$i],\
    \ $operand[$i + 1]);\n            array_splice($operand, $i, 2, $result);\n  \
    \          array_splice($operator, $i, 1);\n            $i--;\n        }\n   \
    \ }\n    for ($i = 0; $i < count($operator); $i++) {\n        if ($operator[$i]\
    \ == '//') {\n            $result = floor($operand[$i] / $operand[$i + 1]);\n\
    \            array_splice($operand, $i, 2, $result);\n            array_splice($operator,\
    \ $i, 1);\n            $i--;\n        }\n    }\n    for ($i = 0; $i < count($operator);\
    \ $i++) {\n        if ($operator[$i] == '*') {\n            $result = $operand[$i]\
    \ * $operand[$i + 1];\n            array_splice($operand, $i, 2, $result);\n \
    \           array_splice($operator, $i, 1);\n            $i--;\n        }\n  \
    \  }\n    for ($i = 0; $i < count($operator); $i++) {\n        if ($operator[$i]\
    \ == '-') {\n            $result = $operand[$i] - $operand[$i + 1];\n        \
    \    array_splice($operand, $i, 2, $result);\n            array_splice($operator,\
    \ $i, 1);\n            $i--;\n        }\n    }\n    for ($i = 0; $i < count($operator);\
    \ $i++) {\n        if ($operator[$i] == '+') {\n            $result = $operand[$i]\
    \ + $operand[$i + 1];\n            array_splice($operand, $i, 2, $result);\n \
    \           array_splice($operator, $i, 1);\n            $i--;\n        }\n  \
    \  }\n    return $operand[0];\n}", "  $result = $operand[0];\n  for ($i = 0; $i\
    \ < count($operator); $i++) {\n    if ($operator[$i] == '+') {\n      $result\
    \ += $operand[$i + 1];\n    } else if ($operator[$i] == '-') {\n      $result\
    \ -= $operand[$i + 1];\n    } else if ($operator[$i] == '*') {\n      $result\
    \ *= $operand[$i + 1];\n    } else if ($operator[$i] == '//') {\n      $result\
    \ = floor($result / $operand[$i + 1]);\n    } else if ($operator[$i] == '**')\
    \ {\n      $result = pow($result, $operand[$i + 1]);\n    }\n  }\n  return $result;\n\
    }\n$operator = ['+', '*', '-'];\n$operand = [2, 3, 4, 5];\necho do_algebra($operator,\
    \ $operand);", "    // Write your code here...\n    $total = array_shift($operand);\n\
    \    foreach($operator as $key => $op){\n      switch($op){\n        case '+':\n\
    \          $total += $operand[$key];\n          break;\n        case '-':\n  \
    \        $total -= $operand[$key];\n          break;\n        case '*':\n    \
    \      $total *= $operand[$key];\n          break;\n        case '//':\n     \
    \     $total = floor($total / $operand[$key]);\n          break;\n        case\
    \ '**':\n          $total = pow($total, $operand[$key]);\n          break;\n \
    \     }\n    }\n    return $total;\n}\n", "    $i = 0;\n    $res = 0;\n    $first\
    \ = true;\n    while ($i < count($operator)) {\n        if ($first) {\n      \
    \      $res = $operand[$i];\n            $first = false;\n        }\n        $res\
    \ = do_math($res, $operator[$i], $operand[$i + 1]);\n        $i++;\n    }\n  \
    \  return $res;\n}\n", "\t$total = $operand[0];\n\t$last = count($operand);\n\t\
    for ($i = 0; $i < count($operator); $i++) {\n\t\tswitch ($operator[$i]) {\n\t\t\
    \tcase '+':\n\t\t\t\t$total += $operand[$i + 1];\n\t\t\t\tbreak;\n\t\t\tcase '-':\n\
    \t\t\t\t$total -= $operand[$i + 1];\n\t\t\t\tbreak;\n\t\t\tcase '*':\n\t\t\t\t\
    $total *= $operand[$i + 1];\n\t\t\t\tbreak;\n\t\t\tcase '//':\n\t\t\t\t$total\
    \ = intval($total / $operand[$i + 1]);\n\t\t\t\tbreak;\n\t\t\tcase '**':\n\t\t\
    \t\t$total = pow($total, $operand[$i + 1]);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn\
    \ $total;\n}\n\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5]) . \"\\n\";\necho\
    \ do_algebra(['+', '-', '//'], [10, 5, 2, 4]) . \"\\n\";\necho do_algebra(['+',\
    \ '**'], [1, 2, 3, 2]) . \"\\n\";\necho do_algebra(['*', '**'], [2, 3, 3, 2])\
    \ . \"\\n\";\necho do_algebra(['*', '*', '-'], [1, 2, 3, 4, 5]) . \"\\n\";\necho\
    \ do_algebra(['//', '+', '+'], [2, 2, 3, 2, 1]) . \"\\n\";\necho do_algebra(['+',\
    \ '*', '//', '-'], [2, 5, 2, 4, 3]) . \"\\n\";\necho do_algebra(['+', '//', '**'],\
    \ [2, 5, 2, 4, 2]) . \"\\n\";\necho do_algebra(['+', '+', '//', '**'], [2, 4,\
    \ 2, 3, 2]) . \"\\", "  $total = array_shift($operand);\n  foreach ($operator\
    \ as $i => $oper) {\n    $first = $total;\n    $second = $operand[$i];\n    switch\
    \ ($oper) {\n      case '+':\n        $total = $first + $second;\n        break;\n\
    \      case '-':\n        $total = $first - $second;\n        break;\n      case\
    \ '*':\n        $total = $first * $second;\n        break;\n      case '//':\n\
    \        $total = floor($first / $second);\n        break;\n      case '**':\n\
    \        $total = pow($first, $second);\n        break;\n    }\n  }\n  return\
    \ $total;\n}\n", "  if (count($operator) == 0 || count($operand) < 2) {\n    return\
    \ 'error';\n  }\n  $result = $operand[0];\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    switch ($operator[$i]) {\n      case '+':\n        $result += $operand[$i\
    \ + 1];\n        break;\n      case '-':\n        $result -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $result *= $operand[$i + 1];\n     \
    \   break;\n      case '//':\n        $result /= $operand[$i + 1];\n        break;\n\
    \      case '**':\n        $result = pow($result, $operand[$i + 1]);\n       \
    \ break;\n      default:\n        return 'error';\n    }\n  }\n  return $result;\n\
    }\n\n$operator = ['+', '*', '-'];\n$operand = [2, 3, 4, 5];\necho do_algebra($operator,\
    \ $operand);", "  $res = $operand[0];\n  for ($i = 0; $i < count($operator); $i++)\
    \ {\n    switch ($operator[$i]) {\n      case '+':\n        $res += $operand[$i\
    \ + 1];\n        break;\n      case '-':\n        $res -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $res *= $operand[$i + 1];\n        break;\n\
    \      case '//':\n        $res /= $operand[$i + 1];\n        break;\n      case\
    \ '**':\n        $res = pow($res, $operand[$i + 1]);\n        break;\n    }\n\
    \  }\n  return $res;\n}\nprint_r(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\n\
    print_r(do_algebra(['//', '*', '**'], [2, 3, 4, 5]));\nprint_r(do_algebra(['+',\
    \ '*', '**'], [2, 3, 4, 5]));", "    $result = $operand[0];\n    for ($i = 0;\
    \ $i < count($operator); $i++) {\n        switch ($operator[$i]) {\n         \
    \   case '+':\n                $result += $operand[$i + 1];\n                break;\n\
    \            case '-':\n                $result -= $operand[$i + 1];\n       \
    \         break;\n            case '*':\n                $result *= $operand[$i\
    \ + 1];\n                break;\n            case '//':\n                $result\
    \ = floor($result / $operand[$i + 1]);\n                break;\n            case\
    \ '**':\n                $result = pow($result, $operand[$i + 1]);\n         \
    \       break;\n        }\n    }\n    return $result;\n}\n$operator = ['+', '*',\
    \ '-'];\n$operand = [2, 3, 4, 5];\necho do_algebra($operator, $operand);", " \
    \   $result = $operand[0];\n    for ($i = 0; $i < count($operator); $i++) {\n\
    \        switch ($operator[$i]) {\n            case '+':\n                $result\
    \ += $operand[$i + 1];\n                break;\n            case '-':\n      \
    \          $result -= $operand[$i + 1];\n                break;\n            case\
    \ '*':\n                $result *= $operand[$i + 1];\n                break;\n\
    \            case '//':\n                $result = floor($result / $operand[$i\
    \ + 1]);\n                break;\n            case '**':\n                $result\
    \ = pow($result, $operand[$i + 1]);\n                break;\n        }\n    }\n\
    \    return $result;\n}\n", "    $result = 0;\n    $i = 0;\n    while($i < count($operator)){\n\
    \        switch($operator[$i]){\n            case '+':\n                $result\
    \ += $operand[$i+1];\n                break;\n            case '-':\n        \
    \        $result -= $operand[$i+1];\n                break;\n            case\
    \ '*':\n                $result *= $operand[$i+1];\n                break;\n \
    \           case '//':\n                $result = floor($result / $operand[$i+1]);\n\
    \                break;\n            case '**':\n                $result = pow($result,\
    \ $operand[$i+1]);\n                break;\n        }\n        $i++;\n    }\n\
    \    return $result;\n}\n", "    $length = count($operator);\n    $result = $operand[0];\n\
    \    for ($i = 0; $i < $length; $i++) {\n        switch ($operator[$i]) {\n  \
    \          case '+':\n                $result += $operand[$i + 1];\n         \
    \       break;\n            case '-':\n                $result -= $operand[$i\
    \ + 1];\n                break;\n            case '*':\n                $result\
    \ *= $operand[$i + 1];\n                break;\n            case '//':\n     \
    \           $result /= $operand[$i + 1];\n                break;\n           \
    \ case '**':\n                $result = pow($result, $operand[$i + 1]);\n    \
    \            break;\n        }\n    }\n    return $result;\n}\n$result = do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]);\necho $result;", "    $result = array_shift($operand);\n\
    \    for ($i = 0; $i < count($operator); $i++) {\n        switch ($operator[$i])\
    \ {\n            case '+':\n                $result += $operand[$i];\n       \
    \         break;\n            case '-':\n                $result -= $operand[$i];\n\
    \                break;\n            case '*':\n                $result *= $operand[$i];\n\
    \                break;\n            case '//':\n                $result /= $operand[$i];\n\
    \                break;\n            case '**':\n                $result **= $operand[$i];\n\
    \                break;\n        }\n    }\n    return $result;\n}", "  $operand_length\
    \ = count($operand);\n  $result = $operand[0];\n  for ($i = 0; $i < $operand_length\
    \ - 1; $i++) {\n    switch ($operator[$i]) {\n      case '+':\n        $result\
    \ += $operand[$i + 1];\n        break;\n      case '-':\n        $result -= $operand[$i\
    \ + 1];\n        break;\n      case '*':\n        $result *= $operand[$i + 1];\n\
    \        break;\n      case '//':\n        $result = (int)($result / $operand[$i\
    \ + 1]);\n        break;\n      case '**':\n        $result = pow($result, $operand[$i\
    \ + 1]);\n        break;\n    }\n  }\n  return $result;\n}\n", "    $first = array_shift($operand);\n\
    \    $second = array_shift($operand);\n    $operation = array_shift($operator);\n\
    \    $result = operate($first, $second, $operation);\n    while(!empty($operator))\
    \ {\n        $second = array_shift($operand);\n        $operation = array_shift($operator);\n\
    \        $result = operate($result, $second, $operation);\n    }\n    return $result;\n\
    }\n", "    $result = array_shift($operand);\n    foreach ($operator as $i => $op)\
    \ {\n        $o = array_shift($operand);\n        if ($op == \"+\") {\n      \
    \      $result += $o;\n        } elseif ($op == \"-\") {\n            $result\
    \ -= $o;\n        } elseif ($op == \"*\") {\n            $result *= $o;\n    \
    \    } elseif ($op == \"//\") {\n            $result /= $o;\n        } elseif\
    \ ($op == \"**\") {\n            $result **= $o;\n        }\n    }\n    return\
    \ $result;\n}\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5]) . \"\\n\";\necho\
    \ do_algebra(['+', '*', '-'], [2, 2, 2, 2]) . \"\\n\";\necho do_algebra(['+',\
    \ '*', '-'], [0, 1, 2, 3]) . \"\\n\";\necho do_algebra(['+', '*', '-'], [0, 0,\
    \ 1, 0]) . \"\\n\";\necho do_algebra(['+', '*', '-'], [1, 2, 3, 4]) . \"\\n\"\
    ;\necho do_algebra(['+', '*', '-'], [3, 2, 1, 2]) . \"\\n\";\necho do_algebra(['+',\
    \ '*', '-'], [3, 2, 1, 2]) . \"\\n\";\necho do_algebra(['+', '*', '-'], [0, 1,\
    \ 2, 3]) . \"\\n\";\necho do_algebra(['+', '*', '-'], [0, 1, 2, 3]) . \"\\n\"\
    ;\necho do_algebra(['+', '*', '-'], [0, 1, 2, 3]) . \"\\n\";\necho do_algebra(['+',\
    \ '*', '-'], [0, 1, 2, 3]) . \"\\n\";\necho do_algebra(['+', '*', '-'], [0, 1,\
    \ 2, 3]) . \"\\n\";\necho do_algebra(['+', '*',", "  $operand = array_map('intval',\
    \ $operand);\n  for ($i = 0; $i < count($operator); $i++) {\n    if ($operator[$i]\
    \ == '//') {\n      $operand[$i + 1] = intval($operand[$i] / $operand[$i + 1]);\n\
    \    } else if ($operator[$i] == '**') {\n      $operand[$i + 1] = intval(pow($operand[$i],\
    \ $operand[$i + 1]));\n    } else if ($operator[$i] == '*') {\n      $operand[$i\
    \ + 1] = intval($operand[$i] * $operand[$i + 1]);\n    } else if ($operator[$i]\
    \ == '-') {\n      $operand[$i + 1] = intval($operand[$i] - $operand[$i + 1]);\n\
    \    } else if ($operator[$i] == '+') {\n      $operand[$i + 1] = intval($operand[$i]\
    \ + $operand[$i + 1]);\n    }\n  }\n  return $operand[count($operand) - 1];\n}",
  "    $result = 0;\n    $count = count($operand);\n    for ($i = 0; $i < $count;\
    \ $i++) {\n        switch ($operator[$i]) {\n            case '+':\n         \
    \       $result += $operand[$i];\n                break;\n            case '-':\n\
    \                $result -= $operand[$i];\n                break;\n          \
    \  case '*':\n                $result *= $operand[$i];\n                break;\n\
    \            case '//':\n                $result = floor($result / $operand[$i]);\n\
    \                break;\n            case '**':\n                $result = pow($result,\
    \ $operand[$i]);\n                break;\n        }\n    }\n    return $result;\n\
    }\n", "  $result = $operand[0];\n  for ($i = 0; $i < count($operator); $i++) {\n\
    \    switch ($operator[$i]) {\n      case '+':\n        $result += $operand[$i\
    \ + 1];\n        break;\n      case '-':\n        $result -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $result *= $operand[$i + 1];\n     \
    \   break;\n      case '//':\n        $result = (int) ($result / $operand[$i +\
    \ 1]);\n        break;\n      case '**':\n        $result = pow($result, $operand[$i\
    \ + 1]);\n        break;\n    }\n  }\n  return $result;\n}\n\nprint_r(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));", "    $result = $operand[0];\n    for ($i = 0; $i\
    \ < count($operator); $i++) {\n        switch ($operator[$i]) {\n            case\
    \ '+':\n                $result += $operand[$i + 1];\n                break;\n\
    \            case '-':\n                $result -= $operand[$i + 1];\n       \
    \         break;\n            case '*':\n                $result *= $operand[$i\
    \ + 1];\n                break;\n            case '//':\n                $result\
    \ = (int)($result / $operand[$i + 1]);\n                break;\n            case\
    \ '**':\n                $result = (int)pow($result, $operand[$i + 1]);\n    \
    \            break;\n        }\n    }\n    return $result;\n}\n$op = ['+', '*',\
    \ '-'];\n$array = [2, 3, 4, 5];\necho do_algebra($op, $array);", "  if (!is_array($operator)\
    \ || !is_array($operand)) return 'Not an array';\n  $count = count($operator);\n\
    \  $result = $operand[0];\n  for ($i = 0; $i < $count; $i++) {\n    switch ($operator[$i])\
    \ {\n      case '+':\n        $result += $operand[$i + 1];\n        break;\n \
    \     case '-':\n        $result -= $operand[$i + 1];\n        break;\n      case\
    \ '*':\n        $result *= $operand[$i + 1];\n        break;\n      case '//':\n\
    \        $result /= $operand[$i + 1];\n        break;\n      case '**':\n    \
    \    $result **= $operand[$i + 1];\n        break;\n      default:\n        return\
    \ 'Invalid';\n    }\n  }\n  return $result;\n}", "  $result = 0;\n  if ($operator[0]\
    \ == '+') {\n    $result = $operand[0] + $operand[1];\n  } else if ($operator[0]\
    \ == '-') {\n    $result = $operand[0] - $operand[1];\n  } else if ($operator[0]\
    \ == '*') {\n    $result = $operand[0] * $operand[1];\n  } else if ($operator[0]\
    \ == '//') {\n    $result = $operand[0] / $operand[1];\n  } else if ($operator[0]\
    \ == '**') {\n    $result = $operand[0] ** $operand[1];\n  }\n  for ($i = 1; $i\
    \ < count($operator); $i++) {\n    if ($operator[$i] == '+') {\n      $result\
    \ += $operand[$i + 1];\n    } else if ($operator[$i] == '-') {\n      $result\
    \ -= $operand[$i + 1];\n    } else if ($operator[$i] == '*') {\n      $result\
    \ *= $operand[$i + 1];\n    } else if ($operator[$i] == '//') {\n      $result\
    \ /= $operand[$i + 1];\n    } else if ($operator[$i] == '**') {\n      $result\
    \ **= $operand[$i + 1];\n    }\n  }\n  return $result;\n}\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]) . \"\\n\";", "  $arr = [];\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    array_push($arr, $operand[$i]);\n    array_push($arr, $operator[$i]);\n\
    \  }\n  array_push($arr, $operand[count($operand) - 1]);\n  $value = 0;\n  $last_value\
    \ = 0;\n  $total = 0;\n  foreach ($arr as $item) {\n    if (is_int($item)) {\n\
    \      $value = $item;\n    } else {\n      switch ($item) {\n        case '+':\n\
    \          $total += $value;\n          break;\n        case '-':\n          $total\
    \ -= $value;\n          break;\n        case '*':\n          $total *= $value;\n\
    \          break;\n        case '//':\n          $total = floor($total / $value);\n\
    \          break;\n        case '**':\n          $total = pow($total, $value);\n\
    \          break;\n      }\n    }\n  }\n  return $total;\n}\necho do_algebra([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]);\necho \"<br>\";\necho do_algebra([\"+\", \"\
    *\", \"-\"], [2, 3, 4, 5, 6]);\necho \"<br>\";\necho do_algebra([\"+\", \"*\"\
    , \"-\"], [2, 3, 4, 5, 6, 7]);\necho \"<br>\";\necho do_algebra([\"//\", \"*\"\
    , \"-\"], [2, 3, 4, 5]);\necho \"<br>\";\necho do_algebra([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, -5]);\necho \"<br>\";\necho do_algebra([\"+\", \"*\", \"-\"], [2,\
    \ 3, -4, 5]);\necho \"<br>\";\necho do_algebra([\"-\", \"*\", \"-\"], [2, 3, 4,\
    \ 5]);\necho \"<br>\";\necho do_algebra([\"*\", \"*\", \"-\"], [2, 3, 4, 5]);\n\
    echo \"<br", "  $result = $operand[0];\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    switch ($operator[$i]) {\n      case '+':\n        $result += $operand[$i\
    \ + 1];\n        break;\n      case '-':\n        $result -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $result *= $operand[$i + 1];\n     \
    \   break;\n      case '//':\n        $result /= $operand[$i + 1];\n        break;\n\
    \      case '**':\n        $result = pow($result, $operand[$i + 1]);\n       \
    \ break;\n    }\n  }\n  return $result;\n}\n", "    $result = $operand[0];\n \
    \   for ($i = 0; $i < count($operator); $i++) {\n        if ($operator[$i] ==\
    \ '+') {\n            $result += $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == '-') {\n            $result -= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == '*') {\n            $result *= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == '//') {\n            $result = floor($result / $operand[$i + 1]);\n     \
    \   } else if ($operator[$i] == '**') {\n            $result = pow($result, $operand[$i\
    \ + 1]);\n        }\n    }\n    return $result;\n}", "  $result = $operand[0];\n\
    \  for ($i = 0; $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n\
    \      case '+':\n        $result += $operand[$i + 1];\n        break;\n     \
    \ case '-':\n        $result -= $operand[$i + 1];\n        break;\n      case\
    \ '*':\n        $result *= $operand[$i + 1];\n        break;\n      case '//':\n\
    \        $result = floor($result / $operand[$i + 1]);\n        break;\n      case\
    \ '**':\n        $result = pow($result, $operand[$i + 1]);\n        break;\n \
    \   }\n  }\n  return $result;\n}\n\n$operator = ['+', '*', '-'];\n$operand = [2,\
    \ 3, 4, 5];\necho do_algebra($operator, $operand);", "    $operators = ['+', '-',\
    \ '*', '//', '**'];\n    $operatorsKey = array_flip($operators);\n    $operand\
    \ = array_map('intval', $operand);\n    $stack = new SplStack();\n    $stack->push($operand[0]);\n\
    \    for ($i = 0; $i < count($operator); $i++) {\n        if (isset($operatorsKey[$operator[$i]]))\
    \ {\n            $op1 = $stack->pop();\n            $op2 = $operand[$i + 1];\n\
    \            $operatorIndex = $operatorsKey[$operator[$i]];\n            switch\
    \ ($operatorIndex) {\n                case 0:\n                    $stack->push($op1\
    \ + $op2);\n                    break;\n                case 1:\n            \
    \        $stack->push($op1 - $op2);\n                    break;\n            \
    \    case 2:\n                    $stack->push($op1 * $op2);\n               \
    \     break;\n                case 3:\n                    $stack->push(intdiv($op1,\
    \ $op2));\n                    break;\n                case 4:\n             \
    \       $stack->push($op1 ** $op2);\n                    break;\n            }\n\
    \        }\n    }\n    return $stack->pop();\n}\n\necho do_algebra(['+', '*',\
    \ '-'], [2, 3, 4, 5]) . PHP_EOL;\necho do_algebra(['+', '//', '*', '-'], [1, 2,\
    \ 3, 4, 5]) . PHP_EOL;\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6]) . PHP_EOL;\n\
    echo do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6, 7]) . PHP_EOL;\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5, 6, 7, 8]) . PHP_EOL;\necho do_algebra(['+', '*', '-'],\
    \ [2, 3, 4, 5, 6, 7, 8, 9]) . PHP_E", "    // Your Code Here\n    $first = $operand[0];\n\
    \    for($i = 0; $i < count($operator); $i++){\n        switch($operator[$i]){\n\
    \            case '+':\n                $first += $operand[$i+1];\n          \
    \      break;\n            case '-':\n                $first -= $operand[$i+1];\n\
    \                break;\n            case '*':\n                $first *= $operand[$i+1];\n\
    \                break;\n            case '//':\n                $first = floor($first\
    \ / $operand[$i+1]);\n                break;\n            case '**':\n       \
    \         $first = pow($first, $operand[$i+1]);\n                break;\n    \
    \    }\n    }\n    return $first;\n}\necho do_algebra([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]) . \"\\n\";\necho do_algebra([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) .\
    \ \"\\n\";\necho do_algebra([\"//\", \"*\", \"-\"], [1, 2, 3, 4, 5]) . \"\\n\"\
    ;\necho do_algebra([\"+\", \"*\", \"-\"], [1, 2, 3, 4, 5]) . \"\\n\";\necho do_algebra([\"\
    *\", \"*\", \"-\"], [1, 2, 3, 4, 5]) . \"\\n\";\necho do_algebra([\"+\", \"-\"\
    ], [1, 2, 3, 4, 5]) . \"\\n\";", "  $result = $operand[0];\n  for ($i = 0; $i\
    \ < count($operator); $i++) {\n    switch ($operator[$i]) {\n      case '+':\n\
    \        $result += $operand[$i + 1];\n        break;\n      case '-':\n     \
    \   $result -= $operand[$i + 1];\n        break;\n      case '*':\n        $result\
    \ *= $operand[$i + 1];\n        break;\n      case '//':\n        $result = floor($result\
    \ / $operand[$i + 1]);\n        break;\n      case '**':\n        $result = pow($result,\
    \ $operand[$i + 1]);\n        break;\n    }\n  }\n  return $result;\n}\n", " \
    \   $l = count($operand) - 1;\n    $total = $operand[0];\n    for ($i = 0; $i\
    \ < $l; $i++) {\n        switch ($operator[$i]) {\n            case '+':\n   \
    \             $total += $operand[$i + 1];\n                break;\n          \
    \  case '-':\n                $total -= $operand[$i + 1];\n                break;\n\
    \            case '*':\n                $total *= $operand[$i + 1];\n        \
    \        break;\n            case '//':\n                $total = intdiv($total,\
    \ $operand[$i + 1]);\n                break;\n            case '**':\n       \
    \         $total = $total ** $operand[$i + 1];\n                break;\n     \
    \   }\n    }\n    return $total;\n}\n\n$operator = ['+', '*', '-'];\n$operand\
    \ = [2, 3, 4, 5];\n$result = do_algebra($operator, $operand);\nprint_r($result);\n\
    echo \"\\n\";\n\n$operator = ['**', '-', '//'];\n$operand = [5, 3, 4, 2];\n$result\
    \ = do_algebra($operator, $operand);\nprint_r($result);\necho \"\\n\";\n", " \
    \   $result = array_shift($operand);\n    foreach ($operator as $key => $value)\
    \ {\n        switch ($value) {\n            case '+':\n                $result\
    \ += $operand[$key];\n                break;\n            case '-':\n        \
    \        $result -= $operand[$key];\n                break;\n            case\
    \ '*':\n                $result *= $operand[$key];\n                break;\n \
    \           case '//':\n                $result = floor($result / $operand[$key]);\n\
    \                break;\n            case '**':\n                $result = $result\
    \ ** $operand[$key];\n                break;\n        }\n    }\n    return $result;\n\
    }\n$operator = ['+', '*', '-'];\n$operand = [2, 3, 4, 5];\n$result = do_algebra($operator,\
    \ $operand);\necho \"The result is \" . $result;", "  $result = $operand[0];\n\
    \  for ($i = 0; $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n\
    \      case '+':\n        $result += $operand[$i + 1];\n        break;\n     \
    \ case '-':\n        $result -= $operand[$i + 1];\n        break;\n      case\
    \ '*':\n        $result *= $operand[$i + 1];\n        break;\n      case '//':\n\
    \        $result /= $operand[$i + 1];\n        break;\n      case '**':\n    \
    \    $result **= $operand[$i + 1];\n        break;\n    }\n  }\n  return $result;\n\
    }", "  \n  // 2 + 3 * 4 - 5\n  //  $result = $operand[0];\n  \n  // for($i = 0;\
    \ $i < count($operator); $i++) {\n  //   if($operator[$i] == \"+\") {\n  //  \
    \   $result += $operand[$i + 1];\n  //   } else if($operator[$i] == \"-\") {\n\
    \  //     $result -= $operand[$i + 1];\n  //   } else if($operator[$i] == \"*\"\
    ) {\n  //     $result *= $operand[$i + 1];\n  //   } else if($operator[$i] ==\
    \ \"//\") {\n  //     $result = floor($result / $operand[$i + 1]);\n  //   } else\
    \ if($operator[$i] == \"**\") {\n  //     $result = pow($result, $operand[$i +\
    \ 1]);\n  //   }\n  // }\n  \n  // return $result;\n  \n  $expression = $operand[0];\n\
    \  \n  for($i = 0; $i < count($operator); $i++) {\n    $expression .= $operator[$i]\
    \ . $operand[$i + 1];\n  }\n  \n  return eval(\"return $expression;\");\n}\n",
  "  $arr = [];\n  for ($i = 0; $i < count($operator); $i++) {\n    $temp = array_shift($operand);\n\
    \    $temp2 = array_shift($operand);\n    if ($operator[$i] == '+') {\n      $arr[]\
    \ = $temp + $temp2;\n    } elseif ($operator[$i] == '-') {\n      $arr[] = $temp\
    \ - $temp2;\n    } elseif ($operator[$i] == '*') {\n      $arr[] = $temp * $temp2;\n\
    \    } elseif ($operator[$i] == '//') {\n      $arr[] = $temp / $temp2;\n    }\
    \ elseif ($operator[$i] == '**') {\n      $arr[] = $temp ** $temp2;\n    }\n \
    \ }\n  return array_sum($arr);\n}\nprint_r(do_algebra(['+', '*', '-'], [2, 3,\
    \ 4, 5])); // 9\nprint_r(do_algebra(['+', '*', '-'], [5, 10, 2, 4])); // 39\n\
    print_r(do_algebra(['+', '//', '*', '**', '-'], [16, 4, 2, 2, 5])); // 31", "\n}",
  "  $operators = array_merge(array_fill(0, count($operand) - 1, array_shift($operator)),\
    \ $operator);\n  $result = array_shift($operand);\n  foreach ($operators as $key\
    \ => $operator) {\n    $result = calculate($result, $operator, $operand[$key]);\n\
    \  }\n  return $result;\n}\n", "  return eval(\"return $operand[0]\".implode(\"\
    \", array_map(function($op, $opand) { return \"$op $opand\"; }, $operator, array_slice($operand,\
    \ 1))) . \";\");\n}", "    $result = $operand[0];\n    $i = 0;\n    foreach ($operator\
    \ as $op) {\n        $result = do_op($result, $op, $operand[$i + 1]);\n      \
    \  $i++;\n    }\n    return $result;\n}\n", "    $result = $operand[0];\n    for\
    \ ($i = 0; $i < count($operator); $i++) {\n        if ($operator[$i] == '+') {\n\
    \            $result += $operand[$i + 1];\n        } else if ($operator[$i] ==\
    \ '-') {\n            $result -= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == '*') {\n            $result *= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == '//') {\n            $result = floor($result / $operand[$i + 1]);\n     \
    \   } else if ($operator[$i] == '**') {\n            $result = pow($result, $operand[$i\
    \ + 1]);\n        }\n    }\n    return $result;\n}", "\t$result = $operand[0];\n\
    \tfor ($i = 0; $i < count($operator); $i++) {\n\t\tif ($operator[$i] == \"+\"\
    ) {\n\t\t\t$result += $operand[$i + 1];\n\t\t} else if ($operator[$i] == \"-\"\
    ) {\n\t\t\t$result -= $operand[$i + 1];\n\t\t} else if ($operator[$i] == \"*\"\
    ) {\n\t\t\t$result *= $operand[$i + 1];\n\t\t} else if ($operator[$i] == \"//\"\
    ) {\n\t\t\t$result = floor($result / $operand[$i + 1]);\n\t\t} else if ($operator[$i]\
    \ == \"**\") {\n\t\t\t$result = pow($result, $operand[$i + 1]);\n\t\t}\n\t}\n\t\
    return $result;\n}\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5]) . \"\\n\";",
  "  $result = 0;\n  for ($i = 0; $i < count($operator); $i++) {\n    switch ($operator[$i])\
    \ {\n      case '+':\n        $result += $operand[$i + 1];\n        break;\n \
    \     case '-':\n        $result -= $operand[$i + 1];\n        break;\n      case\
    \ '*':\n        $result *= $operand[$i + 1];\n        break;\n      case '//':\n\
    \        $result /= $operand[$i + 1];\n        break;\n      case '**':\n    \
    \    $result = pow($result, $operand[$i + 1]);\n        break;\n    }\n  }\n \
    \ return $result;\n}\n\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5]);", "\t\
    $result = $operand[0];\n\t$length = count($operand);\n\tfor ($i = 1; $i < $length;\
    \ $i++) {\n\t\tswitch ($operator[$i - 1]) {\n\t\t\tcase '+':\n\t\t\t\t$result\
    \ += $operand[$i];\n\t\t\t\tbreak;\n\t\t\tcase '-':\n\t\t\t\t$result -= $operand[$i];\n\
    \t\t\t\tbreak;\n\t\t\tcase '*':\n\t\t\t\t$result *= $operand[$i];\n\t\t\t\tbreak;\n\
    \t\t\tcase '//':\n\t\t\t\t$result = floor($result / $operand[$i]);\n\t\t\t\tbreak;\n\
    \t\t\tcase '**':\n\t\t\t\t$result = pow($result, $operand[$i]);\n\t\t\t\tbreak;\n\
    \t\t}\n\t}\n\treturn $result;\n}\n", "  $result = $operand[0];\n  for ($i = 0;\
    \ $i < count($operator); $i++) {\n    if ($operator[$i] == '+') {\n      $result\
    \ += $operand[$i + 1];\n    } else if ($operator[$i] == '-') {\n      $result\
    \ -= $operand[$i + 1];\n    } else if ($operator[$i] == '*') {\n      $result\
    \ *= $operand[$i + 1];\n    } else if ($operator[$i] == '//') {\n      $result\
    \ = floor($result / $operand[$i + 1]);\n    } else if ($operator[$i] == '**')\
    \ {\n      $result = pow($result, $operand[$i + 1]);\n    }\n  }\n  return $result;\n\
    }\n\nprint_r(do_algebra([\"+\", \"*\", \"-\"], [2, 3, 4, 5]));", "    $result\
    \ = $operand[0];\n    for ($i = 0; $i < count($operator); $i++) {\n        switch\
    \ ($operator[$i]) {\n            case '+':\n                $result += $operand[$i\
    \ + 1];\n                break;\n            case '-':\n                $result\
    \ -= $operand[$i + 1];\n                break;\n            case '*':\n      \
    \          $result *= $operand[$i + 1];\n                break;\n            case\
    \ '//':\n                $result = floor($result / $operand[$i + 1]);\n      \
    \          break;\n            case '**':\n                $result = pow($result,\
    \ $operand[$i + 1]);\n                break;\n        }\n    }\n    return $result;\n\
    }", "\t$value = $operand[0];\n\tfor ($i = 0; $i < count($operator); $i++) {\n\t\
    \t$value = calulate($value, $operator[$i], $operand[$i + 1]);\n\t}\n\treturn $value;\n\
    }\n", "    $total = $operand[0];\n    for ($i = 0; $i < count($operator); $i++)\
    \ {\n        if ($operator[$i] == \"+\") {\n            $total += $operand[$i\
    \ + 1];\n        } elseif ($operator[$i] == \"-\") {\n            $total -= $operand[$i\
    \ + 1];\n        } elseif ($operator[$i] == \"*\") {\n            $total *= $operand[$i\
    \ + 1];\n        } elseif ($operator[$i] == \"//\") {\n            $total = floor($total\
    \ / $operand[$i + 1]);\n        } elseif ($operator[$i] == \"**\") {\n       \
    \     $total = pow($total, $operand[$i + 1]);\n        }\n    }\n    return $total;\n\
    }", "    $result = array_shift($operand);\n    foreach ($operator as $key => $value)\
    \ {\n        $result = $value($result, $operand[$key]);\n    }\n    return $result;\n\
    }\n\n$operator = array(\n    function($a, $b) {\n        return $a + $b;\n   \
    \ },\n    function($a, $b) {\n        return $a * $b;\n    },\n    function($a,\
    \ $b) {\n        return $a - $b;\n    }\n);\n\n$operand = array(2, 3, 4, 5);\n\
    \necho do_algebra($operator, $operand);", "    $result = $operand[0];\n    for\
    \ ($i = 0; $i < count($operator); $i++) {\n        switch ($operator[$i]) {\n\
    \            case '+':\n                $result += $operand[$i + 1];\n       \
    \         break;\n            case '-':\n                $result -= $operand[$i\
    \ + 1];\n                break;\n            case '*':\n                $result\
    \ *= $operand[$i + 1];\n                break;\n            case '//':\n     \
    \           $result /= $operand[$i + 1];\n                break;\n           \
    \ case '**':\n                $result **= $operand[$i + 1];\n                break;\n\
    \        }\n    }\n    return $result;\n}\n", "\t$result = $operand[0];\n\t$i\
    \ = 0;\n\t$len = count($operator);\n\twhile ($i < $len) {\n\t\tswitch ($operator[$i])\
    \ {\n\t\t\tcase '+':\n\t\t\t\t$result += $operand[$i + 1];\n\t\t\t\tbreak;\n\t\
    \t\tcase '-':\n\t\t\t\t$result -= $operand[$i + 1];\n\t\t\t\tbreak;\n\t\t\tcase\
    \ '*':\n\t\t\t\t$result *= $operand[$i + 1];\n\t\t\t\tbreak;\n\t\t\tcase '//':\n\
    \t\t\t\t$result /= $operand[$i + 1];\n\t\t\t\tbreak;\n\t\t\tcase '**':\n\t\t\t\
    \t$result **= $operand[$i + 1];\n\t\t\t\tbreak;\n\t\t}\n\t\t$i++;\n\t}\n\treturn\
    \ $result;\n}\n", "  $res = $operand[0];\n  $i = 0;\n  foreach($operator as $op)\
    \ {\n    $res = calc($res, $operand[$i+1], $op);\n    $i++;\n  }\n  return $res;\n\
    }\n", "    $result = $operand[0];\n    foreach($operator as $value) {\n      \
    \  switch($value) {\n            case '+':\n                $result += $operand[1];\n\
    \                break;\n            case '-':\n                $result -= $operand[1];\n\
    \                break;\n            case '*':\n                $result *= $operand[1];\n\
    \                break;\n            case '//':\n                $result /= $operand[1];\n\
    \                break;\n            case '**':\n                $result **= $operand[1];\n\
    \                break;\n        }\n        array_shift($operand);\n    }\n  \
    \  return $result;\n}", "    $result = $operand[0];\n    for ($i = 0; $i < count($operator);\
    \ $i++) {\n        switch ($operator[$i]) {\n            case '+':\n         \
    \       $result += $operand[$i + 1];\n                break;\n            case\
    \ '-':\n                $result -= $operand[$i + 1];\n                break;\n\
    \            case '*':\n                $result *= $operand[$i + 1];\n       \
    \         break;\n            case '//':\n                $result = floor($result\
    \ / $operand[$i + 1]);\n                break;\n            case '**':\n     \
    \           $result = pow($result, $operand[$i + 1]);\n                break;\n\
    \        }\n    }\n    return $result;\n}\n\necho do_algebra(['+', '*', '-'],\
    \ [2, 3, 4, 5]);", "    for ($i = 0; $i < count($operator); $i++) {\n        switch\
    \ ($operator[$i]) {\n            case '+':\n                $result = $operand[$i]\
    \ + $operand[$i + 1];\n                break;\n            case '-':\n       \
    \         $result = $operand[$i] - $operand[$i + 1];\n                break;\n\
    \            case '*':\n                $result = $operand[$i] * $operand[$i +\
    \ 1];\n                break;\n            case '//':\n                $result\
    \ = floor($operand[$i] / $operand[$i + 1]);\n                break;\n        \
    \    case '**':\n                $result = pow($operand[$i], $operand[$i + 1]);\n\
    \                break;\n        }\n        $operand[$i + 1] = $result;\n    }\n\
    \    return $result;\n}", "\t$i = 0;\n\t$result = $operand[$i];\n\twhile($i <\
    \ count($operator)){\n\t\t$i++;\n\t\tswitch($operator[$i - 1]){\n\t\t\tcase '+':\n\
    \t\t\t\t$result += $operand[$i];\n\t\t\t\tbreak;\n\t\t\tcase '-':\n\t\t\t\t$result\
    \ -= $operand[$i];\n\t\t\t\tbreak;\n\t\t\tcase '*':\n\t\t\t\t$result *= $operand[$i];\n\
    \t\t\t\tbreak;\n\t\t\tcase '//':\n\t\t\t\t$result = floor($result / $operand[$i]);\n\
    \t\t\t\tbreak;\n\t\t\tcase '**':\n\t\t\t\t$result = pow($result, $operand[$i]);\n\
    \t\t\t\tbreak;\n\t\t}\n\t}\n\treturn $result;\n}", "\t$len = count($operand);\n\
    \t$res = $operand[0];\n\tfor ($i = 1; $i < $len; $i++) {\n\t\tswitch ($operator[$i\
    \ - 1]) {\n\t\t\tcase '+':\n\t\t\t\t$res += $operand[$i];\n\t\t\t\tbreak;\n\t\t\
    \tcase '-':\n\t\t\t\t$res -= $operand[$i];\n\t\t\t\tbreak;\n\t\t\tcase '*':\n\t\
    \t\t\t$res *= $operand[$i];\n\t\t\t\tbreak;\n\t\t\tcase '//':\n\t\t\t\t$res =\
    \ intval($res / $operand[$i]);\n\t\t\t\tbreak;\n\t\t\tcase '**':\n\t\t\t\t$res\
    \ = pow($res, $operand[$i]);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn $res;\n}\n\
    echo do_algebra(['+', '*', '-'], [2, 3, 4, 5]) . PHP_EOL; // 9\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5, 6]) . PHP_EOL; // -1\necho do_algebra(['+', '*', '-',\
    \ '*'], [2, 3, 4, 5, 6]) . PHP_EOL; // 2\necho do_algebra(['+', '-', '**'], [2,\
    \ 3, 4, 5]) . PHP_EOL; // -81\necho do_algebra(['//', '**', '*'], [2, 3, 4, 5])\
    \ . PHP_EOL; // 25\necho do_algebra(['//', '**', '*'], [2, 3, 4, 5, 6]) . PHP_EOL;\
    \ // 150\necho do_algebra(['//', '**', '*', '//'], [2, 3, 4, 5, 6]) . PHP_EOL;\
    \ // 5\necho do_algebra(['//', '**', '*', '+'], [2, 3, 4, 5, 6]) . PHP", "  $result\
    \ = $operand[0];\n  for ($i = 0; $i < count($operator); $i++) {\n    switch ($operator[$i])\
    \ {\n      case '+':\n        $result += $operand[$i + 1];\n        break;\n \
    \     case '-':\n        $result -= $operand[$i + 1];\n        break;\n      case\
    \ '*':\n        $result *= $operand[$i + 1];\n        break;\n      case '//':\n\
    \        $result = floor($result / $operand[$i + 1]);\n        break;\n      case\
    \ '**':\n        $result = pow($result, $operand[$i + 1]);\n        break;\n \
    \   }\n  }\n  return $result;\n}\n$operand = [2, 3, 4, 5];\n$operator = ['+',\
    \ '*', '-'];\necho do_algebra($operator, $operand);", "  $result = $operand[0];\n\
    \  for ($i = 0; $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n\
    \      case '+':\n        $result += $operand[$i + 1];\n        break;\n     \
    \ case '-':\n        $result -= $operand[$i + 1];\n        break;\n      case\
    \ '*':\n        $result *= $operand[$i + 1];\n        break;\n      case '//':\n\
    \        $result /= $operand[$i + 1];\n        break;\n      case '**':\n    \
    \    $result **= $operand[$i + 1];\n        break;\n    }\n  }\n  return $result;\n\
    }\n\ndo_algebra(['+', '*', '-'], [2, 3, 4, 5]); // 9\ndo_algebra(['//', '*', '+'],\
    \ [5, 2, 4, 8]); // 6\ndo_algebra(['//', '*', '+'], [16, 2, 2, 1]); // 8\ndo_algebra(['//',\
    \ '*', '+'], [12, 3, 2, 5]); // 4\ndo_algebra(['**', '+', '*'], [5, 2, 4, 2]);\
    \ // 9\ndo_algebra(['**', '+', '*'], [2, 3, 4, 2]); // 18\ndo_algebra(['**', '+',\
    \ '*'], [2, 3, 2, 2]); // 14\ndo_algebra(['**', '+', '*'], [2, 2, 2, 2]); // 10\n\
    do_algebra(['**', '+', '*'], [3, 2, 3, 2]); // 17\ndo_algebra(['**', '+', '*'],\
    \ [3, 2, 2, 2]); // 13\ndo_algebra(['**', '+', '*'], [2, 2, 2, 3]); // 13\ndo_algebra(['**',\
    \ '+', '*'], [2, 3, 2, 3]); // 17\ndo_algebra(['**', '+", "    $result = $operand[0];\n\
    \    $length = count($operand);\n    for ($i = 1; $i < $length; $i++) {\n    \
    \    switch ($operator[$i - 1]) {\n            case '+':\n                $result\
    \ += $operand[$i];\n                break;\n            case '-':\n          \
    \      $result -= $operand[$i];\n                break;\n            case '*':\n\
    \                $result *= $operand[$i];\n                break;\n          \
    \  case '//':\n                $result = intval($result / $operand[$i]);\n   \
    \             break;\n            case '**':\n                $result = intval(pow($result,\
    \ $operand[$i]));\n                break;\n        }\n    }\n    return $result;\n\
    }", "  if(count($operator) == count($operand) - 1) {\n    $result = $operand[0];\n\
    \    for($i = 0; $i < count($operator); $i++) {\n      if($operator[$i] == '+')\
    \ {\n        $result += $operand[$i + 1];\n      } else if($operator[$i] == '-')\
    \ {\n        $result -= $operand[$i + 1];\n      } else if($operator[$i] == '*')\
    \ {\n        $result *= $operand[$i + 1];\n      } else if($operator[$i] == '//')\
    \ {\n        $result /= $operand[$i + 1];\n      } else if($operator[$i] == '**')\
    \ {\n        $result **= $operand[$i + 1];\n      }\n    }\n    return $result;\n\
    \  }\n}\n", "    $result = $operand[0];\n    $size = count($operand);\n    for\
    \ ($i = 1; $i < $size; $i++) {\n        switch ($operator[$i - 1]) {\n       \
    \     case '+':\n                $result += $operand[$i];\n                break;\n\
    \            case '-':\n                $result -= $operand[$i];\n           \
    \     break;\n            case '*':\n                $result *= $operand[$i];\n\
    \                break;\n            case '//':\n                $result = floor($result\
    \ / $operand[$i]);\n                break;\n            case '**':\n         \
    \       $result = pow($result, $operand[$i]);\n                break;\n      \
    \  }\n    }\n    return $result;\n}\n\necho do_algebra(['+', '*', '-'], [2, 3,\
    \ 4, 5]) . \"\\n\";\necho do_algebra(['+', '*', '//', '-'], [2, 3, 4, 5]) . \"\
    \\n\";\necho do_algebra(['+', '*', '//', '-', '**'], [2, 3, 4, 5, 2]) . \"\\n\"\
    ;", "\t$ans = $operand[0];\n\tfor($i = 0; $i < count($operator); $i++) {\n\t\t\
    switch($operator[$i]) {\n\t\t\tcase '+':\n\t\t\t\t$ans += $operand[$i + 1];\n\t\
    \t\t\tbreak;\n\t\t\tcase '-':\n\t\t\t\t$ans -= $operand[$i + 1];\n\t\t\t\tbreak;\n\
    \t\t\tcase '*':\n\t\t\t\t$ans *= $operand[$i + 1];\n\t\t\t\tbreak;\n\t\t\tcase\
    \ '//':\n\t\t\t\t$ans = floor($ans / $operand[$i + 1]);\n\t\t\t\tbreak;\n\t\t\t\
    case '**':\n\t\t\t\t$ans = pow($ans, $operand[$i + 1]);\n\t\t\t\tbreak;\n\t\t\
    }\n\t}\n\treturn $ans;\n}\n\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5]);",
  "    for ($i = 0; $i < count($operator); $i++) {\n        switch ($operator[$i])\
    \ {\n            case '+':\n                $operand[$i + 1] = $operand[$i] +\
    \ $operand[$i + 1];\n                break;\n            case '-':\n         \
    \       $operand[$i + 1] = $operand[$i] - $operand[$i + 1];\n                break;\n\
    \            case '*':\n                $operand[$i + 1] = $operand[$i] * $operand[$i\
    \ + 1];\n                break;\n            case '//':\n                $operand[$i\
    \ + 1] = floor($operand[$i] / $operand[$i + 1]);\n                break;\n   \
    \         case '**':\n                $operand[$i + 1] = pow($operand[$i], $operand[$i\
    \ + 1]);\n                break;\n        }\n    }\n    return $operand[count($operand)\
    \ - 1];\n}\n", "  $numOfOpnd = count($operand);\n  $numOfOp = count($operator);\n\
    \  if($numOfOpnd < 2 || $numOfOp != $numOfOpnd - 1) return null;\n  $res = $operand[0];\n\
    \  for($i = 0; $i < $numOfOp; $i++) {\n    switch($operator[$i]) {\n      case\
    \ '+':\n        $res += $operand[$i + 1];\n        break;\n      case '-':\n \
    \       $res -= $operand[$i + 1];\n        break;\n      case '*':\n        $res\
    \ *= $operand[$i + 1];\n        break;\n      case '//':\n        $res = intval($res\
    \ / $operand[$i + 1]);\n        break;\n      case '**':\n        $res = pow($res,\
    \ $operand[$i + 1]);\n        break;\n      default:\n        return null;\n \
    \   }\n  }\n  return $res;\n}\n\n$opr = ['+', '*', '-', '**', '//'];\n$opd = [1,\
    \ 2, 3, 4, 5];\necho do_algebra($opr, $opd);", "  $result = $operand[0];\n  for\
    \ ($i = 0; $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n    \
    \  case '+':\n        $result += $operand[$i + 1];\n        break;\n      case\
    \ '-':\n        $result -= $operand[$i + 1];\n        break;\n      case '*':\n\
    \        $result *= $operand[$i + 1];\n        break;\n      case '//':\n    \
    \    $result = floor($result / $operand[$i + 1]);\n        break;\n      case\
    \ '**':\n        $result = pow($result, $operand[$i + 1]);\n        break;\n \
    \   }\n  }\n  return $result;\n}\n\n$operator = ['+', '*', '-'];\n$operand = [2,\
    \ 3, 4, 5];\necho do_algebra($operator, $operand);", "   $result = 0;\n   $operator_index\
    \ = 0;\n   for($i = 0; $i < count($operand); $i++) {\n     if($i == 0) {\n   \
    \    $result = $operand[$i];\n     } else {\n       switch($operator[$operator_index])\
    \ {\n         case '+':\n           $result += $operand[$i];\n           break;\n\
    \         case '-':\n           $result -= $operand[$i];\n           break;\n\
    \         case '*':\n           $result *= $operand[$i];\n           break;\n\
    \         case '//':\n           $result = (int)($result / $operand[$i]);\n  \
    \         break;\n         case '**':\n           $result = pow($result, $operand[$i]);\n\
    \           break;\n       }\n       $operator_index++;\n     }\n   }\n   return\
    \ $result;\n}", "    // Write your code here\n    $result = $operand[0];\n   \
    \ for($i = 0; $i < count($operator); $i++){\n        if($operator[$i] == '+'){\n\
    \            $result += $operand[$i+1];\n        }else if($operator[$i] == '-'){\n\
    \            $result -= $operand[$i+1];\n        }else if($operator[$i] == '*'){\n\
    \            $result *= $operand[$i+1];\n        }else if($operator[$i] == '//'){\n\
    \            $result = floor($result / $operand[$i+1]);\n        }else if($operator[$i]\
    \ == '**'){\n            $result = pow($result, $operand[$i+1]);\n        }\n\
    \    }\n    return $result;\n}\n", "  $ans = $operand[0];\n  for($i = 0; $i <\
    \ count($operator); $i++){\n    if($operator[$i] == '+'){\n      $ans += $operand[$i+1];\n\
    \    }\n    elseif($operator[$i] == '-'){\n      $ans -= $operand[$i+1];\n   \
    \ }\n    elseif($operator[$i] == '*'){\n      $ans *= $operand[$i+1];\n    }\n\
    \    elseif($operator[$i] == '//'){\n      $ans /= $operand[$i+1];\n    }\n  \
    \  elseif($operator[$i] == '**'){\n      $ans = pow($ans, $operand[$i+1]);\n \
    \   }\n  }\n  return $ans;\n}", "    // Write your code here\n    $result = $operand[0];\n\
    \    for($i = 0; $i < count($operator); $i++){\n        if($operator[$i] == '+'){\n\
    \            $result += $operand[$i+1];\n        }else if($operator[$i] == '-'){\n\
    \            $result -= $operand[$i+1];\n        }else if($operator[$i] == '*'){\n\
    \            $result *= $operand[$i+1];\n        }else if($operator[$i] == '//'){\n\
    \            $result = floor($result / $operand[$i+1]);\n        }else if($operator[$i]\
    \ == '**'){\n            $result = pow($result, $operand[$i+1]);\n        }\n\
    \    }\n    return $result;\n}\n", "  // your code\n}\n", "    $result = $operand[0];\n\
    \    for ($i = 0; $i < count($operator); $i++) {\n        switch ($operator[$i])\
    \ {\n            case '+':\n                $result += $operand[$i + 1];\n   \
    \             break;\n            case '-':\n                $result -= $operand[$i\
    \ + 1];\n                break;\n            case '*':\n                $result\
    \ *= $operand[$i + 1];\n                break;\n            case '//':\n     \
    \           $result /= $operand[$i + 1];\n                break;\n           \
    \ case '**':\n                $result = pow($result, $operand[$i + 1]);\n    \
    \            break;\n        }\n    }\n    return $result;\n}\nprint_r(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));\nprint_r(do_algebra(['+', '-', '*'], [2, 3, 4, 5]));\n\
    print_r(do_algebra(['+', '*', '-'], [2, 3, 4, 5, 2]));\n", "    $res = $operand[0];\n\
    \    foreach ($operator as $k => $v) {\n        switch ($v) {\n            case\
    \ '+':\n                $res += $operand[$k + 1];\n                break;\n  \
    \          case '-':\n                $res -= $operand[$k + 1];\n            \
    \    break;\n            case '*':\n                $res *= $operand[$k + 1];\n\
    \                break;\n            case '//':\n                $res /= $operand[$k\
    \ + 1];\n                break;\n            case '**':\n                $res\
    \ = pow($res, $operand[$k + 1]);\n                break;\n        }\n    }\n \
    \   return $res;\n}\n", "  $result = $operand[0];\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    if ($operator[$i] == '+') {\n      $result += $operand[$i + 1];\n\
    \    } else if ($operator[$i] == '-') {\n      $result -= $operand[$i + 1];\n\
    \    } else if ($operator[$i] == '*') {\n      $result *= $operand[$i + 1];\n\
    \    } else if ($operator[$i] == '//') {\n      $result = floor($result / $operand[$i\
    \ + 1]);\n    } else if ($operator[$i] == '**') {\n      $result = pow($result,\
    \ $operand[$i + 1]);\n    }\n  }\n  return $result;\n}\nprint_r(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));\nprint_r(do_algebra(['+', '*', '**'], [2, 3, 4, 5]));\n\
    print_r(do_algebra(['+', '*', '//'], [2, 3, 4, 5]));\nprint_r(do_algebra(['-',\
    \ '*', '//'], [4, 3, 4, 5]));", "\t\n}", "  $operator_count = count($operator);\n\
    \  $operand_count = count($operand);\n  $expression = \"\";\n  for ($i = 0; $i\
    \ < $operator_count; $i++) {\n    $expression .= $operand[$i] . $operator[$i];\n\
    \  }\n  $expression .= $operand[$operand_count - 1];\n  return eval(\"return \"\
    \ . $expression . \";\");\n}\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5]) .\
    \ \"\\n\"; // 9\necho do_algebra(['//', '**'], [3, 5, 4]) . \"\\n\"; // 4\necho\
    \ do_algebra(['+', '+', '+', '+'], [2, 3, 4, 5]) . \"\\n\"; // 14", "  if(count($operator)\
    \ !== count($operand) - 1) return 'Wrong input';\n  if(count($operator) === 0\
    \ || count($operand) < 2) return 'Wrong input';\n  $sum = $operand[0];\n  for($i\
    \ = 0; $i < count($operator); $i++) {\n    switch($operator[$i]) {\n      case\
    \ '+':\n        $sum += $operand[$i + 1];\n        break;\n      case '-':\n \
    \       $sum -= $operand[$i + 1];\n        break;\n      case '*':\n        $sum\
    \ *= $operand[$i + 1];\n        break;\n      case '//':\n        $sum = floor($sum\
    \ / $operand[$i + 1]);\n        break;\n      case '**':\n        $sum = $sum\
    \ ** $operand[$i + 1];\n        break;\n      default:\n        return 'Wrong\
    \ input';\n    }\n  }\n  return $sum;\n}\necho do_algebra(['*', '//', '**'], [2,\
    \ 3, 4, 5]) . PHP_EOL;\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5]) . PHP_EOL;\n\
    echo do_algebra(['+', '*', '+'], [2, 3, 4, 5]) . PHP_EOL;\necho do_algebra(['*',\
    \ '*', '*'], [2, 3, 4, 5]) . PHP_EOL;\necho do_algebra(['*', '*', '*'], [2, 3,\
    \ 4, 5, 6]) . PHP_EOL;\necho do_algebra(['*', '*', '*'], [2, 3, 4]) . PHP_EOL;\n\
    echo do_algebra(['*', '*', '*'], [2, 3]) . PHP_EOL;\necho do_algebra(['*', '*',\
    \ '*'], [2]) . PHP_EOL;\necho do_algebra(['*', '*', '*'], []) . PHP_EOL", "  //\
    \ Your code here\n  $result = $operand[0];\n  for($i = 0; $i < count($operator);\
    \ $i++){\n    switch($operator[$i]){\n      case '+':\n        $result += $operand[$i+1];\n\
    \        break;\n      case '-':\n        $result -= $operand[$i+1];\n       \
    \ break;\n      case '*':\n        $result *= $operand[$i+1];\n        break;\n\
    \      case '//':\n        $result = intval($result / $operand[$i+1]);\n     \
    \   break;\n      case '**':\n        $result = pow($result, $operand[$i+1]);\n\
    \        break;\n    }\n  }\n  return $result;\n}", "  $result = $operand[0];\n\
    \  for ($i = 0; $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n\
    \      case '+':\n        $result += $operand[$i + 1];\n        break;\n     \
    \ case '-':\n        $result -= $operand[$i + 1];\n        break;\n      case\
    \ '*':\n        $result *= $operand[$i + 1];\n        break;\n      case '//':\n\
    \        $result = floor($result / $operand[$i + 1]);\n        break;\n      case\
    \ '**':\n        $result = pow($result, $operand[$i + 1]);\n        break;\n \
    \   }\n  }\n  return $result;\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
