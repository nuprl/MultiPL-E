name: HumanEval_99_closest_integer
language: php
prompt: "<?php\n// Create a function that takes a value (string) representing a number\n\
  // and returns the closest integer to it. If the number is equidistant\n// from\
  \ two integers, round it away from zero.\n// Examples\n// >>> closest_integer(\"\
  10\")\n// 10\n// >>> closest_integer(\"15.3\")\n// 15\n// Note:\n// Rounding away\
  \ from zero means that if the given number is equidistant\n// from two integers,\
  \ the one you should return is the one that is the\n// farthest from zero. For example\
  \ closest_integer(\"14.5\") should\n// return 15 and closest_integer(\"-14.5\")\
  \ should return -15.\nfunction closest_integer($value) {\n"
tests: "function candidate(...$args) {\n    return closest_integer(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(\"10\") !== 10) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"14.5\") !== 15) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"-15.5\") !== -16) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"15.3\") !== 15) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"0\") !== 0) { throw new Exception(\"Test\
  \ failed!\"); }\n}\n\ntest();"
completions: ["    $value_parts = explode('.', $value);\n    if (count($value_parts)\
    \ === 1) {\n        return intval($value);\n    } else {\n        $decimal = intval($value_parts[1][0]);\n\
    \        if ($decimal >= 5) {\n            return intval($value_parts[0]) + 1;\n\
    \        } else {\n            return intval($value_parts[0]);\n        }\n  \
    \  }\n}\n", "    $val = (int) $value;\n    if ($value - $val >= 0.5) {\n     \
    \   return $val + 1;\n    } else {\n        return $val;\n    }\n}", "\t$number\
    \ = explode(\".\", $value);\n\tif (strpos($value, \".\") !== false) {\n\t\tif\
    \ ($number[1] >= 5) {\n\t\t\treturn ++$number[0];\n\t\t} else {\n\t\t\treturn\
    \ $number[0];\n\t\t}\n\t} else {\n\t\treturn $number[0];\n\t}\n}\n\necho closest_integer(\"\
    10\") . \"<br />\";\necho closest_integer(\"15.3\") . \"<br />\";\necho closest_integer(\"\
    -14.5\") . \"<br />\";", "  $integer = floor($value);\n  $decimal = $value - $integer;\n\
    \  if ($decimal > 0.5) {\n    return $integer + 1;\n  } elseif ($decimal < 0.5)\
    \ {\n    return $integer;\n  } else {\n    return $integer;\n  }\n}", "  return\
    \ round($value);\n}\n", "    return ceil($value - 0.5);\n}\n\n$output = closest_integer(\"\
    10\");\necho $output;", "  return 0;\n}\n\necho closest_integer(\"10\");\necho\
    \ \"\\n\";\necho closest_integer(\"15.3\");\necho \"\\n\";\necho closest_integer(\"\
    14.5\");\necho \"\\n\";\necho closest_integer(\"-14.5\");\necho \"\\n\";", " \
    \ //enter code here\n}\n", "\t$floored = floor($value);\n\t$ceiled = ceil($value);\n\
    \tif (abs($value - $floored) > abs($value - $ceiled)) {\n\t\treturn $ceiled;\n\
    \t} elseif (abs($value - $floored) < abs($value - $ceiled)) {\n\t\treturn $floored;\n\
    \t} else {\n\t\tif ($value > 0) {\n\t\t\treturn $ceiled;\n\t\t} else {\n\t\t\t\
    return $floored;\n\t\t}\n\t}\n}", "    $value_arr = explode('.', $value);\n  \
    \  if(count($value_arr) > 1) {\n        if($value_arr[1] > 0) {\n            return\
    \ $value_arr[0] + 1;\n        }\n    }\n    return $value_arr[0];\n}\n", "  return\
    \ round($value);\n}\n", "    return round($value);\n}", "\t$int = (int) $value;\n\
    \t$float = (float) $value;\n\tif ($float > $int) {\n\t\treturn $int + 1;\n\t}\
    \ else {\n\t\treturn $int;\n\t}\n}\nprint closest_integer(\"10\") . \"\\n\";\n\
    print closest_integer(\"15.3\") . \"\\n\";\nprint closest_integer(\"14.5\") .\
    \ \"\\n\";\nprint closest_integer(\"-14.5\") . \"\\n\";", "    return is_numeric($value)\
    \ ? ($value - floor($value) > .5 ? ceil($value) : floor($value)) : false;\n}",
  "    $dec = strpos($value, '.');\n    $part1 = substr($value, 0, $dec);\n    $part2\
    \ = substr($value, $dec+1, 1);\n    if ($part2 >= 5) {\n        $part1++;\n  \
    \  }\n    return (int)$part1;\n}\n$value = \"15.3\";\necho $value . \" => \" .\
    \ closest_integer($value) . \"\\n\";\n$value = \"10\";\necho $value . \" => \"\
    \ . closest_integer($value) . \"\\n\";\n$value = \"14.5\";\necho $value . \" =>\
    \ \" . closest_integer($value) . \"\\n\";\n$value = \"-14.5\";\necho $value .\
    \ \" => \" . closest_integer($value) . \"\\n\";", "\t$value = round($value);\n\
    \treturn $value;\n}\necho closest_integer(\"10\") . PHP_EOL;\necho closest_integer(\"\
    15.3\") . PHP_EOL;\necho closest_integer(\"-15.3\") . PHP_EOL;", "    $string\
    \ = (string)$value;\n    $arr = explode('.', $string);\n    if(sizeof($arr) ==\
    \ 1) {\n        return $value;\n    }\n    $integer_part = $arr[0];\n    $decimal_part\
    \ = (int)$arr[1];\n    if ($decimal_part > 5) {\n        $integer_part = (int)$integer_part\
    \ + 1;\n    }\n    return $integer_part;\n}\n", "    return $value >= 0 ? (int)ceil($value)\
    \ : (int)floor($value);\n}", "  return round($value);\n}\necho closest_integer(\"\
    10\").\"\\n\";\necho closest_integer(\"15.3\").\"\\n\";\necho closest_integer(\"\
    14.5\").\"\\n\";\necho closest_integer(\"-14.5\").\"\\n\";", "    // Write your\
    \ code here\n    // To print results to the standard output you can use print\n\
    \    // Example:\n    // print \"Hello world!\";\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
