name: HumanEval_9_rolling_max
language: php
prompt: "<?php\n// From a given array of integers, generate an array of rolling maximum\
  \ element found until given moment\n// in the sequence.\n// >>> rolling_max(array(1,\
  \ 2, 3, 2, 3, 4, 2))\n// array(1, 2, 3, 3, 3, 4, 4)\nfunction rolling_max($numbers)\
  \ {\n"
tests: "function candidate(...$args) {\n    return rolling_max(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 1))\
  \ !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
  \ 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new Exception(\"Test failed!\"\
  ); }\n}\n\ntest();"
completions: ["  $result = array();\n  $running_max = null;\n  foreach ($numbers as\
    \ $number) {\n    if ($running_max === null || $number > $running_max) {\n   \
    \   $running_max = $number;\n    }\n    $result[] = $running_max;\n  }\n  return\
    \ $result;\n}\n", "    $result = [];\n    $max = $numbers[0];\n    foreach ($numbers\
    \ as $number) {\n        if ($number > $max) {\n            $max = $number;\n\
    \        }\n        $result[] = $max;\n    }\n    return $result;\n}\n", "\tif\
    \ (!is_array($numbers)) {\n\t\treturn false;\n\t}\n\t$max_elements = array();\n\
    \tforeach ($numbers as $i => $number) {\n\t\tif ($i == 0) {\n\t\t\t$max_elements[]\
    \ = $number;\n\t\t} else {\n\t\t\t$max_elements[] = max($number, $max_elements[$i\
    \ - 1]);\n\t\t}\n\t}\n\treturn $max_elements;\n}\n", "    $maxes = [];\n    $max\
    \ = null;\n    foreach ($numbers as $num) {\n        if ($max === null || $num\
    \ > $max) {\n            $max = $num;\n        }\n        $maxes[] = $max;\n \
    \   }\n    return $maxes;\n}\n", "\t$result = array();\n\t$current_max = $numbers[0];\n\
    \t$result[] = $current_max;\n\tforeach ($numbers as $index => $value) {\n\t\t\
    if ($index == 0) {\n\t\t\tcontinue;\n\t\t}\n\t\tif ($value > $current_max) {\n\
    \t\t\t$current_max = $value;\n\t\t}\n\t\t$result[] = $current_max;\n\t}\n\treturn\
    \ $result;\n}\n", "\t$result = [];\n\t$max = null;\n\tforeach ($numbers as $number)\
    \ {\n\t\tif ($max === null || $number > $max) {\n\t\t\t$max = $number;\n\t\t}\n\
    \t\t$result[] = $max;\n\t}\n\treturn $result;\n}\n\nprint_r(rolling_max([1, 2,\
    \ 3, 2, 3, 4, 2]));", "    $result = array();\n    $max = null;\n    foreach ($numbers\
    \ as $number) {\n        if ($max === null || $number > $max) {\n            $max\
    \ = $number;\n        }\n        $result[] = $max;\n    }\n    return $result;\n\
    }\n", "    $result = [];\n    $count = count($numbers);\n    for ($i = 0; $i <\
    \ $count; $i++) {\n        $result[] = max(array_slice($numbers, 0, $i + 1));\n\
    \    }\n    return $result;\n}\n\nvar_dump(rolling_max([1, 2, 3, 2, 3, 4, 2]));",
  "  $max = -1;\n  $maxes = array();\n  foreach ($numbers as $number) {\n    if ($number\
    \ > $max) {\n      $max = $number;\n    }\n    $maxes[] = $max;\n  }\n  return\
    \ $maxes;\n}\n", "    if (count($numbers) == 0) {\n        return array();\n \
    \   }\n    $max_so_far = $numbers[0];\n    $result = array($max_so_far);\n   \
    \ for ($i = 1; $i < count($numbers); $i++) {\n        $max_so_far = max($max_so_far,\
    \ $numbers[$i]);\n        $result[] = $max_so_far;\n    }\n    return $result;\n\
    }\n", "  $max = NULL;\n  $maxes = array();\n  foreach ($numbers as $number) {\n\
    \    if (empty($max) || $number > $max) {\n      $max = $number;\n    }\n    $maxes[]\
    \ = $max;\n  }\n  return $maxes;\n}\n", "    $ret = array();\n    $max = $numbers[0];\n\
    \    $ret[] = $max;\n    for ($i = 1; $i < count($numbers); $i++) {\n        if\
    \ ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n        }\n     \
    \   $ret[] = $max;\n    }\n    return $ret;\n}\n", "  $roll_max = array();\n \
    \ $max = null;\n  for ($i = 0; $i < count($numbers); $i++) {\n    $max = max($max,\
    \ $numbers[$i]);\n    $roll_max[] = $max;\n  }\n  return $roll_max;\n}\n", " \
    \   $max = array();\n    for ($i = 0; $i < count($numbers); $i++) {\n        if\
    \ ($i === 0) {\n            $max[$i] = $numbers[$i];\n        } else if ($numbers[$i]\
    \ > $max[$i - 1]) {\n            $max[$i] = $numbers[$i];\n        } else {\n\
    \            $max[$i] = $max[$i - 1];\n        }\n    }\n    return $max;\n}\n",
  "    $rolling_max = [];\n    $max = $numbers[0];\n    foreach ($numbers as $value)\
    \ {\n        if ($value > $max) {\n            $max = $value;\n        }\n   \
    \     $rolling_max[] = $max;\n    }\n    return $rolling_max;\n}\n", "\t$max =\
    \ null;\n\t$res = array();\n\tforeach ($numbers as $n) {\n\t\tif ($max === null\
    \ || $n > $max) {\n\t\t\t$max = $n;\n\t\t}\n\t\t$res[] = $max;\n\t}\n\treturn\
    \ $res;\n}\n", "    // We'll keep track of current maximum, and the result array\n\
    \    $max = $numbers[0];\n    $result = array($max);\n\n    // Loop through the\
    \ numbers, starting from the second\n    for ($i = 1; $i < count($numbers); $i++)\
    \ {\n        // If current number is greater than current maximum, update both.\n\
    \        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n      \
    \  }\n        // Store the current maximum as the result\n        $result[] =\
    \ $max;\n    }\n\n    return $result;\n}\n", "    $return = array();\n    $current_max\
    \ = $numbers[0];\n    foreach ($numbers as $number) {\n        if ($number > $current_max)\
    \ {\n            $current_max = $number;\n        }\n        $return[] = $current_max;\n\
    \    }\n    return $return;\n}\n", "  $output = array();\n  $currentMax = null;\n\
    \  foreach ($numbers as $i => $number) {\n    if (is_null($currentMax) || $number\
    \ > $currentMax) {\n      $currentMax = $number;\n    }\n    $output[] = $currentMax;\n\
    \  }\n  return $output;\n}\n", "    $maxes = [];\n    $currentMax = $numbers[0];\n\
    \    for ($i = 0; $i < count($numbers); $i++) {\n        $current = $numbers[$i];\n\
    \        if ($current > $currentMax) {\n            $currentMax = $current;\n\
    \        }\n        $maxes[] = $currentMax;\n    }\n    return $maxes;\n}\n",
  "    $max_number = $numbers[0];\n    $max_list = array($max_number);\n    for ($i\
    \ = 1; $i < count($numbers); $i++) {\n        $max_number = max($max_number, $numbers[$i]);\n\
    \        $max_list[] = $max_number;\n    }\n    return $max_list;\n}", "\t$maxes\
    \ = array();\n\t$current_max = null;\n\tforeach ($numbers as $number) {\n\t\t\
    if ($current_max === null || $number > $current_max) {\n\t\t\t$current_max = $number;\n\
    \t\t}\n\t\t$maxes[] = $current_max;\n\t}\n\treturn $maxes;\n}\n", "    if (!is_array($numbers))\
    \ {\n        throw new InvalidArgumentException('Invalid argument type');\n  \
    \  }\n\n    $size = count($numbers);\n    if ($size === 0) {\n        return array();\n\
    \    }\n\n    $result = array();\n    $result[0] = $numbers[0];\n    for ($i =\
    \ 1; $i < $size; $i++) {\n        $result[$i] = max($result[$i - 1], $numbers[$i]);\n\
    \    }\n\n    return $result;\n}\n\necho \"Test #1: <pre>\";\nprint_r(rolling_max(array(1,\
    \ 2, 3, 2, 3, 4, 2)));\necho \"</pre>\";\n\necho \"Test #2: <pre>\";\nprint_r(rolling_max(array(1,\
    \ 2, 3, 2, 3, 4, 2, 4, 5, 5, 8, 9, 8, 5, 9, 8, 5, 5, 9, 8, 5, 5, 9, 8, 5, 5, 9,\
    \ 8, 5, 5, 9, 8, 5, 5, 9, 8, 5, 5, 9, 8, 5, 5, 9, 8, 5, 5, 9, 8, 5, 5, 9, 8, 5,\
    \ 5, 9, 8, 5, 5, 9, 8, 5, 5, 9, 8, 5, 5, 9, 8, 5, 5, 9, 8, 5, 5, 9, 8, 5, 5, 9,\
    \ 8, 5, 5, 9, 8, 5, 5, 9, 8, 5, 5, 9, 8, 5, 5, 9, 8, 5, 5, 9, 8, 5, 5, 9, 8, 5,\
    \ 5, 9, 8, 5, 5, 9, 8, 5, 5, 9, 8, 5, 5, 9, 8, 5, 5, 9, 8, 5, 5, 9, 8, 5, 5, 9,\
    \ 8, 5, 5, 9, 8, 5, 5, 9, 8, 5, 5, 9, 8, 5, 5, 9, 8, 5, 5, 9, 8, 5, 5, 9, 8, 5,",
  "    $maxes = [];\n    $max = $numbers[0];\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        $max = max($max, $numbers[$i]);\n        $maxes[] = $max;\n\
    \    }\n    return $maxes;\n}\n", "  $result = [];\n  $max = $numbers[0];\n  foreach\
    \ ($numbers as $number) {\n    $max = max($max, $number);\n    $result[] = $max;\n\
    \  }\n  return $result;\n}\n", "    $max = current($numbers);\n    $rolling_max\
    \ = array($max);\n    foreach ($numbers as $number) {\n        if ($number > $max)\
    \ {\n            $max = $number;\n        }\n        $rolling_max[] = $max;\n\
    \    }\n    return $rolling_max;\n}\n", "    if (count($numbers) === 0) {\n  \
    \      return array();\n    }\n\n    $currentMax = $numbers[0];\n    $result =\
    \ array();\n    $result[] = $currentMax;\n\n    for ($i = 1; $i < count($numbers);\
    \ $i++) {\n        $currentMax = max($currentMax, $numbers[$i]);\n        $result[]\
    \ = $currentMax;\n    }\n\n    return $result;\n}\n", "  $max = $numbers[0];\n\
    \  $result = array();\n  $result[] = $max;\n  foreach (array_slice($numbers, 1)\
    \ as $number) {\n    if ($number > $max) {\n      $max = $number;\n    }\n   \
    \ $result[] = $max;\n  }\n  return $result;\n}\n\n$maxes = rolling_max(array(1,\
    \ 2, 3, 2, 3, 4, 2));\nprint_r($maxes);", "  $maximums = array();\n  $max = $numbers[0];\n\
    \  $maximums[] = $max;\n  for ($i = 1; $i < count($numbers); $i++) {\n    if ($numbers[$i]\
    \ > $max) {\n      $max = $numbers[$i];\n    }\n    $maximums[] = $max;\n  }\n\
    \  return $maximums;\n}\n", "    $output = array();\n    $lastMax = -1;\n    for\
    \ ($i = 0; $i < count($numbers); $i++) {\n        $lastMax = $numbers[$i] > $lastMax\
    \ ? $numbers[$i] : $lastMax;\n        $output[] = $lastMax;\n    }\n    return\
    \ $output;\n}\n", "    $max = $numbers[0];\n    for ($i = 1; $i < count($numbers);\
    \ $i++) {\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n\
    \        }\n        $numbers[$i] = $max;\n    }\n    return $numbers;\n}\n", " \
    \ if (count($numbers) == 0) {\n    return array();\n  }\n  $max = $numbers[0];\n\
    \  $arr = array($max);\n  for ($i = 1; $i < count($numbers); $i++) {\n    $max\
    \ = max($max, $numbers[$i]);\n    $arr[] = $max;\n  }\n  return $arr;\n}\n", " \
    \   $maxes = [];\n    $max = $numbers[0];\n    $maxes[] = $max;\n    for ($i =\
    \ 1; $i < count($numbers); $i++) {\n        if ($numbers[$i] > $max) {\n     \
    \       $max = $numbers[$i];\n        }\n        $maxes[] = $max;\n    }\n   \
    \ return $maxes;\n}\n\n$numbers = [1, 2, 3, 2, 3, 4, 2];\nvar_dump(rolling_max($numbers));",
  "    $result = array();\n    $best = null;\n    foreach ($numbers as $value) {\n\
    \        if ($best === null || $value > $best) {\n            $best = $value;\n\
    \        }\n        $result[] = $best;\n    }\n    return $result;\n}\n", "  $queue\
    \ = new SplQueue();\n  $result = array();\n  foreach ($numbers as $n) {\n    while\
    \ (!$queue->isEmpty() && $queue->bottom() < $n) {\n      $queue->dequeue();\n\
    \    }\n    $queue->enqueue($n);\n    $result[] = $queue->bottom();\n  }\n  return\
    \ $result;\n}\n\n$tests = array(\n  array(1, 2, 3, 2, 3, 4, 2),\n  array(1, 2,\
    \ 3, 4, 5, 6, 7),\n  array(7, 6, 5, 4, 3, 2, 1),\n  array(1, 1, 1, 1, 1, 1, 1),\n\
    \  array(1, 2, 1, 2, 1, 2, 1),\n  array(1, 2, 3, 3, 2, 1, 0),\n  array(1, 2, 3,\
    \ 2, 3, 2, 1),\n  array(1, 1, 1, 2, 2, 2, 1),\n  array(1, 2, 3, 4, 3, 2, 1),\n\
    \  array(1, 2, 3, 4, 5, 4, 3),\n  array(1, 2, 3, 4, 5, 6, 7, 6, 5, 4, 3, 2, 1),\n\
    \  array(5, 5, 6, 3, 5, 5, 6, 4, 5, 5, 6, 4, 5, 5, 6, 3, 5, 5, 6, 4, 5, 5, 6,\
    \ 4, 5, 5, 6, 3, 5, 5, 6, 4, 5, 5, 6, 4, 5, 5, 6, 3, 5, 5, 6, 4, 5, 5, 6, 4, 5,\
    \ 5, 6, 3, 5, 5, 6, 4, 5, 5, 6, 4, 5, 5, 6, 3, 5, 5, 6, 4, 5, 5, 6, 4, 5, 5, 6,\
    \ 3, 5, 5, 6, 4, 5, 5, 6, 4, 5, 5, 6, 3, 5, 5, 6, 4, 5, 5, 6, 4, 5, 5, 6, 3",
  "    $result = array();\n    $m = $numbers[0];\n    $result[] = $m;\n    for ($i\
    \ = 1; $i < count($numbers); $i++) {\n        $m = max($m, $numbers[$i]);\n  \
    \      $result[] = $m;\n    }\n    return $result;\n}\n", "  $rolling_max = [];\n\
    \  $max = $numbers[0];\n  foreach ($numbers as $number) {\n    if ($number > $max)\
    \ {\n      $max = $number;\n    }\n    $rolling_max[] = $max;\n  }\n  return $rolling_max;\n\
    }\n", "    $rolling_max = array();\n    $len = count($numbers);\n    for ($i =\
    \ 0; $i < $len; $i++) {\n        $max = $numbers[$i];\n        for ($j = $i -\
    \ 1; $j >= 0; $j--) {\n            if ($numbers[$j] > $max) {\n              \
    \  $max = $numbers[$j];\n            }\n        }\n        $rolling_max[] = $max;\n\
    \    }\n    return $rolling_max;\n}\n", "  $currentMax = $numbers[0];\n  $result\
    \ = array($currentMax);\n  for ($i = 1; $i < count($numbers); $i++) {\n    $currentMax\
    \ = max($currentMax, $numbers[$i]);\n    $result[] = $currentMax;\n  }\n  return\
    \ $result;\n}\n", "    if (count($numbers) == 0) {\n        return array();\n\
    \    }\n\n    $result = array($numbers[0]);\n    for ($i = 1; $i < count($numbers);\
    \ $i++) {\n        $result[] = max($result[$i - 1], $numbers[$i]);\n    }\n\n\
    \    return $result;\n}", "    if (empty($numbers)) {\n        return [];\n  \
    \  }\n    $rolling_max = [max($numbers[0], $numbers[1])];\n    for ($i = 2; $i\
    \ < count($numbers); $i++) {\n        $rolling_max[] = max($rolling_max[$i - 1],\
    \ $numbers[$i]);\n    }\n    return $rolling_max;\n}\n", "    $max = array();\n\
    \    foreach ($numbers as $value) {\n        $max[] = isset($max[sizeof($max)\
    \ - 1]) ? max($max[sizeof($max) - 1], $value) : $value;\n    }\n    return $max;\n\
    }\n", "    $size = count($numbers);\n    $max_till_now = array_fill(0, $size,\
    \ 0);\n    $max_till_now[0] = $numbers[0];\n    for ($i = 1; $i < $size; $i++)\
    \ {\n        $max_till_now[$i] = max($max_till_now[$i - 1], $numbers[$i]);\n \
    \   }\n    return $max_till_now;\n}\n", "  $max_so_far = $numbers[0];\n  $results\
    \ = array();\n  foreach ($numbers as $number) {\n    $max_so_far = max($max_so_far,\
    \ $number);\n    $results[] = $max_so_far;\n  }\n  return $results;\n}\n", " \
    \   $max = null;\n    $result = array();\n    foreach ($numbers as $n) {\n   \
    \     if ($max === null || $n > $max) {\n            $max = $n;\n        }\n \
    \       $result[] = $max;\n    }\n    return $result;\n}", "    $result = array();\n\
    \    for ($i = 0; $i < count($numbers); $i++) {\n        $result[] = $numbers[$i];\n\
    \        for ($j = $i + 1; $j < count($numbers); $j++) {\n            if ($numbers[$j]\
    \ > $result[$i]) {\n                $result[$i] = $numbers[$j];\n            }\n\
    \        }\n    }\n    return $result;\n}\n", "    $maximums = array();\n    $current_max\
    \ = $numbers[0];\n    $maximums[] = $current_max;\n    for ($i = 1; $i < count($numbers);\
    \ $i++) {\n        if ($numbers[$i] > $current_max) {\n            $current_max\
    \ = $numbers[$i];\n        }\n        $maximums[] = $current_max;\n    }\n   \
    \ return $maximums;\n}", "    $max = 0;\n    foreach ($numbers as $number) {\n\
    \        if ($number > $max) {\n            $max = $number;\n        }\n     \
    \   $max_numbers[] = $max;\n    }\n    return $max_numbers;\n}", "    $max_so_far\
    \ = $numbers[0];\n    $result = array($max_so_far);\n    for ($i = 1; $i < count($numbers);\
    \ $i++) {\n        $max_so_far = max($max_so_far, $numbers[$i]);\n        $result[]\
    \ = $max_so_far;\n    }\n    return $result;\n}\n", "  $maxes = [];\n  $max =\
    \ null;\n  foreach ($numbers as $number) {\n    if ($max === null || $number >\
    \ $max) {\n      $max = $number;\n    }\n    $maxes[] = $max;\n  }\n  return $maxes;\n\
    }\n", "    $results = array();\n    $max = PHP_INT_MIN;\n    foreach ($numbers\
    \ as $number) {\n        $max = max($max, $number);\n        $results[] = $max;\n\
    \    }\n    return $results;\n}\n", "    $result = array();\n    $maximum = null;\n\
    \    foreach ($numbers as $index => $number) {\n        if ($number > $maximum)\
    \ {\n            $maximum = $number;\n        }\n        $result[$index] = $maximum;\n\
    \    }\n    return $result;\n}\n", "    $maxes = array();\n    $max_so_far = $numbers[0];\n\
    \    foreach ($numbers as $number) {\n        if ($number > $max_so_far) {\n \
    \           $max_so_far = $number;\n        }\n        $maxes[] = $max_so_far;\n\
    \    }\n    return $maxes;\n}\n", "\t$results = array();\n\t$current_max = $numbers[0];\n\
    \tfor ($i = 0; $i < count($numbers); $i++) {\n\t\t$current_max = max($current_max,\
    \ $numbers[$i]);\n\t\t$results[] = $current_max;\n\t}\n\treturn $results;\n}\n",
  "  $max = array_shift($numbers);\n  $result = array($max);\n  foreach ($numbers\
    \ as $item) {\n    $max = max($max, $item);\n    $result[] = $max;\n  }\n  return\
    \ $result;\n}\n", "\t$max_elements = [];\n\t$count = count($numbers);\n\tif ($count\
    \ > 0) {\n\t\t$max_elements[] = $numbers[0];\n\t\tfor ($i = 1; $i < $count; $i++)\
    \ {\n\t\t\t$max_elements[] = max($max_elements[$i - 1], $numbers[$i]);\n\t\t}\n\
    \t}\n\treturn $max_elements;\n}\n\n$numbers = [1, 2, 3, 2, 3, 4, 2];\nvar_dump(rolling_max($numbers));",
  "  $maxes = array();\n  $current_max = -INF;\n  foreach ($numbers as $number) {\n\
    \    $current_max = max($current_max, $number);\n    $maxes[] = $current_max;\n\
    \  }\n  return $maxes;\n}\n", "    $maxes = [];\n    $max = 0;\n    foreach ($numbers\
    \ as $number) {\n        if ($number > $max) {\n            $max = $number;\n\
    \        }\n        $maxes[] = $max;\n    }\n    return $maxes;\n}\n\n$array =\
    \ array(1, 2, 3, 2, 3, 4, 2);\n$result = rolling_max($array);\n\nforeach ($result\
    \ as $item) {\n    echo $item . '<br>';\n}", "    $result = array();\n    $max\
    \ = 0;\n    foreach ($numbers as $number) {\n        $max = max($max, $number);\n\
    \        $result[] = $max;\n    }\n    return $result;\n}\n", "  $result = [];\n\
    \  $max = null;\n  foreach ($numbers as $num) {\n    if ($max === null || $num\
    \ > $max) {\n      $max = $num;\n    }\n    $result[] = $max;\n  }\n  return $result;\n\
    }\n", "    $result = array();\n    $max = 0;\n    foreach ($numbers as $number)\
    \ {\n        $max = max($max, $number);\n        $result[] = $max;\n    }\n  \
    \  return $result;\n}\n", "    $len = count($numbers);\n    $result = array();\n\
    \    for ($i = 0; $i < $len; $i++) {\n        $max = $numbers[$i];\n        for\
    \ ($j = $i; $j < $len; $j++) {\n            if ($numbers[$j] > $max) {\n     \
    \           $max = $numbers[$j];\n            }\n        }\n        $result[]\
    \ = $max;\n    }\n    return $result;\n}\n\n$result = rolling_max(array(1, 2,\
    \ 3, 2, 3, 4, 2));\n", "    $max_found = array_shift($numbers);\n    $max_found_till_now\
    \ = array($max_found);\n    foreach ($numbers as $number) {\n        $max_found\
    \ = max($max_found, $number);\n        $max_found_till_now[] = $max_found;\n \
    \   }\n    return $max_found_till_now;\n}\n", "    $rolling_max = array();\n \
    \   foreach ($numbers as $number) {\n        $rolling_max[] = max($rolling_max\
    \ ?: array(0), $number);\n    }\n    return $rolling_max;\n}\n", "  $max = null;\n\
    \  $result = array();\n  foreach ($numbers as $n) {\n    if ($max === null ||\
    \ $n > $max) {\n      $max = $n;\n    }\n    $result[] = $max;\n  }\n  return\
    \ $result;\n}\n", "    $max = 0;\n    $numbers = array_map(function($number) use\
    \ (&$max) {\n        $max = max($max, $number);\n        return $max;\n    },\
    \ $numbers);\n    return $numbers;\n}\n", "\t$result = array();\n\t$max = null;\n\
    \tforeach ($numbers as $i => $number) {\n\t\tif ($max === null || $number > $max)\
    \ {\n\t\t\t$max = $number;\n\t\t}\n\t\t$result[$i] = $max;\n\t}\n\treturn $result;\n\
    }\n\necho array_to_str(rolling_max(array(1, 2, 3, 2, 3, 4, 2)));", "  $max = $numbers[0];\n\
    \  for ($i = 1; $i < count($numbers); $i++) {\n    if ($numbers[$i] > $max) {\n\
    \      $max = $numbers[$i];\n    }\n    $numbers[$i] = $max;\n  }\n  return $numbers;\n\
    }\n\nprint_r(rolling_max(array(1, 2, 3, 2, 3, 4, 2)));\nprint_r(rolling_max(array(100,\
    \ -100, -50, -200, -100, -150, -25)));\nprint_r(rolling_max(array(1, 2, 3, 2,\
    \ 3, 4, 2, 1, 2, 0, 100, 2, 3, 2, 1, 2, 0, 1)));", "  $retval = array();\n  foreach\
    \ ($numbers as $number) {\n    if (empty($retval)) {\n      $retval[] = $number;\n\
    \    } else {\n      $retval[] = max($retval[count($retval) - 1], $number);\n\
    \    }\n  }\n  return $retval;\n}\n\nclass RollingMaximumTest extends PHPUnit_Framework_TestCase\
    \ {\n  public function testRollingMaximumTest() {\n    $expected = array(1, 2,\
    \ 3, 3, 3, 4, 4);\n    $this->assertEquals($expected, rolling_max(array(1, 2,\
    \ 3, 2, 3, 4, 2)));\n  }\n}", "  $max = null;\n  $running = array();\n  foreach\
    \ ($numbers as $v) {\n    if ($max === null || $v > $max) {\n      $max = $v;\n\
    \    }\n    $running[] = $max;\n  }\n  return $running;\n}\n\nprint_r(rolling_max(array(1,\
    \ 2, 3, 2, 3, 4, 2)));", "  $max = $numbers[0];\n  $result = array($max);\n  for\
    \ ($i = 1; $i < count($numbers); $i++) {\n    $number = $numbers[$i];\n    if\
    \ ($number > $max) {\n      $max = $number;\n    }\n    $result[] = $max;\n  }\n\
    \  return $result;\n}\n", "    $max = null;\n    $result = array();\n    foreach\
    \ ($numbers as $number) {\n        if ($max === null || $number > $max) {\n  \
    \          $max = $number;\n        }\n        $result[] = $max;\n    }\n    return\
    \ $result;\n}\n", "    if (!$numbers) {\n        return [];\n    }\n    $current_max\
    \ = $numbers[0];\n    $maxes = [$current_max];\n    for ($i = 1; $i < count($numbers);\
    \ $i++) {\n        $number = $numbers[$i];\n        if ($number > $current_max)\
    \ {\n            $current_max = $number;\n        }\n        $maxes[] = $current_max;\n\
    \    }\n    return $maxes;\n}\necho '<pre>';\nprint_r(rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2]));\necho '</pre>';", "    $max = $numbers[0];\n    for ($i = 1; $i\
    \ < count($numbers); $i++) {\n        if ($numbers[$i] > $max) {\n           \
    \ $max = $numbers[$i];\n        }\n        $numbers[$i] = $max;\n    }\n    return\
    \ $numbers;\n}\n", "\t$result = array();\n\tfor ($i = 0; $i < count($numbers);\
    \ $i++) {\n\t\t$sub = array_slice($numbers, 0, $i + 1);\n\t\t$result[] = max($sub);\n\
    \t}\n\treturn $result;\n}\n\nassert(\n\trolling_max(array(1, 2, 3, 2, 3, 4, 2))\
    \ ==\n\tarray(1, 2, 3, 3, 3, 4, 4)\n);\nassert(\n\trolling_max(array(1, 4, 2,\
    \ 3, 4, 3, 1)) ==\n\tarray(1, 4, 4, 4, 4, 4, 4)\n);\n", "    $result = array();\n\
    \    $current_max = -INF;\n    foreach ($numbers as $number) {\n        $current_max\
    \ = max($current_max, $number);\n        $result[] = $current_max;\n    }\n  \
    \  return $result;\n}\n", "    if (count($numbers) < 1) {\n        return $numbers;\n\
    \    }\n    $result = array();\n    $current_max = $numbers[0];\n    $result[]\
    \ = $current_max;\n    for ($i = 1; $i < count($numbers); $i++) {\n        if\
    \ ($numbers[$i] > $current_max) {\n            $current_max = $numbers[$i];\n\
    \        }\n        $result[] = $current_max;\n    }\n    return $result;\n}\n\
    \n$numbers = array(1, 2, 3, 2, 3, 4, 2);\n$result = rolling_max($numbers);\nprint_r($result);\n",
  "\t$maximum = array();\n\t$max = 0;\n\tfor ($i = 0; $i < count($numbers); $i++)\
    \ {\n\t\tif ($numbers[$i] > $max) {\n\t\t\t$max = $numbers[$i];\n\t\t}\n\t\t$maximum[]\
    \ = $max;\n\t}\n\treturn $maximum;\n}\n", "    $rolling_max = array();\n    foreach\
    \ ($numbers as $index => $value) {\n        if ($index === 0) {\n            $rolling_max[$index]\
    \ = $value;\n        } else {\n            $rolling_max[$index] = max($rolling_max[$index\
    \ - 1], $value);\n        }\n    }\n    return $rolling_max;\n}\n", "    $max\
    \ = null;\n    $results = array();\n    foreach ($numbers as $number) {\n    \
    \    if ($max === null || $number > $max) {\n            $max = $number;\n   \
    \     }\n        $results[] = $max;\n    }\n    return $results;\n}\n\nprint_r(rolling_max(array(1,\
    \ 2, 3, 2, 3, 4, 2)));", "    $max = [];\n    $last = false;\n    foreach ($numbers\
    \ as $number) {\n        if ($last == false || $number > $last) {\n          \
    \  $last = $number;\n        }\n        $max[] = $last;\n    }\n    return $max;\n\
    }\n", "  $max = $numbers[0];\n  $res = array($max);\n  for ($i = 1; $i < count($numbers);\
    \ $i++) {\n    $num = $numbers[$i];\n    if ($num > $max) {\n      $max = $num;\n\
    \    }\n    $res[] = $max;\n  }\n  return $res;\n}\necho '<pre>';\nvar_dump(rolling_max(array(1,\
    \ 2, 3, 2, 3, 4, 2)));\necho '</pre>';", "    $max_number = $numbers[0];\n   \
    \ $max_numbers = array();\n    foreach ($numbers as $number) {\n        if ($number\
    \ > $max_number) {\n            $max_number = $number;\n        }\n        $max_numbers[]\
    \ = $max_number;\n    }\n    return $max_numbers;\n}\n", "    $max = $numbers[0];\n\
    \    $result = [];\n    for ($i = 0; $i < count($numbers); $i++) {\n        $result[]\
    \ = $max;\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n\
    \        }\n    }\n    return $result;\n}\nprint_r(rolling_max([1, 2, 3, 2, 3,\
    \ 4, 2]));", "    $result = array();\n    $max = null;\n    foreach ($numbers\
    \ as $number) {\n        if (is_null($max) || $number > $max) {\n            $max\
    \ = $number;\n        }\n        $result[] = $max;\n    }\n    return $result;\n\
    }\n", "    if (!is_array($numbers)) {\n        return array();\n    }\n    $max_sequence\
    \ = array();\n    $current_max = null;\n    foreach ($numbers as $number) {\n\
    \        if ($current_max === null || $number > $current_max) {\n            $current_max\
    \ = $number;\n        }\n        $max_sequence[] = $current_max;\n    }\n    return\
    \ $max_sequence;\n}\n\n$tests = array(\n    array(1, 2, 3, 2, 3, 4, 2),\n    array(1,\
    \ 2, 1, 2, 1, 2, 1),\n    array(2, 2, 2, 2, 2, 2, 2),\n    array(1, 1, 1, 1, 1,\
    \ 1, 1),\n    array(2, 3, 4, 5, 6, 7, 8),\n    array(8, 7, 6, 5, 4, 3, 2),\n \
    \   array(1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,\
    \ 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,\
    \ 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,\
    \ 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,\
    \ 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1,\
    \ 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1", "  $max = -INF;\n  $result\
    \ = [];\n  foreach ($numbers as $number) {\n    $max = max($max, $number);\n \
    \   $result[] = $max;\n  }\n  return $result;\n}\n\n$tests = [\n  [\n    'input'\
    \ => [1, 2, 3, 2, 3, 4, 2],\n    'expected' => [1, 2, 3, 3, 3, 4, 4],\n  ],\n\
    \  [\n    'input' => [],\n    'expected' => [],\n  ],\n  [\n    'input' => [1],\n\
    \    'expected' => [1],\n  ],\n  [\n    'input' => [1, 2],\n    'expected' =>\
    \ [1, 2],\n  ],\n  [\n    'input' => [2, 1],\n    'expected' => [2, 2],\n  ],\n\
    \  [\n    'input' => [1, 1, 1, 1, 1, 1, 1],\n    'expected' => [1, 1, 1, 1, 1,\
    \ 1, 1],\n  ],\n  [\n    'input' => [2, 1, 2, 1, 2, 1, 2],\n    'expected' =>\
    \ [2, 2, 2, 2, 2, 2, 2],\n  ],\n  [\n    'input' => [3, 2, 1, 3, 2, 1, 3],\n \
    \   'expected' => [3, 3, 3, 3, 3, 3, 3],\n  ],\n  [\n    'input' => [3, 2, 1,\
    \ -3, -2, -1, -3],\n    'expected' => [3, 3, 3, 3, 3, 3, 3],\n  ],\n  [\n    'input'\
    \ => [-3, -2, -1, -3, -2, -1, -3],\n    'expected' => [-3, -2, -1, -1, -1, -1,\
    \ -1],\n  ],\n  [\n    'input' => [-3, -2, -1, 3, 2, 1, 3],\n    'expected' =>\
    \ [-3, -2, -1,", "    $max = $numbers[0];\n    $values = array($max);\n    for\
    \ ($i = 1; $i < count($numbers); $i++) {\n        $max = max($max, $numbers[$i]);\n\
    \        $values[] = $max;\n    }\n    return $values;\n}", "\t// TODO\n}\n",
  "    $maxes = array();\n    $maxes[0] = $numbers[0];\n    for ($i = 1; $i < count($numbers);\
    \ $i++) {\n        $maxes[$i] = max($maxes[$i - 1], $numbers[$i]);\n    }\n  \
    \  return $maxes;\n}\n", "    $max_found = 0;\n    $max_array = array();\n   \
    \ foreach ($numbers as $number) {\n        if ($number > $max_found) {\n     \
    \       $max_found = $number;\n        }\n        $max_array[] = $max_found;\n\
    \    }\n    return $max_array;\n}\n", "  $result = array();\n  foreach ($numbers\
    \ as $number) {\n    if (count($result) == 0) {\n      $result[] = $number;\n\
    \    } else {\n      $result[] = max($result[count($result) - 1], $number);\n\
    \    }\n  }\n  return $result;\n}\n", "    $results = array();\n    $max     =\
    \ null;\n    foreach ($numbers as $n) {\n        if ($max === null || $n > $max)\
    \ {\n            $max = $n;\n        }\n        $results[] = $max;\n    }\n  \
    \  return $results;\n}", "    $rolling_maxes = array();\n    $local_max = $numbers[0];\n\
    \    foreach ($numbers as $n) {\n        if ($n > $local_max) {\n            $local_max\
    \ = $n;\n        }\n        $rolling_maxes[] = $local_max;\n    }\n    return\
    \ $rolling_maxes;\n}\n", "  $result = [];\n  $max = PHP_INT_MIN;\n  foreach ($numbers\
    \ as $number) {\n    $max = max($max, $number);\n    $result[] = $max;\n  }\n\
    \  return $result;\n}\n", "  $result = [];\n  $max = PHP_INT_MIN;\n  foreach ($numbers\
    \ as $number) {\n    $max = max($max, $number);\n    $result[] = $max;\n  }\n\
    \  return $result;\n}\n", "  $max = array();\n  $max[] = $numbers[0];\n  for ($i\
    \ = 1; $i < count($numbers); $i++) {\n    $max[] = max($max[$i - 1], $numbers[$i]);\n\
    \  }\n  return $max;\n}\n", "\t$max = NULL;\n\t$result = array();\n\tforeach ($numbers\
    \ as $number) {\n\t\tif (is_null($max) || $number > $max) {\n\t\t\t$max = $number;\n\
    \t\t}\n\t\t$result[] = $max;\n\t}\n\treturn $result;\n}\n", "  $current_max =\
    \ $numbers[0];\n  $next_max = function ($n) use (&$current_max) {\n    if ($n\
    \ > $current_max) {\n      $current_max = $n;\n    }\n    return $current_max;\n\
    \  };\n  return array_map($next_max, $numbers);\n}\n", "    $max_values = [];\n\
    \    $max_so_far = null;\n    foreach ($numbers as $number) {\n        if ($max_so_far\
    \ === null || $number > $max_so_far) {\n            $max_so_far = $number;\n \
    \       }\n        $max_values[] = $max_so_far;\n    }\n    return $max_values;\n\
    }", "    $array = [];\n    $counter = 0;\n    $max = $numbers[0];\n    for ($i\
    \ = 0; $i < count($numbers); $i++) {\n        if ($numbers[$i] > $max) {\n   \
    \         $max = $numbers[$i];\n        }\n        $array[$counter] = $max;\n\
    \        $counter++;\n    }\n    return $array;\n}\n\nprint_r(rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2]));\n", "\t$max_value = $numbers[0];\n\t$results = array();\n\
    \tforeach ($numbers as $number) {\n\t\tif ($number > $max_value) {\n\t\t\t$max_value\
    \ = $number;\n\t\t}\n\t\t$results[] = $max_value;\n\t}\n\treturn $results;\n}\n",
  "    $result = array();\n    $max = null;\n    foreach ($numbers as $number) {\n\
    \        if ($max === null || $number > $max) {\n            $max = $number;\n\
    \        }\n        $result[] = $max;\n    }\n    return $result;\n}", "  $rolling_max\
    \ = [];\n  $local_max = 0;\n  foreach ($numbers as $number) {\n    $local_max\
    \ = max($local_max, $number);\n    $rolling_max[] = $local_max;\n  }\n  return\
    \ $rolling_max;\n}\n", "\t$maxes = [];\n\t$max = null;\n\tforeach ($numbers as\
    \ $number) {\n\t\tif ($max === null || $number > $max) {\n\t\t\t$max = $number;\n\
    \t\t}\n\t\t$maxes[] = $max;\n\t}\n\treturn $maxes;\n}\n\necho \"Running test cases:\\\
    n\";\n$expected = [1, 2, 3, 3, 3, 4, 4];\nassert(rolling_max([1, 2, 3, 2, 3, 4,\
    \ 2]) === $expected);\necho \".\";\nassert(rolling_max([]) === []);\necho \".\"\
    ;\nassert(rolling_max([1]) === [1]);\necho \".\";\nassert(rolling_max([10, 9,\
    \ 8, 7, 6, 5, 4, 3, 2, 1]) === [10, 10, 10, 10, 10, 10, 10, 10, 10, 10]);\necho\
    \ \".\";\nassert(rolling_max([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) === [1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10]);\necho \".\";\n\necho \"\\n\";", "  $rolling_max = [];\n\
    \  $maximum = 0;\n  foreach ($numbers as $number) {\n    $maximum = max($maximum,\
    \ $number);\n    $rolling_max[] = $maximum;\n  }\n  return $rolling_max;\n}\n\
    print_r(rolling_max([1, 2, 3, 2, 3, 4, 2]));", "\tif (!count($numbers)) return\
    \ $numbers;\n\t$rolling_max_numbers = array();\n\t$max = $numbers[0];\n\tforeach\
    \ ($numbers as $number) {\n\t\tif ($number > $max) $max = $number;\n\t\t$rolling_max_numbers[]\
    \ = $max;\n\t}\n\treturn $rolling_max_numbers;\n}\n", "    $output = array();\n\
    \    foreach ($numbers as $i => $n) {\n        if ($i > 0) {\n            $output[]\
    \ = max($n, $output[$i - 1]);\n        } else {\n            $output[] = $n;\n\
    \        }\n    }\n    return $output;\n}\n", "\t$max_so_far = 0;\n\t$roll_max\
    \ = array();\n\tforeach ($numbers as $number) {\n\t\tif ($number > $max_so_far)\
    \ {\n\t\t\t$max_so_far = $number;\n\t\t}\n\t\t$roll_max[] = $max_so_far;\n\t}\n\
    \treturn $roll_max;\n}\n", "    $max = array();\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        $max[$i] = $numbers[$i];\n        for ($j = 0; $j < $i; $j++)\
    \ {\n            if ($numbers[$j] > $max[$i]) {\n                $max[$i] = $numbers[$j];\n\
    \            }\n        }\n    }\n    return $max;\n}\n\n$a = array(1, 2, 3, 2,\
    \ 3, 4, 2);\nprint_r(rolling_max($a));\n", "    $results = array();\n    $max\
    \ = -1;\n    foreach ($numbers as $number) {\n        if ($number > $max) {\n\
    \            $max = $number;\n        }\n        $results[] = $max;\n    }\n \
    \   return $results;\n}\n", "    $rolling_max = array();\n    $curr_max = null;\n\
    \    for ($i = 0; $i < count($numbers); $i++) {\n        if ($curr_max === null\
    \ || $numbers[$i] > $curr_max) {\n            $curr_max = $numbers[$i];\n    \
    \    }\n        $rolling_max[] = $curr_max;\n    }\n    return $rolling_max;\n\
    }\n", "    $result = [];\n    $max = $numbers[0];\n    foreach ($numbers as $number)\
    \ {\n        if ($number > $max) {\n            $max = $number;\n        }\n \
    \       $result[] = $max;\n    }\n    return $result;\n}\n", "    $rolling_max\
    \ = array();\n    $max = 0;\n    foreach ($numbers as $n) {\n        $max = max($max,\
    \ $n);\n        $rolling_max[] = $max;\n    }\n    return $rolling_max;\n}\n\n\
    class Test extends PHPUnit_Framework_TestCase {\n    public function testEqual()\
    \ {\n        $this->assertEquals(array(1, 2, 3, 3, 3, 4, 4), rolling_max(array(1,\
    \ 2, 3, 2, 3, 4, 2)));\n    }\n}", "  $max_so_far = [];\n  $current_max = $numbers[0];\n\
    \  $max_so_far[] = $current_max;\n  foreach ($numbers as $index => $number) {\n\
    \    if ($index == 0) {\n      continue;\n    }\n    if ($number > $current_max)\
    \ {\n      $current_max = $number;\n    }\n    $max_so_far[] = $current_max;\n\
    \  }\n  return $max_so_far;\n}\n\necho json_encode(rolling_max([1, 2, 3, 2, 3,\
    \ 4, 2]));", "    $result = array();\n    $rolling_max = null;\n    foreach ($numbers\
    \ as $num) {\n        if ($rolling_max === null || $num > $rolling_max) {\n  \
    \          $rolling_max = $num;\n        }\n        $result[] = $rolling_max;\n\
    \    }\n    return $result;\n}\n", "  $result = [];\n  $max = $numbers[0];\n \
    \ $result[] = $max;\n  for ($i = 1; $i < count($numbers); $i++) {\n    if ($numbers[$i]\
    \ > $max) {\n      $max = $numbers[$i];\n    }\n    $result[] = $max;\n  }\n \
    \ return $result;\n}\n\n$numbers = [1, 2, 3, 2, 3, 4, 2];\n$result = rolling_max($numbers);\n\
    \necho \"Given array: \" . implode(\", \", $numbers) . \"\\n\";\necho \"Result:\
    \ \" . implode(\", \", $result) . \"\\n\";", "    $rolls = [];\n    $max   = null;\n\
    \    foreach ($numbers as $number) {\n        if ($max === null || $number > $max)\
    \ {\n            $max = $number;\n        }\n        $rolls[] = $max;\n    }\n\
    \    return $rolls;\n}\n", "    $result = array();\n    $curr_max = $numbers[0];\n\
    \    foreach ($numbers as $number) {\n        if ($number > $curr_max) {\n   \
    \         $curr_max = $number;\n        }\n        $result[] = $curr_max;\n  \
    \  }\n    return $result;\n}\n", "    $max_elements = array();\n    $running_max\
    \ = 0;\n    foreach ($numbers as $number) {\n        $running_max = max($running_max,\
    \ $number);\n        $max_elements[] = $running_max;\n    }\n    return $max_elements;\n\
    }\n", "    $current_max = 0;\n    $result = array();\n    foreach ($numbers as\
    \ $number) {\n        $current_max = max($current_max, $number);\n        $result[]\
    \ = $current_max;\n    }\n    return $result;\n}\n", "    $max_numbers = array_fill(0,\
    \ count($numbers), null);\n    $max_so_far = -PHP_INT_MAX;\n    for ($i = 0; $i\
    \ < count($numbers); $i++) {\n        $max_so_far = max($max_so_far, $numbers[$i]);\n\
    \        $max_numbers[$i] = $max_so_far;\n    }\n    return $max_numbers;\n}",
  "  $result = array();\n  $max = -1;\n  foreach ($numbers as $number) {\n    if ($number\
    \ > $max) {\n      $max = $number;\n    }\n    $result[] = $max;\n  }\n  return\
    \ $result;\n}\nprint_r(rolling_max(array(1, 2, 3, 2, 3, 4, 2)));\n", "\t$result\
    \ = array();\n\t$max = $numbers[0];\n\t$result[] = $max;\n\tfor ($i = 1; $i <\
    \ count($numbers); $i++) {\n\t\tif ($numbers[$i] > $max) {\n\t\t\t$max = $numbers[$i];\n\
    \t\t}\n\t\t$result[] = $max;\n\t}\n\treturn $result;\n}\n", "    $max = array_shift($numbers);\n\
    \    $result = array($max);\n    foreach ($numbers as $number) {\n        $max\
    \ = max($max, $number);\n        $result[] = $max;\n    }\n    return $result;\n\
    }", "    $maximums = [];\n    $maximum = NULL;\n    foreach ($numbers as $number)\
    \ {\n        if (is_null($maximum) || $number > $maximum) {\n            $maximum\
    \ = $number;\n        }\n        $maximums[] = $maximum;\n    }\n    return $maximums;\n\
    }\n", "    $rolling_max = [];\n    $max = PHP_INT_MIN;\n    foreach ($numbers\
    \ as $number) {\n        $max = max($max, $number);\n        $rolling_max[] =\
    \ $max;\n    }\n    return $rolling_max;\n}\n", "  // TODO\n}\n", "    $maxes\
    \ = array();\n    $running_max = $numbers[0];\n    foreach ($numbers as $number)\
    \ {\n        $running_max = max($running_max, $number);\n        $maxes[] = $running_max;\n\
    \    }\n    return $maxes;\n}\n", "  $solution = [];\n  $maximum = $numbers[0];\n\
    \  for ($i = 0; $i < count($numbers); $i++) {\n    $number = $numbers[$i];\n \
    \   if ($number > $maximum) {\n      $maximum = $number;\n    }\n    $solution[]\
    \ = $maximum;\n  }\n  return $solution;\n}\n\nprint_r(rolling_max([1, 2, 3, 2,\
    \ 3, 4, 2]));\nprint_r(rolling_max([1, 2, 3, 2, 3, 4, -6]));\nprint_r(rolling_max([-1,\
    \ -2, -3, -2, -3, -4, -2]));\nprint_r(rolling_max([-1, -2, -3, -2, -3, -4, -6]));\n\
    print_r(rolling_max([-1, -2, -3, -2, -3, 4, -6]));\nprint_r(rolling_max([-1, -2,\
    \ -3, -2, 3, 4, -6]));", "  $result = array();\n  $max    = 0;\n  foreach ($numbers\
    \ as $num) {\n    $max = max($max, $num);\n    $result[] = $max;\n  }\n  return\
    \ $result;\n}\n\nclass RollingMaxTest extends PHPUnit_Framework_TestCase {\n \
    \ function testRollingMax() {\n    $this->assertEquals(array(1, 2, 3, 3, 3, 4,\
    \ 4), rolling_max(array(1, 2, 3, 2, 3, 4, 2)));\n  }\n}", "    $maximums = [];\n\
    \    $current_max = null;\n    foreach ($numbers as $number) {\n        if ($current_max\
    \ === null || $number > $current_max) {\n            $current_max = $number;\n\
    \        }\n        $maximums[] = $current_max;\n    }\n    return $maximums;\n\
    }\n", "  $max = $numbers[0];\n  $max_numbers = [$max];\n  for ($i = 1; $i < count($numbers);\
    \ $i++) {\n    $number = $numbers[$i];\n    if ($number > $max) {\n      $max\
    \ = $number;\n    }\n    $max_numbers[] = $max;\n  }\n  return $max_numbers;\n\
    }\n", "\t$result = array();\n\t$current_max = $numbers[0];\n\t$result[] = $current_max;\n\
    \tfor ($i = 1; $i < count($numbers); $i++) {\n\t\tif ($numbers[$i] > $current_max)\
    \ {\n\t\t\t$current_max = $numbers[$i];\n\t\t}\n\t\t$result[] = $current_max;\n\
    \t}\n\treturn $result;\n}\n", "    $max_so_far = 0;\n    $res = array();\n   \
    \ foreach ($numbers as $v) {\n        $max_so_far = max($max_so_far, $v);\n  \
    \      $res[] = $max_so_far;\n    }\n    return $res;\n}\n\nvar_dump(rolling_max(array(1,\
    \ 2, 3, 2, 3, 4, 2)));\n", "  $result = array();\n  $currentMax = null;\n  foreach\
    \ ($numbers as $num) {\n    if (empty($currentMax) || $num > $currentMax) {\n\
    \      $currentMax = $num;\n    }\n    $result[] = $currentMax;\n  }\n  return\
    \ $result;\n}\n", "    $max = array();\n    foreach ($numbers as $number) {\n\
    \        if (empty($max)) {\n            $max[] = $number;\n        } else {\n\
    \            $max[] = max($max[count($max) - 1], $number);\n        }\n    }\n\
    \    return $max;\n}\n", "    $result = array();\n    $max = $numbers[0];\n  \
    \  foreach ($numbers as $n) {\n        $max = max($max, $n);\n        $result[]\
    \ = $max;\n    }\n    return $result;\n}\n\n$example = array(1, 2, 3, 2, 3, 4,\
    \ 2);\nprint_r(rolling_max($example));", "    $result = array();\n    $max = -PHP_INT_MAX;\n\
    \    foreach ($numbers as $number) {\n        $max = max($max, $number);\n   \
    \     $result[] = $max;\n    }\n    return $result;\n}\n", "  $maxes = array();\n\
    \  $maxes[0] = $numbers[0];\n  for ($i = 1; $i < count($numbers); $i++) {\n  \
    \  $maxes[$i] = max($maxes[$i - 1], $numbers[$i]);\n  }\n  return $maxes;\n}\n\
    \nvar_dump(rolling_max(array(1, 2, 3, 2, 3, 4, 2)));", "  $output = [];\n  $max\
    \ = 0;\n  foreach ($numbers as $number) {\n    $max = $number > $max ? $number\
    \ : $max;\n    $output[] = $max;\n  }\n  return $output;\n}\n", "  $max = $numbers[0];\n\
    \  for ($i = 1; $i < count($numbers); $i++) {\n    if ($numbers[$i] > $max) {\n\
    \      $max = $numbers[$i];\n    }\n    $numbers[$i] = $max;\n  }\n  return $numbers;\n\
    }\n", "    $maximum = array();\n    $m = 0;\n    foreach ($numbers as $number)\
    \ {\n        $m = max($m, $number);\n        $maximum[] = $m;\n    }\n    return\
    \ $maximum;\n}\n", "    $rolling_max = [];\n    $max = 0;\n    foreach ($numbers\
    \ as $number) {\n        if ($number > $max) {\n            $max = $number;\n\
    \        }\n        $rolling_max[] = $max;\n    }\n    return $rolling_max;\n\
    }\n\nvar_dump(rolling_max([1, 2, 3, 2, 3, 4, 2]));\nvar_dump(rolling_max([1, 2,\
    \ 3, 2, 3, 4, 2, 4, 5, 1, 6, 8, 5, 9, 1, 3, 5, 9, 10, 1, 5, 6, 7, 8, 5, 9, 10,\
    \ 3, 5, 9, 4, 5, 5, 9, 1, 4, 5, 7, 8, 9, 10, 1, 6, 3, 5, 7, 9, 10, 5, 7, 8, 9,\
    \ 10, 2, 4, 5, 6, 7, 8, 2, 1, 2, 3, 4, 5, 7, 6, 2, 4, 6, 7, 1, 3, 2, 1, 2, 4,\
    \ 1, 4, 5, 6, 7, 6, 4, 5, 7, 1, 4, 5, 7, 4, 5, 6, 7, 8, 9, 1, 4, 5, 6, 8, 9, 1,\
    \ 2, 4, 5, 6, 7, 8, 2, 4, 7, 8, 1, 4, 7, 8, 2, 4, 7, 8, 2, 4, 7, 8, 2, 3, 4, 7,\
    \ 2, 3, 4, 6, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3,\
    \ 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5,\
    \ 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3, 4, 5, 2, 3,", "    $max\
    \ = array_map(function ($number) {\n        return $number;\n    }, $numbers);\n\
    \n    for ($i = 1; $i < count($numbers); $i++) {\n        if ($numbers[$i] > $max[$i\
    \ - 1]) {\n            $max[$i] = $numbers[$i];\n        } else {\n          \
    \  $max[$i] = $max[$i - 1];\n        }\n    }\n\n    return $max;\n}\n\n$numbers\
    \ = array(1, 2, 3, 2, 3, 4, 2);\n\nprint_r(rolling_max($numbers));", "    $result\
    \ = [];\n    $max = null;\n    foreach ($numbers as $key => $val) {\n        if\
    \ ($max === null || $val > $max) {\n            $max = $val;\n        }\n    \
    \    $result[$key] = $max;\n    }\n    return $result;\n}\n\n$input = array(1,\
    \ 2, 3, 2, 3, 4, 2);\nprint_r(rolling_max($input));", "    $rolling_max = [];\n\
    \    $maximum = null;\n    foreach ($numbers as $i => $num) {\n        if ($num\
    \ > $maximum) {\n            $maximum = $num;\n        }\n        $rolling_max[$i]\
    \ = $maximum;\n    }\n    return $rolling_max;\n}\n", "    $result = array();\n\
    \    $max_value = array_shift($numbers);\n    $result[] = $max_value;\n    foreach\
    \ ($numbers as $number) {\n        if ($number > $max_value) {\n            $max_value\
    \ = $number;\n        }\n        $result[] = $max_value;\n    }\n    return $result;\n\
    }\n", "\t$max = $numbers[0];\n\t$result = array($max);\n\tfor ($i = 1; $i < count($numbers);\
    \ $i++) {\n\t\t$num = $numbers[$i];\n\t\tif ($num > $max) {\n\t\t\t$max = $num;\n\
    \t\t}\n\t\t$result[] = $max;\n\t}\n\treturn $result;\n}\n", "    $rolling_max\
    \ = array();\n    $current_max = $numbers[0];\n    $rolling_max[] = $current_max;\n\
    \    for ($i = 1; $i < count($numbers); $i++) {\n        if ($numbers[$i] > $current_max)\
    \ {\n            $current_max = $numbers[$i];\n        }\n        $rolling_max[]\
    \ = $current_max;\n    }\n    return $rolling_max;\n}\n", "    $max = $numbers[0];\n\
    \    $result = [];\n    foreach ($numbers as $number) {\n        $max = max($max,\
    \ $number);\n        $result[] = $max;\n    }\n    return $result;\n}\n", "  $max\
    \ = [];\n  $rolling = -1;\n  foreach ($numbers as $number) {\n    if ($number\
    \ > $rolling) {\n      $rolling = $number;\n    }\n    $max[] = $rolling;\n  }\n\
    \  return $max;\n}\n\n$numbers = [1, 2, 3, 2, 3, 4, 2];\n$max = rolling_max($numbers);\n\
    \necho implode(', ', $max) . \"\\n\";", "    $result = array();\n    $current_max\
    \ = null;\n    foreach ($numbers as $number) {\n        if ($current_max === null\
    \ || $number > $current_max) {\n            $current_max = $number;\n        }\n\
    \        $result[] = $current_max;\n    }\n    return $result;\n}\n", "\t// basic\
    \ check for invalid input\n\tif (!is_array($numbers)) {\n\t\tthrow new InvalidArgumentException();\n\
    \t}\n\n\t// check for empty array\n\tif (empty($numbers)) {\n\t\treturn array();\n\
    \t}\n\n\t// initialize output array\n\t$rolling_max = array($numbers[0]);\n\n\t\
    // find rolling max by looping through the array from the second element\n\tfor\
    \ ($i = 1; $i < count($numbers); $i++) {\n\t\t$rolling_max[] = max($rolling_max[$i\
    \ - 1], $numbers[$i]);\n\t}\n\n\treturn $rolling_max;\n}\n", "    $length = count($numbers);\n\
    \    $result = array();\n    $max = 0;\n    for ($i = 0; $i < $length; $i++) {\n\
    \        $max = max($max, $numbers[$i]);\n        $result[] = $max;\n    }\n \
    \   return $result;\n}\n", "\t$maxes = [];\n\t$max = $numbers[0];\n\t$maxes[]\
    \ = $max;\n\tfor ($i = 1; $i < count($numbers); $i++) {\n\t\tif ($numbers[$i]\
    \ > $max) {\n\t\t\t$max = $numbers[$i];\n\t\t}\n\t\t$maxes[] = $max;\n\t}\n\t\
    return $maxes;\n}\n", "    $max_so_far = NULL;\n    foreach ($numbers as $number)\
    \ {\n        if ($max_so_far === NULL) {\n            $max_so_far = $number;\n\
    \        } else {\n            $max_so_far = max($max_so_far, $number);\n    \
    \    }\n        $max[] = $max_so_far;\n    }\n    return $max;\n}\n\n$numbers\
    \ = array(1, 2, 3, 2, 3, 4, 2);\nprint_r(rolling_max($numbers));\n", "  $rolling_max\
    \ = array();\n  foreach ($numbers as $num) {\n    $rolling_max[] = max($rolling_max\
    \ + array($num));\n  }\n  return $rolling_max;\n}\n\n$numbers = array(1, 2, 3,\
    \ 2, 3, 4, 2);\necho implode(', ', rolling_max($numbers)) . PHP_EOL;\n", "  $max\
    \ = PHP_INT_MIN;\n  $result = array();\n  foreach ($numbers as $number) {\n  \
    \  $max = max($max, $number);\n    $result[] = $max;\n  }\n  return $result;\n\
    }\n", "    $array = [];\n    $max = 0;\n    foreach ($numbers as $number) {\n\
    \        if ($number > $max) {\n            $max = $number;\n        }\n     \
    \   $array[] = $max;\n    }\n    return $array;\n}\n", "\t$prev_max = array();\n\
    \t$max = -1;\n\tforeach ($numbers as $n) {\n\t\tif ($n > $max) {\n\t\t\t$max =\
    \ $n;\n\t\t}\n\t\t$prev_max[] = $max;\n\t}\n\treturn $prev_max;\n}\n", "    $max\
    \ = 0;\n    $result = array();\n    foreach ($numbers as $number) {\n        $max\
    \ = max($max, $number);\n        $result[] = $max;\n    }\n    return $result;\n\
    }\n", "    $roll_max = [];\n    $max = 0;\n    for ($i = 0; $i < count($numbers);\
    \ $i++) {\n        $num = $numbers[$i];\n        if ($num > $max) {\n        \
    \    $max = $num;\n        }\n        $roll_max[] = $max;\n    }\n    return $roll_max;\n\
    }\n", "    $max = $numbers[0];\n    $result = array($max);\n    for ($i = 1; $i\
    \ < count($numbers); $i++) {\n        $number = $numbers[$i];\n        if ($number\
    \ > $max) {\n            $max = $number;\n        }\n        $result[] = $max;\n\
    \    }\n    return $result;\n}\n", "  $rolling = [];\n  foreach ($numbers as $i\
    \ => $number) {\n    $rolling[$i] = $number;\n    foreach ($numbers as $k => $other)\
    \ {\n      if ($k < $i && $rolling[$k] > $rolling[$i]) {\n        $rolling[$i]\
    \ = $rolling[$k];\n      }\n    }\n  }\n  return $rolling;\n}\n", "    $max =\
    \ $numbers[0];\n    $rolling_max = [];\n    foreach ($numbers as $number) {\n\
    \        if ($number > $max) {\n            $max = $number;\n        }\n     \
    \   $rolling_max[] = $max;\n    }\n    return $rolling_max;\n}\n", "    $max =\
    \ [];\n    $current_max = null;\n    for ($i = 0; $i < count($numbers); $i++)\
    \ {\n        if (empty($current_max) || $numbers[$i] > $current_max) {\n     \
    \       $current_max = $numbers[$i];\n        }\n        $max[] = $current_max;\n\
    \    }\n    return $max;\n}\n", "\tif (count($numbers) == 0) {\n\t\treturn $numbers;\n\
    \t}\n\n\t$curr_max = $numbers[0];\n\t$numbers[0] = $curr_max;\n\tfor ($i = 1;\
    \ $i < count($numbers); $i++) {\n\t\tif ($numbers[$i] > $curr_max) {\n\t\t\t$curr_max\
    \ = $numbers[$i];\n\t\t}\n\t\t$numbers[$i] = $curr_max;\n\t}\n\n\treturn $numbers;\n\
    }\n", "  $length = count($numbers);\n  $result = array();\n  $current_max = -INF;\n\
    \  for ($i = 0; $i < $length; $i++) {\n    $current_max = max($current_max, $numbers[$i]);\n\
    \    $result[] = $current_max;\n  }\n  return $result;\n}\n", "  $result = [];\n\
    \  $current_max = null;\n  foreach ($numbers as $number) {\n    if ($current_max\
    \ === null || $number > $current_max) {\n      $current_max = $number;\n    }\n\
    \    $result[] = $current_max;\n  }\n  return $result;\n}\nprint_r(rolling_max([1,\
    \ 2, 3, 2, 3, 4, 2]));", "  $max = array();\n  foreach ($numbers as $number) {\n\
    \    if (empty($max)) {\n      $max[] = $number;\n    } else {\n      $max[] =\
    \ max($max[count($max) - 1], $number);\n    }\n  }\n  return $max;\n}\n", "\t\
    $result = array();\n\t$max = null;\n\tfor ($i = 0; $i < count($numbers); $i++)\
    \ {\n\t\t$max = max($max, $numbers[$i]);\n\t\t$result[] = $max;\n\t}\n\treturn\
    \ $result;\n}\n", "    $maxes = [];\n    $max = 0;\n    foreach ($numbers as $number)\
    \ {\n        if ($number > $max) {\n            $max = $number;\n        }\n \
    \       $maxes[] = $max;\n    }\n    return $maxes;\n}\n", "    $result = array();\n\
    \    $max = $numbers[0];\n    $result[] = $max;\n    for ($i = 1; $i < count($numbers);\
    \ $i++) {\n        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n\
    \        }\n        $result[] = $max;\n    }\n    return $result;\n}\n", "   \
    \ $maxes = [];\n    $max = $numbers[0];\n    foreach ($numbers as $num) {\n  \
    \      if ($num > $max) {\n            $max = $num;\n        }\n        $maxes[]\
    \ = $max;\n    }\n    return $maxes;\n}\n", "    $max = 0;\n    $rolling_max =\
    \ array();\n    foreach ($numbers as $number) {\n        if ($number > $max) {\n\
    \            $max = $number;\n        }\n        $rolling_max[] = $max;\n    }\n\
    \    return $rolling_max;\n}\n", "    $result = array();\n    $max = NULL;\n \
    \   foreach ($numbers as $number) {\n        if ($max === NULL) {\n          \
    \  $max = $number;\n        } elseif ($number > $max) {\n            $max = $number;\n\
    \        }\n        $result[] = $max;\n    }\n    return $result;\n}\n", "\t$max\
    \ = array_pop($numbers);\n\t$ret = array($max);\n\twhile ($number = array_pop($numbers))\
    \ {\n\t\t$max = max($max, $number);\n\t\tarray_unshift($ret, $max);\n\t}\n\treturn\
    \ $ret;\n}\n", "    $maxes = array();\n    foreach ($numbers as $i => $number)\
    \ {\n        if ($i == 0) {\n            $maxes[] = $number;\n        } else {\n\
    \            $previous_max = $maxes[$i - 1];\n            $maxes[] = max($previous_max,\
    \ $number);\n        }\n    }\n    return $maxes;\n}\n", "    $max = 0;\n    $max_numbers\
    \ = array();\n    foreach ($numbers as $number) {\n        if ($number > $max)\
    \ {\n            $max = $number;\n        }\n        $max_numbers[] = $max;\n\
    \    }\n    return $max_numbers;\n}\n", "\t$max = 0;\n\t$res = array();\n\tforeach\
    \ ($numbers as $number) {\n\t\tif ($number > $max) {\n\t\t\t$max = $number;\n\t\
    \t}\n\t\t$res[] = $max;\n\t}\n\treturn $res;\n}\n", "    $result = [];\n    for\
    \ ($i = 0; $i < count($numbers); $i++) {\n        $result[] = max(array_slice($numbers,\
    \ 0, $i + 1));\n    }\n    return $result;\n}\n", "    $result = [];\n    $count\
    \ = count($numbers);\n    for ($i = 0; $i < $count; $i++) {\n        $max = $numbers[$i];\n\
    \        for ($j = $i; $j < $count; $j++) {\n            if ($numbers[$j] > $max)\
    \ {\n                $max = $numbers[$j];\n            }\n        }\n        $result[]\
    \ = $max;\n    }\n    return $result;\n}", "    $max_so_far = [];\n    $result\
    \ = [];\n    for ($i = 0; $i < count($numbers); $i++) {\n        $cur_num = $numbers[$i];\n\
    \        if (empty($max_so_far)) {\n            $max_so_far[] = $cur_num;\n  \
    \          $result[] = $cur_num;\n        } else {\n            if ($cur_num >\
    \ $max_so_far[$i - 1]) {\n                $max_so_far[] = $cur_num;\n        \
    \        $result[] = $cur_num;\n            } else {\n                $max_so_far[]\
    \ = $max_so_far[$i - 1];\n                $result[] = $max_so_far[$i - 1];\n \
    \           }\n        }\n    }\n    return $result;\n}\n", "    $result = [];\n\
    \    $max_value = $numbers[0];\n    $result[] = $max_value;\n    $length = count($numbers);\n\
    \    for ($i = 1; $i < $length; $i++) {\n        $max_value = max($max_value,\
    \ $numbers[$i]);\n        $result[] = $max_value;\n    }\n    return $result;\n\
    }\n", "    $m = $numbers[0];\n    $r = array($m);\n    for ($i = 1; $i < count($numbers);\
    \ $i++) {\n        $m = max($m, $numbers[$i]);\n        $r[] = $m;\n    }\n  \
    \  return $r;\n}\n", "\t$max_list = array();\n\tfor ($i = 0; $i < count($numbers);\
    \ $i++) {\n\t\tif ($i == 0) {\n\t\t\t$max_list[$i] = $numbers[$i];\n\t\t} else\
    \ {\n\t\t\t$max_list[$i] = max($max_list[$i - 1], $numbers[$i]);\n\t\t}\n\t}\n\
    \treturn $max_list;\n}", "    $result = array();\n    $currentMax = $numbers[0];\n\
    \    foreach ($numbers as $number) {\n        if ($number > $currentMax) {\n \
    \           $currentMax = $number;\n        }\n        $result[] = $currentMax;\n\
    \    }\n    return $result;\n}", "    $result = array();\n    $current_max = $numbers[0];\n\
    \    for ($i = 0; $i < count($numbers); $i++) {\n        $result[] = $current_max;\n\
    \        if ($numbers[$i] > $current_max) {\n            $current_max = $numbers[$i];\n\
    \        }\n    }\n    return $result;\n}\n", "  $maxes = [];\n  $max_to_now =\
    \ 0;\n  foreach ($numbers as $n) {\n    $max_to_now = max($max_to_now, $n);\n\
    \    $maxes[] = $max_to_now;\n  }\n  return $maxes;\n}\n\n$numbers = array(1,\
    \ 2, 3, 2, 3, 4, 2);\nprint_r(rolling_max($numbers));", "    $result = [];\n \
    \   $max = $numbers[0];\n    foreach ($numbers as $number) {\n        if ($number\
    \ > $max) {\n            $max = $number;\n        }\n        $result[] = $max;\n\
    \    }\n    return $result;\n}\n", "    $maxes = [];\n    $max = $numbers[0];\n\
    \    foreach ($numbers as $num) {\n        if ($num > $max) {\n            $max\
    \ = $num;\n        }\n        $maxes[] = $max;\n    }\n    return $maxes;\n}",
  "    $max_elements = array();\n    $max_element = 0;\n    foreach ($numbers as $number)\
    \ {\n        if ($number > $max_element) {\n            $max_element = $number;\n\
    \        }\n        $max_elements[] = $max_element;\n    }\n    return $max_elements;\n\
    }\n", "    $max = array();\n    $max[] = $numbers[0];\n    for ($i = 1; $i < count($numbers);\
    \ $i++) {\n        $max[] = max($max[$i - 1], $numbers[$i]);\n    }\n    return\
    \ $max;\n}\n", "  $max = 0;\n  $new_numbers = array();\n  foreach ($numbers as\
    \ $number) {\n    if ($number > $max) {\n      $max = $number;\n    }\n    $new_numbers[]\
    \ = $max;\n  }\n  return $new_numbers;\n}\n$numbers = array(1, 2, 3, 2, 3, 4,\
    \ 2);\nprint_r(rolling_max($numbers));", "    $length = count($numbers);\n   \
    \ $roll_max = [];\n    for ($i = 0; $i < $length; $i++) {\n        $roll_max[$i]\
    \ = max(array_slice($numbers, 0, $i + 1));\n    }\n    return $roll_max;\n}\n",
  "    $max = array();\n    $max[] = $numbers[0];\n    for ($i = 1; $i < count($numbers);\
    \ $i++) {\n        $max[] = max($max[$i - 1], $numbers[$i]);\n    }\n    return\
    \ $max;\n}\n", "    $rolling_max = array();\n    $current_max = 0;\n    foreach\
    \ ($numbers as $n) {\n        if ($n > $current_max) {\n            $current_max\
    \ = $n;\n        }\n        $rolling_max[] = $current_max;\n    }\n    return\
    \ $rolling_max;\n}\n", "  $result = array();\n  $max = null;\n  foreach ($numbers\
    \ as $number) {\n    if (is_null($max) || $number > $max) {\n      $max = $number;\n\
    \    }\n    $result[] = $max;\n  }\n  return $result;\n}\n", "  $rolling_max =\
    \ [];\n  $current_max = null;\n  foreach ($numbers as $i => $number) {\n    if\
    \ ($current_max === null || $number > $current_max) {\n      $current_max = $number;\n\
    \    }\n    $rolling_max[$i] = $current_max;\n  }\n  return $rolling_max;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
