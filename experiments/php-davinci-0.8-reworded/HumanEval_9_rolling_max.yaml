name: HumanEval_9_rolling_max
language: php
prompt: "<?php\n// From a given array of integers, generate an array of rolling maximum\
  \ element found until given moment\n// in the sequence.\n// >>> rolling_max(array(1,\
  \ 2, 3, 2, 3, 4, 2))\n// array(1, 2, 3, 3, 3, 4, 4)\nfunction rolling_max($numbers)\
  \ {\n"
tests: "function candidate(...$args) {\n    return rolling_max(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array()) !== array()) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(1, 2, 3, 4)) !== array(1, 2, 3, 4))\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(4, 3, 2, 1))\
  \ !== array(4, 4, 4, 4)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(3,\
  \ 2, 3, 100, 3)) !== array(3, 3, 3, 100, 100)) { throw new Exception(\"Test failed!\"\
  ); }\n}\n\ntest();"
completions: ["  $result = array();\n  $running_max = null;\n  foreach ($numbers as\
    \ $number) {\n    if ($running_max === null || $number > $running_max) {\n   \
    \   $running_max = $number;\n    }\n    $result[] = $running_max;\n  }\n  return\
    \ $result;\n}\n", "    $result = [];\n    $max = $numbers[0];\n    foreach ($numbers\
    \ as $number) {\n        if ($number > $max) {\n            $max = $number;\n\
    \        }\n        $result[] = $max;\n    }\n    return $result;\n}\n", "\tif\
    \ (!is_array($numbers)) {\n\t\treturn false;\n\t}\n\t$max_elements = array();\n\
    \tforeach ($numbers as $i => $number) {\n\t\tif ($i == 0) {\n\t\t\t$max_elements[]\
    \ = $number;\n\t\t} else {\n\t\t\t$max_elements[] = max($number, $max_elements[$i\
    \ - 1]);\n\t\t}\n\t}\n\treturn $max_elements;\n}\n", "    $maxes = [];\n    $max\
    \ = null;\n    foreach ($numbers as $num) {\n        if ($max === null || $num\
    \ > $max) {\n            $max = $num;\n        }\n        $maxes[] = $max;\n \
    \   }\n    return $maxes;\n}\n", "\t$result = array();\n\t$current_max = $numbers[0];\n\
    \t$result[] = $current_max;\n\tforeach ($numbers as $index => $value) {\n\t\t\
    if ($index == 0) {\n\t\t\tcontinue;\n\t\t}\n\t\tif ($value > $current_max) {\n\
    \t\t\t$current_max = $value;\n\t\t}\n\t\t$result[] = $current_max;\n\t}\n\treturn\
    \ $result;\n}\n", "\t$result = [];\n\t$max = null;\n\tforeach ($numbers as $number)\
    \ {\n\t\tif ($max === null || $number > $max) {\n\t\t\t$max = $number;\n\t\t}\n\
    \t\t$result[] = $max;\n\t}\n\treturn $result;\n}\n\nprint_r(rolling_max([1, 2,\
    \ 3, 2, 3, 4, 2]));", "    $result = array();\n    $max = null;\n    foreach ($numbers\
    \ as $number) {\n        if ($max === null || $number > $max) {\n            $max\
    \ = $number;\n        }\n        $result[] = $max;\n    }\n    return $result;\n\
    }\n", "    $result = [];\n    $count = count($numbers);\n    for ($i = 0; $i <\
    \ $count; $i++) {\n        $result[] = max(array_slice($numbers, 0, $i + 1));\n\
    \    }\n    return $result;\n}\n\nvar_dump(rolling_max([1, 2, 3, 2, 3, 4, 2]));",
  "  $max = -1;\n  $maxes = array();\n  foreach ($numbers as $number) {\n    if ($number\
    \ > $max) {\n      $max = $number;\n    }\n    $maxes[] = $max;\n  }\n  return\
    \ $maxes;\n}\n", "    if (count($numbers) == 0) {\n        return array();\n \
    \   }\n    $max_so_far = $numbers[0];\n    $result = array($max_so_far);\n   \
    \ for ($i = 1; $i < count($numbers); $i++) {\n        $max_so_far = max($max_so_far,\
    \ $numbers[$i]);\n        $result[] = $max_so_far;\n    }\n    return $result;\n\
    }\n", "  $max = NULL;\n  $maxes = array();\n  foreach ($numbers as $number) {\n\
    \    if (empty($max) || $number > $max) {\n      $max = $number;\n    }\n    $maxes[]\
    \ = $max;\n  }\n  return $maxes;\n}\n", "    $ret = array();\n    $max = $numbers[0];\n\
    \    $ret[] = $max;\n    for ($i = 1; $i < count($numbers); $i++) {\n        if\
    \ ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n        }\n     \
    \   $ret[] = $max;\n    }\n    return $ret;\n}\n", "  $roll_max = array();\n \
    \ $max = null;\n  for ($i = 0; $i < count($numbers); $i++) {\n    $max = max($max,\
    \ $numbers[$i]);\n    $roll_max[] = $max;\n  }\n  return $roll_max;\n}\n", " \
    \   $max = array();\n    for ($i = 0; $i < count($numbers); $i++) {\n        if\
    \ ($i === 0) {\n            $max[$i] = $numbers[$i];\n        } else if ($numbers[$i]\
    \ > $max[$i - 1]) {\n            $max[$i] = $numbers[$i];\n        } else {\n\
    \            $max[$i] = $max[$i - 1];\n        }\n    }\n    return $max;\n}\n",
  "    $rolling_max = [];\n    $max = $numbers[0];\n    foreach ($numbers as $value)\
    \ {\n        if ($value > $max) {\n            $max = $value;\n        }\n   \
    \     $rolling_max[] = $max;\n    }\n    return $rolling_max;\n}\n", "\t$max =\
    \ null;\n\t$res = array();\n\tforeach ($numbers as $n) {\n\t\tif ($max === null\
    \ || $n > $max) {\n\t\t\t$max = $n;\n\t\t}\n\t\t$res[] = $max;\n\t}\n\treturn\
    \ $res;\n}\n", "    // We'll keep track of current maximum, and the result array\n\
    \    $max = $numbers[0];\n    $result = array($max);\n\n    // Loop through the\
    \ numbers, starting from the second\n    for ($i = 1; $i < count($numbers); $i++)\
    \ {\n        // If current number is greater than current maximum, update both.\n\
    \        if ($numbers[$i] > $max) {\n            $max = $numbers[$i];\n      \
    \  }\n        // Store the current maximum as the result\n        $result[] =\
    \ $max;\n    }\n\n    return $result;\n}\n", "    $return = array();\n    $current_max\
    \ = $numbers[0];\n    foreach ($numbers as $number) {\n        if ($number > $current_max)\
    \ {\n            $current_max = $number;\n        }\n        $return[] = $current_max;\n\
    \    }\n    return $return;\n}\n", "  $output = array();\n  $currentMax = null;\n\
    \  foreach ($numbers as $i => $number) {\n    if (is_null($currentMax) || $number\
    \ > $currentMax) {\n      $currentMax = $number;\n    }\n    $output[] = $currentMax;\n\
    \  }\n  return $output;\n}\n", "    $maxes = [];\n    $currentMax = $numbers[0];\n\
    \    for ($i = 0; $i < count($numbers); $i++) {\n        $current = $numbers[$i];\n\
    \        if ($current > $currentMax) {\n            $currentMax = $current;\n\
    \        }\n        $maxes[] = $currentMax;\n    }\n    return $maxes;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
