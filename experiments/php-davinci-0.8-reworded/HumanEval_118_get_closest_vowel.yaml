name: HumanEval_118_get_closest_vowel
language: php
prompt: "<?php\n// You are given a word. Your task is to find the closest vowel that\
  \ stands between \n// two consonants from the right side of the word (case sensitive).\n\
  // Vowels in the beginning and ending doesn't count. Return empty string if you\
  \ didn't\n// find any vowel met the above condition. \n// You may assume that the\
  \ given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
  yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
  quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel($word)\
  \ {\n"
tests: "function candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\"\
  ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Above\") !== \"\
  o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $vowels = \"aeiouAEIOU\";\n    for ($i = strlen($word) - 1; $i\
    \ >= 0; $i--) {\n        $char = $word[$i];\n        if (strpos($vowels, $char)\
    \ !== false) {\n            return $char;\n        }\n    }\n    return \"\";\n\
    }\n\necho get_closest_vowel(\"yogurt\");\necho \"\\n\";\necho get_closest_vowel(\"\
    FULL\");\necho \"\\n\";\necho get_closest_vowel(\"quick\");\necho \"\\n\";\necho\
    \ get_closest_vowel(\"ab\");\necho \"\\n\";", "    $vowels = [\"a\",\"e\",\"i\"\
    ,\"o\",\"u\"];\n    $check = false;\n    for ($i=strlen($word)-1; $i > 0; $i--)\
    \ { \n        if (in_array($word[$i], $vowels)) {\n            if ($check) {\n\
    \                return $word[$i];\n            }\n        } else {\n        \
    \    $check = true;\n        }\n    }\n    return \"\";\n}\nprint_r(get_closest_vowel(\"\
    yogurt\").\"\\n\");\nprint_r(get_closest_vowel(\"FULL\").\"\\n\");\nprint_r(get_closest_vowel(\"\
    quick\").\"\\n\");\nprint_r(get_closest_vowel(\"ab\").\"\\n\");", "    $vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    $reversed_word = strrev($word);\n    $closest_vowel\
    \ = '';\n    $flag = false;\n    for ($i = 0; $i < strlen($reversed_word); $i++)\
    \ {\n        if (in_array($reversed_word[$i], $vowels)) {\n            if (!$flag)\
    \ {\n                $closest_vowel = $reversed_word[$i];\n                $flag\
    \ = true;\n            }\n        } else {\n            if ($flag) {\n       \
    \         return strrev($closest_vowel);\n            }\n        }\n    }\n  \
    \  return '';\n}\n\nvar_dump(get_closest_vowel(\"yogurt\"));\nvar_dump(get_closest_vowel(\"\
    FULL\"));\nvar_dump(get_closest_vowel(\"quick\"));\nvar_dump(get_closest_vowel(\"\
    ab\"));", "    $vowels = \"aeiouAEIOU\";\n    $vowel_array = str_split($vowels);\n\
    \    $word_array = str_split($word);\n    $vowel_index = '';\n    $consonant_index\
    \ = '';\n    foreach($word_array as $key => $value) {\n        if(in_array($value,\
    \ $vowel_array)) {\n            $vowel_index = $key;\n            break;\n   \
    \     }\n    }\n    if($vowel_index === '') {\n        return \"\";\n    }\n \
    \   $consonant_index = $vowel_index;\n    while($consonant_index >= 0) {\n   \
    \     if(!in_array($word_array[$consonant_index], $vowel_array)) {\n         \
    \   break;\n        }\n        $consonant_index -= 1;\n    }\n    if($consonant_index\
    \ === -1) {\n        return \"\";\n    }\n    $consonant_index += 1;\n    return\
    \ $word_array[$consonant_index];\n}\n", "\t$vowels = \"AEIOUaeiou\";\n\t$consonants\
    \ = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\";\n\t$strlen = strlen($word);\n\
    \t$vowel_index = \"\";\n\tfor ($i=$strlen-1; $i >= 0; $i--) { \n\t\tif (strpos($vowels,\
    \ $word[$i]) !== false) {\n\t\t\t$vowel_index = $i;\n\t\t\tbreak;\n\t\t}\n\t}\n\
    \tfor ($i=$vowel_index-1; $i >= 0; $i--) { \n\t\tif (strpos($consonants, $word[$i])\
    \ !== false) {\n\t\t\treturn $word[$vowel_index];\n\t\t}\n\t}\n\treturn \"\";\n\
    }\n", "    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $consonants = ['b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'y', 'z'];\n    $letter_found = false;\n    $word_length = strlen($word);\n\
    \    if($word_length < 3) {\n        return '';\n    }\n    for($i = $word_length\
    \ - 1; $i > 0; $i--) {\n        if(in_array($word[$i], $vowels)) {\n         \
    \   $letter_found = true;\n            $vowel_position = $i;\n            if(in_array($word[$i-1],\
    \ $consonants) && in_array($word[$i+1], $consonants)) {\n                return\
    \ $word[$i];\n            }\n        }\n    }\n    if($letter_found) {\n     \
    \   return $word[$vowel_position];\n    }\n    return '';\n}\n\necho get_closest_vowel(\"\
    yogurt\");\necho '<br/>';\necho get_closest_vowel(\"FULL\");\necho '<br/>';\n\
    echo get_closest_vowel(\"quick\");\necho '<br/>';\necho get_closest_vowel(\"ab\"\
    );\necho '<br/>';\necho get_closest_vowel(\"sprinkles\");\necho '<br/>';\necho\
    \ get_closest_vowel(\"abacabae\");\necho '<br/>';\necho get_closest_vowel(\"lxxyzo\"\
    );\necho '<br/>';\necho get_closest_vowel(\"tlppx\");\necho '<br/>';\necho get_closest_vowel(\"\
    pippie\");\necho '<br/>';\necho get_closest_vowel(\"pizzazz\");\necho '<br/>",
  "    $position = strlen($word);\n    $vowels = array('a', 'e', 'i', 'o', 'u', 'A',\
    \ 'E', 'I', 'O', 'U');\n    $consonants = array('b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z', 'B',\
    \ 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V',\
    \ 'W', 'X', 'Y', 'Z');\n    $flag = false;\n    for ($i = strlen($word) - 1; $i\
    \ >= 0; $i--) {\n        if (in_array($word[$i], $vowels)) {\n            if ($flag)\
    \ {\n                $position = $i;\n                break;\n            }\n\
    \        } else if (in_array($word[$i], $consonants)) {\n            $flag = true;\n\
    \        }\n    }\n    if ($position == strlen($word)) {\n        return \"\"\
    ;\n    } else {\n        return $word[$position];\n    }\n}\n", "    $word = strtolower($word);\n\
    \    $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\");\n    $word_length = strlen($word);\n\
    \    $found_vowel = FALSE;\n    $closest_vowel = \"\";\n    $closest_vowel_distance\
    \ = $word_length;\n    for ($i = $word_length-1; $i >= 0; $i--) {\n        $char\
    \ = $word[$i];\n        if (in_array($char, $vowels)) {\n            $found_vowel\
    \ = TRUE;\n            $distance = $word_length - $i;\n            if ($distance\
    \ < $closest_vowel_distance) {\n                $closest_vowel = $char;\n    \
    \            $closest_vowel_distance = $distance;\n            }\n        } else\
    \ {\n            if ($found_vowel) {\n                return $closest_vowel;\n\
    \            }\n        }\n    }\n    return \"\";\n}\n", "  $word = strrev($word);\n\
    \  $vowels = \"aeiou\";\n  $vowel = '';\n  for ($i = 0; $i < strlen($word); $i++)\
    \ {\n    if (strpos($vowels, $word[$i]) !== false) {\n      $vowel = $word[$i];\n\
    \      $vowelIndex = $i;\n      break;\n    }\n  }\n  if ($vowel == '') {\n  \
    \  return '';\n  }\n  $previous = '';\n  $next = '';\n  for ($i = 0; $i < $vowelIndex;\
    \ $i++) {\n    if (strpos($vowels, $word[$i]) === false) {\n      $previous =\
    \ $word[$i];\n      break;\n    }\n  }\n  for ($i = $vowelIndex + 1; $i < strlen($word);\
    \ $i++) {\n    if (strpos($vowels, $word[$i]) === false) {\n      $next = $word[$i];\n\
    \      break;\n    }\n  }\n  if ($previous == '' || $next == '') {\n    return\
    \ '';\n  }\n  return $vowel;\n}\necho get_closest_vowel(\"yogurt\") . \"\\n\"\
    ;\necho get_closest_vowel(\"FULL\") . \"\\n\";\necho get_closest_vowel(\"quick\"\
    ) . \"\\n\";\necho get_closest_vowel(\"ab\") . \"\\n\";\necho get_closest_vowel(\"\
    war\") . \"\\n\";\necho get_closest_vowel(\"party\") . \"\\n\";\necho get_closest_vowel(\"\
    work\") . \"\\n\";\necho get_closest_vowel(\"joke\") . \"\\n\";\necho get_closest_vowel(\"\
    luck\") . \"\\n\";\necho get_closest_vowel(\"bad\") . \"\\n\";\necho get_closest_vowel(\"\
    taxi\") . \"\\n\";\necho get", "    $vowels = ['a', 'e', 'i', 'o', 'u'];\n   \
    \ $last_char = '';\n    $result = '';\n    for ($i = strlen($word) - 1; $i >=\
    \ 0; $i--) {\n        if ($last_char && in_array($word[$i], $vowels)) {\n    \
    \        $result = $word[$i];\n            break;\n        }\n        if (!in_array($word[$i],\
    \ $vowels)) {\n            $last_char = $word[$i];\n        }\n    }\n    return\
    \ $result;\n}\n", "    $vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"];\n    $found\
    \ = '';\n    $current_closest = \"z\";\n    $found_index = strlen($word);\n  \
    \  //strrpos finds the position of the last occurrence of a substring in a string\n\
    \    //strlen return the length of a string\n    for ($i = 0; $i < strlen($word);\
    \ $i++) {\n        $char = $word[$i];\n        if (in_array($char, $vowels)) {\n\
    \            $is_before_consonant = (in_array($word[$i - 1], $vowels)) ? false\
    \ : true;\n            $is_after_consonant = (in_array($word[$i + 1], $vowels))\
    \ ? false : true;\n            if ($is_before_consonant && $is_after_consonant)\
    \ {\n                $found = $char;\n                $found_index = $i;\n   \
    \             break;\n            }\n        }\n    }\n    if (empty($found))\
    \ {\n        return \"\";\n    }\n    for ($i = $found_index; $i < strlen($word);\
    \ $i++) {\n        $char = $word[$i];\n        if (in_array($char, $vowels)) {\n\
    \            $is_before_consonant = (in_array($word[$i - 1], $vowels)) ? false\
    \ : true;\n            $is_after_consonant = (in_array($word[$i + 1], $vowels))\
    \ ? false : true;\n            if ($is_before_consonant && $is_after_consonant)\
    \ {\n                if ($char < $current_closest) {\n                    $current_closest\
    \ = $char;\n                }\n            }\n        }\n    }\n    return $current_closest;\n\
    }\n\necho get_closest_vowel(\"yogurt\");\necho \"\\n\";\necho get_closest_vowel(\"\
    FULL\");\necho \"\\n\";\necho get_closest_vowel(\"quick\");\necho \"\\n", "  \
    \  $vowels = array(\"a\", \"i\", \"u\", \"e\", \"o\");\n    $closest_vowel = \"\
    \";\n    $distance = strlen($word);\n    $vowel_index = -1;\n    $consonant_before_index\
    \ = -1;\n    $consonant_after_index = -1;\n    $word_length = strlen($word);\n\
    \    for ($i = 0; $i < $word_length; $i++) {\n        $letter = $word[$i];\n \
    \       if (in_array($letter, $vowels)) {\n            $vowel_index = $i;\n  \
    \          break;\n        }\n    }\n    if ($vowel_index < 0) {\n        return\
    \ \"\";\n    }\n    for ($i = $vowel_index - 1; $i >= 0; $i--) {\n        $letter\
    \ = $word[$i];\n        if (!in_array($letter, $vowels)) {\n            $consonant_before_index\
    \ = $i;\n            break;\n        }\n    }\n    for ($i = $vowel_index + 1;\
    \ $i < $word_length; $i++) {\n        $letter = $word[$i];\n        if (!in_array($letter,\
    \ $vowels)) {\n            $consonant_after_index = $i;\n            break;\n\
    \        }\n    }\n    if ($consonant_before_index < 0 || $consonant_after_index\
    \ < 0) {\n        return \"\";\n    }\n    $distance_before = $vowel_index - $consonant_before_index;\n\
    \    $distance_after = $consonant_after_index - $vowel_index;\n    if ($distance_before\
    \ <= $distance_after) {\n        $closest_vowel = $word[$vowel_index];\n    }\
    \ else {\n        $closest_vowel = $word[$vowel_index + 1];\n    }\n    return\
    \ $closest_vowel;\n}\n\n$word = \"yogurt\";", "    $vowels = \"aeiouAEIOU\";\n\
    \    $characters = str_split($word);\n    $closest_vowel = \"\";\n    $i = count($characters)\
    \ - 1;\n    $before_vowel = False;\n    $after_vowel = False;\n    $found_vowel\
    \ = False;\n    while ($i >= 0 && !$found_vowel) {\n        $char = $characters[$i];\n\
    \        if (strpos($vowels, $char) !== False) {\n            $after_vowel = True;\n\
    \            if ($before_vowel) {\n                $found_vowel = True;\n    \
    \            $closest_vowel = $char;\n            }\n        } else {\n      \
    \      $before_vowel = $after_vowel;\n            $after_vowel = False;\n    \
    \    }\n        $i--;\n    }\n    return $closest_vowel;\n}", "  $vowels = array(\"\
    a\", \"e\", \"i\", \"o\", \"u\");\n  $c = strlen($word);\n  for ($i=$c-1; $i>0;\
    \ $i--) {\n    if (in_array($word[$i], $vowels)) {\n      if (!in_array($word[$i-1],\
    \ $vowels)) {\n        return $word[$i];\n      }\n    }\n  }\n  return \"\";\n\
    }\n", "  $vowels = [\n    'a' => 0,\n    'e' => 0,\n    'i' => 0,\n    'o' =>\
    \ 0,\n    'u' => 0,\n    'y' => 0,\n  ];\n  $characters = str_split($word);\n\
    \  $length = count($characters);\n  for ($i = $length - 1; $i >= 0; $i--) {\n\
    \    $char = $characters[$i];\n    if (array_key_exists($char, $vowels)) {\n \
    \     $vowels[$char]++;\n    } else {\n      foreach ($vowels as $vowel => $count)\
    \ {\n        if ($count > 0) {\n          return $vowel;\n        }\n      }\n\
    \    }\n  }\n  return '';\n}\n", "    $word = strtolower($word);\n    $length\
    \ = strlen($word);\n    $vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    $prev_char\
    \ = '';\n    $next_char = '';\n    $curr_vowel = '';\n    $count = 0;\n    for\
    \ ($i = $length - 1; $i >= 0; $i--) {\n        $char = $word[$i];\n        if\
    \ (in_array($char, $vowels)) {\n            $curr_vowel = $char;\n           \
    \ $count++;\n        } else {\n            if ($count === 1) {\n             \
    \   $next_char = $char;\n                break;\n            }\n        }\n  \
    \  }\n    $closest_vowel = '';\n    if ($curr_vowel !== '' && $next_char !== '')\
    \ {\n        $closest_vowel = $curr_vowel;\n    }\n    return $closest_vowel;\n\
    }\n\nprint_r(get_closest_vowel(\"yogurt\"));\nprint_r(get_closest_vowel(\"FULL\"\
    ));\nprint_r(get_closest_vowel(\"quick\"));\nprint_r(get_closest_vowel(\"ab\"\
    ));", "    $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\");\n    $ret = \"\"\
    ;\n    for ($i = strlen($word) - 1; $i >= 0; $i--) {\n        if (in_array($word[$i],\
    \ $vowels)) {\n            if ($i == strlen($word) - 1) {\n                $ret\
    \ = \"\";\n                break;\n            }\n            if (!in_array($word[$i\
    \ - 1], $vowels) && !in_array($word[$i + 1], $vowels)) {\n                $ret\
    \ = $word[$i];\n                break;\n            }\n        }\n    }\n    return\
    \ $ret;\n}\n", "  $vowels = array('a', 'e', 'i', 'o', 'u');\n  $word = strtolower($word);\n\
    \  $pos = 0;\n  $max = 0;\n  for ($i = 0; $i < strlen($word); $i++) {\n    if\
    \ ($word[$i] == 'a' || $word[$i] == 'e' || $word[$i] == 'i' || $word[$i] == 'o'\
    \ || $word[$i] == 'u') {\n      if ($max == 0) {\n        $max = $i;\n      }\n\
    \      else {\n        $pos = $i;\n        break;\n      }\n    }\n  }\n  if ($max\
    \ == 0) {\n    return '';\n  }\n  else {\n    $min = min($max, $pos);\n    return\
    \ $word[$min];\n  }\n}", "  $vowels = ['a', 'e', 'i', 'o', 'u'];\n  $result =\
    \ '';\n  for ($i = strlen($word) - 1; $i >= 0; $i--) {\n    if (in_array($word[$i],\
    \ $vowels)) {\n      if ($i != 0 && $i != strlen($word) - 1) {\n        if (!in_array($word[$i\
    \ - 1], $vowels) && !in_array($word[$i + 1], $vowels)) {\n          $result =\
    \ $word[$i];\n          break;\n        }\n      }\n    }\n  }\n  return $result;\n\
    }\n\necho get_closest_vowel(\"yogurt\");", "    $vowels = array('a', 'e', 'i',\
    \ 'o', 'u');\n    $word = str_split($word);\n    $len = count($word);\n    $found\
    \ = FALSE;\n    for ($i = $len - 1; $i >= 0; $i--) {\n        if (in_array($word[$i],\
    \ $vowels)) {\n            $j = $i - 1;\n            while ($j >= 0) {\n     \
    \           if (in_array($word[$j], $vowels)) {\n                    $j--;\n \
    \               } else {\n                    $found = TRUE;\n               \
    \     break;\n                }\n            }\n            if ($found) {\n  \
    \              break;\n            }\n        }\n    }\n    if ($found) {\n  \
    \      return $word[$i];\n    } else {\n        return '';\n    }\n}\nprint get_closest_vowel(\"\
    yogurt\");\necho \"\\n\";\nprint get_closest_vowel(\"FULL\");\necho \"\\n\";\n\
    print get_closest_vowel(\"quick\");\necho \"\\n\";\nprint get_closest_vowel(\"\
    ab\");\necho \"\\n\";\nprint get_closest_vowel(\"desk\");\necho \"\\n\";\nprint\
    \ get_closest_vowel(\"bear\");\necho \"\\n\";", "\t\n\t$vowels = array('a', 'e',\
    \ 'i', 'o', 'u');\n\t$count = strlen($word);\n\t$i = $count - 1;\n\t$vowel = '';\n\
    \t\n\twhile ($i > 0) {\n\t\t$letter = $word[$i];\n\t\tif (in_array($letter, $vowels))\
    \ {\n\t\t\t$vowel = $letter;\n\t\t\tbreak;\n\t\t}\n\t\t$i--;\n\t}\n\t\n\tif ($vowel)\
    \ {\n\t\t$before = $word[$i - 1];\n\t\t$after = $word[$i + 1];\n\t\tif (in_array($before,\
    \ $vowels) || in_array($after, $vowels)) {\n\t\t\t$vowel = '';\n\t\t}\n\t}\n\t\
    \n\treturn $vowel;\n}", "\tif (is_string($word)) {\n\t\t$vowels = array('a', 'e',\
    \ 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U');\n\t\t$word_array = str_split($word);\n\
    \t\t$i = 0;\n\t\tforeach ($word_array as $key => $value) {\n\t\t\tif (in_array($value,\
    \ $vowels)) {\n\t\t\t\t$i++;\n\t\t\t}\n\t\t}\n\t\tif ($i > 1) {\n\t\t\t$j = count($word_array);\n\
    \t\t\tfor ($k = $j; $k > 0; $k--) {\n\t\t\t\t$flag = false;\n\t\t\t\tif (in_array($word_array[$k],\
    \ $vowels)) {\n\t\t\t\t\t$flag = true;\n\t\t\t\t\tfor ($l = ($k - 1); $l > 0;\
    \ $l--) {\n\t\t\t\t\t\tif (in_array($word_array[$l], $vowels)) {\n\t\t\t\t\t\t\
    \t$flag = false;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\
    if ($flag == true) {\n\t\t\t\t\t\treturn $word_array[$k];\n\t\t\t\t\t}\n\t\t\t\
    \t}\n\t\t\t}\n\t\t}\n\t}\n\treturn '';\n}\n", "    $vowels = ['a', 'e', 'i', 'o',\
    \ 'u'];\n    $len = strlen($word);\n    $closest_vowel = '';\n    $closest_index\
    \ = $len;\n    $closest_left_consonant = '';\n    $closest_right_consonant = '';\n\
    \    $vowel_index = 0;\n    $index = $len - 1;\n    while($index >= 0) {\n   \
    \     $char = $word[$index];\n        if(in_array($char, $vowels)) {\n       \
    \     $vowel_index = $index;\n            for($i = $vowel_index + 1; $i < $len;\
    \ $i++) {\n                if(!in_array($word[$i], $vowels)) {\n             \
    \       $closest_right_consonant = $word[$i];\n                    break;\n  \
    \              }\n            }\n            for($i = $vowel_index - 1; $i >=\
    \ 0; $i--) {\n                if(!in_array($word[$i], $vowels)) {\n          \
    \          $closest_left_consonant = $word[$i];\n                    break;\n\
    \                }\n            }\n            if($closest_right_consonant &&\
    \ $closest_left_consonant) {\n                if($vowel_index < $closest_index)\
    \ {\n                    $closest_index = $vowel_index;\n                    $closest_vowel\
    \ = $char;\n                }\n            }\n        }\n        $index--;\n \
    \   }\n    return $closest_vowel;\n}\n", "    $word = strrev($word);\n    $consonants\
    \ = array(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\"\
    , \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"\
    );\n    $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\");\n    $counter = 0;\n\
    \    $check = false;\n    for ($i = 0; $i < strlen($word); $i++) {\n        if\
    \ (in_array($word[$i], $vowels)) {\n            if ($i > 0 && in_array($word[$i\
    \ - 1], $consonants)) {\n                $check = true;\n                $counter++;\n\
    \            }\n            if ($check) {\n                if ($counter > 1) {\n\
    \                    return strrev($word[$i - 1]);\n                }\n      \
    \      }\n        }\n    }\n    return \"\";\n}\n\necho get_closest_vowel(\"yogurt\"\
    );\necho \"\\n\";\necho get_closest_vowel(\"FULL\");\necho \"\\n\";\necho get_closest_vowel(\"\
    quick\");\necho \"\\n\";\necho get_closest_vowel(\"ab\");\necho \"\\n\";", " \
    \   // your code\n}\n", "\t$vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\t\
    $word = strtolower($word);\n\t$current_index = strlen($word) - 1;\n\twhile($current_index\
    \ > 0) {\n\t\t$current_char = $word[$current_index];\n\t\tif(in_array($current_char,\
    \ $vowels)) {\n\t\t\tif(in_array($word[$current_index - 1], $vowels)) {\n\t\t\t\
    \t$current_index--;\n\t\t\t} else {\n\t\t\t\treturn $current_char;\n\t\t\t}\n\t\
    \t} else {\n\t\t\t$current_index--;\n\t\t}\n\t}\n\treturn \"\";\n}\n\necho get_closest_vowel(\"\
    yogurt\");\necho get_closest_vowel(\"FULL\");\necho get_closest_vowel(\"quick\"\
    );\necho get_closest_vowel(\"ab\");", "    $vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \    $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p',\
    \ 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n    $word_array = str_split($word);\n\
    \    $pos = count($word_array) - 1;\n    while (in_array($word_array[$pos], $vowels))\
    \ {\n        $pos -= 1;\n    }\n    if (in_array($word_array[$pos], $consonants))\
    \ {\n        $pos -= 1;\n        while (in_array($word_array[$pos], $consonants))\
    \ {\n            $pos -= 1;\n        }\n        if (in_array($word_array[$pos],\
    \ $vowels)) {\n            return $word_array[$pos];\n        }\n    }\n    return\
    \ '';\n}\n", "  $vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  $letters = str_split($word);\n\
    \  for ($i = count($letters) - 1; $i >= 0; $i--) {\n    if (in_array($letters[$i],\
    \ $vowels)) {\n      $letter = $letters[$i];\n      break;\n    }\n  }\n  if (!isset($letter))\
    \ {\n    return \"\";\n  }\n\n  $prev_letter = $letters[$i - 1];\n  $next_letter\
    \ = $letters[$i + 1];\n  if (in_array($prev_letter, $vowels) || in_array($next_letter,\
    \ $vowels)) {\n    return \"\";\n  }\n  return $letter;\n}\n", "\t$vowels = ['a',\
    \ 'e', 'i', 'o', 'u'];\n\t$consonants = range('a', 'z');\n\t$consonants = array_diff($consonants,\
    \ $vowels);\n\t$consonants[] = 'A';\n\t$consonants[] = 'E';\n\t$consonants[] =\
    \ 'I';\n\t$consonants[] = 'O';\n\t$consonants[] = 'U';\n\tfor ($i = strlen($word)\
    \ - 1; $i >= 0; $i--) {\n\t\tif (in_array($word[$i], $vowels)) {\n\t\t\tif ($i\
    \ == strlen($word) - 1) {\n\t\t\t\treturn '';\n\t\t\t}\n\t\t\tif (in_array($word[$i\
    \ + 1], $consonants)) {\n\t\t\t\treturn $word[$i];\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ '';\n}", "\t$len = strlen($word);\n\t$vowels = \"aeiou\";\n\t$i = 0;\n\t$con\
    \ = false;\n\t$consonants = \"bcdfghjklmnpqrstvwxyz\";\n\t$cur_vowel = \"\";\n\
    \t$cur_dist = 0;\n\t$closest_vowel = \"\";\n\t$closest_dist = 0;\n\twhile ($i\
    \ < $len) {\n\t\tif (strpos($consonants, strtolower($word[$i])) !== false) {\n\
    \t\t\t$con = true;\n\t\t} else if (strpos($vowels, strtolower($word[$i])) !==\
    \ false) {\n\t\t\tif ($con) {\n\t\t\t\t$cur_vowel = $word[$i];\n\t\t\t\t$cur_dist\
    \ = $i;\n\t\t\t\tif ($cur_dist < $closest_dist || $closest_dist == 0) {\n\t\t\t\
    \t\t$closest_vowel = $cur_vowel;\n\t\t\t\t\t$closest_dist = $cur_dist;\n\t\t\t\
    \t}\n\t\t\t}\n\t\t\t$con = false;\n\t\t}\n\t\t$i++;\n\t}\n\treturn $closest_vowel;\n\
    }\n\necho get_closest_vowel(\"yogurt\");\necho \"\\n\";\necho get_closest_vowel(\"\
    FULL\");\necho \"\\n\";\necho get_closest_vowel(\"quick\");\necho \"\\n\";\necho\
    \ get_closest_vowel(\"ab\");\necho \"\\n\";\necho get_closest_vowel(\"omg\");\n\
    echo \"\\n\";\necho get_closest_vowel(\"e\");\necho \"\\n\";\necho get_closest_vowel(\"\
    I\");\necho \"\\n\";", "   $vowels = ['a', 'e', 'i', 'o', 'u'];\n   $word = strtolower($word);\n\
    \   $vowel_index = -1;\n   $length = strlen($word);\n   for ($i = $length - 1;\
    \ $i >= 0; $i--) {\n       if (in_array($word[$i], $vowels)) {\n           $vowel_index\
    \ = $i;\n           break;\n       }\n   }\n   if ($vowel_index === -1) {\n  \
    \     return '';\n   }\n   $i = $vowel_index;\n   while ($i < $length - 1) {\n\
    \       if (!in_array($word[$i + 1], $vowels)) {\n           break;\n       }\n\
    \       $i++;\n   }\n   if ($i === $length - 1) {\n       return '';\n   }\n \
    \  return $word[$i + 1];\n}", "    $word = strtolower($word);\n    $strlen = strlen($word);\n\
    \    for ($i = $strlen - 1; $i > 0; $i--) {\n        if (in_array($word[$i], ['a',\
    \ 'e', 'i', 'o', 'u']) && !in_array($word[$i - 1], ['a', 'e', 'i', 'o', 'u']))\
    \ {\n            return $word[$i];\n        }\n    }\n    return '';\n}\n\necho\
    \ get_closest_vowel(\"ab\");\necho get_closest_vowel(\"yogurt\");\necho get_closest_vowel(\"\
    FULL\");\necho get_closest_vowel(\"quick\");", "\t$vowels = [\"a\",\"e\",\"i\"\
    ,\"o\",\"u\"];\n\t$newWord = str_split($word);\n\t$found = 0;\n\t$vowel = \"\"\
    ;\n\tfor ($i=count($newWord)-1; $i > 0; $i--) { \n\t\tif ($found == 1) {\n\t\t\
    \tif (in_array($newWord[$i], $vowels)) {\n\t\t\t\t$vowel = $newWord[$i];\n\t\t\
    \t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (in_array($newWord[$i], $vowels)) {\n\t\t\t\
    $found = 0;\n\t\t} else {\n\t\t\t$found = 1;\n\t\t}\n\t}\n\treturn $vowel;\n}\n",
  "  // your code here\n}", "    $word_reverse = strrev($word);\n    $word_length\
    \ = strlen($word_reverse);\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $index\
    \ = 0;\n    while ($index < $word_length) {\n        if (in_array($word_reverse[$index],\
    \ $vowels)) {\n            $index_vowel = $index;\n            $index++;\n   \
    \         if (in_array($word_reverse[$index], $vowels)) {\n                $index++;\n\
    \            } else {\n                return $word_reverse[$index_vowel];\n \
    \           }\n        } else {\n            $index++;\n        }\n    }\n   \
    \ return '';\n}\n", "  // TODO\n}\n", "    $word_array = str_split($word);\n \
    \   $word_array_reverse = array_reverse($word_array);\n    $consonants = ['b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z'];\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    for ($i\
    \ = 0; $i < count($word_array_reverse); $i++) {\n        if (in_array($word_array_reverse[$i],\
    \ $vowels)) {\n            if (in_array($word_array_reverse[$i + 1], $consonants)\
    \ && in_array($word_array_reverse[$i - 1], $consonants)) {\n                return\
    \ $word_array_reverse[$i];\n            }\n        }\n    }\n    return \"\";\n\
    }\n\necho get_closest_vowel(\"yogurt\");\necho get_closest_vowel(\"FULL\");\n\
    echo get_closest_vowel(\"quick\");\necho get_closest_vowel(\"ab\");", "    $closest_vowel\
    \ = '';\n    $right_side = '';\n    $vowels = array('a', 'e', 'i', 'o', 'u');\n\
    \    $consonants = array('b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z');\n    $word_length = strlen($word);\n\
    \    $word_array = str_split($word);\n    $consonant_count = 0;\n    $vowel_count\
    \ = 0;\n    for ($i=$word_length-1; $i >= 0; $i--) { \n        $right_side .=\
    \ $word_array[$i];\n    }\n    $right_side_length = strlen($right_side);\n   \
    \ $right_side_array = str_split($right_side);\n    for ($i=0; $i < $right_side_length;\
    \ $i++) { \n        if (in_array($right_side_array[$i], $vowels)) {\n        \
    \    $vowel_count++;\n        }\n        if (in_array($right_side_array[$i], $consonants))\
    \ {\n            $consonant_count++;\n        }\n        if ($vowel_count >= 1\
    \ && $consonant_count >= 1) {\n            $closest_vowel = $right_side_array[$i-1];\n\
    \            break;\n        }\n    }\n    return $closest_vowel;\n}\n\necho get_closest_vowel(\"\
    yogurt\") . \"<br>\";\necho get_closest_vowel(\"FULL\") . \"<br>\";\necho get_closest_vowel(\"\
    quick\") . \"<br>\";\necho get_closest_vowel(\"ab\") . \"<br>\";", "\t$vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\t$word = strtolower($word);\n\tfor\
    \ ($i = 0; $i < strlen($word); $i++) {\n\t\t$char = $word[$i];\n\t\t$char2 = $word[$i\
    \ + 1];\n\t\t$char3 = $word[$i + 2];\n\t\tif (in_array($char, $vowels) && in_array($char2,\
    \ $vowels)) {\n\t\t\tcontinue;\n\t\t} elseif (in_array($char, $vowels) && !in_array($char2,\
    \ $vowels) && in_array($char3, $vowels)) {\n\t\t\treturn $char2;\n\t\t} elseif\
    \ (in_array($char, $vowels) && !in_array($char2, $vowels) && !in_array($char3,\
    \ $vowels)) {\n\t\t\treturn $char3;\n\t\t}\n\t}\n\treturn \"\";\n}\n", "    $result\
    \ = '';\n    $vowels = array('a', 'e', 'i', 'o', 'u');\n    for ($i = strlen($word)\
    \ - 1; $i >= 0; $i--) {\n        if (in_array($word[$i], $vowels)) {\n       \
    \     $result = $word[$i];\n            break;\n        }\n    }\n    return $result;\n\
    }", "  $vowels = \"aeiouAEIOU\";\n  $result = '';\n  for ($i = strlen($word) -\
    \ 1; $i >= 0; $i--) {\n    if ($i == 0) {\n      $i = -1;\n      break;\n    }\n\
    \    $char = $word[$i];\n    $char2 = $word[$i - 1];\n    if (strpos($vowels,\
    \ $char) !== false && strpos($vowels, $char2) === false) {\n      break;\n   \
    \ }\n  }\n  if ($i >= 0) {\n    $result = $word[$i];\n  }\n  return $result;\n\
    }\necho get_closest_vowel(\"yogurt\") . \"\\n\";\necho get_closest_vowel(\"FULL\"\
    ) . \"\\n\";\necho get_closest_vowel(\"quick\") . \"\\n\";\necho get_closest_vowel(\"\
    ab\") . \"\\n\";\necho get_closest_vowel(\"fdfdfd\") . \"\\n\";\necho get_closest_vowel(\"\
    e\") . \"\\n\";\necho get_closest_vowel(\"fdfdfddfdf\") . \"\\n\";", "    if(empty($word)){\n\
    \        return \"\";\n    }\n\n    $word = strrev($word);\n    $consonants =\
    \ 'bcdfghjklmnpqrstvwxyz';\n    $start = false;\n    $vowels = array('a', 'e',\
    \ 'i', 'o', 'u');\n    $chars = array();\n    for($i = 0; $i < strlen($word);\
    \ $i++){\n        $chars[] = strtolower($word[$i]);\n    }\n    $result = '';\n\
    \    for($i = 0; $i < strlen($word); $i++){\n        if(in_array($chars[$i], $vowels)){\n\
    \            if($start == true){\n                $result = $word[$i];\n     \
    \           break;\n            }\n        }else if(in_array($chars[$i], $consonants)){\n\
    \            $start = true;\n        }\n    }\n    return $result;\n}\n\necho\
    \ get_closest_vowel(\"yogurt\");\necho get_closest_vowel(\"FULL\");\necho get_closest_vowel(\"\
    quick\");\necho get_closest_vowel(\"ab\");\n", "  $vowels = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"];\n  $consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\"\
    , \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\"\
    , \"w\", \"x\", \"y\", \"z\"];\n  $word_array = str_split($word);\n  $consonant_pairs\
    \ = [];\n  for ($i = 0; $i < sizeof($word_array) - 1; $i++) {\n    if ((in_array($word_array[$i],\
    \ $consonants)) && (in_array($word_array[$i + 1], $consonants))) {\n      $consonant_pairs[]\
    \ = $i;\n    }\n  }\n  $closest_consonant_pair = $consonant_pairs[sizeof($consonant_pairs)\
    \ - 1];\n  $closest_vowel = \"\";\n  if (sizeof($consonant_pairs) != 0) {\n  \
    \  for ($i = $closest_consonant_pair; $i < sizeof($word_array); $i++) {\n    \
    \  if (in_array($word_array[$i], $vowels)) {\n        $closest_vowel = $word_array[$i];\n\
    \        break;\n      }\n    }\n  }\n  return $closest_vowel;\n}\n", "    $vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    $constonants = ['b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n\
    \    $closest_vowel = '';\n    $word_to_array = str_split($word);\n    $word_to_array_reversed\
    \ = array_reverse($word_to_array);\n    $check_constonants = false;\n    for ($i\
    \ = 0; $i < count($word_to_array_reversed); $i++) {\n        if (in_array($word_to_array_reversed[$i],\
    \ $vowels)) {\n            if ($check_constonants) {\n                $closest_vowel\
    \ = $word_to_array_reversed[$i];\n                break;\n            }\n    \
    \    } elseif (in_array($word_to_array_reversed[$i], $constonants)) {\n      \
    \      $check_constonants = true;\n        }\n    }\n    if ($closest_vowel ===\
    \ '') {\n        return $closest_vowel;\n    } else {\n        return array_reverse(str_split($closest_vowel))[0];\n\
    \    }\n}\n\necho get_closest_vowel(\"yogurt\") . PHP_EOL; // \"u\"\necho get_closest_vowel(\"\
    FULL\") . PHP_EOL; // \"U\"\necho get_closest_vowel(\"quick\") . PHP_EOL; // \"\
    \"\necho get_closest_vowel(\"ab\") . PHP_EOL; // \"\"", "    $vowels = [\n   \
    \     'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'\n    ];\n    // brute force\
    \ solution, start from the end and find the first vowel that's \n    // between\
    \ two consonants.\n    $i = strlen($word) - 1;\n    while ($i > 0) {\n       \
    \ if ($i > 1 && in_array($word[$i], $vowels) && !in_array($word[$i - 1], $vowels)\
    \ && !in_array($word[$i - 2], $vowels)) {\n            return $word[$i];\n   \
    \     }\n        $i--;\n    }\n    return '';\n}\n", "    $vowels = 'aeiouAEIOU';\n\
    \    $closest_vowel = '';\n    $closest_vowel_distance = -1;\n    for ($i = 0;\
    \ $i < strlen($word); $i++) {\n        if ($vowels[$i] === $word[$i]) {\n    \
    \        if ($i > 0 && $i < strlen($word) - 1) {\n                if ($word[$i\
    \ - 1] !== $vowels[$i - 1] && $word[$i + 1] !== $vowels[$i + 1]) {\n         \
    \           if ($closest_vowel_distance === -1 || abs($i - strlen($word)) < $closest_vowel_distance)\
    \ {\n                        $closest_vowel = $word[$i];\n                   \
    \     $closest_vowel_distance = abs($i - strlen($word));\n                   \
    \ }\n                }\n            }\n        }\n    }\n    return $closest_vowel;\n\
    }\n", "\t$i = strlen($word) - 1;\n\t$isConsonant = false;\n\twhile ($i >= 0) {\n\
    \t\tif (in_array($word[$i], array('a', 'e', 'i', 'o', 'u'))) {\n\t\t\tif ($isConsonant)\
    \ {\n\t\t\t\treturn $word[$i];\n\t\t\t}\n\t\t} else {\n\t\t\t$isConsonant = true;\n\
    \t\t}\n\t\t$i--;\n\t}\n\treturn '';\n}\n$word = \"quick\";\necho get_closest_vowel($word)\
    \ . PHP_EOL;", "    $result = '';\n    $vowels = array('a', 'e', 'i', 'o', 'u');\n\
    \    $chars = str_split($word);\n    $i = count($chars) - 1;\n    $has_vowel =\
    \ false;\n    $has_consonant = false;\n    while ($i >= 0) {\n        if (!$has_vowel\
    \ && in_array($chars[$i], $vowels)) {\n            $has_vowel = true;\n      \
    \      $result = $chars[$i];\n        } else if ($has_vowel && !in_array($chars[$i],\
    \ $vowels)) {\n            $has_consonant = true;\n            break;\n      \
    \  }\n        $i--;\n    }\n    if ($has_vowel && $has_consonant) {\n        return\
    \ $result;\n    } else {\n        return '';\n    }\n}\n\necho get_closest_vowel(\"\
    yogurt\");\necho \"\\n\";\necho get_closest_vowel(\"FULL\");\necho \"\\n\";\n\
    echo get_closest_vowel(\"quick\");\necho \"\\n\";\necho get_closest_vowel(\"ab\"\
    );\necho \"\\n\";", "    $word_as_array = str_split($word);\n    $vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n    $word_length = count($word_as_array);\n\
    \    for ($i = 0; $i < $word_length; $i++) {\n        if (in_array($word_as_array[$i],\
    \ $vowels)) {\n            if ($i == 0) {\n                $i++;\n           \
    \ }\n            if ($i == ($word_length - 1)) {\n                return \"\"\
    ;\n            }\n            if (!in_array($word_as_array[$i + 1], $vowels))\
    \ {\n                if (!in_array($word_as_array[$i - 1], $vowels)) {\n     \
    \               return $word_as_array[$i];\n                }\n            }\n\
    \        }\n    }\n    return \"\";\n}\necho(get_closest_vowel(\"yogurt\") . PHP_EOL);\n\
    echo(get_closest_vowel(\"FULL\") . PHP_EOL);\necho(get_closest_vowel(\"quick\"\
    ) . PHP_EOL);\necho(get_closest_vowel(\"ab\") . PHP_EOL);", "    $vowels = array('a',\
    \ 'e', 'i', 'o', 'u');\n    $word = strtolower($word);\n    $word_size = strlen($word);\n\
    \    $vowel_index = NULL;\n    for ($i = $word_size - 1; $i >= 0; $i--) {\n  \
    \      $letter = $word[$i];\n        if (in_array($letter, $vowels)) {\n     \
    \       $vowel_index = $i;\n            break;\n        }\n    }\n    $before_vowel\
    \ = substr($word, 0, $vowel_index);\n    $after_vowel = substr($word, $vowel_index\
    \ + 1);\n    $before_vowel_size = strlen($before_vowel);\n    $after_vowel_size\
    \ = strlen($after_vowel);\n    if ($before_vowel_size >= 2 && $after_vowel_size\
    \ >= 2) {\n        $before_vowel_last_letter = $before_vowel[$before_vowel_size\
    \ - 1];\n        $after_vowel_first_letter = $after_vowel[0];\n        if (!in_array($before_vowel_last_letter,\
    \ $vowels) && !in_array($after_vowel_first_letter, $vowels)) {\n            return\
    \ $word[$vowel_index];\n        }\n    }\n    return \"\";\n}", "\t$vowels = array(\"\
    a\", \"e\", \"i\", \"o\", \"u\");\n\t$rev_array = str_split(strrev($word));\n\t\
    $match = '';\n\t$last = '';\n\tfor ($i = 0; $i < count($rev_array); $i++) {\n\t\
    \tif (in_array($rev_array[$i], $vowels)) {\n\t\t\tif ($last !== '') {\n\t\t\t\t\
    $match = $rev_array[$i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} else {\n\t\t\t$last =\
    \ $rev_array[$i];\n\t\t}\n\t}\n\tif ($match !== '') {\n\t\treturn strrev($match);\n\
    \t} else {\n\t\treturn \"\";\n\t}\n}\n", "    $vowels = array(\"a\", \"e\", \"\
    i\", \"o\", \"u\");\n    $word = strrev($word);\n    $isPrevConsonant = true;\n\
    \    $vowel = \"\";\n    for ($i = 0; $i < strlen($word); $i++) {\n        if\
    \ (in_array($word[$i], $vowels)) {\n            if ($isPrevConsonant) {\n    \
    \            $vowel = $word[$i];\n                break;\n            }\n    \
    \        $isPrevConsonant = false;\n        } else {\n            $isPrevConsonant\
    \ = true;\n        }\n    }\n    return $vowel;\n}\n", "    $vowels = [\"a\",\"\
    e\",\"i\",\"o\",\"u\"];\n    for ($i = 0; $i < strlen($word); $i++) {\n      \
    \  $letter = strtolower($word[$i]);\n        if (in_array($letter, $vowels)) {\n\
    \            $previous_letter = strtolower($word[$i-1]);\n            $next_letter\
    \ = strtolower($word[$i+1]);\n            if (!in_array($previous_letter, $vowels)\
    \ && !in_array($next_letter, $vowels)) {\n                return $word[$i];\n\
    \            }\n        }\n    }\n    return \"\";\n}\necho get_closest_vowel(\"\
    yogurt\"); // \"u\"\necho \"\\n\";\necho get_closest_vowel(\"FULL\"); // \"U\"\
    \necho \"\\n\";\necho get_closest_vowel(\"quick\"); // \"\"\necho \"\\n\";\necho\
    \ get_closest_vowel(\"ab\"); // \"\"\necho \"\\n\";\n", "    $word_array = str_split($word);\n\
    \    $vowels = array('a', 'e', 'i', 'o', 'u');\n    $tmp = array();\n    $vowel_first\
    \ = array();\n    $vowel_second = array();\n    foreach ($word_array as $key =>\
    \ $value) {\n        if (in_array($value, $vowels)) {\n            $tmp[] = $key;\n\
    \        }\n    }\n    if (count($tmp) <= 1) {\n        return '';\n    }\n  \
    \  foreach ($tmp as $value) {\n        if (isset($word_array[$value - 1]) && !in_array($word_array[$value\
    \ - 1], $vowels)) {\n            $vowel_first[] = $value;\n        }\n       \
    \ if (isset($word_array[$value + 1]) && !in_array($word_array[$value + 1], $vowels))\
    \ {\n            $vowel_second[] = $value;\n        }\n    }\n    if (count($vowel_first)\
    \ == 0 || count($vowel_second) == 0) {\n        return '';\n    }\n    $max_length\
    \ = count($vowel_first) - 1;\n    $result = array();\n    for ($i = 0; $i <= $max_length;\
    \ $i++) {\n        $result[] = $vowel_second[$i] - $vowel_first[$i];\n    }\n\
    \    $min_value = min($result);\n    $min_key = array_search($min_value, $result);\n\
    \    return $word_array[$vowel_first[$min_key]];\n}\necho get_closest_vowel(\"\
    FULL\");", "    // replace this for solution\n    $vowels = array('a', 'e', 'i',\
    \ 'o', 'u');\n    for ($i = strlen($word)-1; $i > 0; $i--) {\n        if (in_array($word[$i],\
    \ $vowels)) {\n            if (!in_array($word[$i-1], $vowels)) {\n          \
    \      return $word[$i];\n            }\n        }\n    }\n    return '';\n}\n\
    \necho get_closest_vowel(\"yogurt\") . PHP_EOL;\necho get_closest_vowel(\"FULL\"\
    ) . PHP_EOL;\necho get_closest_vowel(\"quick\") . PHP_EOL;\necho get_closest_vowel(\"\
    ab\") . PHP_EOL;", "    $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\");\n\
    \    $consonants = array(\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\"\
    , \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\"\
    , \"y\", \"z\");\n    $result = '';\n    for ($i = 0; $i < strlen($word); $i++)\
    \ {\n        if (in_array($word[$i], $vowels)) {\n            if ((($i - 1) >=\
    \ 0) && ($i + 1) < strlen($word)) {\n                if (in_array($word[$i - 1],\
    \ $consonants) && in_array($word[$i + 1], $consonants)) {\n                  \
    \  $result = $word[$i];\n                    break;\n                }\n     \
    \       }\n        }\n    }\n    return $result;\n}\necho get_closest_vowel(\"\
    yogurt\") . PHP_EOL;\necho get_closest_vowel(\"FULL\") . PHP_EOL;\necho get_closest_vowel(\"\
    quick\") . PHP_EOL;\necho get_closest_vowel(\"ab\") . PHP_EOL;", "  $vowels =\
    \ ['a', 'e', 'i', 'o', 'u'];\n  $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j',\
    \ 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n  $word_array\
    \ = str_split($word);\n  $closest_vowel = '';\n  $i = count($word_array) - 1;\n\
    \  while (is_int($i)) {\n    if (in_array($word_array[$i], $vowels)) {\n     \
    \ $closest_vowel = $word_array[$i];\n      $i = false;\n    } elseif (in_array($word_array[$i],\
    \ $consonants)) {\n      $i--;\n    } else {\n      $i = false;\n    }\n  }\n\
    \  return $closest_vowel;\n}\necho get_closest_vowel(\"yogurt\");", "    $vowels\
    \ = array(\"a\", \"e\", \"i\", \"o\", \"u\");\n    $word = strtolower($word);\n\
    \    $word = str_split($word);\n    $reverse_word = array_reverse($word);\n  \
    \  $result = null;\n    foreach ($reverse_word as $key => $value) {\n        if(in_array($value,\
    \ $vowels)) {\n            if($key > 0) {\n                if(!in_array($reverse_word[$key\
    \ - 1], $vowels)) {\n                    $result = $value;\n                 \
    \   break;\n                } else {\n                    $result = null;\n  \
    \              }\n            }\n        }\n    }\n    return $result;\n}\n",
  "    $reverse_word = strrev($word);\n    $count = strlen($reverse_word);\n    $vowels\
    \ = array(\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\"\
    );\n    for ($i = 0; $i < $count; $i++) {\n        if (in_array($reverse_word[$i],\
    \ $vowels)) {\n            if (!in_array($reverse_word[$i+1], $vowels)) {\n  \
    \              return $reverse_word[$i];\n            }\n        }\n    }\n  \
    \  return \"\";\n}\n\necho get_closest_vowel(\"yogurt\");\necho \"<br>\";\necho\
    \ get_closest_vowel(\"FULL\");\necho \"<br>\";\necho get_closest_vowel(\"quick\"\
    );\necho \"<br>\";\necho get_closest_vowel(\"ab\");\necho \"<br>\";\necho get_closest_vowel(\"\
    CAB\");\necho \"<br>\";\necho get_closest_vowel(\"yogurtCAB\");\necho \"<br>\"\
    ;\necho get_closest_vowel(\"FULLYogurt\");\necho \"<br>\";\necho get_closest_vowel(\"\
    quickCAB\");\necho \"<br>\";\necho get_closest_vowel(\"CABab\");\necho \"<br>\"\
    ;\necho get_closest_vowel(\"CABA\");\necho \"<br>\";\necho get_closest_vowel(\"\
    yogurtCABab\");\necho \"<br>\";\necho get_closest_vowel(\"FULLYogurtCAB\");\n\
    echo \"<br>\";\necho get_closest_vowel(\"quickCABCAB\");\necho \"<br>\";\necho\
    \ get_closest_vowel(\"CABabCAB\");\necho \"<br>\";", "\t$vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n\t$split = str_split($word);\n\t$vowel = \"\"\
    ;\n\t$is_found = false;\n\t\n\tfor ($i = 0; $i < sizeof($split); $i++) {\n\t\t\
    $letter = $split[$i];\n\t\t$last_letter = $split[$i - 1];\n\t\t$next_letter =\
    \ $split[$i + 1];\n\t\tif (in_array($letter, $vowels)) {\n\t\t\tif (in_array($last_letter,\
    \ $vowels) && in_array($next_letter, $vowels)) {\n\t\t\t\tcontinue;\n\t\t\t} else\
    \ {\n\t\t\t\t$vowel = $letter;\n\t\t\t\t$is_found = true;\n\t\t\t\tbreak;\n\t\t\
    \t}\n\t\t}\n\t}\n\t\n\tif ($is_found) {\n\t\treturn $vowel;\n\t} else {\n\t\t\
    return \"\";\n\t}\n}\necho get_closest_vowel(\"yogurt\") . \"<br />\";\necho get_closest_vowel(\"\
    FULL\") . \"<br />\";\necho get_closest_vowel(\"quick\") . \"<br />\";\necho get_closest_vowel(\"\
    ab\") . \"<br />\";", "\t$vowels = ['a', 'e', 'i', 'o', 'u'];\n\t$word_length\
    \ = strlen($word);\n\t$result = '';\n\t$min_distance = 0;\n\t$current_distance\
    \ = 0;\n\tfor ($i = $word_length - 1; $i >= 0; $i--) {\n\t\tif (in_array($word[$i],\
    \ $vowels)) {\n\t\t\tif ($i == $word_length - 1) {\n\t\t\t\treturn $word[$i];\n\
    \t\t\t}\n\t\t\t$current_distance = $word_length - $i - 1;\n\t\t\tif ($current_distance\
    \ == 1 && !in_array($word[$i + 1], $vowels)) {\n\t\t\t\treturn $word[$i];\n\t\t\
    \t}\n\t\t\tif ($current_distance == 1 && in_array($word[$i + 1], $vowels)) {\n\
    \t\t\t\t$current_distance = 0;\n\t\t\t}\n\t\t\tif ($current_distance > $min_distance)\
    \ {\n\t\t\t\t$min_distance = $current_distance;\n\t\t\t\t$result = $word[$i];\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn $result;\n}", "    $vowels = array(\"a\", \"e\"\
    , \"i\", \"o\", \"u\");\n    $last_cons = false;\n    $word = strtolower($word);\n\
    \    for ($i = strlen($word) - 1; $i >= 0; $i--) {\n        if (in_array($word[$i],\
    \ $vowels)) {\n            if ($last_cons) {\n                return $word[$i];\n\
    \            }\n        } else {\n            $last_cons = true;\n        }\n\
    \    }\n    return \"\";\n}\n", "\t$vowels = ['a', 'e', 'i', 'o', 'u'];\n\t$len\
    \ = strlen($word);\n\tif ($len < 3) {\n\t\treturn '';\n\t}\n\t$i = $len - 1;\n\
    \t$gap = PHP_INT_MAX;\n\t$tgtVowel = null;\n\twhile ($i >= 0) {\n\t\tif (in_array($word[$i],\
    \ $vowels)) {\n\t\t\t$vowel = $word[$i];\n\t\t\tif ($i - 1 >= 0 && $i + 1 < $len\
    \ && !in_array($word[$i - 1], $vowels) && !in_array($word[$i + 1], $vowels)) {\n\
    \t\t\t\t$distance = $len - $i;\n\t\t\t\tif ($distance < $gap) {\n\t\t\t\t\t$gap\
    \ = $distance;\n\t\t\t\t\t$tgtVowel = $vowel;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\
    $i--;\n\t}\n\treturn $tgtVowel === null ? '' : $tgtVowel;\n}\n\n$cases = [\n\t\
    [\"yogurt\", \"u\"],\n\t[\"FULL\", \"U\"],\n\t[\"quick\", \"\"],\n\t[\"ab\", \"\
    \"],\n\t[\"greg\", \"e\"],\n\t[\"abcdefghijklmnopqrstuvwxyz\", \"e\"],\n\t[\"\
    grgrgrgrgrgrgrgrgrgrgrgrgr\", \"e\"],\n\t[\"gagagagagagagagagagagagagagagaga\"\
    , \"a\"],\n\t[\"abababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababababab",
  "    $result = '';\n    $vowels = 'aeiouAEIOU';\n    $word_length = strlen($word);\n\
    \    for ($i = $word_length - 1; $i > 0; $i--) {\n        if (strpos($vowels,\
    \ $word[$i]) === false) {\n            if (strpos($vowels, $word[$i - 1]) !==\
    \ false) {\n                $result = $word[$i - 1];\n                break;\n\
    \            }\n        }\n    }\n    return $result;\n}\n", "\t$vowels = array('a',\
    \ 'e', 'i', 'o', 'u');\n\t$vowelPos = NULL;\n\tfor ($i = strlen($word) - 1; $i\
    \ >= 0; $i--) {\n\t\tif (in_array($word[$i], $vowels)) {\n\t\t\t$vowelPos = $i;\n\
    \t\t\tbreak;\n\t\t}\n\t}\n\treturn $vowelPos !== NULL && $vowelPos < strlen($word)\
    \ - 1 ? $word[$vowelPos] : '';\n}\n", "    $vowels = [\n        'a', 'e', 'i',\
    \ 'o', 'u',\n        'A', 'E', 'I', 'O', 'U'\n    ];\n    $consonants = [\n  \
    \      'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z',\n        'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K',\
    \ 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z'\n    ];\n  \
    \  $word = str_split($word);\n    $last_found_vowel = 0;\n    $res = '';\n   \
    \ for ($i = count($word) - 1; $i >= 0; $i--) {\n        if (in_array($word[$i],\
    \ $vowels)) {\n            $last_found_vowel = $i;\n        }\n        if (in_array($word[$i],\
    \ $consonants) && in_array($word[$i - 1], $consonants)) {\n            if ($last_found_vowel)\
    \ {\n                $res = $word[$last_found_vowel];\n                break;\n\
    \            }\n        }\n    }\n    return $res;\n}\n\necho get_closest_vowel(\"\
    yogurt\") . \"\\n\";\necho get_closest_vowel(\"FULL\") . \"\\n\";\necho get_closest_vowel(\"\
    quick\") . \"\\n\";\necho get_closest_vowel(\"ab\") . \"\\n\";", "  $vowels =\
    \ ['a', 'e', 'i', 'o', 'u'];\n  $word = str_split($word);\n  for ($i = sizeof($word)\
    \ - 1; $i >= 0; $i--) {\n    if (in_array($word[$i], $vowels)) {\n      if ($i\
    \ == sizeof($word) - 1) {\n        return '';\n      }\n      if (in_array($word[$i\
    \ + 1], $vowels)) {\n        return '';\n      }\n      return $word[$i];\n  \
    \  }\n  }\n  return '';\n}", "    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $word\
    \ = strtolower($word);\n    $word = str_split($word);\n    $result = '';\n   \
    \ $prev = '';\n    $current = '';\n    $next = '';\n    for ($i = count($word)\
    \ - 1; $i >= 0; $i--) {\n        $prev = isset($word[$i - 1]) ? $word[$i - 1]\
    \ : '';\n        $current = $word[$i];\n        $next = isset($word[$i + 1]) ?\
    \ $word[$i + 1] : '';\n        if (in_array($current, $vowels) && !in_array($prev,\
    \ $vowels) && !in_array($next, $vowels)) {\n            $result = $current;\n\
    \            break;\n        }\n    }\n    return $result;\n}", "    $check_letter\
    \ = [\n        'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'\n    ];\n    $vowel\
    \ = '';\n    $word_arr = str_split($word);\n    $length = count($word_arr);\n\
    \    for ($i = $length - 1; $i >= 0; $i--) {\n        if (in_array($word_arr[$i],\
    \ $check_letter)) {\n            $vowel = $word_arr[$i];\n            break;\n\
    \        }\n    }\n    if ($vowel) {\n        $vowel_index = array_search($vowel,\
    \ $word_arr);\n        for ($i = $vowel_index - 1; $i >= 0; $i--) {\n        \
    \    if (!in_array($word_arr[$i], $check_letter)) {\n                return $vowel;\n\
    \            }\n        }\n    }\n    return '';\n}\n\necho get_closest_vowel(\"\
    yogurt\") . \"\\n\";\necho get_closest_vowel(\"FULL\") . \"\\n\";\necho get_closest_vowel(\"\
    quick\") . \"\\n\";\necho get_closest_vowel(\"ab\") . \"\\n\";", "\t$vowels =\
    \ [\"a\",\"e\",\"i\",\"o\",\"u\"];\n\t$word = strtolower($word);\n\t$len = strlen($word);\n\
    \tfor ($i = $len - 1; $i >= 1; $i--) {\n\t\tif (in_array($word[$i], $vowels) &&\
    \ !in_array($word[$i-1], $vowels))\n\t\t\treturn $word[$i];\n\t}\n\treturn \"\"\
    ;\n}\necho get_closest_vowel(\"Yogurt\") . \"\\n\"; // u\necho get_closest_vowel(\"\
    FULL\") . \"\\n\"; // U\necho get_closest_vowel(\"quick\") . \"\\n\"; // \"\"\n\
    echo get_closest_vowel(\"ab\") . \"\\n\"; // \"\"", "    $length = strlen($word);\n\
    \    $vowels = array('a', 'e', 'i', 'o', 'u');\n    $consonants = array('b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'y', 'z');\n    $get_closest_vowel = \"\";\n    for ($i = $length - 1;\
    \ $i >= 0; $i--) {\n        if (in_array($word[$i], $vowels)) {\n            if\
    \ (in_array($word[$i - 1], $consonants) && in_array($word[$i + 1], $consonants))\
    \ {\n                $get_closest_vowel = $word[$i];\n                break;\n\
    \            }\n        }\n    }\n    return $get_closest_vowel;\n}\necho \">>>\
    \ get_closest_vowel(\\\"yogurt\\\")<br>\";\necho get_closest_vowel(\"yogurt\"\
    ) . \"<br>\";\necho \">>> get_closest_vowel(\\\"FULL\\\")<br>\";\necho get_closest_vowel(\"\
    FULL\") . \"<br>\";\necho \">>> get_closest_vowel(\\\"quick\\\")<br>\";\necho\
    \ get_closest_vowel(\"quick\") . \"<br>\";\necho \">>> get_closest_vowel(\\\"\
    ab\\\")<br>\";\necho get_closest_vowel(\"ab\") . \"<br>\";", "\t$vowels = ['a',\
    \ 'e', 'i', 'o', 'u'];\n\t$word = str_split($word);\n\t$len = count($word);\n\t\
    $word = array_reverse($word);\n\t$prev = $next = '';\n\tfor ($i = 0; $i < $len;\
    \ $i++) {\n\t\tif (!in_array($word[$i], $vowels)) {\n\t\t\tif ($prev === '') {\n\
    \t\t\t\tcontinue;\n\t\t\t} else {\n\t\t\t\treturn $prev;\n\t\t\t}\n\t\t} else\
    \ {\n\t\t\tif ($prev === '') {\n\t\t\t\t$prev = $word[$i];\n\t\t\t} else {\n\t\
    \t\t\t$next = $word[$i];\n\t\t\t}\n\t\t}\n\t}\n\treturn '';\n}\n$words = [\"yogurt\"\
    , \"FULL\", \"quick\", \"ab\"];\nforeach ($words as $word) {\n\techo $word . \"\
    : \" . get_closest_vowel($word) . \"\\n\";\n}", "    // your code here\n}\n\n\
    $ret = get_closest_vowel(\"yogurt\");\necho \"\\n \\n {$ret} \\n \\n\";", "  \
    \  $vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    $word_len = strlen($word);\n\
    \    $word_arr = str_split($word);\n    $return_str = \"\";\n    for ($i = 0;\
    \ $i < $word_len; $i++) {\n        $first_letter = $word_arr[$i];\n        if\
    \ (in_array($first_letter, $vowels)) {\n            $next_letter = $word_arr[$i\
    \ + 1];\n            if (!in_array($next_letter, $vowels)) {\n               \
    \ $return_str = $first_letter;\n                break;\n            }\n      \
    \  }\n    }\n    return $return_str;\n}\n\necho \"get_closest_vowel('yogurt')\
    \ -> \" . get_closest_vowel(\"yogurt\") . \"<br>\";\necho \"get_closest_vowel('FULL')\
    \ -> \" . get_closest_vowel(\"FULL\") . \"<br>\";\necho \"get_closest_vowel('quick')\
    \ -> \" . get_closest_vowel(\"quick\") . \"<br>\";\necho \"get_closest_vowel('ab')\
    \ -> \" . get_closest_vowel(\"ab\") . \"<br>\";\necho \"get_closest_vowel('AB')\
    \ -> \" . get_closest_vowel(\"AB\") . \"<br>\";", "\t$vowels = array(\"a\", \"\
    e\", \"i\", \"o\", \"u\");\n\t$word_length = strlen($word);\n\t$end_word = substr($word,\
    \ -1);\n\t$start_word = substr($word, 0, 1);\n\t$step = 1;\n\t$number_vowel =\
    \ 0;\n\tif (!in_array($end_word, $vowels) && $word_length > 1) {\n\t\twhile ($number_vowel\
    \ == 0) {\n\t\t\t$end_word = substr($word, -$step);\n\t\t\tif (in_array($end_word,\
    \ $vowels)) {\n\t\t\t\t$number_vowel = 1;\n\t\t\t}\n\t\t\t$step++;\n\t\t}\n\t\
    }\n\telse {\n\t\t$end_word = \"\";\n\t}\n\tif ($word_length > 1) {\n\t\t$start_word\
    \ = substr($word, 0, -($word_length - 1));\n\t}\n\tif (in_array($start_word, $vowels))\
    \ {\n\t\t$start_word = \"\";\n\t}\n\telse {\n\t\t$start_word = substr($word, 0,\
    \ $step);\n\t}\n\t$start_word = substr($start_word, -1);\n\t$word = $start_word\
    \ . $end_word;\n\tif (in_array($word, $vowels)) {\n\t\treturn $word;\n\t}\n\t\
    else {\n\t\treturn \"\";\n\t}\n}", "\t$vowels = ['a', 'e', 'i', 'o', 'u'];\n\t\
    $word = strtolower($word);\n\t$word = str_split($word);\n\t$foundVowel = \"\"\
    ;\n\t$consonantCount = 0;\n\t$vowelCount = 0;\n\t$vowelCountArray = [];\n\t$validVowel\
    \ = [];\n\t$consonantCountArray = [];\n\t$offset = 0;\n\tfor ($i = count($word)\
    \ - 1; $i >= 0; $i--) {\n\t\t$letter = $word[$i];\n\t\tif (in_array($letter, $vowels))\
    \ {\n\t\t\t$vowelCount++;\n\t\t\t$vowelCountArray[] = $vowelCount;\n\t\t\t$foundVowel\
    \ = $letter;\n\t\t\t$offset = $i;\n\t\t\tif ($consonantCount > 0) {\n\t\t\t\t\
    $consonantCountArray[] = $consonantCount;\n\t\t\t\t$validVowel[] = $foundVowel;\n\
    \t\t\t}\n\t\t\t$consonantCount = 0;\n\t\t} else {\n\t\t\t$consonantCount++;\n\t\
    \t}\n\t}\n\t$consonantCountArray[] = $consonantCount;\n\t// var_dump($consonantCountArray);\n\
    \t// var_dump($vowelCountArray);\n\t// var_dump($validVowel);\n\t// var_dump($offset);\n\
    \tif (empty($validVowel)) {\n\t\treturn \"\";\n\t}\n\t$closestOffset = 999;\n\t\
    $closestConsonantCount = 999;\n\t$closestVowel = \"\";\n\tfor ($i = 0; $i < count($consonantCountArray);\
    \ $i++) {\n\t\tif ($consonantCountArray[$i] < $closestConsonantCount) {\n\t\t\t\
    $closestConsonantCount = $consonantCountArray[$i];\n\t\t\t$closestVowel = $validVow",
  "    $vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"];\n    $word = strtolower($word);\n\
    \    for ($i=strlen($word)-1; $i >= 0; $i--) { \n        if (in_array($word[$i],\
    \ $vowels)) {\n            if ($i==0) {\n                break;\n            }\n\
    \            if (in_array($word[$i-1], $vowels)) {\n                continue;\n\
    \            }\n            if (in_array($word[$i+1], $vowels)) {\n          \
    \      continue;\n            }\n            return $word[$i];\n        }\n  \
    \  }\n    return \"\";\n}\n\nprint get_closest_vowel(\"yogurt\") . PHP_EOL;\n\
    print get_closest_vowel(\"FULL\") . PHP_EOL;\nprint get_closest_vowel(\"quick\"\
    ) . PHP_EOL;\nprint get_closest_vowel(\"ab\") . PHP_EOL;", "  $vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"];\n  $vowel_count = 0;\n  $vowel_position = 0;\n\
    \  for ($i = strlen($word) - 1; $i >= 0; $i--) {\n    if (in_array($word[$i],\
    \ $vowels)) {\n      $vowel_count++;\n      $vowel_position = $i;\n    }\n   \
    \ if ($vowel_count == 2) {\n      return $word[$vowel_position];\n    }\n  }\n\
    \  return \"\";\n}\n\nvar_dump(get_closest_vowel(\"yogurt\"));\nvar_dump(get_closest_vowel(\"\
    FULL\"));\nvar_dump(get_closest_vowel(\"quick\"));\nvar_dump(get_closest_vowel(\"\
    ab\"));", "  $vowels = ['a', 'e', 'i', 'o', 'u'];\n  $consonants = ['b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'y', 'z'];\n  $word_array = str_split($word);\n  $vowel_array = array();\n\
    \  $consonant_array = array();\n  foreach ($word_array as $key => $value) {\n\
    \    if (in_array($value, $vowels)) {\n      $vowel_array[] = $key;\n    }\n \
    \   if (in_array($value, $consonants)) {\n      $consonant_array[] = $key;\n \
    \   }\n  }\n  if (count($vowel_array) === 0) {\n    return \"\";\n  }\n  if (count($consonant_array)\
    \ === 0) {\n    return \"\";\n  }\n  if ($vowel_array[0] < $consonant_array[0])\
    \ {\n    return \"\";\n  }\n  for ($i = 0; $i < count($vowel_array); $i++) {\n\
    \    for ($x = 0; $x < count($consonant_array); $x++) {\n      if ($vowel_array[$i]\
    \ < $consonant_array[$x]) {\n        return $word_array[$vowel_array[$i]];\n \
    \     }\n    }\n  }\n}\necho get_closest_vowel(\"yogurt\");", "    $vowels = ['a',\
    \ 'e', 'i', 'o', 'u'];\n    $consonants = array_diff(range('a', 'z'), $vowels);\n\
    \    $i = strlen($word);\n    while($i--) {\n        if(in_array($word[$i], $vowels))\
    \ {\n            if($i > 0 && in_array($word[$i-1], $consonants)) {\n        \
    \        if($i+1 < strlen($word) && in_array($word[$i+1], $consonants)) {\n  \
    \                  return $word[$i];\n                }\n            }\n     \
    \   }\n    }\n    return '';\n}", "  $length = strlen($word);\n  for ($i=$length-1;\
    \ $i >= 0; $i--) { \n    $str1 = substr($word, $i, 1);\n    $str2 = substr($word,\
    \ $i+1, 1);\n    if (checkVowel($str1) && checkVowel($str2)) {\n      return $str1;\n\
    \    }\n  }\n  return \"\";\n}\n", "    $vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \    $word_length = strlen($word);\n    for ($i = $word_length - 1; $i >= 0; $i--)\
    \ {\n        if (in_array($word[$i], $vowels)) {\n            if ($i == $word_length\
    \ - 1) {\n                break;\n            }\n            if (!in_array($word[$i\
    \ + 1], $vowels)) {\n                return $word[$i];\n            }\n      \
    \  }\n    }\n    return '';\n}\n\necho get_closest_vowel(\"yogurt\") . \"\\n\"\
    ;\necho get_closest_vowel(\"FULL\") . \"\\n\";\necho get_closest_vowel(\"quick\"\
    ) . \"\\n\";\necho get_closest_vowel(\"ab\") . \"\\n\";", "\t$word = strtolower($word);\n\
    \t$vowels = array('a', 'e', 'i', 'o', 'u');\n\t$not_vowels = array('b', 'c', 'd',\
    \ 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x',\
    \ 'y', 'z');\n\t$new_arr = array();\n\tfor ($i = 0; $i < strlen($word); $i++)\
    \ {\n\t\tif (in_array($word[$i], $vowels)) {\n\t\t\tif (in_array($word[$i - 1],\
    \ $not_vowels) && in_array($word[$i + 1], $not_vowels)) {\n\t\t\t\t$new_arr[]\
    \ = $word[$i];\n\t\t\t}\n\t\t}\n\t}\n\tif (count($new_arr) == 0) {\n\t\treturn\
    \ \"\";\n\t} else {\n\t\treturn $new_arr[count($new_arr) - 1];\n\t}\n}\necho get_closest_vowel(\"\
    yogurt\");", "  $length = strlen($word);\n  $result = '';\n  $distance = $length;\n\
    \  $vowels = ['a', 'e', 'i', 'o', 'u'];\n  $consonants = ['b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y',\
    \ 'z'];\n  for ($i = 0; $i < $length; $i++) {\n    if (in_array($word[$i], $vowels))\
    \ {\n      if ($i > 0 && in_array($word[$i - 1], $consonants)) {\n        if (isset($word[$i\
    \ + 1]) && in_array($word[$i + 1], $consonants)) {\n          if ($distance >\
    \ $i) {\n            $distance = $i;\n            $result = $word[$i];\n     \
    \     }\n        }\n      }\n    }\n  }\n  return $result;\n}", "    // your code\
    \ here\n}", "  $alphabet = array_flip(range('a', 'z'));\n  $vowels = array('a',\
    \ 'e', 'i', 'o', 'u');\n  $consonants = array_diff(array_keys($alphabet), $vowels);\n\
    \  $length = strlen($word);\n  $reverse = strrev($word);\n  $found_vowel = \"\"\
    ;\n  for ($i = 0; $i < $length; $i++) {\n    if (in_array($reverse[$i], $vowels))\
    \ {\n      if ($i == $length - 1) {\n        return \"\";\n      }\n      if (in_array($reverse[$i+1],\
    \ $consonants)) {\n        return $reverse[$i];\n      }\n    }\n  }\n  return\
    \ \"\";\n}\n\necho get_closest_vowel(\"yogurt\") . \"\\n\";\necho get_closest_vowel(\"\
    FULL\") . \"\\n\";\necho get_closest_vowel(\"quick\") . \"\\n\";\necho get_closest_vowel(\"\
    ab\") . \"\\n\";", "  // Your code here\n  if ($word === \"\"){\n    return \"\
    \";\n  }\n\n  $vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  $result = \"\"\
    ;\n  $step = 0;\n  $length = strlen($word);\n  for ($i = $length-1; $i > 0; $i--){\n\
    \    if (in_array($word[$i], $vowels)){\n      $step = 1;\n      continue;\n \
    \   }\n    if ($step === 1){\n      if (!in_array($word[$i], $vowels)){\n    \
    \    return $word[$i+1];\n      }\n    }\n  }\n  return $result;\n}\n\necho get_closest_vowel(\"\
    yogurt\");\necho get_closest_vowel(\"FULL\");\necho get_closest_vowel(\"quick\"\
    );\necho get_closest_vowel(\"ab\");\n", "\t$vowels = \"aeiouAEIOU\";\n\t$closest_vowel\
    \ = \"\";\n\tfor ($i = strlen($word) - 1; $i >= 0; $i--) {\n\t\tif ($i == 0 &&\
    \ strlen($word) > 1) {\n\t\t\tif ($word[0] == $vowels[$i]) {\n\t\t\t\treturn \"\
    \";\n\t\t\t}\n\t\t} else if ($i == strlen($word) - 1) {\n\t\t\tif ($word[$i] ==\
    \ $vowels[$i]) {\n\t\t\t\treturn \"\";\n\t\t\t}\n\t\t} else {\n\t\t\tif ($word[$i]\
    \ == $vowels[$i] && $word[$i + 1] != $vowels[$i + 1] && $word[$i - 1] != $vowels[$i\
    \ - 1]) {\n\t\t\t\t$closest_vowel = $word[$i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn $closest_vowel;\n}\necho get_closest_vowel(\"yogurt\") . \"\\\
    n\";\necho get_closest_vowel(\"FULL\") . \"\\n\";\necho get_closest_vowel(\"quick\"\
    ) . \"\\n\";\necho get_closest_vowel(\"ab\") . \"\\n\";\necho get_closest_vowel(\"\
    aib\") . \"\\n\";", "    $vowels = [\n        'a', 'e', 'i', 'o', 'u',\n     \
    \   'A', 'E', 'I', 'O', 'U'\n    ];\n    $found = false;\n    $cons_count = 0;\n\
    \    $cons_position = 0;\n    $vowel_position = 0;\n    $word_len = strlen($word);\n\
    \    $word_length = $word_len - 1;\n    for ($i = $word_length; $i >= 0; $i--)\
    \ {\n        if (!in_array($word[$i], $vowels)) {\n            $cons_count++;\n\
    \            $cons_position = $i;\n        } else {\n            $vowel_position\
    \ = $i;\n            if ($cons_count == 1) {\n                $found = true;\n\
    \                break;\n            }\n        }\n    }\n    if ($found) {\n\
    \        return $word[$vowel_position];\n    } else {\n        return \"\";\n\
    \    }\n}\necho get_closest_vowel(\"yogurt\") . \"\\n\";\necho get_closest_vowel(\"\
    FULL\") . \"\\n\";\necho get_closest_vowel(\"quick\") . \"\\n\";\necho get_closest_vowel(\"\
    ab\") . \"\\n\";", "  $vowels = array('a', 'e', 'i', 'o', 'u');\n  $reverse =\
    \ strrev($word);\n  $result = \"\";\n  for ($i = 0; $i < strlen($reverse); $i++)\
    \ {\n    if (in_array($reverse[$i], $vowels)) {\n      if ($i < strlen($reverse)\
    \ - 1 && !in_array($reverse[$i+1], $vowels)) {\n        $result = $reverse[$i];\n\
    \        break;\n      }\n    }\n  }\n  return $result;\n}\n\necho get_closest_vowel(\"\
    yogurt\"); // u\necho get_closest_vowel(\"FULL\"); // U\necho get_closest_vowel(\"\
    quick\"); // \"\"\necho get_closest_vowel(\"ab\"); // \"\"", "    //numeric key\
    \ array (vowels)\n    $vowels = array(\"A\", \"E\", \"I\", \"O\", \"U\");\n  \
    \  // $count stores the number of characters in the string\n    $count = strlen($word);\n\
    \    // $output stores the final output\n    $output = \"\";\n    //loop through\
    \ the string backwards to find the position of the first vowel\n    for ($i =\
    \ $count - 1; $i >= 0; $i--) {\n        //if the character at the position is\
    \ a vowel, $place stores the position\n        if (in_array($word[$i], $vowels))\
    \ {\n            $place = $i;\n            break;\n        }\n    }\n    //check\
    \ if the place exists, if not, return empty string.\n    if (isset($place)) {\n\
    \        //loop through string backwards to find the position of the first consonant\
    \ before the vowel\n        for ($i = $place - 1; $i >= 0; $i--) {\n         \
    \   //if the character at the position is a consonant, $first_con stores the position\n\
    \            if (!in_array($word[$i], $vowels)) {\n                $first_con\
    \ = $i;\n                break;\n            }\n        }\n        //loop through\
    \ string forwards to find the position of the first consonant after the vowel\n\
    \        for ($i = $place + 1; $i < $count; $i++) {\n            //if the character\
    \ at the position is a consonant, $second_con stores the position\n          \
    \  if (!in_array($word[$i], $vowels)) {\n                $second_con = $i;\n \
    \               break;\n            }\n        }\n        //check if the first\
    \ consonant exists, if it does not exist, return empty string\n        if (isset($first_con))\
    \ {\n            //if the second consonant exists, compare the distance between\
    \ the vowel and the 2 consonants,\n            //if the distance is the same,\
    \ output the vowel\n            if (isset($second_con)) {\n                if\
    \ ($place - $first_con == $second_con - $place) {\n                    $output\
    \ = $word[$place];\n                }\n                //if the distance is",
  "    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $consonants = ['b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y',\
    \ 'z'];\n    $letters = str_split($word);\n    $count = count($letters);\n   \
    \ $lastVowel = '';\n    $currentVowel = '';\n    $closestVowel = '';\n    $closestVowelDistance\
    \ = 0;\n    $currentDistance = 0;\n    $isPrevConsonant = false;\n    $isNextConsonant\
    \ = false;\n    $isConsonant = false;\n    $isVowel = false;\n    for ($i = $count\
    \ - 1; $i >= 0; $i--) {\n        if (in_array($letters[$i], $vowels)) {\n    \
    \        $currentVowel = $letters[$i];\n            $isPrevConsonant = in_array($letters[$i\
    \ - 1], $consonants);\n            $isNextConsonant = in_array($letters[$i + 1],\
    \ $consonants);\n            if ($isPrevConsonant && $isNextConsonant) {\n   \
    \             if ($closestVowelDistance == 0) {\n                    $closestVowel\
    \ = $currentVowel;\n                    $closestVowelDistance = $i;\n        \
    \        } else {\n                    $currentDistance = $closestVowelDistance\
    \ - $i;\n                    if ($currentDistance > 0) {\n                   \
    \     $closestVowel = $currentVowel;\n                        $closestVowelDistance\
    \ = $i;\n                    }\n                }\n            }\n        }\n\
    \    }\n    return $closestVowel;\n}\n\necho get_closest_vowel(\"yogurt\") . PHP_EOL;\n\
    echo get_closest_vowel(\"FULL\") . PHP_EOL;\n", "\t$vowels = array(\"a\", \"e\"\
    , \"i\", \"o\", \"u\");\n\t$vowel_pos = array();\n\t$word_len = strlen($word);\n\
    \t$word_arr = str_split($word);\n\tfor ($i = 0; $i < $word_len; $i++) {\n\t\t\
    for ($j = 0; $j < count($vowels); $j++) {\n\t\t\tif ($word_arr[$i] == $vowels[$j])\
    \ {\n\t\t\t\tarray_push($vowel_pos, $i);\n\t\t\t}\n\t\t}\n\t}\n\tfor ($i = count($vowel_pos)\
    \ - 1; $i >= 0; $i--) {\n\t\tif ($vowel_pos[$i] + 1 < $word_len) {\n\t\t\tif ($vowel_pos[$i]\
    \ - 1 >= 0) {\n\t\t\t\treturn $word_arr[$vowel_pos[$i]];\n\t\t\t}\n\t\t}\n\t}\n\
    \treturn \"\";\n}", "\n}\n", "    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $str_array\
    \ = str_split($word);\n    $is_last_char_vowel = false;\n    $is_first_char_vowel\
    \ = false;\n    $last_vowel_index = null;\n    $first_vowel_index = null;\n  \
    \  for ($i = 0; $i < count($str_array); $i++) {\n        if ($i === count($str_array)\
    \ - 1) {\n            $is_last_char_vowel = in_array($str_array[$i], $vowels);\n\
    \            if ($is_last_char_vowel) {\n                $last_vowel_index = $i;\n\
    \            }\n        } else {\n            $is_first_char_vowel = in_array($str_array[$i],\
    \ $vowels);\n            if ($is_first_char_vowel) {\n                $first_vowel_index\
    \ = $i;\n            }\n        }\n    }\n    if ($is_last_char_vowel || $is_first_char_vowel)\
    \ {\n        return \"\";\n    }\n    $arr = array_intersect($vowels, $str_array);\n\
    \    if (count($arr) === 0) {\n        return \"\";\n    }\n    $closest_vowel\
    \ = $arr[count($arr) - 1];\n    $closest_vowel_index = array_search($closest_vowel,\
    \ $str_array);\n    $is_closest_char_first_vowel = $closest_vowel_index === $first_vowel_index;\n\
    \    $is_closest_char_last_vowel = $closest_vowel_index === $last_vowel_index;\n\
    \    if ($is_closest_char_first_vowel || $is_closest_char_last_vowel) {\n    \
    \    return \"\";\n    }\n    return $closest_vow", "    $vowels = \"AEIOUaeiou\"\
    ;\n    $i = strlen($word) - 1;\n    $prev_con = true;\n    $result = \"\";\n \
    \   while ($i >= 0) {\n        if ($prev_con) {\n            if (strpos($vowels,\
    \ $word[$i]) !== false) {\n                $result = $word[$i];\n            \
    \    $prev_con = false;\n            }\n        } else {\n            if (strpos($vowels,\
    \ $word[$i]) === false) {\n                return $result;\n            }\n  \
    \      }\n        $i--;\n    }\n    return \"\";\n}", "  if (strlen($word) < 2)\
    \ {\n    return \"\";\n  }\n  $arr_vowel = [\"a\", \"i\", \"u\", \"e\", \"o\"\
    ];\n  $arr_word = str_split($word);\n  $char_count = count($arr_word);\n  if (in_array($arr_word[$char_count\
    \ - 1], $arr_vowel)) {\n    return \"\";\n  }\n  for ($i = $char_count - 2; $i\
    \ >= 0; $i--) {\n    if (in_array($arr_word[$i], $arr_vowel)) {\n      if (in_array($arr_word[$i\
    \ + 1], $arr_vowel)) {\n        continue;\n      } else {\n        return $arr_word[$i];\n\
    \      }\n    }\n  }\n  return \"\";\n}\n", "    $i = strlen($word) - 1;\n   \
    \ $is_prev_consonant = FALSE;\n    while ($i > 0) {\n        if (in_array($word[$i],\
    \ array('a', 'e', 'i', 'o', 'u'))) {\n            if ($is_prev_consonant) return\
    \ $word[$i];\n        } else {\n            $is_prev_consonant = TRUE;\n     \
    \   }\n        $i--;\n    }\n    return '';\n}\n\necho get_closest_vowel(\"yogurt\"\
    ) . \"<br>\";\necho get_closest_vowel(\"FULL\") . \"<br>\";\necho get_closest_vowel(\"\
    quick\") . \"<br>\";\necho get_closest_vowel(\"ab\") . \"<br>\";", "\tfor ($i\
    \ = strlen($word) - 1; $i >= 0; $i--) {\n\t\tif (is_vowel($word[$i]) && is_consonant($word[$i\
    \ - 1])) {\n\t\t\treturn $word[$i];\n\t\t}\n\t}\n\treturn \"\";\n}", "  $vowels\
    \ = array(\"a\", \"e\", \"i\", \"o\", \"u\");\n  $const = array(\"b\", \"c\",\
    \ \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"q\"\
    , \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n  $chars = str_split($word);\n\
    \  $result = '';\n  for ($i = count($chars) - 1; $i >= 0; $i--) {\n    if (in_array($chars[$i],\
    \ $vowels)) {\n      if ($i == count($chars) - 1) {\n        return '';\n    \
    \  }\n      if (in_array($chars[$i+1], $const)) {\n        return $chars[$i];\n\
    \      }\n    }\n  }\n  return $result;\n}", "    $right_side = strrev($word);\n\
    \    $result = \"\";\n    $closest_vowel = -1;\n    $is_found = false;\n    $vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    for ($i = 0; $i < strlen($right_side); $i++)\
    \ {\n        if (in_array($right_side[$i], $vowels)) {\n            $closest_vowel\
    \ = $i;\n            $is_found = true;\n            break;\n        }\n    }\n\
    \    if ($is_found) {\n        for ($i = $closest_vowel + 1; $i < strlen($right_side);\
    \ $i++) {\n            if (!in_array($right_side[$i], $vowels)) {\n          \
    \      $result = $right_side[$closest_vowel];\n                break;\n      \
    \      }\n        }\n    }\n    return $result;\n}\n", "    // TODO please write\
    \ your code here\n    $result = null;\n    $ary = str_split($word);\n    // print_r($ary);\n\
    \    $i = strlen($word) - 1;\n    while($i >= 0) {\n        if($ary[$i] == 'a'\
    \ || $ary[$i] == 'e' || $ary[$i] == 'i' || $ary[$i] == 'o' || $ary[$i] == 'u')\
    \ {\n            if($i - 1 >= 0 && $ary[$i - 1] != 'a' && $ary[$i - 1] != 'e'\
    \ && $ary[$i - 1] != 'i' && $ary[$i - 1] != 'o' && $ary[$i - 1] != 'u') {\n  \
    \              return $ary[$i];\n            }\n        }\n        $i--;\n   \
    \ }\n    return \"\";\n}\n", "\n$vowels = array('a', 'e', 'i', 'o', 'u');\n$letters\
    \ = str_split($word);\n\n$index = strlen($word) - 1;\n$found = '';\n\nwhile($index\
    \ >= 0) {\n  if (!in_array($letters[$index], $vowels)) {\n    $found = $letters[$index];\n\
    \    break;\n  }\n  $index--;\n}\n\nif (empty($found)) {\n  return '';\n}\n\n\
    $index = strlen($word) - 1;\n$closest_vowel = '';\n\nwhile($index >= 0) {\n  if\
    \ (in_array($letters[$index], $vowels)) {\n    $closest_vowel = $letters[$index];\n\
    \    break;\n  }\n  $index--;\n}\n\nreturn $closest_vowel;\n}\n\necho get_closest_vowel(\"\
    yogurt\");", "    if (empty($word)) {\n        return '';\n    }\n    $vowels\
    \ = array('a', 'e', 'i', 'o', 'u');\n    $vowel_position = array();\n    foreach\
    \ (str_split($word) as $key => $letter) {\n        if (in_array($letter, $vowels))\
    \ {\n            $vowel_position[] = $key;\n        }\n    }\n    if (count($vowel_position)\
    \ == 0) {\n        return '';\n    }\n    $total_letter = strlen($word);\n   \
    \ $right_side_consonant = $total_letter - 1;\n    $closest_letter = '';\n    while\
    \ ($right_side_consonant > 0) {\n        if (!in_array($word[$right_side_consonant],\
    \ $vowels)) {\n            foreach ($vowel_position as $vowel) {\n           \
    \     if ($vowel > $right_side_consonant) {\n                    $difference =\
    \ $vowel - $right_side_consonant;\n                    $closest_letter = $word[$vowel];\n\
    \                    break;\n                }\n            }\n            if\
    \ (!empty($closest_letter)) {\n                break;\n            }\n       \
    \ }\n        $right_side_consonant--;\n    }\n    return $closest_letter;\n}\n",
  "    $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\");\n    $last_vowel = '';\n\
    \    for ($i = strlen($word) - 1; $i >= 0; $i--) {\n        if (in_array($word[$i],\
    \ $vowels)) {\n            $last_vowel = $word[$i];\n            break;\n    \
    \    }\n    }\n    return $last_vowel;\n}\necho get_closest_vowel(\"yogurt\")\
    \ . \"\\n\";\necho get_closest_vowel(\"FULL\") . \"\\n\";\necho get_closest_vowel(\"\
    quick\") . \"\\n\";\necho get_closest_vowel(\"ab\") . \"\\n\";", "    $vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    $index = strlen($word) - 1;\n    for ($i =\
    \ $index; $i >= 0; $i--) {\n        if (in_array($word[$i], $vowels)) {\n    \
    \        if (strpos($word, $word[$i], $i + 1) !== false) {\n                continue;\n\
    \            } else {\n                return $word[$i];\n            }\n    \
    \    }\n    }\n    return '';\n}\n", "    $vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \    $result = '';\n    $found = false;\n    $counter = strlen($word) - 1;\n \
    \   while(!$found && $counter > 0) {\n        if(in_array($word[$counter], $vowels))\
    \ {\n            $result = $word[$counter];\n            $found = true;\n    \
    \    }\n        $counter--;\n    }\n    return $result;\n}\n\necho get_closest_vowel(\"\
    yogurt\") . PHP_EOL;\necho get_closest_vowel(\"FULL\") . PHP_EOL;\necho get_closest_vowel(\"\
    quick\") . PHP_EOL;\necho get_closest_vowel(\"ab\") . PHP_EOL;", "  $letters =\
    \ str_split($word);\n  $vowels = ['a', 'e', 'i', 'o', 'u'];\n  $count = 0;\n \
    \ $length = count($letters);\n  $result = '';\n  while ($count < $length) {\n\
    \    if (in_array($letters[$count], $vowels)) {\n      $result = $letters[$count];\n\
    \      return $result;\n    }\n    $count++;\n  }\n  return '';\n}\n", "  $vowels\
    \ = array('a', 'e', 'i', 'o', 'u');\n  $consonants = array('b', 'c', 'd', 'f',\
    \ 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y',\
    \ 'z');\n  $chars = str_split($word);\n  $closest = \"\";\n  $currentIndex = -1;\n\
    \  $prevIndex = -1;\n  $nextIndex = -1;\n  foreach ($chars as $key => $char) {\n\
    \    $isVowel = in_array($char, $vowels);\n    $isConsonant = in_array($char,\
    \ $consonants);\n    if ($isVowel) {\n      $currentIndex = $key;\n      $prevIndex\
    \ = $key - 1;\n      $nextIndex = $key + 1;\n      if ($prevIndex >= 0 && $nextIndex\
    \ < count($chars)) {\n        $prevChar = $chars[$prevIndex];\n        $nextChar\
    \ = $chars[$nextIndex];\n        $isPrevConsonant = in_array($prevChar, $consonants);\n\
    \        $isNextConsonant = in_array($nextChar, $consonants);\n        if ($isPrevConsonant\
    \ && $isNextConsonant) {\n          $closest = $char;\n          break;\n    \
    \    }\n      }\n    }\n  }\n  return $closest;\n}\n", "    $vowels = \"AEIOUaeiou\"\
    ;\n    $new_word = '';\n    $length = strlen($word);\n    $new_word = '';\n  \
    \  $i = $length - 1;\n    while($i >= 0) {\n        if(strpos($vowels, $word[$i])\
    \ === false) {\n            $i--;\n        } else {\n            return $word[$i];\n\
    \        }\n    }\n    return $new_word;\n}\n$word = 'yogurt';\necho get_closest_vowel($word);",
  "    $word = strtolower($word);\n    $vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"\
    ];\n    for ($i = strlen($word) - 1; $i >= 0; $i--) {\n        if (in_array($word[$i],\
    \ $vowels)) {\n            if ($i == 0 || in_array($word[$i - 1], $vowels)) {\n\
    \                continue;\n            }\n            else {\n              \
    \  return $word[$i];\n            }\n        }\n    }\n    return \"\";\n}", " \
    \ $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\");\n  $vowel_found = false;\n\
    \  $vowel_index = 0;\n  $vowel_letter = \"\";\n  $vowel_found_index = 0;\n  $consonant_before\
    \ = false;\n  $consonant_after = false;\n  $found_vowel = false;\n  // find the\
    \ vowel\n  while ($vowel_found == false && $vowel_index < count($vowels)) {\n\
    \    $vowel_letter = $vowels[$vowel_index];\n    $vowel_found_index = strrpos($word,\
    \ $vowel_letter);\n    if ($vowel_found_index !== false) {\n      $vowel_found\
    \ = true;\n    }\n    $vowel_index++;\n  }\n  // if a vowel is found, find a consonant\
    \ before it and after it\n  if ($vowel_found) {\n    for ($i = $vowel_found_index\
    \ - 1; $i >= 0; $i--) {\n      if (ctype_alpha($word[$i]) && !is_vowel($word[$i]))\
    \ {\n        $consonant_before = true;\n        break;\n      }\n    }\n    for\
    \ ($i = $vowel_found_index + 1; $i < strlen($word); $i++) {\n      if (ctype_alpha($word[$i])\
    \ && !is_vowel($word[$i])) {\n        $consonant_after = true;\n        break;\n\
    \      }\n    }\n    // if consonants are found before and after the vowel, return\
    \ the vowel\n    if ($consonant_before && $consonant_after) {\n      return $vowel_letter;\n\
    \    }\n  }\n  return \"\";\n}\n", "    $vowels = [\"a\", \"e\", \"i\", \"o\"\
    , \"u\"];\n    $word = strrev($word);\n    $word = str_split($word);\n    $count\
    \ = count($word);\n    $flag = false;\n    for ($i = 0; $i < $count; $i++) {\n\
    \        if (in_array($word[$i], $vowels)) {\n            $flag = true;\n    \
    \        break;\n        }\n    }\n    if ($flag) {\n        if ($i + 1 < $count\
    \ && in_array($word[$i + 1], $vowels)) {\n            $word = array_slice($word,\
    \ $i + 1);\n            $word = strrev(implode(\"\", $word));\n            return\
    \ $word;\n        } else if ($i - 1 >= 0 && in_array($word[$i - 1], $vowels))\
    \ {\n            $word = array_slice($word, $i);\n            $word = strrev(implode(\"\
    \", $word));\n            return $word;\n        } else {\n            return\
    \ \"\";\n        }\n    } else {\n        return \"\";\n    }\n}", "   $word_length\
    \ = strlen($word);\n   $word_arr = str_split($word);\n   $vowels = [\"a\", \"\
    e\", \"i\", \"o\", \"u\"];\n   $vowel_choices = [];\n   $vowel_indexes = [];\n\
    \   $consonant_indexes = [];\n   $consonant_choices = [];\n   $final_choices =\
    \ [];\n   $final_indexes = [];\n   $final_results = [];\n   $final_letters = [];\n\
    \   $final_final_letters = [];\n   $final_final_results = [];\n   for ($i = 0;\
    \ $i < $word_length; $i++) {\n      if (in_array($word_arr[$i], $vowels)) {\n\
    \         array_push($vowel_choices, $word_arr[$i]);\n         array_push($vowel_indexes,\
    \ $i);\n      } else {\n         array_push($consonant_choices, $word_arr[$i]);\n\
    \         array_push($consonant_indexes, $i);\n      }\n   }\n   for ($i = 0;\
    \ $i < count($vowel_indexes); $i++) {\n      for ($j = 0; $j < count($consonant_indexes);\
    \ $j++) {\n         if ($vowel_indexes[$i] > $consonant_indexes[$j]) {\n     \
    \       array_push($final_choices, $vowel_choices[$i]);\n            array_push($final_indexes,\
    \ $vowel_indexes[$i]);\n         }\n      }\n   }\n   for ($i = 0; $i < count($final_indexes);\
    \ $i++) {\n      for ($j = 0; $j < count($consonant_indexes); $j++) {\n      \
    \   if ($final_indexes[$i] < $consonant_indexes[$j]) {\n            array_push($final_results,\
    \ $final_choices[$i]);\n            array_push($final_letters, $final_indexes[$i]);\n\
    \         }", "    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $closest_vowel =\
    \ '';\n    for ($i = 0; $i < strlen($word); $i++) {\n        $char = $word[$i];\n\
    \        $next_char = $word[$i + 1];\n        if (in_array($char, $vowels)) {\n\
    \            if (in_array($next_char, $vowels)) {\n                $closest_vowel\
    \ = $char;\n            }\n        }\n    }\n    return $closest_vowel;\n}\necho\
    \ get_closest_vowel(\"yogurt\");\necho get_closest_vowel(\"FULL\");\necho get_closest_vowel(\"\
    quick\");\necho get_closest_vowel(\"ab\");", "    // Implement your solution here\n\
    }", "\tif (strlen($word)<=2) return \"\";\n\t$vowels = array('a','e','i','o','u','A','E','I','O','U');\n\
    \t$pos = strlen($word) - 1;\n\twhile ($pos>0) {\n\t\tif (!in_array($word[$pos],\
    \ $vowels)) {\n\t\t\t$pos--;\n\t\t\tcontinue;\n\t\t}\n\t\tif (!in_array($word[$pos-1],\
    \ $vowels)) {\n\t\t\tbreak;\n\t\t}\n\t\t$pos--;\n\t}\n\tif ($pos == 0) return\
    \ \"\";\n\treturn $word[$pos];\n}\n\necho get_closest_vowel(\"yogurt\").\"\\n\"\
    ;\necho get_closest_vowel(\"FULL\").\"\\n\";\necho get_closest_vowel(\"quick\"\
    ).\"\\n\";\necho get_closest_vowel(\"ab\").\"\\n\";\necho get_closest_vowel(\"\
    a\").\"\\n\";\necho get_closest_vowel(\"A\").\"\\n\";\necho get_closest_vowel(\"\
    q\").\"\\n\";\necho get_closest_vowel(\"tw\").\"\\n\";\necho get_closest_vowel(\"\
    abcsdfghijklmnopqrstuwxyz\").\"\\n\";\necho get_closest_vowel(\"ABCSDFGHIJKLMNOPQRSTUWXYZ\"\
    ).\"\\n\";\necho get_closest_vowel(\"1234567890\").\"\\n\";\necho get_closest_vowel(\"\
    !@#$%^&*()\").\"\\n\";\necho get_closest_vowel(\"aa\").\"\\n\";\necho get_closest_vowel(\"\
    Aa\").\"\\n\";\necho get_closest_vowel(\"A\").\"\\n\";\necho get_closest_vowel(\"\
    a\").\"\\n\";\necho get_closest_vowel", "    $vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \    $consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"\
    l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"\
    y\", \"z\"];\n    $last_consonant = false;\n    $closest_vowel = \"\";\n    $closest_vowel_position\
    \ = strlen($word);\n    $position = 0;\n    $characters = str_split($word);\n\
    \    while($characters) {\n        $character = array_pop($characters);\n    \
    \    if(in_array($character, $vowels)) {\n            if ($last_consonant && strlen($word)\
    \ - $position < $closest_vowel_position) {\n                $closest_vowel = $character;\n\
    \                $closest_vowel_position = strlen($word) - $position;\n      \
    \      }\n            $last_consonant = false;\n        } elseif (in_array($character,\
    \ $consonants)) {\n            $last_consonant = true;\n        }\n        $position++;\n\
    \    }\n    return $closest_vowel;\n}\necho get_closest_vowel(\"yogurt\");\necho\
    \ get_closest_vowel(\"FULL\");\necho get_closest_vowel(\"quick\");\necho get_closest_vowel(\"\
    ab\");\necho get_closest_vowel(\"can\");\necho get_closest_vowel(\"i\");\necho\
    \ get_closest_vowel(\"a\");\necho get_closest_vowel(\"l\");\necho get_closest_vowel(\"\
    e\");\necho get_closest_vowel(\"is\");\necho get_closest_vowel(\"this\");\necho\
    \ get_closest_vowel(\"a\");\necho get_closest_vowel(\"test\");\n", "    $vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    $consonants = ['b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n\
    \    $vowel_pos = 0;\n    $word_arr = str_split($word);\n    $word_length = count($word_arr);\n\
    \    $con_pos = 0;\n    $first_con_pos = 0;\n    $vowel_distance = 0;\n    $closest_vowel\
    \ = '';\n    $closest_distance = 0;\n    for ($i = $word_length - 1; $i >= 0;\
    \ $i--) {\n        if (in_array($word_arr[$i], $vowels)) {\n            $vowel_pos\
    \ = $i;\n            $con_pos = 0;\n            for ($j = $i - 1; $j >= 0; $j--)\
    \ {\n                if (in_array($word_arr[$j], $consonants)) {\n           \
    \         $con_pos = $j;\n                    break;\n                }\n    \
    \        }\n            if ($con_pos != 0) {\n                $vowel_distance\
    \ = $vowel_pos - $con_pos;\n                if ($first_con_pos == 0) {\n     \
    \               $first_con_pos = $con_pos;\n                    $closest_vowel\
    \ = $word_arr[$vowel_pos];\n                    $closest_distance = $vowel_distance;\n\
    \                } else {\n                    if ($vowel_distance < $closest_distance)\
    \ {\n                        $closest_vowel = $word_arr[$vowel_pos];\n       \
    \                 $closest_distance = $vowel_distance;\n                    }\n\
    \                }\n            }\n        }\n    }\n    return $closest_vowel;\n\
    }", "    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $len = strlen($word);\n   \
    \ for ($i = $len - 1; $i >= 0; $i--) {\n        if (in_array($word[$i], $vowels))\
    \ {\n            for ($j = $i - 1; $j >= 0; $j--) {\n                if (!in_array($word[$j],\
    \ $vowels)) {\n                    return $word[$i];\n                }\n    \
    \        }\n        }\n    }\n    return '';\n}\n\necho get_closest_vowel(\"yogurt\"\
    );\necho get_closest_vowel(\"FULL\");\necho get_closest_vowel(\"quick\");\necho\
    \ get_closest_vowel(\"ab\");", "    $vowels = 'aeiou';\n    $result = '';\n  \
    \  $closest = strlen($word);\n    for ($i = strlen($word) - 1; $i >= 0; $i--)\
    \ {\n        if (strpos($vowels, $word[$i]) !== false) {\n            if (strpos($vowels,\
    \ $word[$i + 1]) === false && strpos($vowels, $word[$i - 1]) === false) {\n  \
    \              $current = strlen($word) - $i;\n                if ($current <\
    \ $closest) {\n                    $closest = $current;\n                    $result\
    \ = $word[$i];\n                }\n            }\n        }\n    }\n    return\
    \ $result;\n}\n", "    $vowels = \"AEIOUaeiou\";\n    $length = strlen($word);\n\
    \    $closest_vowel = \"\";\n    for ($i = 0; $i < $length; $i++) {\n        if\
    \ (strpos($vowels, $word[$i]) !== false) {\n            if ($i > 0 && $i < $length\
    \ - 1) {\n                if (strpos($vowels, $word[$i-1]) === false && strpos($vowels,\
    \ $word[$i+1]) === false) {\n                    $closest_vowel = $word[$i];\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    return $closest_vowel;\n}\nprint_r(get_closest_vowel(\"yogurt\"));\n\
    print_r(get_closest_vowel(\"FULL\"));\nprint_r(get_closest_vowel(\"quick\"));\n\
    print_r(get_closest_vowel(\"ab\"));", "  // Write your code here\n}\n\necho get_closest_vowel(\"\
    yogurt\").\"\\n\"; // u\necho get_closest_vowel(\"FULL\").\"\\n\"; // U\necho\
    \ get_closest_vowel(\"quick\").\"\\n\"; // \"\"\necho get_closest_vowel(\"ab\"\
    ).\"\\n\"; // \"\"\necho get_closest_vowel(\"banana\").\"\\n\"; // a\necho get_closest_vowel(\"\
    peanut\").\"\\n\"; // e\necho get_closest_vowel(\"Grate\").\"\\n\"; // e\necho\
    \ get_closest_vowel(\"teach\").\"\\n\"; // a\necho get_closest_vowel(\"Halo\"\
    ).\"\\n\"; // o\necho get_closest_vowel(\"TakTik\").\"\\n\"; // i\necho get_closest_vowel(\"\
    in\").\"\\n\"; // i\necho get_closest_vowel(\"guitar\").\"\\n\"; // u\necho get_closest_vowel(\"\
    GOD\").\"\\n\"; // O\necho get_closest_vowel(\"joshua\").\"\\n\"; // o\necho get_closest_vowel(\"\
    alvin\").\"\\n\"; // a\necho get_closest_vowel(\"annisa\").\"\\n\"; // i\necho\
    \ get_closest_vowel(\"fadli\").\"\\n\"; // a\necho get_closest_vowel(\"devina\"\
    ).\"\\n\"; // e\necho get_closest_vowel(\"adelia\").\"\\n\"; // e\necho get_closest_vowel(\"\
    agnes\").\"\\n\"; // e\necho get_closest_vowel(\"anas\").\"\\n\"; // a\necho get_closest_vowel(\"\
    agus\").\"\\n\"; // u\necho get_closest_vowel(\"fajar\").\"\\n\"; // a\necho get_closest_vowel(\"\
    purnama\").\"", "    $word = strrev($word);\n    $word = str_split($word);\n \
    \   for ($i=0; $i < count($word); $i++) { \n        if(!($word[$i] == \"a\" ||\
    \ $word[$i] == \"e\" || $word[$i] == \"i\" || $word[$i] == \"o\" || $word[$i]\
    \ == \"u\")){\n            if(!isset($word[$i + 1])){\n                return\
    \ \"\";\n            }else{\n                if($word[$i + 1] == \"a\" || $word[$i\
    \ + 1] == \"e\" || $word[$i + 1] == \"i\" || $word[$i + 1] == \"o\" || $word[$i\
    \ + 1] == \"u\"){\n                    return $word[$i + 1];\n               \
    \ }\n            }\n        }\n    }\n    return \"\";\n}\n\n$word = \"yogurt\"\
    ;\necho get_closest_vowel($word);\necho \"<br>\";\n$word = \"FULL\";\necho get_closest_vowel($word);\n\
    echo \"<br>\";\n$word = \"quick\";\necho get_closest_vowel($word);\necho \"<br>\"\
    ;\n$word = \"ab\";\necho get_closest_vowel($word);\necho \"<br>\";\n", "\t$vowels\
    \ = array('a', 'e', 'i', 'o', 'u');\n\t$len = strlen($word);\n\tfor ($i = $len\
    \ - 1; $i >= 0; $i--) {\n\t\t$c = $word[$i];\n\t\tif (in_array($c, $vowels)) {\n\
    \t\t\tif ($i > 0 && !in_array($word[$i - 1], $vowels)) {\n\t\t\t\tif ($i < $len\
    \ - 1 && !in_array($word[$i + 1], $vowels)) {\n\t\t\t\t\treturn $c;\n\t\t\t\t\
    }\n\t\t\t}\n\t\t}\n\t}\n\treturn '';\n}", "    $vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"];\n    $first_letter = substr($word, 0, 1);\n    $last_letter =\
    \ substr($word, -1);\n    if(in_array($first_letter, $vowels) || in_array($last_letter,\
    \ $vowels)) {\n        return \"\";\n    }\n    $word_array = str_split($word);\n\
    \    $index = count($word_array);\n    while($index >= 0) {\n        $index--;\n\
    \        if(in_array($word_array[$index], $vowels)) {\n            $index2 = $index\
    \ - 1;\n            if(in_array($word_array[$index2], $vowels)) {\n          \
    \      continue;\n            }\n            return $word_array[$index];\n   \
    \     }\n    }\n    return \"\";\n}\n", "    $vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \    $last_vowel = \"\";\n    for ($i = strlen($word) - 1; $i >= 0; $i--) {\n\
    \        $vowel = $word[$i];\n        if (in_array($vowel, $vowels)) {\n     \
    \       $last_vowel = $vowel;\n            break;\n        }\n    }\n    for ($i\
    \ = strlen($word) - 1; $i >= 0; $i--) {\n        $vowel = $word[$i];\n       \
    \ if (in_array($vowel, $vowels)) {\n            if ($vowel == $last_vowel) {\n\
    \                $last_vowel = $vowel;\n            } else {\n               \
    \ break;\n            }\n        }\n    }\n    return $last_vowel;\n}\n\necho\
    \ get_closest_vowel(\"yogurt\") . \"\\n\";\necho get_closest_vowel(\"FULL\") .\
    \ \"\\n\";\necho get_closest_vowel(\"quick\") . \"\\n\";\necho get_closest_vowel(\"\
    ab\") . \"\\n\";", "\t$a = 0;\n\t$vowels = array('a', 'e', 'i', 'o', 'u');\n\t\
    $wor = str_split($word);\n\t$count = 0;\n\t$index = 0;\n\t$b = 0;\n\t$c = 0;\n\
    \t$result = '';\n\tfor ($i = 0; $i < count($wor); $i++) {\n\t\tif (in_array($wor[$i],\
    \ $vowels)) {\n\t\t\tif ($i == 0 && $wor[1] != in_array($wor[1], $vowels)) {\n\
    \t\t\t\t$result = $wor[$i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if ($i == count($wor)\
    \ - 1 && $wor[count($wor) - 2] != in_array($wor[count($wor) - 2], $vowels)) {\n\
    \t\t\t\t$result = $wor[$i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\telse if ($wor[$i -\
    \ 1] != in_array($wor[$i - 1], $vowels) && $wor[$i + 1] != in_array($wor[$i +\
    \ 1], $vowels)) {\n\t\t\t\t$result = $wor[$i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\
    }\n\t}\n\treturn $result;\n}\necho get_closest_vowel(\"yogurt\") . \"\\n\";\n\
    echo get_closest_vowel(\"FULL\") . \"\\n\";\necho get_closest_vowel(\"quick\"\
    ) . \"\\n\";\necho get_closest_vowel(\"ab\") . \"\\n\";\n", "  $vowels = array(\"\
    a\", \"e\", \"i\", \"o\", \"u\");\n  $word = strtolower($word);\n  $word = str_split($word);\n\
    \  $result = null;\n  $index = count($word) - 1;\n  $count = 0;\n  $vowel_flag\
    \ = false;\n  for ($i=$index; $i>=0; $i--) {\n    $vowel_flag = false;\n    foreach\
    \ ($vowels as $vowel) {\n      if ($word[$i] == $vowel) {\n        $vowel_flag\
    \ = true;\n        break;\n      }\n    }\n    if ($vowel_flag) {\n      $result\
    \ = $word[$i];\n      break;\n    }\n    $count++;\n  }\n  if ($count%2==0) {\n\
    \    return \"\";\n  }\n  else {\n    return $result;\n  }\n}", "\t$vowels = ['a',\
    \ 'e', 'i', 'o', 'u'];\n\t$consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k',\
    \ 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n\t$characters\
    \ = str_split($word);\n\t\n\t$hit_vowel = false;\n\t$hit_consonant = false;\n\t\
    $closest_vowel = false;\n\t$closest_vowel_location = 0;\n\t$consonant_location\
    \ = 0;\n\t$word_length = count($characters);\n\t\n\tfor ($i = $word_length; $i\
    \ > 0; $i--) {\n\t\tif (in_array($characters[$i - 1], $vowels)) {\n\t\t\t$hit_vowel\
    \ = true;\n\t\t\t$closest_vowel = $characters[$i - 1];\n\t\t\t$closest_vowel_location\
    \ = $i - 1;\n\t\t}\n\t\t\n\t\tif (in_array($characters[$i - 1], $consonants))\
    \ {\n\t\t\t$hit_consonant = true;\n\t\t\t$consonant_location = $i - 1;\n\t\t}\n\
    \t\t\n\t\tif ($hit_vowel && $hit_consonant) {\n\t\t\tif ($closest_vowel_location\
    \ > $consonant_location) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\t\n\treturn\
    \ $closest_vowel;\n}\n", "\n}\n", "  $vowels = array(\"a\",\"e\",\"i\",\"o\",\"\
    u\");\n  $word_array = str_split($word);\n  $consonants = array_diff($word_array,\
    \ $vowels);\n  if (count($consonants) < 2) {\n    return \"\";\n  } else {\n \
    \   for ($i = count($word_array) - 1; $i >= 0; $i--) {\n      if (in_array($word_array[$i],\
    \ $vowels)) {\n        $current_vowel = $word_array[$i];\n        if (in_array($word_array[$i\
    \ + 1], $consonants) && in_array($word_array[$i - 1], $consonants)) {\n      \
    \    return $current_vowel;\n        }\n      }\n    }\n  }\n}\n\necho get_closest_vowel(\"\
    yogurt\") . \"\\n\";\necho get_closest_vowel(\"FULL\") . \"\\n\";\necho get_closest_vowel(\"\
    quick\") . \"\\n\";\necho get_closest_vowel(\"ab\") . \"\\n\";", "    $letters\
    \ = str_split($word);\n    $result = '';\n    for ($i = count($letters) - 1; $i\
    \ >= 0; $i--) {\n        $prev = $i - 1;\n        $next = $i + 1;\n        if\
    \ ($i === 0) {\n            break;\n        }\n        if (is_consonant($letters[$i]))\
    \ {\n            continue;\n        }\n        if (is_consonant($letters[$prev])\
    \ && is_consonant($letters[$next])) {\n            $result = $letters[$i];\n \
    \           break;\n        }\n    }\n    return $result;\n}\n", "    $words =\
    \ str_split($word);\n    $vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    $isVowel\
    \ = FALSE;\n    $closestVowel = \"\";\n    $closestVowelDistance = strlen($word);\n\
    \    for ($i = count($words) - 1; $i >= 0; $i--) {\n        $char = $words[$i];\n\
    \        if (in_array($char, $vowels)) {\n            $isVowel = TRUE;\n     \
    \       $distance = count($words) - $i;\n            if ($distance < $closestVowelDistance)\
    \ {\n                $closestVowel = $char;\n                $closestVowelDistance\
    \ = $distance;\n            }\n        } else {\n            if ($isVowel) {\n\
    \                return $closestVowel;\n            }\n        }\n    }\n    return\
    \ \"\";\n}\n", "    $vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    $consonants\
    \ = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n\
    \    $char_array = str_split($word);\n    $char_array = array_reverse($char_array);\n\
    \    $bool = False;\n    for ($i = 0; $i < count($char_array); $i++) {\n     \
    \   if ($bool == True) {\n            if (in_array($char_array[$i], $vowels))\
    \ {\n                return $char_array[$i];\n            }\n        }\n     \
    \   if (in_array($char_array[$i], $consonants)) {\n            $bool = True;\n\
    \        }\n    }\n    return \"\";\n}\n", "  $vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \  $len = strlen($word);\n  $c_index = $len;\n  $first_vowel = null;\n  for ($i\
    \ = $len-1; $i >= 0; $i--) {\n    if (in_array($word[$i], $vowels)) {\n      $first_vowel\
    \ = $i;\n      break;\n    }\n  }\n  if (!$first_vowel) return '';\n  for ($i\
    \ = $first_vowel-1; $i >= 0; $i--) {\n    if (!in_array($word[$i], $vowels)) {\n\
    \      $c_index = $i;\n      break;\n    }\n  }\n  return $word[$c_index+1];\n\
    }\n", "    \n}\n", "\t$vowels = array('a', 'e', 'i', 'o', 'u');\n\t$count = strlen($word);\n\
    \t$closest = '';\n\t$flag = false;\n\tfor ($i = $count - 1; $i >= 0; $i--) {\n\
    \t\tif ($flag) {\n\t\t\tif (in_array($word[$i], $vowels)) {\n\t\t\t\t$closest\
    \ = $word[$i];\n\t\t\t\tbreak;\n\t\t\t}\n\t\t} else {\n\t\t\tif (!in_array($word[$i],\
    \ $vowels)) {\n\t\t\t\t$flag = true;\n\t\t\t}\n\t\t}\n\t}\n\treturn $closest;\n\
    }\necho get_closest_vowel(\"yogurt\") . PHP_EOL;\necho get_closest_vowel(\"FULL\"\
    ) . PHP_EOL;\necho get_closest_vowel(\"quick\") . PHP_EOL;\necho get_closest_vowel(\"\
    ab\") . PHP_EOL;", "  $index = strlen($word) - 1;\n  $consonants = [\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n  $vowels = [\"\
    a\", \"e\", \"i\", \"o\", \"u\"];\n  $closest_vowel = \"\";\n  $closest_vowel_index\
    \ = -1;\n  while ($index >= 0) {\n    if (in_array($word[$index], $vowels)) {\n\
    \      if ($closest_vowel_index === -1) {\n        $closest_vowel = $word[$index];\n\
    \        $closest_vowel_index = $index;\n      }\n    } else if (in_array($word[$index],\
    \ $consonants)) {\n      if ($closest_vowel_index > -1) {\n        return $closest_vowel;\n\
    \      }\n    }\n    $index--;\n  }\n  return \"\";\n}\necho get_closest_vowel(\"\
    FULL\") . PHP_EOL;\necho get_closest_vowel(\"yogurt\") . PHP_EOL;\necho get_closest_vowel(\"\
    quick\") . PHP_EOL;\necho get_closest_vowel(\"ab\") . PHP_EOL;\n", "    $vowels\
    \ = array(\"a\", \"e\", \"i\", \"o\", \"u\");\n    $letters = str_split($word);\n\
    \    $found_vowel = \"\";\n    $result = \"\";\n    $last_found_vowel = 0;\n \
    \   $consonant_count = 0;\n    $last_consonant_count = 0;\n    for ($i = 0; $i\
    \ < count($letters); $i++) {\n        if (in_array($letters[$i], $vowels)) {\n\
    \            $found_vowel = $letters[$i];\n            $last_found_vowel = $i;\n\
    \            $last_consonant_count = $consonant_count;\n            $consonant_count\
    \ = 0;\n        } else {\n            $consonant_count++;\n        }\n    }\n\
    \    if ($last_consonant_count == 1) {\n        $result = $found_vowel;\n    }\n\
    \    return $result;\n}\n\nprint_r(get_closest_vowel(\"yogurt\"));\necho \"\\\
    n\";\nprint_r(get_closest_vowel(\"FULL\"));\necho \"\\n\";\nprint_r(get_closest_vowel(\"\
    quick\"));\necho \"\\n\";\nprint_r(get_closest_vowel(\"ab\"));\necho \"\\n\";\n\
    print_r(get_closest_vowel(\"yogurt\"));\necho \"\\n\";\nprint_r(get_closest_vowel(\"\
    yqrur\"));\necho \"\\n\";\nprint_r(get_closest_vowel(\"yqrurs\"));\necho \"\\\
    n\";\nprint_r(get_closest_vowel(\"yqrursu\"));\necho \"\\n\";\nprint_r(get_closest_vowel(\"\
    aa\"));\necho \"\\n\";\nprint_r(get_closest_vowel(\"a\"));\necho \"\\n\";\nprint_r(get_closest_vowel(\"\
    \"));\necho \"\\n\";\n", "  $vowels = ['a', 'e', 'i', 'o', 'u'];\n  $closest_vowel\
    \ = '';\n  $closest_vowel_distance = strlen($word);\n  for ($i = strlen($word)\
    \ - 1; $i >= 0; $i--) {\n    if (in_array($word[$i], $vowels)) {\n      for ($j\
    \ = $i - 1; $j >= 0; $j--) {\n        if (!in_array($word[$j], $vowels)) {\n \
    \         if ($i - $j < $closest_vowel_distance) {\n            $closest_vowel\
    \ = $word[$i];\n            $closest_vowel_distance = $i - $j;\n          }\n\
    \          break;\n        }\n      }\n    }\n  }\n  return $closest_vowel;\n\
    }\n", "    $found_vowel = '';\n    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $str_length\
    \ = strlen($word);\n    $flipped_word = strrev($word);\n    for ($i = 0; $i <\
    \ $str_length; $i++) {\n        $char = $flipped_word[$i];\n        if (in_array($char,\
    \ $vowels)) {\n            $found_vowel = $char;\n            break;\n       \
    \ }\n    }\n    return $found_vowel;\n}\n", "    $word = strtolower($word);\n\
    \    $word = strrev($word);\n    $vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"];\n\
    \    $result = \"\";\n    $vowel_index = 0;\n    $letter_index = 0;\n    $end_word\
    \ = strlen($word) - 1;\n    while($letter_index < $end_word) {\n        if(in_array($word[$letter_index],\
    \ $vowels)) {\n            $vowel_index = $letter_index;\n            break;\n\
    \        }\n        $letter_index++;\n    }\n    $left_pos = $vowel_index - 1;\n\
    \    $right_pos = $vowel_index + 1;\n    if($left_pos >= 0 && $right_pos <= $end_word)\
    \ {\n        if(!in_array($word[$left_pos], $vowels) && !in_array($word[$right_pos],\
    \ $vowels)) {\n            $result = $word[$vowel_index];\n        }\n    }\n\
    \    return $result;\n}\necho get_closest_vowel(\"yogurt\") . \"\\n\";\necho get_closest_vowel(\"\
    FULL\") . \"\\n\";\necho get_closest_vowel(\"quick\") . \"\\n\";\necho get_closest_vowel(\"\
    ab\") . \"\\n\";\n", "   //your code goes here\n}\n\n/**\n * Do not change anything\
    \ below this line\n */\n$test_cases = [\n    'yogurt',\n    'FULL',\n    'quick',\n\
    \    'ab',\n    '',\n    'hello',\n    'JavaScript',\n    'Python',\n    'PHP',\n\
    \    'Ruby',\n    'Go',\n    'Perl',\n    'C',\n    'C++',\n    'C#',\n    'Swift',\n\
    \    'Scala',\n    'Bash',\n    'Elixir',\n    'Ruby',\n    'hello world',\n \
    \   'CRUNCH',\n    'RUST',\n    'MONGODB',\n    'PYTHON',\n    'GO',\n    'GOLANG',\n\
    \    'PHP',\n    'SYMFONY',\n    'LARAVEL',\n    'SWIFT',\n    'IOS',\n    'MACHINE\
    \ LEARNING',\n    'DEEP LEARNING',\n    'NEURAL NETWORK',\n    'YOGURT',\n   \
    \ 'MAKER',\n    'DEVELOPER',\n    'DESIGNER',\n    'TESTING',\n    'RESTFUL API',\n\
    \    'GIT',\n    'TDD',\n    'CODE',\n    'TECHNIQUE',\n    'ALGORITHM',\n   \
    \ 'GITHUB',\n    'STACKOVERFLOW',\n    'YOUTUBE',\n    'GOOGLE',\n    'FACEBOOK',\n\
    \    'TWITTER',\n    'INSTAGRAM',\n    'SOCIAL MEDIA',\n    'HACKERRANK',\n  \
    \  'CODEWARS',\n    'JAVASCRIPT',\n    'ES6',\n    'REACT',\n    'VUE',\n    'ANGULAR',\n\
    \    'BOOTSTRAP',\n    'SASS',\n    'LESS',\n    'HTML',\n    'CSS',\n    'HTML5',\n\
    \    'CSS3',\n    'ALGORITHM',\n    'DATA STRUCTURE',\n    'DATABASE',\n    'MYSQL',\n\
    \   ", "    $vowels = array('a', 'e', 'i', 'o', 'u');\n    $word_array = str_split($word);\n\
    \    $result = array();\n    $vowel_index = 0;\n    $consonant_index = 0;\n  \
    \  $counter = 0;\n    $max_counter = 0;\n    $result = array();\n    for ($i =\
    \ count($word_array) - 1; $i >= 0; $i--) {\n        if (in_array($word_array[$i],\
    \ $vowels)) {\n            $vowel_index = $i;\n            $result[$counter]['vowel']\
    \ = $word_array[$i];\n            if ($max_counter < $counter) {\n           \
    \     $max_counter = $counter;\n            }\n            $counter = 0;\n   \
    \     } else {\n            $consonant_index = $i;\n            $result[$counter]['consonant']\
    \ = $word_array[$i];\n            $counter++;\n        }\n    }\n    if (isset($result[$max_counter]['vowel']))\
    \ {\n        return $result[$max_counter]['vowel'];\n    } else {\n        return\
    \ '';\n    }\n}\n$word = readline(\"Enter the word: \");\necho get_closest_vowel($word)\
    \ . PHP_EOL;", "    $arr = [];\n    $vowels = [\"a\", \"e\", \"i\", \"o\", \"\
    u\"];\n    $consonants = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"\
    k\", \"l\", \"m\", \"n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"\
    x\", \"y\", \"z\"];\n    $revArr = str_split(strrev($word));\n    foreach ($revArr\
    \ as $i => $letter) {\n        if (in_array($letter, $vowels)) {\n           \
    \ $arr[] = $letter;\n        }\n        if (in_array($letter, $consonants)) {\n\
    \            if (isset($arr[0])) {\n                return $arr[0];\n        \
    \    }\n        }\n    }\n    return \"\";\n}\necho \"yogurt \" . get_closest_vowel(\"\
    yogurt\") . \"<br>\";\necho \"FULL \" . get_closest_vowel(\"FULL\") . \"<br>\"\
    ;\necho \"quick \" . get_closest_vowel(\"quick\") . \"<br>\";\necho \"ab \" .\
    \ get_closest_vowel(\"ab\") . \"<br>\";", "  $consonants = \"bcdfghjklmnpqrstvwxyz\"\
    ;\n  $vowels = \"aeiou\";\n  $new_word = \"\";\n  $close_vowel = \"\";\n  $last_char\
    \ = \"\";\n  $i = strlen($word) - 1;\n  while ($i > 0) {\n    $letter = substr($word,\
    \ $i, 1);\n    if ($letter == \"a\" || $letter == \"e\" || $letter == \"i\" ||\
    \ $letter == \"o\" || $letter == \"u\") {\n      $new_word = $new_word . $letter;\n\
    \      $close_vowel = $letter;\n    } else {\n      $new_word = $new_word . $letter;\n\
    \    }\n    $i--;\n  }\n  $word_length = strlen($new_word);\n  $j = $word_length\
    \ - 1;\n  while ($j > 0) {\n    $second_letter = substr($new_word, $j, 1);\n \
    \   $first_letter = substr($new_word, $j - 1, 1);\n    if ($first_letter == \"\
    a\" || $first_letter == \"e\" || $first_letter == \"i\" || $first_letter == \"\
    o\" || $first_letter == \"u\") {\n      $j--;\n    } else {\n      if ($second_letter\
    \ == \"a\" || $second_letter == \"e\" || $second_letter == \"i\" || $second_letter\
    \ == \"o\" || $second_letter == \"u\") {\n        return $second_letter;\n   \
    \   } else {\n        $j--;\n      }\n    }\n  }\n  return $close_vowel;\n}\n\n\
    echo get_closest_vowel(\"yogurt\") . \"\\n\";\necho get_closest_vowel(\"FULL\"\
    ) . \"\\n\";\necho get_closest_vowel(\"quick\") . \"\\n\";\necho get_closest_vowel(\"\
    ab\") . \"\\n\";\n", "    $word_arr = str_split($word);\n    $vowels = [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"];\n    $count = 0;\n    $counter = 0;\n    for ($i\
    \ = count($word_arr) - 1; $i >= 0; $i--) {\n        if (in_array($word_arr[$i],\
    \ $vowels)) {\n            $count = 0;\n            $counter++;\n        } else\
    \ {\n            $count++;\n        }\n        if ($count == 2 && $counter >=\
    \ 1) {\n            return $word_arr[$i + 1];\n        }\n    }\n    return \"\
    \";\n}\n", "    if (strlen($word) < 2) {\n        return \"\";\n    }\n\n    $con\
    \ = substr($word, -2, 1);\n    $com = substr($word, -1);\n    $vowel_pattern =\
    \ '/(?<=' . $con . ')([aeiou])(?=' . $com . ')/i';\n    $matched = preg_match($vowel_pattern,\
    \ $word, $matches);\n    if ($matched) {\n        return $matches[1];\n    } else\
    \ {\n        return \"\";\n    }\n}\n\n$test_input = array(\n    \"yogurt\",\n\
    \    \"FULL\",\n    \"quick\",\n    \"ab\",\n    \"barbarian\",\n    \"drop\"\
    ,\n    \"the\",\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\",\n    \"abcd\",\n    \"abacddead\"\
    ,\n    \"abcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdef",
  "  $vowels = ['a', 'e', 'i', 'o', 'u'];\n  $word_array = str_split($word);\n  for\
    \ ($i = count($word_array) - 1; $i >= 0; $i--) {\n    $char = $word_array[$i];\n\
    \    if (in_array($char, $vowels)) {\n      if ($i < count($word_array) - 1) {\n\
    \        $char_to_the_right = $word_array[$i + 1];\n        if (!in_array($char_to_the_right,\
    \ $vowels)) {\n          return $char;\n        }\n      }\n    }\n  }\n  return\
    \ '';\n}\n\necho get_closest_vowel(\"yogurt\") . \"\\n\";\necho get_closest_vowel(\"\
    FULL\") . \"\\n\";\necho get_closest_vowel(\"quick\") . \"\\n\";\necho get_closest_vowel(\"\
    ab\") . \"\\n\";", "    $i = strlen($word) - 1;\n    $cons = 0;\n    $vowels =\
    \ \"aeiou\";\n    while($i >= 0) {\n        if(strpos($vowels, $word[$i]) !==\
    \ false) {\n            if($cons > 1) return $word[$i];\n            else $cons\
    \ = 0;\n        } else {\n            $cons++;\n        }\n        $i--;\n   \
    \ }\n    return \"\";\n}", "    $vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"];\n \
    \   $word = str_split($word);\n    $closest_vowel = \"\";\n    $index = -1;\n\
    \    $limit = count($word);\n    for ($i = $limit-1; $i > 0; $i--) {\n       \
    \ if (in_array($word[$i], $vowels)) {\n            $closest_vowel = $word[$i];\n\
    \            $index = $i;\n            break;\n        }\n    }\n    if (empty($closest_vowel))\
    \ {\n        return \"\";\n    }\n    for ($i = $index-1; $i > 0; $i--) {\n  \
    \      if (!in_array($word[$i], $vowels)) {\n            return $closest_vowel;\n\
    \        }\n    }\n    return \"\";\n}\n$value = \"yogurt\";\n$result = get_closest_vowel($value);\n\
    echo \"The closest vowel to $value is $result. <br>\";\n$value = \"FULL\";\n$result\
    \ = get_closest_vowel($value);\necho \"The closest vowel to $value is $result.\
    \ <br>\";\n$value = \"quick\";\n$result = get_closest_vowel($value);\necho \"\
    The closest vowel to $value is $result. <br>\";\n$value = \"ab\";\n$result = get_closest_vowel($value);\n\
    echo \"The closest vowel to $value is $result. <br>\";\n$value = \"candy\";\n\
    $result = get_closest_vowel($value);\necho \"The closest vowel to $value is $result.\
    \ <br>\";", "\t// Write your code here\n}", "    $word = strtolower($word);\n\
    \    $vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    $word = str_split($word);\n\
    \    for ($i = count($word) - 1; $i >= 0; $i--) {\n        if (in_array($word[$i],\
    \ $vowels)) {\n            if (in_array($word[$i - 1], $vowels) || in_array($word[$i\
    \ + 1], $vowels)) {\n                continue;\n            } else {\n       \
    \         return $word[$i];\n            }\n        }\n    }\n    return \"\"\
    ;\n}\necho get_closest_vowel(\"yogurt\") . \"\\n\";\necho get_closest_vowel(\"\
    FULL\") . \"\\n\";\necho get_closest_vowel(\"quick\") . \"\\n\";\necho get_closest_vowel(\"\
    ab\") . \"\\n\";", "  \n}\n", "    $vowels = array(\"a\", \"e\", \"i\", \"o\"\
    , \"u\");\n    $word_len = strlen($word);\n    if ($word_len < 3) {\n        return\
    \ \"\";\n    }\n    for ($i = $word_len - 1; $i > 0; $i--) {\n        if (!in_array($word[$i],\
    \ $vowels) && in_array($word[$i - 1], $vowels)) {\n            return $word[$i\
    \ - 1];\n        }\n    }\n    return \"\";\n}\n\necho get_closest_vowel(\"yogurt\"\
    ) . PHP_EOL;\necho get_closest_vowel(\"FULL\") . PHP_EOL;\necho get_closest_vowel(\"\
    quick\") . PHP_EOL;\necho get_closest_vowel(\"ab\") . PHP_EOL;", "    $vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    $reverse_word = strrev($word);\n    $find_vowel\
    \ = str_split($reverse_word);\n    $final_vowel = '';\n    for ($i = 0; $i < count($find_vowel);\
    \ $i++) {\n        $previous_char = $find_vowel[$i - 1];\n        $char = $find_vowel[$i];\n\
    \        $next_char = $find_vowel[$i + 1];\n        if ($i != 0 && in_array($char,\
    \ $vowels) && !in_array($previous_char, $vowels) && !in_array($next_char, $vowels))\
    \ {\n            $final_vowel = $char;\n            break;\n        }\n    }\n\
    \    return $final_vowel;\n}\n\nprint_r(get_closest_vowel(\"yogurt\"));\necho\
    \ \"<br/>\";\nprint_r(get_closest_vowel(\"FULL\"));\necho \"<br/>\";\nprint_r(get_closest_vowel(\"\
    quick\"));\necho \"<br/>\";\nprint_r(get_closest_vowel(\"ab\"));\necho \"<br/>\"\
    ;", "  $len = strlen($word);\n  $current_closest_vowel = \"\";\n  $closest_vowel_index\
    \ = 9999999;\n  $current_closest_consonant = \"\";\n  $closest_consonant_index\
    \ = 9999999;\n  for ($i = $len - 1; $i >= 0; $i--) {\n    $char = $word[$i];\n\
    \    if ($char == \"a\" || $char == \"e\" || $char == \"i\" || $char == \"o\"\
    \ || $char == \"u\" || $char == \"A\" || $char == \"E\" || $char == \"I\" || $char\
    \ == \"O\" || $char == \"U\") {\n      if ($i < $closest_vowel_index) {\n    \
    \    $current_closest_vowel = $char;\n        $closest_vowel_index = $i;\n   \
    \   }\n    } else {\n      if ($i < $closest_consonant_index) {\n        $current_closest_consonant\
    \ = $char;\n        $closest_consonant_index = $i;\n      }\n    }\n  }\n  if\
    \ ($closest_vowel_index < $closest_consonant_index) {\n    return $current_closest_vowel;\n\
    \  } else {\n    return \"\";\n  }\n}", "    $vowels = \"aeiou\";\n    $vowel_position\
    \ = [];\n    for ($i = 0; $i < strlen($word); $i++) {\n        if (strpos($vowels,\
    \ $word[$i]) !== false) {\n            array_push($vowel_position, $i);\n    \
    \    }\n    }\n    for ($i = 0; $i < sizeof($vowel_position); $i++) {\n      \
    \  if ($vowel_position[$i] > 0 && $vowel_position[$i] < strlen($word) - 1) {\n\
    \            if ($vowel_position[$i] > $vowel_position[$i + 1]) {\n          \
    \      return $word[$vowel_position[$i]];\n            }\n        }\n    }\n \
    \   return \"\";\n}", "    $vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n  \
    \  $split_word = str_split($word);\n    $vowel_index = 0;\n    $output = \"\"\
    ;\n    for ($i = count($split_word) - 1; $i >= 0; $i--) {\n        $index = array_search($split_word[$i],\
    \ $vowels);\n        if ($index != FALSE) {\n            $vowel_index = $i;\n\
    \            break;\n        }\n    }\n    if ($vowel_index == 0) {\n        return\
    \ $output;\n    }\n    if ($vowel_index == 1) {\n        return $split_word[$vowel_index];\n\
    \    }\n    for ($i = $vowel_index; $i >= 0; $i--) {\n        $index = array_search($split_word[$i],\
    \ $vowels);\n        if ($index == FALSE) {\n            if ($i == $vowel_index)\
    \ {\n                return $output;\n            }\n            return $split_word[$vowel_index];\n\
    \        }\n    }\n}\n\necho get_closest_vowel(\"yogurt\") . \"\\n\";\necho get_closest_vowel(\"\
    FULL\") . \"\\n\";\necho get_closest_vowel(\"quick\") . \"\\n\";\necho get_closest_vowel(\"\
    ab\") . \"\\n\";", "\t// Get length of string\n\t$length = strlen($word);\n\t\
    // Create an array of vowels to look for\n\t$vowels = array(\"a\", \"e\", \"i\"\
    , \"o\", \"u\");\n\t// Iterate through the string\n\tfor ($i=$length-1; $i > 0;\
    \ $i--) { \n\t\t// Check if letter is a vowel\n\t\tif (in_array($word[$i], $vowels))\
    \ {\n\t\t\t// If letter is a vowel, check if previous letter is a consonant\n\t\
    \t\tif (!in_array($word[$i-1], $vowels)) {\n\t\t\t\t// If previous letter is a\
    \ consonant, check if next letter is a consonant\n\t\t\t\tif (!in_array($word[$i+1],\
    \ $vowels)) {\n\t\t\t\t\t// If next letter is a consonant, return vowel\n\t\t\t\
    \t\treturn $word[$i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t// If no vowel is found\
    \ that meets the above condition, return empty string\n\treturn \"\";\n}\n", " \
    \ $word_length = strlen($word);\n  for ($i = $word_length - 1; $i >= 0; $i--)\
    \ {\n    $current_letter = substr($word, $i, 1);\n    if (in_array($current_letter,\
    \ ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])) {\n      if ($i > 0) {\n\
    \        $previous_letter = substr($word, $i - 1, 1);\n        if (!in_array($previous_letter,\
    \ ['a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'])) {\n          return $current_letter;\n\
    \        }\n      }\n    }\n  }\n  return '';\n}\n", "\t$vowels = array(\"a\"\
    , \"e\", \"i\", \"o\", \"u\");\n\t$word = strrev($word);\n\t$vowel = \"\";\n\t\
    for ($i = 0; $i < strlen($word); $i++) {\n\t\tif (in_array($word[$i], $vowels))\
    \ {\n\t\t\t$vowel = $word[$i];\n\t\t\tif (!in_array($word[$i+1], $vowels) && !in_array($word[$i-1],\
    \ $vowels)) {\n\t\t\t\treturn $vowel;\n\t\t\t}\n\t\t}\n\t}\n\treturn \"\";\n}\n\
    \n$test_cases = array(\"yogurt\", \"FULL\", \"quick\", \"ab\");\nforeach ($test_cases\
    \ as $case) {\n\techo \"Testing '$case'...\\n\";\n\techo get_closest_vowel($case)\
    \ . \"\\n\";\n}", "\t$vowels = [ 'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O',\
    \ 'U' ];\n\t$consonants = [ 'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M',\
    \ 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z' ];\n\t$word = str_split($word);\n\
    \t$i = count($word) - 1;\n\twhile($i > 0) {\n\t\tif(in_array($word[$i], $vowels))\
    \ {\n\t\t\tif(in_array($word[$i-1], $consonants)) {\n\t\t\t\tif(in_array($word[$i+1],\
    \ $consonants)) {\n\t\t\t\t\treturn $word[$i];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\
    $i--;\n\t}\n\treturn '';\n}\necho get_closest_vowel(\"yogurt\") . PHP_EOL;\necho\
    \ get_closest_vowel(\"FULL\") . PHP_EOL;\necho get_closest_vowel(\"quick\") .\
    \ PHP_EOL;\necho get_closest_vowel(\"ab\") . PHP_EOL;", "\t$vowels = array(\"\
    a\", \"e\", \"i\", \"o\", \"u\");\n\t$chars = str_split($word);\n\t$len = count($chars);\n\
    \t$cnt = 0;\n\t$pivot = 0;\n\t$next_consonant = 0;\n\t$current_consonant = 0;\n\
    \t$closest_vowel = 0;\n\t$vowel_distance = 0;\n\twhile ($cnt < $len) {\n\t\tif\
    \ (in_array($chars[$cnt], $vowels)) {\n\t\t\t$pivot = $cnt;\n\t\t\t$next_consonant\
    \ = $cnt + 1;\n\t\t\t$current_consonant = $cnt - 1;\n\t\t\twhile ($next_consonant\
    \ < $len) {\n\t\t\t\tif (!in_array($chars[$next_consonant], $vowels)) {\n\t\t\t\
    \t\tbreak;\n\t\t\t\t}\n\t\t\t\t$next_consonant++;\n\t\t\t}\n\t\t\twhile ($current_consonant\
    \ >= 0) {\n\t\t\t\tif (!in_array($chars[$current_consonant], $vowels)) {\n\t\t\
    \t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t$current_consonant--;\n\t\t\t}\n\t\t\tif ($current_consonant\
    \ >= 0) {\n\t\t\t\t$vowel_distance = $pivot - $current_consonant;\n\t\t\t\tif\
    \ ($closest_vowel == 0) {\n\t\t\t\t\t$closest_vowel = $chars[$pivot];\n\t\t\t\t\
    } else {\n\t\t\t\t\tif ($vowel_distance < $closest_vowel) {\n\t\t\t\t\t\t$closest_vowel\
    \ = $chars[$pivot];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$cnt++;\n\t}\n\
    \treturn $closest_vowel", "\t// Read thru the words & find the first instance\
    \ of a consonant.\n\t// Keep track of where the vowels are.\n\t// Re-read thru\
    \ the words & find the first instance of a consonant.\n\t// if (strstr($word,\
    \ 'A') || strstr($word, 'E') || strstr($word, 'I') || strstr($word, 'O') || strstr($word,\
    \ 'U')) {\n\t// \t$vowel = true;\n\t// } else {\n\t// \t$vowel = false;\n\t//\
    \ }\n\t$vowels = array(\"A\", \"E\", \"I\", \"O\", \"U\");\n\t$consonants = array(\"\
    B\", \"C\", \"D\", \"F\", \"G\", \"H\", \"J\", \"K\", \"L\", \"M\", \"N\", \"\
    P\", \"Q\", \"R\", \"S\", \"T\", \"V\", \"W\", \"X\", \"Y\", \"Z\");\n\t$vowel_pos\
    \ = array();\n\t$consonant_pos = array();\n\t$str_arr = str_split($word);\n\t\
    for ($i = 0; $i < count($str_arr); $i++) {\n\t\tif (in_array($str_arr[$i], $vowels))\
    \ {\n\t\t\tarray_push($vowel_pos, $i);\n\t\t} elseif (in_array($str_arr[$i], $consonants))\
    \ {\n\t\t\tarray_push($consonant_pos, $i);\n\t\t}\n\t}\n\tif (count($vowel_pos)\
    \ <= 1) {\n\t\treturn \"\";\n\t}\n\t$num = 0;\n\tfor ($x = 0; $x < count($vowel_pos);\
    \ $x++) {\n\t\tif ($num < $vowel_pos[$x]) {\n\t\t\t$num = $vowel_pos[$x];\n\t\t\
    }\n\t}\n\t$final_vowel = $num;\n\t$num = 0;\n\tfor ($y = 0; $y < count($consonant_pos);\
    \ $y++) {\n\t\t", "    $idx = strlen($word) - 1;\n    $vowels = \"aeiouAEIOU\"\
    ;\n    $vowel = \"\";\n    $found = false;\n    while ($idx > 1) {\n        if\
    \ (strpos($vowels, $word[$idx]) !== false) {\n            if (strpos($vowels,\
    \ $word[$idx - 1]) === false) {\n                $vowel = $word[$idx];\n     \
    \           $found = true;\n                break;\n            }\n        }\n\
    \        $idx -= 1;\n    }\n    if ($found) {\n        return $vowel;\n    } else\
    \ {\n        return \"\";\n    }\n}", "    $vowels = [\n        'a', 'e', 'i',\
    \ 'o', 'u',\n        'A', 'E', 'I', 'O', 'U'\n    ];\n    $consonants = [\n  \
    \      'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's',\
    \ 't', 'v', 'w', 'x', 'y', 'z',\n        'B', 'C', 'D', 'F', 'G', 'H', 'J', 'K',\
    \ 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V', 'W', 'X', 'Y', 'Z'\n    ];\n  \
    \  $is_vowel = function($c) use ($vowels) {\n        return in_array($c, $vowels);\n\
    \    };\n    $is_consonant = function($c) use ($consonants) {\n        return\
    \ in_array($c, $consonants);\n    };\n    $last_consonant = -1;\n    $last_vowel\
    \ = -1;\n    for ($i = strlen($word) - 1; $i >= 0; $i--) {\n        $c = $word[$i];\n\
    \        if ($is_vowel($c)) {\n            $last_vowel = $i;\n        } else if\
    \ ($is_consonant($c)) {\n            $last_consonant = $i;\n        }\n      \
    \  if ($last_consonant != -1 && $last_vowel != -1) {\n            if ($last_consonant\
    \ < $last_vowel) {\n                return $word[$last_vowel];\n            }\n\
    \        }\n    }\n    return '';\n}\n\necho get_closest_vowel(\"yogurt\") . \"\
    \\n\";\necho get_closest_vowel(\"FULL\") . \"\\n\";\necho get_closest_vowel(\"\
    quick\") . \"\\n\";\necho get_closest_v", "    $vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"];\n    $word_to_array = str_split($word);\n    $closest_vowel =\
    \ \"\";\n    $closest_vowel_index = 0;\n    $current_consonant_index = 0;\n  \
    \  $closest_vowel_found = false;\n    $word_to_array_length = count($word_to_array);\n\
    \    // start from the end\n    for ($i = ($word_to_array_length - 1); $i >= 0;\
    \ $i--) {\n        // if the character is a vowel\n        if (in_array($word_to_array[$i],\
    \ $vowels)) {\n            // if there's no consonant to the left\n          \
    \  if ($i === 0) {\n                break;\n            }\n            // if there's\
    \ a consonant to the left\n            else {\n                // closest vowel\
    \ found\n                $closest_vowel_found = true;\n                // get\
    \ the current vowel index\n                $closest_vowel_index = $i;\n      \
    \          // get the current consonant index\n                $current_consonant_index\
    \ = $i - 1;\n                // break the loop\n                break;\n     \
    \       }\n        }\n    }\n    // if closest vowel is found\n    if ($closest_vowel_found)\
    \ {\n        // check if there's a consonant to the right\n        // if yes\n\
    \        if ($closest_vowel_index !== ($word_to_array_length - 1)) {\n       \
    \     // loop through the remaining characters\n            for ($i = ($closest_vowel_index\
    \ + 1); $i < $word_to_array_length; $i++) {\n                // if the character\
    \ is a consonant\n                if (!in_array($word_to_array[$i], $vowels))\
    \ {\n                    // get the current consonant index\n                \
    \    $current_consonant_index = $i;\n                    // break the loop\n \
    \                   break;\n                }\n            }\n        }\n    \
    \    // if the current consonant index is greater than the current", "\t$arr =\
    \ str_split($word);\n\t$length = count($arr);\n\tfor ($i=$length-1; $i > 0; $i--)\
    \ { \n\t\tif (preg_match('/[aeiou]/', $arr[$i]) && !preg_match('/[aeiou]/', $arr[$i-1]))\
    \ {\n\t\t\treturn $arr[$i];\n\t\t}\n\t}\n\treturn \"\";\n}", "\t$rword = strrev($word);\n\
    \t$vowels = 'aeiou';\n\t$len = strlen($rword);\n\t$result = '';\n\tfor ($i = 0;\
    \ $i < $len; $i++) {\n\t\tif (stripos($vowels, $rword[$i]) !== false) {\n\t\t\t\
    $result = $rword[$i];\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn $result;\n}", "    $vowels\
    \ = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    $chars = str_split($word);\n   \
    \ $result = \"\";\n    for ($i = count($chars) - 1; $i >= 0; $i--) {\n       \
    \ if (in_array($chars[$i], $vowels)) {\n            $result = $chars[$i];\n  \
    \          break;\n        }\n    }\n    return $result;\n}\n", "    $vowels =\
    \ array(\"a\", \"e\", \"i\", \"o\", \"u\");\n    $consonants = array(\"b\", \"\
    c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"n\", \"p\", \"\
    q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\");\n    $word = str_split($word);\n\
    \    $c_flag = true;\n    $v_flag = true;\n    $i = 0;\n    $length = count($word);\n\
    \    while ($i < $length) {\n        $char = $word[$i];\n        if (!in_array($char,\
    \ $vowels) && $c_flag) {\n            $c_flag = false;\n        }\n        if\
    \ (in_array($char, $vowels) && !$c_flag && $v_flag) {\n            $v_flag = false;\n\
    \            return $char;\n        }\n        if (in_array($char, $consonants)\
    \ && !$c_flag && !$v_flag) {\n            return \"\";\n        }\n        $i++;\n\
    \    }\n    return \"\";\n}\n", "    $consonants = array('b', 'c', 'd', 'f', 'g',\
    \ 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z');\n\
    \    $vowels = array('a', 'e', 'i', 'o', 'u');\n    $arr = str_split($word);\n\
    \    $rev_arr = array_reverse($arr);\n    $new_arr = array();\n    foreach ($rev_arr\
    \ as $k => $value) {\n        foreach ($consonants as $consonant) {\n        \
    \    if ($value == $consonant) {\n                $new_arr[] = $value;\n     \
    \       }\n        }\n    }\n    $rev_arr = array_reverse($new_arr);\n    foreach\
    \ ($rev_arr as $k => $value) {\n        foreach ($vowels as $vowel) {\n      \
    \      if ($value == $vowel) {\n                return $value;\n            }\n\
    \        }\n    }\n    return '';\n}", "\t// Enter code here\n\t// $find_conso\
    \ = preg_match_all('/([B-DF-HJ-NP-TV-Z][a-z]*[aeiou]?[a-z]*[BCDFGHJKLMNPQRSTVWXYZ])|([BCDFGHJKLMNPQRSTVWXYZ][a-z]*[aeiou]?[a-z]*[B-DF-HJ-NP-TV-Z])/',$word,$result);\n\
    \t// for($i=0;$i<count($result[0]);$i++){\n\t// \tif(preg_match('/[a-z]*[aeiou][a-z]*[BCDFGHJKLMNPQRSTVWXYZ]/',$result[0][$i],$result2)){\n\
    \t// \t\t$result3 = preg_match('/[aeiou]/',$result2[0],$result4);\n\t// \t\t$found\
    \ = $result4[0];\n\t// \t\tbreak;\n\t// \t}\n\t// }\n\t// if(isset($found))\n\t\
    // \treturn $found;\n\t// else\n\t// \treturn '';\n\t$vowels = [\"a\", \"e\",\
    \ \"i\", \"o\", \"u\"];\n\t$result = [];\n\t$end = count($word) - 1;\n\t$count\
    \ = 0;\n\tif($end < 2)\n\t\treturn '';\n\tif(in_array($word[$end], $vowels))\n\
    \t\t$end = $end - 1;\n\tfor($i=$end;$i>0;$i--){\n\t\tif(in_array($word[$i], $vowels)){\n\
    \t\t\tif(!in_array($word[$i+1], $vowels) && !in_array($word[$i-1], $vowels)){\n\
    \t\t\t\tarray_push($result, $word[$i]);\n\t\t\t\t$count++;\n\t\t\t}\n\t\t}\n\t\
    }\n\tif", "    if (empty($word)) return \"\";\n    $vowels = [\"a\", \"e\", \"\
    i\", \"o\", \"u\"];\n    $is_previous_vowel = false;\n    $is_previous_consonant\
    \ = false;\n    $closest_vowel = \"\";\n    for ($i = strlen($word) - 1; $i >=\
    \ 0; $i--) {\n        $current_char = $word[$i];\n        if (in_array($current_char,\
    \ $vowels)) {\n            $is_previous_vowel = true;\n            $closest_vowel\
    \ = $current_char;\n        } else {\n            if ($is_previous_vowel && !$is_previous_consonant)\
    \ {\n                return $closest_vowel;\n            }\n            $is_previous_consonant\
    \ = true;\n        }\n    }\n    return \"\";\n}\n", "\t$vowels = ['a', 'e', 'i',\
    \ 'o', 'u'];\n\t$count = strlen($word);\n\t$result = '';\n\t$prev_char = '';\n\
    \tfor ($i = $count - 1; $i >= 0; $i--) {\n\t\t$char = $word[$i];\n\t\tif (in_array($char,\
    \ $vowels)) {\n\t\t\tif ($prev_char && !in_array($prev_char, $vowels)) {\n\t\t\
    \t\t$result = $char;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t$prev_char = $char;\n\
    \t}\n\treturn $result;\n}\n\necho get_closest_vowel(\"yogurt\") . PHP_EOL;\necho\
    \ get_closest_vowel(\"FULL\") . PHP_EOL;\necho get_closest_vowel(\"quick\") .\
    \ PHP_EOL;\necho get_closest_vowel(\"ab\") . PHP_EOL;", "\t$vowels = array('a',\
    \ 'e', 'i', 'o', 'u');\n\t$len = strlen($word);\n\t$result = '';\n\tfor ($i =\
    \ $len - 1; $i >= 0; $i--) {\n\t\t$char = $word[$i];\n\t\tif ($char == 'y') {\n\
    \t\t\t$result = 'y';\n\t\t\tbreak;\n\t\t} else if (in_array($char, $vowels)) {\n\
    \t\t\tif ($i > 0 && in_array($word[$i - 1], $vowels)) {\n\t\t\t\tcontinue;\n\t\
    \t\t} else if ($i < $len - 1 && in_array($word[$i + 1], $vowels)) {\n\t\t\t\t\
    continue;\n\t\t\t} else {\n\t\t\t\t$result = $char;\n\t\t\t\tbreak;\n\t\t\t}\n\
    \t\t}\n\t}\n\treturn $result;\n}\n\n$word = 'yogurt';\necho get_closest_vowel($word)\
    \ . PHP_EOL;\n$word = 'FULL';\necho get_closest_vowel($word) . PHP_EOL;\n$word\
    \ = 'quick';\necho get_closest_vowel($word) . PHP_EOL;\n$word = 'ab';\necho get_closest_vowel($word)\
    \ . PHP_EOL;\n$word = 'aeio';\necho get_closest_vowel($word) . PHP_EOL;\n$word\
    \ = 'eioa';\necho get_closest_vowel($word) . PHP_EOL;\n$word = 'a';\necho get_closest_vowel($word)\
    \ . PHP_EOL;\n$word = 'y';\necho get_closest_vowel($word) . PHP_EOL;\n$word =\
    \ 'yay';\necho get_closest_vowel($word) . PHP_EOL;\n$word = 'ay';\necho get_closest_vowel($word)\
    \ . PHP_", "    $reversed_word = strrev($word);\n    $last_vowel = '';\n    for\
    \ ($i = 0; $i < strlen($reversed_word); $i++) {\n        if (is_vowel($reversed_word[$i]))\
    \ {\n            $last_vowel = $reversed_word[$i];\n            break;\n     \
    \   }\n    }\n    $result = '';\n    if ($last_vowel) {\n        $last_consonant\
    \ = '';\n        for ($i = strpos($reversed_word, $last_vowel) + 1; $i < strlen($reversed_word);\
    \ $i++) {\n            if (!is_vowel($reversed_word[$i])) {\n                $last_consonant\
    \ = $reversed_word[$i];\n                break;\n            }\n        }\n  \
    \      if ($last_consonant) {\n            $result = $last_vowel;\n        }\n\
    \    }\n    return strrev($result);\n}\n", "    $vowels = ['a', 'e', 'i', 'o',\
    \ 'u'];\n    $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm',\
    \ 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n    $word_array = str_split($word);\n\
    \    $reverse_word_array = array_reverse($word_array);\n    for ($i = 0; $i <\
    \ count($reverse_word_array); $i++) {\n        if (in_array($reverse_word_array[$i],\
    \ $vowels)) {\n            if (in_array($reverse_word_array[$i + 1], $consonants)\
    \ && in_array($reverse_word_array[$i - 1], $consonants)) {\n                return\
    \ $reverse_word_array[$i];\n            }\n        }\n    }\n    return '';\n\
    }\n", "\t$vowels = ['a', 'e', 'i', 'o', 'u'];\n\t$last_char = substr($word, -1);\n\
    \t$consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q',\
    \ 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n\t$consonants_regex = '/[' . implode('',\
    \ $consonants) . ']/';\n\t$consonants_number = preg_match_all($consonants_regex,\
    \ $word);\n\tif (in_array($last_char, $vowels)) {\n\t\treturn '';\n\t}\n\t$result\
    \ = '';\n\t$previous_char = '';\n\t$actual_char = '';\n\tfor ($i = strlen($word)\
    \ - 1; $i >= 0; $i--) {\n\t\t$actual_char = substr($word, $i, 1);\n\t\tif (in_array($actual_char,\
    \ $vowels)) {\n\t\t\tif (in_array($previous_char, $consonants)) {\n\t\t\t\tif\
    \ ($consonants_number > 1) {\n\t\t\t\t\treturn $actual_char;\n\t\t\t\t}\n\t\t\t\
    }\n\t\t}\n\t\t$previous_char = $actual_char;\n\t}\n\treturn $result;\n}\n", " \
    \   $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $word = strtolower($word);\n   \
    \ $word = str_split($word);\n    $count = count($word);\n    for ($i = $count\
    \ - 1; $i >= 0; $i--) {\n        if (!in_array($word[$i], $vowels)) {\n      \
    \      $first_consonant = $i;\n            break;\n        }\n    }\n    for ($i\
    \ = $first_consonant - 1; $i >= 0; $i--) {\n        if (in_array($word[$i], $vowels))\
    \ {\n            $first_vowel = $i;\n            break;\n        }\n    }\n  \
    \  if (isset($first_vowel)) {\n        for ($i = $first_consonant + 1; $i < $count;\
    \ $i++) {\n            if (in_array($word[$i], $vowels)) {\n                $second_vowel\
    \ = $i;\n                break;\n            }\n        }\n        if (isset($second_vowel))\
    \ {\n            if ($first_consonant - $first_vowel > $second_vowel - $first_consonant)\
    \ {\n                return $word[$second_vowel];\n            } else {\n    \
    \            return $word[$first_vowel];\n            }\n        } else {\n  \
    \          return $word[$first_vowel];\n        }\n    } else {\n        return\
    \ '';\n    }\n}\n", "\t$vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\t$consonants\
    \ = [\"b\", \"c\", \"d\", \"f\", \"g\", \"h\", \"j\", \"k\", \"l\", \"m\", \"\
    n\", \"p\", \"q\", \"r\", \"s\", \"t\", \"v\", \"w\", \"x\", \"y\", \"z\"];\n\t\
    $word = str_split($word);\n\t$word_length = count($word);\n\tfor ($i = $word_length\
    \ - 1; $i >= 0; $i--) {\n\t\tif (in_array($word[$i], $vowels)) {\n\t\t\t$last_vowel\
    \ = $i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor ($i = $last_vowel - 1; $i >= 0; $i--)\
    \ {\n\t\tif (in_array($word[$i], $consonants)) {\n\t\t\t$last_con = $i;\n\t\t\t\
    break;\n\t\t}\n\t}\n\tif ($last_con === 0) {\n\t\treturn \"\";\n\t}\n\tfor ($i\
    \ = $last_con - 1; $i >= 0; $i--) {\n\t\tif (in_array($word[$i], $consonants))\
    \ {\n\t\t\t$second_con = $i;\n\t\t\tbreak;\n\t\t}\n\t}\n\tif ($second_con ===\
    \ 0) {\n\t\treturn \"\";\n\t}\n\treturn $word[$last_vowel];\n}\n\necho get_closest_vowel(\"\
    yogurt\");\necho get_closest_vowel(\"FULL\");\necho get_closest_vowel(\"quick\"\
    );\necho get_closest_vowel(\"ab\");\n", "\t$vowels = array('a', 'e', 'i', 'o',\
    \ 'u');\n\t$vowel_keys = array_flip($vowels);\n\t$chars = str_split($word);\n\t\
    $reverse_chars = array_reverse($chars);\n\tfor ($i = 0; $i < count($reverse_chars);\
    \ $i++) {\n\t\tif ($i == 0) {\n\t\t\tif (isset($vowel_keys[$reverse_chars[$i]]))\
    \ {\n\t\t\t\treturn $reverse_chars[$i];\n\t\t\t}\n\t\t} else {\n\t\t\tif (!isset($vowel_keys[$reverse_chars[$i]])\
    \ && isset($vowel_keys[$reverse_chars[$i - 1]])) {\n\t\t\t\treturn $reverse_chars[$i\
    \ - 1];\n\t\t\t}\n\t\t}\n\t}\n\treturn '';\n}\n\nvar_dump(get_closest_vowel(\"\
    yogurt\"));\necho \"\\n\";\nvar_dump(get_closest_vowel(\"FULL\"));\necho \"\\\
    n\";\nvar_dump(get_closest_vowel(\"quick\"));\necho \"\\n\";\nvar_dump(get_closest_vowel(\"\
    ab\"));\necho \"\\n\";", "    if(empty($word)) return '';\n    $vowels = array('a',\
    \ 'e', 'i', 'o', 'u');\n    $consonants = array('b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z');\n\
    \    for($i = strlen($word) - 1; $i >= 0; $i--) {\n        if(in_array($word[$i],\
    \ $vowels)) {\n            if($i >= 1 && in_array($word[$i - 1], $consonants))\
    \ {\n                if($i >= 2 && in_array($word[$i - 2], $consonants)) {\n \
    \                   return $word[$i];\n                }\n            }\n    \
    \    }\n    }\n    return '';\n}\n\necho get_closest_vowel(\"yogurt\").'<br>';\n\
    echo get_closest_vowel(\"FULL\").'<br>';\necho get_closest_vowel(\"quick\").'<br>';\n\
    echo get_closest_vowel(\"ab\").'<br>';", "    $vowels = ['a', 'e', 'i', 'o', 'u'];\n\
    \    $count_consonants = 0;\n    $count_vowels = 0;\n    $result = '';\n    $len\
    \ = strlen($word);\n    for ($i = 0; $i < $len; $i++) {\n        if (in_array($word[$i],\
    \ $vowels)) {\n            $count_vowels++;\n            if ($count_consonants\
    \ >= 2) {\n                $result = $word[$i];\n                break;\n    \
    \        }\n        } else {\n            $count_consonants++;\n        }\n  \
    \  }\n    return $result;\n}\necho get_closest_vowel(\"yogurt\") . \"\\n\"; //\
    \ \"u\"\necho get_closest_vowel(\"FULL\") . \"\\n\"; // \"U\"\necho get_closest_vowel(\"\
    quick\") . \"\\n\"; // \"\"\necho get_closest_vowel(\"ab\") . \"\\n\"; // \"\"",
  "    $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\");\n    $index = strlen($word)\
    \ - 1;\n    $vowel_index = false;\n    $consonant_index = false;\n    while ($index\
    \ >= 0) {\n        $char = $word[$index];\n        if (in_array($char, $vowels))\
    \ {\n            $vowel_index = $index;\n        } else {\n            $consonant_index\
    \ = $index;\n        }\n        if ($vowel_index && $consonant_index) {\n    \
    \        return $word[$vowel_index];\n        }\n        $index--;\n    }\n  \
    \  return \"\";\n}\n", "\t$vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n\t$word\
    \ = strtolower($word);\n\t$wordArray = str_split($word);\n\t$wordLength = count($wordArray);\n\
    \t$result = \"\";\n\tfor ($i = $wordLength - 1; $i > 0; $i--) {\n\t\t$test1 =\
    \ $wordArray[$i - 1];\n\t\t$test2 = $wordArray[$i];\n\t\tif ((in_array($test1,\
    \ $vowels) && !in_array($test2, $vowels)) || (!in_array($test1, $vowels) && in_array($test2,\
    \ $vowels))) {\n\t\t\t$result = $test2;\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn $result;\n\
    }", "    // loop through word starting from right\n    for ($i = strlen($word)\
    \ - 1; $i >= 0; $i--) {\n        // if char at i is a vowel\n        if (preg_match('/[AEIOU]/',\
    \ $word[$i])) {\n            // check if preceding char is not a vowel\n     \
    \       if (!preg_match('/[AEIOU]/', $word[$i - 1])) {\n                // check\
    \ if following char is not a vowel\n                if (!preg_match('/[AEIOU]/',\
    \ $word[$i + 1])) {\n                    // if vowel is between 2 consonants,\
    \ return vowel\n                    return $word[$i];\n                }\n   \
    \         }\n        }\n    }\n    // if there are no 2 consonants adjacent to\
    \ a vowel, return empty string\n    return '';\n}\necho get_closest_vowel(\"yogurt\"\
    ) . PHP_EOL; // \"u\"\necho get_closest_vowel(\"FULL\") . PHP_EOL; // \"U\"\n\
    echo get_closest_vowel(\"quick\") . PHP_EOL; // \"\"\necho get_closest_vowel(\"\
    ab\") . PHP_EOL; // \"\"", "    $vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"];\n \
    \   $word = strtolower($word);\n    $len = strlen($word);\n    if ($len < 2) return\
    \ \"\";\n    for ($i = $len - 1; $i > 0; $i--) {\n        if (!in_array($word[$i],\
    \ $vowels)) {\n            if (in_array($word[$i-1], $vowels)) {\n           \
    \     return $word[$i-1];\n            }\n        }\n    }\n    return \"\";\n\
    }\n", "    \n}\n", "\t$word = strtolower($word);\n\t$word_array = str_split($word);\n\
    \t$vowels = array('a', 'e', 'i', 'o', 'u');\n\t$consonants = array('b', 'c', 'd',\
    \ 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x',\
    \ 'y', 'z');\n\t$vowel_array = array();\n\t$consonant_array = array();\n\t$position_array\
    \ = array();\n\t$count = count($word_array);\n\t$result = \"\";\n\tif ($count\
    \ < 3) {\n\t\t$result = \"\";\n\t} else {\n\t\tfor ($i = 0; $i < $count; $i++)\
    \ {\n\t\t\tif (in_array($word_array[$i], $vowels)) {\n\t\t\t\tarray_push($vowel_array,\
    \ $word_array[$i]);\n\t\t\t\tarray_push($position_array, $i);\n\t\t\t} else if\
    \ (in_array($word_array[$i], $consonants)) {\n\t\t\t\tarray_push($consonant_array,\
    \ $word_array[$i]);\n\t\t\t}\n\t\t}\n\t\t$vowel_count = count($vowel_array);\n\
    \t\t$consonant_count = count($consonant_array);\n\t\t$final_array = array();\n\
    \t\tif ($vowel_count > 0 && $consonant_count > 1) {\n\t\t\tfor ($i = 0; $i < $vowel_count;\
    \ $i++) {\n\t\t\t\tfor ($j = 0; $j < $consonant_count; $j++) {\n\t\t\t\t\tif ($position_array[$i]\
    \ > $j) {\n\t\t\t\t\t\tarray_push($final_array, $vowel_array[$i]);\n\t\t\t\t\t\
    }\n\t\t\t\t}\n\t\t\t}\n\t\t", "    $word = strrev($word);\n    $vowels = array(\"\
    a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", \"I\", \"O\", \"U\");\n    for\
    \ ($i = 0; $i < strlen($word); $i++) {\n        if (in_array($word[$i], $vowels))\
    \ {\n            return $word[$i];\n        }\n    }\n    return \"\";\n}\n\n\
    $word = \"quick\";\necho get_closest_vowel($word);", "    \n    $vowels = \"aeiou\"\
    ;\n    $consonants = \"bcdfghjklmnpqrstvwxyz\";\n    $vowel_index = 0;\n    $consonant_index\
    \ = 0;\n    $i = 0;\n    $found = false;\n    $result = \"\";\n    $len = strlen($word);\n\
    \    while ($i < $len && !$found) {\n        $c = $word[$len - $i - 1];\n    \
    \    if (strpos($vowels, $c) !== false) {\n            $vowel_index = $len - $i\
    \ - 1;\n        } else if (strpos($consonants, $c) !== false) {\n            $consonant_index\
    \ = $len - $i - 1;\n            if ($vowel_index != 0) {\n                $found\
    \ = true;\n            }\n        }\n        $i += 1;\n    }\n    if ($found)\
    \ {\n        $result = $word[$vowel_index];\n    }\n    return $result;\n}\n",
  "    if(strlen($word)<3) {\n        return '';\n    }\n    $vowels = ['a', 'e',\
    \ 'i', 'o', 'u'];\n    $r_vowels = array_reverse($vowels);\n    $r_word = strrev($word);\n\
    \    foreach($r_word as $r_i => $r_char) {\n        if(in_array($r_char, $r_vowels))\
    \ {\n            $r_vowel_pos = $r_i;\n            break;\n        }\n    }\n\
    \    if(!isset($r_vowel_pos)) {\n        return '';\n    }\n    for($i=$r_vowel_pos;\
    \ $i<strlen($r_word); $i++) {\n        if(!in_array($r_word[$i], $vowels)) {\n\
    \            $r_consonant_pos = $i;\n            break;\n        }\n    }\n  \
    \  if(!isset($r_consonant_pos)) {\n        return '';\n    }\n    return $r_word[$r_vowel_pos];\n\
    }\n\nprint_r(get_closest_vowel(\"yogurt\"));\nprint_r(get_closest_vowel(\"FULL\"\
    ));\nprint_r(get_closest_vowel(\"quick\"));\nprint_r(get_closest_vowel(\"ab\"\
    ));", "\t$start = strlen($word) - 1;\n\twhile(!in_array($word[$start], [\"a\"\
    , \"e\", \"i\", \"o\", \"u\"]) && $start >= 0) $start--;\n\tif($start == 0) return\
    \ \"\";\n\t$start--;\n\twhile(!in_array($word[$start], [\"a\", \"e\", \"i\", \"\
    o\", \"u\"]) && $start >= 0) $start--;\n\tif($start == 0) return \"\";\n\treturn\
    \ $word[$start+1];\n}\necho get_closest_vowel(\"yogurt\") . \"\\n\";\necho get_closest_vowel(\"\
    FULL\") . \"\\n\";\necho get_closest_vowel(\"quick\") . \"\\n\";\necho get_closest_vowel(\"\
    ab\") . \"\\n\";", "\t$vowels = ['a', 'i', 'u', 'e', 'o'];\n\t$consonants = ['b',\
    \ 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v',\
    \ 'w', 'x', 'y', 'z'];\n\t$words = str_split($word);\n\t$start = false;\n\t$end\
    \ = false;\n\t$first = false;\n\t$last = false;\n\t$result = [];\n\tforeach ($words\
    \ as $i => $w) {\n\t\tif ($i == 0) {\n\t\t\tif (in_array($w, $vowels)) {\n\t\t\
    \t\t$start = true;\n\t\t\t\t$first = $w;\n\t\t\t}\n\t\t}\n\t\tif ($i == count($words)\
    \ - 1) {\n\t\t\tif (in_array($w, $vowels)) {\n\t\t\t\t$end = true;\n\t\t\t\t$last\
    \ = $w;\n\t\t\t}\n\t\t}\n\t\tif ($i != 0 && $i != count($words) - 1) {\n\t\t\t\
    if (in_array($w, $vowels)) {\n\t\t\t\t$result[] = $w;\n\t\t\t}\n\t\t}\n\t}\n\t\
    if ($start && $end) {\n\t\treturn '';\n\t}\n\tif ($start) {\n\t\tif (count($result)\
    \ == 0) {\n\t\t\treturn '';\n\t\t}\n\t\tif (count($result) == 1) {\n\t\t\treturn\
    \ $result[0];\n\t\t}\n\t\t$result = array_reverse($result);\n\t\treturn $result[0];\n\
    \t}\n\tif ($end) {\n\t\tif (count($result) == 0) {\n\t\t\treturn '';\n\t\t}\n\t\
    \tif (count($result) == 1) {\n\t\t\treturn $result[0];\n\t\t}\n\t\treturn $result[0];\n\
    \t}\n\tif (count", "\t$nums = str_split($word);\n\t$vowels = array(\"a\", \"e\"\
    , \"i\", \"o\", \"u\");\n\t$length = count($nums);\n\t$m = false;\n\t$m_index\
    \ = false;\n\t$first_cons = false;\n\t$counter = 0;\n\tfor ($i = ($length - 1);\
    \ $i >= 0; $i--) {\n\t\tif (in_array($nums[$i], $vowels)) {\n\t\t\tif ($counter\
    \ == 1) {\n\t\t\t\t$m = $nums[$i];\n\t\t\t\t$m_index = $i;\n\t\t\t\tbreak;\n\t\
    \t\t}\n\t\t\telse {\n\t\t\t\t$counter = 0;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t\
    if ($counter == 0) {\n\t\t\t\t$first_cons = $nums[$i];\n\t\t\t}\n\t\t\t$counter\
    \ += 1;\n\t\t}\n\t}\n\tif ($m) {\n\t\treturn $m;\n\t}\n\telse {\n\t\treturn \"\
    \";\n\t}\n}\nprint get_closest_vowel(\"yogurt\") . \"\\n\";\nprint get_closest_vowel(\"\
    FULL\") . \"\\n\";\nprint get_closest_vowel(\"quick\") . \"\\n\";\nprint get_closest_vowel(\"\
    ab\") . \"\\n\";", "    $vowels = \"aeiou\";\n    $is_last_char_consonant = !strpos($vowels,\
    \ $word[strlen($word) - 1]);\n    $is_first_char_consonant = !strpos($vowels,\
    \ $word[0]);\n    $vowel_positions = [];\n    if ($is_last_char_consonant && $is_first_char_consonant)\
    \ {\n        for ($i = 0; $i < strlen($word); $i++) {\n            if (strpos($vowels,\
    \ $word[$i]) !== false) {\n                $vowel_positions[] = $i;\n        \
    \    }\n        }\n        if (count($vowel_positions) > 0) {\n            $closest_vowel_index\
    \ = $vowel_positions[0];\n            $smallest_index_diff = abs($vowel_positions[0]\
    \ - (strlen($word) - 1));\n            for ($i = 1; $i < count($vowel_positions);\
    \ $i++) {\n                $current_index_diff = abs($vowel_positions[$i] - (strlen($word)\
    \ - 1));\n                if ($current_index_diff < $smallest_index_diff) {\n\
    \                    $smallest_index_diff = $current_index_diff;\n           \
    \         $closest_vowel_index = $vowel_positions[$i];\n                }\n  \
    \          }\n            return $word[$closest_vowel_index];\n        }\n   \
    \ }\n    return \"\";\n}\n", "  // Write your code here\n  $vowels = ['a', 'e',\
    \ 'i', 'o', 'u'];\n  $prev = '';\n  $next = '';\n  $closest = '';\n  for ($i =\
    \ strlen($word) - 1; $i >= 0; $i--) {\n    if (in_array($word[$i], $vowels)) {\n\
    \      $closest = $word[$i];\n      if ($prev && $next) {\n        break;\n  \
    \    }\n    } else {\n      if ($closest) {\n        $prev = $word[$i];\n    \
    \  } else {\n        $next = $word[$i];\n      }\n    }\n  }\n  return $prev &&\
    \ $next ? $closest : '';\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
