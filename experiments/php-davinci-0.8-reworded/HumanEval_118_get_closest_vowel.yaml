name: HumanEval_118_get_closest_vowel
language: php
prompt: "<?php\n// You are given a word. Your task is to find the closest vowel that\
  \ stands between \n// two consonants from the right side of the word (case sensitive).\n\
  // Vowels in the beginning and ending doesn't count. Return empty string if you\
  \ didn't\n// find any vowel met the above condition. \n// You may assume that the\
  \ given string contains English letter only.\n// Example:\n// >>> get_closest_vowel(\"\
  yogurt\")\n// \"u\"\n// >>> get_closest_vowel(\"FULL\")\n// \"U\"\n// >>> get_closest_vowel(\"\
  quick\")\n// \"\"\n// >>> get_closest_vowel(\"ab\")\n// \"\"\nfunction get_closest_vowel($word)\
  \ {\n"
tests: "function candidate(...$args) {\n    return get_closest_vowel(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(\"yogurt\") !== \"u\") { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(\"full\") !== \"u\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"easy\") !== \"\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"eAsy\") !== \"\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"ali\") !== \"\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"bad\") !== \"a\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"most\") !== \"o\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"ab\") !== \"\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"ba\") !== \"\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"quick\") !== \"\") { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(\"anime\") !== \"i\") {\
  \ throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Asia\") !== \"\"\
  ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"Above\") !== \"\
  o\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $vowels = \"aeiouAEIOU\";\n    for ($i = strlen($word) - 1; $i\
    \ >= 0; $i--) {\n        $char = $word[$i];\n        if (strpos($vowels, $char)\
    \ !== false) {\n            return $char;\n        }\n    }\n    return \"\";\n\
    }\n\necho get_closest_vowel(\"yogurt\");\necho \"\\n\";\necho get_closest_vowel(\"\
    FULL\");\necho \"\\n\";\necho get_closest_vowel(\"quick\");\necho \"\\n\";\necho\
    \ get_closest_vowel(\"ab\");\necho \"\\n\";", "    $vowels = [\"a\",\"e\",\"i\"\
    ,\"o\",\"u\"];\n    $check = false;\n    for ($i=strlen($word)-1; $i > 0; $i--)\
    \ { \n        if (in_array($word[$i], $vowels)) {\n            if ($check) {\n\
    \                return $word[$i];\n            }\n        } else {\n        \
    \    $check = true;\n        }\n    }\n    return \"\";\n}\nprint_r(get_closest_vowel(\"\
    yogurt\").\"\\n\");\nprint_r(get_closest_vowel(\"FULL\").\"\\n\");\nprint_r(get_closest_vowel(\"\
    quick\").\"\\n\");\nprint_r(get_closest_vowel(\"ab\").\"\\n\");", "    $vowels\
    \ = ['a', 'e', 'i', 'o', 'u'];\n    $reversed_word = strrev($word);\n    $closest_vowel\
    \ = '';\n    $flag = false;\n    for ($i = 0; $i < strlen($reversed_word); $i++)\
    \ {\n        if (in_array($reversed_word[$i], $vowels)) {\n            if (!$flag)\
    \ {\n                $closest_vowel = $reversed_word[$i];\n                $flag\
    \ = true;\n            }\n        } else {\n            if ($flag) {\n       \
    \         return strrev($closest_vowel);\n            }\n        }\n    }\n  \
    \  return '';\n}\n\nvar_dump(get_closest_vowel(\"yogurt\"));\nvar_dump(get_closest_vowel(\"\
    FULL\"));\nvar_dump(get_closest_vowel(\"quick\"));\nvar_dump(get_closest_vowel(\"\
    ab\"));", "    $vowels = \"aeiouAEIOU\";\n    $vowel_array = str_split($vowels);\n\
    \    $word_array = str_split($word);\n    $vowel_index = '';\n    $consonant_index\
    \ = '';\n    foreach($word_array as $key => $value) {\n        if(in_array($value,\
    \ $vowel_array)) {\n            $vowel_index = $key;\n            break;\n   \
    \     }\n    }\n    if($vowel_index === '') {\n        return \"\";\n    }\n \
    \   $consonant_index = $vowel_index;\n    while($consonant_index >= 0) {\n   \
    \     if(!in_array($word_array[$consonant_index], $vowel_array)) {\n         \
    \   break;\n        }\n        $consonant_index -= 1;\n    }\n    if($consonant_index\
    \ === -1) {\n        return \"\";\n    }\n    $consonant_index += 1;\n    return\
    \ $word_array[$consonant_index];\n}\n", "\t$vowels = \"AEIOUaeiou\";\n\t$consonants\
    \ = \"BCDFGHJKLMNPQRSTVWXYZbcdfghjklmnpqrstvwxyz\";\n\t$strlen = strlen($word);\n\
    \t$vowel_index = \"\";\n\tfor ($i=$strlen-1; $i >= 0; $i--) { \n\t\tif (strpos($vowels,\
    \ $word[$i]) !== false) {\n\t\t\t$vowel_index = $i;\n\t\t\tbreak;\n\t\t}\n\t}\n\
    \tfor ($i=$vowel_index-1; $i >= 0; $i--) { \n\t\tif (strpos($consonants, $word[$i])\
    \ !== false) {\n\t\t\treturn $word[$vowel_index];\n\t\t}\n\t}\n\treturn \"\";\n\
    }\n", "    $vowels = ['a', 'e', 'i', 'o', 'u'];\n    $consonants = ['b', 'c',\
    \ 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w',\
    \ 'x', 'y', 'z'];\n    $letter_found = false;\n    $word_length = strlen($word);\n\
    \    if($word_length < 3) {\n        return '';\n    }\n    for($i = $word_length\
    \ - 1; $i > 0; $i--) {\n        if(in_array($word[$i], $vowels)) {\n         \
    \   $letter_found = true;\n            $vowel_position = $i;\n            if(in_array($word[$i-1],\
    \ $consonants) && in_array($word[$i+1], $consonants)) {\n                return\
    \ $word[$i];\n            }\n        }\n    }\n    if($letter_found) {\n     \
    \   return $word[$vowel_position];\n    }\n    return '';\n}\n\necho get_closest_vowel(\"\
    yogurt\");\necho '<br/>';\necho get_closest_vowel(\"FULL\");\necho '<br/>';\n\
    echo get_closest_vowel(\"quick\");\necho '<br/>';\necho get_closest_vowel(\"ab\"\
    );\necho '<br/>';\necho get_closest_vowel(\"sprinkles\");\necho '<br/>';\necho\
    \ get_closest_vowel(\"abacabae\");\necho '<br/>';\necho get_closest_vowel(\"lxxyzo\"\
    );\necho '<br/>';\necho get_closest_vowel(\"tlppx\");\necho '<br/>';\necho get_closest_vowel(\"\
    pippie\");\necho '<br/>';\necho get_closest_vowel(\"pizzazz\");\necho '<br/>",
  "    $position = strlen($word);\n    $vowels = array('a', 'e', 'i', 'o', 'u', 'A',\
    \ 'E', 'I', 'O', 'U');\n    $consonants = array('b', 'c', 'd', 'f', 'g', 'h',\
    \ 'j', 'k', 'l', 'm', 'n', 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z', 'B',\
    \ 'C', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'V',\
    \ 'W', 'X', 'Y', 'Z');\n    $flag = false;\n    for ($i = strlen($word) - 1; $i\
    \ >= 0; $i--) {\n        if (in_array($word[$i], $vowels)) {\n            if ($flag)\
    \ {\n                $position = $i;\n                break;\n            }\n\
    \        } else if (in_array($word[$i], $consonants)) {\n            $flag = true;\n\
    \        }\n    }\n    if ($position == strlen($word)) {\n        return \"\"\
    ;\n    } else {\n        return $word[$position];\n    }\n}\n", "    $word = strtolower($word);\n\
    \    $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\");\n    $word_length = strlen($word);\n\
    \    $found_vowel = FALSE;\n    $closest_vowel = \"\";\n    $closest_vowel_distance\
    \ = $word_length;\n    for ($i = $word_length-1; $i >= 0; $i--) {\n        $char\
    \ = $word[$i];\n        if (in_array($char, $vowels)) {\n            $found_vowel\
    \ = TRUE;\n            $distance = $word_length - $i;\n            if ($distance\
    \ < $closest_vowel_distance) {\n                $closest_vowel = $char;\n    \
    \            $closest_vowel_distance = $distance;\n            }\n        } else\
    \ {\n            if ($found_vowel) {\n                return $closest_vowel;\n\
    \            }\n        }\n    }\n    return \"\";\n}\n", "  $word = strrev($word);\n\
    \  $vowels = \"aeiou\";\n  $vowel = '';\n  for ($i = 0; $i < strlen($word); $i++)\
    \ {\n    if (strpos($vowels, $word[$i]) !== false) {\n      $vowel = $word[$i];\n\
    \      $vowelIndex = $i;\n      break;\n    }\n  }\n  if ($vowel == '') {\n  \
    \  return '';\n  }\n  $previous = '';\n  $next = '';\n  for ($i = 0; $i < $vowelIndex;\
    \ $i++) {\n    if (strpos($vowels, $word[$i]) === false) {\n      $previous =\
    \ $word[$i];\n      break;\n    }\n  }\n  for ($i = $vowelIndex + 1; $i < strlen($word);\
    \ $i++) {\n    if (strpos($vowels, $word[$i]) === false) {\n      $next = $word[$i];\n\
    \      break;\n    }\n  }\n  if ($previous == '' || $next == '') {\n    return\
    \ '';\n  }\n  return $vowel;\n}\necho get_closest_vowel(\"yogurt\") . \"\\n\"\
    ;\necho get_closest_vowel(\"FULL\") . \"\\n\";\necho get_closest_vowel(\"quick\"\
    ) . \"\\n\";\necho get_closest_vowel(\"ab\") . \"\\n\";\necho get_closest_vowel(\"\
    war\") . \"\\n\";\necho get_closest_vowel(\"party\") . \"\\n\";\necho get_closest_vowel(\"\
    work\") . \"\\n\";\necho get_closest_vowel(\"joke\") . \"\\n\";\necho get_closest_vowel(\"\
    luck\") . \"\\n\";\necho get_closest_vowel(\"bad\") . \"\\n\";\necho get_closest_vowel(\"\
    taxi\") . \"\\n\";\necho get", "    $vowels = ['a', 'e', 'i', 'o', 'u'];\n   \
    \ $last_char = '';\n    $result = '';\n    for ($i = strlen($word) - 1; $i >=\
    \ 0; $i--) {\n        if ($last_char && in_array($word[$i], $vowels)) {\n    \
    \        $result = $word[$i];\n            break;\n        }\n        if (!in_array($word[$i],\
    \ $vowels)) {\n            $last_char = $word[$i];\n        }\n    }\n    return\
    \ $result;\n}\n", "    $vowels = [\"a\",\"e\",\"i\",\"o\",\"u\"];\n    $found\
    \ = '';\n    $current_closest = \"z\";\n    $found_index = strlen($word);\n  \
    \  //strrpos finds the position of the last occurrence of a substring in a string\n\
    \    //strlen return the length of a string\n    for ($i = 0; $i < strlen($word);\
    \ $i++) {\n        $char = $word[$i];\n        if (in_array($char, $vowels)) {\n\
    \            $is_before_consonant = (in_array($word[$i - 1], $vowels)) ? false\
    \ : true;\n            $is_after_consonant = (in_array($word[$i + 1], $vowels))\
    \ ? false : true;\n            if ($is_before_consonant && $is_after_consonant)\
    \ {\n                $found = $char;\n                $found_index = $i;\n   \
    \             break;\n            }\n        }\n    }\n    if (empty($found))\
    \ {\n        return \"\";\n    }\n    for ($i = $found_index; $i < strlen($word);\
    \ $i++) {\n        $char = $word[$i];\n        if (in_array($char, $vowels)) {\n\
    \            $is_before_consonant = (in_array($word[$i - 1], $vowels)) ? false\
    \ : true;\n            $is_after_consonant = (in_array($word[$i + 1], $vowels))\
    \ ? false : true;\n            if ($is_before_consonant && $is_after_consonant)\
    \ {\n                if ($char < $current_closest) {\n                    $current_closest\
    \ = $char;\n                }\n            }\n        }\n    }\n    return $current_closest;\n\
    }\n\necho get_closest_vowel(\"yogurt\");\necho \"\\n\";\necho get_closest_vowel(\"\
    FULL\");\necho \"\\n\";\necho get_closest_vowel(\"quick\");\necho \"\\n", "  \
    \  $vowels = array(\"a\", \"i\", \"u\", \"e\", \"o\");\n    $closest_vowel = \"\
    \";\n    $distance = strlen($word);\n    $vowel_index = -1;\n    $consonant_before_index\
    \ = -1;\n    $consonant_after_index = -1;\n    $word_length = strlen($word);\n\
    \    for ($i = 0; $i < $word_length; $i++) {\n        $letter = $word[$i];\n \
    \       if (in_array($letter, $vowels)) {\n            $vowel_index = $i;\n  \
    \          break;\n        }\n    }\n    if ($vowel_index < 0) {\n        return\
    \ \"\";\n    }\n    for ($i = $vowel_index - 1; $i >= 0; $i--) {\n        $letter\
    \ = $word[$i];\n        if (!in_array($letter, $vowels)) {\n            $consonant_before_index\
    \ = $i;\n            break;\n        }\n    }\n    for ($i = $vowel_index + 1;\
    \ $i < $word_length; $i++) {\n        $letter = $word[$i];\n        if (!in_array($letter,\
    \ $vowels)) {\n            $consonant_after_index = $i;\n            break;\n\
    \        }\n    }\n    if ($consonant_before_index < 0 || $consonant_after_index\
    \ < 0) {\n        return \"\";\n    }\n    $distance_before = $vowel_index - $consonant_before_index;\n\
    \    $distance_after = $consonant_after_index - $vowel_index;\n    if ($distance_before\
    \ <= $distance_after) {\n        $closest_vowel = $word[$vowel_index];\n    }\
    \ else {\n        $closest_vowel = $word[$vowel_index + 1];\n    }\n    return\
    \ $closest_vowel;\n}\n\n$word = \"yogurt\";", "    $vowels = \"aeiouAEIOU\";\n\
    \    $characters = str_split($word);\n    $closest_vowel = \"\";\n    $i = count($characters)\
    \ - 1;\n    $before_vowel = False;\n    $after_vowel = False;\n    $found_vowel\
    \ = False;\n    while ($i >= 0 && !$found_vowel) {\n        $char = $characters[$i];\n\
    \        if (strpos($vowels, $char) !== False) {\n            $after_vowel = True;\n\
    \            if ($before_vowel) {\n                $found_vowel = True;\n    \
    \            $closest_vowel = $char;\n            }\n        } else {\n      \
    \      $before_vowel = $after_vowel;\n            $after_vowel = False;\n    \
    \    }\n        $i--;\n    }\n    return $closest_vowel;\n}", "  $vowels = array(\"\
    a\", \"e\", \"i\", \"o\", \"u\");\n  $c = strlen($word);\n  for ($i=$c-1; $i>0;\
    \ $i--) {\n    if (in_array($word[$i], $vowels)) {\n      if (!in_array($word[$i-1],\
    \ $vowels)) {\n        return $word[$i];\n      }\n    }\n  }\n  return \"\";\n\
    }\n", "  $vowels = [\n    'a' => 0,\n    'e' => 0,\n    'i' => 0,\n    'o' =>\
    \ 0,\n    'u' => 0,\n    'y' => 0,\n  ];\n  $characters = str_split($word);\n\
    \  $length = count($characters);\n  for ($i = $length - 1; $i >= 0; $i--) {\n\
    \    $char = $characters[$i];\n    if (array_key_exists($char, $vowels)) {\n \
    \     $vowels[$char]++;\n    } else {\n      foreach ($vowels as $vowel => $count)\
    \ {\n        if ($count > 0) {\n          return $vowel;\n        }\n      }\n\
    \    }\n  }\n  return '';\n}\n", "    $word = strtolower($word);\n    $length\
    \ = strlen($word);\n    $vowels = [\"a\", \"e\", \"i\", \"o\", \"u\"];\n    $prev_char\
    \ = '';\n    $next_char = '';\n    $curr_vowel = '';\n    $count = 0;\n    for\
    \ ($i = $length - 1; $i >= 0; $i--) {\n        $char = $word[$i];\n        if\
    \ (in_array($char, $vowels)) {\n            $curr_vowel = $char;\n           \
    \ $count++;\n        } else {\n            if ($count === 1) {\n             \
    \   $next_char = $char;\n                break;\n            }\n        }\n  \
    \  }\n    $closest_vowel = '';\n    if ($curr_vowel !== '' && $next_char !== '')\
    \ {\n        $closest_vowel = $curr_vowel;\n    }\n    return $closest_vowel;\n\
    }\n\nprint_r(get_closest_vowel(\"yogurt\"));\nprint_r(get_closest_vowel(\"FULL\"\
    ));\nprint_r(get_closest_vowel(\"quick\"));\nprint_r(get_closest_vowel(\"ab\"\
    ));", "    $vowels = array(\"a\", \"e\", \"i\", \"o\", \"u\");\n    $ret = \"\"\
    ;\n    for ($i = strlen($word) - 1; $i >= 0; $i--) {\n        if (in_array($word[$i],\
    \ $vowels)) {\n            if ($i == strlen($word) - 1) {\n                $ret\
    \ = \"\";\n                break;\n            }\n            if (!in_array($word[$i\
    \ - 1], $vowels) && !in_array($word[$i + 1], $vowels)) {\n                $ret\
    \ = $word[$i];\n                break;\n            }\n        }\n    }\n    return\
    \ $ret;\n}\n", "  $vowels = array('a', 'e', 'i', 'o', 'u');\n  $word = strtolower($word);\n\
    \  $pos = 0;\n  $max = 0;\n  for ($i = 0; $i < strlen($word); $i++) {\n    if\
    \ ($word[$i] == 'a' || $word[$i] == 'e' || $word[$i] == 'i' || $word[$i] == 'o'\
    \ || $word[$i] == 'u') {\n      if ($max == 0) {\n        $max = $i;\n      }\n\
    \      else {\n        $pos = $i;\n        break;\n      }\n    }\n  }\n  if ($max\
    \ == 0) {\n    return '';\n  }\n  else {\n    $min = min($max, $pos);\n    return\
    \ $word[$min];\n  }\n}", "  $vowels = ['a', 'e', 'i', 'o', 'u'];\n  $result =\
    \ '';\n  for ($i = strlen($word) - 1; $i >= 0; $i--) {\n    if (in_array($word[$i],\
    \ $vowels)) {\n      if ($i != 0 && $i != strlen($word) - 1) {\n        if (!in_array($word[$i\
    \ - 1], $vowels) && !in_array($word[$i + 1], $vowels)) {\n          $result =\
    \ $word[$i];\n          break;\n        }\n      }\n    }\n  }\n  return $result;\n\
    }\n\necho get_closest_vowel(\"yogurt\");", "    $vowels = array('a', 'e', 'i',\
    \ 'o', 'u');\n    $word = str_split($word);\n    $len = count($word);\n    $found\
    \ = FALSE;\n    for ($i = $len - 1; $i >= 0; $i--) {\n        if (in_array($word[$i],\
    \ $vowels)) {\n            $j = $i - 1;\n            while ($j >= 0) {\n     \
    \           if (in_array($word[$j], $vowels)) {\n                    $j--;\n \
    \               } else {\n                    $found = TRUE;\n               \
    \     break;\n                }\n            }\n            if ($found) {\n  \
    \              break;\n            }\n        }\n    }\n    if ($found) {\n  \
    \      return $word[$i];\n    } else {\n        return '';\n    }\n}\nprint get_closest_vowel(\"\
    yogurt\");\necho \"\\n\";\nprint get_closest_vowel(\"FULL\");\necho \"\\n\";\n\
    print get_closest_vowel(\"quick\");\necho \"\\n\";\nprint get_closest_vowel(\"\
    ab\");\necho \"\\n\";\nprint get_closest_vowel(\"desk\");\necho \"\\n\";\nprint\
    \ get_closest_vowel(\"bear\");\necho \"\\n\";"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
