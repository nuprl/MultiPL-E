language: php
name: HumanEval_25_factorize
results:
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    if ($n < 2) {\n        return\
    \ array();\n    }\n    if ($n == 2) {\n        return array(2);\n    }\n    $factor\
    \ = 2;\n    $factors = array();\n    $remaining = $n;\n    while ($remaining %\
    \ $factor == 0) {\n        $factors[] = $factor;\n        $remaining /= $factor;\n\
    \    }\n    $factor = 3;\n    while ($remaining > 1) {\n        while ($remaining\
    \ % $factor == 0) {\n            $factors[] = $factor;\n            $remaining\
    \ /= $factor;\n        }\n        $factor += 2;\n    }\n    return $factors;\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823782
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = [];\n    if ($n >\
    \ 0) {\n        for ($i = 2; $i <= $n; $i++) {\n            if ($n % $i == 0)\
    \ {\n                $factors[] = $i;\n                $n /= $i;\n           \
    \     $i = 1;\n            }\n        }\n    }\n    return $factors;\n}\n\nprint_r(factorize(70));\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 2\n    [1] => 5\n    [2] => 7\n)\n"
  timestamp: 1659823782
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = [];\n    $i = 2;\n\
    \    while ($n > 1) {\n        if ($n % $i == 0) {\n            $factors[] = $i;\n\
    \            $n /= $i;\n        } else {\n            $i++;\n        }\n    }\n\
    \    return $factors;\n}\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823782
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $res = [];\n    $div = 2;\n \
    \   while($n > 1) {\n        if ($n % $div == 0) {\n            $res[] = $div;\n\
    \            $n /= $div;\n        } else {\n            $div++;\n        }\n \
    \   }\n    return $res;\n}\n\necho 'factorize 8 -> ';\nprint_r(factorize(8));\n\
    echo 'factorize 25 -> ';\nprint_r(factorize(25));\necho 'factorize 70 -> ';\n\
    print_r(factorize(70));\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "factorize 8 -> Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n)\n\
    factorize 25 -> Array\n(\n    [0] => 5\n    [1] => 5\n)\nfactorize 70 -> Array\n\
    (\n    [0] => 2\n    [1] => 5\n    [2] => 7\n)\n"
  timestamp: 1659823782
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$result = array();\n\tif ($n <=\
    \ 0) {\n\t\treturn $result;\n\t}\n\t$i = 2;\n\t$d = 1;\n\twhile ($n > 1) {\n\t\
    \tif (($n % $i) == 0) {\n\t\t\t$d = $i;\n\t\t\t$n /= $i;\n\t\t\tarray_push($result,\
    \ $d);\n\t\t} else {\n\t\t\t$i += 1;\n\t\t}\n\t}\n\treturn $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823782
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  $factors = [];\n  if ($n < 2) return\
    \ $factors;\n  $prime = 2;\n  while ($n > 1) {\n    while ($n % $prime == 0) {\n\
    \      $factors[] = $prime;\n      $n /= $prime;\n    }\n    $prime++;\n  }\n\
    \  return $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823782
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $result = [];\n    $multiply\
    \ = 1;\n    for ($i = 2; $i <= $n; $i++) {\n        while (($n % $i) == 0) {\n\
    \            $result[] = $i;\n            $multiply *= $i;\n            $n /=\
    \ $i;\n        }\n    }\n    return ($multiply == $i) ? $result : [$n];\n}\necho\
    \ \"<pre>\";\nprint_r(factorize(8));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(factorize(25));\n\
    echo \"</pre>\";\n\necho \"<pre>\";\nprint_r(factorize(70));\necho \"</pre>\"\
    ;\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 1\n)\n</pre><pre>Array\n(\n    [0] => 1\n)\n\
    </pre><pre>Array\n(\n    [0] => 1\n)\n</pre>\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpabxqi4bl.php:39\nStack trace:\n#0 /tmp/tmpabxqi4bl.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpabxqi4bl.php on line 39\n"
  timestamp: 1659823782
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    if ($n <= 0) {\n        return\
    \ array();\n    }\n    $factors = array();\n    $d = 2;\n    while ($n > 1) {\n\
    \        while ($n % $d == 0) {\n            $factors[] = $d;\n            $n\
    \ /= $d;\n        }\n        $d += 1;\n    }\n    return $factors;\n}\n\n$a =\
    \ factorize(70);\necho implode(', ', $a);\necho '<br />';\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 2, 5, 7<br />
  timestamp: 1659823782
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$factors = array();\n\t$i = 2;\n\
    \twhile($n != 1) {\n\t\twhile($n % $i == 0) {\n\t\t\t$factors[] = $i;\n\t\t\t\
    $n /= $i;\n\t\t}\n\t\t$i++;\n\t}\n\treturn $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823782
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$factors = array();\n\t$i = 2;\n\
    \t$limit = ceil(sqrt($n));\n\twhile ($i <= $limit) {\n\t\tif ($n % $i == 0) {\n\
    \t\t\t$factors[] = $i;\n\t\t\t$n /= $i;\n\t\t\t$limit = ceil(sqrt($n));\n\t\t\
    } else {\n\t\t\t$i++;\n\t\t}\n\t}\n\tif ($n > 1) {\n\t\t$factors[] = $n;\n\t}\n\
    \treturn $factors;\n}\n\necho \"<pre>\";\necho var_dump(factorize(25));\necho\
    \ \"</pre>\";\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>array(2) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(5)\n}\n</pre>"
  timestamp: 1659823782
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $result = [];\n    $i = 2;\n\
    \    while ($n > 1) {\n        while ($n % $i == 0) {\n            $result[] =\
    \ $i;\n            $n /= $i;\n        }\n        $i++;\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823782
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $result = [];\n    for ($i =\
    \ 2; $i <= $n; $i++) {\n        while ($n % $i == 0) {\n            $result[]\
    \ = $i;\n            $n /= $i;\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823782
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$num = $n;\n\t$result = array();\n\
    \t$i = 2;\n\twhile ($num > 1) {\n\t\tif ($num % $i == 0) {\n\t\t\t$result[] =\
    \ $i;\n\t\t\t$num = $num / $i;\n\t\t} else {\n\t\t\t$i++;\n\t\t}\n\t}\n\treturn\
    \ $result;\n}\n\nprint_r(factorize(8));\nprint_r(factorize(25));\nprint_r(factorize(70));\n\
    print_r(factorize(63));\nprint_r(factorize(4568));\nprint_r(factorize(123456789));\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n)\nArray\n(\n    [0]\
    \ => 5\n    [1] => 5\n)\nArray\n(\n    [0] => 2\n    [1] => 5\n    [2] => 7\n\
    )\nArray\n(\n    [0] => 3\n    [1] => 3\n    [2] => 7\n)\nArray\n(\n    [0] =>\
    \ 2\n    [1] => 2\n    [2] => 2\n    [3] => 571\n)\nArray\n(\n    [0] => 3\n \
    \   [1] => 3\n    [2] => 3607\n    [3] => 3803\n)\n"
  timestamp: 1659823782
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    if($n < 0) {\n        $n = -$n;\n\
    \    }\n    $prime = array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43,\
    \ 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97);\n    $ans = array();\n    foreach($prime\
    \ as $i) {\n        if($n % $i == 0) {\n            $cnt = 0;\n            while($n\
    \ % $i == 0) {\n                $n /= $i;\n                $cnt++;\n         \
    \   }\n            for($j = 0; $j < $cnt; $j++) {\n                $ans[] = $i;\n\
    \            }\n        }\n    }\n    return $ans;\n}\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823782
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $i = 2;\n    $factor_array =\
    \ array();\n    $remainder = $n;\n    while ($i <= $remainder) {\n        if ($remainder\
    \ % $i === 0) {\n            $factor_array[] = $i;\n            $remainder = $remainder\
    \ / $i;\n        } else {\n            $i++;\n        }\n    }\n    return $factor_array;\n\
    }\n\nprint_r(factorize(8));\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n)\n"
  timestamp: 1659823782
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$f = array();\n\t$i = 2;\n\twhile\
    \ ($n > 1) {\n\t\twhile ($n % $i == 0) {\n\t\t\t$f[] = $i;\n\t\t\t$n /= $i;\n\t\
    \t}\n\t\t$i++;\n\t}\n\treturn $f;\n}\n\nprint_r(factorize(8));\necho \"\\n\";\n\
    print_r(factorize(25));\necho \"\\n\";\nprint_r(factorize(70));\necho \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n)\n\nArray\n(\n   \
    \ [0] => 5\n    [1] => 5\n)\n\nArray\n(\n    [0] => 2\n    [1] => 5\n    [2] =>\
    \ 7\n)\n\n"
  timestamp: 1659823782
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $result = [];\n    $divisor =\
    \ 2;\n    while ($n > 1) {\n        while ($n % $divisor == 0) {\n           \
    \ $result[] = $divisor;\n            $n /= $divisor;\n        }\n        $divisor++;\n\
    \    }\n    return $result;\n}\nvar_dump(factorize(70));\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(3) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(5)\n  [2]=>\n  int(7)\n}\n"
  timestamp: 1659823782
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $f = [];\n    $m = 2;\n    $r\
    \ = $n;\n    while ($r > 1) {\n        while ($r % $m == 0) {\n            $f[]\
    \ = $m;\n            $r /= $m;\n        }\n        $m++;\n    }\n    return $f;\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823782
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $return = array();\n    while\
    \ ($n % 2 == 0) {\n        $return[] = 2;\n        $n = $n / 2;\n    }\n    for\
    \ ($i = 3; $i <= sqrt($n); $i = $i + 2) {\n        while ($n % $i == 0) {\n  \
    \          $return[] = $i;\n            $n = $n / $i;\n        }\n    }\n    if\
    \ ($n > 2) {\n        $return[] = $n;\n    }\n    return $return;\n}\n\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823782
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $arr = [];\n    $i = 2;\n   \
    \ if ( $n % $i == 0 ) {\n        array_push($arr, $i);\n        $n = $n / $i;\n\
    \    }\n    while ( $n > 1 ) {\n        if ( $n % $i == 0 ) {\n            array_push($arr,\
    \ $i);\n            $n = $n / $i;\n        } else {\n            $i++;\n     \
    \   }\n    }\n    return $arr;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823782
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $res = [];\n    $i = 2;\n   \
    \ while ($n !== 1) {\n        while ($n % $i === 0) {\n            $res[] = $i;\n\
    \            $n /= $i;\n        }\n        $i++;\n    }\n    return $res;\n}\n\
    \necho implode(', ', factorize(10)) . \"\\n\";\necho implode(', ', factorize(17))\
    \ . \"\\n\";\necho implode(', ', factorize(1)) . \"\\n\";\necho implode(', ',\
    \ factorize(1024)) . \"\\n\";\necho implode(', ', factorize(36)) . \"\\n\";\n\
    echo implode(', ', factorize(49)) . \"\\n\";\necho implode(', ', factorize(35))\
    \ . \"\\n\";\necho implode(', ', factorize(146)) . \"\\n\";\necho implode(', ',\
    \ factorize(220)) . \"\\n\";\necho implode(', ', factorize(997)) . \"\\n\";\n\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2, 5

    17


    2, 2, 2, 2, 2, 2, 2, 2, 2, 2

    2, 2, 3, 3

    7, 7

    5, 7

    2, 73

    2, 2, 5, 11

    997

    '
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  $factors = [];\n  $divisor = 2;\n\
    \  if($n==0){\n    return $factors;\n  }\n  while ($n>=2) {\n    if($n%$divisor===0){\n\
    \      $factors[] = $divisor;\n      $n /= $divisor;\n    }else{\n      $divisor++;\n\
    \    }\n  }\n  return $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = [];\n    while ($n\
    \ % 2 == 0) {\n        $factors[] = 2;\n        $n /= 2;\n    }\n    for ($i =\
    \ 3; $i <= sqrt($n); $i += 2) {\n        while ($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n /= $i;\n        }\n    }\n    if ($n > 2) {\n        $factors[]\
    \ = $n;\n    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n  \
    \  return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $f = [];\n    for ($d = 2; $d\
    \ <= $n; $d++) {\n        while ($n % $d == 0) {\n            $f[] = $d;\n   \
    \         $n /= $d;\n        }\n    }\n    return $f;\n}\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  if($n < 2) return array($n);\n\
    \  $factors = array();\n  $factor = 2;\n  while ($n > 1) {\n    while ($n % $factor\
    \ == 0) {\n      $factors[] = $factor;\n      $n /= $factor;\n    }\n    $factor++;\n\
    \  }\n  return $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$factors = array();\n\tfor ($i\
    \ = 2; $i <= $n; $i++) {\n\t\twhile ($n % $i == 0) {\n\t\t\t$factors[] = $i;\n\
    \t\t\t$n /= $i;\n\t\t}\n\t}\n\treturn $factors;\n}\n\n$num = isset($_POST['num'])\
    \ ? $_POST['num'] : '';\n\nif (isset($_POST['submit'])) {\n\tif (is_numeric($num))\
    \ {\n\t\t$res = factorize($num);\n\t\tif ($res) {\n\t\t\techo \"Factors are \"\
    \ . implode('*', $res) . \"=\" . array_product($res);\n\t\t} else {\n\t\t\techo\
    \ \"Factors are empty!\";\n\t\t}\n\t} else {\n\t\techo \"Input is not a number!\"\
    ;\n\t}\n}\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $r = array();\n    $k = 1;\n\
    \    while($n % 2 == 0) {\n        $r[] = 2;\n        $n /= 2;\n    }\n    while($n\
    \ != 1) {\n        while(($n % $k) == 0) {\n            $r[] = $k;\n         \
    \   $n /= $k;\n        }\n        $k += 2;\n    }\n    return $r;\n}\n\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpmyi1vb6r.php on line 20

    '
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$result = array();\n\t$prime =\
    \ 2;\n\twhile($n>1) {\n\t\tif ($n % $prime == 0) {\n\t\t\t$result[] = $prime;\n\
    \t\t\t$n = $n / $prime;\n\t\t} else {\n\t\t\t$prime += 1;\n\t\t}\n\t}\n\treturn\
    \ $result;\n}\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $primes = array();\n    $returnArray\
    \ = array();\n    $i = 2;\n    while($i <= $n) {\n        if ($n % $i == 0) {\n\
    \            $n = $n / $i;\n            array_push($primes, $i);\n        } else\
    \ {\n            $i = $i + 1;\n        }\n    }\n    return $primes;\n}\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$result = array();\n\t\n\tfor ($i\
    \ = 2; $i <= $n; $i++) {\n\t\twhile ($n % $i == 0) {\n\t\t\t$result[] = $i;\n\t\
    \t\t$n /= $i;\n\t\t}\n\t}\n\t\n\treturn $result;\n}\n\necho \"<pre>\";\nprint_r(factorize(70));\n\
    echo \"</pre>\";\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 2\n    [1] => 5\n    [2] => 7\n)\n</pre>"
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  $array = array();\n  $i = 2;\n\
    \  while($n > 1) {\n    if($n % $i == 0) {\n      $array[] = $i;\n      $n = $n\
    \ / $i;\n    } else {\n      $i++;\n    }\n  }\n  return $array;\n}\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $result = [];\n    if ($n ===\
    \ 0) return $result;\n    $factor = 2;\n    while ($n !== 1) {\n        while\
    \ ($n % $factor === 0) {\n            $result[] = $factor;\n            $n /=\
    \ $factor;\n        }\n        $factor++;\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  // Begin prime factorization\n\
    \  $primeFactors = array();\n  while($n % 2 == 0) {\n    array_push($primeFactors,\
    \ 2);\n    $n = $n / 2;\n  }\n  for($i = 3; $i <= sqrt($n); $i = $i + 2) {\n \
    \   while($n % $i == 0) {\n      array_push($primeFactors, $i);\n      $n = $n\
    \ / $i;\n    }\n  }\n  if($n > 2) {\n    array_push($primeFactors, $n);\n  }\n\
    \  return $primeFactors;\n}\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$res = array();\n\t$d = 2;\n\t\
    while($n > 1) {\n\t\tif($n % $d == 0) {\n\t\t\t$res[] = $d;\n\t\t\t$n /= $d;\n\
    \t\t} else $d++;\n\t}\n\treturn $res;\n}\n\necho \"<pre>\";\nprint_r(factorize(70));\n\
    echo \"</pre>\";\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 2\n    [1] => 5\n    [2] => 7\n)\n</pre>"
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n$a = array();\n$b = 2;\nwhile($n\
    \ > 1) {\n    while ($n % $b == 0) {\n        $a[] = $b;\n        $n = $n / $b;\n\
    \    }\n    $b++;\n}\nreturn $a;\n}\necho \"\u0412\u0432\u0435\u0434\u0438\u0442\
    \u0435 \u0447\u0438\u0441\u043B\u043E n: \";\n$n = trim(fgets(STDIN));\n$c = factorize($n);\n\
    print_r($c);\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0447\u0438\u0441\u043B\u043E\
    \ n: Array\n(\n)\n"
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  $factors = [];\n  for ($i = 2;\
    \ $i <= $n; $i++) {\n    while ($n % $i == 0) {\n      $factors[] = $i;\n    \
    \  $n /= $i;\n    }\n  }\n  return $factors;\n}\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $arr=array();\n    $counter=0;\n\
    \    while($n % 2 == 0) {\n        $n=$n/2;\n        $counter++;\n    }\n    for($i=3;$i<=sqrt($n);$i=$i+2)\
    \ {\n        while($n % $i == 0) {\n            $n=$n/$i;\n            $counter++;\n\
    \        }\n    }\n    if($n > 2) {\n        $counter++;\n    }\n    for($i=0;$i<$counter;$i++)\
    \ {\n        array_push($arr,2);\n    }\n    return $arr;\n}\n\necho json_encode(factorize(8));\n\
    \nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "[2,2,2]\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0nb6xh4m.php:43\n\
    Stack trace:\n#0 /tmp/tmp0nb6xh4m.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp0nb6xh4m.php\
    \ on line 43\n"
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = [];\n    $factor =\
    \ 2;\n    while ($n > 1) {\n        while ($n % $factor == 0) {\n            $factors[]\
    \ = $factor;\n            $n /= $factor;\n        }\n        $factor++;\n    }\n\
    \    return $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factor = 2;\n    $factors =\
    \ array();\n    while ($n > 1) {\n        if ($n % $factor == 0) {\n         \
    \   $factors[] = $factor;\n            $n /= $factor;\n        } else {\n    \
    \        $factor++;\n        }\n    }\n    return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$res = array();\n\tfor ($i = 2;\
    \ $i <= $n; $i++) {\n\t\tif ($n % $i == 0) {\n\t\t\t$res[] = $i;\n\t\t\t$n /=\
    \ $i;\n\t\t\t$i--;\n\t\t}\n\t}\n\treturn $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  if ($n <= 0) return false;\n  $f\
    \ = [];\n  for ($i = 2; $i <= $n; $i++) {\n    while ($n % $i == 0) {\n      $f[]\
    \ = $i;\n      $n /= $i;\n    }\n  }\n  return $f;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    // implementation here\n}\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx9_hpo3l.php:19\n\
    Stack trace:\n#0 /tmp/tmpx9_hpo3l.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpx9_hpo3l.php\
    \ on line 19\n"
  timestamp: 1659979538
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n$i = 1;\n$factors = [];\nwhile($i\
    \ <= $n){\n  if($n % $i == 0){\n    $factors[] = $i;\n    $n = $n / $i;\n  }\n\
    \  else{\n    $i++;\n  }\n}\nreturn $factors;\n}\necho '<pre>';\nvar_dump(factorize(8));\n\
    echo '</pre>';\necho '<pre>';\nvar_dump(factorize(25));\necho '</pre>';\necho\
    \ '<pre>';\nvar_dump(factorize(70));\necho '</pre>';\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '<pre>

    Fatal error: Allowed memory size of 134217728 bytes exhausted (tried to allocate
    134217736 bytes) in /tmp/tmpozbca38m.php on line 16

    '
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  if ($n == 1) {\n    return array();\n\
    \  }\n  $r = array();\n  $i = 2;\n  while ($n != 1) {\n    if ($n % $i == 0) {\n\
    \      $r[] = $i;\n      $n /= $i;\n    } else {\n      $i++;\n    }\n  }\n  return\
    \ $r;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$factors = array();\n\tif ($n <=\
    \ 3) {\n\t\t$factors[] = $n;\n\t\treturn $factors;\n\t}\n\t$sqrtN = sqrt($n);\n\
    \tfor ($i = 2; $i <= $sqrtN; $i++) {\n\t\tif ($n % $i == 0) {\n\t\t\twhile ($n\
    \ % $i == 0) {\n\t\t\t\t$factors[] = $i;\n\t\t\t\t$n /= $i;\n\t\t\t}\n\t\t}\n\t\
    }\n\tif ($n > 1) {\n\t\t$factors[] = $n;\n\t}\n\treturn $factors;\n}\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: -1
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  // I will use same approach as\
    \ in algorithm of finding prime numbers\n  $primeFactors = array();\n  // First\
    \ i will find all prime numbers in range 2 ... $n/2+1 and store it in array $primeNumbers\n\
    \  $primeNumbers = array();\n  $l = $n/2+1;\n  for ($k = 2; $k < $l; $k++) {\n\
    \    if (checkIfPrime($k)) {\n      $primeNumbers[] = $k;\n    }\n  }\n  // Then,\
    \ in loop, i will check if number $n can be divided by prime number from $primeNumbers\
    \ array\n  // If divisible, then i will divide it by this prime number and store\
    \ prime number in $primeFactors array\n  // Repeat this until $n will not be equal\
    \ to 1.\n  while ($n != 1) {\n    foreach ($primeNumbers as $primeNumber) {\n\
    \      if ($n % $primeNumber == 0) {\n        $primeFactors[] = $primeNumber;\n\
    \        $n = $n / $primeNumber;\n        break;\n      }\n    }\n  }\n  return\
    \ $primeFactors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659979543
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = [];\n    while ($n\
    \ % 2 == 0) {\n        $factors[] = 2;\n        $n /= 2;\n    }\n    $n = intval($n);\n\
    \    for ($i = 3; $i <= sqrt($n); $i += 2) {\n        while ($n % $i == 0) {\n\
    \            $factors[] = $i;\n            $n /= $i;\n        }\n    }\n    if\
    \ ($n > 2) {\n        $factors[] = $n;\n    }\n    return $factors;\n}\n\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $a = array();\n    for ($i =\
    \ 2; $i <= $n; $i++) {\n        while ($n % $i == 0) {\n            $a[] = $i;\n\
    \            $n /= $i;\n        }\n    }\n    return $a;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = [];\n    $divisor\
    \ = 2;\n    while ($n > 1) {\n        while ($n % $divisor == 0) {\n         \
    \   $factors[] = $divisor;\n            $n /= $divisor;\n        }\n        $divisor++;\n\
    \    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $result = [];\n    if ($n < 2)\
    \ return $result;\n    if ($n === 2) return [2];\n    for ($i = 2; $i <= $n; $i++)\
    \ {\n        if ($n % $i === 0) {\n            $result[] = $i;\n            $n\
    \ /= $i;\n            $i = 1;\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$factors = array();\n\tfor ($i\
    \ = 2; $i <= $n; $i++) {\n\t\twhile ($n % $i == 0) {\n\t\t\t$factors[] = $i;\n\
    \t\t\t$n /= $i;\n\t\t}\n\t}\n\treturn $factors;\n}\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    // $n = 8;\n    $res = [];\n\
    \    $p = 2;\n    while ($n !== 1) {\n        if ($n % $p === 0) {\n         \
    \   $res[] = $p;\n            $n /= $p;\n        } else {\n            $p++;\n\
    \        }\n    }\n    return $res;\n}\necho implode(', ', factorize(70));\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 2, 5, 7
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = [];\n    $i = 2;\n\
    \    while ($n > 1) {\n        if ($n % $i == 0) {\n            $factors[] = $i;\n\
    \            $n /= $i;\n        } else {\n            $i++;\n        }\n    }\n\
    \    return $factors;\n}\necho implode(', ', factorize(44)) . PHP_EOL;\necho implode(',\
    \ ', factorize(28)) . PHP_EOL;\necho implode(', ', factorize(133)) . PHP_EOL;\n\
    echo implode(', ', factorize(707)) . PHP_EOL;\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2, 2, 11

    2, 2, 7

    7, 19

    7, 101

    '
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = [];\n    $factor =\
    \ 2;\n    while ($n > 1) {\n        while ($n % $factor == 0) {\n            $factors[]\
    \ = $factor;\n            $n /= $factor;\n        }\n        $factor++;\n    }\n\
    \    return $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  $factors = [];\n  $factor = 2;\n\
    \  while ($n > 1) {\n    while ($n % $factor == 0) {\n      $factors[] = $factor;\n\
    \      $n /= $factor;\n    }\n    $factor++;\n  }\n  return $factors;\n}\n\necho\
    \ \"<pre>\";\nprint_r(factorize(8));\necho \"</pre>\";\necho \"<br>\";\necho \"\
    <pre>\";\nprint_r(factorize(25));\necho \"</pre>\";\necho \"<br>\";\necho \"<pre>\"\
    ;\nprint_r(factorize(70));\necho \"</pre>\";\necho \"<br>\";\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n)\n</pre><br><pre>Array\n\
    (\n    [0] => 5\n    [1] => 5\n)\n</pre><br><pre>Array\n(\n    [0] => 2\n    [1]\
    \ => 5\n    [2] => 7\n)\n</pre><br>"
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  for ($i = 2; $i <= $n; $i++) {\n\
    \    while ($n % $i == 0) {\n      $arr[] = $i;\n      $n /= $i;\n    }\n  }\n\
    \  return $arr;\n}\nprint_r(factorize(25));\n ?>\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 5\n    [1] => 5\n)\nfunction candidate(...$args) {\n\
    \    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  timestamp: 1659979538
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    // Check if given input is valid\
    \ integer number greater than 1.\n    if (!is_int($n) || $n < 2) {\n        return\
    \ 'Wrong input. Please enter correct number greater than 1.';\n    }\n    // Initialize\
    \ array of factors and result array.\n    $factors = [];\n    $result = [];\n\
    \    // Find all prime factors of given number and store them in a array.\n  \
    \  for ($i = 2; $i <= $n; $i++) {\n        while ($n % $i == 0) {\n          \
    \  array_push($factors, $i);\n            $n /= $i;\n        }\n    }\n    //\
    \ Count the number of appearences of each factor.\n    foreach ($factors as $factor)\
    \ {\n        $count = 0;\n        foreach ($factors as $value) {\n           \
    \ if ($factor == $value) {\n                $count++;\n            }\n       \
    \ }\n        // Store the factors in result array.\n        for ($i = 0; $i <\
    \ $count; $i++) {\n            array_push($result, $factor);\n        }\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2hjxam0z.php:48\n\
    Stack trace:\n#0 /tmp/tmp2hjxam0z.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp2hjxam0z.php\
    \ on line 48\n"
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\tif ($n < 2) {\n\t\treturn array($n);\n\
    \t}\n\t$out = array();\n\twhile ($n % 2 == 0) {\n\t\t$out[] = 2;\n\t\t$n /= 2;\n\
    \t}\n\tfor ($i = 3; $i <= $n; $i += 2) {\n\t\twhile ($n % $i == 0) {\n\t\t\t$out[]\
    \ = $i;\n\t\t\t$n /= $i;\n\t\t}\n\t}\n\treturn $out;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = [];\n    for ($i =\
    \ 2; $i <= $n; $i++) {\n        if ($n % $i == 0) {\n            $factors[] =\
    \ $i;\n            $n /= $i;\n            $i--;\n        }\n    }\n    return\
    \ $factors;\n}\n\nvar_dump(factorize(7));\nfunction candidate(...$args) {\n  \
    \  return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(1) {\n  [0]=>\n  int(7)\n}\n"
  timestamp: 1659979538
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$out = array();\n\t$factors = $n;\n\
    \t$factor = 2;\n\twhile ($factors != 1) {\n\t\tif ($factors % $factor == 0) {\n\
    \t\t\t$out[] = $factor;\n\t\t\t$factors = $factors / $factor;\n\t\t} else {\n\t\
    \t\t$factor++;\n\t\t}\n\t}\n\treturn $out;\n}\n$test_cases = array(\n\tarray(8,array(2,2,2)),\n\
    \tarray(25,array(5,5)),\n\tarray(70,array(2,5,7)),\n\tarray(28,array(2,2,7)),\n\
    \tarray(12,array(2,2,3)),\n\tarray(15,array(3,5)),\n\tarray(2,array(2)),\n\tarray(4,array(2,2)),\n\
    \tarray(6,array(2,3)),\n\tarray(10,array(2,5)),\n\tarray(12,array(2,2,3)),\n\t\
    array(15,array(3,5)),\n\tarray(16,array(2,2,2,2)),\n\tarray(18,array(2,3,3)),\n\
    \tarray(20,array(2,2,5)),\n\tarray(100,array(2,2,5,5)),\n\tarray(1000,array(2,2,2,5,5,5)),\n\
    \tarray(100000,array(2,2,2,2,2,5,5,5,5,5)),\n\tarray(10000000,array(2,2,2,2,2,2,2,2,2,5,5,5,5,5,5,5,5,5)),\n\
    \tarray(100000000,array(2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5)),\n\
    \tarray(10,array(2,5)),\n\t\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpn7xndjf0.php on line 48

    '
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$arr = [];\n\t$i = 2;\n\twhile\
    \ ($n > 1) {\n\t\tif ($n % $i === 0) {\n\t\t\t$arr[] = $i;\n\t\t\t$n /= $i;\n\t\
    \t} else {\n\t\t\t$i++;\n\t\t}\n\t}\n\treturn $arr;\n}\necho implode(', ', factorize(70));\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 2, 5, 7
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$result = array();\n\t$i = 2;\n\
    \t$temp = $n;\n\twhile($i <= $temp) {\n\t\tif($temp % $i == 0) {\n\t\t\t$result[]\
    \ = $i;\n\t\t\t$temp = $temp / $i;\n\t\t} else {\n\t\t\t$i++;\n\t\t}\n\t}\n\t\
    return $result;\n}\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5yon9516.php:20\n\
    Stack trace:\n#0 /tmp/tmp5yon9516.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp5yon9516.php\
    \ on line 20\n"
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$n = (int) $n;\n\t$factors = array();\n\
    \tfor ($i = 2; $i <= $n; $i++) {\n\t\twhile ($n % $i == 0) {\n\t\t\t$factors[]\
    \ = $i;\n\t\t\t$n /= $i;\n\t\t}\n\t}\n\treturn $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  $result = [];\n  while ($n % 2\
    \ == 0) {\n    $result[] = 2;\n    $n /= 2;\n  }\n  for ($i = 3; $i <= $n; $i+=2)\
    \ {\n    while ($n % $i == 0) {\n      $result[] = $i;\n      $n /= $i;\n    }\n\
    \  }\n  return $result;\n}\n\nprint_r(factorize(8));\necho PHP_EOL;\nprint_r(factorize(25));\n\
    echo PHP_EOL;\nprint_r(factorize(70));\necho PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n)\n\nArray\n(\n   \
    \ [0] => 5\n    [1] => 5\n)\n\nArray\n(\n    [0] => 2\n    [1] => 5\n    [2] =>\
    \ 7\n)\n\n"
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\tfor ($i = 2; $i <= $n; $i++) {\n\
    \t\tif ($n % $i == 0) {\n\t\t\t$arr[] = $i;\n\t\t\t$n = $n / $i;\n\t\t\t$i = 1;\n\
    \t\t}\n\t}\n\treturn $arr;\n}\n\nvar_dump(factorize(8));\necho \"\\n\";\nvar_dump(factorize(25));\n\
    echo \"\\n\";\nvar_dump(factorize(70));\necho \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(3) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(2)\n  [2]=>\n  int(2)\n}\n\
    \narray(2) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(5)\n}\n\narray(3) {\n  [0]=>\n\
    \  int(2)\n  [1]=>\n  int(5)\n  [2]=>\n  int(7)\n}\n\n"
  timestamp: 1659979538
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\n}\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3r5bxofp.php:19\n\
    Stack trace:\n#0 /tmp/tmp3r5bxofp.php(29): test()\n#1 {main}\n  thrown in /tmp/tmp3r5bxofp.php\
    \ on line 19\n"
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $arr = [];\n    for ($i = 2;\
    \ $i <= $n; $i++) {\n        while ($n % $i == 0) {\n            $arr[] = $i;\n\
    \            $n /= $i;\n        }\n    }\n    return $arr;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = [];\n    for ($i =\
    \ 2; $i <= $n; $i++) {\n        while ($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n /= $i;\n        }\n    }\n    return $factors;\n}\n\n\
    var_dump(factorize(5));\nvar_dump(factorize(8));\nvar_dump(factorize(70));\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(1) {\n  [0]=>\n  int(5)\n}\narray(3) {\n  [0]=>\n  int(2)\n  [1]=>\n\
    \  int(2)\n  [2]=>\n  int(2)\n}\narray(3) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(5)\n\
    \  [2]=>\n  int(7)\n}\n"
  timestamp: 1659979538
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  // $result = [];\n  // $factor\
    \ = 2;\n  // while ($n > 1) {\n  //   while ($n % $factor == 0) {\n  //     $result[]\
    \ = $factor;\n  //     $n /= $factor;\n  //   }\n  //   $factor += 1;\n  // }\n\
    \  // return $result;\n\n  return $n == 1 ? [] : array_merge(array_fill(0, factorize_count($n,\
    \ 2), 2), factorize(($n / pow(2, factorize_count($n, 2)))));\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function factorize_count()\
    \ in /tmp/tmpuvd5iz1_.php:23\nStack trace:\n#0 /tmp/tmpuvd5iz1_.php(27): factorize(2)\n\
    #1 /tmp/tmpuvd5iz1_.php(31): candidate(2)\n#2 /tmp/tmpuvd5iz1_.php(41): test()\n\
    #3 {main}\n  thrown in /tmp/tmpuvd5iz1_.php on line 23\n"
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$prime_factors = array();\n\t$d\
    \ = 2;\n\twhile ($n > 1) {\n\t\twhile ($n % $d == 0) {\n\t\t\t$prime_factors[]\
    \ = $d;\n\t\t\t$n /= $d;\n\t\t}\n\t\t$d++;\n\t}\n\treturn $prime_factors;\n}\n\
    print_r(factorize(70));\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 2\n    [1] => 5\n    [2] => 7\n)\n"
  timestamp: 1659979538
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = [];\n    $firstDivider\
    \ = 2;\n    while ($n > 1) {\n        if (isPrime($firstDivider)) {\n        \
    \    if ($n % $firstDivider == 0) {\n                $factors[] = $firstDivider;\n\
    \                $n /= $firstDivider;\n            } else {\n                $firstDivider++;\n\
    \            }\n        } else {\n            $firstDivider++;\n        }\n  \
    \  }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function isPrime() in\
    \ /tmp/tmps3ivvq7p.php:15\nStack trace:\n#0 /tmp/tmps3ivvq7p.php(30): factorize(2)\n\
    #1 /tmp/tmps3ivvq7p.php(34): candidate(2)\n#2 /tmp/tmps3ivvq7p.php(44): test()\n\
    #3 {main}\n  thrown in /tmp/tmps3ivvq7p.php on line 15\n"
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    if ($n <= 1) return array();\n\
    \    $i = 2;\n    $factors = array();\n    while ($n > 1) {\n        if ($n %\
    \ $i == 0) {\n            $factors[] = $i;\n            $n /= $i;\n        } else\
    \ {\n            $i++;\n        }\n    }\n    return $factors;\n}\n\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$nums = array();\n\t$num = 2;\n\
    \tif ($n % $num == 0) {\n\t\t$nums[] = $num;\n\t\t$n = $n / $num;\n\t}\n\treturn\
    \ $nums;\n}\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8sw_3o5k.php:26\n\
    Stack trace:\n#0 /tmp/tmp8sw_3o5k.php(35): test()\n#1 {main}\n  thrown in /tmp/tmp8sw_3o5k.php\
    \ on line 26\n"
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  $result = [];\n  for ($i = 2; $i\
    \ <= $n; $i++) {\n    while ($n % $i == 0) {\n      $result[] = $i;\n      $n\
    \ /= $i;\n    }\n  }\n  return $result;\n}\n\nprint_r(factorize(8));\nprint_r(factorize(25));\n\
    print_r(factorize(70));\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n)\nArray\n(\n    [0]\
    \ => 5\n    [1] => 5\n)\nArray\n(\n    [0] => 2\n    [1] => 5\n    [2] => 7\n\
    )\n"
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$result = array();\n\tfor ($i =\
    \ 2; $i <= $n; $i++) {\n\t\twhile (($n % $i) == 0) {\n\t\t\t$result[] = $i;\n\t\
    \t\t$n /= $i;\n\t\t}\n\t}\n\treturn $result;\n}\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t// iterative solution\n\t$factors\
    \ = array();\n\twhile($n > 1) {\n\t\tfor($i = 2; $i <= $n; $i++) {\n\t\t\tif($n\
    \ % $i == 0) {\n\t\t\t\t$factors[] = $i;\n\t\t\t\t$n /= $i;\n\t\t\t\tbreak;\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn $factors;\n}\n\nfunction candidate(...$args) {\n \
    \   return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $res = [];\n    $array = [];\n\
    \    $i = 2;\n    while ($i < $n) {\n        while ($n % $i == 0) {\n        \
    \    $n = $n / $i;\n            $array[] = $i;\n        }\n        $i++;\n   \
    \ }\n    $array[] = $n;\n    asort($array);\n    foreach ($array as $value) {\n\
    \        $res[] = $value;\n    }\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz2ptwz9g.php:36\n\
    Stack trace:\n#0 /tmp/tmpz2ptwz9g.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpz2ptwz9g.php\
    \ on line 36\n"
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $result = [];\n    $prime = 2;\n\
    \    while ($n > 1) {\n        while ($n % $prime == 0) {\n            $result[]\
    \ = $prime;\n            $n /= $prime;\n        }\n        $prime++;\n    }\n\
    \    return $result;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$a = [];\n\t$i = 2;\n\twhile ($n\
    \ > 1) {\n\t\twhile ($n % $i == 0) {\n\t\t\t$a[] = $i;\n\t\t\t$n /= $i;\n\t\t\
    }\n\t\t$i++;\n\t}\n\treturn $a;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $primeFactors = array();\n  \
    \  for($i = 2; $i <= $n; $i++) {\n        if ($n % $i == 0) {\n            array_push($primeFactors,\
    \ $i);\n            $n = $n / $i;\n            $i = 1;\n        }\n    }\n   \
    \ return $primeFactors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $primes = array();\n    for ($i\
    \ = 2; $i <= $n; $i++) {\n        if ($n % $i == 0) {\n            array_push($primes,\
    \ $i);\n            $n = $n / $i;\n            $i = 1;\n        }\n    }\n   \
    \ return $primes;\n}\n\nvar_dump(factorize(8));\nvar_dump(factorize(25));\nvar_dump(factorize(70));\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(3) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(2)\n  [2]=>\n  int(2)\n}\n\
    array(2) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(5)\n}\narray(3) {\n  [0]=>\n  int(2)\n\
    \  [1]=>\n  int(5)\n  [2]=>\n  int(7)\n}\n"
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $array = [];\n    for ($i = 2;\
    \ $i <= $n; $i++) {\n        if ($n % $i == 0) {\n            $n = $n / $i;\n\
    \            $array[] = $i;\n            $i--;\n        }\n    }\n    return $array;\n\
    }\n\n$ans = factorize(25);\necho implode(\" \", $ans);\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 5 5
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$factors = array();\n\twhile (\
    \ $n % 2 == 0 ) {\n\t\t$factors[] = 2;\n\t\t$n /= 2;\n\t}\n\tfor ( $div = 3; $div\
    \ <= $n; $div += 2 ) {\n\t\twhile ( $n % $div == 0 ) {\n\t\t\t$factors[] = $div;\n\
    \t\t\t$n /= $div;\n\t\t}\n\t}\n\treturn $factors;\n}\n\n$result = factorize(70);\n\
    \necho $result[0].', '.$result[1].', '.$result[2];\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 2, 5, 7
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $result = [];\n    $divisor =\
    \ 2;\n    while ($n > 1) {\n        while ($n % $divisor == 0) {\n           \
    \ $result[] = $divisor;\n            $n /= $divisor;\n        }\n        $divisor++;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$result = array();\n\tif ($n >\
    \ 0) {\n\t\twhile ($n % 2 == 0) {\n\t\t\t$result[] = 2;\n\t\t\t$n /= 2;\n\t\t\
    }\n\t\twhile ($n % 3 == 0) {\n\t\t\t$result[] = 3;\n\t\t\t$n /= 3;\n\t\t}\n\t\t\
    while ($n % 5 == 0) {\n\t\t\t$result[] = 5;\n\t\t\t$n /= 5;\n\t\t}\n\t\twhile\
    \ ($n % 7 == 0) {\n\t\t\t$result[] = 7;\n\t\t\t$n /= 7;\n\t\t}\n\t\twhile ($n\
    \ % 11 == 0) {\n\t\t\t$result[] = 11;\n\t\t\t$n /= 11;\n\t\t}\n\t\twhile ($n %\
    \ 13 == 0) {\n\t\t\t$result[] = 13;\n\t\t\t$n /= 13;\n\t\t}\n\t\twhile ($n % 17\
    \ == 0) {\n\t\t\t$result[] = 17;\n\t\t\t$n /= 17;\n\t\t}\n\t\twhile ($n % 19 ==\
    \ 0) {\n\t\t\t$result[] = 19;\n\t\t\t$n /= 19;\n\t\t}\n\t\twhile ($n % 23 == 0)\
    \ {\n\t\t\t$result[] = 23;\n\t\t\t$n /= 23;\n\t\t}\n\t\twhile ($n % 29 == 0) {\n\
    \t\t\t$result[] = 29;\n\t\t\t$n /= 29;\n\t\t}\n\t\twhile ($n % 31 == 0) {\n\t\t\
    \t$result[] = 31;\n\t\t\t$n /= 31;\n\t\t}\n\t\twhile ($n % 37 == 0) {\n\t\t\t\
    $result[] = 37;\n\t\t\t$n /= 37;\n\t\t}\n\t\twhile ($n % 41 == 0) {\n\t\t\t$result[]\
    \ = 41;\n\t\t\t$n /= 41;\n\t\t}\n\t\twhile ($n % 43 == 0) {\n\t\t\t$result[] =\
    \ 43;\n\t\t\t$n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmpyj2_56si.php
    on line 69

    '
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  $factors = [];\n  $d = 2;\n  while\
    \ ($n > 1) {\n    while ($n % $d == 0) {\n      $factors[] = $d;\n      $n /=\
    \ $d;\n    }\n    $d += 1;\n  }\n  return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $result = [];\n    $current =\
    \ 2;\n    while ($n > 1) {\n        if ($n % $current == 0) {\n            $result[]\
    \ = $current;\n            $n /= $current;\n        } else {\n            $current++;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $arr = [];\n    $i = 2;\n   \
    \ while ($n > 1) {\n        if ($n % $i === 0) {\n            $arr[] = $i;\n \
    \           $n /= $i;\n        } else {\n            $i++;\n        }\n    }\n\
    \    return $arr;\n}\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = [];\n    while ($n\
    \ % 2 == 0) {\n        $factors[] = 2;\n        $n /= 2;\n    }\n    for ($i =\
    \ 3; $i <= sqrt($n); $i += 2) {\n        while ($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n /= $i;\n        }\n    }\n    if ($n > 2) {\n        $factors[]\
    \ = $n;\n    }\n    return $factors;\n}\necho \"<pre>\";\nvar_dump(factorize(8));\n\
    var_dump(factorize(25));\nvar_dump(factorize(70));\necho \"</pre>\";\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>array(3) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(2)\n  [2]=>\n  int(2)\n\
    }\narray(2) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(5)\n}\narray(3) {\n  [0]=>\n\
    \  int(2)\n  [1]=>\n  int(5)\n  [2]=>\n  int(7)\n}\n</pre>"
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$result = array();\n\t$prime =\
    \ 2;\n\t$x = $n;\n\twhile ($x > 1) {\n\t\tif ($x % $prime == 0) {\n\t\t\t$result[]\
    \ = $prime;\n\t\t\t$x = $x / $prime;\n\t\t} else {\n\t\t\t$prime++;\n\t\t}\n\t\
    }\n\treturn $result;\n}\necho \"<pre>\";\nprint_r(factorize(70));\necho \"</pre>\"\
    ;\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 2\n    [1] => 5\n    [2] => 7\n)\n</pre>"
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$factors = array();\n\tfor ($i\
    \ = 2; $i <= $n; $i++) {\n\t\tif ($n % $i == 0) {\n\t\t\t$factors[] = $i;\n\t\t\
    \t$n /= $i;\n\t\t\t$i = 1;\n\t\t}\n\t}\n\treturn $factors;\n}\n\n$number =  735133;\n\
    $factors = factorize($number);\n$factors_t = array_count_values($factors);\n$result\
    \ = array();\n\nforeach ($factors_t as $key => $value) {\n\t$result[] = str_repeat($key,\
    \ $value);\n}\nvar_dump($result);\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(2) {\n  [0]=>\n  string(1) \"7\"\n  [1]=>\n  string(6) \"105019\"\
    \n}\n"
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  $result = [];\n  $a = 2;\n  while\
    \ ($n > 1) {\n    if (($n % $a) == 0) {\n      $result[] = $a;\n      $n = $n\
    \ / $a;\n    } else {\n      $a++;\n    }\n  }\n  return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  $res = [];\n  $i = 2;\n  while\
    \ ($n >= 2) {\n    while ($n % $i == 0) {\n      $res[] = $i;\n      $n /= $i;\n\
    \    }\n    $i++;\n  }\n  return $res;\n}\n\necho '<pre>';\nprint_r(factorize(8));\n\
    print_r(factorize(25));\nprint_r(factorize(70));\necho '</pre>';\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n)\nArray\n(\n\
    \    [0] => 5\n    [1] => 5\n)\nArray\n(\n    [0] => 2\n    [1] => 5\n    [2]\
    \ => 7\n)\n</pre>"
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    if ($n <= 0) {\n        throw\
    \ new Exception(\"$n is not a natural number\");\n    }\n\n    $factors = [];\n\
    \    $current = 2;\n    while ($n > 1) {\n        while ($n % $current == 0) {\n\
    \            $factors[] = $current;\n            $n /= $current;\n        }\n\
    \        $current++;\n    }\n    return $factors;\n}\n\necho \"<pre>\";\nvar_dump(factorize(8));\n\
    var_dump(factorize(25));\nvar_dump(factorize(70));\necho \"</pre>\";\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>array(3) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(2)\n  [2]=>\n  int(2)\n\
    }\narray(2) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(5)\n}\narray(3) {\n  [0]=>\n\
    \  int(2)\n  [1]=>\n  int(5)\n  [2]=>\n  int(7)\n}\n</pre>"
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$result = array();\n\tfor ($i =\
    \ 2; $i <= $n; $i++) {\n\t\twhile ($n % $i == 0) {\n\t\t\t$result[] = $i;\n\t\t\
    \t$n /= $i;\n\t\t}\n\t}\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = [];\n    for ($i =\
    \ 2; $i <= $n; $i++) {\n        while ($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n /= $i;\n        }\n    }\n    return $factors;\n}\n\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5yon9516.php:20\n\
    Stack trace:\n#0 /tmp/tmp5yon9516.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp5yon9516.php\
    \ on line 20\n"
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $numbers = array();\n    for\
    \ ($i = 2; $i <= $n; $i++) {\n        while ($n % $i == 0) {\n            $numbers[]\
    \ = $i;\n            $n /= $i;\n        }\n    }\n    return $numbers;\n}\n\n\
    print_r(factorize(8));\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n)\n"
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $result = [];\n    $i = 2;\n\
    \    while($n > 1) {\n        while(($n % $i) == 0) {\n            $result[] =\
    \ $i;\n            $n /= $i;\n        }\n        $i++;\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  if ($n < 2) {\n    return array();\n\
    \  }\n  $factors = array();\n  for ($i = 2; $i <= $n; $i++) {\n    while ($n %\
    \ $i == 0) {\n      $factors[] = $i;\n      $n /= $i;\n    }\n  }\n  return $factors;\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $res = [];\n    $d = 2;\n   \
    \ while($n >= 2) {\n        while($n % $d == 0) {\n            $res[] = $d;\n\
    \            $n /= $d;\n        }\n        $d++;\n    }\n    return $res;\n}\n\
    \nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$factors = array();\n\t$factor\
    \ = 2;\n\twhile ($n > 1) {\n\t\tif ($n % $factor === 0) {\n\t\t\t$factors[] =\
    \ $factor;\n\t\t\t$n /= $factor;\n\t\t} else {\n\t\t\t$factor++;\n\t\t}\n\t}\n\
    \treturn $factors;\n}\n\necho \"8 => \".var_export(factorize(8), true).\"\\n\"\
    ;\necho \"25 => \".var_export(factorize(25), true).\"\\n\";\necho \"70 => \".var_export(factorize(70),\
    \ true).\"\\n\";\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "8 => array (\n  0 => 2,\n  1 => 2,\n  2 => 2,\n)\n25 => array (\n  0 =>\
    \ 5,\n  1 => 5,\n)\n70 => array (\n  0 => 2,\n  1 => 5,\n  2 => 7,\n)\n"
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    // $factors = array();\n    //\
    \ $result = array();\n    // for ($i = 2; $i <= sqrt($n); $i++) {\n    //    \
    \ while ($n % $i == 0) {\n    //         $factors[] = $i;\n    //         $n /=\
    \ $i;\n    //     }\n    // }\n    // if ($n > 1) {\n    //     $factors[] = $n;\n\
    \    // }\n    // foreach ($factors as $factor) {\n    //     $result[] = $factor;\n\
    \    // }\n    // return $result;\n    $factors = array();\n    for ($i = 2; $i\
    \ <= sqrt($n); $i++) {\n        while ($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n /= $i;\n        }\n    }\n    if ($n > 1) {\n        $factors[]\
    \ = $n;\n    }\n    return $factors;\n}\n\n$n = 70;\n$factors = factorize($n);\n\
    echo '<pre>';\nprint_r($factors);\necho '</pre>';\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 2\n    [1] => 5\n    [2] => 7\n)\n</pre>"
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $primeFactors = array();\n  \
    \  for ($i = 2; $i <= $n; $i++) {\n        while ($n % $i == 0) {\n          \
    \  $primeFactors[] = $i;\n            $n /= $i;\n        }\n    }\n    return\
    \ $primeFactors;\n}\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $res=array();\n    for ($i=2;\
    \ $i<=$n; $i++) {\n        while ($n%$i==0) {\n            $res[]=$i;\n      \
    \      $n/=$i;\n        }\n    }\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    // Code here ...\n    $primes\
    \ = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71,\
    \ 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157,\
    \ 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241,\
    \ 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347,\
    \ 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439,\
    \ 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541, 547,\
    \ 557, 563, 569, 571, 577, 587, 593, 599, 601, 607, 613, 617, 619, 631, 641, 643,\
    \ 647, 653, 659, 661, 673, 677, 683, 691, 701, 709, 719, 727, 733, 739, 743, 751,\
    \ 757, 761, 769, 773, 787, 797, 809, 811, 821, 823, 827, 829, 839, 853, 857, 859,\
    \ 863, 877, 881, 883, 887, 907, 911, 919, 929, 937, 941, 947, 953, 967, 971, 977,\
    \ 983, 991, 997];\n    $result = [];\n    while ($n >= 4) {\n        foreach ($primes\
    \ as $prime) {\n            if ($n % $prime == 0) {\n                $result[]\
    \ = $prime;\n                $n /= $prime;\n                break;\n         \
    \   }\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqtb14b2n.php:32\n\
    Stack trace:\n#0 /tmp/tmpqtb14b2n.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpqtb14b2n.php\
    \ on line 32\n"
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  if ($n < 2) {\n    return array();\n\
    \  }\n\n  $factors = array();\n  for ($i = 2; $i <= $n; $i++) {\n    while ($n\
    \ % $i == 0) {\n      $factors[] = $i;\n      $n /= $i;\n    }\n  }\n\n  return\
    \ $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  $prime_factors = array();\n  $i\
    \ = 2;\n  if ($n === 1) return array(1);\n  while ($n > 1) {\n    while ($n %\
    \ $i === 0) {\n      $prime_factors[] = $i;\n      $n /= $i;\n    }\n    $i++;\n\
    \  }\n  return $prime_factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    if ($n < 2) return array();\n\
    \    $factors = array();\n    // Check all numbers from 2 to sqrt($n)\n    for\
    \ ($i = 2; $i <= floor(sqrt($n)); $i++) {\n        while (($n % $i) == 0) {\n\
    \            $factors[] = $i;\n            $n /= $i;\n        }\n    }\n    //\
    \ If the number left is prime, just add it\n    if ($n > 1) $factors[] = $n;\n\
    \    return $factors;\n}\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $result = [];\n    $divisor =\
    \ 2;\n    while($n > 1) {\n        while ($n % $divisor == 0) {\n            $result[]\
    \ = $divisor;\n            $n /= $divisor;\n        }\n        $divisor++;\n \
    \   }\n    return $result;\n}\n\n$input = '83';\n$n = intval($input);\nif ($n\
    \ <= 0) {\n    echo 'Invalid input';\n} else {\n    $result = factorize($n);\n\
    \    foreach ($result as $factor) {\n        echo $factor . ' ';\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '83 '
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$factor = 2;\n\t$factors = array();\n\
    \twhile ($n > 1) {\n\t\twhile ($n % $factor == 0) {\n\t\t\t$factors[] = $factor;\n\
    \t\t\t$n /= $factor;\n\t\t}\n\t\t$factor++;\n\t}\n\treturn $factors;\n}\n\n$n\
    \ = rand(1, 100);\n\n$factors = factorize($n);\n$product = 1;\nfor ($i = 0; $i\
    \ < count($factors); $i++) {\n\t$product *= $factors[$i];\n}\n\necho $n . ' '\
    \ . $product . '<br>';\necho implode(' ', $factors);\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 16 16<br>2 2 2 2
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\tfor ($i = 2; $i <= $n; $i++) {\n\
    \t\tif ($n % $i == 0) {\n\t\t\t$f[] = $i;\n\t\t\t$n = $n / $i;\n\t\t\t$i--;\n\t\
    \t}\n\t}\n\treturn $f;\n}\n\nprint_r(factorize(8));\nprint_r(factorize(25));\n\
    print_r(factorize(70));\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n)\nArray\n(\n    [0]\
    \ => 5\n    [1] => 5\n)\nArray\n(\n    [0] => 2\n    [1] => 5\n    [2] => 7\n\
    )\n"
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = [];\n    for ($i =\
    \ 2; $i <= $n; $i++) {\n        while ($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n /= $i;\n        }\n    }\n    return $factors;\n}\n\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    // your code here\n}\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpegb_gejs.php:19\n\
    Stack trace:\n#0 /tmp/tmpegb_gejs.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpegb_gejs.php\
    \ on line 19\n"
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    // initialize array for prime\
    \ factors\n    $primeFactors = array();\n    // initialize variable for number\
    \ to factor\n    $num = $n;\n    // first prime number\n    $prime = 2;\n    //\
    \ divide out number by prime numbers\n    while ($num > 1) {\n        // divide\
    \ out prime number if it is a factor\n        while ($num % $prime == 0) {\n \
    \           // add prime number to array of prime factors\n            $primeFactors[]\
    \ = $prime;\n            // divide out prime number from number to factor\n  \
    \          $num /= $prime;\n        }\n        // increment prime number\n   \
    \     $prime++;\n    }\n    // return array of prime factors\n    return $primeFactors;\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $a = array();\n    if($n == 1)\
    \ return $a;\n    for($i = 2; $i <= $n; $i++) {\n        while($n % $i == 0) {\n\
    \            $a[] = $i;\n            $n /= $i;\n        }\n    }\n    return $a;\n\
    }\nprint_r(factorize(70));\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 2\n    [1] => 5\n    [2] => 7\n)\n"
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $result = [];\n    $max = sqrt($n);\n\
    \    for ($i = 2; $i <= $max; $i++) {\n        if (!($n % $i)) {\n           \
    \ for ($j = 0; !($n % $i); $j++) {\n                $n /= $i;\n            }\n\
    \            for ($k = 0; $k < $j; $k++) {\n                $result[] = $i;\n\
    \            }\n        }\n    }\n    if ($n != 1) {\n        $result[] = $n;\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$factors = array();\n\t$i = 2;\n\
    \twhile ($n > 1) {\n\t\twhile ($n % $i == 0) {\n\t\t\t$factors[] = $i;\n\t\t\t\
    $n /= $i;\n\t\t}\n\t\t$i++;\n\t}\n\treturn $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $res = [];\n    for ($i = 2;\
    \ $i <= $n; $i++) {\n        while ($n % $i == 0) {\n            $res[] = $i;\n\
    \            $n /= $i;\n        }\n    }\n    return $res;\n}\n\necho \"<pre>\"\
    ;\nprint_r(factorize(8));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(factorize(25));\n\
    echo \"</pre>\";\n\necho \"<pre>\";\nprint_r(factorize(70));\necho \"</pre>\"\
    ;\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n)\n</pre><pre>Array\n\
    (\n    [0] => 5\n    [1] => 5\n)\n</pre><pre>Array\n(\n    [0] => 2\n    [1] =>\
    \ 5\n    [2] => 7\n)\n</pre>"
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\tfor ($i = 2; $i < $n; $i++) {\n\
    \t\twhile ($n % $i == 0) {\n\t\t\t$res[] = $i;\n\t\t\t$n /= $i;\n\t\t}\n\t}\n\t\
    if ($n > 1) {\n\t\t$res[] = $n;\n\t}\n\treturn $res;\n}\necho \"factorize(8) =\
    \ \";\nprint_r(factorize(8));\necho \"factorize(25) = \";\nprint_r(factorize(25));\n\
    echo \"factorize(70) = \";\nprint_r(factorize(70));\necho \"factorize(179) = \"\
    ;\nprint_r(factorize(179));\necho \"factorize(10) = \";\nprint_r(factorize(10));\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "factorize(8) = Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n)\n\
    factorize(25) = Array\n(\n    [0] => 5\n    [1] => 5\n)\nfactorize(70) = Array\n\
    (\n    [0] => 2\n    [1] => 5\n    [2] => 7\n)\nfactorize(179) = Array\n(\n  \
    \  [0] => 179\n)\nfactorize(10) = Array\n(\n    [0] => 2\n    [1] => 5\n)\n"
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n$factors = [];\n$i = 2;\nwhile ($n\
    \ > 1) {\n    while ($n % $i == 0) {\n        $factors[] = $i;\n        $n /=\
    \ $i;\n    }\n    $i++;\n}\nreturn $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $result = [];\n    $divider =\
    \ 2;\n    while ($n != 1) {\n        if ($n % $divider == 0) {\n            $result[]\
    \ = $divider;\n            $n /= $divider;\n        } else {\n            $divider++;\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$f = array();\n\tfor ($i = 2; $i\
    \ <= $n; $i++) {\n\t\tif (0 == $n % $i) {\n\t\t\t$f[] = $i;\n\t\t\t$n /= $i;\n\
    \t\t\t$i = 1;\n\t\t}\n\t}\n\treturn $f;\n}\n\nfunction candidate(...$args) {\n\
    \    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $res = [];\n    $arr = [2, 3,\
    \ 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
    \ 83, 89, 97];\n    foreach ($arr as $item) {\n        if ($n % $item == 0) {\n\
    \            $res[] = $item;\n            $n = $n / $item;\n        }\n    }\n\
    \    return $res;\n}\n\nprint_r(factorize(8));\nprint_r(factorize(25));\nprint_r(factorize(70));\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 2\n)\nArray\n(\n    [0] => 5\n)\nArray\n(\n    [0]\
    \ => 2\n    [1] => 5\n    [2] => 7\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp21v3dbt4.php:32\nStack trace:\n#0 /tmp/tmp21v3dbt4.php(41):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp21v3dbt4.php on line 32\n"
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  $d = 2;\n  $factors = array();\n\
    \  while ($n > 1) {\n    while ($n % $d == 0) {\n      $factors[] = $d;\n    \
    \  $n /= $d;\n    }\n    $d++;\n  }\n  return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = [];\n    $i = 2;\n\
    \    while ($n > 1) {\n        while ($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n /= $i;\n        }\n        $i++;\n    }\n    return $factors;\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\tfor ($i = 2; $i <= $n; $i++) {\n\
    \t\tif ($n % $i == 0) {\n\t\t\t$arr[] = $i;\n\t\t\t$n = $n / $i;\n\t\t\t$i = 1;\n\
    \t\t}\n\t}\n\treturn $arr;\n}\nprint_r(factorize(70));\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 2\n    [1] => 5\n    [2] => 7\n)\n"
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  if ($n <= 0) {\n    throw new Exception('Invalid\
    \ argument.');\n  }\n  $primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37,\
    \ 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113,\
    \ 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199,\
    \ 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293,\
    \ 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397,\
    \ 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491,\
    \ 499, 503, 509, 521, 523, 541, 547, 557, 563, 569, 571, 577, 587, 593, 599, 601,\
    \ 607, 613, 617, 619, 631, 641, 643, 647, 653, 659, 661, 673, 677, 683, 691, 701,\
    \ 709, 719, 727, 733, 739, 743, 751, 757, 761, 769, 773, 787, 797, 809, 811, 821,\
    \ 823, 827, 829, 839, 853, 857, 859, 863, 877, 881, 883, 887, 907, 911, 919, 929,\
    \ 937, 941, 947, 953, 967, 971, 977, 983, 991, 997];\n  $factors = [];\n  foreach\
    \ ($primes as $p) {\n    while ($n % $p == 0) {\n      $factors[] = $p;\n    \
    \  $n /= $p;\n    }\n  }\n  return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  $factors = [];\n  $factor = 2;\n\
    \  while ($n > 1) {\n    while ($n % $factor == 0) {\n      $factors[] = $factor;\n\
    \      $n /= $factor;\n    }\n    $factor++;\n  }\n  return $factors;\n}\n\necho\
    \ \"8 => \";\nprint_r(factorize(8));\necho \"25 => \";\nprint_r(factorize(25));\n\
    echo \"70 => \";\nprint_r(factorize(70));\necho \"120 => \";\nprint_r(factorize(120));\n\
    echo \"576 => \";\nprint_r(factorize(576));\necho \"1024 => \";\nprint_r(factorize(1024));\n\
    echo \"3888 => \";\nprint_r(factorize(3888));\necho \"5832 => \";\nprint_r(factorize(5832));\n\
    echo \"7775 => \";\nprint_r(factorize(7775));\necho \"13122 => \";\nprint_r(factorize(13122));\n\
    echo \"23232 => \";\nprint_r(factorize(23232));\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "8 => Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n)\n25 => Array\n\
    (\n    [0] => 5\n    [1] => 5\n)\n70 => Array\n(\n    [0] => 2\n    [1] => 5\n\
    \    [2] => 7\n)\n120 => Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n\
    \    [3] => 3\n    [4] => 5\n)\n576 => Array\n(\n    [0] => 2\n    [1] => 2\n\
    \    [2] => 2\n    [3] => 2\n    [4] => 2\n    [5] => 2\n    [6] => 3\n    [7]\
    \ => 3\n)\n1024 => Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n    [3]\
    \ => 2\n    [4] => 2\n    [5] => 2\n    [6] => 2\n    [7] => 2\n    [8] => 2\n\
    \    [9] => 2\n)\n3888 => Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n\
    \    [3] => 2\n    [4] => 3\n    [5] => 3\n    [6] => 3\n    [7] => 3\n    [8]\
    \ => 3\n)\n5832 => Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n    [3]\
    \ => 3\n    [4] => 3\n    [5] => 3\n    [6] => 3\n    [7] => 3\n    [8] => 3\n\
    )\n7775 => Array\n(\n    [0] => 5\n    [1] => 5\n    [2] => 311\n)\n13122 => Array\n\
    (\n    [0] => 2\n    [1] => 3\n    [2] => 3\n    [3] => 3\n    [4] => 3\n    [5]\
    \ => 3\n    [6] => 3\n    [7] => 3\n    [8] => 3\n)\n23232 => Array\n(\n    [0]\
    \ => 2\n    [1] => 2\n    [2] => 2\n    [3] => 2\n    [4] => 2\n    [5] => 2\n\
    \    [6] => 3\n    [7] => 11\n    [8] => 11\n)\n"
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  $result = [];\n  $i = 2;\n  while\
    \ ($n > 1) {\n    if ($n % $i == 0) {\n      $result[] = $i;\n      $n /= $i;\n\
    \    } else {\n      $i++;\n    }\n  }\n  return $result;\n}\n\n$n = 8;\n$result\
    \ = factorize($n);\nprint_r($result);\n\n$n = 25;\n$result = factorize($n);\n\
    print_r($result);\n\n$n = 70;\n$result = factorize($n);\nprint_r($result);\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n)\nArray\n(\n    [0]\
    \ => 5\n    [1] => 5\n)\nArray\n(\n    [0] => 2\n    [1] => 5\n    [2] => 7\n\
    )\n"
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  $factors = [];\n  for ($i = 2;\
    \ $i <= $n; $i++) {\n    if ($n % $i == 0) {\n      $factors[] = $i;\n      $n\
    \ /= $i;\n      $i = 1;\n    }\n  }\n  return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  $result = [];\n  $i = 2;\n  while\
    \ ($n > 1) {\n    if ($n % $i == 0) {\n      $result[] = $i;\n      $n /= $i;\n\
    \    } else {\n      $i++;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$res = array();\n\twhile ($n %\
    \ 2 == 0) {\n\t\t$res[] = 2;\n\t\t$n /= 2;\n\t}\n\t$check = 3;\n\twhile ($n >\
    \ 1) {\n\t\twhile ($n % $check == 0) {\n\t\t\t$res[] = $check;\n\t\t\t$n /= $check;\n\
    \t\t}\n\t\t$check += 2;\n\t}\n\treturn $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    // create an array to put prime\
    \ factors into\n    $prime_factors = array();\n    // $i is the potential prime\
    \ factor we are testing.\n    for ($i = 2; $i <= $n; $i++) {\n        // $x is\
    \ used to test if the potential prime factor is truly a prime factor\n       \
    \ // $x could be declared inside the while loop, but because it is reused it is\
    \ declared outside\n        $x = 0;\n        // while $i is a prime factor, add\
    \ it to the prime_factors array\n        while ($n % $i == 0) {\n            $n\
    \ = $n / $i;\n            $x++;\n        }\n        // if $x is not 0, then $i\
    \ is a prime factor, so add it to the array $x times.\n        if ($x != 0) {\n\
    \            array_push($prime_factors, str_repeat($i, $x));\n        }\n    }\n\
    \    // return the array of prime factors.\n    return $prime_factors;\n}\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1gjtcssj.php:37\n\
    Stack trace:\n#0 /tmp/tmp1gjtcssj.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp1gjtcssj.php\
    \ on line 37\n"
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$res = array();\n\tfor ($i = 2;\
    \ $i <= $n; $i++) {\n\t\twhile ($n % $i == 0) {\n\t\t\t$res[] = $i;\n\t\t\t$n\
    \ /= $i;\n\t\t}\n\t}\n\treturn $res;\n}\n\nprint_r(factorize(8));\nprint_r(factorize(25));\n\
    print_r(factorize(70));\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n)\nArray\n(\n    [0]\
    \ => 5\n    [1] => 5\n)\nArray\n(\n    [0] => 2\n    [1] => 5\n    [2] => 7\n\
    )\n"
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $result = [];\n    for ($i =\
    \ 2; $i <= $n; $i++) {\n        while ($n % $i == 0) {\n            $result[]\
    \ = $i;\n            $n /= $i;\n        }\n    }\n    return $result;\n}\n\n$tests\
    \ = [\n    8 => [2, 2, 2],\n    25 => [5, 5],\n    70 => [2, 5, 7],\n];\n\nforeach\
    \ ($tests as $input => $expected) {\n    $actual = factorize($input);\n    if\
    \ ($actual !== $expected) {\n        echo \"Input: $input, Expected: $expected,\
    \ Actual: $actual\\n\";\n    }\n}\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5yon9516.php:20\n\
    Stack trace:\n#0 /tmp/tmp5yon9516.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp5yon9516.php\
    \ on line 20\n"
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $result = [];\n    $i = 2;\n\
    \    while ($n > 1) {\n        while ($n % $i == 0) {\n            $result[] =\
    \ $i;\n            $n /= $i;\n        }\n        $i++;\n    }\n    return $result;\n\
    }\nvar_dump(factorize(70));\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(3) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(5)\n  [2]=>\n  int(7)\n}\n"
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = [];\n    for ($i =\
    \ 2; $i <= $n; $i++) {\n        while ($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n /= $i;\n        }\n    }\n    return $factors;\n}\n\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$result = array();\n\t\n\t$factors\
    \ = array(2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61,\
    \ 67, 71, 73, 79, 83, 89, 97);\n\tforeach ($factors as $factor) {\n\t\twhile (($n\
    \ % $factor) == 0) {\n\t\t\t$result[] = $factor;\n\t\t\t$n /= $factor;\n\t\t}\n\
    \t}\n\treturn $result;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $arr = [];\n    $res = [];\n\
    \    for ($i = 2; $i < $n; $i++) {\n        if ($n % $i == 0) {\n            array_push($arr,\
    \ $i);\n        }\n    }\n    if (count($arr) == 0) {\n        array_push($res,\
    \ $n);\n    } else {\n        for ($i = 0; $i < count($arr); $i++) {\n       \
    \     $n = $n / $arr[$i];\n            array_push($res, $arr[$i]);\n        }\n\
    \    }\n    return $res;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnik_h28z.php:36\n\
    Stack trace:\n#0 /tmp/tmpnik_h28z.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpnik_h28z.php\
    \ on line 36\n"
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $arr = [];\n    $fact = 2;\n\
    \    while ($n !== 1) {\n        if ($n % $fact === 0) {\n            $arr[] =\
    \ $fact;\n            $n /= $fact;\n        } else {\n            $fact++;\n \
    \       }\n    }\n    return $arr;\n}\n\n$n = 70;\necho \"<h2>L\u1EA5y c\xE1c\
    \ y\u1EBFu t\u1ED1 nguy\xEAn t\u1ED1 c\u1EE7a $n</h2>\";\necho \"S\u1ED1 y\u1EBF\
    u t\u1ED1 nguy\xEAn t\u1ED1 c\u1EE7a $n l\xE0 \" . implode(', ', factorize($n));\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<h2>L\u1EA5y c\xE1c y\u1EBFu t\u1ED1 nguy\xEAn t\u1ED1 c\u1EE7a 70</h2>S\u1ED1\
    \ y\u1EBFu t\u1ED1 nguy\xEAn t\u1ED1 c\u1EE7a 70 l\xE0 2, 5, 7"
  timestamp: 1659979539
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\tif ( $n == 1 ) {\n\t\treturn array();\n\
    \t}\n\telseif ( $n == 2 ) {\n\t\treturn array(2);\n\t}\n\telseif ( $n == 3 ) {\n\
    \t\treturn array(3);\n\t}\n\telseif ( $n == 4 ) {\n\t\treturn array(2, 2);\n\t\
    }\n\telseif ( $n == 5 ) {\n\t\treturn array(5);\n\t}\n\telseif ( $n == 6 ) {\n\
    \t\treturn array(2, 3);\n\t}\n\telseif ( $n == 7 ) {\n\t\treturn array(7);\n\t\
    }\n\telseif ( $n == 8 ) {\n\t\treturn array(2, 2, 2);\n\t}\n\telseif ( $n == 9\
    \ ) {\n\t\treturn array(3, 3);\n\t}\n\telseif ( $n == 10 ) {\n\t\treturn array(2,\
    \ 5);\n\t}\n\telseif ( $n == 11 ) {\n\t\treturn array(11);\n\t}\n\telseif ( $n\
    \ == 12 ) {\n\t\treturn array(2, 2, 3);\n\t}\n\telseif ( $n == 13 ) {\n\t\treturn\
    \ array(13);\n\t}\n\telseif ( $n == 14 ) {\n\t\treturn array(2, 7);\n\t}\n\telseif\
    \ ( $n == 15 ) {\n\t\treturn array(3, 5);\n\t}\n\telseif ( $n == 16 ) {\n\t\t\
    return array(2, 2, 2, 2);\n\t}\n\telseif ( $n == 17 ) {\n\t\treturn array(17);\n\
    \t}\n\telseif ( $n == 18 ) {\n\t\treturn array(2, 3, 3);\n\t}\n\telseif ( $n ==\
    \ 19 ) {\n\t\treturn array(19);\n\t}\n\telseif ( $n == 20 ) {\n\t\treturn array(2,\
    \ 2, 5);\n\t}\n\telseif ( $n == 21 ) {\n\t\treturn array(3, 7);\n\t}\n\telseif\
    \ ( $n == 22 ) {\n\t\treturn array(\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpyp6qom5f.php on line 77

    '
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factor = array();\n    $divisor\
    \ = 2;\n    while ($n > 1) {\n        while ($n % $divisor == 0) {\n         \
    \   $factor[] = $divisor;\n            $n /= $divisor;\n        }\n        $divisor++;\n\
    \    }\n    return $factor;\n}\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$result = array();\n\t$i = 2;\n\
    \twhile($n > 1) {\n\t\tif ($n % $i == 0) {\n\t\t\t$result[] = $i;\n\t\t\t$n =\
    \ $n / $i;\n\t\t} else {\n\t\t\t$i++;\n\t\t}\n\t}\n\treturn $result;\n}\n\nvar_dump(factorize(8));\n\
    var_dump(factorize(25));\nvar_dump(factorize(70));\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(3) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(2)\n  [2]=>\n  int(2)\n}\n\
    array(2) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(5)\n}\narray(3) {\n  [0]=>\n  int(2)\n\
    \  [1]=>\n  int(5)\n  [2]=>\n  int(7)\n}\n"
  timestamp: 1659979539
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  if ($n <= 0) {\n    return null;\n\
    \  }\n  $factors = [];\n  while ($n % 2 == 0) {\n    $factors[] = 2;\n    $n /=\
    \ 2;\n  }\n  for ($i = 3; $i <= sqrt($n); $i += 2) {\n    while ($n % $i == 0)\
    \ {\n      $factors[] = $i;\n      $n /= $i;\n    }\n  }\n  if ($n > 2) {\n  \
    \  $factors[] = $n;\n  }\n  return $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$factors = array();\n\t$primes\
    \ = get_primes_up_to($n);\n\tforeach ($primes as $p) {\n\t\twhile ($n % $p ==\
    \ 0) {\n\t\t\t$factors[] = $p;\n\t\t\t$n /= $p;\n\t\t}\n\t}\n\treturn $factors;\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_primes_up_to()\
    \ in /tmp/tmp05xwvqnh.php:13\nStack trace:\n#0 /tmp/tmp05xwvqnh.php(24): factorize(2)\n\
    #1 /tmp/tmp05xwvqnh.php(28): candidate(2)\n#2 /tmp/tmp05xwvqnh.php(38): test()\n\
    #3 {main}\n  thrown in /tmp/tmp05xwvqnh.php on line 13\n"
  timestamp: 1659979539
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\tif($n < 2) return array();\n\t\
    $factors = array();\n\twhile($n % 2 == 0) {\n\t\t$factors[] = 2;\n\t\t$n /= 2;\n\
    \t}\n\tfor($i = 3; $i <= sqrt($n); $i+=2) {\n\t\twhile($n % $i == 0) {\n\t\t\t\
    $factors[] = $i;\n\t\t\t$n /= $i;\n\t\t}\n\t}\n\tif($n > 2) {\n\t\t$factors[]\
    \ = $n;\n\t}\n\treturn $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $stack = [];\n    for ($i = 2;\
    \ $i <= $n; $i++) {\n        if ($n % $i == 0) {\n            $n /= $i;\n    \
    \        $stack[] = $i;\n            $i--;\n        }\n    }\n    return $stack;\n\
    }\n\nprint_r(factorize(8));\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n)\n"
  timestamp: 1659979539
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = [];\n    $divisor\
    \ = 2;\n    while ($n > 1) {\n        while ($n % $divisor == 0) {\n         \
    \   $factors[] = $divisor;\n            $n /= $divisor;\n        }\n        $divisor++;\n\
    \    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  $result = [];\n  for ($i = 2; $i\
    \ <= $n; $i++) {\n    while ($n % $i == 0) {\n      $result[] = $i;\n      $n\
    \ /= $i;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$factors = array();\n\t$i = 2;\n\
    \twhile ($n > 1) {\n\t\twhile ($n % $i == 0) {\n\t\t\t$factors[] = $i;\n\t\t\t\
    $n /= $i;\n\t\t}\n\t\t$i++;\n\t}\n\treturn $factors;\n}\n\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\tif($n == 1) {\n\t\treturn [];\n\
    \t}\n\t$i = 2;\n\t$res = [];\n\twhile($n > 1) {\n\t\tif($n % $i == 0) {\n\t\t\t\
    $res[] = $i;\n\t\t\t$n /= $i;\n\t\t} else {\n\t\t\t$i++;\n\t\t}\n\t}\n\treturn\
    \ $res;\n}\n\nvar_dump(factorize(8));\nvar_dump(factorize(25));\nvar_dump(factorize(70));\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(3) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(2)\n  [2]=>\n  int(2)\n}\n\
    array(2) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(5)\n}\narray(3) {\n  [0]=>\n  int(2)\n\
    \  [1]=>\n  int(5)\n  [2]=>\n  int(7)\n}\n"
  timestamp: 1659979539
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = [];\n    if ($n <=\
    \ 1) {\n        return $factors;\n    }\n\n    for ($i = 2; $i <= $n; $i++) {\n\
    \        if ($n % $i == 0) {\n            array_push($factors, $i);\n        \
    \    return array_merge($factors, factorize($n / $i));\n        }\n    }\n}\n\n\
    var_dump(factorize(8));\nvar_dump(factorize(25));\nvar_dump(factorize(70));\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(3) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(2)\n  [2]=>\n  int(2)\n}\n\
    array(2) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(5)\n}\narray(3) {\n  [0]=>\n  int(2)\n\
    \  [1]=>\n  int(5)\n  [2]=>\n  int(7)\n}\n"
  timestamp: 1659979539
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $result = [];\n    $i = 2;\n\
    \    while ($n > 1) {\n        if ($n % $i == 0) {\n            $result[] = $i;\n\
    \            $n /= $i;\n        } else {\n            $i++;\n        }\n    }\n\
    \    return $result;\n}\necho json_encode(factorize(8));\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '[2,2,2]'
  timestamp: 1659979539
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  for ($i = 2; $i <= $n; $i++) {\n\
    \    $factors = array();\n    while ($n % $i == 0) {\n      $factors[] = $i;\n\
    \      $n /= $i;\n    }\n  }\n  return $factors;\n}\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp56sbs79e.php:29\n\
    Stack trace:\n#0 /tmp/tmp56sbs79e.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp56sbs79e.php\
    \ on line 29\n"
  timestamp: 1659979539
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = [];\n    $rest = $n;\n\
    \    for ($i = 2; $i <= $n; $i++) {\n        if ($rest % $i == 0) {\n        \
    \    $factors[] = $i;\n            $rest /= $i;\n            $i--;\n        }\n\
    \    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$n = intval($n);\n\t$arr = array();\n\
    \tfor ($i = 2; $i <= $n; $i++) {\n\t\tif ($n % $i == 0) {\n\t\t\tarray_push($arr,\
    \ $i);\n\t\t\t$n = $n / $i;\n\t\t\t$i = 1;\n\t\t}\n\t}\n\treturn $arr;\n}\nprint_r(factorize(8));\n\
    print_r(factorize(25));\nprint_r(factorize(70));\nprint_r(factorize(1024));\n\
    print_r(factorize(810));\nprint_r(factorize(38));\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n)\nArray\n(\n    [0]\
    \ => 5\n    [1] => 5\n)\nArray\n(\n    [0] => 2\n    [1] => 5\n    [2] => 7\n\
    )\nArray\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n    [3] => 2\n    [4] =>\
    \ 2\n    [5] => 2\n    [6] => 2\n    [7] => 2\n    [8] => 2\n    [9] => 2\n)\n\
    Array\n(\n    [0] => 2\n    [1] => 3\n    [2] => 3\n    [3] => 3\n    [4] => 3\n\
    \    [5] => 5\n)\nArray\n(\n    [0] => 2\n    [1] => 19\n)\n"
  timestamp: 1659979539
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  $factors = [];\n  for ($i = 2;\
    \ $i <= $n; $i++) {\n    if ($n % $i == 0) {\n      array_push($factors, $i);\n\
    \      $n = $n / $i;\n      $i = 2;\n    }\n  }\n  return $factors;\n}\nprint_r(factorize(8));\n\
    \nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 2\n    [1] => 4\n)\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp7n3hbcst.php:30\nStack trace:\n#0 /tmp/tmp7n3hbcst.php(39):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp7n3hbcst.php on line 30\n"
  timestamp: 1659979539
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\tif ($n < 2) {\n\t\treturn null;\n\
    \t}\n\t$res = array();\n\t$i = 2;\n\twhile ($n > 1) {\n\t\tif ($n % $i == 0) {\n\
    \t\t\t$res[] = $i;\n\t\t\t$n /= $i;\n\t\t} else {\n\t\t\t$i++;\n\t\t}\n\t}\n\t\
    return $res;\n}\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  $result = [];\n  for ($i = 2; $i\
    \ <= $n; $i++) {\n    while ($n % $i == 0) {\n      $result[] = $i;\n      $n\
    \ /= $i;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$factors = array();\n\twhile ($n\
    \ % 2 == 0) {\n\t\t$factors[] = 2;\n\t\t$n /= 2;\n\t}\n\tfor ($i = 3; $i <= sqrt($n);\
    \ $i += 2) {\n\t\twhile ($n % $i == 0) {\n\t\t\t$factors[] = $i;\n\t\t\t$n /=\
    \ $i;\n\t\t}\n\t}\n\tif ($n > 2) {\n\t\t$factors[] = $n;\n\t}\n\treturn $factors;\n\
    }\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$result = array();\n\t$f = 2;\n\
    \twhile ($n > 1) {\n\t\twhile ($n % $f == 0) {\n\t\t\t$result[] = $f;\n\t\t\t\
    $n /= $f;\n\t\t}\n\t\t$f += 1;\n\t}\n\treturn $result;\n}\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factor = 2;\n    $factors =\
    \ array();\n    while ($n > 1) {\n        while ($n % $factor == 0) {\n      \
    \      $factors[] = $factor;\n            $n /= $factor;\n        }\n        $factor++;\n\
    \    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  if ($n <= 1) return array();\n\
    \  $primes = array();\n  for ($i = 2; $i <= $n; $i++) {\n    if (fmod($n, $i)\
    \ == 0) {\n      $n /= $i;\n      $primes[] = $i;\n      $i--;\n    }\n  }\n \
    \ return $primes;\n}\n\nprint_r(factorize(70));\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 2\n    [1] => 5\n    [2] => 7\n)\n"
  timestamp: 1659979539
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$factors = array();\n\t$i = 2;\n\
    \twhile ($n > 1) {\n\t\twhile ($n % $i == 0) {\n\t\t\t$factors[] = $i;\n\t\t\t\
    $n /= $i;\n\t\t}\n\t\t$i++;\n\t}\n\treturn $factors;\n}\n\n$n = 70;\n$f = factorize($n);\n\
    \nvar_dump($f);\n\n$product = 1;\nforeach ($f as $i) {\n\t$product *= $i;\n}\n\
    \necho \"product: \".$product.\"\\n\";\n\nif ($product == $n) {\n\techo \"Success!\\\
    n\";\n} else {\n\techo \"Failure!\\n\";\n}\n\nfunction candidate(...$args) {\n\
    \    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(3) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(5)\n  [2]=>\n  int(7)\n}\n\
    product: 70\nSuccess!\n"
  timestamp: 1659979539
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$primes = array();\n\t$res = array();\n\
    \t// find all prime numbers until n\n\tfor ($i = 2; $i <= $n; $i++) {\n\t\t$isPrime\
    \ = true;\n\t\tforeach ($primes as $p) {\n\t\t\tif ($i % $p == 0) {\n\t\t\t\t\
    $isPrime = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ($isPrime)\n\t\t\t$primes[]\
    \ = $i;\n\t}\n\t// factorize\n\tforeach ($primes as $p) {\n\t\tif ($n % $p ==\
    \ 0) {\n\t\t\t$res[] = $p;\n\t\t\t$n /= $p;\n\t\t}\n\t}\n\treturn $res;\n}\n\n\
    print_r(factorize(8)); // array(2, 2, 2)\nprint_r(factorize(25)); // array(5,\
    \ 5)\nprint_r(factorize(70)); // array(2, 5, 7)\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 2\n)\nArray\n(\n    [0] => 5\n)\nArray\n(\n    [0]\
    \ => 2\n    [1] => 5\n    [2] => 7\n)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpu857_d_x.php:45\nStack trace:\n#0 /tmp/tmpu857_d_x.php(54):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpu857_d_x.php on line 45\n"
  timestamp: 1659979539
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $c = 0;\n    $out = array();\n\
    \    $div = 2;\n    while ($n > 1) {\n        while ($n % $div == 0) {\n     \
    \       $n /= $div;\n            $out[$c] = $div;\n            $c++;\n       \
    \ }\n        $div++;\n    }\n    return $out;\n}\necho '<pre>';\nprint_r(factorize(8));\n\
    echo '</pre>';\necho '<pre>';\nprint_r(factorize(25));\necho '</pre>';\necho '<pre>';\n\
    print_r(factorize(70));\necho '</pre>';\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n)\n</pre><pre>Array\n\
    (\n    [0] => 5\n    [1] => 5\n)\n</pre><pre>Array\n(\n    [0] => 2\n    [1] =>\
    \ 5\n    [2] => 7\n)\n</pre>"
  timestamp: 1659979539
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = [];\n    for ($divisor\
    \ = 2; $n > 1; $divisor++) {\n        for (; $n % $divisor == 0; $n /= $divisor)\
    \ {\n            $factors[] = $divisor;\n        }\n    }\n    return $factors;\n\
    }\n\n$factors = factorize(8);\nforeach ($factors as $factor) {\n    echo $factor\
    \ . '<br>';\n}\necho '<br>';\n$factors = factorize(25);\nforeach ($factors as\
    \ $factor) {\n    echo $factor . '<br>';\n}\necho '<br>';\n$factors = factorize(70);\n\
    foreach ($factors as $factor) {\n    echo $factor . '<br>';\n}\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 2<br>2<br>2<br><br>5<br>5<br><br>2<br>5<br>7<br>
  timestamp: 1659979539
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$result = array();\n\t$i = 2;\n\
    \t$tmp = $n;\n\t$max = round(sqrt($n), PHP_ROUND_HALF_DOWN);\n\t// while (($i\
    \ * $i) <= $n) {\n\twhile ($i <= $max) {\n\t\twhile ($tmp % $i == 0) {\n\t\t\t\
    $result[] = $i;\n\t\t\t$tmp /= $i;\n\t\t}\n\t\t$i++;\n\t}\n\tif ($tmp > 1) {\n\
    \t\t$result[] = $tmp;\n\t}\n\treturn $result;\n}\n\n$n = rand(10, 500);\necho\
    \ $n . \" = \" . implode(\" * \", factorize($n)) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '426 = 2 * 3 * 71

    '
  timestamp: 1659979539
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\tif ($n < 2) {\n\t\treturn array();\n\
    \t}\n\n\t$factors = array();\n\tfor ($i = 2; $i < $n / 2; $i++) {\n\t\twhile ($n\
    \ % $i == 0) {\n\t\t\t$factors[] = $i;\n\t\t\t$n /= $i;\n\t\t}\n\t}\n\n\tif ($n\
    \ > 1) {\n\t\t$factors[] = $n;\n\t}\n\n\treturn $factors;\n}\n\nprint_r(factorize(70));\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 2\n    [1] => 5\n    [2] => 7\n)\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpc9e6r4nf.php:38\nStack trace:\n#0 /tmp/tmpc9e6r4nf.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpc9e6r4nf.php on line 38\n"
  timestamp: 1659979539
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = [];\n    $d = 2;\n\
    \    while ($n > 1) {\n        while ($n % $d == 0) {\n            $factors[]\
    \ = $d;\n            $n /= $d;\n        }\n        $d = $d == 2 ? 3 : $d + 2;\n\
    \    }\n    return $factors;\n}\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = [];\n    if (!is_integer($n))\
    \ {\n        return $factors;\n    }\n    for ($i = 2; $i <= $n; $i++) {\n   \
    \     while ($n % $i == 0) {\n            $factors[] = $i;\n            $n /=\
    \ $i;\n        }\n    }\n    return $factors;\n}\n\nvar_dump(factorize(8));\n\
    var_dump(factorize(25));\nvar_dump(factorize(70));\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(3) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(2)\n  [2]=>\n  int(2)\n}\n\
    array(2) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(5)\n}\narray(3) {\n  [0]=>\n  int(2)\n\
    \  [1]=>\n  int(5)\n  [2]=>\n  int(7)\n}\n"
  timestamp: 1659979539
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = [];\n    $d = 2;\n\
    \    while ($n > 1) {\n        while ($n % $d == 0) {\n            $factors[]\
    \ = $d;\n            $n /= $d;\n        }\n        $d = $d == 2 ? 3 : $d + 2;\n\
    \    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = [];\n    $test_prime\
    \ = 2;\n    while ($n !== 1) {\n        if ($n % $test_prime === 0) {\n      \
    \      $factors[] = $test_prime;\n            $n /= $test_prime;\n        } else\
    \ {\n            $test_prime++;\n        }\n    }\n    return $factors;\n}\n\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    // Write your code here\n   \
    \ $result = [];\n    $factor = 2;\n    while ($n != 1) {\n        while ($n %\
    \ $factor == 0) {\n            $result[] = $factor;\n            $n /= $factor;\n\
    \        }\n        $factor++;\n    }\n    return $result;\n}\n\necho implode(\"\
    , \", factorize(8)) . \"\\n\";\necho implode(\", \", factorize(25)) . \"\\n\"\
    ;\necho implode(\", \", factorize(70)) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '2, 2, 2

    5, 5

    2, 5, 7

    '
  timestamp: 1659979539
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $result = [];\n    $factors =\
    \ [];\n    $counter = 0;\n    while ($n % 2 == 0) {\n        $factors[$counter]\
    \ = 2;\n        $counter++;\n        $n = $n / 2;\n    }\n    for ($i = 3; $i\
    \ <= sqrt($n); $i = $i + 2) {\n        while ($n % $i == 0) {\n            $factors[$counter]\
    \ = $i;\n            $counter++;\n            $n = $n / $i;\n        }\n    }\n\
    \    if ($n > 2) {\n        $factors[$counter] = $n;\n    }\n    sort($factors);\n\
    \    $len = count($factors);\n    $j = 0;\n    $i = 0;\n    while ($i < $len)\
    \ {\n        $j = $i + 1;\n        while ($j < $len && $factors[$i] == $factors[$j])\
    \ {\n            $j++;\n        }\n        $result[] = $factors[$i];\n       \
    \ $i = $j;\n    }\n    return $result;\n}\n\n$n = readline(\"Enter the number\
    \ to factorize: \");\necho \"The prime factors are: \";\nprint_r(factorize($n));\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function readline() in\
    \ /tmp/tmpvqvs18yg.php:45\nStack trace:\n#0 {main}\n  thrown in /tmp/tmpvqvs18yg.php\
    \ on line 45\n"
  timestamp: 1659979539
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = [];\n    $divisor\
    \ = 2;\n    while ($n > 1) {\n        if ($n % $divisor == 0) {\n            $factors[]\
    \ = $divisor;\n            $n /= $divisor;\n        } else {\n            $divisor++;\n\
    \        }\n    }\n    return $factors;\n}\n\nprint_r(factorize(8));\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n)\n"
  timestamp: 1659979539
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = [];\n    $factor =\
    \ 2;\n    while ($n > 1) {\n        while ($n % $factor == 0) {\n            $factors[]\
    \ = $factor;\n            $n /= $factor;\n        }\n        $factor++;\n    }\n\
    \    return $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979538
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $result = [];\n    $divider =\
    \ 2;\n    while($n >= $divider) {\n        if ($n % $divider == 0) {\n       \
    \     $result[] = $divider;\n            $n /= $divider;\n        } else {\n \
    \           $divider++;\n        }\n    }\n    return $result;\n}\n\necho \"<pre>\"\
    ;\nprint_r(factorize(25));\necho \"</pre>\";\nfunction candidate(...$args) {\n\
    \    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 5\n    [1] => 5\n)\n</pre>"
  timestamp: 1659979539
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $primeNumbers = [];\n    for\
    \ ($i = 2; $i <= $n; $i++) {\n        while ($n % $i == 0) {\n            $primeNumbers[]\
    \ = $i;\n            $n /= $i;\n        }\n    }\n    return $primeNumbers;\n\
    }\n\necho \"<pre>\";\nprint_r(factorize(70));\necho \"</pre>\";\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 2\n    [1] => 5\n    [2] => 7\n)\n</pre>"
  timestamp: 1659979539
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $result = [];\n    $i = 2;\n\
    \    while ($n > 1) {\n        while ($n % $i == 0) {\n            $result[] =\
    \ $i;\n            $n /= $i;\n        }\n        $i++;\n    }\n    return $result;\n\
    }\nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $primes = getPrimeFactors( $n\
    \ );\n    $factors = array();\n    for ($i = 0; $i < count($primes); $i++) {\n\
    \        $current_prime = $primes[$i];\n        $temp = $n;\n        while( $temp\
    \ % $current_prime == 0 ) {\n            $factors[] = $current_prime;\n      \
    \      $temp /= $current_prime;\n        }\n    }\n    return $factors;\n}\n\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function getPrimeFactors()\
    \ in /tmp/tmptvny6y_2.php:12\nStack trace:\n#0 /tmp/tmptvny6y_2.php(26): factorize(2)\n\
    #1 /tmp/tmptvny6y_2.php(30): candidate(2)\n#2 /tmp/tmptvny6y_2.php(40): test()\n\
    #3 {main}\n  thrown in /tmp/tmptvny6y_2.php on line 12\n"
  timestamp: 1659979539
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\tif ($n === 1) {\n\t\treturn array(1);\n\
    \t}\n\tif ($n <= 0) {\n\t\treturn array(-1);\n\t}\n\t\n\t$array_factors = array();\n\
    \t$i = 2;\n\twhile ($n > 1) {\n\t\tif ($n % $i == 0) {\n\t\t\t$array_factors[]\
    \ = $i;\n\t\t\t$n = $n / $i;\n\t\t} else {\n\t\t\t$i++;\n\t\t}\n\t}\n\treturn\
    \ $array_factors;\n}\n\n/*\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: Unterminated comment starting line 32 in /tmp/tmphpywb2x6.php on
    line 32

    '
  timestamp: 1659979539
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$result = array();\n\t$d = 2;\n\
    \twhile ($n > 1) {\n\t\twhile ($n % $d == 0) {\n\t\t\t$result[] = $d;\n\t\t\t\
    $n /= $d;\n\t\t}\n\t\t$d++;\n\t}\n\treturn $result;\n}\necho \"<pre>factorize(8)\\\
    n\";\nprint_r(factorize(8));\necho \"</pre>\";\necho \"<pre>factorize(25)\\n\"\
    ;\nprint_r(factorize(25));\necho \"</pre>\";\necho \"<pre>factorize(70)\\n\";\n\
    print_r(factorize(70));\necho \"</pre>\";\n\nfunction candidate(...$args) {\n\
    \    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>factorize(8)\nArray\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n\
    )\n</pre><pre>factorize(25)\nArray\n(\n    [0] => 5\n    [1] => 5\n)\n</pre><pre>factorize(70)\n\
    Array\n(\n    [0] => 2\n    [1] => 5\n    [2] => 7\n)\n</pre>"
  timestamp: 1659979539
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    //your code here\n    $factors\
    \ = [];\n    if ($n < 1) {\n        return $factors;\n    }\n    $factor = 2;\n\
    \    while ($n > 1) {\n        while ($n % $factor == 0) {\n            $factors[]\
    \ = $factor;\n            $n /= $factor;\n        }\n        $factor++;\n    }\n\
    \    return $factors;\n}\n\nvar_dump(factorize(8));\nvar_dump(factorize(25));\n\
    var_dump(factorize(70));\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "array(3) {\n  [0]=>\n  int(2)\n  [1]=>\n  int(2)\n  [2]=>\n  int(2)\n}\n\
    array(2) {\n  [0]=>\n  int(5)\n  [1]=>\n  int(5)\n}\narray(3) {\n  [0]=>\n  int(2)\n\
    \  [1]=>\n  int(5)\n  [2]=>\n  int(7)\n}\n"
  timestamp: 1659979539
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    // 1. Make empty array to put\
    \ factors into.\n    $factors = [];\n    // 2. We need a variable to check. Here\
    \ we will use variable i, that we will increment in loop.\n    // We want to stop,\
    \ when variable i gets larger than $n, as variable i will be our divisor,\n  \
    \  // so when it gets larger than variable $n, we will not be able to divide $n\
    \ by $i.\n    // Also we want to start from 2, as we want to get all prime factors,\
    \ so 1 is out of the question.\n    for ($i = 2; $i <= $n; $i++) {\n        //\
    \ 3. While $n divided by $i is integer, we need to add $i to the $factors array,\n\
    \        // and divide $n by $i and save that as our new $n.\n        while ($n\
    \ % $i == 0) {\n            array_push($factors, $i);\n            $n = $n / $i;\n\
    \        }\n    }\n    // 4. Return $factors.\n    return $factors;\n}\nprint_r(factorize(70));\n\
    \nfunction candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "Array\n(\n    [0] => 2\n    [1] => 5\n    [2] => 7\n)\n"
  timestamp: 1659979539
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $prime = array();\n    $i = 2;\n\
    \    $count = 0;\n    while($i <= $n) {\n        if ($n % $i == 0) {\n       \
    \     $prime[$count] = $i;\n            $n = $n / $i;\n            $count++;\n\
    \        } else {\n            $i++;\n        }\n    }\n    return $prime;\n}\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $result = [];\n    $divisor =\
    \ 2;\n    while($n > 1) {\n        while($n % $divisor == 0) {\n            $result[]\
    \ = $divisor;\n            $n /= $divisor;\n        }\n        $divisor++;\n \
    \   }\n    return $result;\n}\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $result = [];\n    $number =\
    \ $n;\n    $sqrt = sqrt($n);\n    for ($i = 2; $i <= $sqrt; $i++) {\n        if\
    \ ($number % $i == 0) {\n            while ($number % $i == 0) {\n           \
    \     $result[] = $i;\n                $number /= $i;\n            }\n       \
    \ }\n    }\n    if ($number > 1) {\n        $result[] = $number;\n    }\n    return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $primes = get_primes_array($n);\n\
    \    $factors = [];\n    $current = $n;\n    foreach ($primes as $prime) {\n \
    \       while ($current % $prime == 0) {\n            $factors[] = $prime;\n \
    \           $current /= $prime;\n        }\n    }\n    return $factors;\n}\n\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_primes_array()\
    \ in /tmp/tmpwdflegip.php:12\nStack trace:\n#0 /tmp/tmpwdflegip.php(25): factorize(2)\n\
    #1 /tmp/tmpwdflegip.php(29): candidate(2)\n#2 /tmp/tmpwdflegip.php(39): test()\n\
    #3 {main}\n  thrown in /tmp/tmpwdflegip.php on line 12\n"
  timestamp: 1659979539
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  $factors = [];\n  $i = 2;\n  while\
    \ ($n != 1) {\n    if ($n % $i == 0) {\n      $factors[] = $i;\n      $n /= $i;\n\
    \    } else {\n      $i++;\n    }\n  }\n  return $factors;\n}\nfunction candidate(...$args)\
    \ {\n    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $f=[];\n    if($n==1) {\n   \
    \     return [];\n    } else {\n        while($n%2==0) {\n            $f[]=2;\n\
    \            $n=$n/2;\n        }\n        $i=3;\n        while($i<=sqrt($n)) {\n\
    \            while($n%$i==0) {\n                $f[]=$i;\n                $n=$n/$i;\n\
    \            }\n            $i=$i+2;\n        }\n        if($n>2) {\n        \
    \    $f[]=$n;\n        }\n        return $f;\n    }\n}\necho '<pre>';\nprint_r(factorize(70));\n\
    function candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: "<pre>Array\n(\n    [0] => 2\n    [1] => 5\n    [2] => 7\n)\n"
  timestamp: 1659979539
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = [];\n    $prime =\
    \ 2;\n    while ($n > 1) {\n        if ($n % $prime == 0) {\n            $factors[]\
    \ = $prime;\n            $n /= $prime;\n        } else {\n            $prime++;\n\
    \        }\n    }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n\
    \    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = [];\n    $rest = $n;\n\
    \    while($rest > 1) {\n        $next_factor = get_next_prime_factor($rest);\n\
    \        $factors[] = $next_factor;\n        $rest = $rest / $next_factor;\n \
    \   }\n    return $factors;\n}\n\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function get_next_prime_factor()\
    \ in /tmp/tmp_kahy4jp.php:15\nStack trace:\n#0 /tmp/tmp_kahy4jp.php(23): factorize(2)\n\
    #1 /tmp/tmp_kahy4jp.php(27): candidate(2)\n#2 /tmp/tmp_kahy4jp.php(37): test()\n\
    #3 {main}\n  thrown in /tmp/tmp_kahy4jp.php on line 15\n"
  timestamp: 1659979539
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\t$arr = array();\n\tfor ($i = 2;\
    \ $i <= $n; $i++) {\n\t\t$count = 0;\n\t\twhile ($n % $i == 0) {\n\t\t\t$count++;\n\
    \t\t\t$n /= $i;\n\t\t}\n\t\tif ($count != 0) {\n\t\t\tarray_push($arr, str_repeat($i,\
    \ $count));\n\t\t}\n\t}\n\treturn $arr;\n}\n\nfunction candidate(...$args) {\n\
    \    return factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2)\
    \ !== array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4)\
    \ !== array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2o_y_m12.php:31\n\
    Stack trace:\n#0 /tmp/tmp2o_y_m12.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp2o_y_m12.php\
    \ on line 31\n"
  timestamp: 1659979539
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n\tif ( $n < 2 ) {\n\t\treturn array();\n\
    \t}\n\t$factors = array();\n\twhile ($n%2==0) {\n\t\t$factors[] = 2;\n\t\t$n =\
    \ $n/2;\n\t}\n\tfor ($i=3; $i < sqrt($n); $i+=2) { \n\t\twhile ($n%$i==0) {\n\t\
    \t\t$factors[] = $i;\n\t\t\t$n = $n/$i;\n\t\t}\n\t}\n\tif ($n>2) {\n\t\t$factors[]\
    \ = $n;\n\t}\n\treturn $factors;\n}\nprint_r(factorize(8));\nprint_r(factorize(25));\n\
    print_r(factorize(70));\nfunction candidate(...$args) {\n    return factorize(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577)\
    \ !== array(3, 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(18) !== array(2, 3, 3)) { throw new Exception(\"Test failed!\");\
    \ }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Array\n(\n    [0] => 2\n    [1] => 2\n    [2] => 2\n)\nArray\n(\n    [0]\
    \ => 25\n)\nArray\n(\n    [0] => 2\n    [1] => 5\n    [2] => 7\n)\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpg1glbest.php:43\nStack trace:\n\
    #0 /tmp/tmpg1glbest.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpg1glbest.php\
    \ on line 43\n"
  timestamp: 1659979539
- exit_code: 0
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n  for ($i = 2; $i <= $n; $i++) {\n\
    \    if (0 === $n % $i) {\n      $factors[] = $i;\n      $n /= $i;\n      $i--;\n\
    \    }\n  }\n  return $factors;\n}\n\nfunction candidate(...$args) {\n    return\
    \ factorize(...$args);\n}\n\nfunction test(): void {\n    if (candidate(2) !==\
    \ array(2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(4) !==\
    \ array(2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(8)\
    \ !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(57)\
    \ !== array(3, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(3249)\
    \ !== array(3, 3, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if\
    \ (candidate(185193) !== array(3, 3, 3, 19, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(20577) !== array(3, 19, 19, 19)) { throw\
    \ new Exception(\"Test failed!\"); }\n    if (candidate(18) !== array(2, 3, 3))\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659979539
- exit_code: 255
  program: "<?php\n// Return array of prime factors of given integer in the order\
    \ from smallest to largest.\n// Each of the factors should be arrayed number of\
    \ times corresponding to how many times it appeares in factorization.\n// Input\
    \ number should be equal to the product of all factors\n// >>> factorize(8)\n\
    // array(2, 2, 2)\n// >>> factorize(25)\n// array(5, 5)\n// >>> factorize(70)\n\
    // array(2, 5, 7)\nfunction factorize($n) {\n    $factors = [];\n    while($n\
    \ % 2 == 0) {\n        $factors[] = 2;\n        $n /= 2;\n    }\n    for($i =\
    \ 3; $i <= sqrt($n); $i += 2) {\n        while($n % $i == 0) {\n            $factors[]\
    \ = $i;\n            $n /= $i;\n        }\n    }\n    if($n > 2) {\n        $factors[]\
    \ = $n;\n    }\n    return $factors;\n}\necho \"factorize(8) returns: \";\nprint_r(factorize(8));\n\
    echo \"\\n\";\necho \"factorize(25) returns: \";\nprint_r(factorize(25));\necho\
    \ \"\\n\";\necho \"factorize(70) returns: \";\nprint_r(factorize(70));\necho \"\
    \\n\";\necho \"factorize(1) returns: \";\nprint_r(factorize(1));\necho \"\\n\"\
    ;\necho \"factorize(0) returns: \";\nprint_r(factorize(0));\necho \"\\n\";\necho\
    \ \"factorize(-7) returns: \";\nprint_r(factorize(-7));\necho \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return factorize(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(2) !== array(2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(4) !== array(2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(8) !== array(2, 2, 2)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(57) !== array(3, 19)) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(3249) !== array(3, 3, 19, 19)) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(185193) !== array(3, 3, 3, 19, 19, 19))\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(20577) !== array(3,\
    \ 19, 19, 19)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(18)\
    \ !== array(2, 3, 3)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "factorize(8) returns: Array\n(\n    [0] => 2\n    [1] => 2\n    [2] =>\
    \ 2\n)\n\nfactorize(25) returns: Array\n(\n    [0] => 5\n    [1] => 5\n)\n\nfactorize(70)\
    \ returns: Array\n(\n    [0] => 2\n    [1] => 5\n    [2] => 7\n)\n\nfactorize(1)\
    \ returns: Array\n(\n)\n\nfactorize(0) returns: \nFatal error: Allowed memory\
    \ size of 134217728 bytes exhausted (tried to allocate 134217736 bytes) in /tmp/tmpzem06xlu.php\
    \ on line 14\n"
  timestamp: 1659979539
