name: HumanEval_128_prod_signs
language: php
prompt: "<?php\n// You are given an array arr of integers and you need to return\n\
  // sum of magnitudes of integers multiplied by product of all signs\n// of each\
  \ number in the array, represented by 1, -1 or 0.\n// Note: return null for empty\
  \ arr.\n// Example:\n// >>> prod_signs(array(1, 2, 2, -4))\n// 9\n// >>> prod_signs(array(0,\
  \ 1))\n// 0\n// >>> prod_signs(array())\n// null\nfunction prod_signs($arr) {\n"
tests: "function candidate(...$args) {\n    return prod_signs(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(1, 2, 2, -4)) !== -9) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(0, 1)) !== 0) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(1, 1, 1, 2, 3, -1, 1)) !== -10) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== null) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4, 1, 2, -1, -1,\
  \ 9)) !== 20) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
  \ 1, -1, 1)) !== 4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
  \ 1, 1, 1)) !== -4) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
  \ 1, 1, 0)) !== 0) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["\tif(empty($arr)) {\n\t\treturn NULL;\n\t}\n\t$sum_magnitudes = 0;\n\
    \t$product_signs = 1;\n\tfor($i = 0; $i < count($arr); $i++) {\n\t\t$sum_magnitudes\
    \ += abs($arr[$i]);\n\t\t$product_signs *= $arr[$i] <=> 0;\n\t}\n\treturn $sum_magnitudes\
    \ * $product_signs;\n}\necho prod_signs(array(1, 2, 2, -4)) . \"\\n\";\necho prod_signs(array(0,\
    \ 1)) . \"\\n\";\necho prod_signs(array()) . \"\\n\";", "\tif (empty($arr)) {\n\
    \t\treturn null;\n\t}\n\t$sum = 0;\n\t$prod = 1;\n\tforeach ($arr as $val) {\n\
    \t\t$prod *= $val <=> 0;\n\t\t$sum += abs($val);\n\t}\n\treturn $sum * $prod;\n\
    }\necho \"<pre>\";\nprint_r(prod_signs(array(1, 2, 2, -4)));\necho \"</pre>\"\
    ;\n", "\n}\n", "  if(empty($arr)){\n    return null;\n  }\n  $product = 1;\n \
    \ $sum = 0;\n  foreach($arr as $value){\n    if($value == 0){\n      $product\
    \ *= 1;\n    }\n    else if($value > 0){\n      $product *= 1;\n      $sum +=\
    \ $value;\n    }\n    else if($value < 0){\n      $product *= -1;\n      $sum\
    \ += abs($value);\n    }\n  }\n  return $sum * $product;\n}\n", "    $signs =\
    \ array();\n    $nums = array();\n    foreach ($arr as $item) {\n        if ($item\
    \ > 0) {\n            $signs[] = 1;\n        } elseif ($item < 0) {\n        \
    \    $signs[] = -1;\n        } else {\n            $signs[] = 0;\n        }\n\
    \        $nums[] = abs($item);\n    }\n    if (!empty($nums)) {\n        return\
    \ array_product($signs) * array_sum($nums);\n    } else {\n        return null;\n\
    \    }\n}", "    $prod_signs = 1;\n    $sum_magnitudes = 0;\n    if(sizeof($arr)\
    \ > 0) {\n        foreach($arr as $int) {\n            if($int == 0) {\n     \
    \           $prod_signs = 0;\n                break;\n            }\n        \
    \    else if($int > 0) {\n                $prod_signs *= 1;\n                $sum_magnitudes\
    \ += $int;\n            }\n            else {\n                $prod_signs *=\
    \ -1;\n                $sum_magnitudes += abs($int);\n            }\n        }\n\
    \        return $prod_signs * $sum_magnitudes;\n    }\n    else {\n        return\
    \ null;\n    }\n}", "  $product = 1;\n  $sum = 0;\n  foreach ($arr as $value)\
    \ {\n    $sign = 0;\n    if ($value > 0) {\n      $sign = 1;\n    } elseif ($value\
    \ < 0) {\n      $sign = -1;\n    }\n    $sum += abs($value);\n    $product *=\
    \ $sign;\n  }\n  return $sum * $product;\n}", "  $p = 1;\n  $s = 0;\n  foreach\
    \ ($arr as $value) {\n    if ($value > 0) {\n      $p *= 1;\n      $s += $value;\n\
    \    } elseif ($value < 0) {\n      $p *= -1;\n      $s += abs($value);\n    }\
    \ else {\n      $p *= 0;\n    }\n  }\n  if (count($arr) == 0) {\n    return null;\n\
    \  } else {\n    return $p * $s;\n  }\n}\n", "\tif(empty($arr)){\n\t\treturn NULL;\n\
    \t}\n\t$magnitude = array_map(function($num){\n\t\treturn abs($num);\n\t}, $arr);\n\
    \t$sign = array_map(function($num){\n\t\treturn $num <=> 0;\n\t}, $arr);\n\treturn\
    \ array_sum($magnitude) * array_product($sign);\n}", "  $sign = $val = 1;\n  foreach\
    \ ($arr as $elem) {\n    if ($elem === 0) {\n      return 0;\n    }\n    $sign\
    \ *= $elem > 0 ? 1 : -1;\n    $val += abs($elem);\n  }\n  return $sign * $val;\n\
    }\n\necho prod_signs(array(1, 2, 2, -4));\necho prod_signs(array(0, 1));\necho\
    \ prod_signs(array());\n ?>", "  if(count($arr) == 0) return null;\n  $sum = 0;\n\
    \  $prod = 1;\n  foreach($arr as $item) {\n    $prod *= $item > 0 ? 1 : ($item\
    \ < 0 ? -1 : 0);\n    $sum += abs($item);\n  }\n  return $sum * $prod;\n}\n",
  "  if (!sizeof($arr)) return null;\n  $prod = 1;\n  $sum = 0;\n  foreach ($arr as\
    \ $i) {\n    $prod *= sign($i);\n    $sum += abs($i);\n  }\n  return $prod * $sum;\n\
    }", "  \n}\n", "    if (count($arr) == 0) return null;\n    $prod = 1;\n    $sum\
    \ = 0;\n    foreach ($arr as $item) {\n        if ($item == 0) continue;\n   \
    \     $prod *= $item > 0 ? 1 : -1;\n        $sum += abs($item);\n    }\n    return\
    \ $prod * $sum;\n}\n$result = prod_signs(array(1, 2, 2, -4));\necho \"$result\\\
    n\";\n$result = prod_signs(array(0, 1));\necho \"$result\\n\";\n$result = prod_signs(array());\n\
    echo \"$result\\n\";", "  if (empty($arr)) {\n    return null;\n  }\n  $magnitudes\
    \ = array_map('abs', $arr);\n  $signs = array_map(function($n) {\n    return $n\
    \ < 0 ? -1 : 1;\n  }, $arr);\n  $product = array_product($signs);\n  return array_sum($magnitudes)\
    \ * $product;\n}\n", "    if (empty($arr)) {\n        return null;\n    }\n  \
    \  $sum = 0;\n    $product = 1;\n    foreach ($arr as $value) {\n        if ($value\
    \ > 0) {\n            $product *= 1;\n        } elseif ($value < 0) {\n      \
    \      $product *= -1;\n        } else {\n            $product *= 0;\n       \
    \ }\n        $sum += abs($value);\n    }\n    return $sum * $product;\n}\n\n$arr1\
    \ = array(1, 2, 2, -4);\n$arr2 = array(0, 1);\n$arr3 = array();\n$arr4 = array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10);\nvar_dump(prod_signs($arr1));\nvar_dump(prod_signs($arr2));\n\
    var_dump(prod_signs($arr3));\nvar_dump(prod_signs($arr4));", "  $magnitudes =\
    \ 0;\n  $signs = 1;\n  if(empty($arr)) return null;\n  foreach($arr as $val) {\n\
    \    $signs *= sign($val);\n    $magnitudes += abs($val);\n  }\n  return $magnitudes\
    \ * $signs;\n}\n", "\tif (!count($arr)) {\n\t\treturn NULL;\n\t}\n\t$product =\
    \ 1;\n\t$sum = 0;\n\tforeach ($arr as $val) {\n\t\t$sign = $val === 0 ? 0 : $val\
    \ / abs($val);\n\t\t$product *= $sign;\n\t\t$sum += abs($val);\n\t}\n\treturn\
    \ $sum * $product;\n}\n\necho prod_signs(array(1, 2, 2, -4));\necho prod_signs(array(0,\
    \ 1));\necho prod_signs(array());", "  if (empty($arr)) {\n    return null;\n\
    \  }\n\n  $signs = array();\n  $magnitudes = array();\n  foreach ($arr as $num)\
    \ {\n    $signs[] = $num > 0 ? 1 : ($num < 0 ? -1 : 0);\n    $magnitudes[] = abs($num);\n\
    \  }\n\n  return array_product($signs) * array_sum($magnitudes);\n}", "  if(count($arr)\
    \ == 0) {\n    return null;\n  }\n  $prod_signs = 1;\n  $magnitude_sum = 0;\n\
    \  foreach($arr as $num) {\n    $magnitude_sum += abs($num);\n    if($num != 0)\
    \ {\n      $prod_signs *= $num / abs($num);\n    }\n  }\n  return $magnitude_sum\
    \ * $prod_signs;\n}\necho prod_signs(array(1, 2, 2, -4));\necho \"\\n\";\necho\
    \ prod_signs(array(0, 1));\necho \"\\n\";\necho prod_signs(array());\necho \"\\\
    n\";"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
