language: php
name: HumanEval_160_do_algebra
results:
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    if(count($operator) + 1 != count($operand)){\n\
    \        return \"Incorrect arguments\";\n    }\n    $result = $operand[0];\n\
    \    for($i = 0; $i < count($operator); $i++){\n        switch($operator[$i]){\n\
    \            case '+':\n                $result += $operand[$i + 1];\n       \
    \         break;\n            case '-':\n                $result -= $operand[$i\
    \ + 1];\n                break;\n            case '*':\n                $result\
    \ *= $operand[$i + 1];\n                break;\n            case '//':\n     \
    \           $result = floor($result / $operand[$i + 1]);\n                break;\n\
    \            case '**':\n                $result = pow($result, $operand[$i +\
    \ 1]);\n                break;\n            default:\n                return \"\
    Unknown operator\";\n        }\n    }\n    return $result;\n}\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]);\necho \"\\n\";\necho do_algebra(['//', '**'], [10,\
    \ 2, 3]);\necho \"\\n\";\necho do_algebra(['+', '*', '-', '**'], [2, 3, 4, 5,\
    \ 6]);\necho \"\\n\";\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6]);\necho\
    \ \"\\n\";\necho do_algebra(['=='], [2, 3, 4, 5, 6]);\necho \"\\n\";\necho do_algebra(['*',\
    \ '-'], [2, 3, 4, 5]);\necho \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n125\n11390625\nIncorrect arguments\nIncorrect arguments\nIncorrect\
    \ arguments\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6abc_lp3.php:66\n\
    Stack trace:\n#0 /tmp/tmp6abc_lp3.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp6abc_lp3.php\
    \ on line 66\n"
  timestamp: 1659823238
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $operator_index = 0;\n    $result = $operand[0];\n\
    \    for ($i = 1; $i < count($operand); $i++) {\n        $op = $operator[$operator_index];\n\
    \        switch ($op) {\n            case '+':\n                $result += $operand[$i];\n\
    \                break;\n            case '-':\n                $result -= $operand[$i];\n\
    \                break;\n            case '*':\n                $result *= $operand[$i];\n\
    \                break;\n            case '//':\n                $result = floor($result\
    \ / $operand[$i]);\n                break;\n            case '**':\n         \
    \       $result = pow($result, $operand[$i]);\n                break;\n      \
    \  }\n        $operator_index++;\n    }\n    return $result;\n}\n\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]); // 9\necho PHP_EOL;\necho do_algebra(['+', '*', '//',\
    \ '-'], [3, 4, 2, 5]); // 0\necho PHP_EOL;\necho do_algebra(['+', '*', '//', '-'],\
    \ [5, 5, 2, 5]); // 5\necho PHP_EOL;\necho do_algebra(['*', '//', '**'], [4, 2,\
    \ 2]); // 16\necho PHP_EOL;\necho do_algebra(['*', '//', '**'], [4, 2, 2, 2]);\
    \ // 256\necho PHP_EOL;\necho do_algebra(['*', '//', '**'], [2, 4, 2, 4]); //\
    \ 2\necho PHP_EOL;\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n2\n4\n4\n16\n256\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmp5fzx0j2f.php:65\nStack trace:\n#0 /tmp/tmp5fzx0j2f.php(69): test()\n\
    #1 {main}\n  thrown in /tmp/tmp5fzx0j2f.php on line 65\n"
  timestamp: 1659823238
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    if (empty($operator) || empty($operand))\
    \ {\n        return null;\n    }\n    if (count($operator) != count($operand)\
    \ - 1) {\n        return null;\n    }\n    $result = $operand[0];\n    $len =\
    \ count($operator);\n    for ($i = 0; $i < $len; $i++) {\n        switch ($operator[$i])\
    \ {\n            case '+':\n                $result += $operand[$i + 1];\n   \
    \             break;\n            case '-':\n                $result -= $operand[$i\
    \ + 1];\n                break;\n            case '*':\n                $result\
    \ *= $operand[$i + 1];\n                break;\n            case '//':\n     \
    \           $result = floor($result / $operand[$i + 1]);\n                break;\n\
    \            case '**':\n                $result = pow($result, $operand[$i +\
    \ 1]);\n                break;\n            default:\n                break;\n\
    \        }\n    }\n    return $result;\n}\n$operator = ['+', '*', '-'];\n$operand\
    \ = [2, 3, 4, 5];\nvar_dump(do_algebra($operator, $operand));\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "int(15)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvldch3t2.php:61\n\
    Stack trace:\n#0 /tmp/tmpvldch3t2.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpvldch3t2.php\
    \ on line 61\n"
  timestamp: 1659823238
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = $operand[0];\n    for ($i =\
    \ 0; $i < count($operator); $i++) {\n        if ($operator[$i] == '+') {\n   \
    \         $result += $operand[$i + 1];\n        } else if ($operator[$i] == '-')\
    \ {\n            $result -= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == '*') {\n            $result *= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == '//') {\n            $result /= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == '**') {\n            $result **= $operand[$i + 1];\n        }\n    }\n  \
    \  return $result;\n}\necho do_algebra([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) .\
    \ PHP_EOL;\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq2fkq1dq.php:44\n\
    Stack trace:\n#0 /tmp/tmpq2fkq1dq.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpq2fkq1dq.php\
    \ on line 44\n"
  timestamp: 1659823238
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $result = $operand[0];\n  for ($i = 0;\
    \ $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n      case '+':\n\
    \        $result += $operand[$i + 1];\n        break;\n      case '-':\n     \
    \   $result -= $operand[$i + 1];\n        break;\n      case '*':\n        $result\
    \ *= $operand[$i + 1];\n        break;\n      case '//':\n        $result = floor($result\
    \ / $operand[$i + 1]);\n        break;\n      case '**':\n        $result = pow($result,\
    \ $operand[$i + 1]);\n        break;\n    }\n  }\n  return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw4hv_nfs.php:49\n\
    Stack trace:\n#0 /tmp/tmpw4hv_nfs.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpw4hv_nfs.php\
    \ on line 49\n"
  timestamp: 1659823238
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = $operand[0];\n    for ($i =\
    \ 0; $i < count($operator); $i++) {\n        if ($operator[$i] == \"+\") {\n \
    \           $result += $operand[$i + 1];\n        } else if ($operator[$i] ==\
    \ \"-\") {\n            $result -= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == \"*\") {\n            $result *= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == \"//\") {\n            $result /= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == \"**\") {\n            $result **= $operand[$i + 1];\n        }\n    }\n\
    \    return $result;\n}\n\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5]) . \"\
    \\n\"; // => 9\necho do_algebra(['+', '//', '*'], [5, 2, 4, 2]); // => 10\necho\
    \ do_algebra(['+', '-', '//', '*'], [5, 3, 2, 4, 2]); // => 10\necho do_algebra(['+',\
    \ '-', '//', '*'], [1, 2, 3, 4, 5]); // => 9\nfunction candidate(...$args) {\n\
    \    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n3.530\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjmv0bmsd.php:48\n\
    Stack trace:\n#0 /tmp/tmpjmv0bmsd.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpjmv0bmsd.php\
    \ on line 48\n"
  timestamp: 1659823238
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = 0;\n    if(count($operator)\
    \ == 0 || count($operand) == 0) {\n        return $result;\n    }\n    else {\n\
    \        for($i = 0; $i < count($operator); $i++) {\n            if($i == 0) {\n\
    \                $result = $operand[$i];\n            }\n            if($operator[$i]\
    \ == '+') {\n                $result += $operand[$i + 1];\n            }\n   \
    \         else if($operator[$i] == '-') {\n                $result -= $operand[$i\
    \ + 1];\n            }\n            else if($operator[$i] == '*') {\n        \
    \        $result *= $operand[$i + 1];\n            }\n            else if($operator[$i]\
    \ == '//') {\n                $result = floor($result / $operand[$i + 1]);\n \
    \           }\n            else if($operator[$i] == '**') {\n                $result\
    \ = pow($result, $operand[$i + 1]);\n            }\n        }\n        return\
    \ $result;\n    }\n}\nprint_r(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) . PHP_EOL);\n\
    print_r(do_algebra(['+', '//', '*', '-'], [4, 2, 4, 4, 5]) . PHP_EOL);\nprint_r(do_algebra(['*',\
    \ '**', '-'], [2, 3, 4, 5]) . PHP_EOL);\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n-1\n1291\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpczl5xe2i.php:58\n\
    Stack trace:\n#0 /tmp/tmpczl5xe2i.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpczl5xe2i.php\
    \ on line 58\n"
  timestamp: 1659823238
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $ans = $operand[0];\n    $count = 0;\n\
    \    for($i = 1; $i < count($operand); $i++){\n        switch($operator[$count]){\n\
    \            case '+':\n                $ans += $operand[$i];\n              \
    \  break;\n            case '-':\n                $ans -= $operand[$i];\n    \
    \            break;\n            case '*':\n                $ans *= $operand[$i];\n\
    \                break;\n            case '//':\n                $ans = intval($ans\
    \ / $operand[$i]);\n                break;\n            case '**':\n         \
    \       $ans = pow($ans, $operand[$i]);\n                break;\n        }\n \
    \       $count++;\n    }\n    return $ans;\n}\nfunction candidate(...$args) {\n\
    \    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb4xu8d0w.php:51\n\
    Stack trace:\n#0 /tmp/tmpb4xu8d0w.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpb4xu8d0w.php\
    \ on line 51\n"
  timestamp: 1659823238
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $result = array_shift($operand);\n  foreach\
    \ ($operator as $key => $value) {\n    $result = $value($result, $operand[$key]);\n\
    \  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function **() in /tmp/tmp3s1_drsw.php:23\n\
    Stack trace:\n#0 /tmp/tmp3s1_drsw.php(28): do_algebra(Array, Array)\n#1 /tmp/tmp3s1_drsw.php(32):\
    \ candidate(Array, Array)\n#2 /tmp/tmp3s1_drsw.php(37): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmp3s1_drsw.php on line 23\n"
  timestamp: 1659823238
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  // Write your code here\n  $result = array_shift($operand);\n\
    \  foreach($operator as $key => $value){\n    $num = array_shift($operand);\n\
    \    switch($value){\n      case '+':\n        $result += $num;\n        break;\n\
    \      case '-':\n        $result -= $num;\n        break;\n      case '*':\n\
    \        $result *= $num;\n        break;\n      case '//':\n        $result =\
    \ floor($result / $num);\n        break;\n      case '**':\n        $result =\
    \ pow($result, $num);\n        break;\n    }\n  }\n  return $result;\n}\nprint_r(do_algebra(['*',\
    \ '-', '//'], [2, 3, 6, 8]));\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6jdcn43q.php:52\n\
    Stack trace:\n#0 /tmp/tmp6jdcn43q.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp6jdcn43q.php\
    \ on line 52\n"
  timestamp: 1659823238
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $sum = $operand[0];\n    for($i = 0;\
    \ $i < count($operator); $i++){\n        switch($operator[$i]){\n            case\
    \ '+':\n                $sum += $operand[$i+1];\n                break;\n    \
    \        case '-':\n                $sum -= $operand[$i+1];\n                break;\n\
    \            case '*':\n                $sum *= $operand[$i+1];\n            \
    \    break;\n            case '//':\n                $sum = floor($sum / $operand[$i+1]);\n\
    \                break;\n            case '**':\n                $sum = pow($sum,\
    \ $operand[$i+1]);\n                break;\n        }\n    }\n    return $sum;\n\
    }\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoxh7acy8.php:49\n\
    Stack trace:\n#0 /tmp/tmpoxh7acy8.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpoxh7acy8.php\
    \ on line 49\n"
  timestamp: 1659823238
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = $operand[0];\n    for ($i =\
    \ 0; $i < count($operator); $i++) {\n        switch ($operator[$i]) {\n      \
    \      case '+':\n                $result += $operand[$i + 1];\n             \
    \   break;\n            case '-':\n                $result -= $operand[$i + 1];\n\
    \                break;\n            case '*':\n                $result *= $operand[$i\
    \ + 1];\n                break;\n            case '//':\n                $result\
    \ = floor($result / $operand[$i + 1]);\n                break;\n            case\
    \ '**':\n                $result = pow($result, $operand[$i + 1]);\n         \
    \       break;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo8ntaur_.php:49\n\
    Stack trace:\n#0 /tmp/tmpo8ntaur_.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpo8ntaur_.php\
    \ on line 49\n"
  timestamp: 1659823238
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $res = $operand[0];\n  for ($i = 0; $i\
    \ < count($operator); $i++) {\n    switch ($operator[$i]) {\n      case '+':\n\
    \        $res += $operand[$i + 1];\n        break;\n      case '-':\n        $res\
    \ -= $operand[$i + 1];\n        break;\n      case '*':\n        $res *= $operand[$i\
    \ + 1];\n        break;\n      case '//':\n        $res = floor($res / $operand[$i\
    \ + 1]);\n        break;\n      case '**':\n        $res = pow($res, $operand[$i\
    \ + 1]);\n        break;\n    }\n  }\n  return $res;\n}\n\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]) . PHP_EOL; // 9\necho do_algebra(['//', '*', '+'],\
    \ [2, 3, 4, 5]) . PHP_EOL; // 9\necho do_algebra(['//', '**', '*'], [2, 3, 4,\
    \ 5]) . PHP_EOL; // 6\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n5\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp75q_l4ie.php:53\n\
    Stack trace:\n#0 /tmp/tmp75q_l4ie.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp75q_l4ie.php\
    \ on line 53\n"
  timestamp: 1659823238
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $length = count($operator);\n    $opr\
    \ = $operand[0];\n    for($i = 0; $i < $length; $i++) {\n        switch($operator[$i])\
    \ {\n            case '+':\n                $opr += $operand[$i + 1];\n      \
    \          break;\n            case '-':\n                $opr -= $operand[$i\
    \ + 1];\n                break;\n            case '*':\n                $opr *=\
    \ $operand[$i + 1];\n                break;\n            case '//':\n        \
    \        $opr = floor($opr / $operand[$i + 1]);\n                break;\n    \
    \        case '**':\n                $opr = pow($opr, $operand[$i + 1]);\n   \
    \             break;\n        }\n    }\n    return $opr;\n}\n$operator = ['+',\
    \ '*', '-'];\n$operand = [2, 3, 4, 5];\nvar_dump(do_algebra($operator, $operand));\n\
    $operator = ['//', '**', '-'];\n$operand = [16, 3, 5, 10];\nvar_dump(do_algebra($operator,\
    \ $operand));\n$operator = ['*', '+', '//'];\n$operand = [2, 3, 6, 9];\nvar_dump(do_algebra($operator,\
    \ $operand));\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "int(15)\nfloat(3115)\nfloat(1)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpl8x_b767.php:59\nStack trace:\n#0 /tmp/tmpl8x_b767.php(63):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpl8x_b767.php on line 59\n"
  timestamp: 1659823238
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  \n}\nprint_r(do_algebra(['+', '*', '-'],\
    \ [2, 3, 4, 5])); // return: 9\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsa860v0g.php:29\n\
    Stack trace:\n#0 /tmp/tmpsa860v0g.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpsa860v0g.php\
    \ on line 29\n"
  timestamp: 1659823238
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    \n    if (count($operator) !== count($operand)\
    \ - 1) {\n        return;\n    }\n\n    $result = $operand[0];\n    for ($i =\
    \ 0; $i < count($operator); $i++) {\n        switch ($operator[$i]) {\n      \
    \      case '+':\n                $result += $operand[$i + 1];\n             \
    \   break;\n            case '-':\n                $result -= $operand[$i + 1];\n\
    \                break;\n            case '*':\n                $result *= $operand[$i\
    \ + 1];\n                break;\n            case '//':\n                $result\
    \ = floor($result / $operand[$i + 1]);\n                break;\n            case\
    \ '**':\n                $result = pow($result, $operand[$i + 1]);\n         \
    \       break;\n        }\n    }\n    return $result;\n}\n\n$operator = ['+',\
    \ '*', '-'];\n$operand = [2, 3, 4, 5];\necho do_algebra($operator, $operand);\n\
    function candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp61iknbli.php:58\n\
    Stack trace:\n#0 /tmp/tmp61iknbli.php(62): test()\n#1 {main}\n  thrown in /tmp/tmp61iknbli.php\
    \ on line 58\n"
  timestamp: 1659823238
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = 0;\n    for ($i = 0; $i < count($operator);\
    \ $i++) {\n        if ($i == 0) {\n            $result = $operand[$i];\n     \
    \   }\n        switch ($operator[$i]) {\n            case '+':\n             \
    \   $result += $operand[$i + 1];\n                break;\n            case '-':\n\
    \                $result -= $operand[$i + 1];\n                break;\n      \
    \      case '*':\n                $result *= $operand[$i + 1];\n             \
    \   break;\n            case '//':\n                $result /= $operand[$i + 1];\n\
    \                break;\n            case '**':\n                $result **= $operand[$i\
    \ + 1];\n                break;\n        }\n    }\n    return $result;\n}\n$operator\
    \ = [\"+\", \"*\", \"-\"];\n$operand = [2, 3, 4, 5];\necho do_algebra($operator,\
    \ $operand);\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8yem7t64.php:55\n\
    Stack trace:\n#0 /tmp/tmp8yem7t64.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp8yem7t64.php\
    \ on line 55\n"
  timestamp: 1659823238
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = $operand[0];\n    for ($i =\
    \ 0; $i < count($operator); $i++) {\n        switch ($operator[$i]) {\n      \
    \      case '+':\n                $result += $operand[$i + 1];\n             \
    \   break;\n            case '-':\n                $result -= $operand[$i + 1];\n\
    \                break;\n            case '*':\n                $result *= $operand[$i\
    \ + 1];\n                break;\n            case '//':\n                $result\
    \ = (int)($result / $operand[$i + 1]);\n                break;\n            case\
    \ '**':\n                $result = (int)pow($result, $operand[$i + 1]);\n    \
    \            break;\n        }\n    }\n    return $result;\n}\n\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]);\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpitass5oe.php:51\n\
    Stack trace:\n#0 /tmp/tmpitass5oe.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpitass5oe.php\
    \ on line 51\n"
  timestamp: 1659823238
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $operation = \"\";\n    $arr_length =\
    \ count($operand);\n    for ($i = 0; $i < $arr_length - 1; $i++) {\n        $operation\
    \ .= $operand[$i];\n        $operation .= $operator[$i];\n    }\n    $operation\
    \ .= $operand[$arr_length - 1];\n    return eval(\"return $operation;\");\n}\n\
    function candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected end of file, expecting ";" in /tmp/tmpjc84egpk.php(28)
    : eval()''d code on line 1

    '
  timestamp: 1659823238
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n   // Write your code here\n   $total = $operand[0];\n\
    \   for($i = 0; $i < count($operator); $i++){\n       switch($operator[$i]){\n\
    \           case '+':\n               $total += $operand[$i+1];\n            \
    \   break;\n           case '-':\n               $total -= $operand[$i+1];\n \
    \              break;\n           case '*':\n               $total *= $operand[$i+1];\n\
    \               break;\n           case '//':\n               $total = floor($total\
    \ / $operand[$i+1]);\n               break;\n           case '**':\n         \
    \      $total = pow($total, $operand[$i+1]);\n               break;\n       }\n\
    \   }\n   return $total;\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpumz29gy5.php:51\n\
    Stack trace:\n#0 /tmp/tmpumz29gy5.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpumz29gy5.php\
    \ on line 51\n"
  timestamp: 1659823238
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $op = array_shift($operator);\n  $res =\
    \ array_shift($operand);\n  while(count($operator) > 0){\n    $op = array_shift($operator);\n\
    \    $tmp = array_shift($operand);\n    switch($op){\n      case '+':\n      \
    \  $res += $tmp;\n        break;\n      case '-':\n        $res -= $tmp;\n   \
    \     break;\n      case '*':\n        $res *= $tmp;\n        break;\n      case\
    \ '//':\n        $res /= $tmp;\n        break;\n      case '**':\n        $res\
    \ **= $tmp;\n        break;\n    }\n  }\n  return $res;\n}\n\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]);\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "2\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppacmr3hx.php:53\n\
    Stack trace:\n#0 /tmp/tmppacmr3hx.php(58): test()\n#1 {main}\n  thrown in /tmp/tmppacmr3hx.php\
    \ on line 53\n"
  timestamp: 1659977836
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = $operand[0];\n    for ($i =\
    \ 0; $i < count($operator); $i++) {\n        switch ($operator[$i]) {\n      \
    \      case '+':\n                $result += $operand[$i + 1];\n             \
    \   break;\n            case '-':\n                $result -= $operand[$i + 1];\n\
    \                break;\n            case '*':\n                $result *= $operand[$i\
    \ + 1];\n                break;\n            case '//':\n                $result\
    \ /= $operand[$i + 1];\n                break;\n            case '**':\n     \
    \           $result **= $operand[$i + 1];\n                break;\n        }\n\
    \    }\n    return $result;\n}\n\n$operator = ['+', '*', '-'];\n$operand = [2,\
    \ 3, 4, 5];\n\necho do_algebra($operator, $operand);\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbapvk4aw.php:54\n\
    Stack trace:\n#0 /tmp/tmpbapvk4aw.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpbapvk4aw.php\
    \ on line 54\n"
  timestamp: 1659977836
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  // Write your code here...\n}\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4fb5zww5.php:28\n\
    Stack trace:\n#0 /tmp/tmp4fb5zww5.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp4fb5zww5.php\
    \ on line 28\n"
  timestamp: 1659977836
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $result = $operand[0];\n  for ($i = 0;\
    \ $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n      case '+':\n\
    \        $result += $operand[$i + 1];\n        break;\n      case '-':\n     \
    \   $result -= $operand[$i + 1];\n        break;\n      case '*':\n        $result\
    \ *= $operand[$i + 1];\n        break;\n      case '//':\n        $result = floor($result\
    \ / $operand[$i + 1]);\n        break;\n      case '**':\n        $result = pow($result,\
    \ $operand[$i + 1]);\n        break;\n    }\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5auluf3q.php:50\n\
    Stack trace:\n#0 /tmp/tmp5auluf3q.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp5auluf3q.php\
    \ on line 50\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  \n}\n\nfunction candidate(...$args) {\n\
    \    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn1dune5n.php:29\n\
    Stack trace:\n#0 /tmp/tmpn1dune5n.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpn1dune5n.php\
    \ on line 29\n"
  timestamp: 1659977836
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = 0;\n    $result = $operand[0];\n\
    \    $i = 0;\n    foreach($operator as $op){\n        switch($op){\n         \
    \   case '+':\n                $result += $operand[$i+1];\n                break;\n\
    \            case '-':\n                $result -= $operand[$i+1];\n         \
    \       break;\n            case '*':\n                $result *= $operand[$i+1];\n\
    \                break;\n            case '//':\n                $result = intval($result\
    \ / $operand[$i+1]);\n                break;\n            case '**':\n       \
    \         $result = pow($result, $operand[$i+1]);\n                break;\n  \
    \      }\n        $i++;\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo597ay7d.php:52\n\
    Stack trace:\n#0 /tmp/tmpo597ay7d.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpo597ay7d.php\
    \ on line 52\n"
  timestamp: 1659977836
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  // Your code goes here!\n}\n\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0co8zpo8.php:29\n\
    Stack trace:\n#0 /tmp/tmp0co8zpo8.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp0co8zpo8.php\
    \ on line 29\n"
  timestamp: 1659977836
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  // Your code here...\n}\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplfjpo482.php:28\n\
    Stack trace:\n#0 /tmp/tmplfjpo482.php(33): test()\n#1 {main}\n  thrown in /tmp/tmplfjpo482.php\
    \ on line 28\n"
  timestamp: 1659977836
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  //your code here\n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkgvnr4bo.php:29\n\
    Stack trace:\n#0 /tmp/tmpkgvnr4bo.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpkgvnr4bo.php\
    \ on line 29\n"
  timestamp: 1659977836
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $result = $operand[0];\n  for ($i = 0;\
    \ $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n      case '+':\n\
    \        $result += $operand[$i + 1];\n        break;\n      case '-':\n     \
    \   $result -= $operand[$i + 1];\n        break;\n      case '*':\n        $result\
    \ *= $operand[$i + 1];\n        break;\n      case '//':\n        $result = floor($result\
    \ / $operand[$i + 1]);\n        break;\n      case '**':\n        $result = $result\
    \ ** $operand[$i + 1];\n        break;\n    }\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnex2dg74.php:50\n\
    Stack trace:\n#0 /tmp/tmpnex2dg74.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpnex2dg74.php\
    \ on line 50\n"
  timestamp: 1659977836
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $result = $operand[0];\n  for ($i = 0;\
    \ $i < count($operator); $i++) {\n    if ($operator[$i] == '+') {\n      $result\
    \ += $operand[$i + 1];\n    } else if ($operator[$i] == '-') {\n      $result\
    \ -= $operand[$i + 1];\n    } else if ($operator[$i] == '*') {\n      $result\
    \ *= $operand[$i + 1];\n    } else if ($operator[$i] == '//') {\n      $result\
    \ = floor($result / $operand[$i + 1]);\n    } else if ($operator[$i] == '**')\
    \ {\n      $result = pow($result, $operand[$i + 1]);\n    }\n  }\n  return $result;\n\
    }\n\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5]); // 9\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5, 4]); // 8\necho do_algebra(['+', '//', '**'], [20, 2,\
    \ 3]); // 19\necho do_algebra(['+', '//', '**'], [2, 3, 2]); // 4\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5, 6, 7]); // 8\necho do_algebra(['+', '//', '**'], [2,\
    \ 3, 2, 4]); // 4\necho do_algebra(['+', '//', '**'], [20, 2, 3, 4]); // 19\n\
    echo do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6, 7, 8]); // 8\necho do_algebra(['+',\
    \ '//', '**'], [2, 3, 2, 4, 5]); // 4\necho do_algebra(['+', '//', '**'], [20,\
    \ 2, 3, 4, 5]); // 19\necho do_algebra(['+', '*', '-'], [2, 3, 4\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "]" in /tmp/tmptyqwlx2a.php
    on line 49

    '
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $num = count($operand) - 1;\n  $ans = $operand[0];\n\
    \  for ($i = 0; $i < $num; $i++) {\n    switch ($operator[$i]) {\n      case '+':\n\
    \        $ans += $operand[$i + 1];\n        break;\n      case '-':\n        $ans\
    \ -= $operand[$i + 1];\n        break;\n      case '*':\n        $ans *= $operand[$i\
    \ + 1];\n        break;\n      case '//':\n        $ans = floor($ans / $operand[$i\
    \ + 1]);\n        break;\n      case '**':\n        $ans = pow($ans, $operand[$i\
    \ + 1]);\n        break;\n    }\n  }\n  return $ans;\n}\n$operators = ['+', '*',\
    \ '-'];\n$array = [2, 3, 4, 5];\necho do_algebra($operators, $array);\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppbt8cm66.php:53\n\
    Stack trace:\n#0 /tmp/tmppbt8cm66.php(57): test()\n#1 {main}\n  thrown in /tmp/tmppbt8cm66.php\
    \ on line 53\n"
  timestamp: 1659977836
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = $operand[0];\n    for ($i =\
    \ 0; $i < count($operator); $i++) {\n        switch ($operator[$i]) {\n      \
    \      case '+':\n                $result += $operand[$i + 1];\n             \
    \   break;\n            case '-':\n                $result -= $operand[$i + 1];\n\
    \                break;\n            case '*':\n                $result *= $operand[$i\
    \ + 1];\n                break;\n            case '//':\n                $result\
    \ = floor($result / $operand[$i + 1]);\n                break;\n            case\
    \ '**':\n                $result = pow($result, $operand[$i + 1]);\n         \
    \       break;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo8ntaur_.php:49\n\
    Stack trace:\n#0 /tmp/tmpo8ntaur_.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpo8ntaur_.php\
    \ on line 49\n"
  timestamp: 1659823238
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    // Write your code here...\n    $result\
    \ = '';\n    $op_len = count($operator);\n    $num_len = count($operand);\n  \
    \  for($i = 0; $i < $op_len; $i++){\n        $result .= $operator[$i];\n     \
    \   $result .= $operand[$i];\n    }\n    $result .= $operand[$num_len - 1];\n\
    \    echo $result;\n    return eval('return ' . $result . ';');\n}\n\necho do_algebra([\"\
    +\",\"*\",\"-\",\"**\"], [2,3,4,5]);\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '+2*3-4**55-1.2980742146337E+33**2*3+45

    Parse error: syntax error, unexpected token "**", expecting ";" in /tmp/tmpa7ztc9p0.php(31)
    : eval()''d code on line 1

    '
  timestamp: 1659977836
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $value = '';\n  $len = count($operand);\n\
    \  for ($i = 0; $i < $len - 1; $i++) {\n    $value .= $operand[$i];\n    $value\
    \ .= $operator[$i];\n  }\n  $value .= $operand[$len - 1];\n  return eval(\"return\
    \ $value;\");\n}\n\necho do_algebra([\"+\", \"*\", \"-\"], [2, 3, 4, 5]); // 9\n\
    echo do_algebra([\"+\", \"-\"], [2, 3, 4]); // -1\necho do_algebra([\"+\", \"\
    -\"], [2, 3, 4, 5]); // -1\necho do_algebra([\"+\", \"-\"], [2, 3, 4, 5, 6]);\
    \ // -1\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '91

    Warning: Undefined array key 2 in /tmp/tmp01r37637.php on line 25

    -40

    Warning: Undefined array key 2 in /tmp/tmp01r37637.php on line 25


    Warning: Undefined array key 3 in /tmp/tmp01r37637.php on line 25

    -451

    Parse error: syntax error, unexpected end of file, expecting ";" in /tmp/tmp01r37637.php(28)
    : eval()''d code on line 1

    '
  timestamp: 1659977836
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $total = $operand[0];\n    for ($i =\
    \ 0; $i < count($operator); $i++) {\n        switch ($operator[$i]) {\n      \
    \      case '+':\n                $total += $operand[$i + 1];\n              \
    \  break;\n            case '-':\n                $total -= $operand[$i + 1];\n\
    \                break;\n            case '*':\n                $total *= $operand[$i\
    \ + 1];\n                break;\n            case '//':\n                $total\
    \ = floor($total / $operand[$i + 1]);\n                break;\n            case\
    \ '**':\n                $total = pow($total, $operand[$i + 1]);\n           \
    \     break;\n        }\n    }\n    return $total;\n}\n\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]) . \"\\n\"; // 9\necho do_algebra(['+', '*', '-'], [1,\
    \ 2, 3, 4, 5]) . \"\\n\"; // 14\necho do_algebra(['+', '*', '-', '//'], [2, 3,\
    \ 4, 5, 8]) . \"\\n\"; // 2\necho do_algebra(['+', '*', '-', '//', '**'], [2,\
    \ 3, 4, 5, 8, 7]) . \"\\n\"; // 5\necho do_algebra(['+', '*', '-', '//', '**'],\
    \ [2, 3, 4, 5, 8, 7, 1]) . \"\\n\"; // 1\necho do_algebra(['+', '*', '-', '//',\
    \ '**'], [2, 3, 4, 5, 8, 7, 1, 0]) . \"\\n\"; // 1\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n5\n1\n1\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuelw8bu3.php:56\n\
    Stack trace:\n#0 /tmp/tmpuelw8bu3.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpuelw8bu3.php\
    \ on line 56\n"
  timestamp: 1659977836
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = $operand[0];\n    for ($i =\
    \ 0; $i < count($operator); $i++) {\n        switch ($operator[$i]) {\n      \
    \      case '+':\n                $result += $operand[$i + 1];\n             \
    \   break;\n            case '-':\n                $result -= $operand[$i + 1];\n\
    \                break;\n            case '*':\n                $result *= $operand[$i\
    \ + 1];\n                break;\n            case '//':\n                $result\
    \ /= $operand[$i + 1];\n                break;\n            case '**':\n     \
    \           $result = pow($result, $operand[$i + 1]);\n                break;\n\
    \        }\n    }\n    return $result;\n}\necho do_algebra(['+', '*', '-'], [2,\
    \ 3, 4, 5]) . \"\\n\"; // 9\necho do_algebra(['//', '*', '//'], [8, 2, 3, 2])\
    \ . \"\\n\"; // 2\necho do_algebra(['+', '-'], [10, 4, 6]) . \"\\n\"; // 10\n\
    echo do_algebra(['+', '-', '*'], [4, 6, 2, 3]) . \"\\n\"; // -4\necho do_algebra(['//',\
    \ '*', '//'], [6, 6, 2, 2]) . \"\\n\"; // 3\necho do_algebra(['//', '*', '//'],\
    \ [6, 2, 3, 3]) . \"\\n\"; // 1\necho do_algebra(['+', '*', '//'], [5, 8, 3, 3])\
    \ . \"\\n\"; // 13\necho do_algebra(['//', '*', '//'], [3, 3, 4, 5]) . \"\\n\"\
    ; // 0\necho do_algebra(['+', '//', '-'], [4, 4, 2, 1]) . \"\\n\"; // 1\necho\
    \ do_algebra(['+', '//', '-'], [4, 4, 2, 1, 5]) . \"\\n\"; // 1\necho do_algebra(['//',\
    \ '*', '//'], [\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmp8sgf9n2y.php on line 54

    '
  timestamp: 1659977836
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  if (count($operator) != count($operand)\
    \ - 1) {\n    return false;\n  }\n  $result = $operand[0];\n  for ($i = 0; $i\
    \ < count($operator); $i++) {\n    if ($operator[$i] == '+') {\n      $result\
    \ += $operand[$i + 1];\n    } else if ($operator[$i] == '-') {\n      $result\
    \ -= $operand[$i + 1];\n    } else if ($operator[$i] == '*') {\n      $result\
    \ *= $operand[$i + 1];\n    } else if ($operator[$i] == '//') {\n      $result\
    \ = floor($result / $operand[$i + 1]);\n    } else if ($operator[$i] == '**')\
    \ {\n      $result = pow($result, $operand[$i + 1]);\n    }\n  }\n  return $result;\n\
    }\n\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5]) . PHP_EOL;\necho do_algebra(['*',\
    \ '//', '**'], [2, 3, 4, 5]) . PHP_EOL;\necho do_algebra(['-', '+', '-'], [1,\
    \ 2, 3, 4, 5]) . PHP_EOL;\necho do_algebra(['*', '//', '*'], [2, 3, 4, 5]) . PHP_EOL;\n\
    echo do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6]) . PHP_EOL;\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4]) . PHP_EOL;\necho do_algebra(['+', '*', '-'], [2, 3, 4,\
    \ 5, 6, 7]) . PHP_EOL;\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n1\n\n5\n\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsk84j8wu.php:54\n\
    Stack trace:\n#0 /tmp/tmpsk84j8wu.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpsk84j8wu.php\
    \ on line 54\n"
  timestamp: 1659977836
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = $operand[0];\n    for ($i =\
    \ 0; $i < count($operator); $i++) {\n        switch ($operator[$i]) {\n      \
    \      case '+':\n                $result += $operand[$i + 1];\n             \
    \   break;\n            case '-':\n                $result -= $operand[$i + 1];\n\
    \                break;\n            case '*':\n                $result *= $operand[$i\
    \ + 1];\n                break;\n            case '//':\n                $result\
    \ = floor($result / $operand[$i + 1]);\n                break;\n            case\
    \ '**':\n                $result = pow($result, $operand[$i + 1]);\n         \
    \       break;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo8ntaur_.php:49\n\
    Stack trace:\n#0 /tmp/tmpo8ntaur_.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpo8ntaur_.php\
    \ on line 49\n"
  timestamp: 1659823238
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $result = $operand[0];\n  $len = count($operand)\
    \ - 1;\n  for ($i = 0; $i < $len; $i++) {\n    switch ($operator[$i]) {\n    \
    \  case '+':\n        $result += $operand[$i + 1];\n        break;\n      case\
    \ '-':\n        $result -= $operand[$i + 1];\n        break;\n      case '*':\n\
    \        $result *= $operand[$i + 1];\n        break;\n      case '//':\n    \
    \    $result = floor($result / $operand[$i + 1]);\n        break;\n      case\
    \ '**':\n        $result = pow($result, $operand[$i + 1]);\n        break;\n \
    \   }\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb8vnycjb.php:51\n\
    Stack trace:\n#0 /tmp/tmpb8vnycjb.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpb8vnycjb.php\
    \ on line 51\n"
  timestamp: 1659977836
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = $operand[0];\n    for ($i =\
    \ 0; $i < count($operator); $i++) {\n        switch ($operator[$i]) {\n      \
    \      case '+':\n                $result += $operand[$i + 1];\n             \
    \   break;\n            case '-':\n                $result -= $operand[$i + 1];\n\
    \                break;\n            case '*':\n                $result *= $operand[$i\
    \ + 1];\n                break;\n            case '//':\n                $result\
    \ = (int)($result / $operand[$i + 1]);\n                break;\n            case\
    \ '**':\n                $result = pow($result, $operand[$i + 1]);\n         \
    \       break;\n        }\n    }\n    return $result;\n}\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]) . \"\\n\"; // 9\necho do_algebra(['+', '//', '-'],\
    \ [2, 3, 4, 5]) . \"\\n\"; // 3\necho do_algebra(['+', '*', '-'], [5, 10, 3, 4])\
    \ . \"\\n\"; // 45\necho do_algebra(['+', '*', '-', '//'], [1, 2, 3, 4, 5]) .\
    \ \"\\n\"; // 0\necho do_algebra(['+', '*', '-', '//', '**'], [3, 4, 2, 3, 3])\
    \ . \"\\n\"; // -5\necho do_algebra(['+', '//', '*', '-'], [10, 5, 2, 1]) . \"\
    \\n\"; // 20\necho do_algebra(['+', '//', '-', '*'], [10, 5, 2, 1]) . \"\\n\"\
    ; // 9\necho do_algebra(['+', '//', '-', '**'], [3, 4, 2, 3]) . \"\\n\"; // 5\n\
    echo do_algebra(['+', '-', '*', '//', '**'], [4, 2, 3, 3, 3]) . \"\\n\"; // -10\n\
    function candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n-4\n41\n1\n\nWarning: Undefined array key 5 in /tmp/tmphsoib1dv.php\
    \ on line 37\n1\n\nWarning: Undefined array key 4 in /tmp/tmphsoib1dv.php on line\
    \ 28\n7\n\nWarning: Undefined array key 4 in /tmp/tmphsoib1dv.php on line 31\n\
    0\n\nWarning: Undefined array key 4 in /tmp/tmphsoib1dv.php on line 37\n1\n\n\
    Warning: Undefined array key 5 in /tmp/tmphsoib1dv.php on line 37\n1\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmphsoib1dv.php:58\nStack trace:\n\
    #0 /tmp/tmphsoib1dv.php(62): test()\n#1 {main}\n  thrown in /tmp/tmphsoib1dv.php\
    \ on line 58\n"
  timestamp: 1659977836
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $result = $operand[0];\n  $operand_count\
    \ = count($operand);\n  for ($i = 0; $i < $operand_count - 1; $i++) {\n    $result\
    \ = do_algebra_operator($operator[$i], $result, $operand[$i + 1]);\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function do_algebra_operator()\
    \ in /tmp/tmpaq_2uwdp.php:24\nStack trace:\n#0 /tmp/tmpaq_2uwdp.php(30): do_algebra(Array,\
    \ Array)\n#1 /tmp/tmpaq_2uwdp.php(34): candidate(Array, Array)\n#2 /tmp/tmpaq_2uwdp.php(39):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpaq_2uwdp.php on line 24\n"
  timestamp: 1659977836
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    // Write your code here...\n    $result\
    \ = $operand[0];\n    for($i = 0; $i < count($operator); $i++){\n        switch($operator[$i]){\n\
    \            case '+':\n                $result += $operand[$i+1];\n         \
    \       break;\n            case '-':\n                $result -= $operand[$i+1];\n\
    \                break;\n            case '*':\n                $result *= $operand[$i+1];\n\
    \                break;\n            case '//':\n                $result = floor($result\
    \ / $operand[$i+1]);\n                break;\n            case '**':\n       \
    \         $result = pow($result, $operand[$i+1]);\n                break;\n  \
    \      }\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbjlvalnt.php:50\n\
    Stack trace:\n#0 /tmp/tmpbjlvalnt.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpbjlvalnt.php\
    \ on line 50\n"
  timestamp: 1659977836
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  for($i = 0; $i < count($operator); $i++)\
    \ {\n    if($operator[$i] == '+') {\n      $operand[$i+1] = $operand[$i] + $operand[$i+1];\n\
    \    } else if($operator[$i] == '-') {\n      $operand[$i+1] = $operand[$i] -\
    \ $operand[$i+1];\n    } else if($operator[$i] == '*') {\n      $operand[$i+1]\
    \ = $operand[$i] * $operand[$i+1];\n    } else if($operator[$i] == '//') {\n \
    \     $operand[$i+1] = floor($operand[$i] / $operand[$i+1]);\n    } else if($operator[$i]\
    \ == '**') {\n      $operand[$i+1] = pow($operand[$i], $operand[$i+1]);\n    }\n\
    \  }\n  return $operand[count($operand)-1];\n}\n\n$operator = ['+', '*', '-'];\n\
    $operand = [2, 3, 4, 5];\necho do_algebra($operator, $operand);\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp377gqsgc.php:46\n\
    Stack trace:\n#0 /tmp/tmp377gqsgc.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp377gqsgc.php\
    \ on line 46\n"
  timestamp: 1659977836
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $res = $operand[0];\n    for ($i = 0;\
    \ $i < count($operator); $i++) {\n        if ($operator[$i] == '+') {\n      \
    \      $res += $operand[$i + 1];\n        } else if ($operator[$i] == '-') {\n\
    \            $res -= $operand[$i + 1];\n        } else if ($operator[$i] == '*')\
    \ {\n            $res *= $operand[$i + 1];\n        } else if ($operator[$i] ==\
    \ '//') {\n            $res = intval($res / $operand[$i + 1]);\n        } else\
    \ if ($operator[$i] == '**') {\n            $res = pow($res, $operand[$i + 1]);\n\
    \        }\n    }\n    return $res;\n}\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplhj9que5.php:43\n\
    Stack trace:\n#0 /tmp/tmplhj9que5.php(47): test()\n#1 {main}\n  thrown in /tmp/tmplhj9que5.php\
    \ on line 43\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $result = $operand[0];\n  $prevOp = \"\"\
    ;\n  for ($i = 0; $i < count($operator); $i++) {\n    $op = $operator[$i];\n \
    \   $op1 = $operand[$i + 1];\n    if ($prevOp === \"\") {\n      $result = doMath($result,\
    \ $op, $op1);\n    } else {\n      $result = doMath($result, $prevOp, doMath($result,\
    \ $op, $op1));\n    }\n    $prevOp = $op;\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function doMath() in /tmp/tmpm8hm334e.php:27\n\
    Stack trace:\n#0 /tmp/tmpm8hm334e.php(37): do_algebra(Array, Array)\n#1 /tmp/tmpm8hm334e.php(41):\
    \ candidate(Array, Array)\n#2 /tmp/tmpm8hm334e.php(46): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmpm8hm334e.php on line 27\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $result = 0;\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    if ($i == 0) {\n      $result = eval(\"return {$operand[$i]} {$operator[$i]}\
    \ {$operand[$i + 1]};\");\n    } else {\n      $result = eval(\"return $result\
    \ {$operator[$i]} {$operand[$i + 1]};\");\n    }\n  }\n  return $result;\n}\n\n\
    function candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprixuiglv.php:38\n\
    Stack trace:\n#0 /tmp/tmprixuiglv.php(42): test()\n#1 {main}\n  thrown in /tmp/tmprixuiglv.php\
    \ on line 38\n"
  timestamp: 1659977836
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $array = array_merge($operand, $operator);\n\
    \    $result = array_shift($array);\n    foreach ($array as $a) {\n        if\
    \ ($a == '+') {\n            $result += array_shift($array);\n        } elseif\
    \ ($a == '-') {\n            $result -= array_shift($array);\n        } elseif\
    \ ($a == '*') {\n            $result *= array_shift($array);\n        } elseif\
    \ ($a == '//') {\n            $result = floor($result / array_shift($array));\n\
    \        } elseif ($a == '**') {\n            $result = pow($result, array_shift($array));\n\
    \        }\n    }\n    return $result;\n}\necho do_algebra(array('+', '*', '-'),\
    \ array(2, 3, 4, 5));\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfcvcljl5.php:45\n\
    Stack trace:\n#0 /tmp/tmpfcvcljl5.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpfcvcljl5.php\
    \ on line 45\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $num = count($operand);\n  for($i = 0;\
    \ $i < $num; $i++) {\n    switch($operator[$i]) {\n      case '+':\n        $operand[$i+1]\
    \ = $operand[$i] + $operand[$i+1];\n        break;\n      case '-':\n        $operand[$i+1]\
    \ = $operand[$i] - $operand[$i+1];\n        break;\n      case '*':\n        $operand[$i+1]\
    \ = $operand[$i] * $operand[$i+1];\n        break;\n      case '//':\n       \
    \ $operand[$i+1] = floor($operand[$i] / $operand[$i+1]);\n        break;\n   \
    \   case '**':\n        $operand[$i+1] = $operand[$i] ** $operand[$i+1];\n   \
    \     break;\n    }\n  }\n  return $operand[$num-1];\n}\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 3 in /tmp/tmpj7pqwsjo.php on line 23\n\n\
    Warning: Undefined array key 3 in /tmp/tmpj7pqwsjo.php on line 23\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpj7pqwsjo.php:49\nStack trace:\n\
    #0 /tmp/tmpj7pqwsjo.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpj7pqwsjo.php\
    \ on line 49\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $result = $operand[0];\n  for ($i = 0;\
    \ $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n      case '+':\n\
    \        $result += $operand[$i + 1];\n        break;\n      case '-':\n     \
    \   $result -= $operand[$i + 1];\n        break;\n      case '*':\n        $result\
    \ *= $operand[$i + 1];\n        break;\n      case '//':\n        $result = floor($result\
    \ / $operand[$i + 1]);\n        break;\n      case '**':\n        $result = $result\
    \ ** $operand[$i + 1];\n        break;\n    }\n  }\n  return $result;\n}\n\n$arr1\
    \ = ['+', '*', '-'];\n$arr2 = [2, 3, 4, 5];\nprint_r(do_algebra($arr1, $arr2));\n\
    function candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_8lmku_l.php:53\n\
    Stack trace:\n#0 /tmp/tmp_8lmku_l.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp_8lmku_l.php\
    \ on line 53\n"
  timestamp: 1659977836
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  // Write your code here\n}\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4nsdwm56.php:28\n\
    Stack trace:\n#0 /tmp/tmp4nsdwm56.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp4nsdwm56.php\
    \ on line 28\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $total = $operand[0];\n  for ($i = 0; $i\
    \ < count($operator); $i++) {\n    if ($operator[$i] == \"+\") {\n      $total\
    \ += $operand[$i + 1];\n    } else if ($operator[$i] == \"-\") {\n      $total\
    \ -= $operand[$i + 1];\n    } else if ($operator[$i] == \"*\") {\n      $total\
    \ *= $operand[$i + 1];\n    } else if ($operator[$i] == \"//\") {\n      $total\
    \ = floor($total / $operand[$i + 1]);\n    } else if ($operator[$i] == \"**\"\
    ) {\n      $total = pow($total, $operand[$i + 1]);\n    }\n  }\n  return $total;\n\
    }\n\n$operator = ['+', '*', '-'];\n$operand = [2, 3, 4, 5];\necho do_algebra($operator,\
    \ $operand);\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5so6iosb.php:47\n\
    Stack trace:\n#0 /tmp/tmp5so6iosb.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp5so6iosb.php\
    \ on line 47\n"
  timestamp: 1659977836
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = $operand[0];\n    for ($i =\
    \ 0; $i < count($operator); $i++) {\n        switch ($operator[$i]) {\n      \
    \      case '+':\n                $result += $operand[$i + 1];\n             \
    \   break;\n            case '-':\n                $result -= $operand[$i + 1];\n\
    \                break;\n            case '*':\n                $result *= $operand[$i\
    \ + 1];\n                break;\n            case '//':\n                $result\
    \ /= $operand[$i + 1];\n                break;\n            case '**':\n     \
    \           $result **= $operand[$i + 1];\n                break;\n        }\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_1z3b6nt.php:50\n\
    Stack trace:\n#0 /tmp/tmp_1z3b6nt.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp_1z3b6nt.php\
    \ on line 50\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $result = $operand[0];\n  for ($i = 0;\
    \ $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n      case '+':\n\
    \        $result += $operand[$i + 1];\n        break;\n      case '-':\n     \
    \   $result -= $operand[$i + 1];\n        break;\n      case '*':\n        $result\
    \ *= $operand[$i + 1];\n        break;\n      case '//':\n        $result = (int)\
    \ $result / $operand[$i + 1];\n        break;\n      case '**':\n        $result\
    \ = pow($result, $operand[$i + 1]);\n        break;\n    }\n  }\n  return $result;\n\
    }\n$operator = ['+', '*', '-'];\n$operand = [2, 3, 4, 5];\necho do_algebra($operator,\
    \ $operand);\necho \"\\n\";\n$operator = ['//', '+', '*', '-'];\n$operand = [2,\
    \ 3, 4, 5, 7];\necho do_algebra($operator, $operand);\necho \"\\n\";\n$operator\
    \ = ['//', '**', '//', '**', '//', '**', '+', '*', '-'];\n$operand = [2, 3, 4,\
    \ 5, 7, 8, 9, 10, 11, 12];\necho do_algebra($operator, $operand);\necho \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n16.333333333333\n98\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp779b1kte.php:61\nStack trace:\n#0 /tmp/tmp779b1kte.php(65): test()\n\
    #1 {main}\n  thrown in /tmp/tmp779b1kte.php on line 61\n"
  timestamp: 1659977836
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  // your code goes here\n}\n$operator =\
    \ [\"+\", \"*\", \"-\"];\n$operand = [2, 3, 4, 5];\necho do_algebra($operator,\
    \ $operand);\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw5vuak_g.php:31\n\
    Stack trace:\n#0 /tmp/tmpw5vuak_g.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpw5vuak_g.php\
    \ on line 31\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = 0;\n    if (count($operator)\
    \ == count($operand) - 1) {\n        $result = $operand[0];\n        for ($i =\
    \ 0; $i < count($operator); $i++) {\n            if ($operator[$i] == '+') {\n\
    \                $result += $operand[$i + 1];\n            } else if ($operator[$i]\
    \ == '-') {\n                $result -= $operand[$i + 1];\n            } else\
    \ if ($operator[$i] == '*') {\n                $result *= $operand[$i + 1];\n\
    \            } else if ($operator[$i] == '//') {\n                $result = (int)($result\
    \ / $operand[$i + 1]);\n            } else if ($operator[$i] == '**') {\n    \
    \            $result = pow($result, $operand[$i + 1]);\n            }\n      \
    \  }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgo_5mvp6.php:47\n\
    Stack trace:\n#0 /tmp/tmpgo_5mvp6.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpgo_5mvp6.php\
    \ on line 47\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $result = $operand[0];\n  for ($i = 0;\
    \ $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n      case '+':\n\
    \        $result += $operand[$i + 1];\n        break;\n      case '-':\n     \
    \   $result -= $operand[$i + 1];\n        break;\n      case '*':\n        $result\
    \ *= $operand[$i + 1];\n        break;\n      case '//':\n        $result = floor($result\
    \ / $operand[$i + 1]);\n        break;\n      case '**':\n        $result = pow($result,\
    \ $operand[$i + 1]);\n        break;\n    }\n  }\n  return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw4hv_nfs.php:49\n\
    Stack trace:\n#0 /tmp/tmpw4hv_nfs.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpw4hv_nfs.php\
    \ on line 49\n"
  timestamp: 1659823238
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $len = count($operand);\n    $ops = [];\n\
    \    $result = $operand[0];\n    for ($i = 0; $i < $len - 1; $i++) {\n       \
    \ switch ($operator[$i]) {\n            case '+':\n                $result +=\
    \ $operand[$i + 1];\n                break;\n            case '-':\n         \
    \       $result -= $operand[$i + 1];\n                break;\n            case\
    \ '*':\n                $result *= $operand[$i + 1];\n                break;\n\
    \            case '//':\n                $result = floor($result / $operand[$i\
    \ + 1]);\n                break;\n            case '**':\n                $result\
    \ = pow($result, $operand[$i + 1]);\n                break;\n        }\n    }\n\
    \    return $result;\n}\necho do_algebra(['+', '-', '*', '//', '**'], [1, 2, 3,\
    \ 4, 5]) . \"\\n\"; // -33\necho do_algebra(['+', '-', '*', '//', '**'], [1, 1,\
    \ 2, 2, 2]) . \"\\n\"; // -5\necho do_algebra(['+', '-', '*', '//', '**'], [2,\
    \ 3, 3, 3, 3]) . \"\\n\"; // -4\necho do_algebra(['+', '-', '*', '//', '**'],\
    \ [1, 2, 3, 4, 5]) . \"\\n\"; // -33\necho do_algebra(['+', '-', '*', '//', '**'],\
    \ [1, 1, 2, 2, 2]) . \"\\n\"; // -5\necho do_algebra(['+', '-', '*', '//', '**'],\
    \ [2, 3, 3, 3, 3]) . \"\\n\"; // -4\necho do_algebra(['+', '-', '*', '//', '**'],\
    \ [1, 2, 3, 4, 5]) . \"\\n\"; // -33\necho do_algebra(['+', '-', '*', '//', '**'],\
    \ [1\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "]" in /tmp/tmp1v3j2sl9.php
    on line 53

    '
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  return eval(implode($operand, $operator));\n\
    }\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: implode(): Argument #1 ($separator)\
    \ must be of type string, array given in /tmp/tmpix9x1eqe.php:21\nStack trace:\n\
    #0 /tmp/tmpix9x1eqe.php(21): implode(Array, Array)\n#1 /tmp/tmpix9x1eqe.php(24):\
    \ do_algebra(Array, Array)\n#2 /tmp/tmpix9x1eqe.php(28): candidate(Array, Array)\n\
    #3 /tmp/tmpix9x1eqe.php(33): test()\n#4 {main}\n  thrown in /tmp/tmpix9x1eqe.php\
    \ on line 21\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $res = $operand[0];\n  for ($i = 0; $i\
    \ < count($operator); $i++) {\n    switch ($operator[$i]) {\n      case '+':\n\
    \        $res += $operand[$i + 1];\n        break;\n      case '-':\n        $res\
    \ -= $operand[$i + 1];\n        break;\n      case '*':\n        $res *= $operand[$i\
    \ + 1];\n        break;\n      case '//':\n        $res = intdiv($res, $operand[$i\
    \ + 1]);\n        break;\n      case '**':\n        $res = pow($res, $operand[$i\
    \ + 1]);\n        break;\n    }\n  }\n  return $res;\n}\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]), PHP_EOL;\necho do_algebra(['+', '//', '*', '//', '-'],\
    \ [10, 2, 4, 2, 5]), PHP_EOL;\necho do_algebra(['+', '-', '+', '*', '-'], [3,\
    \ 8, 2, 9, 4, 1]), PHP_EOL;\necho do_algebra(['+', '-', '*', '//', '**'], [5,\
    \ 1, 2, 3, 2]), PHP_EOL;\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n\nWarning: Undefined array key 5 in /tmp/tmp0zdjqmkr.php on line 28\n\
    1\n71\n\nWarning: Undefined array key 5 in /tmp/tmp0zdjqmkr.php on line 37\n1\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0zdjqmkr.php:53\nStack\
    \ trace:\n#0 /tmp/tmp0zdjqmkr.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp0zdjqmkr.php\
    \ on line 53\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $array = array();\n  $result = 0;\n  for($i\
    \ = 0; $i < count($operator); $i++){\n    $array[] = $operand[$i];\n    $array[]\
    \ = $operator[$i];\n  }\n  $array[] = $operand[count($operand) - 1];\n  $result\
    \ = $array[0];\n  for($i = 1; $i < count($array); $i+=2){\n    if($array[$i] ==\
    \ \"+\"){\n      $result += $array[$i + 1];\n    }\n    if($array[$i] == \"-\"\
    ){\n      $result -= $array[$i + 1];\n    }\n    if($array[$i] == \"*\"){\n  \
    \    $result *= $array[$i + 1];\n    }\n    if($array[$i] == \"//\"){\n      $result\
    \ = floor($result / $array[$i + 1]);\n    }\n    if($array[$i] == \"**\"){\n \
    \     $result = pow($result, $array[$i + 1]);\n    }\n  }\n  return $result;\n\
    }\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbs_rd8ib.php:54\n\
    Stack trace:\n#0 /tmp/tmpbs_rd8ib.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpbs_rd8ib.php\
    \ on line 54\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $res = $operand[0];\n    for ($i = 0;\
    \ $i < count($operator); $i++) {\n        switch ($operator[$i]) {\n         \
    \   case '+':\n                $res += $operand[$i + 1];\n                break;\n\
    \            case '-':\n                $res -= $operand[$i + 1];\n          \
    \      break;\n            case '*':\n                $res *= $operand[$i + 1];\n\
    \                break;\n            case '//':\n                $res = intdiv($res,\
    \ $operand[$i + 1]);\n                break;\n            case '**':\n       \
    \         $res = pow($res, $operand[$i + 1]);\n                break;\n      \
    \  }\n    }\n    return $res;\n}\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1muh98fr.php:49\n\
    Stack trace:\n#0 /tmp/tmp1muh98fr.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp1muh98fr.php\
    \ on line 49\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $result = 0;\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    if ($i == 0) {\n      $result = $operand[$i] . $operator[$i] .\
    \ $operand[$i + 1];\n    } else {\n      $result = $result . $operator[$i] . $operand[$i\
    \ + 1];\n    }\n  }\n  return eval(\"return $result;\");\n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected end of file, expecting ";" in /tmp/tmp_gn6x5hh.php(29)
    : eval()''d code on line 1

    '
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $result = $operand[0];\n  for ($i = 0;\
    \ $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n      case '+':\n\
    \        $result += $operand[$i + 1];\n        break;\n      case '-':\n     \
    \   $result -= $operand[$i + 1];\n        break;\n      case '*':\n        $result\
    \ *= $operand[$i + 1];\n        break;\n      case '//':\n        $result /= $operand[$i\
    \ + 1];\n        break;\n      case '**':\n        $result **= $operand[$i + 1];\n\
    \        break;\n    }\n  }\n  return $result;\n}\nprint_r(do_algebra(['+', '*',\
    \ '-'], [2, 3, 4, 5]));\necho \"\\n\";\nprint_r(do_algebra(['//', '**', '+'],\
    \ [3, 4, 5, 6]));\necho \"\\n\";\nprint_r(do_algebra(['+', '+', '*'], [3, 4, 5,\
    \ 6]));\necho \"\\n\";\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n6.2373046875\n72\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpwbfcsxya.php:56\nStack trace:\n#0 /tmp/tmpwbfcsxya.php(60): test()\n\
    #1 {main}\n  thrown in /tmp/tmpwbfcsxya.php on line 56\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $result = $operand[0];\n  for ($i = 0;\
    \ $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n      case '+':\n\
    \        $result += $operand[$i + 1];\n        break;\n      case '-':\n     \
    \   $result -= $operand[$i + 1];\n        break;\n      case '*':\n        $result\
    \ *= $operand[$i + 1];\n        break;\n      case '//':\n        $result /= $operand[$i\
    \ + 1];\n        break;\n      case '**':\n        $result = pow($result, $operand[$i\
    \ + 1]);\n        break;\n    }\n  }\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9tfhpjzj.php:49\n\
    Stack trace:\n#0 /tmp/tmp9tfhpjzj.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp9tfhpjzj.php\
    \ on line 49\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  // Write your code here\n  $operand2 =\
    \ array_shift($operand);\n  $result = 0;\n  $op_count = count($operator);\n  foreach($operator\
    \ as $key => $op){\n    $op1 = $operand2;\n    $op2 = array_shift($operand);\n\
    \    if($op === '+'){\n      $result = $op1 + $op2;\n    }\n    if($op === '-'){\n\
    \      $result = $op1 - $op2;\n    }\n    if($op === '*'){\n      $result = $op1\
    \ * $op2;\n    }\n    if($op === '//'){\n      $result = intdiv($op1, $op2);\n\
    \    }\n    if($op === '**'){\n      $result = pow($op1, $op2);\n    }\n    $operand2\
    \ = $result;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n  \
    \  return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph108xllb.php:54\n\
    Stack trace:\n#0 /tmp/tmph108xllb.php(58): test()\n#1 {main}\n  thrown in /tmp/tmph108xllb.php\
    \ on line 54\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $total = 0;\n    for($i = 0; $i < count($operator);\
    \ $i++) {\n        switch($operator[$i]) {\n            case '+':\n          \
    \      $total += $operand[$i] + $operand[$i + 1];\n                break;\n  \
    \          case '-':\n                $total += $operand[$i] - $operand[$i + 1];\n\
    \                break;\n            case '*':\n                $total += $operand[$i]\
    \ * $operand[$i + 1];\n                break;\n            case '//':\n      \
    \          $total += floor($operand[$i] / $operand[$i + 1]);\n               \
    \ break;\n            case '**':\n                $total += pow($operand[$i],\
    \ $operand[$i + 1]);\n                break;\n        }\n    }\n    return $total;\n\
    }\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf5953210.php:49\n\
    Stack trace:\n#0 /tmp/tmpf5953210.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpf5953210.php\
    \ on line 49\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $result = 0;\n  $operator_index = 0;\n\
    \  $operand_index = 0;\n  $end_reached = false;\n  while (!$end_reached) {\n \
    \   if ($operator_index == 0) {\n      $result = $operand[$operand_index];\n \
    \     $operand_index++;\n    } else {\n      switch ($operator[$operator_index\
    \ - 1]) {\n        case '+':\n          $result += $operand[$operand_index];\n\
    \          break;\n        case '-':\n          $result -= $operand[$operand_index];\n\
    \          break;\n        case '*':\n          $result *= $operand[$operand_index];\n\
    \          break;\n        case '//':\n          $result = floor($result / $operand[$operand_index]);\n\
    \          break;\n        case '**':\n          $result = pow($result, $operand[$operand_index]);\n\
    \          break;\n      }\n      $operand_index++;\n    }\n    if ($operand_index\
    \ == count($operand)) {\n      $end_reached = true;\n    }\n    $operator_index++;\n\
    \  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvv4zda4y.php:62\n\
    Stack trace:\n#0 /tmp/tmpvv4zda4y.php(66): test()\n#1 {main}\n  thrown in /tmp/tmpvv4zda4y.php\
    \ on line 62\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $ops = new SplStack();\n  foreach($operator\
    \ as $key => $op) {\n    if($op === '+' || $op === '-') {\n      while(!$ops->isEmpty()\
    \ && $ops->top() !== '(') {\n        $operand[$key] = $operand[$key] === null\
    \ ? $ops->pop()($operand[$key - 1], $operand[$key]) : $ops->pop()($operand[$key],\
    \ $operand[$key + 1]);\n      }\n    } else if($op === '*' || $op === '/') {\n\
    \      while(!$ops->isEmpty() && ($ops->top() === '*' || $ops->top() === '/'))\
    \ {\n        $operand[$key] = $operand[$key] === null ? $ops->pop()($operand[$key\
    \ - 1], $operand[$key]) : $ops->pop()($operand[$key], $operand[$key + 1]);\n \
    \     }\n    } else if($op === '(') {\n      $ops->push($op);\n    } else if($op\
    \ === ')') {\n      while(!$ops->isEmpty() && $ops->top() !== '(') {\n       \
    \ $operand[$key] = $operand[$key] === null ? $ops->pop()($operand[$key - 1], $operand[$key])\
    \ : $ops->pop()($operand[$key], $operand[$key + 1]);\n      }\n      $ops->pop();\n\
    \    }\n    $ops->push($op);\n  }\n  while(!$ops->isEmpty()) {\n    $operand[count($operand)\
    \ - 1] = $ops->pop()($operand[count($operand) - 2], $operand[count($operand) -\
    \ 1]);\n  }\n  return $operand[count($operand) - 1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function *() in /tmp/tmp46xspe28.php:25\n\
    Stack trace:\n#0 /tmp/tmp46xspe28.php(48): do_algebra(Array, Array)\n#1 /tmp/tmp46xspe28.php(52):\
    \ candidate(Array, Array)\n#2 /tmp/tmp46xspe28.php(57): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmp46xspe28.php on line 25\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $result = 0;\n  $operator_length = count($operator);\n\
    \  $operand_length = count($operand);\n  for ($i = 0; $i < $operator_length; $i++)\
    \ {\n    if ($i == 0) {\n      $result = $operand[$i];\n    }\n    if ($operator[$i]\
    \ == '+') {\n      $result += $operand[$i + 1];\n    } elseif ($operator[$i] ==\
    \ '-') {\n      $result -= $operand[$i + 1];\n    } elseif ($operator[$i] == '*')\
    \ {\n      $result *= $operand[$i + 1];\n    } elseif ($operator[$i] == '//')\
    \ {\n      $result = floor($result / $operand[$i + 1]);\n    } elseif ($operator[$i]\
    \ == '**') {\n      $result = pow($result, $operand[$i + 1]);\n    }\n  }\n  return\
    \ $result;\n}\n\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5]);\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1bdvg46k.php:50\n\
    Stack trace:\n#0 /tmp/tmp1bdvg46k.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp1bdvg46k.php\
    \ on line 50\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $res = $operand[0];\n  for ($i = 0; $i\
    \ < count($operator); $i++) {\n    switch ($operator[$i]) {\n      case '+':\n\
    \        $res += $operand[$i + 1];\n        break;\n      case '-':\n        $res\
    \ -= $operand[$i + 1];\n        break;\n      case '*':\n        $res *= $operand[$i\
    \ + 1];\n        break;\n      case '//':\n        $res = intdiv($res, $operand[$i\
    \ + 1]);\n        break;\n      case '**':\n        $res = pow($res, $operand[$i\
    \ + 1]);\n        break;\n    }\n  }\n  return $res;\n}\n\n$operators = array('+',\
    \ '*', '-');\n$operands = array(2, 3, 4, 5);\n\necho do_algebra($operators, $operands);\n\
    function candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0wv_bsis.php:54\n\
    Stack trace:\n#0 /tmp/tmp0wv_bsis.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp0wv_bsis.php\
    \ on line 54\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $result = $operand[0];\n  for ($i = 0;\
    \ $i < count($operator); $i++) {\n    if ($operator[$i] == '+') {\n      $result\
    \ += $operand[$i + 1];\n    } else if ($operator[$i] == '-') {\n      $result\
    \ -= $operand[$i + 1];\n    } else if ($operator[$i] == '*') {\n      $result\
    \ *= $operand[$i + 1];\n    } else if ($operator[$i] == '//') {\n      $result\
    \ = (int)($result / $operand[$i + 1]);\n    } else if ($operator[$i] == '**')\
    \ {\n      $result = pow($result, $operand[$i + 1]);\n    }\n  }\n  return $result;\n\
    }\n\ndo_algebra(['*', '//', '**'], [2, 3, 4, 5]);\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprerklt00.php:45\n\
    Stack trace:\n#0 /tmp/tmprerklt00.php(49): test()\n#1 {main}\n  thrown in /tmp/tmprerklt00.php\
    \ on line 45\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    for ($i = 0; $i < count($operator); $i++)\
    \ {\n        if ($operator[$i] == '**') {\n            $operand[$i + 1] = pow($operand[$i],\
    \ $operand[$i + 1]);\n            unset($operand[$i]);\n            unset($operator[$i]);\n\
    \        }\n    }\n    $operator = array_values($operator);\n    $operand = array_values($operand);\n\
    \    for ($i = 0; $i < count($operator); $i++) {\n        if ($operator[$i] ==\
    \ '*') {\n            $operand[$i + 1] = $operand[$i] * $operand[$i + 1];\n  \
    \          unset($operand[$i]);\n            unset($operator[$i]);\n        }\n\
    \    }\n    $operator = array_values($operator);\n    $operand = array_values($operand);\n\
    \    for ($i = 0; $i < count($operator); $i++) {\n        if ($operator[$i] ==\
    \ '//') {\n            $operand[$i + 1] = floor($operand[$i] / $operand[$i + 1]);\n\
    \            unset($operand[$i]);\n            unset($operator[$i]);\n       \
    \ }\n    }\n    $operator = array_values($operator);\n    $operand = array_values($operand);\n\
    \    for ($i = 0; $i < count($operator); $i++) {\n        if ($operator[$i] ==\
    \ '+') {\n            $operand[$i + 1] = $operand[$i] + $operand[$i + 1];\n  \
    \          unset($operand[$i]);\n            unset($operator[$i]);\n        }\n\
    \    }\n    $operator = array_values($operator);\n    $operand = array_values($operand);\n\
    \    for ($i = 0; $i < count($operator); $i++) {\n        if ($operator[$i] ==\
    \ '-') {\n            $operand[$i + 1] = $operand[$i] - $operand[$i\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "]" in /tmp/tmpsfphbi0d.php
    on line 60

    '
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    if (empty($operator) || empty($operand))\
    \ return 0;\n    if (count($operator) != count($operand) - 1) return 0;\n    $result\
    \ = $operand[0];\n    for ($i = 0; $i < count($operator); $i++) {\n        switch\
    \ ($operator[$i]) {\n            case '+':\n                $result += $operand[$i\
    \ + 1];\n                break;\n            case '-':\n                $result\
    \ -= $operand[$i + 1];\n                break;\n            case '*':\n      \
    \          $result *= $operand[$i + 1];\n                break;\n            case\
    \ '//':\n                $result = floor($result / $operand[$i + 1]);\n      \
    \          break;\n            case '**':\n                $result = pow($result,\
    \ $operand[$i + 1]);\n                break;\n            default:\n         \
    \       break;\n        }\n    }\n    return $result;\n}\necho do_algebra(['*',\
    \ '//', '+'], [5, 2, 3, 4]);\necho do_algebra(['-', '*', '-'], [2, 3, 4, 5]);\n\
    echo do_algebra(['**', '-', '*'], [2, 3, 4, 5]);\necho do_algebra(['+', '*', '-'],\
    \ [2, 3, 4, 5]);\necho do_algebra(['+', '+', '-'], [2, 3, 4, 5]);\necho do_algebra(['//',\
    \ '-', '+'], [2, 3, 4, 5]);\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "7-9201541\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpezlowyge.php:59\n\
    Stack trace:\n#0 /tmp/tmpezlowyge.php(63): test()\n#1 {main}\n  thrown in /tmp/tmpezlowyge.php\
    \ on line 59\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  // Your code here\n}\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoll59udf.php:28\n\
    Stack trace:\n#0 /tmp/tmpoll59udf.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpoll59udf.php\
    \ on line 28\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    if(count($operator) == 0 || count($operand)\
    \ == 0) return 0;\n    if(count($operator) == 1 && count($operand) == 2) return\
    \ $operand[0] + $operand[1];\n    if(count($operator) == 2 && count($operand)\
    \ == 3) return $operand[0] + $operand[1] + $operand[2];\n    if(count($operator)\
    \ == 2 && count($operand) == 3) return $operand[0] * $operand[1] * $operand[2];\n\
    \    $final = 0;\n    $prev_op = '+';\n    foreach($operand as $key => $val) {\n\
    \        if($key == 0) {\n            $final = $val;\n            continue;\n\
    \        }\n        $operator[$key - 1] == '+' ? $final += $val : $final -= $val;\n\
    \    }\n    return $final;\n}\n$operator = ['+'];\n$operand = [2, 3];\necho do_algebra($operator,\
    \ $operand) . PHP_EOL;\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "5\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv57o8w3_.php:44\n\
    Stack trace:\n#0 /tmp/tmpv57o8w3_.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpv57o8w3_.php\
    \ on line 44\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = $operand[0];\n    for ($i =\
    \ 0; $i < count($operator); $i++) {\n        switch ($operator[$i]) {\n      \
    \      case '+':\n                $result += $operand[$i + 1];\n             \
    \   break;\n            case '-':\n                $result -= $operand[$i + 1];\n\
    \                break;\n            case '*':\n                $result *= $operand[$i\
    \ + 1];\n                break;\n            case '//':\n                $result\
    \ = floor($result / $operand[$i + 1]);\n                break;\n            case\
    \ '**':\n                $result = pow($result, $operand[$i + 1]);\n         \
    \       break;\n        }\n    }\n    return $result;\n}\necho(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]));\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_az6zdss.php:50\n\
    Stack trace:\n#0 /tmp/tmp_az6zdss.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp_az6zdss.php\
    \ on line 50\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  // your code here\n}\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_rruvo8g.php:28\n\
    Stack trace:\n#0 /tmp/tmp_rruvo8g.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp_rruvo8g.php\
    \ on line 28\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = $operand[0];\n    for ($i =\
    \ 0; $i < count($operator); $i++) {\n        if ($operator[$i] == '+') {\n   \
    \         $result += $operand[$i + 1];\n        } else if ($operator[$i] == '-')\
    \ {\n            $result -= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == '*') {\n            $result *= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == '//') {\n            $result /= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == '**') {\n            $result **= $operand[$i + 1];\n        }\n    }\n  \
    \  return $result;\n}\n\n$operator = ['+', '*', '-', '//', '**'];\n$operand =\
    \ [2, 3, 4, 5, 3];\n$expected = 1;\n\n$result = do_algebra($operator, $operand);\n\
    echo $result;\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 5 in /tmp/tmp_vtucc5c.php on line 32\n1\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp_vtucc5c.php:50\nStack\
    \ trace:\n#0 /tmp/tmp_vtucc5c.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp_vtucc5c.php\
    \ on line 50\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $count = 0;\n  foreach($operator as $key\
    \ => $val){\n    switch($val){\n      case \"+\":\n        $count += $operand[$key+1];\n\
    \        break;\n      case \"-\":\n        $count -= $operand[$key+1];\n    \
    \    break;\n      case \"*\":\n        $count *= $operand[$key+1];\n        break;\n\
    \      case \"//\":\n        $count = floor($count / $operand[$key+1]);\n    \
    \    break;\n      case \"**\":\n        $count = pow($count, $operand[$key+1]);\n\
    \        break;\n    }\n  }\n  return $count + $operand[0];\n}\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]);\necho \"<br>\";\necho do_algebra(['*', '//', '+'],\
    \ [2, 3, 4, 5]);\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "9<br>7\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0vb6zgor.php:51\n\
    Stack trace:\n#0 /tmp/tmp0vb6zgor.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp0vb6zgor.php\
    \ on line 51\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = array_shift($operand);\n  \
    \  while($currentOperator = array_shift($operator)) {\n        $currentOperand\
    \ = array_shift($operand);\n        switch($currentOperator) {\n            case\
    \ '+':\n                $result += $currentOperand;\n                break;\n\
    \            case '-':\n                $result -= $currentOperand;\n        \
    \        break;\n            case '*':\n                $result *= $currentOperand;\n\
    \                break;\n            case '//':\n                $result = floor($result\
    \ / $currentOperand);\n                break;\n            case '**':\n      \
    \          $result = pow($result, $currentOperand);\n                break;\n\
    \        }\n    }\n    return $result;\n}\n$operator = array('**', '*', '-');\n\
    $operand = array(2, 3, 4, 5);\necho do_algebra($operator, $operand);\necho \"\\\
    n\";\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "27\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuyjsrci5.php:54\n\
    Stack trace:\n#0 /tmp/tmpuyjsrci5.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpuyjsrci5.php\
    \ on line 54\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $result = $operand[0];\n  $operand = array_slice($operand,\
    \ 1);\n  foreach ($operator as $key => $value) {\n    switch ($value) {\n    \
    \  case '+':\n        $result += $operand[$key];\n        break;\n      case '-':\n\
    \        $result -= $operand[$key];\n        break;\n      case '*':\n       \
    \ $result *= $operand[$key];\n        break;\n      case '//':\n        $result\
    \ = floor($result / $operand[$key]);\n        break;\n      case '**':\n     \
    \   $result = pow($result, $operand[$key]);\n        break;\n    }\n  }\n  return\
    \ $result;\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjsmmscdc.php:51\n\
    Stack trace:\n#0 /tmp/tmpjsmmscdc.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpjsmmscdc.php\
    \ on line 51\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $expression = $operand[0];\n    for ($i\
    \ = 0; $i < count($operator); $i++) {\n        $expression .= $operator[$i] .\
    \ $operand[$i + 1];\n    }\n    return eval(\"return $expression;\");\n}\n\n$op\
    \ = [\"+\", \"*\", \"-\"];\n$arg = [2, 3, 4, 5];\necho do_algebra($op, $arg);\n\
    \nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '9

    Parse error: syntax error, unexpected end of file, expecting ";" in /tmp/tmp78av05ca.php(25)
    : eval()''d code on line 1

    '
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $output = $operand[0];\n    for ($i =\
    \ 0; $i < count($operator); $i++) {\n        if ($operator[$i] == '+') {\n   \
    \         $output += $operand[$i + 1];\n        } elseif ($operator[$i] == '-')\
    \ {\n            $output -= $operand[$i + 1];\n        } elseif ($operator[$i]\
    \ == '*') {\n            $output *= $operand[$i + 1];\n        } elseif ($operator[$i]\
    \ == '//') {\n            $output = floor($output / $operand[$i + 1]);\n     \
    \   } elseif ($operator[$i] == '**') {\n            $output = pow($output, $operand[$i\
    \ + 1]);\n        }\n    }\n    return $output;\n}\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpztrbip5h.php:43\n\
    Stack trace:\n#0 /tmp/tmpztrbip5h.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpztrbip5h.php\
    \ on line 43\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $res = $operand[0];\n  for ($i = 0; $i\
    \ < count($operator); $i++) {\n    if ($operator[$i] == '+') {\n      $res +=\
    \ $operand[$i + 1];\n    } else if ($operator[$i] == '-') {\n      $res -= $operand[$i\
    \ + 1];\n    } else if ($operator[$i] == '*') {\n      $res *= $operand[$i + 1];\n\
    \    } else if ($operator[$i] == '//') {\n      $res = floor($res / $operand[$i\
    \ + 1]);\n    } else if ($operator[$i] == '**') {\n      $res = pow($res, $operand[$i\
    \ + 1]);\n    }\n  }\n  return $res;\n}\n\necho do_algebra(['+', '*', '-'], [2,\
    \ 3, 4, 5]) . PHP_EOL;\necho do_algebra(['*', '**', '+'], [2, 3, 4, 5]) . PHP_EOL;\n\
    echo do_algebra(['//', '**', '//'], [2, 3, 4, 5]) . PHP_EOL;\necho do_algebra(['+',\
    \ '*', '-'], [10, 2, 2, 3]) . PHP_EOL;\necho do_algebra(['//', '**', '//'], [10,\
    \ 2, 2, 3]) . PHP_EOL;\necho do_algebra(['+', '*', '-'], [10, 2, 2, 3, 7]) . PHP_EOL;\n\
    echo do_algebra(['//', '**', '//'], [10, 2, 2, 3, 7]) . PHP_EOL;\necho do_algebra(['//',\
    \ '**', '//'], [10, 2, 2, 3, 7, 2]) . PHP_EOL;\necho do_algebra(['//', '**', '//'],\
    \ [10, 2, 2, 3, 7, 2, 2]) . PHP_EOL;\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n1301\n0\n21\n8\n21\n8\n8\n8\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmp0em912nj.php:53\nStack trace:\n#0 /tmp/tmp0em912nj.php(57):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp0em912nj.php on line 53\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $n = count($operand);\n  $expression =\
    \ $operand[0];\n  for ($i = 1; $i < $n; $i++) {\n    switch ($operator[$i - 1])\
    \ {\n      case '+':\n        $expression += $operand[$i];\n        break;\n \
    \     case '-':\n        $expression -= $operand[$i];\n        break;\n      case\
    \ '*':\n        $expression *= $operand[$i];\n        break;\n      case '//':\n\
    \        $expression //= $operand[$i];\n        break;\n      case '**':\n   \
    \     $expression **= $operand[$i];\n        break;\n    }\n  }\n  return $expression;\n\
    }\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "break" in /tmp/tmp75qytyti.php on
    line 36

    '
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    // Write your code here\n    $result\
    \ = $operand[0];\n    for($i = 0; $i < count($operator); $i++){\n        if($operator[$i]\
    \ == \"+\"){\n            $result += $operand[$i+1];\n        }else if($operator[$i]\
    \ == \"-\"){\n            $result -= $operand[$i+1];\n        }else if($operator[$i]\
    \ == \"*\"){\n            $result *= $operand[$i+1];\n        }else if($operator[$i]\
    \ == \"//\"){\n            $result = (int)($result / $operand[$i+1]);\n      \
    \  }else if($operator[$i] == \"**\"){\n            $result = (int)pow($result,\
    \ $operand[$i+1]);\n        }\n    }\n    return $result;\n}\n\n$operator = ['+',\
    \ '*', '-'];\n$operand = [2, 3, 4, 5];\necho do_algebra($operator, $operand);\
    \ // result = 9\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphgspirb_.php:48\n\
    Stack trace:\n#0 /tmp/tmphgspirb_.php(52): test()\n#1 {main}\n  thrown in /tmp/tmphgspirb_.php\
    \ on line 48\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = $operand[0];\n    for ($i =\
    \ 0; $i < count($operator); $i++) {\n        if ($operator[$i] == \"+\") {\n \
    \           $result += $operand[$i + 1];\n        } else if ($operator[$i] ==\
    \ \"-\") {\n            $result -= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == \"*\") {\n            $result *= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == \"//\") {\n            $result /= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == \"**\") {\n            $result **= $operand[$i + 1];\n        }\n    }\n\
    \    return $result;\n}\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwmc_eb0m.php:43\n\
    Stack trace:\n#0 /tmp/tmpwmc_eb0m.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpwmc_eb0m.php\
    \ on line 43\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = $operand[0];\n    for ($i =\
    \ 0; $i < count($operator); $i++) {\n        switch ($operator[$i]) {\n      \
    \      case '+':\n                $result += $operand[$i + 1];\n             \
    \   break;\n            case '-':\n                $result -= $operand[$i + 1];\n\
    \                break;\n            case '*':\n                $result *= $operand[$i\
    \ + 1];\n                break;\n            case '//':\n                $result\
    \ = floor($result / $operand[$i + 1]);\n                break;\n            case\
    \ '**':\n                $result = $result ** $operand[$i + 1];\n            \
    \    break;\n        }\n    }\n    return $result;\n}\n\n$operator = [\"+\", \"\
    *\", \"-\"];\n$operand = [2, 3, 4, 5];\necho do_algebra($operator, $operand);\n\
    \nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpt_il_vbw.php:54\n\
    Stack trace:\n#0 /tmp/tmpt_il_vbw.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpt_il_vbw.php\
    \ on line 54\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $num1 = array_shift($operand);\n    while(count($operand)\
    \ > 0) {\n        $num2 = array_shift($operand);\n        $operator = array_shift($operator);\n\
    \        switch($operator) {\n            case '+':\n                $num1 +=\
    \ $num2;\n                break;\n            case '-':\n                $num1\
    \ -= $num2;\n                break;\n            case '*':\n                $num1\
    \ *= $num2;\n                break;\n            case '//':\n                $num1\
    \ = (int)($num1 / $num2);\n                break;\n            case '**':\n  \
    \              $num1 = pow($num1, $num2);\n                break;\n        }\n\
    \    }\n    return $num1;\n}\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught TypeError: array_shift(): Argument #1 ($array)\
    \ must be of type array, string given in /tmp/tmporu1wluq.php:24\nStack trace:\n\
    #0 /tmp/tmporu1wluq.php(24): array_shift('**')\n#1 /tmp/tmporu1wluq.php(46): do_algebra('**',\
    \ Array)\n#2 /tmp/tmporu1wluq.php(50): candidate(Array, Array)\n#3 /tmp/tmporu1wluq.php(55):\
    \ test()\n#4 {main}\n  thrown in /tmp/tmporu1wluq.php on line 24\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = $operand[0];\n    $index =\
    \ 0;\n    foreach($operator as $op) {\n        switch($op) {\n            case\
    \ '+':\n                $result += $operand[$index + 1];\n                break;\n\
    \            case '-':\n                $result -= $operand[$index + 1];\n   \
    \             break;\n            case '*':\n                $result *= $operand[$index\
    \ + 1];\n                break;\n            case '//':\n                $result\
    \ /= $operand[$index + 1];\n                break;\n            case '**':\n \
    \               $result **= $operand[$index + 1];\n                break;\n  \
    \      }\n        $index++;\n    }\n    return $result;\n}\n\n$op = ['+', '*',\
    \ '-'];\n$arr = [2, 3, 4, 5];\necho do_algebra($op, $arr);\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7qy6zwug.php:55\n\
    Stack trace:\n#0 /tmp/tmp7qy6zwug.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp7qy6zwug.php\
    \ on line 55\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $operator = array_reverse($operator);\n\
    \  $operand = array_reverse($operand);\n  while (count($operator) > 0) {\n   \
    \ $operator_current = array_pop($operator);\n    $operand_1 = array_pop($operand);\n\
    \    $operand_2 = array_pop($operand);\n    switch ($operator_current) {\n   \
    \   case '+':\n        $operand[] = $operand_1 + $operand_2;\n        break;\n\
    \      case '-':\n        $operand[] = $operand_1 - $operand_2;\n        break;\n\
    \      case '*':\n        $operand[] = $operand_1 * $operand_2;\n        break;\n\
    \      case '//':\n        $operand[] = floor($operand_1 / $operand_2);\n    \
    \    break;\n      case '**':\n        $operand[] = pow($operand_1, $operand_2);\n\
    \        break;\n    }\n  }\n  return $operand[0];\n}\ndo_algebra(['*', '+', '+'],\
    \ [6, 2, 4, 8]); //52\ndo_algebra(['+', '*', '-'], [2, 3, 4, 5]); //9\ndo_algebra(['+',\
    \ '-', '*'], [3, 1, 2, 4]); //-3\ndo_algebra(['//', '*', '-', '+'], [12, 3, 4,\
    \ 3, 7]); //6\ndo_algebra(['+', '+', '+', '+'], [5, 5, 5, 5, 5]); //25\ndo_algebra(['+',\
    \ '+', '+', '+'], [5, 5, 5, 6, 7]); //28\ndo_algebra(['//', '*', '//', '*'], [12,\
    \ 6, 7, 5, 4]); //6\ndo_algebra(['*', '*', '*', '*'], [1, 2, 3, 4, 5]); //120\n\
    do_algebra(['+', '+', '*', '+'],\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpvtvu9bv3.php on line 56

    '
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = 0;\n    $operation = '';\n\
    \    $number = '';\n    for ($i = 0; $i < count($operator); $i++) {\n        if\
    \ ($i == 0) {\n            $result = $operand[$i];\n            $operation = $operator[$i];\n\
    \            $number = $operand[$i + 1];\n        } else {\n            if ($operation\
    \ == '+') {\n                $result += $number;\n            } elseif ($operation\
    \ == '-') {\n                $result -= $number;\n            } elseif ($operation\
    \ == '*') {\n                $result *= $number;\n            } elseif ($operation\
    \ == '//') {\n                $result = floor($result / $number);\n          \
    \  } elseif ($operation == '**') {\n                $result = pow($result, $number);\n\
    \            }\n            $operation = $operator[$i];\n            $number =\
    \ $operand[$i + 1];\n        }\n    }\n    if ($operation == '+') {\n        $result\
    \ += $number;\n    } elseif ($operation == '-') {\n        $result -= $number;\n\
    \    } elseif ($operation == '*') {\n        $result *= $number;\n    } elseif\
    \ ($operation == '//') {\n        $result = floor($result / $number);\n    } elseif\
    \ ($operation == '**') {\n        $result = pow($result, $number);\n    }\n  \
    \  return $result;\n}\n$operator = ['+', '*', '-'];\n$operand = [2, 3, 4, 5];\n\
    echo do_algebra($operator, $operand);\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl06gc_ai.php:67\n\
    Stack trace:\n#0 /tmp/tmpl06gc_ai.php(71): test()\n#1 {main}\n  thrown in /tmp/tmpl06gc_ai.php\
    \ on line 67\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $res = $operand[0];\n    for ($i = 0;\
    \ $i < count($operator); $i++) {\n        switch ($operator[$i]) {\n         \
    \   case '+':\n                $res += $operand[$i + 1];\n                break;\n\
    \            case '-':\n                $res -= $operand[$i + 1];\n          \
    \      break;\n            case '*':\n                $res *= $operand[$i + 1];\n\
    \                break;\n            case '//':\n                $res = floor($res\
    \ / $operand[$i + 1]);\n                break;\n            case '**':\n     \
    \           $res = pow($res, $operand[$i + 1]);\n                break;\n    \
    \    }\n    }\n    return $res;\n}\n\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpihfth0qk.php:50\n\
    Stack trace:\n#0 /tmp/tmpihfth0qk.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpihfth0qk.php\
    \ on line 50\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $result = $operand[0];\n  for ($i = 0;\
    \ $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n      case '+':\n\
    \        $result += $operand[$i + 1];\n        break;\n      case '-':\n     \
    \   $result -= $operand[$i + 1];\n        break;\n      case '*':\n        $result\
    \ *= $operand[$i + 1];\n        break;\n      case '//':\n        $result = floor($result\
    \ / $operand[$i + 1]);\n        break;\n      case '**':\n        $result = $result\
    \ ** $operand[$i + 1];\n        break;\n    }\n  }\n  return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpws_8u5hv.php:49\n\
    Stack trace:\n#0 /tmp/tmpws_8u5hv.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpws_8u5hv.php\
    \ on line 49\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    if (!is_array($operator) || !is_array($operand))\
    \ return false;\n    $res = $operand[0];\n    for ($i = 0; $i < count($operator);\
    \ $i++) {\n        switch ($operator[$i]) {\n            case '+':\n         \
    \       $res += $operand[$i + 1];\n                break;\n            case '-':\n\
    \                $res -= $operand[$i + 1];\n                break;\n         \
    \   case '*':\n                $res *= $operand[$i + 1];\n                break;\n\
    \            case '//':\n                $res = floor($res / $operand[$i + 1]);\n\
    \                break;\n            case '**':\n                $res = pow($res,\
    \ $operand[$i + 1]);\n                break;\n            default:\n         \
    \       return false;\n        }\n    }\n    return $res;\n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpltjhv04z.php:53\n\
    Stack trace:\n#0 /tmp/tmpltjhv04z.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpltjhv04z.php\
    \ on line 53\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $count = count($operand);\n  $result =\
    \ $operand[0];\n  for ($i = 1; $i < $count; $i++) {\n    $op = $operator[$i -\
    \ 1];\n    $v = $operand[$i];\n    switch ($op) {\n      case '+':\n        $result\
    \ += $v;\n        break;\n      case '-':\n        $result -= $v;\n        break;\n\
    \      case '*':\n        $result *= $v;\n        break;\n      case '//':\n \
    \       $result = floor($result / $v);\n        break;\n      case '**':\n   \
    \     $result = pow($result, $v);\n        break;\n    }\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgl8j6c5t.php:53\n\
    Stack trace:\n#0 /tmp/tmpgl8j6c5t.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpgl8j6c5t.php\
    \ on line 53\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $result = $operand[0];\n  for ($i = 0;\
    \ $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n      case '+':\n\
    \        $result += $operand[$i + 1];\n        break;\n      case '-':\n     \
    \   $result -= $operand[$i + 1];\n        break;\n      case '*':\n        $result\
    \ *= $operand[$i + 1];\n        break;\n      case '//':\n        $result = floor($result\
    \ / $operand[$i + 1]);\n        break;\n      case '**':\n        $result = $result\
    \ ** $operand[$i + 1];\n        break;\n    }\n  }\n  return $result;\n}\n\n$operator\
    \ = ['+', '*', '-'];\n$operand = [2, 3, 4, 5];\n\necho do_algebra($operator, $operand);\n\
    function candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplcb0pxva.php:54\n\
    Stack trace:\n#0 /tmp/tmplcb0pxva.php(58): test()\n#1 {main}\n  thrown in /tmp/tmplcb0pxva.php\
    \ on line 54\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = $operand[0];\n    for ($i =\
    \ 0; $i < count($operator); $i++) {\n        switch ($operator[$i]) {\n      \
    \      case '+':\n                $result += $operand[$i + 1];\n             \
    \   break;\n            case '-':\n                $result -= $operand[$i + 1];\n\
    \                break;\n            case '*':\n                $result *= $operand[$i\
    \ + 1];\n                break;\n            case '//':\n                $result\
    \ = floor($result / $operand[$i + 1]);\n                break;\n            case\
    \ '**':\n                $result = $result ** $operand[$i + 1];\n            \
    \    break;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8jgxho6q.php:50\n\
    Stack trace:\n#0 /tmp/tmp8jgxho6q.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp8jgxho6q.php\
    \ on line 50\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = array_shift($operand);\n  \
    \  foreach ($operator as $i => $op) {\n        switch ($op) {\n            case\
    \ '+':\n                $result += $operand[$i];\n                break;\n   \
    \         case '-':\n                $result -= $operand[$i];\n              \
    \  break;\n            case '*':\n                $result *= $operand[$i];\n \
    \               break;\n            case '//':\n                $result = floor($result\
    \ / $operand[$i]);\n                break;\n            case '**':\n         \
    \       $result = pow($result, $operand[$i]);\n                break;\n      \
    \  }\n    }\n    return $result;\n}\n\n$operator = ['+', '*', '-'];\n$operand\
    \ = [2, 3, 4, 5];\necho do_algebra($operator, $operand) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiqxogh9u.php:53\n\
    Stack trace:\n#0 /tmp/tmpiqxogh9u.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpiqxogh9u.php\
    \ on line 53\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    if(count($operator) !== count($operand)\
    \ - 1) {\n        throw new Exception(\"operator and operand are not equal\");\n\
    \    }\n    $operand = array_reverse($operand);\n    $result = array_shift($operand);\n\
    \    foreach($operator as $val) {\n        $result = calc($val, array_shift($operand),\
    \ $result);\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function calc() in /tmp/tmpdsu_wvwf.php:27\n\
    Stack trace:\n#0 /tmp/tmpdsu_wvwf.php(33): do_algebra(Array, Array)\n#1 /tmp/tmpdsu_wvwf.php(37):\
    \ candidate(Array, Array)\n#2 /tmp/tmpdsu_wvwf.php(42): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmpdsu_wvwf.php on line 27\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $result = 0;\n  $arr_len = count($operand);\n\
    \  for ($i = 0; $i < $arr_len - 1; $i++) {\n    switch ($operator[$i]) {\n   \
    \   case '+':\n        $result = $operand[$i] + $operand[$i + 1];\n        break;\n\
    \      case '-':\n        $result = $operand[$i] - $operand[$i + 1];\n       \
    \ break;\n      case '*':\n        $result = $operand[$i] * $operand[$i + 1];\n\
    \        break;\n      case '//':\n        $result = floor($operand[$i] / $operand[$i\
    \ + 1]);\n        break;\n      case '**':\n        $result = pow($operand[$i],\
    \ $operand[$i + 1]);\n        break;\n    }\n    $operand[$i + 1] = $result;\n\
    \  }\n  return $result;\n}\n\necho do_algebra(['+', '-', '*', '//', '**'], [2,\
    \ 2, 3, 2, 5]) . PHP_EOL;\necho do_algebra(['+', '-', '*', '//', '**'], [4, 2,\
    \ 1, 2, 5]) . PHP_EOL;\necho do_algebra(['+', '-', '*', '//', '**'], [2, 2, 3,\
    \ 2, 6]) . PHP_EOL;\necho do_algebra(['+', '-', '*', '//', '**'], [4, 2, 1, 2,\
    \ 4]) . PHP_EOL;\necho do_algebra(['+', '-', '*', '//', '**'], [2, 2, 3, 2, 2])\
    \ . PHP_EOL;\necho do_algebra(['+', '-', '*', '//', '**'], [4, 2, 1, 2, 2]) .\
    \ PHP_EOL;\necho do_algebra(['+', '-', '*', '//', '**'], [2, 2, 3,\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmps8qyzrku.php on line 53

    '
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $result = 0;\n  $arr = count($operand);\n\
    \  for ($i = 0; $i < $arr - 1; $i++) {\n    if ($operator[$i] == \"+\") {\n  \
    \    $result = $operand[$i] + $operand[$i + 1];\n    } elseif ($operator[$i] ==\
    \ \"-\") {\n      $result = $operand[$i] - $operand[$i + 1];\n    } elseif ($operator[$i]\
    \ == \"*\") {\n      $result = $operand[$i] * $operand[$i + 1];\n    } elseif\
    \ ($operator[$i] == \"//\") {\n      $result = $operand[$i] / $operand[$i + 1];\n\
    \    } elseif ($operator[$i] == \"**\") {\n      $result = $operand[$i] ** $operand[$i\
    \ + 1];\n    }\n    $operand[$i + 1] = $result;\n  }\n  return $result;\n}\necho\
    \ do_algebra(['+', '*', '-'], [2, 3, 4, 5]);\nfunction candidate(...$args) {\n\
    \    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp21n7_6j5.php:46\n\
    Stack trace:\n#0 /tmp/tmp21n7_6j5.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp21n7_6j5.php\
    \ on line 46\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $operandCount = count($operand);\n  \
    \  $result = $operand[0];\n    for ($i = 0; $i < $operandCount - 1; $i++) {\n\
    \        switch ($operator[$i]) {\n            case '+':\n                $result\
    \ += $operand[$i + 1];\n                break;\n            case '-':\n      \
    \          $result -= $operand[$i + 1];\n                break;\n            case\
    \ '*':\n                $result *= $operand[$i + 1];\n                break;\n\
    \            case '//':\n                $result = (int)($result / $operand[$i\
    \ + 1]);\n                break;\n            case '**':\n                $result\
    \ = (int)pow($result, $operand[$i + 1]);\n                break;\n        }\n\
    \    }\n    return $result;\n}\n$operator = ['+', '*', '-'];\n$operand = [2, 3,\
    \ 4, 5];\necho do_algebra($operator, $operand);\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaug5lwqb.php:53\n\
    Stack trace:\n#0 /tmp/tmpaug5lwqb.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpaug5lwqb.php\
    \ on line 53\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = $operand[0];\n    for ($i =\
    \ 0; $i < count($operator); $i++) {\n        switch ($operator[$i]) {\n      \
    \      case '+':\n                $result += $operand[$i + 1];\n             \
    \   break;\n            case '-':\n                $result -= $operand[$i + 1];\n\
    \                break;\n            case '*':\n                $result *= $operand[$i\
    \ + 1];\n                break;\n            case '//':\n                $result\
    \ /= $operand[$i + 1];\n                break;\n            case '**':\n     \
    \           $result = pow($result, $operand[$i + 1]);\n                break;\n\
    \        }\n    }\n    return $result;\n}\necho do_algebra(['+', '*', '-'], [2,\
    \ 3, 4, 5]);\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp15fon1u6.php:50\n\
    Stack trace:\n#0 /tmp/tmp15fon1u6.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp15fon1u6.php\
    \ on line 50\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n\t$operand = array_map('intval', $operand);\n\
    \t$operand = implode(' ', $operand);\n\t$operator = implode(' ', $operator);\n\
    \t$expression = $operand . ' ' . $operator;\n\t\n\treturn eval(\"return $expression;\"\
    );\n}\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5]); // 2 + 3 * 4 - 5 => 9\n\
    echo do_algebra(['*', '//', '**'], [2, 3, 4, 5]); // 2 * 3 // 4 ** 5 => 2147483647\n\
    echo do_algebra(['*', '//', '**'], [2, -3, 4, 5]); // 2 * -3 // 4 ** 5 => -2\n\
    echo do_algebra(['*', '//', '**'], [2, 3, 4, -5]); // 2 * 3 // 4 ** -5 => -0.04\n\
    echo do_algebra(['+', '-', '*', '//', '**'], [2, 3, 4, 5, 6]); // 2 + 3 - 4 *\
    \ 5 // 6 ** 0 => 6\necho do_algebra(['+', '-', '*', '//', '**'], [2, 3, 4, 5,\
    \ 6, 7]); // 2 + 3 - 4 * 5 // 6 ** 7 => 3\necho do_algebra(['+', '-', '*', '//',\
    \ '**'], [2, 3, 4, 5, 6, 7, 8]); // 2 + 3 - 4 * 5 // 6 ** 7 + 8 => 11\necho do_algebra(['+',\
    \ '-', '*', '//', '**'], [2, 3, 4, 5, 6, 7, 8, 9]); // 2 + 3 - 4 * 5 // 6 ** 7\
    \ + 8 - 9 => 2\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected integer "3", expecting ";" in /tmp/tmpto933zqw.php(26)
    : eval()''d code on line 1

    '
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $result = $operand[0];\n  for ($i = 0;\
    \ $i < count($operator); $i++) {\n    if ($operator[$i] == '+') {\n      $result\
    \ += $operand[$i + 1];\n    } else if ($operator[$i] == '-') {\n      $result\
    \ -= $operand[$i + 1];\n    } else if ($operator[$i] == '*') {\n      $result\
    \ *= $operand[$i + 1];\n    } else if ($operator[$i] == '//') {\n      $result\
    \ = floor($result / $operand[$i + 1]);\n    } else if ($operator[$i] == '**')\
    \ {\n      $result = pow($result, $operand[$i + 1]);\n    }\n  }\n  return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9k3ofg0v.php:44\n\
    Stack trace:\n#0 /tmp/tmp9k3ofg0v.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp9k3ofg0v.php\
    \ on line 44\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $length = count($operator);\n  for ($i\
    \ = 0; $i < $length; $i++) {\n    if ($operator[$i] == '//') {\n      $tmp = $operand[$i]\
    \ / $operand[$i + 1];\n      array_splice($operand, $i, 2, floor($tmp));\n   \
    \   array_splice($operator, $i, 1);\n      $length--;\n      $i--;\n    }\n  }\n\
    \  $length = count($operator);\n  for ($i = 0; $i < $length; $i++) {\n    if ($operator[$i]\
    \ == '**') {\n      $tmp = pow($operand[$i], $operand[$i + 1]);\n      array_splice($operand,\
    \ $i, 2, $tmp);\n      array_splice($operator, $i, 1);\n      $length--;\n   \
    \   $i--;\n    }\n  }\n  $length = count($operator);\n  for ($i = 0; $i < $length;\
    \ $i++) {\n    if ($operator[$i] == '*') {\n      $tmp = $operand[$i] * $operand[$i\
    \ + 1];\n      array_splice($operand, $i, 2, $tmp);\n      array_splice($operator,\
    \ $i, 1);\n      $length--;\n      $i--;\n    }\n  }\n  $length = count($operator);\n\
    \  for ($i = 0; $i < $length; $i++) {\n    if ($operator[$i] == '+') {\n     \
    \ $tmp = $operand[$i] + $operand[$i + 1];\n      array_splice($operand, $i, 2,\
    \ $tmp);\n      array_splice($operator, $i, 1);\n      $length--;\n      $i--;\n\
    \    }\n  }\n  $length = count($operator);\n  for ($i = 0; $i < $length; $i++)\
    \ {\n    if ($operator[$i] == '-') {\n      $tmp = $operand[$i] - $operand[$\n\
    function candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting variable or
    "{" or "$" in /tmp/tmpaf3jw6yw.php on line 65

    '
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = $operand[0];\n    for ($i =\
    \ 0; $i < count($operator); $i++) {\n        switch ($operator[$i]) {\n      \
    \      case '+':\n                $result += $operand[$i + 1];\n             \
    \   break;\n            case '-':\n                $result -= $operand[$i + 1];\n\
    \                break;\n            case '*':\n                $result *= $operand[$i\
    \ + 1];\n                break;\n            case '//':\n                $result\
    \ /= $operand[$i + 1];\n                break;\n            case '**':\n     \
    \           $result = pow($result, $operand[$i + 1]);\n                break;\n\
    \        }\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n  \
    \  return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwin9b6jl.php:49\n\
    Stack trace:\n#0 /tmp/tmpwin9b6jl.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpwin9b6jl.php\
    \ on line 49\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $operationString = \"\";\n  for ($i = 0;\
    \ $i < count($operand); $i++) {\n    $operationString .= $operand[$i];\n    if\
    \ (isset($operator[$i])) {\n      $operationString .= $operator[$i];\n    }\n\
    \  }\n  return (string) eval(\"return $operationString;\");\n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_ns90lo6.php:36\n\
    Stack trace:\n#0 /tmp/tmp_ns90lo6.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp_ns90lo6.php\
    \ on line 36\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $result = $operand[0];\n  for ($i = 0;\
    \ $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n      case '+':\n\
    \        $result += $operand[$i + 1];\n        break;\n      case '-':\n     \
    \   $result -= $operand[$i + 1];\n        break;\n      case '*':\n        $result\
    \ *= $operand[$i + 1];\n        break;\n      case '//':\n        $result = (int)\
    \ ($result / $operand[$i + 1]);\n        break;\n      case '**':\n        $result\
    \ = pow($result, $operand[$i + 1]);\n        break;\n    }\n  }\n  return $result;\n\
    }\n\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5]) . PHP_EOL; // 9\necho do_algebra(['+',\
    \ '*', '//', '**'], [2, 3, 4, 5]) . PHP_EOL; // 79\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n\nWarning: Undefined array key 4 in /tmp/tmpsdnpqbb0.php on line 37\n\
    1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsdnpqbb0.php:52\n\
    Stack trace:\n#0 /tmp/tmpsdnpqbb0.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpsdnpqbb0.php\
    \ on line 52\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $i = 0;\n    while ($i < count($operator))\
    \ {\n        if ($operator[$i] == \"**\") {\n            $operand[$i] = pow($operand[$i],\
    \ $operand[$i + 1]);\n            unset($operand[$i + 1]);\n            unset($operator[$i]);\n\
    \            $operand = array_values($operand);\n            $operator = array_values($operator);\n\
    \            $i--;\n        }\n        elseif ($operator[$i] == \"//\") {\n  \
    \          $operand[$i] = floor($operand[$i] / $operand[$i + 1]);\n          \
    \  unset($operand[$i + 1]);\n            unset($operator[$i]);\n            $operand\
    \ = array_values($operand);\n            $operator = array_values($operator);\n\
    \            $i--;\n        }\n        $i++;\n    }\n    $i = 0;\n    while ($i\
    \ < count($operator)) {\n        if ($operator[$i] == \"*\") {\n            $operand[$i]\
    \ = $operand[$i] * $operand[$i + 1];\n            unset($operand[$i + 1]);\n \
    \           unset($operator[$i]);\n            $operand = array_values($operand);\n\
    \            $operator = array_values($operator);\n            $i--;\n       \
    \ }\n        $i++;\n    }\n    $i = 0;\n    while ($i < count($operator)) {\n\
    \        if ($operator[$i] == \"+\") {\n            $operand[$i] = $operand[$i]\
    \ + $operand[$i + 1];\n            unset($operand[$i + 1]);\n            unset($operator[$i]);\n\
    \            $operand = array_values($operand);\n            $operator = array_values($operator);\n\
    \            $i--;\n        }\n        elseif ($operator[$i] == \"-\") {\n   \
    \         $operand[$i] = $operand[$i] - $operand[$i + 1];\n            unset($operand[$i\
    \ + 1\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "]" in /tmp/tmp24q8uk15.php
    on line 66

    '
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  if (count($operator) == 0 || count($operand)\
    \ == 0) return 0;\n  $result = $operand[0];\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    $op = $operator[$i];\n    switch ($op) {\n      case '+':\n   \
    \     $result += $operand[$i + 1];\n        break;\n      case '-':\n        $result\
    \ -= $operand[$i + 1];\n        break;\n      case '*':\n        $result *= $operand[$i\
    \ + 1];\n        break;\n      case '//':\n        $result = floor($result / $operand[$i\
    \ + 1]);\n        break;\n      case '**':\n        $result = pow($result, $operand[$i\
    \ + 1]);\n        break;\n    }\n  }\n  return $result;\n}\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]) . \"\\n\"; // 9\necho do_algebra(['+', '*', '//', '**'],\
    \ [1, 2, 2, 3]); // 3\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n\nWarning: Undefined array key 4 in /tmp/tmpl91biqu8.php on line 39\n\
    1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl91biqu8.php:53\n\
    Stack trace:\n#0 /tmp/tmpl91biqu8.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpl91biqu8.php\
    \ on line 53\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n\tif(!empty($operator) && !empty($operand)){\n\
    \t\t$result = $operand[0];\n\t\tfor($i = 0; $i < count($operator); $i++){\n\t\t\
    \tswitch($operator[$i]){\n\t\t\t\tcase '+':\n\t\t\t\t\t$result += $operand[$i+1];\n\
    \t\t\t\t\tbreak;\n\t\t\t\tcase '-':\n\t\t\t\t\t$result -= $operand[$i+1];\n\t\t\
    \t\t\tbreak;\n\t\t\t\tcase '*':\n\t\t\t\t\t$result *= $operand[$i+1];\n\t\t\t\t\
    \tbreak;\n\t\t\t\tcase '//':\n\t\t\t\t\t$result /= $operand[$i+1];\n\t\t\t\t\t\
    break;\n\t\t\t\tcase '**':\n\t\t\t\t\t$result **= $operand[$i+1];\n\t\t\t\t\t\
    break;\n\t\t\t}\n\t\t}\n\t\treturn $result;\n\t}\n\treturn false;\n}\n\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]); // 9\necho \"\\n\";\necho do_algebra(['+', '//', '-'],\
    \ [10, 2, 3, 4]); // 5\necho \"\\n\";\necho do_algebra(['+', '*', '-'], [1, 2,\
    \ 3, 4, 5]); // 8\necho \"\\n\";\necho do_algebra(['+', '*', '-'], [1, 2, 3, 4,\
    \ 5, 6]); // 13\necho \"\\n\";\necho do_algebra(['+', '*', '-'], [0, 2, 3, 4,\
    \ 5, 6]); // 11\necho \"\\n\";\necho do_algebra(['+', '*', '-'], [0, 0, 2, 3,\
    \ 4, 5, 6]); // 15\necho \"\\n\";\necho do_algebra(['+', '*', '-'], [2, 3, 4,\
    \ 0, 5, 6]); // 9\necho \"\\n\";\necho\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpwx73deul.php on line 62

    '
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = $operand[0];\n    for ($i =\
    \ 0; $i < count($operator); $i++) {\n        switch ($operator[$i]) {\n      \
    \      case '+':\n                $result += $operand[$i + 1];\n             \
    \   break;\n            case '-':\n                $result -= $operand[$i + 1];\n\
    \                break;\n            case '*':\n                $result *= $operand[$i\
    \ + 1];\n                break;\n            case '//':\n                $result\
    \ = floor($result / $operand[$i + 1]);\n                break;\n            case\
    \ '**':\n                $result = pow($result, $operand[$i + 1]);\n         \
    \       break;\n        }\n    }\n    return $result;\n}\n\n$operator = array('+',\
    \ '*', '-');\n$operand = array(2, 3, 4, 5);\n$result = do_algebra($operator, $operand);\n\
    echo $result;\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6bnts_7k.php:54\n\
    Stack trace:\n#0 /tmp/tmp6bnts_7k.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp6bnts_7k.php\
    \ on line 54\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $result = $operand[0];\n  for ($i = 0;\
    \ $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n      case '+':\n\
    \        $result += $operand[$i + 1];\n        break;\n      case '-':\n     \
    \   $result -= $operand[$i + 1];\n        break;\n      case '*':\n        $result\
    \ *= $operand[$i + 1];\n        break;\n      case '//':\n        $result = floor($result\
    \ / $operand[$i + 1]);\n        break;\n      case '**':\n        $result = pow($result,\
    \ $operand[$i + 1]);\n        break;\n    }\n  }\n  return $result;\n}\n\n$arr\
    \ = array('+', '*', '-');\n$arr2 = array(2, 3, 4, 5);\necho do_algebra($arr, $arr2);\n\
    function candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcmcq8xl5.php:53\n\
    Stack trace:\n#0 /tmp/tmpcmcq8xl5.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpcmcq8xl5.php\
    \ on line 53\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  if (count($operator) != count($operand)\
    \ - 1) {\n    return \"Can't build algebraic expression\";\n  }\n\n  if (count($operator)\
    \ < 1 || count($operand) < 2) {\n    return \"Can't build algebraic expression\"\
    ;\n  }\n\n  $result = $operand[0];\n  $i = 0;\n  while ($i < count($operator))\
    \ {\n    if ($operator[$i] == '+') {\n      $result += $operand[$i + 1];\n   \
    \ } else if ($operator[$i] == '-') {\n      $result -= $operand[$i + 1];\n   \
    \ } else if ($operator[$i] == '*') {\n      $result *= $operand[$i + 1];\n   \
    \ } else if ($operator[$i] == '//') {\n      $result /= $operand[$i + 1];\n  \
    \  } else if ($operator[$i] == '**') {\n      $result **= $operand[$i + 1];\n\
    \    } else {\n      return \"Can't build algebraic expression\";\n    }\n   \
    \ $i++;\n  }\n  return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoi18w63p.php:56\n\
    Stack trace:\n#0 /tmp/tmpoi18w63p.php(60): test()\n#1 {main}\n  thrown in /tmp/tmpoi18w63p.php\
    \ on line 56\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    //$res = $operand[0];\n    //for($i =\
    \ 0; $i < count($operator); $i++){\n    //    if($operator[$i] == \"+\") $res\
    \ += $operand[$i+1];\n    //    if($operator[$i] == \"-\") $res -= $operand[$i+1];\n\
    \    //    if($operator[$i] == \"*\") $res *= $operand[$i+1];\n    //    if($operator[$i]\
    \ == \"//\") $res /= $operand[$i+1];\n    //    if($operator[$i] == \"**\") $res\
    \ **= $operand[$i+1];\n    //}\n    //return $res;\n    \n    //$str = \"\";\n\
    \    //for($i = 0; $i < count($operator); $i++){\n    //    $str .= $operand[$i].$operator[$i];\n\
    \    //}\n    //$str .= $operand[count($operand)-1];\n    //return eval('return\
    \ '.$str.';');\n    \n    $str = \"\";\n    for($i = 0; $i < count($operator);\
    \ $i++){\n        $str .= $operand[$i].$operator[$i];\n    }\n    $str .= $operand[count($operand)-1];\n\
    \    return eval('return '.$str.';');\n}\n\nfunction candidate(...$args) {\n \
    \   return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected end of file, expecting ";" in /tmp/tmpdarmld4j.php(43)
    : eval()''d code on line 1

    '
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = $operand[0];\n    for ($i =\
    \ 0; $i < count($operator); $i++) {\n        if ($operator[$i] == '+') {\n   \
    \         $result += $operand[$i + 1];\n        } else if ($operator[$i] == '-')\
    \ {\n            $result -= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == '*') {\n            $result *= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == '//') {\n            $result = floor($result / $operand[$i + 1]);\n     \
    \   } else if ($operator[$i] == '**') {\n            $result = pow($result, $operand[$i\
    \ + 1]);\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkn__er35.php:44\n\
    Stack trace:\n#0 /tmp/tmpkn__er35.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpkn__er35.php\
    \ on line 44\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $r = array_shift($operand);\n  foreach($operator\
    \ as $i => $op) {\n    switch($op) {\n      case '+':\n        $r += $operand[$i];\n\
    \        break;\n      case '-':\n        $r -= $operand[$i];\n        break;\n\
    \      case '*':\n        $r *= $operand[$i];\n        break;\n      case '//':\n\
    \        $r = floor($r / $operand[$i]);\n        break;\n      case '**':\n  \
    \      $r = pow($r, $operand[$i]);\n        break;\n    }\n  }\n  return $r;\n\
    }\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9r43d6fs.php:50\n\
    Stack trace:\n#0 /tmp/tmp9r43d6fs.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp9r43d6fs.php\
    \ on line 50\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $i = 0;\n  while ($i < count($operator))\
    \ {\n    if ($operator[$i] == \"**\") {\n      $output = pow($operand[$i], $operand[$i\
    \ + 1]);\n      array_splice($operand, $i, 2, $output);\n      array_splice($operator,\
    \ $i, 1);\n      $i = 0;\n    } else {\n      $i++;\n    }\n  }\n  $i = 0;\n \
    \ while ($i < count($operator)) {\n    if ($operator[$i] == \"//\") {\n      $output\
    \ = intdiv($operand[$i], $operand[$i + 1]);\n      array_splice($operand, $i,\
    \ 2, $output);\n      array_splice($operator, $i, 1);\n      $i = 0;\n    } else\
    \ {\n      $i++;\n    }\n  }\n  $i = 0;\n  while ($i < count($operator)) {\n \
    \   if ($operator[$i] == \"*\") {\n      $output = $operand[$i] * $operand[$i\
    \ + 1];\n      array_splice($operand, $i, 2, $output);\n      array_splice($operator,\
    \ $i, 1);\n      $i = 0;\n    } else {\n      $i++;\n    }\n  }\n  $i = 0;\n \
    \ while ($i < count($operator)) {\n    if ($operator[$i] == \"+\") {\n      $output\
    \ = $operand[$i] + $operand[$i + 1];\n      array_splice($operand, $i, 2, $output);\n\
    \      array_splice($operator, $i, 1);\n      $i = 0;\n    } else {\n      $i++;\n\
    \    }\n  }\n  $i = 0;\n  while ($i < count($operator)) {\n    if ($operator[$i]\
    \ == \"-\") {\n      $output = $operand[$i] - $operand[$i + 1];\n      array_splice($operand,\
    \ $i, 2, $output);\n      array_spl\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function" in /tmp/tmp2vvv1cur.php
    on line 71

    '
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $algebra = '';\n  for ($i = 0; $i < count($operand);\
    \ $i++) {\n    $algebra .= $operand[$i];\n    if ($i < count($operator)) {\n \
    \     $algebra .= $operator[$i];\n    }\n  }\n  eval(\"\\$result = $algebra;\"\
    );\n  return $result;\n}\n\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5]);\n\
    function candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '9

    Parse error: syntax error, unexpected end of file in /tmp/tmp6p889_o1.php(28)
    : eval()''d code on line 1

    '
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    \n}\n\nfunction candidate(...$args) {\n\
    \    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnuj2abzt.php:29\n\
    Stack trace:\n#0 /tmp/tmpnuj2abzt.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpnuj2abzt.php\
    \ on line 29\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    for ($i = 0; $i < count($operator); $i++)\
    \ {\n        if ($operator[$i] == '**') {\n            $result = pow($operand[$i],\
    \ $operand[$i + 1]);\n            array_splice($operand, $i, 2, $result);\n  \
    \          array_splice($operator, $i, 1);\n            $i--;\n        }\n   \
    \ }\n    for ($i = 0; $i < count($operator); $i++) {\n        if ($operator[$i]\
    \ == '//') {\n            $result = floor($operand[$i] / $operand[$i + 1]);\n\
    \            array_splice($operand, $i, 2, $result);\n            array_splice($operator,\
    \ $i, 1);\n            $i--;\n        }\n    }\n    for ($i = 0; $i < count($operator);\
    \ $i++) {\n        if ($operator[$i] == '*') {\n            $result = $operand[$i]\
    \ * $operand[$i + 1];\n            array_splice($operand, $i, 2, $result);\n \
    \           array_splice($operator, $i, 1);\n            $i--;\n        }\n  \
    \  }\n    for ($i = 0; $i < count($operator); $i++) {\n        if ($operator[$i]\
    \ == '-') {\n            $result = $operand[$i] - $operand[$i + 1];\n        \
    \    array_splice($operand, $i, 2, $result);\n            array_splice($operator,\
    \ $i, 1);\n            $i--;\n        }\n    }\n    for ($i = 0; $i < count($operator);\
    \ $i++) {\n        if ($operator[$i] == '+') {\n            $result = $operand[$i]\
    \ + $operand[$i + 1];\n            array_splice($operand, $i, 2, $result);\n \
    \           array_splice($operator, $i, 1);\n            $i--;\n        }\n  \
    \  }\n    return $operand[0];\n}\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxznknf77.php:70\n\
    Stack trace:\n#0 /tmp/tmpxznknf77.php(73): test()\n#1 {main}\n  thrown in /tmp/tmpxznknf77.php\
    \ on line 70\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $result = $operand[0];\n  for ($i = 0;\
    \ $i < count($operator); $i++) {\n    if ($operator[$i] == '+') {\n      $result\
    \ += $operand[$i + 1];\n    } else if ($operator[$i] == '-') {\n      $result\
    \ -= $operand[$i + 1];\n    } else if ($operator[$i] == '*') {\n      $result\
    \ *= $operand[$i + 1];\n    } else if ($operator[$i] == '//') {\n      $result\
    \ = floor($result / $operand[$i + 1]);\n    } else if ($operator[$i] == '**')\
    \ {\n      $result = pow($result, $operand[$i + 1]);\n    }\n  }\n  return $result;\n\
    }\n$operator = ['+', '*', '-'];\n$operand = [2, 3, 4, 5];\necho do_algebra($operator,\
    \ $operand);\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptbagr5i5.php:46\n\
    Stack trace:\n#0 /tmp/tmptbagr5i5.php(50): test()\n#1 {main}\n  thrown in /tmp/tmptbagr5i5.php\
    \ on line 46\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    // Write your code here...\n    $total\
    \ = array_shift($operand);\n    foreach($operator as $key => $op){\n      switch($op){\n\
    \        case '+':\n          $total += $operand[$key];\n          break;\n  \
    \      case '-':\n          $total -= $operand[$key];\n          break;\n    \
    \    case '*':\n          $total *= $operand[$key];\n          break;\n      \
    \  case '//':\n          $total = floor($total / $operand[$key]);\n          break;\n\
    \        case '**':\n          $total = pow($total, $operand[$key]);\n       \
    \   break;\n      }\n    }\n    return $total;\n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1z_wea_o.php:51\n\
    Stack trace:\n#0 /tmp/tmp1z_wea_o.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp1z_wea_o.php\
    \ on line 51\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $i = 0;\n    $res = 0;\n    $first =\
    \ true;\n    while ($i < count($operator)) {\n        if ($first) {\n        \
    \    $res = $operand[$i];\n            $first = false;\n        }\n        $res\
    \ = do_math($res, $operator[$i], $operand[$i + 1]);\n        $i++;\n    }\n  \
    \  return $res;\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function do_math() in\
    \ /tmp/tmpo05hwex6.php:29\nStack trace:\n#0 /tmp/tmpo05hwex6.php(36): do_algebra(Array,\
    \ Array)\n#1 /tmp/tmpo05hwex6.php(40): candidate(Array, Array)\n#2 /tmp/tmpo05hwex6.php(45):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpo05hwex6.php on line 29\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n\t$total = $operand[0];\n\t$last = count($operand);\n\
    \tfor ($i = 0; $i < count($operator); $i++) {\n\t\tswitch ($operator[$i]) {\n\t\
    \t\tcase '+':\n\t\t\t\t$total += $operand[$i + 1];\n\t\t\t\tbreak;\n\t\t\tcase\
    \ '-':\n\t\t\t\t$total -= $operand[$i + 1];\n\t\t\t\tbreak;\n\t\t\tcase '*':\n\
    \t\t\t\t$total *= $operand[$i + 1];\n\t\t\t\tbreak;\n\t\t\tcase '//':\n\t\t\t\t\
    $total = intval($total / $operand[$i + 1]);\n\t\t\t\tbreak;\n\t\t\tcase '**':\n\
    \t\t\t\t$total = pow($total, $operand[$i + 1]);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\t\
    return $total;\n}\n\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5]) . \"\\n\"\
    ;\necho do_algebra(['+', '-', '//'], [10, 5, 2, 4]) . \"\\n\";\necho do_algebra(['+',\
    \ '**'], [1, 2, 3, 2]) . \"\\n\";\necho do_algebra(['*', '**'], [2, 3, 3, 2])\
    \ . \"\\n\";\necho do_algebra(['*', '*', '-'], [1, 2, 3, 4, 5]) . \"\\n\";\necho\
    \ do_algebra(['//', '+', '+'], [2, 2, 3, 2, 1]) . \"\\n\";\necho do_algebra(['+',\
    \ '*', '//', '-'], [2, 5, 2, 4, 3]) . \"\\n\";\necho do_algebra(['+', '//', '**'],\
    \ [2, 5, 2, 4, 2]) . \"\\n\";\necho do_algebra(['+', '+', '//', '**'], [2, 4,\
    \ 2, 3, 2]) . \"\\\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Test", expecting "," or ";"
    in /tmp/tmp2hbghtko.php on line 59

    '
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $total = array_shift($operand);\n  foreach\
    \ ($operator as $i => $oper) {\n    $first = $total;\n    $second = $operand[$i];\n\
    \    switch ($oper) {\n      case '+':\n        $total = $first + $second;\n \
    \       break;\n      case '-':\n        $total = $first - $second;\n        break;\n\
    \      case '*':\n        $total = $first * $second;\n        break;\n      case\
    \ '//':\n        $total = floor($first / $second);\n        break;\n      case\
    \ '**':\n        $total = pow($first, $second);\n        break;\n    }\n  }\n\
    \  return $total;\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7p3_2b5g.php:52\n\
    Stack trace:\n#0 /tmp/tmp7p3_2b5g.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp7p3_2b5g.php\
    \ on line 52\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  if (count($operator) == 0 || count($operand)\
    \ < 2) {\n    return 'error';\n  }\n  $result = $operand[0];\n  for ($i = 0; $i\
    \ < count($operator); $i++) {\n    switch ($operator[$i]) {\n      case '+':\n\
    \        $result += $operand[$i + 1];\n        break;\n      case '-':\n     \
    \   $result -= $operand[$i + 1];\n        break;\n      case '*':\n        $result\
    \ *= $operand[$i + 1];\n        break;\n      case '//':\n        $result /= $operand[$i\
    \ + 1];\n        break;\n      case '**':\n        $result = pow($result, $operand[$i\
    \ + 1]);\n        break;\n      default:\n        return 'error';\n    }\n  }\n\
    \  return $result;\n}\n\n$operator = ['+', '*', '-'];\n$operand = [2, 3, 4, 5];\n\
    echo do_algebra($operator, $operand);\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe8nqscl8.php:58\n\
    Stack trace:\n#0 /tmp/tmpe8nqscl8.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpe8nqscl8.php\
    \ on line 58\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $res = $operand[0];\n  for ($i = 0; $i\
    \ < count($operator); $i++) {\n    switch ($operator[$i]) {\n      case '+':\n\
    \        $res += $operand[$i + 1];\n        break;\n      case '-':\n        $res\
    \ -= $operand[$i + 1];\n        break;\n      case '*':\n        $res *= $operand[$i\
    \ + 1];\n        break;\n      case '//':\n        $res /= $operand[$i + 1];\n\
    \        break;\n      case '**':\n        $res = pow($res, $operand[$i + 1]);\n\
    \        break;\n    }\n  }\n  return $res;\n}\nprint_r(do_algebra(['+', '*',\
    \ '-'], [2, 3, 4, 5]));\nprint_r(do_algebra(['//', '*', '**'], [2, 3, 4, 5]));\n\
    print_r(do_algebra(['+', '*', '**'], [2, 3, 4, 5]));\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15134.847736625513200000\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmp7cw_8yb_.php:52\nStack trace:\n#0 /tmp/tmp7cw_8yb_.php(56): test()\n\
    #1 {main}\n  thrown in /tmp/tmp7cw_8yb_.php on line 52\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = $operand[0];\n    for ($i =\
    \ 0; $i < count($operator); $i++) {\n        switch ($operator[$i]) {\n      \
    \      case '+':\n                $result += $operand[$i + 1];\n             \
    \   break;\n            case '-':\n                $result -= $operand[$i + 1];\n\
    \                break;\n            case '*':\n                $result *= $operand[$i\
    \ + 1];\n                break;\n            case '//':\n                $result\
    \ = floor($result / $operand[$i + 1]);\n                break;\n            case\
    \ '**':\n                $result = pow($result, $operand[$i + 1]);\n         \
    \       break;\n        }\n    }\n    return $result;\n}\n$operator = ['+', '*',\
    \ '-'];\n$operand = [2, 3, 4, 5];\necho do_algebra($operator, $operand);\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptufqkyx5.php:52\n\
    Stack trace:\n#0 /tmp/tmptufqkyx5.php(56): test()\n#1 {main}\n  thrown in /tmp/tmptufqkyx5.php\
    \ on line 52\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = $operand[0];\n    for ($i =\
    \ 0; $i < count($operator); $i++) {\n        switch ($operator[$i]) {\n      \
    \      case '+':\n                $result += $operand[$i + 1];\n             \
    \   break;\n            case '-':\n                $result -= $operand[$i + 1];\n\
    \                break;\n            case '*':\n                $result *= $operand[$i\
    \ + 1];\n                break;\n            case '//':\n                $result\
    \ = floor($result / $operand[$i + 1]);\n                break;\n            case\
    \ '**':\n                $result = pow($result, $operand[$i + 1]);\n         \
    \       break;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdf7g72is.php:50\n\
    Stack trace:\n#0 /tmp/tmpdf7g72is.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpdf7g72is.php\
    \ on line 50\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = 0;\n    $i = 0;\n    while($i\
    \ < count($operator)){\n        switch($operator[$i]){\n            case '+':\n\
    \                $result += $operand[$i+1];\n                break;\n        \
    \    case '-':\n                $result -= $operand[$i+1];\n                break;\n\
    \            case '*':\n                $result *= $operand[$i+1];\n         \
    \       break;\n            case '//':\n                $result = floor($result\
    \ / $operand[$i+1]);\n                break;\n            case '**':\n       \
    \         $result = pow($result, $operand[$i+1]);\n                break;\n  \
    \      }\n        $i++;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpag94q2rb.php:51\n\
    Stack trace:\n#0 /tmp/tmpag94q2rb.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpag94q2rb.php\
    \ on line 51\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $length = count($operator);\n    $result\
    \ = $operand[0];\n    for ($i = 0; $i < $length; $i++) {\n        switch ($operator[$i])\
    \ {\n            case '+':\n                $result += $operand[$i + 1];\n   \
    \             break;\n            case '-':\n                $result -= $operand[$i\
    \ + 1];\n                break;\n            case '*':\n                $result\
    \ *= $operand[$i + 1];\n                break;\n            case '//':\n     \
    \           $result /= $operand[$i + 1];\n                break;\n           \
    \ case '**':\n                $result = pow($result, $operand[$i + 1]);\n    \
    \            break;\n        }\n    }\n    return $result;\n}\n$result = do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]);\necho $result;\nfunction candidate(...$args) {\n \
    \   return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn6822b3m.php:52\n\
    Stack trace:\n#0 /tmp/tmpn6822b3m.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpn6822b3m.php\
    \ on line 52\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = array_shift($operand);\n  \
    \  for ($i = 0; $i < count($operator); $i++) {\n        switch ($operator[$i])\
    \ {\n            case '+':\n                $result += $operand[$i];\n       \
    \         break;\n            case '-':\n                $result -= $operand[$i];\n\
    \                break;\n            case '*':\n                $result *= $operand[$i];\n\
    \                break;\n            case '//':\n                $result /= $operand[$i];\n\
    \                break;\n            case '**':\n                $result **= $operand[$i];\n\
    \                break;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3v6p9pnt.php:49\n\
    Stack trace:\n#0 /tmp/tmp3v6p9pnt.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp3v6p9pnt.php\
    \ on line 49\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $operand_length = count($operand);\n  $result\
    \ = $operand[0];\n  for ($i = 0; $i < $operand_length - 1; $i++) {\n    switch\
    \ ($operator[$i]) {\n      case '+':\n        $result += $operand[$i + 1];\n \
    \       break;\n      case '-':\n        $result -= $operand[$i + 1];\n      \
    \  break;\n      case '*':\n        $result *= $operand[$i + 1];\n        break;\n\
    \      case '//':\n        $result = (int)($result / $operand[$i + 1]);\n    \
    \    break;\n      case '**':\n        $result = pow($result, $operand[$i + 1]);\n\
    \        break;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr2hxrgza.php:51\n\
    Stack trace:\n#0 /tmp/tmpr2hxrgza.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpr2hxrgza.php\
    \ on line 51\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $first = array_shift($operand);\n   \
    \ $second = array_shift($operand);\n    $operation = array_shift($operator);\n\
    \    $result = operate($first, $second, $operation);\n    while(!empty($operator))\
    \ {\n        $second = array_shift($operand);\n        $operation = array_shift($operator);\n\
    \        $result = operate($result, $second, $operation);\n    }\n    return $result;\n\
    }\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function operate() in\
    \ /tmp/tmpg19ktdch.php:24\nStack trace:\n#0 /tmp/tmpg19ktdch.php(34): do_algebra(Array,\
    \ Array)\n#1 /tmp/tmpg19ktdch.php(38): candidate(Array, Array)\n#2 /tmp/tmpg19ktdch.php(43):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpg19ktdch.php on line 24\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = array_shift($operand);\n  \
    \  foreach ($operator as $i => $op) {\n        $o = array_shift($operand);\n \
    \       if ($op == \"+\") {\n            $result += $o;\n        } elseif ($op\
    \ == \"-\") {\n            $result -= $o;\n        } elseif ($op == \"*\") {\n\
    \            $result *= $o;\n        } elseif ($op == \"//\") {\n            $result\
    \ /= $o;\n        } elseif ($op == \"**\") {\n            $result **= $o;\n  \
    \      }\n    }\n    return $result;\n}\necho do_algebra(['+', '*', '-'], [2,\
    \ 3, 4, 5]) . \"\\n\";\necho do_algebra(['+', '*', '-'], [2, 2, 2, 2]) . \"\\\
    n\";\necho do_algebra(['+', '*', '-'], [0, 1, 2, 3]) . \"\\n\";\necho do_algebra(['+',\
    \ '*', '-'], [0, 0, 1, 0]) . \"\\n\";\necho do_algebra(['+', '*', '-'], [1, 2,\
    \ 3, 4]) . \"\\n\";\necho do_algebra(['+', '*', '-'], [3, 2, 1, 2]) . \"\\n\"\
    ;\necho do_algebra(['+', '*', '-'], [3, 2, 1, 2]) . \"\\n\";\necho do_algebra(['+',\
    \ '*', '-'], [0, 1, 2, 3]) . \"\\n\";\necho do_algebra(['+', '*', '-'], [0, 1,\
    \ 2, 3]) . \"\\n\";\necho do_algebra(['+', '*', '-'], [0, 1, 2, 3]) . \"\\n\"\
    ;\necho do_algebra(['+', '*', '-'], [0, 1, 2, 3]) . \"\\n\";\necho do_algebra(['+',\
    \ '*', '-'], [0, 1, 2, 3]) . \"\\n\";\necho do_algebra(['+', '*',\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "candidate", expecting "(" in
    /tmp/tmpxwjdieg4.php on line 51

    '
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $operand = array_map('intval', $operand);\n\
    \  for ($i = 0; $i < count($operator); $i++) {\n    if ($operator[$i] == '//')\
    \ {\n      $operand[$i + 1] = intval($operand[$i] / $operand[$i + 1]);\n    }\
    \ else if ($operator[$i] == '**') {\n      $operand[$i + 1] = intval(pow($operand[$i],\
    \ $operand[$i + 1]));\n    } else if ($operator[$i] == '*') {\n      $operand[$i\
    \ + 1] = intval($operand[$i] * $operand[$i + 1]);\n    } else if ($operator[$i]\
    \ == '-') {\n      $operand[$i + 1] = intval($operand[$i] - $operand[$i + 1]);\n\
    \    } else if ($operator[$i] == '+') {\n      $operand[$i + 1] = intval($operand[$i]\
    \ + $operand[$i + 1]);\n    }\n  }\n  return $operand[count($operand) - 1];\n\
    }\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp0lw77ht1.php:43\n\
    Stack trace:\n#0 /tmp/tmp0lw77ht1.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp0lw77ht1.php\
    \ on line 43\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = 0;\n    $count = count($operand);\n\
    \    for ($i = 0; $i < $count; $i++) {\n        switch ($operator[$i]) {\n   \
    \         case '+':\n                $result += $operand[$i];\n              \
    \  break;\n            case '-':\n                $result -= $operand[$i];\n \
    \               break;\n            case '*':\n                $result *= $operand[$i];\n\
    \                break;\n            case '//':\n                $result = floor($result\
    \ / $operand[$i]);\n                break;\n            case '**':\n         \
    \       $result = pow($result, $operand[$i]);\n                break;\n      \
    \  }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key 3 in /tmp/tmp81yfqzu8.php on line 24\n\n\
    Fatal error: Uncaught Exception: Test failed! in /tmp/tmp81yfqzu8.php:50\nStack\
    \ trace:\n#0 /tmp/tmp81yfqzu8.php(55): test()\n#1 {main}\n  thrown in /tmp/tmp81yfqzu8.php\
    \ on line 50\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $result = $operand[0];\n  for ($i = 0;\
    \ $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n      case '+':\n\
    \        $result += $operand[$i + 1];\n        break;\n      case '-':\n     \
    \   $result -= $operand[$i + 1];\n        break;\n      case '*':\n        $result\
    \ *= $operand[$i + 1];\n        break;\n      case '//':\n        $result = (int)\
    \ ($result / $operand[$i + 1]);\n        break;\n      case '**':\n        $result\
    \ = pow($result, $operand[$i + 1]);\n        break;\n    }\n  }\n  return $result;\n\
    }\n\nprint_r(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgwglj3yt.php:51\n\
    Stack trace:\n#0 /tmp/tmpgwglj3yt.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpgwglj3yt.php\
    \ on line 51\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = $operand[0];\n    for ($i =\
    \ 0; $i < count($operator); $i++) {\n        switch ($operator[$i]) {\n      \
    \      case '+':\n                $result += $operand[$i + 1];\n             \
    \   break;\n            case '-':\n                $result -= $operand[$i + 1];\n\
    \                break;\n            case '*':\n                $result *= $operand[$i\
    \ + 1];\n                break;\n            case '//':\n                $result\
    \ = (int)($result / $operand[$i + 1]);\n                break;\n            case\
    \ '**':\n                $result = (int)pow($result, $operand[$i + 1]);\n    \
    \            break;\n        }\n    }\n    return $result;\n}\n$op = ['+', '*',\
    \ '-'];\n$array = [2, 3, 4, 5];\necho do_algebra($op, $array);\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyg5nsvf4.php:52\n\
    Stack trace:\n#0 /tmp/tmpyg5nsvf4.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpyg5nsvf4.php\
    \ on line 52\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  if (!is_array($operator) || !is_array($operand))\
    \ return 'Not an array';\n  $count = count($operator);\n  $result = $operand[0];\n\
    \  for ($i = 0; $i < $count; $i++) {\n    switch ($operator[$i]) {\n      case\
    \ '+':\n        $result += $operand[$i + 1];\n        break;\n      case '-':\n\
    \        $result -= $operand[$i + 1];\n        break;\n      case '*':\n     \
    \   $result *= $operand[$i + 1];\n        break;\n      case '//':\n        $result\
    \ /= $operand[$i + 1];\n        break;\n      case '**':\n        $result **=\
    \ $operand[$i + 1];\n        break;\n      default:\n        return 'Invalid';\n\
    \    }\n  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6_zmsxzf.php:53\n\
    Stack trace:\n#0 /tmp/tmp6_zmsxzf.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp6_zmsxzf.php\
    \ on line 53\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $result = 0;\n  if ($operator[0] == '+')\
    \ {\n    $result = $operand[0] + $operand[1];\n  } else if ($operator[0] == '-')\
    \ {\n    $result = $operand[0] - $operand[1];\n  } else if ($operator[0] == '*')\
    \ {\n    $result = $operand[0] * $operand[1];\n  } else if ($operator[0] == '//')\
    \ {\n    $result = $operand[0] / $operand[1];\n  } else if ($operator[0] == '**')\
    \ {\n    $result = $operand[0] ** $operand[1];\n  }\n  for ($i = 1; $i < count($operator);\
    \ $i++) {\n    if ($operator[$i] == '+') {\n      $result += $operand[$i + 1];\n\
    \    } else if ($operator[$i] == '-') {\n      $result -= $operand[$i + 1];\n\
    \    } else if ($operator[$i] == '*') {\n      $result *= $operand[$i + 1];\n\
    \    } else if ($operator[$i] == '//') {\n      $result /= $operand[$i + 1];\n\
    \    } else if ($operator[$i] == '**') {\n      $result **= $operand[$i + 1];\n\
    \    }\n  }\n  return $result;\n}\necho do_algebra(['+', '*', '-'], [2, 3, 4,\
    \ 5]) . \"\\n\";\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1hf69wc5.php:55\n\
    Stack trace:\n#0 /tmp/tmp1hf69wc5.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp1hf69wc5.php\
    \ on line 55\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $arr = [];\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    array_push($arr, $operand[$i]);\n    array_push($arr, $operator[$i]);\n\
    \  }\n  array_push($arr, $operand[count($operand) - 1]);\n  $value = 0;\n  $last_value\
    \ = 0;\n  $total = 0;\n  foreach ($arr as $item) {\n    if (is_int($item)) {\n\
    \      $value = $item;\n    } else {\n      switch ($item) {\n        case '+':\n\
    \          $total += $value;\n          break;\n        case '-':\n          $total\
    \ -= $value;\n          break;\n        case '*':\n          $total *= $value;\n\
    \          break;\n        case '//':\n          $total = floor($total / $value);\n\
    \          break;\n        case '**':\n          $total = pow($total, $value);\n\
    \          break;\n      }\n    }\n  }\n  return $total;\n}\necho do_algebra([\"\
    +\", \"*\", \"-\"], [2, 3, 4, 5]);\necho \"<br>\";\necho do_algebra([\"+\", \"\
    *\", \"-\"], [2, 3, 4, 5, 6]);\necho \"<br>\";\necho do_algebra([\"+\", \"*\"\
    , \"-\"], [2, 3, 4, 5, 6, 7]);\necho \"<br>\";\necho do_algebra([\"//\", \"*\"\
    , \"-\"], [2, 3, 4, 5]);\necho \"<br>\";\necho do_algebra([\"+\", \"*\", \"-\"\
    ], [2, 3, 4, -5]);\necho \"<br>\";\necho do_algebra([\"+\", \"*\", \"-\"], [2,\
    \ 3, -4, 5]);\necho \"<br>\";\necho do_algebra([\"-\", \"*\", \"-\"], [2, 3, 4,\
    \ 5]);\necho \"<br>\";\necho do_algebra([\"*\", \"*\", \"-\"], [2, 3, 4, 5]);\n\
    echo \"<br\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected identifier "Test", expecting "," or ";"
    in /tmp/tmp6iej6483.php on line 76

    '
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $result = $operand[0];\n  for ($i = 0;\
    \ $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n      case '+':\n\
    \        $result += $operand[$i + 1];\n        break;\n      case '-':\n     \
    \   $result -= $operand[$i + 1];\n        break;\n      case '*':\n        $result\
    \ *= $operand[$i + 1];\n        break;\n      case '//':\n        $result /= $operand[$i\
    \ + 1];\n        break;\n      case '**':\n        $result = pow($result, $operand[$i\
    \ + 1]);\n        break;\n    }\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpylpe6yu3.php:50\n\
    Stack trace:\n#0 /tmp/tmpylpe6yu3.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpylpe6yu3.php\
    \ on line 50\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = $operand[0];\n    for ($i =\
    \ 0; $i < count($operator); $i++) {\n        if ($operator[$i] == '+') {\n   \
    \         $result += $operand[$i + 1];\n        } else if ($operator[$i] == '-')\
    \ {\n            $result -= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == '*') {\n            $result *= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == '//') {\n            $result = floor($result / $operand[$i + 1]);\n     \
    \   } else if ($operator[$i] == '**') {\n            $result = pow($result, $operand[$i\
    \ + 1]);\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpif_jg_py.php:43\n\
    Stack trace:\n#0 /tmp/tmpif_jg_py.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpif_jg_py.php\
    \ on line 43\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $result = $operand[0];\n  for ($i = 0;\
    \ $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n      case '+':\n\
    \        $result += $operand[$i + 1];\n        break;\n      case '-':\n     \
    \   $result -= $operand[$i + 1];\n        break;\n      case '*':\n        $result\
    \ *= $operand[$i + 1];\n        break;\n      case '//':\n        $result = floor($result\
    \ / $operand[$i + 1]);\n        break;\n      case '**':\n        $result = pow($result,\
    \ $operand[$i + 1]);\n        break;\n    }\n  }\n  return $result;\n}\n\n$operator\
    \ = ['+', '*', '-'];\n$operand = [2, 3, 4, 5];\necho do_algebra($operator, $operand);\n\
    function candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzw8t9fst.php:53\n\
    Stack trace:\n#0 /tmp/tmpzw8t9fst.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpzw8t9fst.php\
    \ on line 53\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $operators = ['+', '-', '*', '//', '**'];\n\
    \    $operatorsKey = array_flip($operators);\n    $operand = array_map('intval',\
    \ $operand);\n    $stack = new SplStack();\n    $stack->push($operand[0]);\n \
    \   for ($i = 0; $i < count($operator); $i++) {\n        if (isset($operatorsKey[$operator[$i]]))\
    \ {\n            $op1 = $stack->pop();\n            $op2 = $operand[$i + 1];\n\
    \            $operatorIndex = $operatorsKey[$operator[$i]];\n            switch\
    \ ($operatorIndex) {\n                case 0:\n                    $stack->push($op1\
    \ + $op2);\n                    break;\n                case 1:\n            \
    \        $stack->push($op1 - $op2);\n                    break;\n            \
    \    case 2:\n                    $stack->push($op1 * $op2);\n               \
    \     break;\n                case 3:\n                    $stack->push(intdiv($op1,\
    \ $op2));\n                    break;\n                case 4:\n             \
    \       $stack->push($op1 ** $op2);\n                    break;\n            }\n\
    \        }\n    }\n    return $stack->pop();\n}\n\necho do_algebra(['+', '*',\
    \ '-'], [2, 3, 4, 5]) . PHP_EOL;\necho do_algebra(['+', '//', '*', '-'], [1, 2,\
    \ 3, 4, 5]) . PHP_EOL;\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6]) . PHP_EOL;\n\
    echo do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6, 7]) . PHP_EOL;\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5, 6, 7, 8]) . PHP_EOL;\necho do_algebra(['+', '*', '-'],\
    \ [2, 3, 4, 5, 6, 7, 8, 9]) . PHP_E\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmpchkujaul.php on line 59

    '
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    // Your Code Here\n    $first = $operand[0];\n\
    \    for($i = 0; $i < count($operator); $i++){\n        switch($operator[$i]){\n\
    \            case '+':\n                $first += $operand[$i+1];\n          \
    \      break;\n            case '-':\n                $first -= $operand[$i+1];\n\
    \                break;\n            case '*':\n                $first *= $operand[$i+1];\n\
    \                break;\n            case '//':\n                $first = floor($first\
    \ / $operand[$i+1]);\n                break;\n            case '**':\n       \
    \         $first = pow($first, $operand[$i+1]);\n                break;\n    \
    \    }\n    }\n    return $first;\n}\necho do_algebra([\"+\", \"*\", \"-\"], [2,\
    \ 3, 4, 5]) . \"\\n\";\necho do_algebra([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) .\
    \ \"\\n\";\necho do_algebra([\"//\", \"*\", \"-\"], [1, 2, 3, 4, 5]) . \"\\n\"\
    ;\necho do_algebra([\"+\", \"*\", \"-\"], [1, 2, 3, 4, 5]) . \"\\n\";\necho do_algebra([\"\
    *\", \"*\", \"-\"], [1, 2, 3, 4, 5]) . \"\\n\";\necho do_algebra([\"+\", \"-\"\
    ], [1, 2, 3, 4, 5]) . \"\\n\";\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n15\n-4\n5\n2\n0\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpnuhu7wd9.php:56\nStack trace:\n#0 /tmp/tmpnuhu7wd9.php(60): test()\n\
    #1 {main}\n  thrown in /tmp/tmpnuhu7wd9.php on line 56\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $result = $operand[0];\n  for ($i = 0;\
    \ $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n      case '+':\n\
    \        $result += $operand[$i + 1];\n        break;\n      case '-':\n     \
    \   $result -= $operand[$i + 1];\n        break;\n      case '*':\n        $result\
    \ *= $operand[$i + 1];\n        break;\n      case '//':\n        $result = floor($result\
    \ / $operand[$i + 1]);\n        break;\n      case '**':\n        $result = pow($result,\
    \ $operand[$i + 1]);\n        break;\n    }\n  }\n  return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5auluf3q.php:50\n\
    Stack trace:\n#0 /tmp/tmp5auluf3q.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp5auluf3q.php\
    \ on line 50\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $l = count($operand) - 1;\n    $total\
    \ = $operand[0];\n    for ($i = 0; $i < $l; $i++) {\n        switch ($operator[$i])\
    \ {\n            case '+':\n                $total += $operand[$i + 1];\n    \
    \            break;\n            case '-':\n                $total -= $operand[$i\
    \ + 1];\n                break;\n            case '*':\n                $total\
    \ *= $operand[$i + 1];\n                break;\n            case '//':\n     \
    \           $total = intdiv($total, $operand[$i + 1]);\n                break;\n\
    \            case '**':\n                $total = $total ** $operand[$i + 1];\n\
    \                break;\n        }\n    }\n    return $total;\n}\n\n$operator\
    \ = ['+', '*', '-'];\n$operand = [2, 3, 4, 5];\n$result = do_algebra($operator,\
    \ $operand);\nprint_r($result);\necho \"\\n\";\n\n$operator = ['**', '-', '//'];\n\
    $operand = [5, 3, 4, 2];\n$result = do_algebra($operator, $operand);\nprint_r($result);\n\
    echo \"\\n\";\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n60\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmwqpt_73.php:63\n\
    Stack trace:\n#0 /tmp/tmpmwqpt_73.php(67): test()\n#1 {main}\n  thrown in /tmp/tmpmwqpt_73.php\
    \ on line 63\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = array_shift($operand);\n  \
    \  foreach ($operator as $key => $value) {\n        switch ($value) {\n      \
    \      case '+':\n                $result += $operand[$key];\n               \
    \ break;\n            case '-':\n                $result -= $operand[$key];\n\
    \                break;\n            case '*':\n                $result *= $operand[$key];\n\
    \                break;\n            case '//':\n                $result = floor($result\
    \ / $operand[$key]);\n                break;\n            case '**':\n       \
    \         $result = $result ** $operand[$key];\n                break;\n     \
    \   }\n    }\n    return $result;\n}\n$operator = ['+', '*', '-'];\n$operand =\
    \ [2, 3, 4, 5];\n$result = do_algebra($operator, $operand);\necho \"The result\
    \ is \" . $result;\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "The result is 15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_76o2t8c.php:53\n\
    Stack trace:\n#0 /tmp/tmp_76o2t8c.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp_76o2t8c.php\
    \ on line 53\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $result = $operand[0];\n  for ($i = 0;\
    \ $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n      case '+':\n\
    \        $result += $operand[$i + 1];\n        break;\n      case '-':\n     \
    \   $result -= $operand[$i + 1];\n        break;\n      case '*':\n        $result\
    \ *= $operand[$i + 1];\n        break;\n      case '//':\n        $result /= $operand[$i\
    \ + 1];\n        break;\n      case '**':\n        $result **= $operand[$i + 1];\n\
    \        break;\n    }\n  }\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp93r2em6o.php:49\n\
    Stack trace:\n#0 /tmp/tmp93r2em6o.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp93r2em6o.php\
    \ on line 49\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  \n  // 2 + 3 * 4 - 5\n  //  $result = $operand[0];\n\
    \  \n  // for($i = 0; $i < count($operator); $i++) {\n  //   if($operator[$i]\
    \ == \"+\") {\n  //     $result += $operand[$i + 1];\n  //   } else if($operator[$i]\
    \ == \"-\") {\n  //     $result -= $operand[$i + 1];\n  //   } else if($operator[$i]\
    \ == \"*\") {\n  //     $result *= $operand[$i + 1];\n  //   } else if($operator[$i]\
    \ == \"//\") {\n  //     $result = floor($result / $operand[$i + 1]);\n  //  \
    \ } else if($operator[$i] == \"**\") {\n  //     $result = pow($result, $operand[$i\
    \ + 1]);\n  //   }\n  // }\n  \n  // return $result;\n  \n  $expression = $operand[0];\n\
    \  \n  for($i = 0; $i < count($operator); $i++) {\n    $expression .= $operator[$i]\
    \ . $operand[$i + 1];\n  }\n  \n  return eval(\"return $expression;\");\n}\n\n\
    function candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected end of file, expecting ";" in /tmp/tmpgtu8gcdi.php(47)
    : eval()''d code on line 1

    '
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $arr = [];\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    $temp = array_shift($operand);\n    $temp2 = array_shift($operand);\n\
    \    if ($operator[$i] == '+') {\n      $arr[] = $temp + $temp2;\n    } elseif\
    \ ($operator[$i] == '-') {\n      $arr[] = $temp - $temp2;\n    } elseif ($operator[$i]\
    \ == '*') {\n      $arr[] = $temp * $temp2;\n    } elseif ($operator[$i] == '//')\
    \ {\n      $arr[] = $temp / $temp2;\n    } elseif ($operator[$i] == '**') {\n\
    \      $arr[] = $temp ** $temp2;\n    }\n  }\n  return array_sum($arr);\n}\nprint_r(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5])); // 9\nprint_r(do_algebra(['+', '*', '-'], [5, 10,\
    \ 2, 4])); // 39\nprint_r(do_algebra(['+', '//', '*', '**', '-'], [16, 4, 2, 2,\
    \ 5])); // 31\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "252322\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3qe3owrb.php:47\n\
    Stack trace:\n#0 /tmp/tmp3qe3owrb.php(52): test()\n#1 {main}\n  thrown in /tmp/tmp3qe3owrb.php\
    \ on line 47\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n\n}\nfunction candidate(...$args) {\n   \
    \ return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp192207fb.php:28\n\
    Stack trace:\n#0 /tmp/tmp192207fb.php(33): test()\n#1 {main}\n  thrown in /tmp/tmp192207fb.php\
    \ on line 28\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $operators = array_merge(array_fill(0,\
    \ count($operand) - 1, array_shift($operator)), $operator);\n  $result = array_shift($operand);\n\
    \  foreach ($operators as $key => $operator) {\n    $result = calculate($result,\
    \ $operator, $operand[$key]);\n  }\n  return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function calculate() in\
    \ /tmp/tmpo84q3bek.php:24\nStack trace:\n#0 /tmp/tmpo84q3bek.php(30): do_algebra('**',\
    \ Array)\n#1 /tmp/tmpo84q3bek.php(34): candidate(Array, Array)\n#2 /tmp/tmpo84q3bek.php(39):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmpo84q3bek.php on line 24\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  return eval(\"return $operand[0]\".implode(\"\
    \", array_map(function($op, $opand) { return \"$op $opand\"; }, $operator, array_slice($operand,\
    \ 1))) . \";\");\n}\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected end of file, expecting ";" in /tmp/tmpn0auo4ts.php(21)
    : eval()''d code on line 1

    '
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = $operand[0];\n    $i = 0;\n\
    \    foreach ($operator as $op) {\n        $result = do_op($result, $op, $operand[$i\
    \ + 1]);\n        $i++;\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function do_op() in /tmp/tmp6j6bw69j.php:24\n\
    Stack trace:\n#0 /tmp/tmp6j6bw69j.php(31): do_algebra(Array, Array)\n#1 /tmp/tmp6j6bw69j.php(35):\
    \ candidate(Array, Array)\n#2 /tmp/tmp6j6bw69j.php(40): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmp6j6bw69j.php on line 24\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = $operand[0];\n    for ($i =\
    \ 0; $i < count($operator); $i++) {\n        if ($operator[$i] == '+') {\n   \
    \         $result += $operand[$i + 1];\n        } else if ($operator[$i] == '-')\
    \ {\n            $result -= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == '*') {\n            $result *= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == '//') {\n            $result = floor($result / $operand[$i + 1]);\n     \
    \   } else if ($operator[$i] == '**') {\n            $result = pow($result, $operand[$i\
    \ + 1]);\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpif_jg_py.php:43\n\
    Stack trace:\n#0 /tmp/tmpif_jg_py.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpif_jg_py.php\
    \ on line 43\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n\t$result = $operand[0];\n\tfor ($i = 0;\
    \ $i < count($operator); $i++) {\n\t\tif ($operator[$i] == \"+\") {\n\t\t\t$result\
    \ += $operand[$i + 1];\n\t\t} else if ($operator[$i] == \"-\") {\n\t\t\t$result\
    \ -= $operand[$i + 1];\n\t\t} else if ($operator[$i] == \"*\") {\n\t\t\t$result\
    \ *= $operand[$i + 1];\n\t\t} else if ($operator[$i] == \"//\") {\n\t\t\t$result\
    \ = floor($result / $operand[$i + 1]);\n\t\t} else if ($operator[$i] == \"**\"\
    ) {\n\t\t\t$result = pow($result, $operand[$i + 1]);\n\t\t}\n\t}\n\treturn $result;\n\
    }\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5]) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3u_oq_ld.php:44\n\
    Stack trace:\n#0 /tmp/tmp3u_oq_ld.php(48): test()\n#1 {main}\n  thrown in /tmp/tmp3u_oq_ld.php\
    \ on line 44\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $result = 0;\n  for ($i = 0; $i < count($operator);\
    \ $i++) {\n    switch ($operator[$i]) {\n      case '+':\n        $result += $operand[$i\
    \ + 1];\n        break;\n      case '-':\n        $result -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $result *= $operand[$i + 1];\n     \
    \   break;\n      case '//':\n        $result /= $operand[$i + 1];\n        break;\n\
    \      case '**':\n        $result = pow($result, $operand[$i + 1]);\n       \
    \ break;\n    }\n  }\n  return $result;\n}\n\necho do_algebra(['+', '*', '-'],\
    \ [2, 3, 4, 5]);\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "7\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiw0cosq0.php:50\n\
    Stack trace:\n#0 /tmp/tmpiw0cosq0.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpiw0cosq0.php\
    \ on line 50\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n\t$result = $operand[0];\n\t$length = count($operand);\n\
    \tfor ($i = 1; $i < $length; $i++) {\n\t\tswitch ($operator[$i - 1]) {\n\t\t\t\
    case '+':\n\t\t\t\t$result += $operand[$i];\n\t\t\t\tbreak;\n\t\t\tcase '-':\n\
    \t\t\t\t$result -= $operand[$i];\n\t\t\t\tbreak;\n\t\t\tcase '*':\n\t\t\t\t$result\
    \ *= $operand[$i];\n\t\t\t\tbreak;\n\t\t\tcase '//':\n\t\t\t\t$result = floor($result\
    \ / $operand[$i]);\n\t\t\t\tbreak;\n\t\t\tcase '**':\n\t\t\t\t$result = pow($result,\
    \ $operand[$i]);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxpnl1w4a.php:51\n\
    Stack trace:\n#0 /tmp/tmpxpnl1w4a.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpxpnl1w4a.php\
    \ on line 51\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $result = $operand[0];\n  for ($i = 0;\
    \ $i < count($operator); $i++) {\n    if ($operator[$i] == '+') {\n      $result\
    \ += $operand[$i + 1];\n    } else if ($operator[$i] == '-') {\n      $result\
    \ -= $operand[$i + 1];\n    } else if ($operator[$i] == '*') {\n      $result\
    \ *= $operand[$i + 1];\n    } else if ($operator[$i] == '//') {\n      $result\
    \ = floor($result / $operand[$i + 1]);\n    } else if ($operator[$i] == '**')\
    \ {\n      $result = pow($result, $operand[$i + 1]);\n    }\n  }\n  return $result;\n\
    }\n\nprint_r(do_algebra([\"+\", \"*\", \"-\"], [2, 3, 4, 5]));\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9k00yah8.php:45\n\
    Stack trace:\n#0 /tmp/tmp9k00yah8.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp9k00yah8.php\
    \ on line 45\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = $operand[0];\n    for ($i =\
    \ 0; $i < count($operator); $i++) {\n        switch ($operator[$i]) {\n      \
    \      case '+':\n                $result += $operand[$i + 1];\n             \
    \   break;\n            case '-':\n                $result -= $operand[$i + 1];\n\
    \                break;\n            case '*':\n                $result *= $operand[$i\
    \ + 1];\n                break;\n            case '//':\n                $result\
    \ = floor($result / $operand[$i + 1]);\n                break;\n            case\
    \ '**':\n                $result = pow($result, $operand[$i + 1]);\n         \
    \       break;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo8ntaur_.php:49\n\
    Stack trace:\n#0 /tmp/tmpo8ntaur_.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpo8ntaur_.php\
    \ on line 49\n"
  timestamp: 1659823238
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n\t$value = $operand[0];\n\tfor ($i = 0; $i\
    \ < count($operator); $i++) {\n\t\t$value = calulate($value, $operator[$i], $operand[$i\
    \ + 1]);\n\t}\n\treturn $value;\n}\n\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function calulate() in\
    \ /tmp/tmp3y3w53bk.php:23\nStack trace:\n#0 /tmp/tmp3y3w53bk.php(29): do_algebra(Array,\
    \ Array)\n#1 /tmp/tmp3y3w53bk.php(33): candidate(Array, Array)\n#2 /tmp/tmp3y3w53bk.php(38):\
    \ test()\n#3 {main}\n  thrown in /tmp/tmp3y3w53bk.php on line 23\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $total = $operand[0];\n    for ($i =\
    \ 0; $i < count($operator); $i++) {\n        if ($operator[$i] == \"+\") {\n \
    \           $total += $operand[$i + 1];\n        } elseif ($operator[$i] == \"\
    -\") {\n            $total -= $operand[$i + 1];\n        } elseif ($operator[$i]\
    \ == \"*\") {\n            $total *= $operand[$i + 1];\n        } elseif ($operator[$i]\
    \ == \"//\") {\n            $total = floor($total / $operand[$i + 1]);\n     \
    \   } elseif ($operator[$i] == \"**\") {\n            $total = pow($total, $operand[$i\
    \ + 1]);\n        }\n    }\n    return $total;\n}\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpeiu9_ngs.php:43\n\
    Stack trace:\n#0 /tmp/tmpeiu9_ngs.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpeiu9_ngs.php\
    \ on line 43\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = array_shift($operand);\n  \
    \  foreach ($operator as $key => $value) {\n        $result = $value($result,\
    \ $operand[$key]);\n    }\n    return $result;\n}\n\n$operator = array(\n    function($a,\
    \ $b) {\n        return $a + $b;\n    },\n    function($a, $b) {\n        return\
    \ $a * $b;\n    },\n    function($a, $b) {\n        return $a - $b;\n    }\n);\n\
    \n$operand = array(2, 3, 4, 5);\n\necho do_algebra($operator, $operand);\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\nFatal error: Uncaught Error: Call to undefined function **() in /tmp/tmpack0nm66.php:23\n\
    Stack trace:\n#0 /tmp/tmpack0nm66.php(44): do_algebra(Array, Array)\n#1 /tmp/tmpack0nm66.php(48):\
    \ candidate(Array, Array)\n#2 /tmp/tmpack0nm66.php(53): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmpack0nm66.php on line 23\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = $operand[0];\n    for ($i =\
    \ 0; $i < count($operator); $i++) {\n        switch ($operator[$i]) {\n      \
    \      case '+':\n                $result += $operand[$i + 1];\n             \
    \   break;\n            case '-':\n                $result -= $operand[$i + 1];\n\
    \                break;\n            case '*':\n                $result *= $operand[$i\
    \ + 1];\n                break;\n            case '//':\n                $result\
    \ /= $operand[$i + 1];\n                break;\n            case '**':\n     \
    \           $result **= $operand[$i + 1];\n                break;\n        }\n\
    \    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_1z3b6nt.php:50\n\
    Stack trace:\n#0 /tmp/tmp_1z3b6nt.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp_1z3b6nt.php\
    \ on line 50\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n\t$result = $operand[0];\n\t$i = 0;\n\t$len\
    \ = count($operator);\n\twhile ($i < $len) {\n\t\tswitch ($operator[$i]) {\n\t\
    \t\tcase '+':\n\t\t\t\t$result += $operand[$i + 1];\n\t\t\t\tbreak;\n\t\t\tcase\
    \ '-':\n\t\t\t\t$result -= $operand[$i + 1];\n\t\t\t\tbreak;\n\t\t\tcase '*':\n\
    \t\t\t\t$result *= $operand[$i + 1];\n\t\t\t\tbreak;\n\t\t\tcase '//':\n\t\t\t\
    \t$result /= $operand[$i + 1];\n\t\t\t\tbreak;\n\t\t\tcase '**':\n\t\t\t\t$result\
    \ **= $operand[$i + 1];\n\t\t\t\tbreak;\n\t\t}\n\t\t$i++;\n\t}\n\treturn $result;\n\
    }\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmplwjwr3d2.php:53\n\
    Stack trace:\n#0 /tmp/tmplwjwr3d2.php(57): test()\n#1 {main}\n  thrown in /tmp/tmplwjwr3d2.php\
    \ on line 53\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $res = $operand[0];\n  $i = 0;\n  foreach($operator\
    \ as $op) {\n    $res = calc($res, $operand[$i+1], $op);\n    $i++;\n  }\n  return\
    \ $res;\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function calc() in /tmp/tmp5_yycbqs.php:24\n\
    Stack trace:\n#0 /tmp/tmp5_yycbqs.php(31): do_algebra(Array, Array)\n#1 /tmp/tmp5_yycbqs.php(35):\
    \ candidate(Array, Array)\n#2 /tmp/tmp5_yycbqs.php(40): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmp5_yycbqs.php on line 24\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = $operand[0];\n    foreach($operator\
    \ as $value) {\n        switch($value) {\n            case '+':\n            \
    \    $result += $operand[1];\n                break;\n            case '-':\n\
    \                $result -= $operand[1];\n                break;\n           \
    \ case '*':\n                $result *= $operand[1];\n                break;\n\
    \            case '//':\n                $result /= $operand[1];\n           \
    \     break;\n            case '**':\n                $result **= $operand[1];\n\
    \                break;\n        }\n        array_shift($operand);\n    }\n  \
    \  return $result;\n}\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkd_f6w9u.php:50\n\
    Stack trace:\n#0 /tmp/tmpkd_f6w9u.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpkd_f6w9u.php\
    \ on line 50\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = $operand[0];\n    for ($i =\
    \ 0; $i < count($operator); $i++) {\n        switch ($operator[$i]) {\n      \
    \      case '+':\n                $result += $operand[$i + 1];\n             \
    \   break;\n            case '-':\n                $result -= $operand[$i + 1];\n\
    \                break;\n            case '*':\n                $result *= $operand[$i\
    \ + 1];\n                break;\n            case '//':\n                $result\
    \ = floor($result / $operand[$i + 1]);\n                break;\n            case\
    \ '**':\n                $result = pow($result, $operand[$i + 1]);\n         \
    \       break;\n        }\n    }\n    return $result;\n}\n\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]);\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphjwquo6k.php:51\n\
    Stack trace:\n#0 /tmp/tmphjwquo6k.php(55): test()\n#1 {main}\n  thrown in /tmp/tmphjwquo6k.php\
    \ on line 51\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    for ($i = 0; $i < count($operator); $i++)\
    \ {\n        switch ($operator[$i]) {\n            case '+':\n               \
    \ $result = $operand[$i] + $operand[$i + 1];\n                break;\n       \
    \     case '-':\n                $result = $operand[$i] - $operand[$i + 1];\n\
    \                break;\n            case '*':\n                $result = $operand[$i]\
    \ * $operand[$i + 1];\n                break;\n            case '//':\n      \
    \          $result = floor($operand[$i] / $operand[$i + 1]);\n               \
    \ break;\n            case '**':\n                $result = pow($operand[$i],\
    \ $operand[$i + 1]);\n                break;\n        }\n        $operand[$i +\
    \ 1] = $result;\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n\
    \    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzf0b03ct.php:49\n\
    Stack trace:\n#0 /tmp/tmpzf0b03ct.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpzf0b03ct.php\
    \ on line 49\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n\t$i = 0;\n\t$result = $operand[$i];\n\t\
    while($i < count($operator)){\n\t\t$i++;\n\t\tswitch($operator[$i - 1]){\n\t\t\
    \tcase '+':\n\t\t\t\t$result += $operand[$i];\n\t\t\t\tbreak;\n\t\t\tcase '-':\n\
    \t\t\t\t$result -= $operand[$i];\n\t\t\t\tbreak;\n\t\t\tcase '*':\n\t\t\t\t$result\
    \ *= $operand[$i];\n\t\t\t\tbreak;\n\t\t\tcase '//':\n\t\t\t\t$result = floor($result\
    \ / $operand[$i]);\n\t\t\t\tbreak;\n\t\t\tcase '**':\n\t\t\t\t$result = pow($result,\
    \ $operand[$i]);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn $result;\n}\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpon0rvulm.php:51\n\
    Stack trace:\n#0 /tmp/tmpon0rvulm.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpon0rvulm.php\
    \ on line 51\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n\t$len = count($operand);\n\t$res = $operand[0];\n\
    \tfor ($i = 1; $i < $len; $i++) {\n\t\tswitch ($operator[$i - 1]) {\n\t\t\tcase\
    \ '+':\n\t\t\t\t$res += $operand[$i];\n\t\t\t\tbreak;\n\t\t\tcase '-':\n\t\t\t\
    \t$res -= $operand[$i];\n\t\t\t\tbreak;\n\t\t\tcase '*':\n\t\t\t\t$res *= $operand[$i];\n\
    \t\t\t\tbreak;\n\t\t\tcase '//':\n\t\t\t\t$res = intval($res / $operand[$i]);\n\
    \t\t\t\tbreak;\n\t\t\tcase '**':\n\t\t\t\t$res = pow($res, $operand[$i]);\n\t\t\
    \t\tbreak;\n\t\t}\n\t}\n\treturn $res;\n}\necho do_algebra(['+', '*', '-'], [2,\
    \ 3, 4, 5]) . PHP_EOL; // 9\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6])\
    \ . PHP_EOL; // -1\necho do_algebra(['+', '*', '-', '*'], [2, 3, 4, 5, 6]) . PHP_EOL;\
    \ // 2\necho do_algebra(['+', '-', '**'], [2, 3, 4, 5]) . PHP_EOL; // -81\necho\
    \ do_algebra(['//', '**', '*'], [2, 3, 4, 5]) . PHP_EOL; // 25\necho do_algebra(['//',\
    \ '**', '*'], [2, 3, 4, 5, 6]) . PHP_EOL; // 150\necho do_algebra(['//', '**',\
    \ '*', '//'], [2, 3, 4, 5, 6]) . PHP_EOL; // 5\necho do_algebra(['//', '**', '*',\
    \ '+'], [2, 3, 4, 5, 6]) . PHP\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmpe4q9of0n.php on line 52

    '
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $result = $operand[0];\n  for ($i = 0;\
    \ $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n      case '+':\n\
    \        $result += $operand[$i + 1];\n        break;\n      case '-':\n     \
    \   $result -= $operand[$i + 1];\n        break;\n      case '*':\n        $result\
    \ *= $operand[$i + 1];\n        break;\n      case '//':\n        $result = floor($result\
    \ / $operand[$i + 1]);\n        break;\n      case '**':\n        $result = pow($result,\
    \ $operand[$i + 1]);\n        break;\n    }\n  }\n  return $result;\n}\n$operand\
    \ = [2, 3, 4, 5];\n$operator = ['+', '*', '-'];\necho do_algebra($operator, $operand);\n\
    function candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpx3vqkze7.php:52\n\
    Stack trace:\n#0 /tmp/tmpx3vqkze7.php(56): test()\n#1 {main}\n  thrown in /tmp/tmpx3vqkze7.php\
    \ on line 52\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $result = $operand[0];\n  for ($i = 0;\
    \ $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n      case '+':\n\
    \        $result += $operand[$i + 1];\n        break;\n      case '-':\n     \
    \   $result -= $operand[$i + 1];\n        break;\n      case '*':\n        $result\
    \ *= $operand[$i + 1];\n        break;\n      case '//':\n        $result /= $operand[$i\
    \ + 1];\n        break;\n      case '**':\n        $result **= $operand[$i + 1];\n\
    \        break;\n    }\n  }\n  return $result;\n}\n\ndo_algebra(['+', '*', '-'],\
    \ [2, 3, 4, 5]); // 9\ndo_algebra(['//', '*', '+'], [5, 2, 4, 8]); // 6\ndo_algebra(['//',\
    \ '*', '+'], [16, 2, 2, 1]); // 8\ndo_algebra(['//', '*', '+'], [12, 3, 2, 5]);\
    \ // 4\ndo_algebra(['**', '+', '*'], [5, 2, 4, 2]); // 9\ndo_algebra(['**', '+',\
    \ '*'], [2, 3, 4, 2]); // 18\ndo_algebra(['**', '+', '*'], [2, 3, 2, 2]); // 14\n\
    do_algebra(['**', '+', '*'], [2, 2, 2, 2]); // 10\ndo_algebra(['**', '+', '*'],\
    \ [3, 2, 3, 2]); // 17\ndo_algebra(['**', '+', '*'], [3, 2, 2, 2]); // 13\ndo_algebra(['**',\
    \ '+', '*'], [2, 2, 2, 3]); // 13\ndo_algebra(['**', '+', '*'], [2, 3, 2, 3]);\
    \ // 17\ndo_algebra(['**', '+\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected string content "+", expecting "]" in /tmp/tmpbred9tfj.php
    on line 56

    '
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = $operand[0];\n    $length =\
    \ count($operand);\n    for ($i = 1; $i < $length; $i++) {\n        switch ($operator[$i\
    \ - 1]) {\n            case '+':\n                $result += $operand[$i];\n \
    \               break;\n            case '-':\n                $result -= $operand[$i];\n\
    \                break;\n            case '*':\n                $result *= $operand[$i];\n\
    \                break;\n            case '//':\n                $result = intval($result\
    \ / $operand[$i]);\n                break;\n            case '**':\n         \
    \       $result = intval(pow($result, $operand[$i]));\n                break;\n\
    \        }\n    }\n    return $result;\n}\nfunction candidate(...$args) {\n  \
    \  return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl2ta0jvy.php:50\n\
    Stack trace:\n#0 /tmp/tmpl2ta0jvy.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpl2ta0jvy.php\
    \ on line 50\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  if(count($operator) == count($operand)\
    \ - 1) {\n    $result = $operand[0];\n    for($i = 0; $i < count($operator); $i++)\
    \ {\n      if($operator[$i] == '+') {\n        $result += $operand[$i + 1];\n\
    \      } else if($operator[$i] == '-') {\n        $result -= $operand[$i + 1];\n\
    \      } else if($operator[$i] == '*') {\n        $result *= $operand[$i + 1];\n\
    \      } else if($operator[$i] == '//') {\n        $result /= $operand[$i + 1];\n\
    \      } else if($operator[$i] == '**') {\n        $result **= $operand[$i + 1];\n\
    \      }\n    }\n    return $result;\n  }\n}\n\nfunction candidate(...$args) {\n\
    \    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjw4olee1.php:46\n\
    Stack trace:\n#0 /tmp/tmpjw4olee1.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpjw4olee1.php\
    \ on line 46\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = $operand[0];\n    $size = count($operand);\n\
    \    for ($i = 1; $i < $size; $i++) {\n        switch ($operator[$i - 1]) {\n\
    \            case '+':\n                $result += $operand[$i];\n           \
    \     break;\n            case '-':\n                $result -= $operand[$i];\n\
    \                break;\n            case '*':\n                $result *= $operand[$i];\n\
    \                break;\n            case '//':\n                $result = floor($result\
    \ / $operand[$i]);\n                break;\n            case '**':\n         \
    \       $result = pow($result, $operand[$i]);\n                break;\n      \
    \  }\n    }\n    return $result;\n}\n\necho do_algebra(['+', '*', '-'], [2, 3,\
    \ 4, 5]) . \"\\n\";\necho do_algebra(['+', '*', '//', '-'], [2, 3, 4, 5]) . \"\
    \\n\";\necho do_algebra(['+', '*', '//', '-', '**'], [2, 3, 4, 5, 2]) . \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n4\n2\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7_s7rwwq.php:54\n\
    Stack trace:\n#0 /tmp/tmp7_s7rwwq.php(58): test()\n#1 {main}\n  thrown in /tmp/tmp7_s7rwwq.php\
    \ on line 54\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n\t$ans = $operand[0];\n\tfor($i = 0; $i <\
    \ count($operator); $i++) {\n\t\tswitch($operator[$i]) {\n\t\t\tcase '+':\n\t\t\
    \t\t$ans += $operand[$i + 1];\n\t\t\t\tbreak;\n\t\t\tcase '-':\n\t\t\t\t$ans -=\
    \ $operand[$i + 1];\n\t\t\t\tbreak;\n\t\t\tcase '*':\n\t\t\t\t$ans *= $operand[$i\
    \ + 1];\n\t\t\t\tbreak;\n\t\t\tcase '//':\n\t\t\t\t$ans = floor($ans / $operand[$i\
    \ + 1]);\n\t\t\t\tbreak;\n\t\t\tcase '**':\n\t\t\t\t$ans = pow($ans, $operand[$i\
    \ + 1]);\n\t\t\t\tbreak;\n\t\t}\n\t}\n\treturn $ans;\n}\n\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]);\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphvl835x9.php:51\n\
    Stack trace:\n#0 /tmp/tmphvl835x9.php(55): test()\n#1 {main}\n  thrown in /tmp/tmphvl835x9.php\
    \ on line 51\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    for ($i = 0; $i < count($operator); $i++)\
    \ {\n        switch ($operator[$i]) {\n            case '+':\n               \
    \ $operand[$i + 1] = $operand[$i] + $operand[$i + 1];\n                break;\n\
    \            case '-':\n                $operand[$i + 1] = $operand[$i] - $operand[$i\
    \ + 1];\n                break;\n            case '*':\n                $operand[$i\
    \ + 1] = $operand[$i] * $operand[$i + 1];\n                break;\n          \
    \  case '//':\n                $operand[$i + 1] = floor($operand[$i] / $operand[$i\
    \ + 1]);\n                break;\n            case '**':\n                $operand[$i\
    \ + 1] = pow($operand[$i], $operand[$i + 1]);\n                break;\n      \
    \  }\n    }\n    return $operand[count($operand) - 1];\n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnnw43v2b.php:49\n\
    Stack trace:\n#0 /tmp/tmpnnw43v2b.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpnnw43v2b.php\
    \ on line 49\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $numOfOpnd = count($operand);\n  $numOfOp\
    \ = count($operator);\n  if($numOfOpnd < 2 || $numOfOp != $numOfOpnd - 1) return\
    \ null;\n  $res = $operand[0];\n  for($i = 0; $i < $numOfOp; $i++) {\n    switch($operator[$i])\
    \ {\n      case '+':\n        $res += $operand[$i + 1];\n        break;\n    \
    \  case '-':\n        $res -= $operand[$i + 1];\n        break;\n      case '*':\n\
    \        $res *= $operand[$i + 1];\n        break;\n      case '//':\n       \
    \ $res = intval($res / $operand[$i + 1]);\n        break;\n      case '**':\n\
    \        $res = pow($res, $operand[$i + 1]);\n        break;\n      default:\n\
    \        return null;\n    }\n  }\n  return $res;\n}\n\n$opr = ['+', '*', '-',\
    \ '**', '//'];\n$opd = [1, 2, 3, 4, 5];\necho do_algebra($opr, $opd);\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpswghwnrn.php:58\n\
    Stack trace:\n#0 /tmp/tmpswghwnrn.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpswghwnrn.php\
    \ on line 58\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $result = $operand[0];\n  for ($i = 0;\
    \ $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n      case '+':\n\
    \        $result += $operand[$i + 1];\n        break;\n      case '-':\n     \
    \   $result -= $operand[$i + 1];\n        break;\n      case '*':\n        $result\
    \ *= $operand[$i + 1];\n        break;\n      case '//':\n        $result = floor($result\
    \ / $operand[$i + 1]);\n        break;\n      case '**':\n        $result = pow($result,\
    \ $operand[$i + 1]);\n        break;\n    }\n  }\n  return $result;\n}\n\n$operator\
    \ = ['+', '*', '-'];\n$operand = [2, 3, 4, 5];\necho do_algebra($operator, $operand);\n\
    function candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzw8t9fst.php:53\n\
    Stack trace:\n#0 /tmp/tmpzw8t9fst.php(57): test()\n#1 {main}\n  thrown in /tmp/tmpzw8t9fst.php\
    \ on line 53\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n   $result = 0;\n   $operator_index = 0;\n\
    \   for($i = 0; $i < count($operand); $i++) {\n     if($i == 0) {\n       $result\
    \ = $operand[$i];\n     } else {\n       switch($operator[$operator_index]) {\n\
    \         case '+':\n           $result += $operand[$i];\n           break;\n\
    \         case '-':\n           $result -= $operand[$i];\n           break;\n\
    \         case '*':\n           $result *= $operand[$i];\n           break;\n\
    \         case '//':\n           $result = (int)($result / $operand[$i]);\n  \
    \         break;\n         case '**':\n           $result = pow($result, $operand[$i]);\n\
    \           break;\n       }\n       $operator_index++;\n     }\n   }\n   return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmppq_y6t8j.php:55\n\
    Stack trace:\n#0 /tmp/tmppq_y6t8j.php(59): test()\n#1 {main}\n  thrown in /tmp/tmppq_y6t8j.php\
    \ on line 55\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    // Write your code here\n    $result\
    \ = $operand[0];\n    for($i = 0; $i < count($operator); $i++){\n        if($operator[$i]\
    \ == '+'){\n            $result += $operand[$i+1];\n        }else if($operator[$i]\
    \ == '-'){\n            $result -= $operand[$i+1];\n        }else if($operator[$i]\
    \ == '*'){\n            $result *= $operand[$i+1];\n        }else if($operator[$i]\
    \ == '//'){\n            $result = floor($result / $operand[$i+1]);\n        }else\
    \ if($operator[$i] == '**'){\n            $result = pow($result, $operand[$i+1]);\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxdbgwedb.php:45\n\
    Stack trace:\n#0 /tmp/tmpxdbgwedb.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpxdbgwedb.php\
    \ on line 45\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $ans = $operand[0];\n  for($i = 0; $i <\
    \ count($operator); $i++){\n    if($operator[$i] == '+'){\n      $ans += $operand[$i+1];\n\
    \    }\n    elseif($operator[$i] == '-'){\n      $ans -= $operand[$i+1];\n   \
    \ }\n    elseif($operator[$i] == '*'){\n      $ans *= $operand[$i+1];\n    }\n\
    \    elseif($operator[$i] == '//'){\n      $ans /= $operand[$i+1];\n    }\n  \
    \  elseif($operator[$i] == '**'){\n      $ans = pow($ans, $operand[$i+1]);\n \
    \   }\n  }\n  return $ans;\n}\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpy8zzchkp.php:47\n\
    Stack trace:\n#0 /tmp/tmpy8zzchkp.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpy8zzchkp.php\
    \ on line 47\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    // Write your code here\n    $result\
    \ = $operand[0];\n    for($i = 0; $i < count($operator); $i++){\n        if($operator[$i]\
    \ == '+'){\n            $result += $operand[$i+1];\n        }else if($operator[$i]\
    \ == '-'){\n            $result -= $operand[$i+1];\n        }else if($operator[$i]\
    \ == '*'){\n            $result *= $operand[$i+1];\n        }else if($operator[$i]\
    \ == '//'){\n            $result = floor($result / $operand[$i+1]);\n        }else\
    \ if($operator[$i] == '**'){\n            $result = pow($result, $operand[$i+1]);\n\
    \        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxdbgwedb.php:45\n\
    Stack trace:\n#0 /tmp/tmpxdbgwedb.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpxdbgwedb.php\
    \ on line 45\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  // your code\n}\n\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp76xh9te7.php:29\n\
    Stack trace:\n#0 /tmp/tmp76xh9te7.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp76xh9te7.php\
    \ on line 29\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = $operand[0];\n    for ($i =\
    \ 0; $i < count($operator); $i++) {\n        switch ($operator[$i]) {\n      \
    \      case '+':\n                $result += $operand[$i + 1];\n             \
    \   break;\n            case '-':\n                $result -= $operand[$i + 1];\n\
    \                break;\n            case '*':\n                $result *= $operand[$i\
    \ + 1];\n                break;\n            case '//':\n                $result\
    \ /= $operand[$i + 1];\n                break;\n            case '**':\n     \
    \           $result = pow($result, $operand[$i + 1]);\n                break;\n\
    \        }\n    }\n    return $result;\n}\nprint_r(do_algebra(['+', '*', '-'],\
    \ [2, 3, 4, 5]));\nprint_r(do_algebra(['+', '-', '*'], [2, 3, 4, 5]));\nprint_r(do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5, 2]));\n\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15515\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6v78q40b.php:53\n\
    Stack trace:\n#0 /tmp/tmp6v78q40b.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp6v78q40b.php\
    \ on line 53\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $res = $operand[0];\n    foreach ($operator\
    \ as $k => $v) {\n        switch ($v) {\n            case '+':\n             \
    \   $res += $operand[$k + 1];\n                break;\n            case '-':\n\
    \                $res -= $operand[$k + 1];\n                break;\n         \
    \   case '*':\n                $res *= $operand[$k + 1];\n                break;\n\
    \            case '//':\n                $res /= $operand[$k + 1];\n         \
    \       break;\n            case '**':\n                $res = pow($res, $operand[$k\
    \ + 1]);\n                break;\n        }\n    }\n    return $res;\n}\n\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf7iz73k2.php:50\n\
    Stack trace:\n#0 /tmp/tmpf7iz73k2.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpf7iz73k2.php\
    \ on line 50\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $result = $operand[0];\n  for ($i = 0;\
    \ $i < count($operator); $i++) {\n    if ($operator[$i] == '+') {\n      $result\
    \ += $operand[$i + 1];\n    } else if ($operator[$i] == '-') {\n      $result\
    \ -= $operand[$i + 1];\n    } else if ($operator[$i] == '*') {\n      $result\
    \ *= $operand[$i + 1];\n    } else if ($operator[$i] == '//') {\n      $result\
    \ = floor($result / $operand[$i + 1]);\n    } else if ($operator[$i] == '**')\
    \ {\n      $result = pow($result, $operand[$i + 1]);\n    }\n  }\n  return $result;\n\
    }\nprint_r(do_algebra(['+', '*', '-'], [2, 3, 4, 5]));\nprint_r(do_algebra(['+',\
    \ '*', '**'], [2, 3, 4, 5]));\nprint_r(do_algebra(['+', '*', '//'], [2, 3, 4,\
    \ 5]));\nprint_r(do_algebra(['-', '*', '//'], [4, 3, 4, 5]));\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15320000040\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsv2pcu5u.php:47\n\
    Stack trace:\n#0 /tmp/tmpsv2pcu5u.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpsv2pcu5u.php\
    \ on line 47\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n\t\n}\nfunction candidate(...$args) {\n \
    \   return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqozo96ut.php:28\n\
    Stack trace:\n#0 /tmp/tmpqozo96ut.php(33): test()\n#1 {main}\n  thrown in /tmp/tmpqozo96ut.php\
    \ on line 28\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $operator_count = count($operator);\n \
    \ $operand_count = count($operand);\n  $expression = \"\";\n  for ($i = 0; $i\
    \ < $operator_count; $i++) {\n    $expression .= $operand[$i] . $operator[$i];\n\
    \  }\n  $expression .= $operand[$operand_count - 1];\n  return eval(\"return \"\
    \ . $expression . \";\");\n}\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5]) .\
    \ \"\\n\"; // 9\necho do_algebra(['//', '**'], [3, 5, 4]) . \"\\n\"; // 4\necho\
    \ do_algebra(['+', '+', '+', '+'], [2, 3, 4, 5]) . \"\\n\"; // 14\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '9


    Parse error: syntax error, unexpected end of file, expecting ";" in /tmp/tmpg66fwnj7.php(28)
    : eval()''d code on line 1

    '
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  if(count($operator) !== count($operand)\
    \ - 1) return 'Wrong input';\n  if(count($operator) === 0 || count($operand) <\
    \ 2) return 'Wrong input';\n  $sum = $operand[0];\n  for($i = 0; $i < count($operator);\
    \ $i++) {\n    switch($operator[$i]) {\n      case '+':\n        $sum += $operand[$i\
    \ + 1];\n        break;\n      case '-':\n        $sum -= $operand[$i + 1];\n\
    \        break;\n      case '*':\n        $sum *= $operand[$i + 1];\n        break;\n\
    \      case '//':\n        $sum = floor($sum / $operand[$i + 1]);\n        break;\n\
    \      case '**':\n        $sum = $sum ** $operand[$i + 1];\n        break;\n\
    \      default:\n        return 'Wrong input';\n    }\n  }\n  return $sum;\n}\n\
    echo do_algebra(['*', '//', '**'], [2, 3, 4, 5]) . PHP_EOL;\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]) . PHP_EOL;\necho do_algebra(['+', '*', '+'], [2, 3,\
    \ 4, 5]) . PHP_EOL;\necho do_algebra(['*', '*', '*'], [2, 3, 4, 5]) . PHP_EOL;\n\
    echo do_algebra(['*', '*', '*'], [2, 3, 4, 5, 6]) . PHP_EOL;\necho do_algebra(['*',\
    \ '*', '*'], [2, 3, 4]) . PHP_EOL;\necho do_algebra(['*', '*', '*'], [2, 3]) .\
    \ PHP_EOL;\necho do_algebra(['*', '*', '*'], [2]) . PHP_EOL;\necho do_algebra(['*',\
    \ '*', '*'], []) . PHP_EOL\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "function", expecting "," or ";" in
    /tmp/tmpkvuygme7.php on line 56

    '
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  // Your code here\n  $result = $operand[0];\n\
    \  for($i = 0; $i < count($operator); $i++){\n    switch($operator[$i]){\n   \
    \   case '+':\n        $result += $operand[$i+1];\n        break;\n      case\
    \ '-':\n        $result -= $operand[$i+1];\n        break;\n      case '*':\n\
    \        $result *= $operand[$i+1];\n        break;\n      case '//':\n      \
    \  $result = intval($result / $operand[$i+1]);\n        break;\n      case '**':\n\
    \        $result = pow($result, $operand[$i+1]);\n        break;\n    }\n  }\n\
    \  return $result;\n}\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjuohvlgt.php:50\n\
    Stack trace:\n#0 /tmp/tmpjuohvlgt.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpjuohvlgt.php\
    \ on line 50\n"
  timestamp: 1659977837
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $result = $operand[0];\n  for ($i = 0;\
    \ $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n      case '+':\n\
    \        $result += $operand[$i + 1];\n        break;\n      case '-':\n     \
    \   $result -= $operand[$i + 1];\n        break;\n      case '*':\n        $result\
    \ *= $operand[$i + 1];\n        break;\n      case '//':\n        $result = floor($result\
    \ / $operand[$i + 1]);\n        break;\n      case '**':\n        $result = pow($result,\
    \ $operand[$i + 1]);\n        break;\n    }\n  }\n  return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw4hv_nfs.php:49\n\
    Stack trace:\n#0 /tmp/tmpw4hv_nfs.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpw4hv_nfs.php\
    \ on line 49\n"
  timestamp: 1659823238
