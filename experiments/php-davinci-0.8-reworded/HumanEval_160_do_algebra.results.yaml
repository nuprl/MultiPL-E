language: php
name: HumanEval_160_do_algebra
results:
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    if(count($operator) + 1 != count($operand)){\n\
    \        return \"Incorrect arguments\";\n    }\n    $result = $operand[0];\n\
    \    for($i = 0; $i < count($operator); $i++){\n        switch($operator[$i]){\n\
    \            case '+':\n                $result += $operand[$i + 1];\n       \
    \         break;\n            case '-':\n                $result -= $operand[$i\
    \ + 1];\n                break;\n            case '*':\n                $result\
    \ *= $operand[$i + 1];\n                break;\n            case '//':\n     \
    \           $result = floor($result / $operand[$i + 1]);\n                break;\n\
    \            case '**':\n                $result = pow($result, $operand[$i +\
    \ 1]);\n                break;\n            default:\n                return \"\
    Unknown operator\";\n        }\n    }\n    return $result;\n}\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]);\necho \"\\n\";\necho do_algebra(['//', '**'], [10,\
    \ 2, 3]);\necho \"\\n\";\necho do_algebra(['+', '*', '-', '**'], [2, 3, 4, 5,\
    \ 6]);\necho \"\\n\";\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5, 6]);\necho\
    \ \"\\n\";\necho do_algebra(['=='], [2, 3, 4, 5, 6]);\necho \"\\n\";\necho do_algebra(['*',\
    \ '-'], [2, 3, 4, 5]);\necho \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n125\n11390625\nIncorrect arguments\nIncorrect arguments\nIncorrect\
    \ arguments\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6abc_lp3.php:66\n\
    Stack trace:\n#0 /tmp/tmp6abc_lp3.php(70): test()\n#1 {main}\n  thrown in /tmp/tmp6abc_lp3.php\
    \ on line 66\n"
  timestamp: 1659823238
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $operator_index = 0;\n    $result = $operand[0];\n\
    \    for ($i = 1; $i < count($operand); $i++) {\n        $op = $operator[$operator_index];\n\
    \        switch ($op) {\n            case '+':\n                $result += $operand[$i];\n\
    \                break;\n            case '-':\n                $result -= $operand[$i];\n\
    \                break;\n            case '*':\n                $result *= $operand[$i];\n\
    \                break;\n            case '//':\n                $result = floor($result\
    \ / $operand[$i]);\n                break;\n            case '**':\n         \
    \       $result = pow($result, $operand[$i]);\n                break;\n      \
    \  }\n        $operator_index++;\n    }\n    return $result;\n}\n\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]); // 9\necho PHP_EOL;\necho do_algebra(['+', '*', '//',\
    \ '-'], [3, 4, 2, 5]); // 0\necho PHP_EOL;\necho do_algebra(['+', '*', '//', '-'],\
    \ [5, 5, 2, 5]); // 5\necho PHP_EOL;\necho do_algebra(['*', '//', '**'], [4, 2,\
    \ 2]); // 16\necho PHP_EOL;\necho do_algebra(['*', '//', '**'], [4, 2, 2, 2]);\
    \ // 256\necho PHP_EOL;\necho do_algebra(['*', '//', '**'], [2, 4, 2, 4]); //\
    \ 2\necho PHP_EOL;\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n2\n4\n4\n16\n256\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmp5fzx0j2f.php:65\nStack trace:\n#0 /tmp/tmp5fzx0j2f.php(69): test()\n\
    #1 {main}\n  thrown in /tmp/tmp5fzx0j2f.php on line 65\n"
  timestamp: 1659823238
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    if (empty($operator) || empty($operand))\
    \ {\n        return null;\n    }\n    if (count($operator) != count($operand)\
    \ - 1) {\n        return null;\n    }\n    $result = $operand[0];\n    $len =\
    \ count($operator);\n    for ($i = 0; $i < $len; $i++) {\n        switch ($operator[$i])\
    \ {\n            case '+':\n                $result += $operand[$i + 1];\n   \
    \             break;\n            case '-':\n                $result -= $operand[$i\
    \ + 1];\n                break;\n            case '*':\n                $result\
    \ *= $operand[$i + 1];\n                break;\n            case '//':\n     \
    \           $result = floor($result / $operand[$i + 1]);\n                break;\n\
    \            case '**':\n                $result = pow($result, $operand[$i +\
    \ 1]);\n                break;\n            default:\n                break;\n\
    \        }\n    }\n    return $result;\n}\n$operator = ['+', '*', '-'];\n$operand\
    \ = [2, 3, 4, 5];\nvar_dump(do_algebra($operator, $operand));\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "int(15)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvldch3t2.php:61\n\
    Stack trace:\n#0 /tmp/tmpvldch3t2.php(65): test()\n#1 {main}\n  thrown in /tmp/tmpvldch3t2.php\
    \ on line 61\n"
  timestamp: 1659823238
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = $operand[0];\n    for ($i =\
    \ 0; $i < count($operator); $i++) {\n        if ($operator[$i] == '+') {\n   \
    \         $result += $operand[$i + 1];\n        } else if ($operator[$i] == '-')\
    \ {\n            $result -= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == '*') {\n            $result *= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == '//') {\n            $result /= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == '**') {\n            $result **= $operand[$i + 1];\n        }\n    }\n  \
    \  return $result;\n}\necho do_algebra([\"+\", \"*\", \"-\"], [2, 3, 4, 5]) .\
    \ PHP_EOL;\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq2fkq1dq.php:44\n\
    Stack trace:\n#0 /tmp/tmpq2fkq1dq.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpq2fkq1dq.php\
    \ on line 44\n"
  timestamp: 1659823238
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $result = $operand[0];\n  for ($i = 0;\
    \ $i < count($operator); $i++) {\n    switch ($operator[$i]) {\n      case '+':\n\
    \        $result += $operand[$i + 1];\n        break;\n      case '-':\n     \
    \   $result -= $operand[$i + 1];\n        break;\n      case '*':\n        $result\
    \ *= $operand[$i + 1];\n        break;\n      case '//':\n        $result = floor($result\
    \ / $operand[$i + 1]);\n        break;\n      case '**':\n        $result = pow($result,\
    \ $operand[$i + 1]);\n        break;\n    }\n  }\n  return $result;\n}\nfunction\
    \ candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4, 5)) !==\
    \ 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"+\"\
    , \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpw4hv_nfs.php:49\n\
    Stack trace:\n#0 /tmp/tmpw4hv_nfs.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpw4hv_nfs.php\
    \ on line 49\n"
  timestamp: 1659823238
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = $operand[0];\n    for ($i =\
    \ 0; $i < count($operator); $i++) {\n        if ($operator[$i] == \"+\") {\n \
    \           $result += $operand[$i + 1];\n        } else if ($operator[$i] ==\
    \ \"-\") {\n            $result -= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == \"*\") {\n            $result *= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == \"//\") {\n            $result /= $operand[$i + 1];\n        } else if ($operator[$i]\
    \ == \"**\") {\n            $result **= $operand[$i + 1];\n        }\n    }\n\
    \    return $result;\n}\n\necho do_algebra(['+', '*', '-'], [2, 3, 4, 5]) . \"\
    \\n\"; // => 9\necho do_algebra(['+', '//', '*'], [5, 2, 4, 2]); // => 10\necho\
    \ do_algebra(['+', '-', '//', '*'], [5, 3, 2, 4, 2]); // => 10\necho do_algebra(['+',\
    \ '-', '//', '*'], [1, 2, 3, 4, 5]); // => 9\nfunction candidate(...$args) {\n\
    \    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n3.530\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjmv0bmsd.php:48\n\
    Stack trace:\n#0 /tmp/tmpjmv0bmsd.php(52): test()\n#1 {main}\n  thrown in /tmp/tmpjmv0bmsd.php\
    \ on line 48\n"
  timestamp: 1659823238
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = 0;\n    if(count($operator)\
    \ == 0 || count($operand) == 0) {\n        return $result;\n    }\n    else {\n\
    \        for($i = 0; $i < count($operator); $i++) {\n            if($i == 0) {\n\
    \                $result = $operand[$i];\n            }\n            if($operator[$i]\
    \ == '+') {\n                $result += $operand[$i + 1];\n            }\n   \
    \         else if($operator[$i] == '-') {\n                $result -= $operand[$i\
    \ + 1];\n            }\n            else if($operator[$i] == '*') {\n        \
    \        $result *= $operand[$i + 1];\n            }\n            else if($operator[$i]\
    \ == '//') {\n                $result = floor($result / $operand[$i + 1]);\n \
    \           }\n            else if($operator[$i] == '**') {\n                $result\
    \ = pow($result, $operand[$i + 1]);\n            }\n        }\n        return\
    \ $result;\n    }\n}\nprint_r(do_algebra(['+', '*', '-'], [2, 3, 4, 5]) . PHP_EOL);\n\
    print_r(do_algebra(['+', '//', '*', '-'], [4, 2, 4, 4, 5]) . PHP_EOL);\nprint_r(do_algebra(['*',\
    \ '**', '-'], [2, 3, 4, 5]) . PHP_EOL);\nfunction candidate(...$args) {\n    return\
    \ do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n-1\n1291\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpczl5xe2i.php:58\n\
    Stack trace:\n#0 /tmp/tmpczl5xe2i.php(62): test()\n#1 {main}\n  thrown in /tmp/tmpczl5xe2i.php\
    \ on line 58\n"
  timestamp: 1659823238
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $ans = $operand[0];\n    $count = 0;\n\
    \    for($i = 1; $i < count($operand); $i++){\n        switch($operator[$count]){\n\
    \            case '+':\n                $ans += $operand[$i];\n              \
    \  break;\n            case '-':\n                $ans -= $operand[$i];\n    \
    \            break;\n            case '*':\n                $ans *= $operand[$i];\n\
    \                break;\n            case '//':\n                $ans = intval($ans\
    \ / $operand[$i]);\n                break;\n            case '**':\n         \
    \       $ans = pow($ans, $operand[$i]);\n                break;\n        }\n \
    \       $count++;\n    }\n    return $ans;\n}\nfunction candidate(...$args) {\n\
    \    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpb4xu8d0w.php:51\n\
    Stack trace:\n#0 /tmp/tmpb4xu8d0w.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpb4xu8d0w.php\
    \ on line 51\n"
  timestamp: 1659823238
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $result = array_shift($operand);\n  foreach\
    \ ($operator as $key => $value) {\n    $result = $value($result, $operand[$key]);\n\
    \  }\n  return $result;\n}\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function **() in /tmp/tmp3s1_drsw.php:23\n\
    Stack trace:\n#0 /tmp/tmp3s1_drsw.php(28): do_algebra(Array, Array)\n#1 /tmp/tmp3s1_drsw.php(32):\
    \ candidate(Array, Array)\n#2 /tmp/tmp3s1_drsw.php(37): test()\n#3 {main}\n  thrown\
    \ in /tmp/tmp3s1_drsw.php on line 23\n"
  timestamp: 1659823238
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  // Write your code here\n  $result = array_shift($operand);\n\
    \  foreach($operator as $key => $value){\n    $num = array_shift($operand);\n\
    \    switch($value){\n      case '+':\n        $result += $num;\n        break;\n\
    \      case '-':\n        $result -= $num;\n        break;\n      case '*':\n\
    \        $result *= $num;\n        break;\n      case '//':\n        $result =\
    \ floor($result / $num);\n        break;\n      case '**':\n        $result =\
    \ pow($result, $num);\n        break;\n    }\n  }\n  return $result;\n}\nprint_r(do_algebra(['*',\
    \ '-', '//'], [2, 3, 6, 8]));\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6jdcn43q.php:52\n\
    Stack trace:\n#0 /tmp/tmp6jdcn43q.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp6jdcn43q.php\
    \ on line 52\n"
  timestamp: 1659823238
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $sum = $operand[0];\n    for($i = 0;\
    \ $i < count($operator); $i++){\n        switch($operator[$i]){\n            case\
    \ '+':\n                $sum += $operand[$i+1];\n                break;\n    \
    \        case '-':\n                $sum -= $operand[$i+1];\n                break;\n\
    \            case '*':\n                $sum *= $operand[$i+1];\n            \
    \    break;\n            case '//':\n                $sum = floor($sum / $operand[$i+1]);\n\
    \                break;\n            case '**':\n                $sum = pow($sum,\
    \ $operand[$i+1]);\n                break;\n        }\n    }\n    return $sum;\n\
    }\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpoxh7acy8.php:49\n\
    Stack trace:\n#0 /tmp/tmpoxh7acy8.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpoxh7acy8.php\
    \ on line 49\n"
  timestamp: 1659823238
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = $operand[0];\n    for ($i =\
    \ 0; $i < count($operator); $i++) {\n        switch ($operator[$i]) {\n      \
    \      case '+':\n                $result += $operand[$i + 1];\n             \
    \   break;\n            case '-':\n                $result -= $operand[$i + 1];\n\
    \                break;\n            case '*':\n                $result *= $operand[$i\
    \ + 1];\n                break;\n            case '//':\n                $result\
    \ = floor($result / $operand[$i + 1]);\n                break;\n            case\
    \ '**':\n                $result = pow($result, $operand[$i + 1]);\n         \
    \       break;\n        }\n    }\n    return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return do_algebra(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array(\"\
    **\", \"*\", \"+\"), array(2, 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"+\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"//\",\
    \ \"*\"), array(7, 3, 4)) !== 8) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo8ntaur_.php:49\n\
    Stack trace:\n#0 /tmp/tmpo8ntaur_.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpo8ntaur_.php\
    \ on line 49\n"
  timestamp: 1659823238
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  $res = $operand[0];\n  for ($i = 0; $i\
    \ < count($operator); $i++) {\n    switch ($operator[$i]) {\n      case '+':\n\
    \        $res += $operand[$i + 1];\n        break;\n      case '-':\n        $res\
    \ -= $operand[$i + 1];\n        break;\n      case '*':\n        $res *= $operand[$i\
    \ + 1];\n        break;\n      case '//':\n        $res = floor($res / $operand[$i\
    \ + 1]);\n        break;\n      case '**':\n        $res = pow($res, $operand[$i\
    \ + 1]);\n        break;\n    }\n  }\n  return $res;\n}\n\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]) . PHP_EOL; // 9\necho do_algebra(['//', '*', '+'],\
    \ [2, 3, 4, 5]) . PHP_EOL; // 9\necho do_algebra(['//', '**', '*'], [2, 3, 4,\
    \ 5]) . PHP_EOL; // 6\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\n5\n0\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp75q_l4ie.php:53\n\
    Stack trace:\n#0 /tmp/tmp75q_l4ie.php(57): test()\n#1 {main}\n  thrown in /tmp/tmp75q_l4ie.php\
    \ on line 53\n"
  timestamp: 1659823238
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $length = count($operator);\n    $opr\
    \ = $operand[0];\n    for($i = 0; $i < $length; $i++) {\n        switch($operator[$i])\
    \ {\n            case '+':\n                $opr += $operand[$i + 1];\n      \
    \          break;\n            case '-':\n                $opr -= $operand[$i\
    \ + 1];\n                break;\n            case '*':\n                $opr *=\
    \ $operand[$i + 1];\n                break;\n            case '//':\n        \
    \        $opr = floor($opr / $operand[$i + 1]);\n                break;\n    \
    \        case '**':\n                $opr = pow($opr, $operand[$i + 1]);\n   \
    \             break;\n        }\n    }\n    return $opr;\n}\n$operator = ['+',\
    \ '*', '-'];\n$operand = [2, 3, 4, 5];\nvar_dump(do_algebra($operator, $operand));\n\
    $operator = ['//', '**', '-'];\n$operand = [16, 3, 5, 10];\nvar_dump(do_algebra($operator,\
    \ $operand));\n$operator = ['*', '+', '//'];\n$operand = [2, 3, 6, 9];\nvar_dump(do_algebra($operator,\
    \ $operand));\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "int(15)\nfloat(3115)\nfloat(1)\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpl8x_b767.php:59\nStack trace:\n#0 /tmp/tmpl8x_b767.php(63):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpl8x_b767.php on line 59\n"
  timestamp: 1659823238
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n  \n}\nprint_r(do_algebra(['+', '*', '-'],\
    \ [2, 3, 4, 5])); // return: 9\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpsa860v0g.php:29\n\
    Stack trace:\n#0 /tmp/tmpsa860v0g.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpsa860v0g.php\
    \ on line 29\n"
  timestamp: 1659823238
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    \n    if (count($operator) !== count($operand)\
    \ - 1) {\n        return;\n    }\n\n    $result = $operand[0];\n    for ($i =\
    \ 0; $i < count($operator); $i++) {\n        switch ($operator[$i]) {\n      \
    \      case '+':\n                $result += $operand[$i + 1];\n             \
    \   break;\n            case '-':\n                $result -= $operand[$i + 1];\n\
    \                break;\n            case '*':\n                $result *= $operand[$i\
    \ + 1];\n                break;\n            case '//':\n                $result\
    \ = floor($result / $operand[$i + 1]);\n                break;\n            case\
    \ '**':\n                $result = pow($result, $operand[$i + 1]);\n         \
    \       break;\n        }\n    }\n    return $result;\n}\n\n$operator = ['+',\
    \ '*', '-'];\n$operand = [2, 3, 4, 5];\necho do_algebra($operator, $operand);\n\
    function candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp61iknbli.php:58\n\
    Stack trace:\n#0 /tmp/tmp61iknbli.php(62): test()\n#1 {main}\n  thrown in /tmp/tmp61iknbli.php\
    \ on line 58\n"
  timestamp: 1659823238
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = 0;\n    for ($i = 0; $i < count($operator);\
    \ $i++) {\n        if ($i == 0) {\n            $result = $operand[$i];\n     \
    \   }\n        switch ($operator[$i]) {\n            case '+':\n             \
    \   $result += $operand[$i + 1];\n                break;\n            case '-':\n\
    \                $result -= $operand[$i + 1];\n                break;\n      \
    \      case '*':\n                $result *= $operand[$i + 1];\n             \
    \   break;\n            case '//':\n                $result /= $operand[$i + 1];\n\
    \                break;\n            case '**':\n                $result **= $operand[$i\
    \ + 1];\n                break;\n        }\n    }\n    return $result;\n}\n$operator\
    \ = [\"+\", \"*\", \"-\"];\n$operand = [2, 3, 4, 5];\necho do_algebra($operator,\
    \ $operand);\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8yem7t64.php:55\n\
    Stack trace:\n#0 /tmp/tmp8yem7t64.php(59): test()\n#1 {main}\n  thrown in /tmp/tmp8yem7t64.php\
    \ on line 55\n"
  timestamp: 1659823238
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $result = $operand[0];\n    for ($i =\
    \ 0; $i < count($operator); $i++) {\n        switch ($operator[$i]) {\n      \
    \      case '+':\n                $result += $operand[$i + 1];\n             \
    \   break;\n            case '-':\n                $result -= $operand[$i + 1];\n\
    \                break;\n            case '*':\n                $result *= $operand[$i\
    \ + 1];\n                break;\n            case '//':\n                $result\
    \ = (int)($result / $operand[$i + 1]);\n                break;\n            case\
    \ '**':\n                $result = (int)pow($result, $operand[$i + 1]);\n    \
    \            break;\n        }\n    }\n    return $result;\n}\n\necho do_algebra(['+',\
    \ '*', '-'], [2, 3, 4, 5]);\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "15\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpitass5oe.php:51\n\
    Stack trace:\n#0 /tmp/tmpitass5oe.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpitass5oe.php\
    \ on line 51\n"
  timestamp: 1659823238
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n    $operation = \"\";\n    $arr_length =\
    \ count($operand);\n    for ($i = 0; $i < $arr_length - 1; $i++) {\n        $operation\
    \ .= $operand[$i];\n        $operation .= $operator[$i];\n    }\n    $operation\
    \ .= $operand[$arr_length - 1];\n    return eval(\"return $operation;\");\n}\n\
    function candidate(...$args) {\n    return do_algebra(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2, 3, 4,\
    \ 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected end of file, expecting ";" in /tmp/tmpjc84egpk.php(28)
    : eval()''d code on line 1

    '
  timestamp: 1659823238
- exit_code: 255
  program: "<?php\n// Given two arrays operator, and operand. The first array has\
    \ basic algebra operations, and \n// the second array is an array of integers.\
    \ Use the two given arrays to build the algebric \n// expression and return the\
    \ evaluation of this expression.\n// The basic algebra operations:\n// Addition\
    \ ( + ) \n// Subtraction ( - ) \n// Multiplication ( * ) \n// Floor division (\
    \ // ) \n// Exponentiation ( ** ) \n// Example:\n// operator['+', '*', '-']\n\
    // array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n// => result = 9\n// Note:\n\
    // The length of operator array is equal to the length of operand array minus\
    \ one.\n// Operand is an array of of non-negative integers.\n// Operator array\
    \ has at least one operator, and operand array has at least two operands.\nfunction\
    \ do_algebra($operator, $operand) {\n   // Write your code here\n   $total = $operand[0];\n\
    \   for($i = 0; $i < count($operator); $i++){\n       switch($operator[$i]){\n\
    \           case '+':\n               $total += $operand[$i+1];\n            \
    \   break;\n           case '-':\n               $total -= $operand[$i+1];\n \
    \              break;\n           case '*':\n               $total *= $operand[$i+1];\n\
    \               break;\n           case '//':\n               $total = floor($total\
    \ / $operand[$i+1]);\n               break;\n           case '**':\n         \
    \      $total = pow($total, $operand[$i+1]);\n               break;\n       }\n\
    \   }\n   return $total;\n}\n\nfunction candidate(...$args) {\n    return do_algebra(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array(\"**\", \"*\", \"+\"), array(2,\
    \ 3, 4, 5)) !== 37) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    +\", \"*\", \"-\"), array(2, 3, 4, 5)) !== 9) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"//\", \"*\"), array(7, 3, 4)) !== 8) { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpumz29gy5.php:51\n\
    Stack trace:\n#0 /tmp/tmpumz29gy5.php(55): test()\n#1 {main}\n  thrown in /tmp/tmpumz29gy5.php\
    \ on line 51\n"
  timestamp: 1659823238
