name: HumanEval_69_search
language: php
prompt: "<?php\n// You are given a non-empty array of positive integers. Return the\
  \ greatest integer that is greater than \n// zero, and has a frequency greater than\
  \ or equal to the value of the integer itself. \n// The frequency of an integer\
  \ is the number of times it appears in the array.\n// If no such a value exist,\
  \ return -1.\n// Examples:\n// >>> search(array(4, 1, 2, 2, 3, 1))\n// 2\n// >>>\
  \ search(array(1, 2, 2, 3, 3, 3, 4, 4, 4))\n// 3\n// >>> search(array(5, 5, 4, 4,\
  \ 4))\n// -1\nfunction search($lst) {\n"
tests: "function candidate(...$args) {\n    return search(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(5, 5, 5, 5, 1)) !== 1) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(4, 1, 4, 1, 4, 4)) !== 4) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3)) !== -1) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(8, 8, 8, 8, 8, 8,\
  \ 8, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
  \ 3, 3, 2, 2)) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
  \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1)) !== 1) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 8, 2)) !== 2)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 7, 1, 8,\
  \ 8, 10, 5, 8, 5, 3, 10)) !== 1) { throw new Exception(\"Test failed!\"); }\n  \
  \  if (candidate(array(8, 8, 3, 6, 5, 6, 4)) !== -1) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(array(6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10,\
  \ 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9)) !== 1) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1, 9, 10, 1, 3)) !== 1) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(array(6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3,\
  \ 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10)) !== 5) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4,\
  \ 2, 1, 10, 2, 1, 1, 5)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
  \ if (candidate(array(2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10))\
  \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3)) !== 1) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4,\
  \ 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4)) !== 4) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(array(2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3,\
  \ 7, 8, 8, 3, 1, 4, 2, 2, 10, 7)) !== 4) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2,\
  \ 3, 1)) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
  \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8)) !== -1) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(10)) !== -1) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 7, 7, 2, 4, 7,\
  \ 2, 10, 9, 7, 5, 7, 2)) !== 2) { throw new Exception(\"Test failed!\"); }\n   \
  \ if (candidate(array(5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8)) !== 1) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1,\
  \ 1, 10, 7, 5, 6, 7, 6, 7, 7, 6)) !== 1) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(3, 10, 10, 9, 2)) !== -1) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["\t$max = $counter = 0;\n\t$freq = [];\n\tforeach ($lst as $k => $v)\
    \ {\n\t\tif(!isset($freq[$v])) {\n\t\t\t$freq[$v] = 0;\n\t\t}\n\t\t$freq[$v]++;\n\
    \t}\n\tforeach ($freq as $k => $v) {\n\t\tif ($v >= $k) {\n\t\t\tif ($k > $max)\
    \ {\n\t\t\t\t$max = $k;\n\t\t\t}\n\t\t}\n\t}\n\treturn $max ? $max : -1;\n}\n\
    echo search([5, 5, 4, 4, 4]);\necho \"\\n\";\necho search([4, 1, 2, 2, 3, 1]);\n\
    echo \"\\n\";\necho search([1, 2, 2, 3, 3, 3, 4, 4, 4]);\necho \"\\n\";", "  \
    \  $dict = [];\n    $max = -1;\n    foreach ($lst as $i) {\n        if (!array_key_exists($i,\
    \ $dict)) {\n            $dict[$i] = 1;\n        } else {\n            $dict[$i]\
    \ += 1;\n        }\n        if ($i > $max) {\n            $max = $i;\n       \
    \ }\n    }\n    for ($i = $max; $i > 0; $i--) {\n        if (array_key_exists($i,\
    \ $dict) && $dict[$i] >= $i) {\n            return $i;\n        }\n    }\n   \
    \ return -1;\n}\necho search([4, 1, 2, 2, 3, 1]);\necho \"<br>\";\necho search([1,\
    \ 2, 2, 3, 3, 3, 4, 4, 4]);\necho \"<br>\";\necho search([5, 5, 4, 4, 4]);\necho\
    \ \"<br>\";\necho search([1, 2, 3, 1, 2, 3, 1, 2, 3]);\necho \"<br>\";\necho search([1,\
    \ 2, 2, 3, 3, 3, 1, 2, 2]);\necho \"<br>\";\necho search([1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1]);\necho \"<br>\";\necho search([1, 2, 3, 4, 5, 6, 7, 8, 9]);\necho \"\
    <br>\";\necho search([9, 8, 7, 6, 5, 4, 3, 2, 1]);\necho \"<br>\";\necho search([1,\
    \ 1, 1, 1, 2, 2, 2, 2, 2]);\necho \"<br>\";\necho search([2, 2, 2, 2, 2, 1, 1,\
    \ 1, 1]);\necho \"<br>\";\necho search([5, 5, 5, 6, 6, 6, 7, 7, 7]);\necho \"\
    <br>\";\necho search([7, 7, 7, 6, 6, 6, 5, 5, 5]);\necho \"<br>\";\necho search([9,\
    \ 9, 9, 9, 8, 8, 8, 8, 8]);\necho \"<br", "  $count = count($lst);\n  // put all\
    \ the numbers into a set\n  $numbers = array();\n  foreach ($lst as $n) {\n  \
    \  $numbers[$n] = true;\n  }\n  // while the list has numbers in it\n  while ($count\
    \ > 0) {\n    // find the biggest number\n    $biggest = 0;\n    foreach ($numbers\
    \ as $number => $value) {\n      if ($number > $biggest) {\n        $biggest =\
    \ $number;\n      }\n    }\n    // count how many of that number there are\n \
    \   $number_count = 0;\n    foreach ($lst as $n) {\n      if ($n == $biggest)\
    \ {\n        $number_count++;\n      }\n    }\n    // if the number is less than\
    \ the frequency, then return it\n    if ($biggest <= $number_count) {\n      return\
    \ $biggest;\n    }\n    // otherwise, remove it from the set\n    unset($numbers[$biggest]);\n\
    \    $count--;\n  }\n  // if we got out of the loop, there was no number with\
    \ a frequency greater than its value\n  return -1;\n}\n\n$tests = array(\n  array(1,\
    \ 2, 2, 3, 3, 3, 4, 4, 4),\n  array(5, 5, 4, 4, 4),\n  array(1, 1, 1, 2, 3, 3,\
    \ 3, 3, 3, 3),\n  array(7, 6, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4,", "    // your code goes here\n}\n\nprint_r(search([1,\
    \ 2, 2, 3, 3, 3, 4, 4, 4]));", "    $length = count($lst);\n    if ($length ==\
    \ 0) return -1;\n    $dic = array();\n    for ($i = 0; $i < $length; $i++) {\n\
    \        if (array_key_exists($lst[$i], $dic)) $dic[$lst[$i]]++;\n        else\
    \ $dic[$lst[$i]] = 1;\n    }\n    krsort($dic);\n    foreach ($dic as $key =>\
    \ $value) {\n        if ($key >= $value) return $key;\n    }\n    return -1;\n\
    }\n$array = array(1, 2, 2, 3, 3, 3, 4, 4, 4);\n$result = search($array);\necho\
    \ $result;", "    $max = max($lst);\n    $max_freq = array_count_values($lst)[$max];\n\
    \    for ($i = 1; $i <= $max; $i++) {\n        $freq = array_count_values($lst)[$i];\n\
    \        if ($freq >= $i && $freq >= $max_freq) {\n            return $i;\n  \
    \      }\n    }\n    return -1;\n}", "    $search = $lst;\n    $max = max($search);\n\
    \    $result = -1;\n    $count = array_count_values($search);\n    if (count($count)\
    \ > 1) {\n        for ($i = 1; $i <= $max; $i++) {\n            if ((array_key_exists($i,\
    \ $count)) && ($count[$i] >= $i)) {\n                $result = $i;\n         \
    \   } else {\n                $result = -1;\n            }\n        }\n    } else\
    \ {\n        $result = -1;\n    }\n    return $result;\n}\n", "    if(empty($lst))\
    \ {\n        return -1;\n    }\n    $max = max($lst);\n    $counts = array_count_values($lst);\n\
    \    $result = -1;\n    for($i = 1; $i <= $max; $i++) {\n        if(!array_key_exists($i,\
    \ $counts)) {\n            continue;\n        }\n        if($counts[$i] >= $i)\
    \ {\n            $result = $i;\n        }\n    }\n    return $result;\n}", " \
    \   //counts occurances of each value\n    $counts = array_count_values($lst);\n\
    \    arsort($counts);\n    $count = 0;\n    $i = 0;\n    foreach($counts as $k\
    \ => $val) {\n        //checks if the value of the value is greater than or equal\
    \ to the frequency of the value\n        if($k >= $val) {\n            //returns\
    \ the value if the condition is met\n            return $k;\n        }\n    }\n\
    \    //returns -1 if no value is greater than 0 and has a frequency greater than\
    \ or equal to the value of the integer itself\n    return -1;\n}\n$lst = array(4,\
    \ 1, 2, 2, 3, 1);\necho search($lst);\n\necho \"<br>\";\n\n$lst = array(1, 2,\
    \ 2, 3, 3, 3, 4, 4, 4);\necho search($lst);\n\necho \"<br>\";\n\n$lst = array(5,\
    \ 5, 4, 4, 4);\necho search($lst);", "    $maxFrequency = -1;\n    $bestMatch\
    \ = -1;\n    $dict = array();\n    for ($i = 0; $i < count($lst); $i++) {\n  \
    \      $dict[$lst[$i]] += 1;\n        if ($lst[$i] >= $dict[$lst[$i]]) {\n   \
    \         if ($dict[$lst[$i]] > $maxFrequency) {\n                $maxFrequency\
    \ = $dict[$lst[$i]];\n                $bestMatch = $lst[$i];\n            }\n\
    \        }\n    }\n    return $bestMatch;\n}", "  $numToCount = [];\n  foreach\
    \ ($lst as $num) {\n    if (isset($numToCount[$num])) {\n      $numToCount[$num]++;\n\
    \    } else {\n      $numToCount[$num] = 1;\n    }\n  }\n  $answer = -1;\n  foreach\
    \ ($numToCount as $key => $value) {\n    if ($key == $value && $key > $answer)\
    \ {\n      $answer = $key;\n    }\n  }\n  return $answer;\n}", "    $i = 0;\n\
    \    $count = count($lst);\n    $freq_lst = array();\n    $freq_val = array();\n\
    \    $res = array();\n    $value = 0;\n    $freq = 0;\n    $max_val = 0;\n   \
    \ $max_freq = 0;\n    while ($i < $count) {\n        $value = $lst[$i];\n    \
    \    if (in_array($value, $freq_val)) {\n            $j = array_search($value,\
    \ $freq_val);\n            $freq_lst[$j]++;\n        } else {\n            $freq_val[]\
    \ = $value;\n            $freq_lst[] = 1;\n        }\n        $i++;\n    }\n \
    \   $res = array_combine($freq_val, $freq_lst);\n    foreach ($res as $key =>\
    \ $value) {\n        if ($key >= $value) {\n            if ($key > $max_val) {\n\
    \                $max_val = $key;\n                $max_freq = $value;\n     \
    \       } elseif ($key == $max_val) {\n                if ($value > $max_freq)\
    \ {\n                    $max_freq = $value;\n                }\n            }\n\
    \        }\n    }\n    if ($max_val == 0) {\n        return -1;\n    } else {\n\
    \        return $max_val;\n    }\n}\nprint_r(search(array(5, 5, 4, 4, 4)));",
  "    $lst = array_count_values($lst);\n    $temp = [];\n    foreach ($lst as $key\
    \ => $value) {\n        if($key == $value){\n            $temp[] = $key;\n   \
    \     }\n    }\n    if(count($temp) > 0){\n        return max($temp);\n    }\n\
    \    return -1;\n}\nprint_r(search([5, 5, 4, 4, 4]));", "    $map = array();\n\
    \    foreach ($lst as $item) {\n        $map[$item] = $map[$item] + 1;\n    }\n\
    \    // var_dump($map);\n    foreach ($map as $key => $value) {\n        if ($key\
    \ == $value) {\n            return $key;\n        }\n    }\n    return -1;\n}\n",
  "    $count = array_count_values($lst);\n    $freq = 0;\n    foreach ($count as\
    \ $key => $value) {\n        if ($key <= $value) {\n            if ($key > $freq)\
    \ {\n                $freq = $key;\n            }\n        }\n    }\n    if ($freq\
    \ == 0) {\n        $freq = -1;\n    }\n    return $freq;\n}\necho search(array(4,\
    \ 1, 2, 2, 3, 1));", "  $result = -1;\n  $freq = array_count_values($lst);\n \
    \ foreach ($freq as $key => $value) {\n    if ($key <= $value && $key > $result)\
    \ {\n      $result = $key;\n    }\n  }\n  return $result;\n}", "    $frequencies\
    \ = array_count_values($lst);\n    $res = -1;\n    foreach($frequencies as $key\
    \ => $val) {\n        if ($key <= $val && $key > $res) {\n            $res = $key;\n\
    \        }\n    }\n    return $res;\n}\n\n$lst = array(4, 1, 2, 2, 3, 1);\necho\
    \ search($lst);\necho \"<br>\";\n$lst = array(1, 2, 2, 3, 3, 3, 4, 4, 4);\necho\
    \ search($lst);\necho \"<br>\";\n$lst = array(5, 5, 4, 4, 4);\necho search($lst);",
  "\t$counts = array_count_values($lst);\n\t$greatest = 0;\n\tforeach ($counts as\
    \ $num => $count) {\n\t\tif ($num > $greatest && $count >= $num) {\n\t\t\t$greatest\
    \ = $num;\n\t\t}\n\t}\n\treturn $greatest > 0 ? $greatest : -1;\n}\n", "    $n\
    \ = count($lst);\n    if ($n == 0) return -1;\n    $answer = -1;\n    $d = array();\n\
    \    for ($i = 0; $i < $n; $i++) {\n        if (array_key_exists($lst[$i], $d))\
    \ $d[$lst[$i]]++;\n        else $d[$lst[$i]] = 1;\n    }\n    foreach ($d as $key\
    \ => $value) {\n        if ($key <= $value && $key > $answer) $answer = $key;\n\
    \    }\n    return $answer;\n}", "  // https://stackoverflow.com/questions/13640109/how-to-count-the-number-of-occurrences-of-each-element-in-an-array\n\
    \  $counts = array_count_values($lst);\n  $greatest = -1;\n  foreach ($counts\
    \ as $val => $cnt) {\n    if ($val <= $cnt && $val > $greatest) $greatest = $val;\n\
    \  }\n  return $greatest;\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
