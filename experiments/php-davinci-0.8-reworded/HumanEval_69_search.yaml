name: HumanEval_69_search
language: php
prompt: "<?php\n// You are given a non-empty array of positive integers. Return the\
  \ greatest integer that is greater than \n// zero, and has a frequency greater than\
  \ or equal to the value of the integer itself. \n// The frequency of an integer\
  \ is the number of times it appears in the array.\n// If no such a value exist,\
  \ return -1.\n// Examples:\n// >>> search(array(4, 1, 2, 2, 3, 1))\n// 2\n// >>>\
  \ search(array(1, 2, 2, 3, 3, 3, 4, 4, 4))\n// 3\n// >>> search(array(5, 5, 4, 4,\
  \ 4))\n// -1\nfunction search($lst) {\n"
tests: "function candidate(...$args) {\n    return search(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(5, 5, 5, 5, 1)) !== 1) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(4, 1, 4, 1, 4, 4)) !== 4) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(3, 3)) !== -1) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(8, 8, 8, 8, 8, 8,\
  \ 8, 8)) !== 8) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
  \ 3, 3, 2, 2)) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2,\
  \ 7, 8, 8, 4, 8, 7, 3, 9, 6, 5, 10, 4, 3, 6, 7, 1, 7, 4, 10, 8, 1)) !== 1) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(3, 2, 8, 2)) !== 2)\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(6, 7, 1, 8,\
  \ 8, 10, 5, 8, 5, 3, 10)) !== 1) { throw new Exception(\"Test failed!\"); }\n  \
  \  if (candidate(array(8, 8, 3, 6, 5, 6, 4)) !== -1) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(array(6, 9, 6, 7, 1, 4, 7, 1, 8, 8, 9, 8, 10,\
  \ 10, 8, 4, 10, 4, 10, 1, 2, 9, 5, 7, 9)) !== 1) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1, 9, 10, 1, 3)) !== 1) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(array(6, 9, 7, 5, 8, 7, 5, 3, 7, 5, 10, 10, 3,\
  \ 6, 10, 2, 8, 6, 5, 4, 9, 5, 3, 10)) !== 5) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1)) !== 1) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(8, 8, 10, 6, 4, 3, 5, 8, 2, 4, 2, 8, 4, 6, 10, 4,\
  \ 2, 1, 10, 2, 1, 1, 5)) !== 4) { throw new Exception(\"Test failed!\"); }\n   \
  \ if (candidate(array(2, 10, 4, 8, 2, 10, 5, 1, 2, 9, 5, 5, 6, 3, 8, 6, 4, 10))\
  \ !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 6, 10, 1, 6, 9, 10, 8, 6, 8, 7, 3)) !== 1) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(9, 2, 4, 1, 5, 1, 5, 2, 5, 7, 7, 7, 3, 10, 1, 5, 4,\
  \ 2, 8, 4, 1, 9, 10, 7, 10, 2, 8, 10, 9, 4)) !== 4) { throw new Exception(\"Test\
  \ failed!\"); }\n    if (candidate(array(2, 6, 4, 2, 8, 7, 5, 6, 4, 10, 4, 6, 3,\
  \ 7, 8, 8, 3, 1, 4, 2, 2, 10, 7)) !== 4) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(9, 8, 6, 10, 2, 6, 10, 2, 7, 8, 10, 3, 8, 2, 6, 2,\
  \ 3, 1)) !== 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
  \ 5, 3, 9, 5, 6, 3, 2, 8, 5, 6, 10, 10, 6, 8, 4, 10, 7, 7, 10, 8)) !== -1) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(10)) !== -1) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(9, 7, 7, 2, 4, 7,\
  \ 2, 10, 9, 7, 5, 7, 2)) !== 2) { throw new Exception(\"Test failed!\"); }\n   \
  \ if (candidate(array(5, 4, 10, 2, 1, 1, 10, 3, 6, 1, 8)) !== 1) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(7, 9, 9, 9, 3, 4, 1, 5, 9, 1, 2, 1,\
  \ 1, 10, 7, 5, 6, 7, 6, 7, 7, 6)) !== 1) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(3, 10, 10, 9, 2)) !== -1) { throw new Exception(\"\
  Test failed!\"); }\n}\n\ntest();"
completions: ["\t$max = $counter = 0;\n\t$freq = [];\n\tforeach ($lst as $k => $v)\
    \ {\n\t\tif(!isset($freq[$v])) {\n\t\t\t$freq[$v] = 0;\n\t\t}\n\t\t$freq[$v]++;\n\
    \t}\n\tforeach ($freq as $k => $v) {\n\t\tif ($v >= $k) {\n\t\t\tif ($k > $max)\
    \ {\n\t\t\t\t$max = $k;\n\t\t\t}\n\t\t}\n\t}\n\treturn $max ? $max : -1;\n}\n\
    echo search([5, 5, 4, 4, 4]);\necho \"\\n\";\necho search([4, 1, 2, 2, 3, 1]);\n\
    echo \"\\n\";\necho search([1, 2, 2, 3, 3, 3, 4, 4, 4]);\necho \"\\n\";", "  \
    \  $dict = [];\n    $max = -1;\n    foreach ($lst as $i) {\n        if (!array_key_exists($i,\
    \ $dict)) {\n            $dict[$i] = 1;\n        } else {\n            $dict[$i]\
    \ += 1;\n        }\n        if ($i > $max) {\n            $max = $i;\n       \
    \ }\n    }\n    for ($i = $max; $i > 0; $i--) {\n        if (array_key_exists($i,\
    \ $dict) && $dict[$i] >= $i) {\n            return $i;\n        }\n    }\n   \
    \ return -1;\n}\necho search([4, 1, 2, 2, 3, 1]);\necho \"<br>\";\necho search([1,\
    \ 2, 2, 3, 3, 3, 4, 4, 4]);\necho \"<br>\";\necho search([5, 5, 4, 4, 4]);\necho\
    \ \"<br>\";\necho search([1, 2, 3, 1, 2, 3, 1, 2, 3]);\necho \"<br>\";\necho search([1,\
    \ 2, 2, 3, 3, 3, 1, 2, 2]);\necho \"<br>\";\necho search([1, 1, 1, 1, 1, 1, 1,\
    \ 1, 1]);\necho \"<br>\";\necho search([1, 2, 3, 4, 5, 6, 7, 8, 9]);\necho \"\
    <br>\";\necho search([9, 8, 7, 6, 5, 4, 3, 2, 1]);\necho \"<br>\";\necho search([1,\
    \ 1, 1, 1, 2, 2, 2, 2, 2]);\necho \"<br>\";\necho search([2, 2, 2, 2, 2, 1, 1,\
    \ 1, 1]);\necho \"<br>\";\necho search([5, 5, 5, 6, 6, 6, 7, 7, 7]);\necho \"\
    <br>\";\necho search([7, 7, 7, 6, 6, 6, 5, 5, 5]);\necho \"<br>\";\necho search([9,\
    \ 9, 9, 9, 8, 8, 8, 8, 8]);\necho \"<br", "  $count = count($lst);\n  // put all\
    \ the numbers into a set\n  $numbers = array();\n  foreach ($lst as $n) {\n  \
    \  $numbers[$n] = true;\n  }\n  // while the list has numbers in it\n  while ($count\
    \ > 0) {\n    // find the biggest number\n    $biggest = 0;\n    foreach ($numbers\
    \ as $number => $value) {\n      if ($number > $biggest) {\n        $biggest =\
    \ $number;\n      }\n    }\n    // count how many of that number there are\n \
    \   $number_count = 0;\n    foreach ($lst as $n) {\n      if ($n == $biggest)\
    \ {\n        $number_count++;\n      }\n    }\n    // if the number is less than\
    \ the frequency, then return it\n    if ($biggest <= $number_count) {\n      return\
    \ $biggest;\n    }\n    // otherwise, remove it from the set\n    unset($numbers[$biggest]);\n\
    \    $count--;\n  }\n  // if we got out of the loop, there was no number with\
    \ a frequency greater than its value\n  return -1;\n}\n\n$tests = array(\n  array(1,\
    \ 2, 2, 3, 3, 3, 4, 4, 4),\n  array(5, 5, 4, 4, 4),\n  array(1, 1, 1, 2, 3, 3,\
    \ 3, 3, 3, 3),\n  array(7, 6, 5, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4,\
    \ 4, 4, 4, 4, 4, 4, 4, 4,", "    // your code goes here\n}\n\nprint_r(search([1,\
    \ 2, 2, 3, 3, 3, 4, 4, 4]));", "    $length = count($lst);\n    if ($length ==\
    \ 0) return -1;\n    $dic = array();\n    for ($i = 0; $i < $length; $i++) {\n\
    \        if (array_key_exists($lst[$i], $dic)) $dic[$lst[$i]]++;\n        else\
    \ $dic[$lst[$i]] = 1;\n    }\n    krsort($dic);\n    foreach ($dic as $key =>\
    \ $value) {\n        if ($key >= $value) return $key;\n    }\n    return -1;\n\
    }\n$array = array(1, 2, 2, 3, 3, 3, 4, 4, 4);\n$result = search($array);\necho\
    \ $result;", "    $max = max($lst);\n    $max_freq = array_count_values($lst)[$max];\n\
    \    for ($i = 1; $i <= $max; $i++) {\n        $freq = array_count_values($lst)[$i];\n\
    \        if ($freq >= $i && $freq >= $max_freq) {\n            return $i;\n  \
    \      }\n    }\n    return -1;\n}", "    $search = $lst;\n    $max = max($search);\n\
    \    $result = -1;\n    $count = array_count_values($search);\n    if (count($count)\
    \ > 1) {\n        for ($i = 1; $i <= $max; $i++) {\n            if ((array_key_exists($i,\
    \ $count)) && ($count[$i] >= $i)) {\n                $result = $i;\n         \
    \   } else {\n                $result = -1;\n            }\n        }\n    } else\
    \ {\n        $result = -1;\n    }\n    return $result;\n}\n", "    if(empty($lst))\
    \ {\n        return -1;\n    }\n    $max = max($lst);\n    $counts = array_count_values($lst);\n\
    \    $result = -1;\n    for($i = 1; $i <= $max; $i++) {\n        if(!array_key_exists($i,\
    \ $counts)) {\n            continue;\n        }\n        if($counts[$i] >= $i)\
    \ {\n            $result = $i;\n        }\n    }\n    return $result;\n}", " \
    \   //counts occurances of each value\n    $counts = array_count_values($lst);\n\
    \    arsort($counts);\n    $count = 0;\n    $i = 0;\n    foreach($counts as $k\
    \ => $val) {\n        //checks if the value of the value is greater than or equal\
    \ to the frequency of the value\n        if($k >= $val) {\n            //returns\
    \ the value if the condition is met\n            return $k;\n        }\n    }\n\
    \    //returns -1 if no value is greater than 0 and has a frequency greater than\
    \ or equal to the value of the integer itself\n    return -1;\n}\n$lst = array(4,\
    \ 1, 2, 2, 3, 1);\necho search($lst);\n\necho \"<br>\";\n\n$lst = array(1, 2,\
    \ 2, 3, 3, 3, 4, 4, 4);\necho search($lst);\n\necho \"<br>\";\n\n$lst = array(5,\
    \ 5, 4, 4, 4);\necho search($lst);", "    $maxFrequency = -1;\n    $bestMatch\
    \ = -1;\n    $dict = array();\n    for ($i = 0; $i < count($lst); $i++) {\n  \
    \      $dict[$lst[$i]] += 1;\n        if ($lst[$i] >= $dict[$lst[$i]]) {\n   \
    \         if ($dict[$lst[$i]] > $maxFrequency) {\n                $maxFrequency\
    \ = $dict[$lst[$i]];\n                $bestMatch = $lst[$i];\n            }\n\
    \        }\n    }\n    return $bestMatch;\n}", "  $numToCount = [];\n  foreach\
    \ ($lst as $num) {\n    if (isset($numToCount[$num])) {\n      $numToCount[$num]++;\n\
    \    } else {\n      $numToCount[$num] = 1;\n    }\n  }\n  $answer = -1;\n  foreach\
    \ ($numToCount as $key => $value) {\n    if ($key == $value && $key > $answer)\
    \ {\n      $answer = $key;\n    }\n  }\n  return $answer;\n}", "    $i = 0;\n\
    \    $count = count($lst);\n    $freq_lst = array();\n    $freq_val = array();\n\
    \    $res = array();\n    $value = 0;\n    $freq = 0;\n    $max_val = 0;\n   \
    \ $max_freq = 0;\n    while ($i < $count) {\n        $value = $lst[$i];\n    \
    \    if (in_array($value, $freq_val)) {\n            $j = array_search($value,\
    \ $freq_val);\n            $freq_lst[$j]++;\n        } else {\n            $freq_val[]\
    \ = $value;\n            $freq_lst[] = 1;\n        }\n        $i++;\n    }\n \
    \   $res = array_combine($freq_val, $freq_lst);\n    foreach ($res as $key =>\
    \ $value) {\n        if ($key >= $value) {\n            if ($key > $max_val) {\n\
    \                $max_val = $key;\n                $max_freq = $value;\n     \
    \       } elseif ($key == $max_val) {\n                if ($value > $max_freq)\
    \ {\n                    $max_freq = $value;\n                }\n            }\n\
    \        }\n    }\n    if ($max_val == 0) {\n        return -1;\n    } else {\n\
    \        return $max_val;\n    }\n}\nprint_r(search(array(5, 5, 4, 4, 4)));",
  "    $lst = array_count_values($lst);\n    $temp = [];\n    foreach ($lst as $key\
    \ => $value) {\n        if($key == $value){\n            $temp[] = $key;\n   \
    \     }\n    }\n    if(count($temp) > 0){\n        return max($temp);\n    }\n\
    \    return -1;\n}\nprint_r(search([5, 5, 4, 4, 4]));", "    $map = array();\n\
    \    foreach ($lst as $item) {\n        $map[$item] = $map[$item] + 1;\n    }\n\
    \    // var_dump($map);\n    foreach ($map as $key => $value) {\n        if ($key\
    \ == $value) {\n            return $key;\n        }\n    }\n    return -1;\n}\n",
  "    $count = array_count_values($lst);\n    $freq = 0;\n    foreach ($count as\
    \ $key => $value) {\n        if ($key <= $value) {\n            if ($key > $freq)\
    \ {\n                $freq = $key;\n            }\n        }\n    }\n    if ($freq\
    \ == 0) {\n        $freq = -1;\n    }\n    return $freq;\n}\necho search(array(4,\
    \ 1, 2, 2, 3, 1));", "  $result = -1;\n  $freq = array_count_values($lst);\n \
    \ foreach ($freq as $key => $value) {\n    if ($key <= $value && $key > $result)\
    \ {\n      $result = $key;\n    }\n  }\n  return $result;\n}", "    $frequencies\
    \ = array_count_values($lst);\n    $res = -1;\n    foreach($frequencies as $key\
    \ => $val) {\n        if ($key <= $val && $key > $res) {\n            $res = $key;\n\
    \        }\n    }\n    return $res;\n}\n\n$lst = array(4, 1, 2, 2, 3, 1);\necho\
    \ search($lst);\necho \"<br>\";\n$lst = array(1, 2, 2, 3, 3, 3, 4, 4, 4);\necho\
    \ search($lst);\necho \"<br>\";\n$lst = array(5, 5, 4, 4, 4);\necho search($lst);",
  "\t$counts = array_count_values($lst);\n\t$greatest = 0;\n\tforeach ($counts as\
    \ $num => $count) {\n\t\tif ($num > $greatest && $count >= $num) {\n\t\t\t$greatest\
    \ = $num;\n\t\t}\n\t}\n\treturn $greatest > 0 ? $greatest : -1;\n}\n", "    $n\
    \ = count($lst);\n    if ($n == 0) return -1;\n    $answer = -1;\n    $d = array();\n\
    \    for ($i = 0; $i < $n; $i++) {\n        if (array_key_exists($lst[$i], $d))\
    \ $d[$lst[$i]]++;\n        else $d[$lst[$i]] = 1;\n    }\n    foreach ($d as $key\
    \ => $value) {\n        if ($key <= $value && $key > $answer) $answer = $key;\n\
    \    }\n    return $answer;\n}", "  // https://stackoverflow.com/questions/13640109/how-to-count-the-number-of-occurrences-of-each-element-in-an-array\n\
    \  $counts = array_count_values($lst);\n  $greatest = -1;\n  foreach ($counts\
    \ as $val => $cnt) {\n    if ($val <= $cnt && $val > $greatest) $greatest = $val;\n\
    \  }\n  return $greatest;\n}\n", "    // Save number in array to count how many\
    \ times each number appears\n    $freq = array();\n    foreach ($lst as $num)\
    \ {\n        if (!isset($freq[$num])) {\n            $freq[$num] = 1;\n      \
    \  } else {\n            $freq[$num]++;\n        }\n    }\n    // Check if a number's\
    \ frequency is greater than or equal to the value of the integer itself\n    $freq_keys\
    \ = array_keys($freq);\n    $greatest = -1;\n    foreach ($freq_keys as $num)\
    \ {\n        if ($freq[$num] >= $num) {\n            $greatest = $num;\n     \
    \   }\n    }\n    return $greatest;\n}", "    $hsh = array_count_values($lst);\n\
    \    $keys = array_keys($hsh);\n    $greatestInt = 0;\n    $greatestFreq = 0;\n\
    \    foreach ($keys as $key) {\n        if ($key >= $hsh[$key] && $key > $greatestInt)\
    \ {\n            $greatestInt = $key;\n            $greatestFreq = $hsh[$key];\n\
    \        }\n    }\n    if ($greatestInt == 0) {\n        return -1;\n    }\n \
    \   return $greatestInt;\n}\n", "    $count = array_count_values($lst);\n    arsort($count);\n\
    \    $len = count($count);\n    for ($i = 0; $i < $len; $i++) {\n        if (array_key_exists($i\
    \ + 1, $count) && $count[$i + 1] >= $i + 1) {\n            return $i + 1;\n  \
    \      }\n    }\n    return -1;\n}\necho search(array(5, 5, 4, 4, 4));", "   \
    \ // Write your code here\n    // To print results to the standard output you\
    \ can use print\n    // Example: print \"Hello world!\";\n}", "    $n = count($lst);\n\
    \    $result = -1;\n    $frequencies = array_count_values($lst);\n    for ($i\
    \ = 1; $i <= $n; $i++) {\n        if ($frequencies[$i] >= $i) {\n            $result\
    \ = $i;\n        }\n    }\n    return $result;\n}\n\nclass ArrayTest extends PHPUnit_Framework_TestCase\
    \ {\n    protected function setUp() {\n        $this->lst = array(4, 1, 2, 2,\
    \ 3, 1);\n        $this->lst2 = array(1, 2, 2, 3, 3, 3, 4, 4, 4);\n        $this->lst3\
    \ = array(5, 5, 4, 4, 4);\n    }\n\n    protected function tearDown() {\n    \
    \    unset($this->lst);\n        unset($this->lst2);\n        unset($this->lst3);\n\
    \    }\n\n    public function testSearch() {\n        $this->assertEquals(2, search($this->lst));\n\
    \        $this->assertEquals(3, search($this->lst2));\n        $this->assertEquals(-1,\
    \ search($this->lst3));\n    }\n}", "\t$c = array_count_values($lst);\n\t$max\
    \ = max($lst);\n\t$result = [];\n\tfor ($i = 1; $i <= $max; $i++) {\n\t\tif ($c[$i]\
    \ >= $i) {\n\t\t\t$result[] = $i;\n\t\t}\n\t}\n\tif (empty($result)) {\n\t\treturn\
    \ -1;\n\t}\n\treturn max($result);\n}", "\t$freq = array_count_values($lst);\n\
    \t// krsort($freq);\n\t// print_r($freq);\n\tforeach ($freq as $k => $v) {\n\t\
    \tif ($k <= $v) {\n\t\t\treturn $k;\n\t\t}\n\t}\n\treturn -1;\n}\necho search([4,\
    \ 1, 2, 2, 3, 1]) . \"\\n\";\necho search([1, 2, 2, 3, 3, 3, 4, 4, 4]) . \"\\\
    n\";\necho search([5, 5, 4, 4, 4]) . \"\\n\";", "\tif(empty($lst)) return -1;\n\
    \t$map = array();\n\tforeach($lst as $v) {\n\t\t$map[$v]++;\n\t}\n\tfor($i = max($lst);\
    \ $i > 0; $i--) {\n\t\tif(isset($map[$i]) && $map[$i] >= $i) {\n\t\t\treturn $i;\n\
    \t\t}\n\t}\n\treturn -1;\n}\n\nprint_r(search(array(4, 1, 2, 2, 3, 1)));\necho\
    \ PHP_EOL;\nprint_r(search(array(1, 2, 2, 3, 3, 3, 4, 4, 4)));\necho PHP_EOL;\n\
    print_r(search(array(5, 5, 4, 4, 4)));\necho PHP_EOL;", "    $lst=array_count_values($lst);\n\
    \    $result=-1;\n    foreach($lst as $key=>$value){\n        if($key<=$value){\n\
    \            $result=$key;\n        }\n    }\n    return $result;\n}", "    $max\
    \ = -1;\n    foreach ($lst as $value) {\n        if ($value > $max) {\n      \
    \      $max = $value;\n        }\n    }\n    for ($i = 1; $i <= $max; $i++) {\n\
    \        $cnt = 0;\n        foreach ($lst as $value) {\n            if ($value\
    \ == $i) {\n                $cnt++;\n            }\n        }\n        if ($cnt\
    \ >= $i) {\n            return $i;\n        }\n    }\n    return -1;\n}\necho\
    \ search(array(4, 1, 2, 2, 3, 1));\necho \"\\n\";\necho search(array(1, 2, 2,\
    \ 3, 3, 3, 4, 4, 4));\necho \"\\n\";\necho search(array(5, 5, 4, 4, 4));", " \
    \   $size = sizeof($lst);\n    $count = 0;\n    for ($i = 0; $i < $size; $i++)\
    \ {\n        for ($j = 0; $j < $size; $j++) {\n            if ($lst[$i] == $lst[$j])\
    \ {\n                $count++;\n            }\n        }\n        if ($count >=\
    \ $lst[$i]) {\n            return $lst[$i];\n        }\n        $count = 0;\n\
    \    }\n    return -1;\n}\nprint_r(search(array(4, 1, 2, 2, 3, 1)));\nprint_r(search(array(1,\
    \ 2, 2, 3, 3, 3, 4, 4, 4)));\nprint_r(search(array(5, 5, 4, 4, 4)));", "    \n\
    \    $high = 0;\n    $high_val = 0;\n    $count = 0;\n    //find the largest value\n\
    \    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] > $high) {\n\
    \            $high = $lst[$i];\n        }\n    }\n    //find number of instances\
    \ of the largest value\n    for ($i = 0; $i < count($lst); $i++) {\n        if\
    \ ($lst[$i] == $high) {\n            $count++;\n        }\n    }\n    //set the\
    \ largest value with the correct count\n    if ($count >= $high) {\n        $high_val\
    \ = $high;\n    }\n    // if the highest value doesn't have a count greater than\
    \ or equal to itself, return -1\n    if ($high_val == 0) {\n        return -1;\n\
    \    } else {\n        return $high_val;\n    }\n}\n\n$list = array(1, 1, 2, 2,\
    \ 2, 4, 4, 5, 5, 6, 7, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9,\
    \ 9, 9,", "\t// use array_count_values to count frequency of each number\n\t$counts\
    \ = array_count_values($lst);\n\t// call sorted_counts function to iterate through\
    \ a sorted array of counts\n\t$result = sorted_counts($counts);\n\t// return -1\
    \ if no value greater than 0, has freqency greater than or equal to the integer\
    \ itself\n\treturn (count($result) > 0 ? $result[0] : -1);\n}\n", "    $res =\
    \ [];\n    foreach ($lst as $k => $v) {\n        if (!array_key_exists($v, $res))\
    \ {\n            $res[$v] = 1;\n        } else {\n            $res[$v]++;\n  \
    \      }\n    }\n    arsort($res);\n    $lst = array_keys($res);\n    foreach\
    \ ($lst as $v) {\n        if ($v <= $res[$v]) {\n            return $v;\n    \
    \    }\n    }\n    return -1;\n}\n\nprint_r(search([4, 1, 2, 2, 3, 1]));\nprint_r(search([1,\
    \ 2, 2, 3, 3, 3, 4, 4, 4]));\nprint_r(search([5, 5, 4, 4, 4]));", "    $max =\
    \ 0;\n    $cnt = 0;\n    foreach ($lst as $val) {\n        if ($val > $max) {\n\
    \            $max = $val;\n        }\n    }\n    $dictionary = array_fill(0, $max,\
    \ 0);\n    foreach ($lst as $val) {\n        $dictionary[$val - 1] += 1;\n   \
    \ }\n    for ($i = $max - 1; $i >= 0; $i--) {\n        if ($dictionary[$i] >=\
    \ $i + 1) {\n            return $i + 1;\n        }\n    }\n    return -1;\n}\n",
  "  $max = -1;\n  $map = array();\n  foreach ($lst as $x) {\n    if (!array_key_exists($x,\
    \ $map)) {\n      $map[$x] = 0;\n    }\n    $map[$x] += 1;\n  }\n  foreach ($map\
    \ as $x => $cnt) {\n    if ($x <= $cnt && $x > $max) {\n      $max = $x;\n   \
    \ }\n  }\n  return $max;\n}\n\necho search(array(4, 1, 2, 2, 3, 1)) . \"\\n\"\
    ;\necho search(array(1, 2, 2, 3, 3, 3, 4, 4, 4)) . \"\\n\";\necho search(array(5,\
    \ 5, 4, 4, 4)) . \"\\n\";", "    $count = array_count_values($lst);\n    foreach\
    \ ($count as $key => $value) {\n        if ($key <= $value) {\n            return\
    \ $key;\n        }\n    }\n    return -1;\n}", "\t$hash = array();\n\t$max = 0;\n\
    \tforeach ($lst as $n) {\n\t\tif (!isset($hash[$n])) {\n\t\t\t$hash[$n] = 0;\n\
    \t\t}\n\t\t$hash[$n] += 1;\n\t\tif ($n > $max) {\n\t\t\t$max = $n;\n\t\t}\n\t\
    }\n\tfor ($i = $max; $i > 0; $i--) {\n\t\tif (isset($hash[$i]) && $hash[$i] >=\
    \ $i) {\n\t\t\treturn $i;\n\t\t}\n\t}\n\treturn -1;\n}", "    // TODO Your code\
    \ here\n    $res = [];\n    $n = -1;\n    $p = 0;\n    foreach ($lst as $el) {\n\
    \        if (!isset($res[$el])) {\n            $res[$el] = 1;\n        } else\
    \ {\n            $res[$el]++;\n        }\n    }\n    foreach ($res as $key =>\
    \ $val) {\n        if ($val >= $key) {\n            if ($key > $n) {\n       \
    \         $n = $key;\n            }\n        }\n    }\n    return $n;\n}\n", "\t\
    $arr = array_count_values($lst);\n\t$gint = -1;\n\tforeach ($arr as $key => $value)\
    \ {\n\t\tif ($key >= $value && $key > $gint) {\n\t\t\t$gint = $key;\n\t\t}\n\t\
    }\n\treturn $gint;\n}\n$arr = array(4, 1, 2, 2, 3, 1);\nvar_dump(search($arr));",
  "    $freq=[];\n    foreach($lst as $e) {\n        if (isset($freq[$e])) {\n   \
    \         $freq[$e]++;\n        } else {\n            $freq[$e]=1;\n        }\n\
    \    }\n    foreach($freq as $key => $val) {\n        if ($key<=$val) {\n    \
    \        return $key;\n        }\n    }\n    return -1;\n}\n\n$lst=[4, 1, 2, 2,\
    \ 3, 1];\necho \"search($lst) = \".search($lst).\"\\n\";\n$lst=[1, 2, 2, 3, 3,\
    \ 3, 4, 4, 4];\necho \"search($lst) = \".search($lst).\"\\n\";\n$lst=[5, 5, 4,\
    \ 4, 4];\necho \"search($lst) = \".search($lst).\"\\n\";", "  $arr = array_count_values($lst);\n\
    \  $res = -1;\n  foreach ($arr as $key => $value) {\n    if ($key <= $value &&\
    \ $key > $res) {\n      $res = $key;\n    }\n  }\n  return $res;\n}", "    \n}",
  "    $mode = -1;\n    $count = 0;\n    $freq = array_count_values($lst);\n    foreach\
    \ ($freq as $key => $value) {\n        if ($key == $value && $key > $mode) {\n\
    \            $mode = $key;\n        }\n    }\n    return $mode;\n}\nprint_r(search(array(4,\
    \ 1, 2, 2, 3, 1)));\nprint_r(search(array(1, 2, 2, 3, 3, 3, 4, 4, 4)));\nprint_r(search(array(5,\
    \ 5, 4, 4, 4)));", "  $my_max = max($lst);\n  $freq = array_count_values($lst);\n\
    \  $max = 0;\n  foreach ($freq as $key => $value) {\n    if ($value >= $key &&\
    \ $key > $max) {\n      $max = $key;\n    }\n  }\n  if ($max == 0) {\n    return\
    \ -1;\n  }\n  return $max;\n}\n\nprint_r(search(array(4, 1, 2, 2, 3, 1)));\nprint_r(search(array(1,\
    \ 2, 2, 3, 3, 3, 4, 4, 4)));\nprint_r(search(array(5, 5, 4, 4, 4)));\nprint_r(search(array(4,\
    \ 1, 1, 2, 3, 1)));\nprint_r(search(array(1, 1, 2, 2, 3, 3, 4, 4, 4)));\nprint_r(search(array(5,\
    \ 5, 4, 5, 4)));\nprint_r(search(array(4, 5, 5, 1, 2, 2, 3, 1)));\nprint_r(search(array(1,\
    \ 1, 2, 2, 3, 3, 4, 4, 5)));\nprint_r(search(array(5, 5, 5, 4, 4)));", "    $maxFreq\
    \ = 0;\n    $freq = array_count_values($lst);\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        if ($freq[$lst[$i]] >= $lst[$i] && $freq[$lst[$i]] > $maxFreq)\
    \ {\n            $maxFreq = $freq[$lst[$i]];\n        }\n    }\n    return $maxFreq;\n\
    }\n\nprint_r(search(array(4, 1, 2, 2, 3, 1)) . \"\\n\");\nprint_r(search(array(1,\
    \ 2, 2, 3, 3, 3, 4, 4, 4)) . \"\\n\");\nprint_r(search(array(5, 5, 4, 4, 4)) .\
    \ \"\\n\");\n", "    rsort($lst);\n    for ($i = 0; $i < count($lst); $i++) {\n\
    \        $count = 0;\n        for ($j = 0; $j < count($lst); $j++) {\n       \
    \     if ($lst[$i] == $lst[$j]) $count++;\n        }\n        if ($count >= $lst[$i])\
    \ return $lst[$i];\n    }\n    return -1;\n}\n", "    $map = [];\n    foreach\
    \ ($lst as $i) {\n        if (array_key_exists($i, $map)) {\n            $map[$i]++;\n\
    \        } else {\n            $map[$i] = 1;\n        }\n    }\n    foreach ($map\
    \ as $i => $v) {\n        if ($i >= $v) {\n            return $i;\n        }\n\
    \    }\n    return -1;\n}\n\n$lst = array(4, 1, 2, 2, 3, 1);\necho search($lst)\
    \ . \"\\n\";\n\n$lst = array(1, 2, 2, 3, 3, 3, 4, 4, 4);\necho search($lst) .\
    \ \"\\n\";\n\n$lst = array(5, 5, 4, 4, 4);\necho search($lst) . \"\\n\";\n\n$lst\
    \ = array(1, 2, 3, 4, 5);\necho search($lst) . \"\\n\";\n\n$lst = array(1, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,\
    \ 2, 2,", "    $count_array = array_count_values($lst);\n    krsort($count_array);\n\
    \    foreach ($count_array as $k => $v) {\n        if ($k <= $v) {\n         \
    \   return $k;\n        }\n    }\n    return -1;\n}\nprint search(array(4, 1,\
    \ 2, 2, 3, 1));\nprint \"\\n\";\nprint search(array(1, 2, 2, 3, 3, 3, 4, 4, 4));\n\
    print \"\\n\";\nprint search(array(5, 5, 4, 4, 4));\nprint \"\\n\";", "    $length\
    \ = count($lst);\n    $lst = array_unique($lst);\n    $freq = array_count_values($lst);\n\
    \    $count = 0;\n    for ($i = 1; $i < $length; $i++) {\n        foreach ($freq\
    \ as $key => $value) {\n            if ($key >= $value) {\n                $count\
    \ = $key;\n            }\n        }\n    }\n    if ($count != 0) {\n        return\
    \ $count;\n    } else {\n        return -1;\n    }\n}\necho search(array(5, 5,\
    \ 4, 4, 4));\n", "    $res = 0;\n    $newlst = array_count_values($lst);\n   \
    \ foreach ($newlst as $key => $value) {\n        if ($key == $value) {\n     \
    \       $res = $key;\n        } else {\n            $res = -1;\n        }\n  \
    \  }\n    return $res;\n}", "    $count = array_count_values($lst);\n    if(min($count)\
    \ == 1){\n        return -1;\n    }\n    $list = [];\n    foreach($count as $key\
    \ => $value){\n        if($key >= $value){\n            $list[] = $key;\n    \
    \    }\n    }\n    return max($list);\n}\n\n$lst = [4, 1, 2, 2, 3, 1];\n$lst1\
    \ = [1, 2, 2, 3, 3, 3, 4, 4, 4];\n$lst2 = [5, 5, 4, 4, 4];\n\necho search($lst);\n\
    echo \"\\n\";\necho search($lst1);\necho \"\\n\";\necho search($lst2);\necho \"\
    \\n\";\n", "    $max = -1;\n    $cnt = array_count_values($lst);\n    foreach\
    \ ($cnt as $k => $v) {\n        if ($k >= $v && $k > $max) {\n            $max\
    \ = $k;\n        }\n    }\n    return $max;\n}\n", "    $freq = [];\n    foreach\
    \ ($lst as $val) {\n        if (isset($freq[$val])) {\n            $freq[$val]\
    \ += 1;\n        } else {\n            $freq[$val] = 1;\n        }\n    }\n  \
    \  krsort($freq);\n    foreach ($freq as $val => $count) {\n        if ($val >=\
    \ $count) {\n            return $val;\n        }\n    }\n    return -1;\n}\n",
  "    // Write your code here\n    $counts = array_count_values($lst);\n    foreach($counts\
    \ as $key => $val) {\n        if($key <= $val) {\n            return $key;\n \
    \       }\n    }\n    return -1;\n}\n\n$lst = [4, 1, 2, 2, 3, 1];\necho search($lst);\n",
  "\t$s = array_count_values($lst);\n\t$r = -1;\n\tforeach ($s as $i => $c) {\n\t\t\
    if ($i >= $c && $i > $r) $r = $i;\n\t}\n\treturn $r;\n}\necho search(array(4,\
    \ 1, 2, 2, 3, 1)).\"\\n\";\necho search(array(1, 2, 2, 3, 3, 3, 4, 4, 4)).\"\\\
    n\";\necho search(array(5, 5, 4, 4, 4)).\"\\n\";", "    foreach ($lst as $value)\
    \ {\n        $times = 0;\n        foreach ($lst as $v) {\n            if ($value\
    \ == $v) {\n                $times += 1;\n            }\n        }\n        if\
    \ ($times >= $value) {\n            return $value;\n        }\n    }\n    return\
    \ -1;\n}\n", "    // Your code here\n    $cache = [];\n    foreach ($lst as $val)\
    \ {\n        $cache[$val] = isset($cache[$val]) ? $cache[$val] + 1 : 1;\n    }\n\
    \    $result = -1;\n    foreach ($cache as $key => $val) {\n        if ($key ==\
    \ $val && $key > $result) {\n            $result = $key;\n        }\n    }\n \
    \   return $result;\n}\n", "    $re = -1;\n    $keys = array_keys($lst);\n   \
    \ foreach ($keys as $key) {\n        $value = $lst[$key];\n        $cnt = 0;\n\
    \        foreach ($lst as $v) {\n            if ($v == $value) {\n           \
    \     $cnt++;\n            }\n        }\n        if ($cnt >= $value) {\n     \
    \       $re = $value;\n        }\n    }\n    return $re;\n}", "    foreach($lst\
    \ as $k=>$v){\n        if($v === 0){\n            return -1;\n        }\n    \
    \    $appears = array_count_values($lst)[$v];\n        if($appears >= $v){\n \
    \           return $v;\n        }\n    }\n    return -1;\n}", "    $freq = array_count_values($lst);\n\
    \    $found = false;\n    for ($i = count($lst); $i > 0; $i--) {\n        if (array_key_exists($i,\
    \ $freq) && $freq[$i] >= $i) {\n            $found = true;\n            break;\n\
    \        }\n    }\n    return $found ? $i : -1;\n}\n\n$a = array(4, 1, 2, 2, 3,\
    \ 1);\n$b = array(1, 2, 2, 3, 3, 3, 4, 4, 4);\n$c = array(5, 5, 4, 4, 4);\n\n\
    echo search($a) . PHP_EOL;\necho search($b) . PHP_EOL;\necho search($c) . PHP_EOL;",
  "    $count = array_count_values($lst);\n    $max = -1;\n    foreach ($count as\
    \ $key => $val) {\n        if ($key >= $val) {\n            $max = $key;\n   \
    \     }\n    }\n    return $max;\n}\nprint_r(search(array(4, 1, 2, 2, 3, 1)));\n\
    echo \"\\n\";\nprint_r(search(array(1, 2, 2, 3, 3, 3, 4, 4, 4)));\necho \"\\n\"\
    ;\nprint_r(search(array(5, 5, 4, 4, 4)));", "\t$arr = array_count_values($lst);\n\
    \tfor ($i = max($lst); $i > 0; $i--) {\n\t\tif (isset($arr[$i]) && $arr[$i] >=\
    \ $i) {\n\t\t\treturn $i;\n\t\t}\n\t}\n\treturn -1;\n}\necho search(array(4, 1,\
    \ 2, 2, 3, 1));\necho \"\\n\";\necho search(array(1, 2, 2, 3, 3, 3, 4, 4, 4));\n\
    echo \"\\n\";\necho search(array(5, 5, 4, 4, 4));\necho \"\\n\";", "    if (count($lst)\
    \ < 1) {\n        return -1;\n    }\n    $max = max($lst);\n    $item_count =\
    \ array_count_values($lst);\n    for ($i = $max; $i > 0; $i--) {\n        if (isset($item_count[$i])\
    \ && $item_count[$i] >= $i) {\n            return $i;\n        }\n    }\n    return\
    \ -1;\n}\n", "  $max = -1;\n  foreach (array_count_values($lst) as $k => $v) {\n\
    \    if ($k == $v && $k > $max) {\n      $max = $k;\n    }\n  }\n  return $max;\n\
    }", "    $freq = array_count_values($lst);\n    $answer = -1;\n    foreach($freq\
    \ as $key => $val) {\n        if($key <= $val && $key > $answer) {\n         \
    \   $answer = $key;\n        }\n    }\n    return $answer;\n}\n", "    $res =\
    \ [];\n    foreach ($lst as $item) {\n        if (isset($res[$item])) {\n    \
    \        $res[$item]++;\n        } else {\n            $res[$item] = 1;\n    \
    \    }\n    }\n    $max = -1;\n    foreach ($res as $k => $v) {\n        if ($k\
    \ <= $v && $k > $max) {\n            $max = $k;\n        }\n    }\n    return\
    \ $max;\n}\n\necho search([4, 1, 2, 2, 3, 1]);\necho PHP_EOL;\necho search([1,\
    \ 2, 2, 3, 3, 3, 4, 4, 4]);\necho PHP_EOL;\necho search([5, 5, 4, 4, 4]);\necho\
    \ PHP_EOL;", "    $cnt = array_count_values($lst);\n    // var_dump($cnt);\n \
    \   for ($i = 1; $i < count($cnt); $i++) {\n        if ($cnt[$i] >= $i) {\n  \
    \          return $i;\n        }\n    }\n    return -1;\n}\n", "    $result =\
    \ -1;\n    foreach (array_count_values($lst) as $key => $value) {\n        if\
    \ ($key <= $value) {\n            $result = max($result, $key);\n        }\n \
    \   }\n    return $result;\n}\necho search([4, 1, 2, 2, 3, 1]);\necho search([1,\
    \ 2, 2, 3, 3, 3, 4, 4, 4]);\necho search([5, 5, 4, 4, 4]);", "    foreach ($lst\
    \ as $item) {\n        $count[$item] = $count[$item] + 1 ?? 1;\n    }\n    krsort($count);\n\
    \    foreach ($count as $key => $value) {\n        if ($key == $value) {\n   \
    \         return $key;\n        }\n    }\n    return -1;\n}\nprint_r(search([4,\
    \ 1, 2, 2, 3, 1]));", "\t$key = 0;\n\t$val = -1;\n\t$counts = array_count_values($lst);\n\
    \tforeach ($counts as $key => $value) {\n\t\tif ($value < $key) continue;\n\t\t\
    if ($value >= $key && $key > $val) {\n\t\t\t$val = $key;\n\t\t}\n\t}\n\treturn\
    \ $val;\n}", "    $max = 0;\n    $lstCnt = array_count_values($lst);\n    foreach\
    \ ($lstCnt as $k => $v) {\n        if ($k < $v && $k > $max) {\n            $max\
    \ = $k;\n        }\n    }\n    return $max > 0 ? $max : -1;\n}", "    $arr = array_count_values($lst);\n\
    \    $sort = $lst;\n    sort($sort);\n    $sort = array_unique($sort);\n    foreach\
    \ ($sort as $val) {\n        if ($arr[$val] >= $val) {\n            return $val;\n\
    \        }\n    }\n    return -1;\n}", "    $nums = array_count_values($lst);\n\
    \    krsort($nums);\n    // print_r($nums);\n    $i = 0;\n    foreach ($nums as\
    \ $k => $v) {\n        if ($k > $v) {\n            $i = -1;\n            break;\n\
    \        }\n        if ($k <= $v) {\n            $i = $k;\n            break;\n\
    \        }\n    }\n    return $i;\n}\necho search([4, 1, 2, 2, 3, 1]) . \"\\n\"\
    ;\necho search([1, 2, 2, 3, 3, 3, 4, 4, 4]) . \"\\n\";\necho search([5, 5, 4,\
    \ 4, 4]) . \"\\n\";\n", "  sort($lst);\n  $unique_lst = array_unique($lst);\n\
    \  $unique_lst_len = count($unique_lst);\n  $key = $unique_lst_len - 1;\n  $final_counter\
    \ = 0;\n  for ($i = 0; $i < $unique_lst_len; $i++) {\n    $first_element = $unique_lst[$i];\n\
    \    $next_element = $unique_lst[$i + 1];\n    $counter = 0;\n    while ($first_element\
    \ == $next_element) {\n      $counter++;\n      $i++;\n      $next_element = $unique_lst[$i\
    \ + 1];\n    }\n    if ($counter >= $first_element) {\n      $final_counter =\
    \ $first_element;\n      break;\n    }\n  }\n  return $final_counter;\n}", " \
    \   $cnt = array_count_values($lst);\n    foreach($cnt as $k => $v) {\n      \
    \  if($k <= $v) {\n            return $k;\n        }\n    }\n    return -1;\n}",
  "  $len = count($lst);\n  if ($len == 0) return -1;\n  rsort($lst);\n  $max = $lst[0];\n\
    \  $out = -1;\n  $pre = $max;\n  $cnt = 1;\n  for ($i = 1; $i < $len; $i++) {\n\
    \    if ($lst[$i] == $pre) {\n      $cnt += 1;\n    } else {\n      if ($cnt >=\
    \ $pre) {\n        $out = $pre;\n        break;\n      }\n      $pre = $lst[$i];\n\
    \      $cnt = 1;\n    }\n  }\n  if ($cnt >= $pre) $out = $pre;\n  return $out;\n\
    }\n", "    $freq = [];\n    foreach ($lst as $n) {\n        $freq[$n]++;\n   \
    \ }\n    $highFreq = max($freq);\n    krsort($freq);\n    foreach ($freq as $key\
    \ => $value) {\n        if ($key == $value && $key <= $highFreq) {\n         \
    \   return $key;\n        }\n    }\n    return -1;\n}", "    $count = array_count_values($lst);\n\
    \    $result = -1;\n    foreach ($count as $key => $value) {\n        if ($key\
    \ >= $value && $key > $result) {\n            $result = $key;\n        }\n   \
    \ }\n    return $result;\n}\n", "  $counts = array_count_values($lst);\n  $n =\
    \ max($lst);\n  for ($i = $n; $i > 0; $i--) {\n    if (isset($counts[$i]) && $counts[$i]\
    \ >= $i) return $i;\n  }\n  return -1;\n}", "    $counts = array_count_values($lst);\n\
    \    $max = max($lst);\n    for ($i=1; $i <= $max; $i++) { \n        if ($counts[$i]\
    \ >= $i) {\n            return $i;\n        }\n    }\n    return -1;\n}\n\nclass\
    \ Test {\n    public static function run() {\n        $lst = array(4, 1, 2, 2,\
    \ 3, 1);\n        $result = search($lst);\n        echo $result, '<br>';\n   \
    \     $lst = array(1, 2, 2, 3, 3, 3, 4, 4, 4);\n        $result = search($lst);\n\
    \        echo $result, '<br>';\n        $lst = array(5, 5, 4, 4, 4);\n       \
    \ $result = search($lst);\n        echo $result, '<br>';\n    }\n}\n\nTest::run();",
  "\t$values = array_count_values($lst);\n\tforeach ($values as $key => $value) {\n\
    \t\tif ($key >= $value) {\n\t\t\tcontinue;\n\t\t}\n\t\treturn $key;\n\t}\n\treturn\
    \ -1;\n}\n", "    $frequency = array_count_values($lst);\n    $max = -1;\n   \
    \ foreach ($frequency as $key => $value) {\n        if ($key > $value) {\n   \
    \         continue;\n        }\n        if ($key > $max) {\n            $max =\
    \ $key;\n        }\n    }\n    return $max;\n}\n\n$answer = search([4, 1, 2, 2,\
    \ 3, 1]);\nprint_r($answer);\necho \"\\n\";\n$answer = search([1, 2, 2, 3, 3,\
    \ 3, 4, 4, 4]);\nprint_r($answer);\necho \"\\n\";\n$answer = search([5, 5, 4,\
    \ 4, 4]);\nprint_r($answer);\necho \"\\n\";", "\t$freq = array_count_values($lst);\n\
    \tarsort($freq);\n\t$max_freq = max($freq);\n\tforeach ($freq as $key => $value)\
    \ {\n\t\tif ($key >= $value && $value >= $max_freq) {\n\t\t\treturn $key;\n\t\t\
    }\n\t}\n\treturn -1;\n}\n", "    $dups = [];\n    foreach ($lst as $x) {\n   \
    \     if (isset($dups[$x])) {\n            $dups[$x] += 1;\n        } else {\n\
    \            $dups[$x] = 1;\n        }\n    }\n    arsort($dups);\n    foreach\
    \ ($dups as $x => $y) {\n        if ($x <= $y) {\n            return $x;\n   \
    \     }\n    }\n    return -1;\n}\n", "    $cnt = array_count_values($lst);\n\
    \    for ($i = 1; $i <= count($lst); $i++) {\n        if ($cnt[$i] >= $i) {\n\
    \            return $i;\n        }\n    }\n    return -1;\n}\necho search([4,\
    \ 1, 2, 2, 3, 1]);", "    $array=[];\n    foreach($lst as $value){\n        array_push($array,$value);\n\
    \    }\n    $array=array_unique($array);\n    sort($array);\n    for($i=0;$i<count($array);$i++){\n\
    \        if($array[$i]>=count(array_keys($lst,$array[$i]))){\n            return\
    \ $array[$i];\n        }\n    }\n    return -1;\n}", "    $counts = array_count_values($lst);\n\
    \    foreach ($counts as $item => $count) {\n        if ($item >= $count) {\n\
    \            return $item;\n        }\n    }\n    return -1;\n}\n", "    $array\
    \ = [];\n    $max = 0;\n    foreach ($lst as $item) {\n        if ($item > $max)\
    \ {\n            $max = $item;\n        }\n        if (!isset($array[$item]))\
    \ {\n            $array[$item] = 1;\n        } else {\n            $array[$item]++;\n\
    \        }\n    }\n    for ($i = $max; $i > 0; $i--) {\n        if (isset($array[$i])\
    \ && $array[$i] >= $i) {\n            return $i;\n        }\n    }\n    return\
    \ -1;\n}\n\nprint search([4, 1, 2, 2, 3, 1]) . \"\\n\";\nprint search([1, 2, 2,\
    \ 3, 3, 3, 4, 4, 4]) . \"\\n\";\nprint search([5, 5, 4, 4, 4]) . \"\\n\";", " \
    \ $result = -1;\n  $max = 0;\n  $count = array_count_values($lst);\n  foreach\
    \ ($count as $key => $value) {\n    if ($key == $value && $key > $max) {\n   \
    \   $max = $key;\n      $result = $key;\n    }\n  }\n  return $result;\n}\n$lst\
    \ = array(4, 1, 2, 2, 3, 1);\nprint_r(search($lst));\n$lst = array(1, 2, 2, 3,\
    \ 3, 3, 4, 4, 4);\nprint_r(search($lst));\n$lst = array(5, 5, 4, 4, 4);\nprint_r(search($lst));",
  "\tfor ($i = 1; $i <= max($lst); $i++) {\n\t\tif (array_count_values($lst)[$i] >=\
    \ $i) {\n\t\t\treturn $i;\n\t\t}\n\t}\n\treturn -1;\n}\necho search(array(5, 5,\
    \ 4, 4, 4));", "    $max_value = 0;\n    $max_freq = 0;\n    $counts = array_count_values($lst);\n\
    \    foreach ($counts as $value => $freq) {\n        if ($value > $max_value &&\
    \ $freq >= $value) {\n            $max_value = $value;\n            $max_freq\
    \ = $freq;\n        }\n    }\n    return $max_value ? $max_value : -1;\n}\n\n\
    print_r(search(array(4, 1, 2, 2, 3, 1)));\nprint_r(search(array(1, 2, 2, 3, 3,\
    \ 3, 4, 4, 4)));\nprint_r(search(array(5, 5, 4, 4, 4)));", "    $arr = array_count_values($lst);\n\
    \    $keys = array_keys($arr);\n    $max = max($keys);\n    if ($arr[$max] >=\
    \ $max) return $max;\n    else return -1;\n}\n", "    $dict = array();\n    foreach\
    \ ($lst as $key => $val) {\n        if (!array_key_exists($val, $dict)) {\n  \
    \          $dict[$val] = 1;\n        } else {\n            $dict[$val] += 1;\n\
    \        }\n    }\n    //print_r($dict);\n    for ($i = count($lst); $i > 0; $i--)\
    \ {\n        if (array_key_exists($i, $dict) && $dict[$i] >= $i) {\n         \
    \   return $i;\n        }\n    }\n    return -1;\n}\nprint_r(search(array(4, 1,\
    \ 2, 2, 3, 1)));\nprint_r(search(array(1, 2, 2, 3, 3, 3, 4, 4, 4)));\nprint_r(search(array(5,\
    \ 5, 4, 4, 4)));", "    $counts = array_count_values($lst);\n    $max = -1;\n\
    \    $best = -1;\n    foreach ($counts as $item => $count) {\n        if ($count\
    \ >= $item && $item > $max) {\n            $max = $item;\n            $best =\
    \ $item;\n        }\n    }\n    return $best;\n}\n", "    $set = array_count_values($lst);\n\
    \    $result = [];\n    foreach ($set as $k => $v) {\n        if ($k == $v) {\n\
    \            array_push($result, $k);\n        }\n    }\n    if (count($result)\
    \ > 0) {\n        return max($result);\n    } else {\n        return -1;\n   \
    \ }\n}", "  $lst_unique = array_unique($lst); // remove duplicates\n  sort($lst_unique);\
    \ // sort from smallest to largest\n  $count = array_count_values($lst); // count\
    \ number of each elements\n  for ($i = count($lst_unique) - 1; $i >= 0; $i--)\
    \ {\n    if ($count[$lst_unique[$i]] >= $lst_unique[$i]) {\n      return $lst_unique[$i];\n\
    \    }\n  }\n  return -1;\n}", "    $arr = array_count_values($lst);\n    $max\
    \ = 0;\n    foreach ($arr as $key => $value) {\n        if ($key == $value &&\
    \ $key > $max) {\n            $max = $key;\n        }\n    }\n    return $max;\n\
    }\necho search([1, 2, 2, 3, 3, 3, 4, 4, 4]);", "  for ($i = 1; $i <= count($lst);\
    \ $i++) {\n    $cnt = 0;\n    foreach ($lst as $v) {\n      if ($v == $i) {\n\
    \        $cnt++;\n      }\n    }\n    if ($cnt >= $i) {\n      return $i;\n  \
    \  }\n  }\n  return -1;\n}\n", "\t$frequency = array_count_values($lst);\n\tfor\
    \ ($i = max($lst); $i > 0; $i--) {\n\t\tif (in_array($i, $lst) && $frequency[$i]\
    \ >= $i) {\n\t\t\treturn $i;\n\t\t}\n\t}\n\treturn -1;\n}\n", "\t$result = -1;\n\
    \t$freq = array_count_values($lst);\n\tforeach ($freq as $key => $value) {\n\t\
    \tif ($key > $value && $key > $result) {\n\t\t\t$result = $key;\n\t\t}\n\t}\n\t\
    return $result;\n}\n", "    $max_freq = 0;\n    $max_val = -1;\n    foreach ($lst\
    \ as $val) {\n        $freq = 0;\n        foreach ($lst as $val2) {\n        \
    \    if ($val2 == $val) {\n                $freq++;\n            }\n        }\n\
    \        if ($freq >= $val && $freq > $max_freq) {\n            $max_freq = $freq;\n\
    \            $max_val = $val;\n        }\n    }\n    return $max_val;\n}\n", " \
    \   $counts = array_count_values($lst);\n    arsort($counts);\n    $key = key($counts);\n\
    \    return ($counts[$key] >= $key) ? $key : -1;\n}\n", "  $val = -1;\n  foreach\
    \ (array_count_values($lst) as $key => $val) {\n    if ($key <= $val) {\n    \
    \  return $key;\n    }\n  }\n  return $val;\n}\necho search([4, 1, 2, 2, 3, 1]),\
    \ \"\\n\";\necho search([1, 2, 2, 3, 3, 3, 4, 4, 4]), \"\\n\";\necho search([5,\
    \ 5, 4, 4, 4]), \"\\n\";", "    $freq = [];\n    foreach ($lst as $v)\n      \
    \  $freq[$v] = ($freq[$v] ?? 0) + 1;\n    for ($i = count($lst) - 1; $i > 0; $i--)\n\
    \        if (isset($freq[$i]) && $freq[$i] >= $i)\n            return $i;\n  \
    \  return -1;\n}\n\n$array = [5, 5, 4, 4, 4];\n\nprint_r(search($array));", " \
    \   $arr = array_count_values($lst);\n    $max = -1;\n    foreach ($arr as $key\
    \ => $value) {\n        if ($key >= $value && $key > $max) {\n            $max\
    \ = $key;\n        }\n    }\n    return $max;\n}\n\nprint_r(search([4, 1, 2, 2,\
    \ 3, 1]));\nprint_r(search([1, 2, 2, 3, 3, 3, 4, 4, 4]));\nprint_r(search([5,\
    \ 5, 4, 4, 4]));", "    $cnts = array_count_values($lst);\n    $max = 0;\n   \
    \ foreach($cnts as $num => $cnt) {\n        if ($num <= $cnt && $num > $max) {\n\
    \            $max = $num;\n        }\n    }\n    return $max ? $max : -1;\n}",
  "    $lst = array_count_values($lst);\n    $n = max($lst);\n    $max = 0;\n    foreach\
    \ ($lst as $key => $value) {\n        if ($value < $key) {\n            return\
    \ -1;\n        }\n        if ($value >= $key && $value > $max) {\n           \
    \ $max = $key;\n        }\n    }\n    return $max;\n}", "    $arr = array_count_values($lst);\n\
    \    $max = 0;\n    foreach ($arr as $key => $value) {\n        if ($key == $value)\
    \ {\n            if ($key > $max) {\n                $max = $key;\n          \
    \  }\n        }\n    }\n    if ($max > 0) {\n        return $max;\n    } else\
    \ {\n        return -1;\n    }\n}\nprint_r(search(array(4, 1, 2, 2, 3, 1)));\n\
    echo \"<br>\";\nprint_r(search(array(1, 2, 2, 3, 3, 3, 4, 4, 4)));\necho \"<br>\"\
    ;\nprint_r(search(array(5, 5, 4, 4, 4)));\necho \"<br>\";\n", "\t$size = sizeof($lst);\n\
    \t$num = -1;\n\t$int = 0;\n\tfor ($i = 0; $i < $size; $i++) {\n\t\t$val = $lst[$i];\n\
    \t\t$cnt = 0;\n\t\tfor ($j = 0; $j < $size; $j++) {\n\t\t\tif ($lst[$j] == $val)\
    \ {\n\t\t\t\t$cnt++;\n\t\t\t}\n\t\t}\n\t\tif ($cnt >= $val) {\n\t\t\tif ($val\
    \ > $num) {\n\t\t\t\t$num = $val;\n\t\t\t}\n\t\t}\n\t}\n\treturn $num;\n}\n$lst\
    \ = array(4, 1, 2, 2, 3, 1);\necho search($lst);", "    $frequent = array_count_values($lst);\n\
    \    $result = -1;\n    foreach ($frequent as $value => $times) {\n        if\
    \ ($value <= $times) {\n            $result = max($result, $value);\n        }\n\
    \    }\n    return $result;\n}", "    $counts = array_count_values($lst);\n  \
    \  $result = -1;\n    foreach ($counts as $num => $count) {\n        if ($num\
    \ <= $count) {\n            $result = max($result, $num);\n        }\n    }\n\
    \    return $result;\n}\n", "\t$cnt_arr = array();\n\t$max_el = max($lst);\n\t\
    for ($i = 1; $i <= $max_el; $i++) {\n\t\t$cnt_arr[$i] = 0;\n\t}\n\tforeach ($lst\
    \ as $val) {\n\t\t$cnt_arr[$val]++;\n\t}\n\tfor ($i = $max_el; $i >= 1; $i--)\
    \ {\n\t\tif ($cnt_arr[$i] >= $i) {\n\t\t\treturn $i;\n\t\t}\n\t}\n\treturn -1;\n\
    }\necho search(array(4, 1, 2, 2, 3, 1)) . \"\\n\";\necho search(array(1, 2, 2,\
    \ 3, 3, 3, 4, 4, 4)) . \"\\n\";\necho search(array(5, 5, 4, 4, 4)) . \"\\n\";",
  "  $counts = [];\n  foreach ($lst as $l) {\n    $counts[$l]++;\n  }\n  arsort($counts);\n\
    \  reset($counts);\n  $count = current($counts);\n  $key = key($counts);\n  return\
    \ ($count >= $key) ? $key : -1;\n}\n\n$lst = [4, 1, 2, 2, 3, 1];\necho search($lst)\
    \ . \"\\n\";\n\n$lst = [1, 2, 2, 3, 3, 3, 4, 4, 4];\necho search($lst) . \"\\\
    n\";\n\n$lst = [5, 5, 4, 4, 4];\necho search($lst) . \"\\n\";", "    // Your code\
    \ here\n    $result = -1;\n    $i = 0;\n    foreach ($lst as $key => $value) {\n\
    \        $i = 0;\n        foreach ($lst as $key1 => $value1) {\n            if\
    \ ($value == $value1) {\n                $i++;\n            }\n        }\n   \
    \     if ($i >= $value) {\n            $result = $value;\n        }\n    }\n \
    \   return $result;\n}\nprint_r(search(array(5, 5, 4, 4, 4)));\n", "  $max = -1;\n\
    \  foreach($lst as $v) {\n    if($v >= $max) {\n      $count = count(array_keys($lst,\
    \ $v));\n      if($count >= $v) {\n        $max = $v;\n      }\n    }\n  }\n \
    \ return $max;\n}\nprint search(array(4, 1, 2, 2, 3, 1));\nprint \"\\n\";\nprint\
    \ search(array(1, 2, 2, 3, 3, 3, 4, 4, 4));\nprint \"\\n\";\nprint search(array(5,\
    \ 5, 4, 4, 4));\nprint \"\\n\";", "  $res = -1;\n  $i = 0;\n  while($i < count($lst))\
    \ {\n    $val = $lst[$i];\n    $cnt = 0;\n    while($i < count($lst) && $lst[$i]\
    \ == $val) {\n      $cnt++;\n      $i++;\n    }\n    if($cnt >= $val) {\n    \
    \  $res = $val;\n    }\n  }\n  return $res;\n}", "    $result = array_fill(0,\
    \ max($lst), 0);\n    foreach ($lst as $key => $value) {\n        $result[$value-1]++;\n\
    \    }\n    foreach ($result as $key => $value) {\n        if ($value >= $key+1)\
    \ return $key+1;\n    }\n    return -1;\n}\n", "  $mapping = [];\n  foreach ($lst\
    \ as $number) {\n    if (!isset($mapping[$number])) {\n      $mapping[$number]\
    \ = 0;\n    }\n    $mapping[$number]++;\n  }\n  foreach ($mapping as $number =>\
    \ $freq) {\n    if ($number <= $freq) {\n      return $number;\n    }\n  }\n \
    \ return -1;\n}", "    $d = array_count_values($lst);\n    $max = -1;\n    foreach\
    \ ($d as $key => $val) {\n        if ($key == $val && $key > $max) {\n       \
    \     $max = $key;\n        }\n    }\n    return $max;\n}\n\necho search(array(4,\
    \ 1, 2, 2, 3, 1));\necho \"\\n\";\necho search(array(1, 2, 2, 3, 3, 3, 4, 4, 4));\n\
    echo \"\\n\";\necho search(array(5, 5, 4, 4, 4));\necho \"\\n\";\n", "    $freq\
    \ = array_count_values($lst);\n    $count = -1;\n    foreach ($freq as $key =>\
    \ $value) {\n        if ($key <= $value) {\n            $count = $key;\n     \
    \   }\n    }\n    return $count;\n}\n", "  // Write your code here\n  // To print\
    \ results to the standard output you can use print\n  // Example: print \"Hello\
    \ world!\";\n  if (!$lst) {\n    return -1;\n  }\n  $i = 1;\n  $greatest = max($lst);\n\
    \  $greatest_frequency = array_count_values($lst)[$greatest];\n  while ($i <=\
    \ $greatest) {\n    $current_frequency = array_count_values($lst)[$i];\n    if\
    \ ($current_frequency >= $i) {\n      $greatest = $i;\n      $greatest_frequency\
    \ = $current_frequency;\n    }\n    $i++;\n  }\n  if ($greatest > 0 && $greatest_frequency\
    \ >= $greatest) {\n    return $greatest;\n  }\n  return -1;\n}\necho search([4,\
    \ 1, 2, 2, 3, 1]);", "    sort($lst);\n    // Write your code here\n    // To\
    \ print results to the standard output you can use print\n    // Example: print\
    \ \"Hello world!\";\n}", "    $max=-1;\n    $maxVal=-1;\n    $map=[];\n    foreach($lst\
    \ as $val) {\n        if (array_key_exists($val, $map)) {\n            $map[$val]++;\n\
    \        } else {\n            $map[$val]=1;\n        }\n        if ($val>$maxVal)\
    \ {\n            $maxVal=$val;\n        }\n    }\n    for ($i=1; $i<=$maxVal;\
    \ $i++) {\n        if (array_key_exists($i, $map) && $map[$i]>=$i) {\n       \
    \     $max=$i;\n        }\n    }\n    return $max;\n}", "  $arr = array_count_values($lst);\n\
    \  arsort($arr);\n  foreach ($arr as $k => $v) {\n    if ($k <= $v) {\n      return\
    \ $k;\n    }\n  }\n  return -1;\n}\n", "    foreach (array_count_values($lst)\
    \ as $k => $v) {\n        if ($k <= $v) {\n            return $k;\n        }\n\
    \    }\n    return -1;\n}\n\necho search([4, 1, 2, 2, 3, 1]) . \"\\n\";\necho\
    \ search([1, 2, 2, 3, 3, 3, 4, 4, 4]) . \"\\n\";\necho search([5, 5, 4, 4, 4])\
    \ . \"\\n\";", "  // your code here...\n}", "    $counts = array_count_values($lst);\n\
    \    $is_found = false;\n    foreach ($counts as $key => $val) {\n        if ($key\
    \ <= $val) {\n            $is_found = true;\n            break;\n        }\n \
    \   }\n    return $is_found ? $key : -1;\n}\n\n$lst = array(4, 1, 2, 2, 3, 1);\n\
    $r = search($lst);\nvar_dump($r);\n\n$lst = array(1, 2, 2, 3, 3, 3, 4, 4, 4);\n\
    $r = search($lst);\nvar_dump($r);\n\n$lst = array(5, 5, 4, 4, 4);\n$r = search($lst);\n\
    var_dump($r);", "    $ls = array_values(array_unique($lst));\n    for ($i = count($ls)-1;\
    \ $i >= 0; $i--) {\n        $c = count(array_keys($lst, $ls[$i]));\n        if\
    \ ($c >= $ls[$i]) {\n            return $ls[$i];\n        }\n    }\n    return\
    \ -1;\n}\n", "    $arr = array_count_values($lst);\n    for ($i = 1; $i < count($arr);\
    \ $i++) {\n        if ($arr[$i] >= $i) {\n            return $i;\n        }\n\
    \    }\n    return -1;\n}\n", "    $max = -1;\n    $counts = array_count_values($lst);\n\
    \    ksort($counts);\n    foreach ($counts as $x => $n) {\n        if ($x > $n)\
    \ break;\n        $max = $x;\n    }\n    return $max;\n}\n\n$lst = array(4, 1,\
    \ 2, 2, 3, 1);\nprint_r(search($lst));\n$lst = array(1, 2, 2, 3, 3, 3, 4, 4, 4);\n\
    print_r(search($lst));\n$lst = array(5, 5, 4, 4, 4);\nprint_r(search($lst));",
  "    $counts = array_count_values($lst);\n    $frequency = 0;\n    $result = -1;\n\
    \    foreach ($counts as $k => $v) {\n        if ($k == $v && $k > $frequency)\
    \ {\n            $frequency = $k;\n            $result = $k;\n        }\n    }\n\
    \    return $result;\n}\n", "    $max = max($lst);\n    $hash = array_count_values($lst);\n\
    \    for ($i = $max; $i > 0; $i--) {\n        if (isset($hash[$i]) && $hash[$i]\
    \ >= $i) {\n            return $i;\n        }\n    }\n    return -1;\n}\nprint_r(search(array(4,\
    \ 1, 2, 2, 3, 1)));", "  $arr = array_count_values($lst);\n  arsort($arr);\n \
    \ $arr = array_keys($arr);\n  $int = array_search($arr[0], $arr);\n  if ($int\
    \ > 0) return $int;\n  return -1;\n}\n\n$lst = array(4, 1, 2, 2, 3, 1);\n\necho\
    \ search($lst);", "    $counts = array_count_values($lst);\n    arsort($counts);\n\
    \    foreach ($counts as $item => $count) {\n        if ($item == $count) {\n\
    \            return $item;\n        }\n    }\n    return -1;\n}\n\n$lst = array(4,\
    \ 1, 2, 2, 3, 1);\necho search($lst) . \"\\n\";\n$lst = array(1, 2, 2, 3, 3, 3,\
    \ 4, 4, 4);\necho search($lst) . \"\\n\";\n$lst = array(5, 5, 4, 4, 4);\necho\
    \ search($lst) . \"\\n\";\n", "    $max = 0;\n    foreach ($lst as $k => $v) {\n\
    \        if ($v > $max) {\n            $max = $v;\n        }\n    }\n    $freq\
    \ = array_fill(0, $max + 1, 0);\n    foreach ($lst as $k => $v) {\n        $freq[$v]\
    \ += 1;\n    }\n    $result = -1;\n    for ($i = 1; $i <= $max; $i++) {\n    \
    \    if ($freq[$i] >= $i) {\n            $result = $i;\n        }\n    }\n   \
    \ return $result;\n}\nprint_r(search(array(4, 1, 2, 2, 3, 1)));\nprint_r(search(array(1,\
    \ 2, 2, 3, 3, 3, 4, 4, 4)));\nprint_r(search(array(5, 5, 4, 4, 4)));", "    $rst\
    \ = -1;\n    $cnt_arr = array_count_values($lst);\n    foreach ($cnt_arr as $key\
    \ => $val) {\n        if ($key > $val) {\n            $rst = -1;\n        } else\
    \ {\n            $rst = $key;\n        }\n    }\n    return $rst;\n}\n", "   \
    \ if (!is_array($lst)) {\n        return -1;\n    }\n    $list = array_count_values($lst);\n\
    \    krsort($list);\n    foreach ($list as $key => $value) {\n        if ($key\
    \ >= $value) {\n            return $key;\n        }\n    }\n    return -1;\n}\n",
  "    $c = array_count_values($lst);\n    $min = max($lst);\n    $res = -1;\n   \
    \ for ($i = 1; $i <= $min; $i++) {\n        if (isset($c[$i]) && $c[$i] >= $i)\
    \ {\n            $res = $i;\n        }\n    }\n    return $res;\n}\n", "    $max\
    \ = -1;\n    foreach (array_count_values($lst) as $k => $v) {\n        if ($k\
    \ >= $v && $k > $max) {\n            $max = $k;\n        }\n    }\n    return\
    \ $max;\n}\n\n$tests = array(\n    array(\n        'input' => array(4, 1, 2, 2,\
    \ 3, 1),\n        'expected' => 2\n    ),\n    array(\n        'input' => array(1,\
    \ 2, 2, 3, 3, 3, 4, 4, 4),\n        'expected' => 3\n    ),\n    array(\n    \
    \    'input' => array(5, 5, 4, 4, 4),\n        'expected' => -1\n    ),\n);\n\n\
    foreach ($tests as $test) {\n    $result = search($test['input']);\n    if ($result\
    \ === $test['expected']) {\n        echo \"test passed\\n\";\n    } else {\n \
    \       echo \"test failed\\n\";\n        echo 'input: '.json_encode($test['input']).\"\
    \\n\";\n        echo 'result: '.$result.\"\\n\";\n        echo 'expected: '.$test['expected'].\"\
    \\n\";\n    }\n}", "  $frequency = array_count_values($lst);\n  foreach ($frequency\
    \ as $key => $value) {\n    if ($key <= $value) {\n      return $key;\n    }\n\
    \  }\n  return -1;\n}\n", "    // Your code here\n}\n\n/**\n * TEST CASES\n */\n\
    $test = new Test();\n$test->assert_equals(search([4, 1, 2, 2, 3, 1]), 2);\n$test->assert_equals(search([1,\
    \ 2, 2, 3, 3, 3, 4, 4, 4]), 3);\n$test->assert_equals(search([5, 5, 4, 4, 4]),\
    \ -1);\necho $test->report();", "    $map = array();\n    foreach ($lst as $num)\
    \ {\n        if (array_key_exists($num, $map)) {\n            $map[$num]++;\n\
    \        } else {\n            $map[$num] = 1;\n        }\n    }\n    $res = -1;\n\
    \    foreach ($map as $key => $value) {\n        if ($key <= $value && $key >\
    \ $res) {\n            $res = $key;\n        }\n    }\n    return $res;\n}", " \
    \   $counts = array_count_values($lst);\n    $max = max($lst);\n    for ($i =\
    \ $max; $i > 0; $i--) {\n        if (array_key_exists($i, $counts) && $counts[$i]\
    \ >= $i) {\n            return $i;\n        }\n    }\n    return -1;\n}\n", "\t\
    $freq = array_count_values($lst);\n\tarsort($freq);\n\t$f = array_flip($freq);\n\
    \tasort($f);\n\tforeach ($f as $key => $value) {\n\t\tif ($key >= $value) {\n\t\
    \t\treturn $value;\n\t\t}\n\t}\n\treturn -1;\n}\necho search(array(5, 5, 4, 4,\
    \ 4)).\"\\n\";", "  $freq = array_count_values($lst);\n  foreach($freq as $item\
    \ => $count) {\n    if ($item == $count) {\n      return $item;\n    }\n  }\n\
    \  return -1;\n}", "    $freq = [];\n    foreach ($lst as $i) {\n        isset($freq[$i])\
    \ ? $freq[$i]++ : $freq[$i] = 1;\n    }\n    $cnt = array_count_values($freq);\n\
    \    for ($i = count($cnt); $i > 0; $i--) {\n        if (isset($cnt[$i]) && $cnt[$i]\
    \ >= $i) {\n            return $i;\n        }\n    }\n    return -1;\n}\n", " \
    \   if (count($lst) == 0) return -1;\n    $out = -1;\n    $counts = array_count_values($lst);\n\
    \    foreach ($counts as $k => $v) {\n        if ($k >= $v && $out < $k) {\n \
    \           $out = $k;\n        }\n    }\n    return $out;\n}\n\n$lst = array(4,\
    \ 1, 2, 2, 3, 1);\necho search($lst) . PHP_EOL;\n\n$lst = array(1, 2, 2, 3, 3,\
    \ 3, 4, 4, 4);\necho search($lst) . PHP_EOL;\n\n$lst = array(5, 5, 4, 4, 4);\n\
    echo search($lst) . PHP_EOL;", "    $result = -1;\n    foreach (array_count_values($lst)\
    \ as $value => $freq) {\n        if ($value <= $freq) {\n            $result =\
    \ max($result, $value);\n        }\n    }\n    return $result;\n}\n", "    $len\
    \ = count($lst);\n    for ($i = 0; $i < $len; $i++) {\n        $count = 0;\n \
    \       for ($j = 0; $j < $len; $j++) {\n            if ($lst[$i] == $lst[$j])\
    \ {\n                $count++;\n            }\n        }\n        if ($count >=\
    \ $lst[$i]) {\n            return $lst[$i];\n        }\n    }\n    return -1;\n\
    }", "  $result = -1;\n  $freq = array_count_values($lst);\n  for ($i = 0; $i <\
    \ count($lst); $i++) {\n    if ($freq[$lst[$i]] >= $lst[$i]) {\n      $result\
    \ = $lst[$i];\n    }\n  }\n  return $result;\n}", "\t$counts = array_count_values($lst);\n\
    \t$max = max($lst);\n\tfor ($i = $max; $i > 0; $i--) {\n\t\tif ($counts[$i] >=\
    \ $i) {\n\t\t\treturn $i;\n\t\t}\n\t}\n\treturn -1;\n}\n\nprint_r(search(array(4,\
    \ 1, 2, 2, 3, 1)));\nprint_r(search(array(1, 2, 2, 3, 3, 3, 4, 4, 4)));\nprint_r(search(array(5,\
    \ 5, 4, 4, 4)));\n", "    $lstFreq = array_count_values($lst);\n    // Sort array\
    \ by descending frequency\n    arsort($lstFreq);\n    // Loop the array and find\
    \ the first valid answer\n    foreach ($lstFreq as $value => $freq) {\n      \
    \  if ($value == $freq) {\n            return $value;\n        }\n    }\n    return\
    \ -1;\n}", "    $freq = array_count_values($lst);\n    $maxFreq = max($freq);\n\
    \    $maxNum = array_search($maxFreq, $freq);\n    foreach ($freq as $num => $numFreq)\
    \ {\n        if ($numFreq >= $num && $numFreq >= $maxNum) {\n            $maxNum\
    \ = $num;\n        }\n    }\n    return $maxNum;\n}", "    $maximum = max($lst);\n\
    \    $counts = array_count_values($lst);\n    for ($i = $maximum; $i > 0; $i--)\
    \ {\n        if (array_key_exists($i, $counts) && $counts[$i] >= $i) {\n     \
    \       return $i;\n        }\n    }\n    return -1;\n}\n\n$a = array(4, 1, 2,\
    \ 2, 3, 1);\n$b = array(1, 2, 2, 3, 3, 3, 4, 4, 4);\n$c = array(5, 5, 4, 4, 4);\n\
    print_r(search($a));\nprint_r(search($b));\nprint_r(search($c));", "    foreach\
    \ ($lst as $key => $value) {\n        if (count(array_keys($lst, $value)) < $value)\
    \ {\n            return $value;\n        }\n    }\n    return -1;\n}", "    $arr\
    \ = array_count_values($lst);\n    foreach($arr as $key => $val) {\n        if($key\
    \ <= $val) {\n            return $key;\n        }\n    }\n    return -1;\n}\n\
    print_r(search(array(4, 1, 2, 2, 3, 1)));\necho \"\\n\";\nprint_r(search(array(1,\
    \ 2, 2, 3, 3, 3, 4, 4, 4)));\necho \"\\n\";\nprint_r(search(array(5, 5, 4, 4,\
    \ 4)));\necho \"\\n\";", "    $dict = array();\n    foreach ($lst as $item) {\n\
    \        if (array_key_exists($item, $dict)) {\n            $dict[$item]++;\n\
    \        } else {\n            $dict[$item] = 1;\n        }\n    }\n    $max =\
    \ -1;\n    foreach ($dict as $key => $value) {\n        if ($key == $value) {\n\
    \            if ($key > $max) {\n                $max = $key;\n            }\n\
    \        }\n    }\n    return $max;\n}\n", "    $result = -1;\n    $freqMap =\
    \ [];\n    foreach ($lst as $num) {\n        if (!array_key_exists($num, $freqMap))\
    \ {\n            $freqMap[$num] = 1;\n        } else {\n            $freqMap[$num]++;\n\
    \        }\n    }\n    foreach ($freqMap as $key => $value) {\n        if ($key\
    \ == $value && $key > $result) {\n            $result = $key;\n        }\n   \
    \ }\n    return $result;\n}", "    $maxFreq = 0;\n    $result = -1;\n    $counts\
    \ = array_count_values($lst);\n    foreach ($counts as $val => $freq) {\n    \
    \    if ($val > $freq && $freq >= $maxFreq) {\n            $maxFreq = $freq;\n\
    \            $result = $val;\n        }\n    }\n    return $result;\n}", "\t$count\
    \ = array_count_values($lst);\n\tarsort($count);\n\t$greatest = array_shift($count);\n\
    \tif($greatest >= array_shift(array_keys($count))) {\n\t\treturn $greatest;\n\t\
    } else {\n\t\treturn -1;\n\t}\n}\n\necho search(array(4, 1, 2, 2, 3, 1));\necho\
    \ \"<br>\";\necho search(array(1, 2, 2, 3, 3, 3, 4, 4, 4));\necho \"<br>\";\n\
    echo search(array(5, 5, 4, 4, 4));", "    $counts = array_count_values($lst);\n\
    \    $max = max($lst);\n    for ($i = $max; $i > 0; $i--) {\n        if ($counts[$i]\
    \ >= $i) {\n            return $i;\n        }\n    }\n    return -1;\n}", "  \
    \  $d = [];\n    foreach ($lst as $i) {\n        if (!isset($d[$i])) {\n     \
    \       $d[$i] = 0;\n        }\n        $d[$i]++;\n    }\n    $res = -1;\n   \
    \ foreach ($d as $k => $v) {\n        if ($k <= $v) {\n            $res = max($res,\
    \ $k);\n        }\n    }\n    return $res;\n}\n", "  //Write your code here\n}",
  "\t$maxInt = -1;\n\t$intFreq = 0;\n\tforeach ($lst as $x) {\n\t\tif($intFreq < $x){\n\
    \t\t\t$maxInt = $x;\n\t\t\t$intFreq = 0;\n\t\t}\n\t\tif($x == $maxInt){\n\t\t\t\
    $intFreq++;\n\t\t}\n\t}\n\tif($intFreq < $maxInt){\n\t\t$maxInt = -1;\n\t}\n\t\
    return $maxInt;\n}", "    $counts = array_count_values($lst);\n    $highest =\
    \ 0;\n    foreach ($counts as $key => $value) {\n        if($key > $value && $key\
    \ > $highest) {\n            $highest = $key;\n        }\n    }\n    return $highest\
    \ === 0 ? -1 : $highest;\n}\n\necho search([4, 1, 2, 2, 3, 1]) . \"<br>\";\necho\
    \ search([1, 2, 2, 3, 3, 3, 4, 4, 4]) . \"<br>\";\necho search([5, 5, 4, 4, 4])\
    \ . \"<br>\";", "\t$freq = array_count_values($lst);\n\t// sort($freq);\n\tarsort($freq);\n\
    \t$max = max($freq);\n\tforeach ($freq as $k => $v) {\n\t\tif ($k >= $v) {\n\t\
    \t\treturn $k;\n\t\t} else {\n\t\t\tcontinue;\n\t\t}\n\t}\n\treturn -1;\n}\n\n\
    $array = array(4, 1, 2, 2, 3, 1);\necho search($array);\n$array = array(1, 2,\
    \ 2, 3, 3, 3, 4, 4, 4);\necho search($array);\n$array = array(5, 5, 4, 4, 4);\n\
    echo search($array);", "  // from top to bottom:\n  //  1. filter out all numbers\
    \ less than or equal to 0\n  //  2. filter out all numbers which occur less times\
    \ than the number itself\n  //  3. return the largest number left\n  // If the\
    \ resulting array is empty, return -1\n  if (empty($lst)) return -1;\n  $r = -1;\n\
    \  $t = array_filter($lst, function($n) { return $n > 0; });\n  foreach($t as\
    \ $n) {\n    $r = max($r, $n);\n    if (array_filter($t, function($x) use ($n)\
    \ { return $x === $n; }) < $n)\n      $r = -1;\n  }\n  return $r;\n}\n", "\tif\
    \ (count($lst) == 0) {\n\t\treturn -1;\n\t}\n\n\t$dict = array();\n\tforeach ($lst\
    \ as $item) {\n\t\tif (!isset($dict[$item])) {\n\t\t\t$dict[$item] = 1;\n\t\t\
    } else {\n\t\t\t$dict[$item]++;\n\t\t}\n\t}\n\n\tfor ($i = count($lst); $i > 0;\
    \ $i--) {\n\t\tif (isset($dict[$i]) && $dict[$i] >= $i) {\n\t\t\treturn $i;\n\t\
    \t}\n\t}\n\n\treturn -1;\n}\n", "    $i = 1;\n    $result = -1;\n    $keys = array_keys($lst);\n\
    \    $vals = array_values($lst);\n    while ($i < count($lst)) {\n        if ($i\
    \ == 1 && $vals[0] == $vals[1]) {\n            $result = $vals[0];\n        }\n\
    \        if ($vals[$i] == $vals[$i - 1] && $vals[$i] >= $i) {\n            $result\
    \ = $vals[$i];\n        }\n        $i++;\n    }\n    return $result;\n}\nprint_r(search(array(4,\
    \ 1, 2, 2, 3, 1)));\necho \"<br>\";\nprint_r(search(array(1, 2, 2, 3, 3, 3, 4,\
    \ 4, 4)));\necho \"<br>\";\nprint_r(search(array(5, 5, 4, 4, 4)));", "    rsort($lst);\n\
    \    $count = count($lst);\n    if ($count === 0) return -1;\n    $index = 0;\n\
    \    $i = 0;\n    while ($index <= $count - 1) {\n        $i = $lst[$index];\n\
    \        $temp = $lst[$index];\n        while ($index <= $count - 1 && $lst[$index]\
    \ === $temp) {\n            $index++;\n        }\n        if ($index - 1 >= $i)\
    \ {\n            return $i;\n        }\n    }\n    return -1;\n}\n", "  if (count($lst)\
    \ == 0) return -1;\n  $counts = array_count_values($lst);\n  arsort($counts);\n\
    \  foreach ($counts as $key => $value) {\n    if ($key <= $value) {\n      return\
    \ $key;\n    }\n  }\n  return -1;\n}", "    $newlst = array_count_values($lst);\n\
    \    $max = max($newlst);\n    $result = -1;\n    foreach ($newlst as $key =>\
    \ $value) {\n        if ($value <= $key) {\n            $result = $key;\n    \
    \    }\n    }\n    return $result;\n}\necho(search(array(4, 1, 2, 2, 3, 1)));\n\
    echo(search(array(1, 2, 2, 3, 3, 3, 4, 4, 4)));\necho(search(array(5, 5, 4, 4,\
    \ 4)));", "    $list = array_count_values($lst);\n    $big = -1;\n    foreach\
    \ ($list as $key => $val) {\n        if ($key > $val) {\n            continue;\n\
    \        }\n        if ($key <= $val && $key > $big) {\n            $big = $key;\n\
    \        }\n    }\n    return $big;\n}", "    $cnt = array_count_values($lst);\n\
    \    $max = max($lst);\n    for ($i = $max; $i > 0; $i--) {\n        if (isset($cnt[$i])\
    \ && $cnt[$i] >= $i) {\n            return $i;\n        }\n    }\n    return -1;\n\
    }\n\nprint_r(search([4, 1, 2, 2, 3, 1])); // 2\nprint_r(search([1, 2, 2, 3, 3,\
    \ 3, 4, 4, 4])); // 3\nprint_r(search([5, 5, 4, 4, 4])); // -1", "    $count =\
    \ array_count_values($lst);\n    $search = array_intersect_key($count, array_flip($lst));\n\
    \    $result = array_filter($search, function($v, $k) {\n        return $v >=\
    \ $k;\n    }, ARRAY_FILTER_USE_BOTH);\n    return count($result) ? max($result)\
    \ : -1;\n}\n\necho search([4, 1, 2, 2, 3, 1]);\necho \"\\n\";\necho search([1,\
    \ 2, 2, 3, 3, 3, 4, 4, 4]);\necho \"\\n\";\necho search([5, 5, 4, 4, 4]);\necho\
    \ \"\\n\";", "    foreach ($lst as $value) {\n        $temp[$value]++;\n    }\n\
    \    foreach ($temp as $k => $v) {\n        if ($k <= $v) {\n            return\
    \ $k;\n        }\n    }\n    return -1;\n}\necho search(array(4, 1, 2, 2, 3, 1))\
    \ . \"\\n\";\necho search(array(1, 2, 2, 3, 3, 3, 4, 4, 4)) . \"\\n\";\necho search(array(5,\
    \ 5, 4, 4, 4)) . \"\\n\";", "  // sort the list\n  sort($lst);\n  $total = count($lst);\n\
    \  $max_number = $lst[$total - 1];\n  for ($i = $max_number; $i > 0; $i--) {\n\
    \    // get the number of specific number\n    $repetitions = array_count_values($lst)[$i];\n\
    \    if ($repetitions >= $i) {\n      return $i;\n    }\n  }\n  return -1;\n}",
  "    $val = -1;\n    $val_freq = 0;\n    $freq = array_count_values($lst);\n   \
    \ foreach ($freq as $key => $value) {\n        if ($key > $val_freq && $value\
    \ >= $key) {\n            $val = $key;\n            $val_freq = $value;\n    \
    \    }\n    }\n    return $val;\n}", "    if (empty($lst)) return -1;\n    $max\
    \ = 0;\n    foreach ($lst as $v) {\n        if ($v > $max) $max = $v;\n    }\n\
    \    $ret = [];\n    foreach ($lst as $v) {\n        if (!array_key_exists($v,\
    \ $ret)) $ret[$v] = 0;\n        $ret[$v] += 1;\n    }\n    for ($i = 1; $i <=\
    \ $max; $i++) {\n        if (array_key_exists($i, $ret) && $ret[$i] >= $i) {\n\
    \            return $i;\n        }\n    }\n    return -1;\n}\n$lst = array(4,\
    \ 1, 2, 2, 3, 1);\necho search($lst);", "    // list to array \n    $arr = [...$lst];\n\
    \    // counting the frequency \n    $count = array_count_values($arr);\n    //\
    \ finding the max integer in array\n    $max_value = max($arr);\n    // finding\
    \ the max freq in array\n    $max_count = max($count);\n    // if the max freq\
    \ is equal to the max value, return the max value;\n    if ($max_count === $max_value)\
    \ {\n        return $max_value;\n    } else {\n        return -1;\n    }\n}",
  "    \n    $c=count($lst);\n    for($i=0;$i<$c;$i++){\n        $count=0;\n     \
    \   for($j=0;$j<$c;$j++){\n            if($lst[$i]==$lst[$j]){\n             \
    \   $count++;\n            }\n        }\n        if($count>=$lst[$i]){\n     \
    \       return $lst[$i];\n        }\n    }\n    return -1;\n}\n", "    $counter\
    \ = [];\n    foreach ($lst as $v) {\n        if (!array_key_exists($v, $counter))\
    \ {\n            $counter[$v] = 0;\n        }\n        $counter[$v]++;\n    }\n\
    \    krsort($counter);\n    foreach ($counter as $k => $v) {\n        if ($k <=\
    \ $v) {\n            return $k;\n        }\n    }\n    return -1;\n}\n", "  $ans\
    \ = [];\n  foreach ($lst as $num) {\n    if (isset($ans[$num])) {\n      $ans[$num]++;\n\
    \    } else {\n      $ans[$num] = 1;\n    }\n  }\n  krsort($ans);\n  foreach ($ans\
    \ as $num => $freq) {\n    if ($num <= $freq) {\n      return $num;\n    }\n \
    \ }\n  return -1;\n}\n", "    $counts = array_count_values($lst);\n    $max_val\
    \ = max($lst);\n    for ($i = $max_val; $i > 0; $i--) {\n        if (array_key_exists($i,\
    \ $counts) && $counts[$i] >= $i) {\n            return $i;\n        }\n    }\n\
    \    return -1;\n}\n\n$a = array(4, 1, 2, 2, 3, 1);\n$b = array(1, 2, 2, 3, 3,\
    \ 3, 4, 4, 4);\n$c = array(5, 5, 4, 4, 4);\necho search($a) . \"\\n\";\necho search($b)\
    \ . \"\\n\";\necho search($c) . \"\\n\";", "    $values = array_count_values($lst);\n\
    \    $max = -1;\n    foreach ($values as $key => $value) {\n        if ($key <=\
    \ $value) {\n            $max = max($max, $key);\n        }\n    }\n    return\
    \ $max;\n}\n", "    $counts = array_count_values($lst);\n    $freq = array_unique($lst);\n\
    \    $res = array_filter($freq, function($k) use ($counts) {\n        return $counts[$k]\
    \ >= $k;\n    });\n    return count($res) ? max($res) : -1;\n}", "    // Write\
    \ your code here\n    // To print results to the standard output you can use print\n\
    \    // Example: print \"Hello world!\";\n}\n", "\t$p_val = null;\n\t$p_frq =\
    \ null;\n\t$max_val = 0;\n\t$max_frq = 0;\n\tforeach ($lst as $val) {\n\t\tif\
    \ ($val != $p_val) {\n\t\t\tif ($p_frq >= $p_val && $p_val > $max_val) {\n\t\t\
    \t\t$max_val = $p_val;\n\t\t\t\t$max_frq = $p_frq;\n\t\t\t}\n\t\t\t$p_val = $val;\n\
    \t\t\t$p_frq = 1;\n\t\t} else {\n\t\t\t$p_frq++;\n\t\t}\n\t}\n\tif ($p_frq >=\
    \ $p_val && $p_val > $max_val) {\n\t\t$max_val = $p_val;\n\t\t$max_frq = $p_frq;\n\
    \t}\n\treturn $max_val;\n}\n", "    $count = array_count_values($lst);\n    foreach\
    \ ($count as $key => $val) {\n        if ($key >= $val) return $key;\n    }\n\
    \    return -1;\n}\n", "    $cnt = array_count_values($lst);\n    $res = -1;\n\
    \    foreach ($cnt as $key => $val) {\n        if ($key == $val) $res = $key;\n\
    \    }\n    return $res;\n}\n\nprint search(array(4, 1, 2, 2, 3, 1));\nprint \"\
    \\n\";\nprint search(array(1, 2, 2, 3, 3, 3, 4, 4, 4));\nprint \"\\n\";\nprint\
    \ search(array(5, 5, 4, 4, 4));\nprint \"\\n\";", "  // Your code here\n}\n",
  "    $s = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        $v = $lst[$i];\n\
    \        if ($v > $s) {\n            $s = $v;\n        }\n    }\n    for ($i =\
    \ $s; $i > 0; $i--) {\n        $n = 0;\n        for ($j = 0; $j < count($lst);\
    \ $j++) {\n            if ($lst[$j] == $i) {\n                $n++;\n        \
    \    }\n        }\n        if ($n >= $i) {\n            return $i;\n        }\n\
    \    }\n    return -1;\n}\necho search(array(5, 5, 4, 4, 4)) . \"\\n\";", "  \
    \  if (empty($lst)) {\n        return -1;\n    }\n    // First build a frequency\
    \ table of each number\n    $freq = array();\n    foreach ($lst as $item) {\n\
    \        if (!isset($freq[$item])) {\n            $freq[$item] = 0;\n        }\n\
    \        $freq[$item] += 1;\n    }\n    // Now go through each number from largest\
    \ to smallest, finding the first one that occurs enough times\n    for ($i = max($lst);\
    \ $i > 0; $i--) {\n        if (isset($freq[$i]) && $freq[$i] >= $i) {\n      \
    \      return $i;\n        }\n    }\n    return -1;\n}", "    $cnt = array_count_values($lst);\n\
    \    foreach($cnt as $k => $v) {\n        if ($k >= $v) {\n            continue;\n\
    \        }\n        return $k;\n    }\n    return -1;\n}\nprint_r(search([4, 1,\
    \ 2, 2, 3, 1]));\nprint_r(search([1, 2, 2, 3, 3, 3, 4, 4, 4]));\nprint_r(search([5,\
    \ 5, 4, 4, 4]));\n", "    $frequency = array_count_values($lst);\n    $result\
    \ = -1;\n    foreach ($frequency as $key => $value) {\n        if ($key <= $value\
    \ && $key > $result) {\n            $result = $key;\n        }\n    }\n    return\
    \ $result;\n}\n", "    if (empty($lst)) return -1;\n    $frequency = array_count_values($lst);\n\
    \    for ($i = count($lst); $i > 0; $i--) {\n        if (array_key_exists($i,\
    \ $frequency) && $frequency[$i] >= $i) {\n            return $i;\n        }\n\
    \    }\n    return -1;\n}\n", "    $counts = array_count_values($lst);\n    foreach($counts\
    \ as $num => $count) {\n        if ($num <= $count) return $num;\n    }\n    return\
    \ -1;\n}", "    $count = array_count_values($lst);\n    $max = 0;\n    foreach\
    \ ($count as $key => $val) {\n        if ($key == $val && $key > $max) {\n   \
    \         $max = $key;\n        }\n    }\n    return $max > 0 ? $max : -1;\n}\n",
  "    $map = array();\n    $max = -1;\n    foreach ($lst as $val) {\n        if (!array_key_exists($val,\
    \ $map)) {\n            $map[$val] = 1;\n        } else {\n            $map[$val]++;\n\
    \        }\n        if ($map[$val] >= $val) {\n            $max = max($max, $val);\n\
    \        }\n    }\n    return $max;\n}\n\n$res = search(array(4, 1, 2, 2, 3, 1));\n\
    echo $res . \"\\n\";\n\n$res = search(array(1, 2, 2, 3, 3, 3, 4, 4, 4));\necho\
    \ $res . \"\\n\";\n\n$res = search(array(5, 5, 4, 4, 4));\necho $res . \"\\n\"\
    ;\n\n$res = search(array(1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6));\necho\
    \ $res . \"\\n\";\n\n$res = search(array(1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6,\
    \ 6, 6, 6, 7, 7, 7, 7, 7));\necho $res . \"\\n\";\n\n$res = search(array(1, 2,\
    \ 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8));\n\
    echo $res . \"\\n\";\n\n$res = search(array(1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5,\
    \ 6, 6, 6, 6, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9));\necho $res\
    \ . \"\\n\";\n\n$res = search(array(1, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6,\
    \ 6, 6, 7, 7,"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
