name: HumanEval_136_largest_smallest_integers
language: php
prompt: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
  // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
  \ in an array.\n// If there is no negative or positive integers, return them as\
  \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
  // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
  // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
  \ {\n"
tests: "function candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
  \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
  \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7,\
  \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3,\
  \ 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\");\
  \ }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1,\
  \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
  \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\");\
  \ }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
  \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $count = count($lst);\n    if ($count === 0) {\n        return\
    \ array(null, null);\n    }\n    $a = null;\n    $b = null;\n    for ($i = 0;\
    \ $i < $count; $i++) {\n        $value = $lst[$i];\n        if ($value < 0) {\n\
    \            if (is_null($a) || $value > $a) {\n                $a = $value;\n\
    \            }\n        } elseif ($value > 0) {\n            if (is_null($b) ||\
    \ $value < $b) {\n                $b = $value;\n            }\n        }\n   \
    \ }\n    return array($a, $b);\n}\n", "    $arr = [null, null];\n    foreach ($lst\
    \ as $el) {\n        if ($el < 0) {\n            if ($arr[0] == null || $el >\
    \ $arr[0]) {\n                $arr[0] = $el;\n            }\n        } else if\
    \ ($el > 0) {\n            if ($arr[1] == null || $el < $arr[1]) {\n         \
    \       $arr[1] = $el;\n            }\n        }\n    }\n    return $arr;\n}\n\
    \nprint_r(largest_smallest_integers(array(2, 4, 1, 3, 5, 7)));\nprint_r(largest_smallest_integers(array()));\n\
    print_r(largest_smallest_integers(array(0)));\n", "    $largest = null;\n    $smallest\
    \ = null;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] <\
    \ 0) {\n            if ($largest === null || $lst[$i] > $largest) {\n        \
    \        $largest = $lst[$i];\n            }\n        } else {\n            if\
    \ ($smallest === null || $lst[$i] < $smallest) {\n                $smallest =\
    \ $lst[$i];\n            }\n        }\n    }\n    return array($largest, $smallest);\n\
    }", "  if (empty($lst)) {\n    return array(null, null);\n  }\n  $maxNegative\
    \ = null;\n  $minPositive = null;\n  foreach ($lst as $item) {\n    if ($item\
    \ < 0) {\n      if ($maxNegative === null || $item > $maxNegative) {\n       \
    \ $maxNegative = $item;\n      }\n    } elseif ($item > 0) {\n      if ($minPositive\
    \ === null || $item < $minPositive) {\n        $minPositive = $item;\n      }\n\
    \    }\n  }\n  return array($maxNegative, $minPositive);\n}\n", "    $a = null;\n\
    \    $b = null;\n    foreach ($lst as $item) {\n        if ($item < 0 && (is_null($a)\
    \ || $item > $a)) {\n            $a = $item;\n        }\n        if ($item > 0\
    \ && (is_null($b) || $item < $b)) {\n            $b = $item;\n        }\n    }\n\
    \    return array($a, $b);\n}\n", "    // YOUR CODE HERE\n    $max_negative =\
    \ null;\n    $min_positive = null;\n    foreach ($lst as $elem) {\n        if\
    \ ($elem > 0) {\n            if (is_null($min_positive) || $elem < $min_positive)\
    \ {\n                $min_positive = $elem;\n            }\n        } elseif ($elem\
    \ < 0) {\n            if (is_null($max_negative) || $elem > $max_negative) {\n\
    \                $max_negative = $elem;\n            }\n        }\n    }\n   \
    \ return array($max_negative, $min_positive);\n}", "    $max_negative = null;\n\
    \    $min_positive = null;\n    foreach ($lst as $value) {\n        if ($value\
    \ < 0 && ($max_negative === null || $value > $max_negative)) {\n            $max_negative\
    \ = $value;\n        }\n        if ($value > 0 && ($min_positive === null || $value\
    \ < $min_positive)) {\n            $min_positive = $value;\n        }\n    }\n\
    \    return array($max_negative, $min_positive);\n}\n", "  if(empty($lst)) {\n\
    \    return array(null, null);\n  }\n  $positives = array();\n  $negatives = array();\n\
    \  foreach($lst as $v) {\n    if($v < 0) {\n      $negatives[] = $v;\n    } else\
    \ if($v > 0) {\n      $positives[] = $v;\n    }\n  }\n  $smallest = min($positives);\n\
    \  $largest = max($negatives);\n  return array($largest, $smallest);\n}\n", " \
    \   if(count($lst) > 0) {\n        $max_int = 0;\n        $min_int = 0;\n    \
    \    foreach($lst as $val) {\n            if($val > 0) {\n                if($min_int\
    \ == 0) {\n                    $min_int = $val;\n                } else if($val\
    \ < $min_int) {\n                    $min_int = $val;\n                }\n   \
    \         } else if($val < 0) {\n                if($max_int == 0) {\n       \
    \             $max_int = $val;\n                } else if($val > $max_int) {\n\
    \                    $max_int = $val;\n                }\n            }\n    \
    \    }\n        return array($max_int, $min_int);\n    } else {\n        return\
    \ array(null, null);\n    }\n}", "    $max = NULL;\n    $min = NULL;\n    foreach\
    \ ($lst as $item) {\n        if ($item >= 0 && ($min == NULL || $item < $min))\
    \ {\n            $min = $item;\n        }\n        if ($item < 0 && ($max == NULL\
    \ || $item > $max)) {\n            $max = $item;\n        }\n    }\n    return\
    \ array($max, $min);\n}\n", "    $a = $b = null;\n    $neg = $pos = [];\n    foreach\
    \ ($lst as $n) {\n        if ($n < 0) {\n            $neg[] = $n;\n        } elseif\
    \ ($n > 0) {\n            $pos[] = $n;\n        }\n    }\n    if (count($neg)\
    \ > 0) {\n        $a = max($neg);\n    }\n    if (count($pos) > 0) {\n       \
    \ $b = min($pos);\n    }\n    return [$a, $b];\n}", "    $smallest_positive =\
    \ null;\n    $largest_negative = null;\n    for ($i = 0; $i < count($lst); $i++)\
    \ {\n        if ($lst[$i] < 0) {\n            if ($largest_negative === null ||\
    \ $lst[$i] > $largest_negative) {\n                $largest_negative = $lst[$i];\n\
    \            }\n        } else if ($lst[$i] > 0) {\n            if ($smallest_positive\
    \ === null || $lst[$i] < $smallest_positive) {\n                $smallest_positive\
    \ = $lst[$i];\n            }\n        }\n    }\n    return array($largest_negative,\
    \ $smallest_positive);\n}\necho '>>> largest_smallest_integers(array(2, 4, 1,\
    \ 3, 5, 7))' . \"\\n\";\nvar_dump(largest_smallest_integers(array(2, 4, 1, 3,\
    \ 5, 7)));\necho '>>> largest_smallest_integers(array())' . \"\\n\";\nvar_dump(largest_smallest_integers(array()));\n\
    echo '>>> largest_smallest_integers(array(0))' . \"\\n\";\nvar_dump(largest_smallest_integers(array(0)));",
  "  $a = null;\n  $b = null;\n  foreach ($lst as $val) {\n    if ($val > 0) {\n \
    \     if ($b === null || $val < $b) {\n        $b = $val;\n      }\n    } elseif\
    \ ($val < 0) {\n      if ($a === null || $val > $a) {\n        $a = $val;\n  \
    \    }\n    }\n  }\n  return array($a, $b);\n}\n", "  $sorted_list = array_unique($lst);\n\
    \  $is_neg_flag = false;\n  $is_pos_flag = false;\n  for ($i = 0; $i < count($sorted_list);\
    \ $i++) {\n    if ($sorted_list[$i] > 0) {\n      $is_pos_flag = true;\n    }\n\
    \    if ($sorted_list[$i] < 0) {\n      $is_neg_flag = true;\n    }\n  }\n  if\
    \ ($is_neg_flag && $is_pos_flag) {\n    $max_neg = -INF;\n    $min_pos = INF;\n\
    \    for ($i = 0; $i < count($sorted_list); $i++) {\n      if ($sorted_list[$i]\
    \ > 0) {\n        if ($sorted_list[$i] < $min_pos) {\n          $min_pos = $sorted_list[$i];\n\
    \        }\n      }\n      if ($sorted_list[$i] < 0) {\n        if ($sorted_list[$i]\
    \ > $max_neg) {\n          $max_neg = $sorted_list[$i];\n        }\n      }\n\
    \    }\n    return array($max_neg, $min_pos);\n  } else {\n    return array(null,\
    \ null);\n  }\n}\n$arr = array(-1, 2, 4, -3, 5, 7);\nprint_r(largest_smallest_integers($arr));",
  "    $neg_max = $pos_min = null;\n    foreach ($lst as $num) {\n        if ($num\
    \ > 0) {\n            if ($pos_min === null) {\n                $pos_min = $num;\n\
    \            } else {\n                $pos_min = min($pos_min, $num);\n     \
    \       }\n        } else if ($num < 0) {\n            if ($neg_max === null)\
    \ {\n                $neg_max = $num;\n            } else {\n                $neg_max\
    \ = max($neg_max, $num);\n            }\n        }\n    }\n    return array($neg_max,\
    \ $pos_min);\n}\n", "    $neg = NULL;\n    $pos = NULL;\n    foreach ($lst as\
    \ $num) {\n        if ($num < 0 && ($neg === NULL || $num > $neg)) {\n       \
    \     $neg = $num;\n        }\n        if ($num > 0 && ($pos === NULL || $num\
    \ < $pos)) {\n            $pos = $num;\n        }\n    }\n    return array($neg,\
    \ $pos);\n}\necho \"========== Start ==========\\n\";\necho \"Function name: largest_smallest_integers\\\
    n\";\necho \"Input:\\n\";\necho \"array(2, 4, 1, 3, 5, 7)\\n\";\n$lst = array(2,\
    \ 4, 1, 3, 5, 7);\necho \"Output:\\n\";\nprint_r(largest_smallest_integers($lst));\n\
    echo \"Input:\\n\";\necho \"array()\\n\";\n$lst = array();\necho \"Output:\\n\"\
    ;\nprint_r(largest_smallest_integers($lst));\necho \"Input:\\n\";\necho \"array(0)\\\
    n\";\n$lst = array(0);\necho \"Output:\\n\";\nprint_r(largest_smallest_integers($lst));\n\
    echo \"========== Finish ==========\\n\";\necho \"\\n\";\n", "    $a = $b = null;\n\
    \    foreach ($lst as $item) {\n        if ($item > 0) {\n            if ($b ===\
    \ null || $item < $b) {\n                $b = $item;\n            }\n        }\
    \ elseif ($item < 0) {\n            if ($a === null || $item > $a) {\n       \
    \         $a = $item;\n            }\n        }\n    }\n    return array($a, $b);\n\
    }", "  $smallest = null;\n  $largest = null;\n  $i = 0;\n  while ($i < count($lst))\
    \ {\n    if ($lst[$i] < 0) {\n      if ($largest == null || $lst[$i] > $largest)\
    \ {\n        $largest = $lst[$i];\n      }\n    } else if ($lst[$i] > 0) {\n \
    \     if ($smallest == null || $lst[$i] < $smallest) {\n        $smallest = $lst[$i];\n\
    \      }\n    }\n    $i++;\n  }\n  return array($largest, $smallest);\n}\n\nvar_dump(largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7)));\nvar_dump(largest_smallest_integers(array()));\nvar_dump(largest_smallest_integers(array(0)));\n\
    var_dump(largest_smallest_integers(array(-1, -2, -3, -4, -5)));\nvar_dump(largest_smallest_integers(array(1,\
    \ 2, 3, 4, 5)));\nvar_dump(largest_smallest_integers(array(-1, -2, -3, 4, 5)));",
  "\t$max = NULL;\n\t$min = NULL;\n\tforeach ($lst as $num) {\n\t\tif ($num > 0 &&\
    \ ($min == NULL || $num < $min)) {\n\t\t\t$min = $num;\n\t\t}\n\t\tif ($num <\
    \ 0 && ($max == NULL || $num > $max)) {\n\t\t\t$max = $num;\n\t\t}\n\t}\n\treturn\
    \ array($max, $min);\n}\n", "    // write your code here\n    $c=-1;\n    $d=1;\n\
    \    $a=NULL;\n    $b=NULL;\n    foreach ($lst as $key => $value) {\n        if($value<0\
    \ && $value>$c){\n            $c=$value;\n        }\n        if($value>0 && $value<$d){\n\
    \            $d=$value;\n        }\n    }\n    if($c!=-1){\n        $a=$c;\n \
    \   }\n    if($d!=1){\n        $b=$d;\n    }\n    $result=array($a,$b);\n    return\
    \ $result;\n}", "  // Your code here\n}\n", "  // Your code here\n}", "    //\
    \ YOUR CODE GOES HERE\n}\n", "    // Implement your solution here\n}\n", "\n}",
  "    $max = null;\n    $min = null;\n    foreach ($lst as $val) {\n        if ($val\
    \ < 0 && ($max === null || $val > $max)) {\n            $max = $val;\n       \
    \ }\n        if ($val > 0 && ($min === null || $val < $min)) {\n            $min\
    \ = $val;\n        }\n    }\n    return array($max, $min);\n}", "    $min = null;\n\
    \    $max = null;\n    foreach ($lst as $number) {\n        if ($number < 0) {\n\
    \            if ($max === null || $number > $max) {\n                $max = $number;\n\
    \            }\n        } else if ($number > 0) {\n            if ($min === null\
    \ || $number < $min) {\n                $min = $number;\n            }\n     \
    \   }\n    }\n    return array($max, $min);\n}", "  return array(null, null);\n\
    }\n", "\tif (empty($lst)) {\n\t\treturn array(null, null);\n\t}\n\t$positive =\
    \ array();\n\t$negative = array();\n\tforeach ($lst as $val) {\n\t\tif ($val >\
    \ 0) {\n\t\t\t$positive[] = $val;\n\t\t} else if ($val < 0) {\n\t\t\t$negative[]\
    \ = $val;\n\t\t}\n\t}\n\t$count_positive = count($positive);\n\t$count_negative\
    \ = count($negative);\n\tif ($count_positive == 0 && $count_negative == 0) {\n\
    \t\treturn array(null, null);\n\t}\n\tif ($count_positive == 0) {\n\t\treturn\
    \ array(min($negative), null);\n\t}\n\tif ($count_negative == 0) {\n\t\treturn\
    \ array(null, min($positive));\n\t}\n\treturn array(min($negative), min($positive));\n\
    }\n", "  $max = null;\n  $min = null;\n  foreach ($lst as $elem) {\n    if ($elem\
    \ > 0) {\n      if ($min === null || $elem < $min) {\n        $min = $elem;\n\
    \      }\n    } else if ($elem < 0) {\n      if ($max === null || $elem > $max)\
    \ {\n        $max = $elem;\n      }\n    }\n  }\n  return array($max, $min);\n\
    }\n", "\t$lst=array_filter($lst, function($value) {\n\t\treturn $value !== 0;\n\
    \t});\n\tif (!$lst) {\n\t\treturn array(null, null);\n\t}\n\t$positives=array_filter($lst,\
    \ function($value) {\n\t\treturn $value > 0;\n\t});\n\t$negatives=array_filter($lst,\
    \ function($value) {\n\t\treturn $value < 0;\n\t});\n\tsort($positives);\n\trsort($negatives);\n\
    \treturn array(current($negatives), current($positives));\n}", "\t$negatives =\
    \ array();\n\t$positives = array();\n\t\n\tfor ($i = 0; $i < count($lst); $i++)\
    \ {\n\t\tif ($lst[$i] < 0) {\n\t\t\tarray_push($negatives, $lst[$i]);\n\t\t} else\
    \ if ($lst[$i] > 0) {\n\t\t\tarray_push($positives, $lst[$i]);\n\t\t}\n\t}\n\t\
    if (count($negatives) == 0) {\n\t\t$largestNegative = null;\n\t} else {\n\t\t\
    $largestNegative = max($negatives);\n\t}\n\tif (count($positives) == 0) {\n\t\t\
    $smallestPositive = null;\n\t} else {\n\t\t$smallestPositive = min($positives);\n\
    \t}\n\t\n\treturn array($largestNegative, $smallestPositive);\n}\n", "  return\
    \ array(null, null);\n}\n", "    $arr = array();\n    $pos = array();\n    $neg\
    \ = array();\n    foreach ($lst as $value) {\n        if ($value < 0) {\n    \
    \        array_push($neg, $value);\n        } elseif ($value > 0) {\n        \
    \    array_push($pos, $value);\n        }\n    }\n    if (empty($neg)) {\n   \
    \     array_push($arr, null);\n    } else {\n        array_push($arr, max($neg));\n\
    \    }\n    if (empty($pos)) {\n        array_push($arr, null);\n    } else {\n\
    \        array_push($arr, min($pos));\n    }\n    return $arr;\n}\n", "  // TODO:\
    \ Write your code here\n  $maxNegative = null;\n  $minPositive = null;\n  foreach\
    \ ($lst as $value) {\n    if ($value < 0) {\n      if ($maxNegative === null ||\
    \ $value > $maxNegative) {\n        $maxNegative = $value;\n      }\n    } else\
    \ if ($value > 0) {\n      if ($minPositive === null || $value < $minPositive)\
    \ {\n        $minPositive = $value;\n      }\n    }\n  }\n  return array($maxNegative,\
    \ $minPositive);\n}\n", "  $a = $b = null;\n  foreach ($lst as $item) {\n    if\
    \ (is_int($item)) {\n      if ($item > 0) {\n        if ($b === null || $item\
    \ < $b) {\n          $b = $item;\n        }\n      } else {\n        if ($a ===\
    \ null || $item > $a) {\n          $a = $item;\n        }\n      }\n    }\n  }\n\
    \  return array($a, $b);\n}\n\n$result = largest_smallest_integers(array(2, 4,\
    \ 1, 3, 5, 7));\nassert(is_array($result));\nassert(count($result) === 2);\nassert($result[0]\
    \ === null);\nassert($result[1] === 1);\n\n$result = largest_smallest_integers(array());\n\
    assert(is_array($result));\nassert(count($result) === 2);\nassert($result[0] ===\
    \ null);\nassert($result[1] === null);\n\n$result = largest_smallest_integers(array(0));\n\
    assert(is_array($result));\nassert(count($result) === 2);\nassert($result[0] ===\
    \ null);\nassert($result[1] === null);\n\necho \"All tests passed!\\n\";", "\t\
    $max = -INF;\n\t$min = INF;\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\tif\
    \ ($lst[$i] < 0 && $lst[$i] > $max)\n\t\t\t$max = $lst[$i];\n\t\tif ($lst[$i]\
    \ > 0 && $lst[$i] < $min)\n\t\t\t$min = $lst[$i];\n\t}\n\tif ($max == -INF)\n\t\
    \t$max = null;\n\tif ($min == INF)\n\t\t$min = null;\n\treturn array($max, $min);\n\
    }\n", "  if (sizeof($lst) == 0) {\n    return array(null, null);\n  }\n\n  $largest\
    \ = null;\n  $smallest = null;\n\n  foreach ($lst as $v) {\n    if ($v < 0) {\n\
    \      if ($largest == null || $v > $largest) {\n        $largest = $v;\n    \
    \  }\n    } else if ($v > 0) {\n      if ($smallest == null || $v < $smallest)\
    \ {\n        $smallest = $v;\n      }\n    }\n  }\n\n  return array($largest,\
    \ $smallest);\n}\n", "\t$p = [];\n\t$n = [];\n\tforeach ($lst as $i) {\n\t\tif\
    \ ($i > 0) {\n\t\t\t$p[] = $i;\n\t\t} elseif ($i < 0) {\n\t\t\t$n[] = $i;\n\t\t\
    }\n\t}\n\treturn [count($n) ? max($n) : null, count($p) ? min($p) : null];\n}\n\
    echo '<pre>';\nvar_dump(largest_smallest_integers([2, 4, 1, 3, 5, 7]));\nvar_dump(largest_smallest_integers([]));\n\
    var_dump(largest_smallest_integers([0]));\necho '</pre>';", "    // write your\
    \ code here\n    $array_length = count($lst);\n    $largest_negative = null;\n\
    \    $smallest_positive = null;\n    $i = 0;\n    while ($i < $array_length) {\n\
    \        if ($lst[$i] < 0) {\n            if ($largest_negative === null || $lst[$i]\
    \ > $largest_negative) {\n                $largest_negative = $lst[$i];\n    \
    \        }\n        } else if ($lst[$i] > 0) {\n            if ($smallest_positive\
    \ === null || $lst[$i] < $smallest_positive) {\n                $smallest_positive\
    \ = $lst[$i];\n            }\n        }\n        $i++;\n    }\n    return array($largest_negative,\
    \ $smallest_positive);\n}\n\nprint_r(largest_smallest_integers(array(2, 4, 1,\
    \ 3, 5, 7)));\nprint_r(largest_smallest_integers(array()));\nprint_r(largest_smallest_integers(array(0)));",
  "  $smallest = null;\n  $largest = null;\n  foreach ($lst as $n) {\n    if ($n <\
    \ 0) {\n      if (is_null($largest) || $n > $largest) {\n        $largest = $n;\n\
    \      }\n    } else {\n      if (is_null($smallest) || $n < $smallest) {\n  \
    \      $smallest = $n;\n      }\n    }\n  }\n  return array($largest, $smallest);\n\
    }\n", "\treturn array(null,null);\n}\n\n$answer = largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7));\nvar_dump($answer);", "\n}\n", "  if(count($lst) == 0){\n \
    \   return array(null, null);\n  }\n  $pos = null;\n  $neg = null;\n  foreach($lst\
    \ as $val){\n    if($val > 0 && ($pos == null || $val < $pos)){\n      $pos =\
    \ $val;\n    }\n    if($val < 0 && ($neg == null || $val > $neg)){\n      $neg\
    \ = $val;\n    }\n  }\n  return array($neg, $pos);\n}\necho \"largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7)): <br>\";\nvar_dump(largest_smallest_integers(array(2, 4, 1,\
    \ 3, 5, 7)));\necho \"<br>\";\necho \"largest_smallest_integers(array()): <br>\"\
    ;\nvar_dump(largest_smallest_integers(array()));\necho \"<br>\";\necho \"largest_smallest_integers(array(0)):\
    \ <br>\";\nvar_dump(largest_smallest_integers(array(0)));", "  $a = null;\n  $b\
    \ = null;\n  for ($i = 0; $i < count($lst); $i++) {\n    if ($lst[$i] < 0) {\n\
    \      if ($a == null) {\n        $a = $lst[$i];\n      } else if ($lst[$i] >\
    \ $a) {\n        $a = $lst[$i];\n      }\n    } else if ($lst[$i] > 0) {\n   \
    \   if ($b == null) {\n        $b = $lst[$i];\n      } else if ($lst[$i] < $b)\
    \ {\n        $b = $lst[$i];\n      }\n    }\n  }\n  return array($a, $b);\n}\n\
    \necho implode(', ', largest_smallest_integers(array(2, 4, 1, 3, 5, 7)));\necho\
    \ \"\\n\";\necho implode(', ', largest_smallest_integers(array()));\necho \"\\\
    n\";\necho implode(', ', largest_smallest_integers(array(0)));\necho \"\\n\";\n\
    echo implode(', ', largest_smallest_integers(array(-4, -3, -2, -1, 1, 2, 3, 4)));\n\
    echo \"\\n\";\necho implode(', ', largest_smallest_integers(array(-10, -9, -8,\
    \ -7, -6, -5, -4, -3, -2, -1, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)));\necho \"\\n\"\
    ;\necho implode(', ', largest_smallest_integers(array(-1, -2, -3, -4, -5, -6,\
    \ -7, -8, -9, -10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10)));\necho \"\\n\";", "    $a\
    \ = $b = null;\n    foreach ($lst as $v) {\n        if ($v > 0) {\n          \
    \  if ($b === null || $v < $b) $b = $v;\n        } else if ($v < 0) {\n      \
    \      if ($a === null || $v > $a) $a = $v;\n        }\n    }\n    return array($a,\
    \ $b);\n}\necho \"<pre>\";\necho \"largest_smallest_integers array(2, 4, 1, 3,\
    \ 5, 7):\\n\";\nprint_r(largest_smallest_integers(array(2, 4, 1, 3, 5, 7)));\n\
    echo \"largest_smallest_integers array():\\n\";\nprint_r(largest_smallest_integers(array()));\n\
    echo \"largest_smallest_integers array(0):\\n\";\nprint_r(largest_smallest_integers(array(0)));\n\
    echo \"</pre>\";\n", "    $max = null;\n    $min = null;\n    foreach ($lst as\
    \ $item) {\n        if ($item > 0) {\n            if ($min === null || $item <\
    \ $min) {\n                $min = $item;\n            }\n        } else if ($item\
    \ < 0) {\n            if ($max === null || $item > $max) {\n                $max\
    \ = $item;\n            }\n        }\n    }\n    return array($max, $min);\n}\n\
    $lst = array(2, 4, 1, 3, 5, 7);\necho \"For lst = [2, 4, 1, 3, 5, 7]\\n\";\n$ret\
    \ = largest_smallest_integers($lst);\necho \"Return value:\";\necho json_encode($ret);\n\
    echo \"\\n\";\necho \"Expected value: [null, 1]\\n\";\necho \"\\n\";\n$lst = array();\n\
    echo \"For lst = []\\n\";\n$ret = largest_smallest_integers($lst);\necho \"Return\
    \ value:\";\necho json_encode($ret);\necho \"\\n\";\necho \"Expected value: [null,\
    \ null]\\n\";\necho \"\\n\";\n$lst = array(0);\necho \"For lst = [0]\\n\";\n$ret\
    \ = largest_smallest_integers($lst);\necho \"Return value:\";\necho json_encode($ret);\n\
    echo \"\\n\";\necho \"Expected value: [null, null]\\n\";\necho \"\\n\";\n$lst\
    \ = array(-2, -4, -1, -3, -5, -7);\necho \"For lst = [-2, -4, -1, -3, -5, -7]\\\
    n\";\n$ret = largest_smallest_integers($lst);\necho \"Return value:\";\necho json_encode($ret);\n\
    echo \"\\n\";\necho \"Expected value: [-1, null]\\n\";\necho \"\\n\";\n$lst =\
    \ array(-2, -4, 1, -3, -5, -7);\necho \"For lst = [-2, -4, 1,", "    $positive\
    \ = NULL;\n    $negative = NULL;\n    foreach ($lst as $num) {\n        if ($num\
    \ > 0) {\n            if ($positive == NULL) {\n                $positive = $num;\n\
    \            } else {\n                $positive = min($positive, $num);\n   \
    \         }\n        } else if ($num < 0) {\n            if ($negative == NULL)\
    \ {\n                $negative = $num;\n            } else {\n               \
    \ $negative = max($negative, $num);\n            }\n        }\n    }\n    return\
    \ array($negative, $positive);\n}", "  $max = null;\n  $min = null;\n  foreach\
    \ ($lst as $num) {\n    if ($num > 0) {\n      if ($min === null || $num < $min)\
    \ {\n        $min = $num;\n      }\n    } elseif ($num < 0) {\n      if ($max\
    \ === null || $num > $max) {\n        $max = $num;\n      }\n    }\n  }\n  return\
    \ array($max, $min);\n}\n", "  $negative_numbers = array();\n  $positive_numbers\
    \ = array();\n  foreach ($lst as $number) {\n    if ($number < 0) {\n      array_push($negative_numbers,\
    \ $number);\n    } else if ($number > 0) {\n      array_push($positive_numbers,\
    \ $number);\n    }\n  }\n  $a = null;\n  $b = null;\n  if (count($negative_numbers)\
    \ != 0) {\n    $a = max($negative_numbers);\n  }\n  if (count($positive_numbers)\
    \ != 0) {\n    $b = min($positive_numbers);\n  }\n  return array($a, $b);\n}\n",
  "    $positive = null;\n    $negative = null;\n    foreach ($lst as $num) {\n  \
    \      if ($num > 0) {\n            if ($positive == null || $num < $positive)\
    \ {\n                $positive = $num;\n            }\n        } else if ($num\
    \ < 0) {\n            if ($negative == null || $num > $negative) {\n         \
    \       $negative = $num;\n            }\n        }\n    }\n    return array($negative,\
    \ $positive);\n}", "    $smallest = null;\n    $largest = null;\n    foreach ($lst\
    \ as $number) {\n        if ($number > 0) {\n            if ($smallest == null\
    \ || $number < $smallest) {\n                $smallest = $number;\n          \
    \  }\n        } else if ($number < 0) {\n            if ($largest == null || $number\
    \ > $largest) {\n                $largest = $number;\n            }\n        }\n\
    \    }\n    return array($largest, $smallest);\n}", "  $positive_numbers = array();\n\
    \  $negative_numbers = array();\n  foreach ($lst as $number) {\n    if ($number\
    \ > 0) {\n      array_push($positive_numbers, $number);\n    } else if ($number\
    \ < 0) {\n      array_push($negative_numbers, $number);\n    }\n  }\n  if (empty($positive_numbers))\
    \ {\n    $smallest_positive = null;\n  } else {\n    $smallest_positive = min($positive_numbers);\n\
    \  }\n  if (empty($negative_numbers)) {\n    $largest_negative = null;\n  } else\
    \ {\n    $largest_negative = max($negative_numbers);\n  }\n  return array($largest_negative,\
    \ $smallest_positive);\n}\n", "  $result = array(null, null);\n  if (sizeof($lst)\
    \ == 0) {\n    return $result;\n  }\n  $min = 0;\n  $max = 0;\n  foreach ($lst\
    \ as $item) {\n    if ($item < 0) {\n      if ($item > $max) {\n        $max =\
    \ $item;\n      }\n    } else {\n      if ($item < $min) {\n        $min = $item;\n\
    \      }\n    }\n  }\n  $result[0] = $max;\n  $result[1] = $min;\n  return $result;\n\
    }", "\t$a = max($lst);\n\t$b = min($lst);\n\tif (count($lst) > 0 && $a < 0 &&\
    \ $b > 0) {\n\t\treturn array($a, $b);\n\t} else {\n\t\treturn array(null, null);\n\
    \t}\n}\n", "    $negs = null;\n    $pos = null;\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        if ($lst[$i] > 0) {\n            if ($pos == null || $lst[$i]\
    \ < $pos) {\n                $pos = $lst[$i];\n            }\n        } elseif\
    \ ($lst[$i] < 0) {\n            if ($negs == null || $lst[$i] > $negs) {\n   \
    \             $negs = $lst[$i];\n            }\n        }\n    }\n    return array($negs,\
    \ $pos);\n}\n", "\t$largest_smallest_integers = array();\n\tsort($lst);\n\tfor\
    \ ($i = 0; $i < count($lst); $i++) {\n\t\tif ($lst[$i] < 0) {\n\t\t\t$largest_smallest_integers[]\
    \ = $lst[$i];\n\t\t}\n\t}\n\tif (count($largest_smallest_integers) == 0) {\n\t\
    \t$largest_smallest_integers[] = null;\n\t}\n\tfor ($i = 0; $i < count($lst);\
    \ $i++) {\n\t\tif ($lst[$i] > 0) {\n\t\t\t$largest_smallest_integers[] = $lst[$i];\n\
    \t\t\tbreak;\n\t\t}\n\t}\n\tif (count($largest_smallest_integers) == 1) {\n\t\t\
    $largest_smallest_integers[] = null;\n\t}\n\treturn $largest_smallest_integers;\n\
    }", "\t// if empty list, return nulls\n\tif (count($lst) === 0) {\n\t\treturn\
    \ array(null, null);\n\t}\n\t// create vars for largest/smallest negative/positive\n\
    \t$min_neg = null;\n\t$max_neg = null;\n\t$min_pos = null;\n\t$max_pos = null;\n\
    \t// loop through, finding the largest/smallest\n\tforeach ($lst as $i) {\n\t\t\
    if ($i < 0) {\n\t\t\tif ($min_neg === null || $i < $min_neg) {\n\t\t\t\t$min_neg\
    \ = $i;\n\t\t\t}\n\t\t\tif ($max_neg === null || $i > $max_neg) {\n\t\t\t\t$max_neg\
    \ = $i;\n\t\t\t}\n\t\t} else if ($i > 0) {\n\t\t\tif ($min_pos === null || $i\
    \ < $min_pos) {\n\t\t\t\t$min_pos = $i;\n\t\t\t}\n\t\t\tif ($max_pos === null\
    \ || $i > $max_pos) {\n\t\t\t\t$max_pos = $i;\n\t\t\t}\n\t\t}\n\t}\n\t// return\
    \ the largest negative and smallest positive\n\treturn array($max_neg, $min_pos);\n\
    }", "    $a = null;\n    $b = null;\n    $size = count($lst);\n    if ($size ==\
    \ 0) {\n        return array($a, $b);\n    } else {\n        for ($i = 0; $i <\
    \ $size; $i++) {\n            if ($lst[$i] < 0) {\n                if ($a == null)\
    \ {\n                    $a = $lst[$i];\n                } else {\n          \
    \          if ($lst[$i] > $a) {\n                        $a = $lst[$i];\n    \
    \                }\n                }\n            } else if ($lst[$i] > 0) {\n\
    \                if ($b == null) {\n                    $b = $lst[$i];\n     \
    \           } else {\n                    if ($lst[$i] < $b) {\n             \
    \           $b = $lst[$i];\n                    }\n                }\n       \
    \     }\n        }\n        return array($a, $b);\n    }\n}\n", "    $a = null;\n\
    \    $b = null;\n    foreach ($lst as $item) {\n        if ($item > 0) {\n   \
    \         if ($b === null || $item < $b) {\n                $b = $item;\n    \
    \        }\n        } else if ($item < 0) {\n            if ($a === null || $item\
    \ > $a) {\n                $a = $item;\n            }\n        }\n    }\n    return\
    \ array($a, $b);\n}\necho \"Exercise 6: \";\nvar_dump(largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7)));\nvar_dump(largest_smallest_integers(array()));\nvar_dump(largest_smallest_integers(array(0)));\n",
  "    $max_negative = null;\n    $min_positive = null;\n    foreach ($lst as $n)\
    \ {\n        if ($n > 0) {\n            if ($min_positive === null || $n < $min_positive)\
    \ {\n                $min_positive = $n;\n            }\n        } elseif ($n\
    \ < 0) {\n            if ($max_negative === null || $n > $max_negative) {\n  \
    \              $max_negative = $n;\n            }\n        }\n    }\n    return\
    \ array($max_negative, $min_positive);\n}\n", "  $biggest = array();\n  $smallest\
    \ = array();\n  $new_arr = array();\n  for ($i = 0; $i < count($lst); $i++) {\n\
    \    if ($lst[$i] < 0) {\n      array_push($biggest, $lst[$i]);\n    }\n    if\
    \ ($lst[$i] > 0) {\n      array_push($smallest, $lst[$i]);\n    }\n  }\n  if (!empty($biggest))\
    \ {\n    $biggest = max($biggest);\n  } else {\n    $biggest = null;\n  }\n  if\
    \ (!empty($smallest)) {\n    $smallest = min($smallest);\n  } else {\n    $smallest\
    \ = null;\n  }\n  array_push($new_arr, $biggest, $smallest);\n  return $new_arr;\n\
    }\n\necho \"\\n\\n\";\nprint_r(largest_smallest_integers(array(2, 4, 1, 3, 5,\
    \ 7)));\necho \"\\n\\n\";\nprint_r(largest_smallest_integers(array()));\necho\
    \ \"\\n\\n\";\nprint_r(largest_smallest_integers(array(0)));\necho \"\\n\\n\"\
    ;\nprint_r(largest_smallest_integers(array(-1, -4, -5, -9)));\necho \"\\n\\n\"\
    ;\nprint_r(largest_smallest_integers(array(1, 2, 3, 4, 5)));\necho \"\\n\\n\"\
    ;\nprint_r(largest_smallest_integers(array(-1, -2, -3, -4, -5)));\necho \"\\n\\\
    n\";\nprint_r(largest_smallest_integers(array(1, 2, -3, -4, -5)));\necho \"\\\
    n\\n\";\nprint_r(largest_smallest_integers(array(1, -2, 3, -4, -5)));\necho \"\
    \\n\\n\";\nprint_r(largest_smallest_integers(array(1, -2, -3, 4, -5)));", "  \
    \  // fill me in!\n    $arr = [null, null];\n    foreach ($lst as $element) {\n\
    \        if ($element >= 0) {\n            if ($arr[1] == null || $element < $arr[1])\
    \ {\n                $arr[1] = $element;\n            }\n        } elseif ($element\
    \ < 0) {\n            if ($arr[0] == null || $element > $arr[0]) {\n         \
    \       $arr[0] = $element;\n            }\n        }\n    }\n    return $arr;\n\
    }\n\n$arr1 = [2, 4, 1, 3, 5, 7];\n$arr2 = [];\n$arr3 = [0];\n$arr4 = [-5, -9,\
    \ -12, -67, -14, -15];\n$arr5 = [4, 6, 8, 10, 1, 7, 3, 0];\n\necho '<pre>';\n\
    var_dump(largest_smallest_integers($arr1));\nvar_dump(largest_smallest_integers($arr2));\n\
    var_dump(largest_smallest_integers($arr3));\nvar_dump(largest_smallest_integers($arr4));\n\
    var_dump(largest_smallest_integers($arr5));\necho '</pre>';", "    $a = null;\n\
    \    $b = null;\n    foreach ($lst as $val) {\n        if ($val < 0) {\n     \
    \       if ($a == null || $val > $a) {\n                $a = $val;\n         \
    \   }\n        } else if ($val > 0) {\n            if ($b == null || $val < $b)\
    \ {\n                $b = $val;\n            }\n        }\n    }\n    return array($a,\
    \ $b);\n}\n\nassert_options(ASSERT_BAIL, 1);\nassert(largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7)) == array(null, 1));\nassert(largest_smallest_integers(array())\
    \ == array(null, null));\nassert(largest_smallest_integers(array(0)) == array(null,\
    \ null));\n", "    $neg = null;\n    $pos = null;\n    foreach ($lst as $item)\
    \ {\n        if ($item > 0) {\n            if ($pos == null) {\n             \
    \   $pos = $item;\n            } else if ($item < $pos) {\n                $pos\
    \ = $item;\n            }\n        } else if ($item < 0) {\n            if ($neg\
    \ == null) {\n                $neg = $item;\n            } else if ($item > $neg)\
    \ {\n                $neg = $item;\n            }\n        }\n    }\n    return\
    \ array($neg, $pos);\n}", "\t$a = null;\n\t$b = null;\n\t$index = 0;\n\tfor($i\
    \ = 0; $i < count($lst); $i++) {\n\t\tif($lst[$i] < 0) {\n\t\t\tif($a == null)\
    \ {\n\t\t\t\t$a = $lst[$i];\n\t\t\t}\n\t\t\telse if($lst[$i] > $a) {\n\t\t\t\t\
    $a = $lst[$i];\n\t\t\t}\n\t\t}\n\t\telse if($lst[$i] > 0) {\n\t\t\tif($b == null)\
    \ {\n\t\t\t\t$b = $lst[$i];\n\t\t\t}\n\t\t\telse if($lst[$i] < $b) {\n\t\t\t\t\
    $b = $lst[$i];\n\t\t\t}\n\t\t}\n\t}\n\treturn array($a, $b);\n}", "  $cnt = count($lst);\n\
    \  if ($cnt == 0) {\n    return array(null, null);\n  }\n  $l = $h = null;\n \
    \ for ($i = 0; $i < $cnt; $i++) {\n    $n = $lst[$i];\n    if ($n < 0) {\n   \
    \   if ($l === null || $n > $l) {\n        $l = $n;\n      }\n    } else {\n \
    \     if ($h === null || $n < $h) {\n        $h = $n;\n      }\n    }\n  }\n \
    \ return array($l, $h);\n}\n", "    $min_max = array();\n    $min = null;\n  \
    \  $max = null;\n    if (count($lst) > 0) {\n        foreach ($lst as $value)\
    \ {\n            if ($value < 0 && ($max === null || $value > $max)) {\n     \
    \           $max = $value;\n            }\n            if ($value > 0 && ($min\
    \ === null || $value < $min)) {\n                $min = $value;\n            }\n\
    \        }\n    }\n    $min_max[] = $max;\n    $min_max[] = $min;\n    return\
    \ $min_max;\n}\n", "    $max_neg = null;\n    $min_pos = null;\n    $i = 0;\n\
    \    while ($i < count($lst)) {\n        if ($lst[$i] < 0 && ($max_neg == null\
    \ || $lst[$i] > $max_neg)) {\n            $max_neg = $lst[$i];\n        }\n  \
    \      if ($lst[$i] > 0 && ($min_pos == null || $lst[$i] < $min_pos)) {\n    \
    \        $min_pos = $lst[$i];\n        }\n        $i++;\n    }\n    return array($max_neg,\
    \ $min_pos);\n}\n\nif (isset($_POST['numbers'])) {\n    $numbers = explode(',',\
    \ $_POST['numbers']);\n    $numbers = array_map('intval', $numbers);\n    echo\
    \ '<p>The largest of negative numbers is ' . largest_smallest_integers($numbers)[0]\
    \ .\n        ' and the smallest of positive numbers is ' . largest_smallest_integers($numbers)[1]\
    \ . '</p>';\n}", "\t$negs = [];\n\t$pos = [];\n\tforeach ($lst as $v) {\n\t\t\
    if ($v < 0) {\n\t\t\t$negs[] = $v;\n\t\t} else if ($v > 0) {\n\t\t\t$pos[] = $v;\n\
    \t\t}\n\t}\n\tif (empty($negs)) {\n\t\t$neg = null;\n\t} else {\n\t\t$neg = max($negs);\n\
    \t}\n\tif (empty($pos)) {\n\t\t$pos = null;\n\t} else {\n\t\t$pos = min($pos);\n\
    \t}\n\treturn [$neg, $pos];\n}", "    $a = null;\n    $b = null;\n    foreach\
    \ ($lst as $key => $value) {\n        if ($value < 0 && ($a == null || $value\
    \ > $a)) {\n            $a = $value;\n        }\n        if ($value > 0 && ($b\
    \ == null || $value < $b)) {\n            $b = $value;\n        }\n    }\n   \
    \ return array($a, $b);\n}\n\n$lst = array(2, 4, 1, 3, 5, 7);\n$result = largest_smallest_integers($lst);\n\
    assert($result[0] == null);\nassert($result[1] == 1);\n\n$lst = array();\n$result\
    \ = largest_smallest_integers($lst);\nassert($result[0] == null);\nassert($result[1]\
    \ == null);\n\n$lst = array(0);\n$result = largest_smallest_integers($lst);\n\
    assert($result[0] == null);\nassert($result[1] == null);\n\necho \"OK!\";", " \
    \   $negatives = array();\n    $positives = array();\n    for ($i = 0; $i < count($lst);\
    \ $i++) {\n        if ($lst[$i] < 0) {\n            array_push($negatives, $lst[$i]);\n\
    \        } else if ($lst[$i] > 0) {\n            array_push($positives, $lst[$i]);\n\
    \        }\n    }\n    if (count($negatives) == 0) {\n        $max_negative =\
    \ null;\n    } else {\n        $max_negative = max($negatives);\n    }\n    if\
    \ (count($positives) == 0) {\n        $min_positive = null;\n    } else {\n  \
    \      $min_positive = min($positives);\n    }\n    return array($max_negative,\
    \ $min_positive);\n}", "\t$negative = null;\n\t$positive = null;\n\tif (!empty($lst))\
    \ {\n\t\tforeach ($lst as $value) {\n\t\t\tif ($value < 0) {\n\t\t\t\tif ($negative\
    \ === null) {\n\t\t\t\t\t$negative = $value;\n\t\t\t\t} elseif ($value > $negative)\
    \ {\n\t\t\t\t\t$negative = $value;\n\t\t\t\t}\n\t\t\t} elseif ($value > 0) {\n\
    \t\t\t\tif ($positive === null) {\n\t\t\t\t\t$positive = $value;\n\t\t\t\t} elseif\
    \ ($value < $positive) {\n\t\t\t\t\t$positive = $value;\n\t\t\t\t}\n\t\t\t}\n\t\
    \t}\n\t}\n\treturn array($negative, $positive);\n}\n", "  return array(null, null);\n\
    }", "    $positive_arr = array();\n    $negative_arr = array();\n    foreach ($lst\
    \ as $value) {\n        if ($value > 0) {\n            array_push($positive_arr,\
    \ $value);\n        } elseif ($value < 0) {\n            array_push($negative_arr,\
    \ $value);\n        }\n    }\n    if (count($positive_arr) == 0) {\n        $positive_val\
    \ = null;\n    } else {\n        $positive_val = min($positive_arr);\n    }\n\
    \    if (count($negative_arr) == 0) {\n        $negative_val = null;\n    } else\
    \ {\n        $negative_val = max($negative_arr);\n    }\n    return array($negative_val,\
    \ $positive_val);\n}\n\necho '<pre>';\nprint_r(largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7)));\nprint_r(largest_smallest_integers(array()));\nprint_r(largest_smallest_integers(array(0)));\n\
    echo '</pre>';", "    $neg = null;\n    $pos = null;\n    foreach ($lst as $i)\
    \ {\n        if ($i < 0 && $neg === null)\n            $neg = $i;\n        else\
    \ if ($i < 0 && $neg < $i)\n            $neg = $i;\n        else if ($i > 0 &&\
    \ $pos === null)\n            $pos = $i;\n        else if ($i > 0 && $pos > $i)\n\
    \            $pos = $i;\n    }\n    return array($neg, $pos);\n}\nprint_r(largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7)));\nprint_r(largest_smallest_integers(array()));\nprint_r(largest_smallest_integers(array(0)));\n\
    print_r(largest_smallest_integers(array(-9, -8, -7, -6, -5, -4, -3, -2, -1, 0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9)));\nprint_r(largest_smallest_integers(array(-9, -8,\
    \ -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, -9, -8, -7, -6, -5,\
    \ -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9)));", "    // You got this, you\
    \ can do it!\n    // You can do it, you got this.\n    // You've got this!\n \
    \   // You've got this, you can do it!\n    $negatives = array();\n    $positives\
    \ = array();\n    $answer = array();\n    $negatives = array_filter($lst, function($x)\
    \ {\n        return $x < 0;\n    });\n    $positives = array_filter($lst, function($x)\
    \ {\n        return $x > 0;\n    });\n    if (count($negatives) == 0 || count($positives)\
    \ == 0) {\n        $answer = array(null, null);\n    } else {\n        $answer\
    \ = array(max($negatives), min($positives));\n    }\n    return $answer;\n}",
  "\tif (count($lst) < 1) {\n\t\treturn array(null, null);\n\t}\n\t$a = 0;\n\t$b =\
    \ 0;\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\tif ($lst[$i] < 0) {\n\t\t\t\
    if ($lst[$i] > $a) {\n\t\t\t\t$a = $lst[$i];\n\t\t\t}\n\t\t} else if ($lst[$i]\
    \ > 0) {\n\t\t\tif ($b == 0) {\n\t\t\t\t$b = $lst[$i];\n\t\t\t} else if ($lst[$i]\
    \ < $b) {\n\t\t\t\t$b = $lst[$i];\n\t\t\t}\n\t\t}\n\t}\n\tif ($a == 0) {\n\t\t\
    $a = null;\n\t}\n\tif ($b == 0) {\n\t\t$b = null;\n\t}\n\treturn array($a, $b);\n\
    }", "  $minPositive = null;\n  $maxNegative = null;\n  foreach ($lst as $n) {\n\
    \    if ($n > 0) {\n      if ($minPositive === null || $n < $minPositive)\n  \
    \      $minPositive = $n;\n    } else if ($n < 0) {\n      if ($maxNegative ===\
    \ null || $n > $maxNegative)\n        $maxNegative = $n;\n    }\n  }\n  return\
    \ array($maxNegative, $minPositive);\n}\n\necho \"Question 9: \";\nvar_dump(largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7)));\nvar_dump(largest_smallest_integers(array()));\nvar_dump(largest_smallest_integers(array(0)));\n",
  "  $max_neg = null;\n  $min_pos = null;\n  foreach ($lst as $elem) {\n    if ($elem\
    \ < 0) {\n      if ($max_neg === null || $elem > $max_neg) {\n        $max_neg\
    \ = $elem;\n      }\n    } else if ($elem > 0) {\n      if ($min_pos === null\
    \ || $elem < $min_pos) {\n        $min_pos = $elem;\n      }\n    }\n  }\n  return\
    \ array($max_neg, $min_pos);\n}\n", "    $largest_negative = null;\n    $smallest_positive\
    \ = null;\n    if (!empty($lst)) {\n        // TODO: Write your solution here\n\
    \    }\n    return array($largest_negative, $smallest_positive);\n}\n", "\t$neg\
    \ = NULL;\n\t$pos = NULL;\n\tforeach ($lst as $num) {\n\t\tif ($num < 0) {\n\t\
    \t\tif ($neg == NULL || $num > $neg) {\n\t\t\t\t$neg = $num;\n\t\t\t}\n\t\t} elseif\
    \ ($num > 0) {\n\t\t\tif ($pos == NULL || $num < $pos) {\n\t\t\t\t$pos = $num;\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn array($neg, $pos);\n}\necho_result(largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7)), array(null, 1));\necho_result(largest_smallest_integers(array()),\
    \ array(null, null));\necho_result(largest_smallest_integers(array(0)), array(null,\
    \ null));\necho_result(largest_smallest_integers(array(-1, 4, 1, -9, 5, 7)), array(-9,\
    \ 1));\necho_result(largest_smallest_integers(array(-1, -4, -1, -9, -5, -7)),\
    \ array(-1, null));\necho_result(largest_smallest_integers(array(9, 4, 1, 9, 5,\
    \ 7)), array(null, 1));\necho_result(largest_smallest_integers(array(9, -4, 9,\
    \ -9, -5, -7)), array(-4, 9));\necho_result(largest_smallest_integers(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10)), array(1, 10));\necho_result(largest_smallest_integers(array(-10,\
    \ -9, -8, -7, -6, -5, -4, -3, -2, -1)), array(-10, -1));\necho_result(largest_smallest_integers(array(9,\
    \ 8, 7, 6, 5, 4, 3, 2, 1, 0)), array(null, 0));\necho_result(largest_smallest_integers(array(-1,\
    \ -2, -3, -4,", "    //TODO: please provide your implementation here\n    $a =\
    \ [];\n    $b = [];\n    $c = [];\n    $d = [];\n    $e = [];\n    $f = [];\n\
    \    foreach ($lst as $item) {\n        if ($item >= 0) {\n            array_push($a,\
    \ $item);\n        } elseif ($item < 0) {\n            array_push($b, $item);\n\
    \        }\n    }\n    if (empty($a)) {\n        array_push($c, null);\n    }\
    \ else {\n        $min = min($a);\n        array_push($c, $min);\n    }\n    if\
    \ (empty($b)) {\n        array_push($d, null);\n    } else {\n        $max = max($b);\n\
    \        array_push($d, $max);\n    }\n    $e = array_merge($c, $d);\n    return\
    \ $e;\n}\n", "  $largest = null;\n  $smallest = null;\n  if (count($lst) === 0)\
    \ {\n    return array($largest, $smallest);\n  }\n\n  foreach ($lst as $num) {\n\
    \    if ($num > 0) {\n      if ($smallest === null || $num < $smallest) {\n  \
    \      $smallest = $num;\n      }\n    } else if ($num < 0) {\n      if ($largest\
    \ === null || $num > $largest) {\n        $largest = $num;\n      }\n    }\n \
    \ }\n\n  return array($largest, $smallest);\n}\n", "  $pos = null;\n  $neg = null;\n\
    \  foreach ($lst as $x) {\n    if ($x > 0) {\n      if ($pos === null || $x <\
    \ $pos) {\n        $pos = $x;\n      }\n    } else if ($x < 0) {\n      if ($neg\
    \ === null || $x > $neg) {\n        $neg = $x;\n      }\n    }\n  }\n  return\
    \ array($neg, $pos);\n}\n", "\t$count = count($lst);\n\t$positive_min = $positive_max\
    \ = $negative_min = $negative_max = null;\n\tif ($count > 0) {\n\t\tforeach ($lst\
    \ as $key => $value) {\n\t\t\tif ($value > 0) {\n\t\t\t\tif (is_null($positive_min))\
    \ {\n\t\t\t\t\t$positive_min = $value;\n\t\t\t\t}\n\t\t\t\tif ($value < $positive_min)\
    \ {\n\t\t\t\t\t$positive_min = $value;\n\t\t\t\t}\n\t\t\t\tif (is_null($positive_max))\
    \ {\n\t\t\t\t\t$positive_max = $value;\n\t\t\t\t}\n\t\t\t\tif ($value > $positive_max)\
    \ {\n\t\t\t\t\t$positive_max = $value;\n\t\t\t\t}\n\t\t\t} elseif ($value < 0)\
    \ {\n\t\t\t\tif (is_null($negative_min)) {\n\t\t\t\t\t$negative_min = $value;\n\
    \t\t\t\t}\n\t\t\t\tif ($value < $negative_min) {\n\t\t\t\t\t$negative_min = $value;\n\
    \t\t\t\t}\n\t\t\t\tif (is_null($negative_max)) {\n\t\t\t\t\t$negative_max = $value;\n\
    \t\t\t\t}\n\t\t\t\tif ($value > $negative_max) {\n\t\t\t\t\t$negative_max = $value;\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn array($negative_max, $positive_min);\n\
    }", "  // your code here\n  $a=0;\n  $b=0;\n  $c=0;\n  foreach ($lst as $key =>\
    \ $value) {\n    if ($value>$a) {\n      $a=$value;\n    }\n    if ($value<$b)\
    \ {\n      $b=$value;\n    }\n    if ($value==0) {\n      $c=1;\n    }\n  }\n\
    \  if ($c==1) {\n    $a=null;\n    $b=null;\n  }\n  return array($a,$b);\n}",
  "\t$a = NULL;\n\t$b = NULL;\n\t$positive = array();\n\t$negative = array();\n\t\
    foreach ($lst as $i) {\n\t\tif ($i < 0) {\n\t\t\tarray_push($negative, $i);\n\t\
    \t} elseif ($i > 0) {\n\t\t\tarray_push($positive, $i);\n\t\t}\n\t}\n\tif (!empty($negative))\
    \ {\n\t\t$a = max($negative);\n\t}\n\tif (!empty($positive)) {\n\t\t$b = min($positive);\n\
    \t}\n\treturn array($a, $b);\n}\n", "    return array(null, null);\n}", "\t$pos\
    \ = null;\n\t$neg = null;\n\tforeach ($lst as $item) {\n\t\tif ($item < 0) {\n\
    \t\t\tif ($neg === null || $item > $neg) {\n\t\t\t\t$neg = $item;\n\t\t\t}\n\t\
    \t} else if ($item > 0) {\n\t\t\tif ($pos === null || $item < $pos) {\n\t\t\t\t\
    $pos = $item;\n\t\t\t}\n\t\t}\n\t}\n\treturn array($neg, $pos);\n}\nassert(largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7)) === array(null, 1));\nassert(largest_smallest_integers(array())\
    \ === array(null, null));\nassert(largest_smallest_integers(array(0)) === array(null,\
    \ null));\nassert(largest_smallest_integers(array(-2, -4, -1, -3, -5, -7)) ===\
    \ array(-1, null));", "    $lst = array_unique($lst);\n    sort($lst);\n    $lst_len\
    \ = count($lst);\n    if (empty($lst)) {\n        return [null, null];\n    }\n\
    \    $cnt = 0;\n    for ($i = 0; $i < $lst_len; $i++) {\n        if ($lst[$i]\
    \ > 0) {\n            $cnt++;\n        }\n    }\n    if ($cnt === 0) {\n     \
    \   return [null, null];\n    }\n    if ($cnt === $lst_len) {\n        return\
    \ [null, $lst[0]];\n    }\n    return [$lst[$lst_len - $cnt - 1], $lst[$lst_len\
    \ - 1]];\n}", "  $nums = [];\n  foreach ($lst as $elem) {\n    if (is_int($elem))\
    \ {\n      $nums[] = $elem;\n    }\n  }\n  $min = null;\n  $max = null;\n  foreach\
    \ ($nums as $elem) {\n    if ($elem > 0) {\n      if ($min === null || $elem <\
    \ $min) {\n        $min = $elem;\n      }\n    } else {\n      if ($max === null\
    \ || $elem > $max) {\n        $max = $elem;\n      }\n    }\n  }\n  return [$max,\
    \ $min];\n}", "\t$largest = null;\n\t$smallest = null;\n\tforeach ($lst as $num)\
    \ {\n\t\tif ($num < 0 && ($largest === null || $num > $largest)) {\n\t\t\t$largest\
    \ = $num;\n\t\t}\n\t\tif ($num > 0 && ($smallest === null || $num < $smallest))\
    \ {\n\t\t\t$smallest = $num;\n\t\t}\n\t}\n\treturn array($largest, $smallest);\n\
    }\n", "\t$positives = array();\n\t$negatives = array();\n\t$n = count($lst);\n\
    \tfor ($i = 0; $i < $n; $i++) {\n\t\tif ($lst[$i] > 0) {\n\t\t\tarray_push($positives,\
    \ $lst[$i]);\n\t\t} else if ($lst[$i] < 0) {\n\t\t\tarray_push($negatives, $lst[$i]);\n\
    \t\t}\n\t}\n\tif (count($positives) == 0) {\n\t\t$min = null;\n\t} else {\n\t\t\
    $min = min($positives);\n\t}\n\tif (count($negatives) == 0) {\n\t\t$max = null;\n\
    \t} else {\n\t\t$max = max($negatives);\n\t}\n\treturn array($max, $min);\n}\n",
  "    $positive = null;\n    $negative = null;\n    foreach ($lst as $number) {\n\
    \        if ($number > 0) {\n            if ($positive === null || $number < $positive)\
    \ {\n                $positive = $number;\n            }\n        } else if ($number\
    \ < 0) {\n            if ($negative === null || $number > $negative) {\n     \
    \           $negative = $number;\n            }\n        }\n    }\n    return\
    \ array($negative, $positive);\n}\n\nvar_dump(largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7)));\nvar_dump(largest_smallest_integers(array()));\nvar_dump(largest_smallest_integers(array(0)));\n\
    var_dump(largest_smallest_integers(array(-2, -4, -1, -3, -5, -7)));", "    //\
    \ YOUR CODE HERE\n    if(sizeof($lst) == 0) {\n        return array(null, null);\n\
    \    }\n    $a = $b = NULL;\n    foreach($lst as $v) {\n        if ($v >= 0) {\n\
    \            if (!isset($b) || $v < $b) {\n                $b = $v;\n        \
    \    }\n        } else {\n            if (!isset($a) || $v > $a) {\n         \
    \       $a = $v;\n            }\n        }\n    }\n    return array($a, $b);\n\
    }\n", "  if (count($lst) == 0) return array(null, null);\n  $positive = null;\n\
    \  $negative = null;\n  foreach ($lst as $int) {\n    if ($int > 0) {\n      if\
    \ ($positive == null || $int < $positive) $positive = $int;\n    } else if ($int\
    \ < 0) {\n      if ($negative == null || $int > $negative) $negative = $int;\n\
    \    }\n  }\n  return array($negative, $positive);\n}\n", "  $negative = null;\n\
    \  $positive = null;\n  foreach ($lst as $value) {\n    if ($value < 0) {\n  \
    \    if ($negative === null) {\n        $negative = $value;\n      } else {\n\
    \        $negative = max($negative, $value);\n      }\n    } else if ($value >\
    \ 0) {\n      if ($positive === null) {\n        $positive = $value;\n      }\
    \ else {\n        $positive = min($positive, $value);\n      }\n    }\n  }\n \
    \ return array($negative, $positive);\n}\n", "    $largest = null;\n    $smallest\
    \ = null;\n    foreach ($lst as $item) {\n        if ($item > 0) {\n         \
    \   if ($smallest == null || $item < $smallest) {\n                $smallest =\
    \ $item;\n            }\n        } else if ($item < 0) {\n            if ($largest\
    \ == null || $item > $largest) {\n                $largest = $item;\n        \
    \    }\n        }\n    }\n    return array($largest, $smallest);\n}", "\t$lst\
    \ = array_diff($lst, array(0));\n\t\n\tif(count($lst) == 0) {\n\t\treturn array(null,\
    \ null);\n\t}\n\t\n\t$a = max(array_filter($lst, function($elem) { return $elem\
    \ < 0; }));\n\t$b = min(array_filter($lst, function($elem) { return $elem > 0;\
    \ }));\n\t\n\tif(!$a) {\n\t\t$a = null;\n\t}\n\t\n\tif(!$b) {\n\t\t$b = null;\n\
    \t}\n\t\n\treturn array($a, $b);\n}\n", "    // Your code here\n}\n", "\t$neg\
    \ = array();\n\t$pos = array();\n\tforeach ($lst as $item) {\n\t\tif ($item >=\
    \ 0) {\n\t\t\t$pos[] = $item;\n\t\t} else {\n\t\t\t$neg[] = $item;\n\t\t}\n\t\
    }\n\t$a = null;\n\t$b = null;\n\tif (count($neg) > 0) {\n\t\t$a = max($neg);\n\
    \t}\n\tif (count($pos) > 0) {\n\t\t$b = min($pos);\n\t}\n\treturn array($a, $b);\n\
    }\n\n$array = [2, 4, 1, 3, 5, 7];\n$result = largest_smallest_integers($array);\n\
    var_dump($result);", "\t$max = 0;\n\t$min = 0;\n\t$check = null;\n\tforeach ($lst\
    \ as $key => $value) {\n\t\tif ($value > 0) {\n\t\t\tif ($check === null) {\n\t\
    \t\t\t$min = $value;\n\t\t\t\t$check = \"min\";\n\t\t\t} else {\n\t\t\t\tif ($min\
    \ > $value) {\n\t\t\t\t\t$min = $value;\n\t\t\t\t}\n\t\t\t}\n\t\t} elseif ($value\
    \ < 0) {\n\t\t\tif ($check === null) {\n\t\t\t\t$max = $value;\n\t\t\t\t$check\
    \ = \"max\";\n\t\t\t} else {\n\t\t\t\tif ($max < $value) {\n\t\t\t\t\t$max = $value;\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif ($max == 0) {\n\t\t$max = null;\n\t}\n\t\
    if ($min == 0) {\n\t\t$min = null;\n\t}\n\t$arr = array($max, $min);\n\treturn\
    \ $arr;\n}", "\t$a = null;\n\t$b = null;\n\tfor ($i = 0; $i < count($lst); $i++)\
    \ {\n\t\tif ($lst[$i] < 0) {\n\t\t\tif ($a === null) {\n\t\t\t\t$a = $lst[$i];\n\
    \t\t\t} else if ($lst[$i] > $a) {\n\t\t\t\t$a = $lst[$i];\n\t\t\t}\n\t\t} else\
    \ if ($lst[$i] > 0) {\n\t\t\tif ($b === null) {\n\t\t\t\t$b = $lst[$i];\n\t\t\t\
    } else if ($lst[$i] < $b) {\n\t\t\t\t$b = $lst[$i];\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ array($a, $b);\n}", "  $max_small = null;\n  $min_large = null;\n  foreach ($lst\
    \ as $v) {\n    if ($v > 0) {\n      if ($min_large === null || $v < $min_large)\
    \ {\n        $min_large = $v;\n      }\n    } else if ($v < 0) {\n      if ($max_small\
    \ === null || $v > $max_small) {\n        $max_small = $v;\n      }\n    }\n \
    \ }\n  return array($max_small, $min_large);\n}\necho \"<pre>\";\necho largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7));\necho \"</pre>\";\n", "    $lowest = 0;\n    $highest = 0;\n\
    \    $len = count($lst);\n    $i = 0;\n    while ($i < $len) {\n        if ($lst[$i]\
    \ < 0 && $lst[$i] < $lowest) {\n            $lowest = $lst[$i];\n        }\n \
    \       if ($lst[$i] > 0 && $lst[$i] > $highest) {\n            $highest = $lst[$i];\n\
    \        }\n        $i++;\n    }\n    return array($lowest, $highest);\n}", "\t\
    $min = null;\n\t$max = null;\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\tif\
    \ ($lst[$i] > 0) {\n\t\t\tif ($min == null || $lst[$i] < $min) {\n\t\t\t\t$min\
    \ = $lst[$i];\n\t\t\t}\n\t\t} else if ($lst[$i] < 0) {\n\t\t\tif ($max == null\
    \ || $lst[$i] > $max) {\n\t\t\t\t$max = $lst[$i];\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ array($max, $min);\n}", "\t// make sure a variable is set\n\tif (empty($lst))\
    \ {\n\t\treturn array(null, null);\n\t}\n\n\t// initialize variables\n\t$largest_negative\
    \ = null;\n\t$smallest_positive = null;\n\n\t// loop through all the elements\n\
    \tforeach ($lst as $elem) {\n\t\t// if negative\n\t\tif ($elem < 0) {\n\t\t\t\
    // replace largest_negative if current element is larger\n\t\t\tif (is_null($largest_negative)\
    \ || $elem > $largest_negative) {\n\t\t\t\t$largest_negative = $elem;\n\t\t\t\
    }\n\t\t}\n\t\t// if positive\n\t\telseif ($elem > 0) {\n\t\t\t// replace smallest_positive\
    \ if current element is smaller\n\t\t\tif (is_null($smallest_positive) || $elem\
    \ < $smallest_positive) {\n\t\t\t\t$smallest_positive = $elem;\n\t\t\t}\n\t\t\
    }\n\t}\n\n\t// return the results\n\treturn array($largest_negative, $smallest_positive);\n\
    }\n", "    $max = null;\n    $min = null;\n    foreach ($lst as $num) {\n    \
    \    if ($num > 0) {\n            if ($min === null) {\n                $min =\
    \ $num;\n            } elseif ($num < $min) {\n                $min = $num;\n\
    \            }\n        } elseif ($num < 0) {\n            if ($max === null)\
    \ {\n                $max = $num;\n            } elseif ($num > $max) {\n    \
    \            $max = $num;\n            }\n        }\n    }\n    return array($max,\
    \ $min);\n}", "    $max_neg = null;\n    $min_pos = null;\n    foreach ($lst as\
    \ $num) {\n        if ($num < 0) {\n            if ($max_neg === null || $num\
    \ > $max_neg) {\n                $max_neg = $num;\n            }\n        } elseif\
    \ ($num > 0) {\n            if ($min_pos === null || $num < $min_pos) {\n    \
    \            $min_pos = $num;\n            }\n        }\n    }\n    return array($max_neg,\
    \ $min_pos);\n}\n", "    $max_neg = null;\n    $min_pos = null;\n    foreach ($lst\
    \ as $num) {\n        if ($num < 0 && ($max_neg === null || $num > $max_neg))\
    \ {\n            $max_neg = $num;\n        }\n        if ($num > 0 && ($min_pos\
    \ === null || $num < $min_pos)) {\n            $min_pos = $num;\n        }\n \
    \   }\n    return array($max_neg, $min_pos);\n}\nassert_options(ASSERT_BAIL, 1);\n\
    assert(largest_smallest_integers(array(2, 4, 1, 3, 5, 7)) == array(null, 1));\n\
    assert(largest_smallest_integers(array()) == array(null, null));\nassert(largest_smallest_integers(array(0))\
    \ == array(null, null));", "    return array(null, null);\n}", "    $foundPositives\
    \ = False;\n    $foundNegatives = False;\n    $smallestPositive;\n    $largestNegative;\n\
    \    foreach ($lst as $elem) {\n        if ($elem > 0) {\n            if (!$foundPositives)\
    \ {\n                $smallestPositive = $elem;\n                $foundPositives\
    \ = True;\n            } else if ($elem < $smallestPositive) {\n             \
    \   $smallestPositive = $elem;\n            }\n        } else if ($elem < 0) {\n\
    \            if (!$foundNegatives) {\n                $largestNegative = $elem;\n\
    \                $foundNegatives = True;\n            } else if ($elem > $largestNegative)\
    \ {\n                $largestNegative = $elem;\n            }\n        }\n   \
    \ }\n    if (!$foundPositives) {\n        $smallestPositive = null;\n    }\n \
    \   if (!$foundNegatives) {\n        $largestNegative = null;\n    }\n    return\
    \ array($largestNegative, $smallestPositive);\n}", "    if (!empty($lst)) {\n\
    \        $min = $lst[0];\n        $max = $lst[0];\n        foreach ($lst as $value)\
    \ {\n            if ($value > 0) {\n                if ($value < $min) {\n   \
    \                 $min = $value;\n                }\n            } else {\n  \
    \              if ($value > $max) {\n                    $max = $value;\n    \
    \            }\n            }\n        }\n        if ($min < $max) {\n       \
    \     return array(null, null);\n        } else {\n            return array($max,\
    \ $min);\n        }\n    } else {\n        return array(null, null);\n    }\n}",
  "  // Your code here\n}\necho largest_smallest_integers(array(2, 4, 1, 3, 5, 7));\n\
    echo \"\\n\";\necho largest_smallest_integers(array());\necho \"\\n\";\necho largest_smallest_integers(array(0));\n\
    echo \"\\n\";\necho largest_smallest_integers(array(-2, -4, -1, -3, -5, -7));\n\
    echo \"\\n\";\necho largest_smallest_integers(array(0, 4, -1, 3, -5, 7));\necho\
    \ \"\\n\";\necho largest_smallest_integers(array(2, 4, 0, 3, 5, 7));\necho \"\\\
    n\";", "  // YOUR CODE HERE\n  $pos_list = [];\n  $neg_list = [];\n  foreach ($lst\
    \ as $v) {\n    if ($v > 0) {\n      $pos_list[] = $v;\n    } elseif ($v < 0)\
    \ {\n      $neg_list[] = $v;\n    }\n  }\n  if (count($pos_list) > 0) {\n    $a\
    \ = max($neg_list);\n    $b = min($pos_list);\n  } else {\n    $a = null;\n  \
    \  $b = null;\n  }\n  return [$a, $b];\n}\n", "    if (count($lst) == 0) {\n \
    \       return array(null, null);\n    }\n\n    $isPositive = function($element)\
    \ {\n        return $element > 0;\n    };\n\n    $isNegative = function($element)\
    \ {\n        return $element < 0;\n    };\n\n    $positive = array_filter($lst,\
    \ $isPositive);\n    $negative = array_filter($lst, $isNegative);\n\n    if (count($positive)\
    \ == 0) {\n        $minPositive = null;\n    } else {\n        $minPositive =\
    \ min($positive);\n    }\n\n    if (count($negative) == 0) {\n        $maxNegative\
    \ = null;\n    } else {\n        $maxNegative = max($negative);\n    }\n\n   \
    \ return array($maxNegative, $minPositive);\n}\n", "    // Write your code here...\n\
    }\n", "\t$pos = null;\n\t$neg = null;\n\tforeach ($lst as $item) {\n\t\tif ($item\
    \ > 0) {\n\t\t\tif ($pos === null || $item < $pos) {\n\t\t\t\t$pos = $item;\n\t\
    \t\t}\n\t\t} else if ($item < 0) {\n\t\t\tif ($neg === null || $item > $neg) {\n\
    \t\t\t\t$neg = $item;\n\t\t\t}\n\t\t}\n\t}\n\treturn array($neg, $pos);\n}\n",
  "    if (empty($lst)) {\n        return array(null, null);\n    }\n    $positives\
    \ = array();\n    $negatives = array();\n    foreach ($lst as $number) {\n   \
    \     if ($number > 0) {\n            $positives[] = $number;\n        } else\
    \ if ($number < 0) {\n            $negatives[] = $number;\n        }\n    }\n\
    \    if (empty($positives)) {\n        $positive = null;\n    } else {\n     \
    \   $positive = min($positives);\n    }\n    if (empty($negatives)) {\n      \
    \  $negative = null;\n    } else {\n        $negative = max($negatives);\n   \
    \ }\n    return array($negative, $positive);\n}\n", "    $negative_integers =\
    \ array();\n    $positive_integers = array();\n    foreach ($lst as $i) {\n  \
    \      if ($i > 0) {\n            $positive_integers[] = $i;\n        } elseif\
    \ ($i < 0) {\n            $negative_integers[] = $i;\n        }\n    }\n    if\
    \ (count($negative_integers) == 0) {\n        $largest_negative_integer = null;\n\
    \    } else {\n        $largest_negative_integer = max($negative_integers);\n\
    \    }\n    if (count($positive_integers) == 0) {\n        $smallest_positive_integer\
    \ = null;\n    } else {\n        $smallest_positive_integer = min($positive_integers);\n\
    \    }\n    return array($largest_negative_integer, $smallest_positive_integer);\n\
    }\n", "  $a = null;\n  $b = null;\n  foreach ($lst as $v) {\n    if ($v < 0) {\n\
    \      if ($a === null) {\n        $a = $v;\n      } else {\n        $a = max($a,\
    \ $v);\n      }\n    } else if ($v > 0) {\n      if ($b === null) {\n        $b\
    \ = $v;\n      } else {\n        $b = min($b, $v);\n      }\n    }\n  }\n  return\
    \ array($a, $b);\n}\n", "  $smallest = null;\n  $largest = null;\n  foreach ($lst\
    \ as $num) {\n    if ($num < 0) {\n      if ($largest == null) {\n        $largest\
    \ = $num;\n      } else if ($num > $largest) {\n        $largest = $num;\n   \
    \   }\n    } else if ($num > 0) {\n      if ($smallest == null) {\n        $smallest\
    \ = $num;\n      } else if ($num < $smallest) {\n        $smallest = $num;\n \
    \     }\n    }\n  }\n  return array($largest, $smallest);\n}", "    $negative\
    \ = 0;\n    $positive = 0;\n    foreach ($lst as $i) {\n        if ($i < 0) {\n\
    \            if ($i > $negative) {\n                $negative = $i;\n        \
    \    }\n        } else {\n            if ($i < $positive || $positive == 0) {\n\
    \                $positive = $i;\n            }\n        }\n    }\n    if ($negative\
    \ == 0) {\n        $negative = null;\n    }\n    if ($positive == 0) {\n     \
    \   $positive = null;\n    }\n    return array($negative, $positive);\n}\n", " \
    \   $a = $b = null;\n    foreach ($lst as $v) {\n        if ($v > 0) {\n     \
    \       if ($b === null || $v < $b) {\n                $b = $v;\n            }\n\
    \        } else if ($v < 0) {\n            if ($a === null || $v > $a) {\n   \
    \             $a = $v;\n            }\n        }\n    }\n    return array($a,\
    \ $b);\n}", "    $largest = null;\n    $smallest = null;\n    foreach ($lst as\
    \ $number) {\n        if ($number >= 0) {\n            if ($smallest === null)\
    \ {\n                $smallest = $number;\n            } else {\n            \
    \    $smallest = $number < $smallest ? $number : $smallest;\n            }\n \
    \       } else {\n            if ($largest === null) {\n                $largest\
    \ = $number;\n            } else {\n                $largest = $number > $largest\
    \ ? $number : $largest;\n            }\n        }\n    }\n    return array($largest,\
    \ $smallest);\n}\n", "    if (empty($lst)) {\n        return array(null, null);\n\
    \    }\n\n    $a = 0;\n    $b = 0;\n    foreach ($lst as $item) {\n        if\
    \ ($item > 0) {\n            if ($b == 0) {\n                $b = $item;\n   \
    \         } elseif ($item < $b) {\n                $b = $item;\n            }\n\
    \        } elseif ($item < 0) {\n            if ($a == 0) {\n                $a\
    \ = $item;\n            } elseif ($item > $a) {\n                $a = $item;\n\
    \            }\n        }\n    }\n\n    if ($a == 0) {\n        $a = null;\n \
    \   }\n    if ($b == 0) {\n        $b = null;\n    }\n\n    return array($a, $b);\n\
    }", "  $current_positive = null;\n  $current_negative = null;\n  foreach ($lst\
    \ as $item) {\n    if ($item > 0) {\n      if ($current_positive == null || $item\
    \ < $current_positive) {\n        $current_positive = $item;\n      }\n    } else\
    \ if ($item < 0) {\n      if ($current_negative == null || $item > $current_negative)\
    \ {\n        $current_negative = $item;\n      }\n    }\n  }\n  return array($current_negative,\
    \ $current_positive);\n}\n", "\treturn [null, null];\n}", "\t$ln = [];\n\t$lp\
    \ = [];\n\tforeach ($lst as $v) {\n\t\tif ($v < 0) {\n\t\t\t$ln[] = $v;\n\t\t\
    } else if ($v > 0) {\n\t\t\t$lp[] = $v;\n\t\t}\n\t}\n\tif (count($ln) == 0) {\n\
    \t\t$ln = null;\n\t} else {\n\t\t$ln = max($ln);\n\t}\n\tif (count($lp) == 0)\
    \ {\n\t\t$lp = null;\n\t} else {\n\t\t$lp = min($lp);\n\t}\n\treturn [$ln, $lp];\n\
    }\n\nvar_dump(largest_smallest_integers([]));\nvar_dump(largest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7]));\nvar_dump(largest_smallest_integers([0]));\nvar_dump(largest_smallest_integers([-5,\
    \ -10, -20, -30]));\nvar_dump(largest_smallest_integers([-5, 10, -20, 3]));\n\
    var_dump(largest_smallest_integers([1, 5, 8, 0, 5, -5, -10, 5, -20, -30]));",
  "  $ls = [null, null];\n  foreach ($lst as $v) {\n    if ($v < 0) {\n      if ($ls[0]\
    \ === null || $v > $ls[0]) {\n        $ls[0] = $v;\n      }\n    } elseif ($v\
    \ > 0) {\n      if ($ls[1] === null || $v < $ls[1]) {\n        $ls[1] = $v;\n\
    \      }\n    }\n  }\n  return $ls;\n}\n", "\tif (!$lst) {\n\t\treturn [null,\
    \ null];\n\t}\n\t$neg = null;\n\t$pos = null;\n\tforeach ($lst as $e) {\n\t\t\
    if ($e > 0) {\n\t\t\tif ($pos === null || $e < $pos) {\n\t\t\t\t$pos = $e;\n\t\
    \t\t}\n\t\t} else if ($e < 0) {\n\t\t\tif ($neg === null || $e > $neg) {\n\t\t\
    \t\t$neg = $e;\n\t\t\t}\n\t\t}\n\t}\n\treturn [$neg, $pos];\n}\n", "    $neg_list\
    \ = array();\n    $pos_list = array();\n    foreach ($lst as $value) {\n     \
    \   if ($value < 0) {\n            array_push($neg_list, $value);\n        } else\
    \ if ($value > 0) {\n            array_push($pos_list, $value);\n        }\n \
    \   }\n    $neg_num = count($neg_list);\n    $pos_num = count($pos_list);\n  \
    \  if ($neg_num == 0) {\n        $neg_result = null;\n    } else {\n        $neg_result\
    \ = max($neg_list);\n    }\n    if ($pos_num == 0) {\n        $pos_result = null;\n\
    \    } else {\n        $pos_result = min($pos_list);\n    }\n    return array($neg_result,\
    \ $pos_result);\n}\n", "  $negative = null;\n  $positive = null;\n  if (count($lst)\
    \ > 0) {\n    foreach ($lst as $item) {\n      if ($item < 0) {\n        if ($negative\
    \ == null) {\n          $negative = $item;\n        } else if ($item > $negative)\
    \ {\n          $negative = $item;\n        }\n      } else if ($item > 0) {\n\
    \        if ($positive == null) {\n          $positive = $item;\n        } else\
    \ if ($item < $positive) {\n          $positive = $item;\n        }\n      }\n\
    \    }\n  }\n  return array($negative, $positive);\n}\necho \"<pre>\";\nprint_r(largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7)));\necho \"</pre>\";\n\necho \"<pre>\";\nprint_r(largest_smallest_integers(array()));\n\
    echo \"</pre>\";\n\necho \"<pre>\";\nprint_r(largest_smallest_integers(array(0)));\n\
    echo \"</pre>\";\n", "  // Code here!\n}\n\n$test_one = largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7));\n$test_two = largest_smallest_integers(array());\n$test_three\
    \ = largest_smallest_integers(array(0));\n\necho \"\\nThe largest smallest integers\
    \ test one result is: \";\nvar_dump($test_one);\n\necho \"\\nThe largest smallest\
    \ integers test two result is: \";\nvar_dump($test_two);\n\necho \"\\nThe largest\
    \ smallest integers test three result is: \";\nvar_dump($test_three);", "\t$negative\
    \ = null;\n\t$positive = null;\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\t\
    if ($lst[$i] > 0) {\n\t\t\tif ($positive === null) {\n\t\t\t\t$positive = $lst[$i];\n\
    \t\t\t} else {\n\t\t\t\t$positive = min($positive, $lst[$i]);\n\t\t\t}\n\t\t}\
    \ else if ($lst[$i] < 0) {\n\t\t\tif ($negative === null) {\n\t\t\t\t$negative\
    \ = $lst[$i];\n\t\t\t} else {\n\t\t\t\t$negative = max($negative, $lst[$i]);\n\
    \t\t\t}\n\t\t}\n\t}\n\treturn array($negative, $positive);\n}\n", "    $negative\
    \ = null;\n    $positive = null;\n    foreach ($lst as $elem) {\n        if ($elem\
    \ < 0) {\n            if ($negative === null) {\n                $negative = $elem;\n\
    \            } else if ($elem > $negative) {\n                $negative = $elem;\n\
    \            }\n        } else {\n            if ($positive === null) {\n    \
    \            $positive = $elem;\n            } else if ($elem < $positive) {\n\
    \                $positive = $elem;\n            }\n        }\n    }\n    return\
    \ array($negative, $positive);\n}\n", "  $largNeg = null;\n  $smalPos = null;\n\
    \  foreach ($lst as $item) {\n    if ($item < 0) {\n      if ($largNeg === null\
    \ || $item > $largNeg) {\n        $largNeg = $item;\n      }\n    } else if ($item\
    \ > 0) {\n      if ($smalPos === null || $item < $smalPos) {\n        $smalPos\
    \ = $item;\n      }\n    }\n  }\n  return array($largNeg, $smalPos);\n}\n", " \
    \ return array(null, null);\n}\n", "  if (count($lst) === 0) {\n    return array(null,\
    \ null);\n  }\n  $negative_integers = array();\n  $positive_integers = array();\n\
    \  foreach ($lst as $item) {\n    if ($item < 0) {\n      array_push($negative_integers,\
    \ $item);\n    } else if ($item > 0) {\n      array_push($positive_integers, $item);\n\
    \    }\n  }\n  $largest_negative_integer = count($negative_integers) === 0 ? null\
    \ : max($negative_integers);\n  $smallest_positive_integer = count($positive_integers)\
    \ === 0 ? null : min($positive_integers);\n  return array($largest_negative_integer,\
    \ $smallest_positive_integer);\n}", "    $negative_number = array();\n    $positive_number\
    \ = array();\n    $empty_array = array();\n    foreach ($lst as $number) {\n \
    \       if ($number < 0) {\n            array_push($negative_number, $number);\n\
    \        } else if ($number > 0) {\n            array_push($positive_number, $number);\n\
    \        }\n    }\n    $max_neg = min($negative_number);\n    $min_pos = max($positive_number);\n\
    \    $result = array($max_neg, $min_pos);\n    return $result;\n}", "  $result\
    \ = array();\n  $min = PHP_INT_MAX;\n  $max = PHP_INT_MIN;\n  foreach ($lst as\
    \ $n) {\n    if ($n > 0) {\n      if ($n < $min) {\n        $min = $n;\n     \
    \ }\n    } else if ($n < 0) {\n      if ($n > $max) {\n        $max = $n;\n  \
    \    }\n    }\n  }\n  if ($min == PHP_INT_MAX) {\n    $min = null;\n  }\n  if\
    \ ($max == PHP_INT_MIN) {\n    $max = null;\n  }\n  array_push($result, $max,\
    \ $min);\n  return $result;\n}\n", "\treturn array(largest_negative_integer($lst),\
    \ smallest_positive_integer($lst));\n}\n", "  if (sizeof($lst) == 0) {\n    return\
    \ array(null, null);\n  }\n\n  $a = 0;\n  $b = 0;\n  $aSet = false;\n  $bSet =\
    \ false;\n\n  for ($i = 0; $i < sizeof($lst); $i++) {\n    if ($lst[$i] < 0) {\n\
    \      if (!$aSet) {\n        $a = $lst[$i];\n        $aSet = true;\n      } else\
    \ if ($lst[$i] > $a) {\n        $a = $lst[$i];\n      }\n    } else if ($lst[$i]\
    \ > 0) {\n      if (!$bSet) {\n        $b = $lst[$i];\n        $bSet = true;\n\
    \      } else if ($lst[$i] < $b) {\n        $b = $lst[$i];\n      }\n    }\n \
    \ }\n\n  if (!$aSet) {\n    $a = null;\n  }\n\n  if (!$bSet) {\n    $b = null;\n\
    \  }\n\n  return array($a, $b);\n}\n", "    // $lst is an array\n    // $a is\
    \ largest negative integer\n    // $b is smallest positive integer\n    $a = null;\n\
    \    $b = null;\n    // $lst is array(2, 4, 1, 3, 5, 7)\n    // $lst is array()\n\
    \    // $lst is array(0)\n    // $lst is array(-1, -2, -3, 1, 2, 3)\n    // $lst\
    \ is array(-3, -2, -1, 1, 2, 3)\n    for ($i = 0; $i < count($lst); $i++) {\n\
    \        // $lst[$i] is 2\n        // $lst[$i] is 4\n        // $lst[$i] is 1\n\
    \        // $lst[$i] is 3\n        // $lst[$i] is 5\n        // $lst[$i] is 7\n\
    \        // $lst[$i] is \n        // $lst[$i] is 0\n        // $lst[$i] is -1\n\
    \        // $lst[$i] is -2\n        // $lst[$i] is -3\n        // $lst[$i] is\
    \ 1\n        // $lst[$i] is 2\n        // $lst[$i] is 3\n        // $lst[$i] is\
    \ -3\n        // $lst[$i] is -2\n        // $lst[$i] is -1\n        // $lst[$i]\
    \ is 1\n        // $lst[$i] is 2\n        // $lst[$i] is 3\n        if ($lst[$i]\
    \ < 0) {\n            // $lst[$i] is -1\n            // $lst[$i] is -2\n     \
    \       // $lst[$i] is -3\n            // $lst[$i] is -3\n            // $lst[$i]\
    \ is -2\n            // $lst[$i] is -1\n            if ($a == null || $lst[$i]\
    \ > $a) {\n                // $a is", "    $positive_numbers = array();\n    $negative_numbers\
    \ = array();\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i]\
    \ > 0) {\n            array_push($positive_numbers, $lst[$i]);\n        } elseif\
    \ ($lst[$i] < 0) {\n            array_push($negative_numbers, $lst[$i]);\n   \
    \     }\n    }\n    $largest_negative = max($negative_numbers);\n    $smallest_positive\
    \ = min($positive_numbers);\n    if ($largest_negative == NULL) {\n        $largest_negative\
    \ = NULL;\n    }\n    if ($smallest_positive == NULL) {\n        $smallest_positive\
    \ = NULL;\n    }\n    return array($largest_negative, $smallest_positive);\n}\n",
  "  $smallest = array_shift($lst);\n  $largest = $smallest;\n  foreach ($lst as $item)\
    \ {\n    if ($item > 0 && $item < $smallest) {\n      $smallest = $item;\n   \
    \ }\n    if ($item < 0 && $item > $largest) {\n      $largest = $item;\n    }\n\
    \  }\n  if ($smallest > 0) {\n    $smallest = null;\n  }\n  if ($largest < 0)\
    \ {\n    $largest = null;\n  }\n  return array($largest, $smallest);\n}\n", " \
    \   $min = null;\n    $max = null;\n    foreach ($lst as $value) {\n        if\
    \ ($value < 0) {\n            if ($max == null) {\n                $max = $value;\n\
    \            } else if ($value > $max) {\n                $max = $value;\n   \
    \         }\n        } else if ($value > 0) {\n            if ($min == null) {\n\
    \                $min = $value;\n            } else if ($value < $min) {\n   \
    \             $min = $value;\n            }\n        }\n    }\n    return array($max,\
    \ $min);\n}", "    sort($lst);\n    $negatives = array();\n    $positives = array();\n\
    \    foreach ($lst as $num) {\n        if ($num < 0) {\n            array_push($negatives,\
    \ $num);\n        } elseif ($num > 0) {\n            array_push($positives, $num);\n\
    \        }\n    }\n    if (count($negatives) > 0 && count($positives) > 0) {\n\
    \        return array(max($negatives), min($positives));\n    } else {\n     \
    \   return array(null, null);\n    }\n}", "\t$negative = NULL;\n\t$positive =\
    \ NULL;\n\tforeach ($lst as $elem) {\n\t\tif ($elem < 0) {\n\t\t\tif ($negative\
    \ == NULL || $elem > $negative) {\n\t\t\t\t$negative = $elem;\n\t\t\t}\n\t\t}\
    \ else if ($elem > 0) {\n\t\t\tif ($positive == NULL || $elem < $positive) {\n\
    \t\t\t\t$positive = $elem;\n\t\t\t}\n\t\t}\n\t}\n\treturn array($negative, $positive);\n\
    }\n", "    $smallest = null;\n    $largest = null;\n    foreach ($lst as $i) {\n\
    \        if ($i < 0) {\n            if ($largest === null || $i > $largest) {\n\
    \                $largest = $i;\n            }\n        } else if ($i > 0) {\n\
    \            if ($smallest === null || $i < $smallest) {\n                $smallest\
    \ = $i;\n            }\n        }\n    }\n    return array($largest, $smallest);\n\
    }\necho \">>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\\n\";\nprint_r(largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7)));\necho \">>> largest_smallest_integers(array())\\n\";\nprint_r(largest_smallest_integers(array()));\n\
    echo \">>> largest_smallest_integers(array(0))\\n\";\nprint_r(largest_smallest_integers(array(0)));",
  "    // Write your code here\n    $positives = [];\n    $negatives = [];\n    foreach\
    \ ($lst as $number) {\n        if ($number < 0) {\n            $negatives[] =\
    \ $number;\n        } elseif ($number > 0) {\n            $positives[] = $number;\n\
    \        }\n    }\n    if (!empty($positives)) {\n        $smallest = min($positives);\n\
    \    } else {\n        $smallest = null;\n    }\n    if (!empty($negatives)) {\n\
    \        $largest = max($negatives);\n    } else {\n        $largest = null;\n\
    \    }\n    return [$largest, $smallest];\n}\n", "    $positive = NULL;\n    $negative\
    \ = NULL;\n    foreach ($lst as $num) {\n        if ($num > 0 && ($positive ==\
    \ NULL || $num < $positive)) {\n            $positive = $num;\n        }\n   \
    \     if ($num < 0 && ($negative == NULL || $num > $negative)) {\n           \
    \ $negative = $num;\n        }\n    }\n    return array($negative, $positive);\n\
    }\n", "  $pos = null;\n  $neg = null;\n  foreach ($lst as $n) {\n    if ($n <\
    \ 0) {\n      if ($neg === null || $n > $neg) {\n        $neg = $n;\n      }\n\
    \    } else if ($n > 0) {\n      if ($pos === null || $n < $pos) {\n        $pos\
    \ = $n;\n      }\n    }\n  }\n  return array($neg, $pos);\n}\n", "    // Your\
    \ code here\n    $a = max($lst);\n    $b = min($lst);\n    return array($a, $b);\n\
    }\n", "  $negative = NULL;\n  $positive = NULL;\n  for ($i = 0; $i < count($lst);\
    \ $i++) {\n    if ($lst[$i] < 0) {\n      if (is_null($negative) || $lst[$i] >\
    \ $negative) {\n        $negative = $lst[$i];\n      }\n    } elseif ($lst[$i]\
    \ > 0) {\n      if (is_null($positive) || $lst[$i] < $positive) {\n        $positive\
    \ = $lst[$i];\n      }\n    }\n  }\n  return array($negative, $positive);\n}",
  "  $result = array();\n  $smallest = null;\n  $largest = null;\n  foreach ($lst\
    \ as $item) {\n    if ($item >= 0) {\n      if ($smallest === null || $item <\
    \ $smallest) {\n        $smallest = $item;\n      }\n    } else {\n      if ($largest\
    \ === null || $item > $largest) {\n        $largest = $item;\n      }\n    }\n\
    \  }\n  $result[] = $largest;\n  $result[] = $smallest;\n  return $result;\n}\n",
  "\n}", "\t$negs = [];\n\t$pos = null;\n\tforeach ($lst as $i) {\n\t\tif ($i < 0)\n\
    \t\t\t$negs[] = $i;\n\t\telse if ($i > 0) {\n\t\t\tif ($pos === null || $i < $pos)\n\
    \t\t\t\t$pos = $i;\n\t\t}\n\t}\n\tif (count($negs) == 0)\n\t\t$negs = null;\n\t\
    else\n\t\t$negs = max($negs);\n\treturn [$negs, $pos];\n}\n\n$tests = [\n\t[[2,\
    \ 4, 1, 3, 5, 7], [null, 1]],\n\t[[], [null, null]],\n\t[[0], [null, null]],\n\
    \t[[-1, 2, -3, 4, -5, -6, 7], [-1, 2]],\n\t[[-1, -2, -3, -4, -5, -6, -7], [-7,\
    \ null]],\n\t[[1, 2, 3, 4, 5, 6, 7], [null, 1]],\n];\n$failed = 0;\nforeach ($tests\
    \ as $t) {\n\t$res = largest_smallest_integers($t[0]);\n\tif ($res !== $t[1])\
    \ {\n\t\t$failed += 1;\n\t\techo \"Failed: \" . implode(', ', $t[0]) . \" => \"\
    \ . implode(', ', $res) . \", expected \" . implode(', ', $t[1]) . \"\\n\";\n\t\
    }\n}\nif ($failed > 0)\n\techo \"$failed test\" . ($failed == 1 ? '' : 's') .\
    \ \" failed\\n\";\nelse\n\techo \"All tests passed\\n\";", "    $positive = null;\n\
    \    $negative = null;\n    foreach ($lst as $number) {\n        if ($number >=\
    \ 0) {\n            if ($positive == null || $number < $positive) {\n        \
    \        $positive = $number;\n            }\n        } else {\n            if\
    \ ($negative == null || $number > $negative) {\n                $negative = $number;\n\
    \            }\n        }\n    }\n    return array($negative, $positive);\n}\n",
  "    // Type your code here\n}\n", "\t$max = null;\n\t$min = null;\n\tforeach ($lst\
    \ as $value) {\n\t\tif ($value > 0) {\n\t\t\tif ($min === null || $value < $min)\
    \ {\n\t\t\t\t$min = $value;\n\t\t\t}\n\t\t} elseif ($value < 0) {\n\t\t\tif ($max\
    \ === null || $value > $max) {\n\t\t\t\t$max = $value;\n\t\t\t}\n\t\t}\n\t}\n\t\
    return array($max, $min);\n}\n\nprint_r(largest_smallest_integers(array(2, 4,\
    \ 1, 3, 5, 7)));\nprint_r(largest_smallest_integers(array()));\nprint_r(largest_smallest_integers(array(0)));",
  "    if (count($lst) == 0) {\n        return array(null, null);\n    }\n    $neg_array\
    \ = array();\n    $pos_array = array();\n    for ($i = 0; $i < count($lst); $i++)\
    \ {\n        if ($lst[$i] < 0) {\n            array_push($neg_array, $lst[$i]);\n\
    \        } else if ($lst[$i] > 0) {\n            array_push($pos_array, $lst[$i]);\n\
    \        }\n    }\n    if (count($neg_array) == 0) {\n        $neg_array = array(null);\n\
    \    }\n    if (count($pos_array) == 0) {\n        $pos_array = array(null);\n\
    \    }\n    return array(max($neg_array), min($pos_array));\n}\n\n$output = largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7));\nforeach ($output as $item) {\n    echo $item . \"\\n\";\n}",
  "    $largest = null;\n    $smallest = null;\n    foreach ($lst as $item) {\n  \
    \      if ($item > 0) {\n            if ($smallest === null) {\n             \
    \   $smallest = $item;\n            } else {\n                $smallest = min($smallest,\
    \ $item);\n            }\n        } else if ($item < 0) {\n            if ($largest\
    \ === null) {\n                $largest = $item;\n            } else {\n     \
    \           $largest = max($largest, $item);\n            }\n        }\n    }\n\
    \    return array($largest, $smallest);\n}\n", "\t$largestNegative = null;\n\t\
    $smallestPositive = null;\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\tif ($lst[$i]\
    \ < 0) {\n\t\t\tif ($largestNegative == null) {\n\t\t\t\t$largestNegative = $lst[$i];\n\
    \t\t\t} else {\n\t\t\t\tif ($lst[$i] > $largestNegative) {\n\t\t\t\t\t$largestNegative\
    \ = $lst[$i];\n\t\t\t\t}\n\t\t\t}\n\t\t} else if ($lst[$i] > 0) {\n\t\t\tif ($smallestPositive\
    \ == null) {\n\t\t\t\t$smallestPositive = $lst[$i];\n\t\t\t} else {\n\t\t\t\t\
    if ($lst[$i] < $smallestPositive) {\n\t\t\t\t\t$smallestPositive = $lst[$i];\n\
    \t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn array($largestNegative, $smallestPositive);\n\
    }", "  $retarr = array(null, null);\n  $negint = array();\n  $posint = array();\n\
    \  for ($i = 0; $i < count($lst); $i++) {\n    if ($lst[$i] < 0) {\n      array_push($negint,\
    \ $lst[$i]);\n    } elseif ($lst[$i] > 0) {\n      array_push($posint, $lst[$i]);\n\
    \    }\n  }\n  if (!empty($negint)) {\n    $retarr[0] = max($negint);\n  }\n \
    \ if (!empty($posint)) {\n    $retarr[1] = min($posint);\n  }\n  return $retarr;\n\
    }\n", "    sort($lst);\n    $rst = [];\n    if (isset($lst[0]) && $lst[0] < 0)\
    \ {\n        $rst[0] = end($lst);\n    } else {\n        $rst[0] = null;\n   \
    \ }\n    if (isset($lst[0]) && $lst[0] > 0) {\n        $rst[1] = $lst[0];\n  \
    \  } else {\n        $rst[1] = null;\n    }\n    return $rst;\n}\n$lst = [2, 4,\
    \ 1, 3, 5, 7];\nvar_dump(largest_smallest_integers($lst));\n$lst = [];\nvar_dump(largest_smallest_integers($lst));\n\
    $lst = [0];\nvar_dump(largest_smallest_integers($lst));", "\t$pos_lst = [];\n\t\
    $neg_lst = [];\n\tfor ($i = 0; $i < count($lst); $i++) {\n\t\tif ($lst[$i] > 0)\
    \ {\n\t\t\tarray_push($pos_lst, $lst[$i]);\n\t\t} elseif ($lst[$i] < 0) {\n\t\t\
    \tarray_push($neg_lst, $lst[$i]);\n\t\t}\n\t}\n\tif (count($pos_lst) > 0) {\n\t\
    \t$smallest = min($pos_lst);\n\t} else {\n\t\t$smallest = null;\n\t}\n\tif (count($neg_lst)\
    \ > 0) {\n\t\t$largest = max($neg_lst);\n\t} else {\n\t\t$largest = null;\n\t\
    }\n\treturn [$largest, $smallest];\n}\n\n$result = largest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7]);\nprint($result[0] . \" \" . $result[1]);\n", "    $largestNegative\
    \ = null;\n    $smallestPositive = null;\n    foreach ($lst as $value) {\n   \
    \     if ($value < 0) {\n            if ($largestNegative === null || $value >\
    \ $largestNegative) {\n                $largestNegative = $value;\n          \
    \  }\n        } else if ($value > 0) {\n            if ($smallestPositive ===\
    \ null || $value < $smallestPositive) {\n                $smallestPositive = $value;\n\
    \            }\n        }\n    }\n    return array($largestNegative, $smallestPositive);\n\
    }\n", "  // TODO: Write your code here\n}\n", "    if (count($lst) == 0) {\n \
    \       return array(null, null);\n    }\n    $lst = array_unique($lst);\n   \
    \ $filtered_arr = array_filter($lst, function($x) {\n        return $x != 0;\n\
    \    });\n    sort($filtered_arr);\n    $a = end($filtered_arr);\n    $b = reset($filtered_arr);\n\
    \    if ($a == 0 || $b == 0) {\n        return array(null, null);\n    }\n   \
    \ return array($a, $b);\n}\n\necho '<pre>';\nprint_r(largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7)));\necho '</pre>';\necho '<br/>';\necho '<pre>';\nprint_r(largest_smallest_integers(array()));\n\
    echo '</pre>';\necho '<br/>';\necho '<pre>';\nprint_r(largest_smallest_integers(array(0)));\n\
    echo '</pre>';\necho '<br/>';\necho '<pre>';\nprint_r(largest_smallest_integers(array(10,0,\
    \ -10)));\necho '</pre>';\necho '<br/>';", "    $min = $max = null;\n    for ($i\
    \ = 0; $i < count($lst); $i++) {\n        if ($lst[$i] > 0) {\n            if\
    \ ($max === null || $lst[$i] > $max) {\n                $max = $lst[$i];\n   \
    \         }\n        } elseif ($lst[$i] < 0) {\n            if ($min === null\
    \ || $lst[$i] < $min) {\n                $min = $lst[$i];\n            }\n   \
    \     }\n    }\n    return array($min, $max);\n}\n\nprint_r(largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7)));\nprint_r(largest_smallest_integers(array()));\nprint_r(largest_smallest_integers(array(0)));\n\
    print_r(largest_smallest_integers(array(-1, -2, 0, 1, -3, -4, 5, -6, -8, -7, 9)));\n",
  "  $lowest = null;\n  $highest = null;\n  foreach ($lst as $value) {\n    if ($value\
    \ > 0) {\n      if ($highest === null || $value < $highest) {\n        $highest\
    \ = $value;\n      }\n    } elseif ($value < 0) {\n      if ($lowest === null\
    \ || $value > $lowest) {\n        $lowest = $value;\n      }\n    }\n  }\n  return\
    \ array($lowest, $highest);\n}\necho PHP_EOL;\nvar_dump(largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7)));\nvar_dump(largest_smallest_integers(array()));\nvar_dump(largest_smallest_integers(array(0)));\n\
    echo PHP_EOL;", "}\n\nvar_dump(largest_smallest_integers(array(2, 4, 1, 3, 5,\
    \ 7)));\nvar_dump(largest_smallest_integers(array()));\nvar_dump(largest_smallest_integers(array(0)));\n",
  "    $negatives = [];\n    $positives = [];\n    foreach ($lst as $item) {\n   \
    \     if ($item < 0) {\n            $negatives[] = $item;\n        } else if ($item\
    \ > 0) {\n            $positives[] = $item;\n        }\n    }\n    return array(empty($negatives)\
    \ ? null : max($negatives), empty($positives) ? null : min($positives));\n}\n\
    $lst = [2, 4, 1, 3, 5, 7];\necho '<pre>';\nprint_r(largest_smallest_integers($lst));\n\
    echo '</pre>';\n$lst = [];\necho '<pre>';\nprint_r(largest_smallest_integers($lst));\n\
    echo '</pre>';\n$lst = [0];\necho '<pre>';\nprint_r(largest_smallest_integers($lst));\n\
    echo '</pre>';", "    $largest = null;\n    $smallest = null;\n    foreach ($lst\
    \ as $i) {\n        if ($i > 0) {\n            if ($smallest === null || $i <\
    \ $smallest) {\n                $smallest = $i;\n            }\n        } else\
    \ if ($i < 0) {\n            if ($largest === null || $i > $largest) {\n     \
    \           $largest = $i;\n            }\n        }\n    }\n    return array($largest,\
    \ $smallest);\n}\n", "    // Your code goes here!\n    // Don't forget to return\
    \ the correct result!\n    $positive = null;\n    $negative = null;\n    foreach\
    \ ($lst as $item) {\n        if ($item > 0) {\n            if ($positive) {\n\
    \                if ($item < $positive) {\n                    $positive = $item;\n\
    \                }\n            } else {\n                $positive = $item;\n\
    \            }\n        } elseif ($item < 0) {\n            if ($negative) {\n\
    \                if ($item > $negative) {\n                    $negative = $item;\n\
    \                }\n            } else {\n                $negative = $item;\n\
    \            }\n        }\n    }\n    return array($negative, $positive);\n}\n",
  "    $max = $min = null;\n    foreach ($lst as $v) {\n        if ($v > 0) {\n  \
    \          if (is_null($min) || $v < $min) {\n                $min = $v;\n   \
    \         }\n        } elseif ($v < 0) {\n            if (is_null($max) || $v\
    \ > $max) {\n                $max = $v;\n            }\n        }\n    }\n   \
    \ return array($max, $min);\n}\n", "    if (empty($lst)) {\n        return array(null,\
    \ null);\n    }\n    $large = null;\n    $small = null;\n    foreach ($lst as\
    \ $num) {\n        if ($num < 0) {\n            if ($large === null) {\n     \
    \           $large = $num;\n            } else {\n                $large = max($large,\
    \ $num);\n            }\n        } else if ($num > 0) {\n            if ($small\
    \ === null) {\n                $small = $num;\n            } else {\n        \
    \        $small = min($small, $num);\n            }\n        }\n    }\n    return\
    \ array($large, $small);\n}\n\nclass TestLargestSmallestIntegers extends PHPUnit_Framework_TestCase\
    \ {\n    public function testLargestSmallestIntegers() {\n        $this->assertEquals(array(null,\
    \ 1), largest_smallest_integers(array(2, 4, 1, 3, 5, 7)));\n        $this->assertEquals(array(null,\
    \ null), largest_smallest_integers(array()));\n        $this->assertEquals(array(null,\
    \ null), largest_smallest_integers(array(0)));\n        $this->assertEquals(array(-3,\
    \ 1), largest_smallest_integers(array(-2, -4, -1, -3, 1, -7)));\n    }\n}", " \
    \ return array(null, null);\n}\n", "    if (count($lst) == 0) {\n        return\
    \ array(null, null);\n    }\n    $max_neg = null;\n    $min_pos = null;\n    foreach\
    \ ($lst as $num) {\n        if ($num < 0) {\n            if ($max_neg == null\
    \ || $num > $max_neg) {\n                $max_neg = $num;\n            }\n   \
    \     } elseif ($num > 0) {\n            if ($min_pos == null || $num < $min_pos)\
    \ {\n                $min_pos = $num;\n            }\n        }\n    }\n    return\
    \ array($max_neg, $min_pos);\n}\n", "    $a = null;\n    $b = null;\n    foreach\
    \ ($lst as $l) {\n        if ($l < 0 && ($a === null || $l > $a)) {\n        \
    \    $a = $l;\n        }\n        if ($l > 0 && ($b === null || $l < $b)) {\n\
    \            $b = $l;\n        }\n    }\n    return array($a, $b);\n}\n", "  \
    \  if (count($lst) === 0) return array(null, null);\n    $smallest = null;\n \
    \   $largest = null;\n    foreach ($lst as $i) {\n        if ($i > 0) {\n    \
    \        if ($smallest === null || $i < $smallest) $smallest = $i;\n        }\
    \ else if ($i < 0) {\n            if ($largest === null || $i > $largest) $largest\
    \ = $i;\n        }\n    }\n    return array($largest, $smallest);\n}\n", "   \
    \ // YOUR CODE GOES HERE\n    $max_neg=null;\n    $min_pos=null;\n    foreach\
    \ ($lst as $ele) {\n        if ($ele>0) {\n            if ($min_pos==null) {\n\
    \                $min_pos=$ele;\n            } else {\n                if ($ele<$min_pos)\
    \ {\n                    $min_pos=$ele;\n                }\n            }\n  \
    \      } else {\n            if ($max_neg==null) {\n                $max_neg=$ele;\n\
    \            } else {\n                if ($ele>$max_neg) {\n                \
    \    $max_neg=$ele;\n                }\n            }\n        }\n    }\n    return\
    \ array($max_neg, $min_pos);\n}\n", "  // Write code here!\n}\n", "  $negatives\
    \ = [];\n  $positives = [];\n  foreach ($lst as $num) {\n    if ($num < 0) {\n\
    \      $negatives[] = $num;\n    } else if ($num > 0) {\n      $positives[] =\
    \ $num;\n    }\n  }\n  $largest_negative = empty($negatives) ? null : max($negatives);\n\
    \  $smallest_positive = empty($positives) ? null : min($positives);\n  return\
    \ [$largest_negative, $smallest_positive];\n}\n", "    $big_neg = null;\n    $small_pos\
    \ = null;\n    foreach ($lst as $x) {\n        if ($x > 0 && ($small_pos === null\
    \ || $x < $small_pos)) {\n            $small_pos = $x;\n        }\n        if\
    \ ($x < 0 && ($big_neg === null || $x > $big_neg)) {\n            $big_neg = $x;\n\
    \        }\n    }\n    return array($big_neg, $small_pos);\n}", "\n}\n", "}\n",
  "  $a = null;\n  $b = null;\n  foreach ($lst as $i) {\n    if ($i < 0) {\n     \
    \ if ($a === null || $i > $a) {\n        $a = $i;\n      }\n    } else if ($i\
    \ > 0) {\n      if ($b === null || $i < $b) {\n        $b = $i;\n      }\n   \
    \ }\n  }\n  return array($a, $b);\n}", "    $a = null;\n    $b = null;\n    foreach\
    \ ($lst as $num) {\n        if ($num < 0) {\n            if ($a == null || $num\
    \ > $a) {\n                $a = $num;\n            }\n        } else if ($num\
    \ > 0) {\n            if ($b == null || $num < $b) {\n                $b = $num;\n\
    \            }\n        }\n    }\n    return array($a, $b);\n}", "    $mins =\
    \ array();\n    $maxs = array();\n    for ($i = 0; $i < count($lst); $i++) {\n\
    \        if ($lst[$i] < 0) {\n            array_push($mins, $lst[$i]);\n     \
    \   } elseif ($lst[$i] > 0) {\n            array_push($maxs, $lst[$i]);\n    \
    \    }\n    }\n    if (count($mins) > 0 && count($maxs) > 0) {\n        return\
    \ array(min($mins), max($maxs));\n    } else {\n        return array(null, null);\n\
    \    }\n}\n", "    // Write your code here\n    $lst_neg = array();\n    $lst_pos\
    \ = array();\n    foreach ($lst as $i) {\n        if ($i > 0) {\n            array_push($lst_pos,\
    \ $i);\n        } elseif ($i < 0) {\n            array_push($lst_neg, $i);\n \
    \       }\n    }\n    $sorted_neg = $lst_neg;\n    rsort($sorted_neg);\n    $sorted_pos\
    \ = $lst_pos;\n    sort($sorted_pos);\n    if (empty($sorted_neg)) {\n       \
    \ $sorted_neg = array(null);\n    }\n    if (empty($sorted_pos)) {\n        $sorted_pos\
    \ = array(null);\n    }\n    $out = array($sorted_neg[0], $sorted_pos[0]);\n \
    \   return $out;\n}\n$list = array(2, 4, 1, 3, 5, 7);\nprint_r(largest_smallest_integers($list));\n\
    echo \"\\n\";\n$list = array();\nprint_r(largest_smallest_integers($list));\n\
    echo \"\\n\";\n$list = array(0);\nprint_r(largest_smallest_integers($list));\n\
    echo \"\\n\";\n$list = array(-7, -2, 4, -3, -5, 1);\nprint_r(largest_smallest_integers($list));\n\
    echo \"\\n\";\n$list = array(-7, -2, 4, 0, -3, -5, 1);\nprint_r(largest_smallest_integers($list));\n\
    echo \"\\n\";", "  // START WRITING YOUR CODE HERE...\n  $lst1 = $lst2 = array();\n\
    \  foreach ($lst as $index => $val) {\n    if ($val < 0) {\n      $lst1[] = $val;\n\
    \    } else if ($val > 0) {\n      $lst2[] = $val;\n    }\n  }\n  if (empty($lst1))\
    \ {\n    $max = null;\n  } else {\n    $max = max($lst1);\n  }\n  if (empty($lst2))\
    \ {\n    $min = null;\n  } else {\n    $min = min($lst2);\n  }\n  return array($max,\
    \ $min);\n}", "    $lst = array_values(array_filter($lst, function($v) { return\
    \ is_int($v); }));\n    if (count($lst) === 0) return array(null, null);\n   \
    \ $first_pos = array_search(min($lst), $lst);\n    $first_neg = array_search(max($lst),\
    \ $lst);\n    $lst = array_values(array_filter($lst, function($v) { return $v\
    \ > 0; }));\n    $lst2 = array_values(array_filter($lst, function($v) { return\
    \ $v < 0; }));\n    return array($lst2[$first_neg] ?? null, $lst[$first_pos] ??\
    \ null);\n}\n\n$tests = array(\n    array(2, 4, 1, 3, 5, 7),\n    array(),\n \
    \   array(0),\n    array(1),\n    array(-1),\n    array(-1, 2),\n    array(2,\
    \ -1),\n    array(-1, 2, -1),\n    array(1, 2, -1),\n    array(0, 2, -1),\n  \
    \  array(1, 2, -3),\n    array(0, 2, -3),\n    array(0, 2, -3, 1),\n    array(0,\
    \ 2, -3, 1, -1),\n    array(0, 2, -3, 1, -1, -2),\n    array(0, 2, -3, 1, -1,\
    \ -2, -1),\n    array(0, 2, -3, 1, -1, -2, -1, 3),\n    array(0, 2, -3, 1, -1,\
    \ -2, -1, 3, 4),\n    array(0, 2, -3, 1, -1, -2, -1, 3, 4, 5),\n    array(0, 2,\
    \ -3, 1, -1, -2, -1, 3, 4, 5, -5),\n    array(0, 2, -3, 1, -1, -2, -1, 3, 4, 5,\
    \ -5, -4),", "\t$largest_negative = NULL;\n\t$smallest_positive = NULL;\n\tforeach\
    \ ($lst as $item) {\n\t\tif ($item < 0) {\n\t\t\tif ($largest_negative == NULL)\
    \ {\n\t\t\t\t$largest_negative = $item;\n\t\t\t} else {\n\t\t\t\tif ($item > $largest_negative)\
    \ {\n\t\t\t\t\t$largest_negative = $item;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\
    \t\tif ($smallest_positive == NULL) {\n\t\t\t\t$smallest_positive = $item;\n\t\
    \t\t} else {\n\t\t\t\tif ($item < $smallest_positive) {\n\t\t\t\t\t$smallest_positive\
    \ = $item;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn array($largest_negative,\
    \ $smallest_positive);\n}", "\t$ret = array(null, null);\n\t$is_negative = false;\n\
    \t$is_positive = false;\n\t$idx = 0;\n\tforeach ($lst as $item) {\n\t\tif ($item\
    \ < 0) {\n\t\t\tif (!$is_negative) {\n\t\t\t\t$ret[0] = $item;\n\t\t\t\t$is_negative\
    \ = true;\n\t\t\t} else if ($item > $ret[0]) {\n\t\t\t\t$ret[0] = $item;\n\t\t\
    \t}\n\t\t} else if ($item > 0) {\n\t\t\tif (!$is_positive) {\n\t\t\t\t$ret[1]\
    \ = $item;\n\t\t\t\t$is_positive = true;\n\t\t\t} else if ($item < $ret[1]) {\n\
    \t\t\t\t$ret[1] = $item;\n\t\t\t}\n\t\t}\n\t}\n\treturn $ret;\n}", "\treturn array(null,\
    \ null);\n}\n", "\t$lst1 = array_filter($lst, 'is_negative');\n\t$lst2 = array_filter($lst,\
    \ 'is_positive');\n\t$a = max($lst1);\n\t$b = min($lst2);\n\treturn (array($a,\
    \ $b));\n}\n", "  $largest = NULL;\n  $smallest = NULL;\n  foreach ($lst as $item)\
    \ {\n    if ($item < 0) {\n      if ($largest === NULL || $item > $largest) {\n\
    \        $largest = $item;\n      }\n    } else if ($item > 0) {\n      if ($smallest\
    \ === NULL || $item < $smallest) {\n        $smallest = $item;\n      }\n    }\n\
    \  }\n  return array($largest, $smallest);\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
