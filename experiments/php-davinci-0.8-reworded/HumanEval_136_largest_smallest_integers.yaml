name: HumanEval_136_largest_smallest_integers
language: php
prompt: "<?php\n// Create a function that returns an array (a, b), where 'a' is\n\
  // the largest of negative integers, and 'b' is the smallest\n// of positive integers\
  \ in an array.\n// If there is no negative or positive integers, return them as\
  \ null.\n// Examples:\n// >>> largest_smallest_integers(array(2, 4, 1, 3, 5, 7))\n\
  // array(null, 1)\n// >>> largest_smallest_integers(array())\n// array(null, null)\n\
  // >>> largest_smallest_integers(array(0))\n// array(null, null)\nfunction largest_smallest_integers($lst)\
  \ {\n"
tests: "function candidate(...$args) {\n    return largest_smallest_integers(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(array(2, 4, 1, 3, 5, 7)) !== array(null,\
  \ 1)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(2, 4,\
  \ 1, 3, 5, 7, 0)) !== array(null, 1)) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(array(1, 3, 2, 4, 5, 6, -2)) !== array(-2, 1)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(4, 5, 3, 6, 2, 7, -7)) !== array(-7,\
  \ 2)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(7, 3,\
  \ 8, 4, 9, 2, 5, -9)) !== array(-9, 2)) { throw new Exception(\"Test failed!\");\
  \ }\n    if (candidate(array()) !== array(null, null)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(0)) !== array(null, null)) { throw new\
  \ Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -3, -5, -6)) !== array(-1,\
  \ null)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-1,\
  \ -3, -5, -6, 0)) !== array(-1, null)) { throw new Exception(\"Test failed!\");\
  \ }\n    if (candidate(array(-6, -4, -4, -3, 1)) !== array(-3, 1)) { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(array(-6, -4, -4, -3, -100, 1)) !== array(-3,\
  \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $count = count($lst);\n    if ($count === 0) {\n        return\
    \ array(null, null);\n    }\n    $a = null;\n    $b = null;\n    for ($i = 0;\
    \ $i < $count; $i++) {\n        $value = $lst[$i];\n        if ($value < 0) {\n\
    \            if (is_null($a) || $value > $a) {\n                $a = $value;\n\
    \            }\n        } elseif ($value > 0) {\n            if (is_null($b) ||\
    \ $value < $b) {\n                $b = $value;\n            }\n        }\n   \
    \ }\n    return array($a, $b);\n}\n", "    $arr = [null, null];\n    foreach ($lst\
    \ as $el) {\n        if ($el < 0) {\n            if ($arr[0] == null || $el >\
    \ $arr[0]) {\n                $arr[0] = $el;\n            }\n        } else if\
    \ ($el > 0) {\n            if ($arr[1] == null || $el < $arr[1]) {\n         \
    \       $arr[1] = $el;\n            }\n        }\n    }\n    return $arr;\n}\n\
    \nprint_r(largest_smallest_integers(array(2, 4, 1, 3, 5, 7)));\nprint_r(largest_smallest_integers(array()));\n\
    print_r(largest_smallest_integers(array(0)));\n", "    $largest = null;\n    $smallest\
    \ = null;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] <\
    \ 0) {\n            if ($largest === null || $lst[$i] > $largest) {\n        \
    \        $largest = $lst[$i];\n            }\n        } else {\n            if\
    \ ($smallest === null || $lst[$i] < $smallest) {\n                $smallest =\
    \ $lst[$i];\n            }\n        }\n    }\n    return array($largest, $smallest);\n\
    }", "  if (empty($lst)) {\n    return array(null, null);\n  }\n  $maxNegative\
    \ = null;\n  $minPositive = null;\n  foreach ($lst as $item) {\n    if ($item\
    \ < 0) {\n      if ($maxNegative === null || $item > $maxNegative) {\n       \
    \ $maxNegative = $item;\n      }\n    } elseif ($item > 0) {\n      if ($minPositive\
    \ === null || $item < $minPositive) {\n        $minPositive = $item;\n      }\n\
    \    }\n  }\n  return array($maxNegative, $minPositive);\n}\n", "    $a = null;\n\
    \    $b = null;\n    foreach ($lst as $item) {\n        if ($item < 0 && (is_null($a)\
    \ || $item > $a)) {\n            $a = $item;\n        }\n        if ($item > 0\
    \ && (is_null($b) || $item < $b)) {\n            $b = $item;\n        }\n    }\n\
    \    return array($a, $b);\n}\n", "    // YOUR CODE HERE\n    $max_negative =\
    \ null;\n    $min_positive = null;\n    foreach ($lst as $elem) {\n        if\
    \ ($elem > 0) {\n            if (is_null($min_positive) || $elem < $min_positive)\
    \ {\n                $min_positive = $elem;\n            }\n        } elseif ($elem\
    \ < 0) {\n            if (is_null($max_negative) || $elem > $max_negative) {\n\
    \                $max_negative = $elem;\n            }\n        }\n    }\n   \
    \ return array($max_negative, $min_positive);\n}", "    $max_negative = null;\n\
    \    $min_positive = null;\n    foreach ($lst as $value) {\n        if ($value\
    \ < 0 && ($max_negative === null || $value > $max_negative)) {\n            $max_negative\
    \ = $value;\n        }\n        if ($value > 0 && ($min_positive === null || $value\
    \ < $min_positive)) {\n            $min_positive = $value;\n        }\n    }\n\
    \    return array($max_negative, $min_positive);\n}\n", "  if(empty($lst)) {\n\
    \    return array(null, null);\n  }\n  $positives = array();\n  $negatives = array();\n\
    \  foreach($lst as $v) {\n    if($v < 0) {\n      $negatives[] = $v;\n    } else\
    \ if($v > 0) {\n      $positives[] = $v;\n    }\n  }\n  $smallest = min($positives);\n\
    \  $largest = max($negatives);\n  return array($largest, $smallest);\n}\n", " \
    \   if(count($lst) > 0) {\n        $max_int = 0;\n        $min_int = 0;\n    \
    \    foreach($lst as $val) {\n            if($val > 0) {\n                if($min_int\
    \ == 0) {\n                    $min_int = $val;\n                } else if($val\
    \ < $min_int) {\n                    $min_int = $val;\n                }\n   \
    \         } else if($val < 0) {\n                if($max_int == 0) {\n       \
    \             $max_int = $val;\n                } else if($val > $max_int) {\n\
    \                    $max_int = $val;\n                }\n            }\n    \
    \    }\n        return array($max_int, $min_int);\n    } else {\n        return\
    \ array(null, null);\n    }\n}", "    $max = NULL;\n    $min = NULL;\n    foreach\
    \ ($lst as $item) {\n        if ($item >= 0 && ($min == NULL || $item < $min))\
    \ {\n            $min = $item;\n        }\n        if ($item < 0 && ($max == NULL\
    \ || $item > $max)) {\n            $max = $item;\n        }\n    }\n    return\
    \ array($max, $min);\n}\n", "    $a = $b = null;\n    $neg = $pos = [];\n    foreach\
    \ ($lst as $n) {\n        if ($n < 0) {\n            $neg[] = $n;\n        } elseif\
    \ ($n > 0) {\n            $pos[] = $n;\n        }\n    }\n    if (count($neg)\
    \ > 0) {\n        $a = max($neg);\n    }\n    if (count($pos) > 0) {\n       \
    \ $b = min($pos);\n    }\n    return [$a, $b];\n}", "    $smallest_positive =\
    \ null;\n    $largest_negative = null;\n    for ($i = 0; $i < count($lst); $i++)\
    \ {\n        if ($lst[$i] < 0) {\n            if ($largest_negative === null ||\
    \ $lst[$i] > $largest_negative) {\n                $largest_negative = $lst[$i];\n\
    \            }\n        } else if ($lst[$i] > 0) {\n            if ($smallest_positive\
    \ === null || $lst[$i] < $smallest_positive) {\n                $smallest_positive\
    \ = $lst[$i];\n            }\n        }\n    }\n    return array($largest_negative,\
    \ $smallest_positive);\n}\necho '>>> largest_smallest_integers(array(2, 4, 1,\
    \ 3, 5, 7))' . \"\\n\";\nvar_dump(largest_smallest_integers(array(2, 4, 1, 3,\
    \ 5, 7)));\necho '>>> largest_smallest_integers(array())' . \"\\n\";\nvar_dump(largest_smallest_integers(array()));\n\
    echo '>>> largest_smallest_integers(array(0))' . \"\\n\";\nvar_dump(largest_smallest_integers(array(0)));",
  "  $a = null;\n  $b = null;\n  foreach ($lst as $val) {\n    if ($val > 0) {\n \
    \     if ($b === null || $val < $b) {\n        $b = $val;\n      }\n    } elseif\
    \ ($val < 0) {\n      if ($a === null || $val > $a) {\n        $a = $val;\n  \
    \    }\n    }\n  }\n  return array($a, $b);\n}\n", "  $sorted_list = array_unique($lst);\n\
    \  $is_neg_flag = false;\n  $is_pos_flag = false;\n  for ($i = 0; $i < count($sorted_list);\
    \ $i++) {\n    if ($sorted_list[$i] > 0) {\n      $is_pos_flag = true;\n    }\n\
    \    if ($sorted_list[$i] < 0) {\n      $is_neg_flag = true;\n    }\n  }\n  if\
    \ ($is_neg_flag && $is_pos_flag) {\n    $max_neg = -INF;\n    $min_pos = INF;\n\
    \    for ($i = 0; $i < count($sorted_list); $i++) {\n      if ($sorted_list[$i]\
    \ > 0) {\n        if ($sorted_list[$i] < $min_pos) {\n          $min_pos = $sorted_list[$i];\n\
    \        }\n      }\n      if ($sorted_list[$i] < 0) {\n        if ($sorted_list[$i]\
    \ > $max_neg) {\n          $max_neg = $sorted_list[$i];\n        }\n      }\n\
    \    }\n    return array($max_neg, $min_pos);\n  } else {\n    return array(null,\
    \ null);\n  }\n}\n$arr = array(-1, 2, 4, -3, 5, 7);\nprint_r(largest_smallest_integers($arr));",
  "    $neg_max = $pos_min = null;\n    foreach ($lst as $num) {\n        if ($num\
    \ > 0) {\n            if ($pos_min === null) {\n                $pos_min = $num;\n\
    \            } else {\n                $pos_min = min($pos_min, $num);\n     \
    \       }\n        } else if ($num < 0) {\n            if ($neg_max === null)\
    \ {\n                $neg_max = $num;\n            } else {\n                $neg_max\
    \ = max($neg_max, $num);\n            }\n        }\n    }\n    return array($neg_max,\
    \ $pos_min);\n}\n", "    $neg = NULL;\n    $pos = NULL;\n    foreach ($lst as\
    \ $num) {\n        if ($num < 0 && ($neg === NULL || $num > $neg)) {\n       \
    \     $neg = $num;\n        }\n        if ($num > 0 && ($pos === NULL || $num\
    \ < $pos)) {\n            $pos = $num;\n        }\n    }\n    return array($neg,\
    \ $pos);\n}\necho \"========== Start ==========\\n\";\necho \"Function name: largest_smallest_integers\\\
    n\";\necho \"Input:\\n\";\necho \"array(2, 4, 1, 3, 5, 7)\\n\";\n$lst = array(2,\
    \ 4, 1, 3, 5, 7);\necho \"Output:\\n\";\nprint_r(largest_smallest_integers($lst));\n\
    echo \"Input:\\n\";\necho \"array()\\n\";\n$lst = array();\necho \"Output:\\n\"\
    ;\nprint_r(largest_smallest_integers($lst));\necho \"Input:\\n\";\necho \"array(0)\\\
    n\";\n$lst = array(0);\necho \"Output:\\n\";\nprint_r(largest_smallest_integers($lst));\n\
    echo \"========== Finish ==========\\n\";\necho \"\\n\";\n", "    $a = $b = null;\n\
    \    foreach ($lst as $item) {\n        if ($item > 0) {\n            if ($b ===\
    \ null || $item < $b) {\n                $b = $item;\n            }\n        }\
    \ elseif ($item < 0) {\n            if ($a === null || $item > $a) {\n       \
    \         $a = $item;\n            }\n        }\n    }\n    return array($a, $b);\n\
    }", "  $smallest = null;\n  $largest = null;\n  $i = 0;\n  while ($i < count($lst))\
    \ {\n    if ($lst[$i] < 0) {\n      if ($largest == null || $lst[$i] > $largest)\
    \ {\n        $largest = $lst[$i];\n      }\n    } else if ($lst[$i] > 0) {\n \
    \     if ($smallest == null || $lst[$i] < $smallest) {\n        $smallest = $lst[$i];\n\
    \      }\n    }\n    $i++;\n  }\n  return array($largest, $smallest);\n}\n\nvar_dump(largest_smallest_integers(array(2,\
    \ 4, 1, 3, 5, 7)));\nvar_dump(largest_smallest_integers(array()));\nvar_dump(largest_smallest_integers(array(0)));\n\
    var_dump(largest_smallest_integers(array(-1, -2, -3, -4, -5)));\nvar_dump(largest_smallest_integers(array(1,\
    \ 2, 3, 4, 5)));\nvar_dump(largest_smallest_integers(array(-1, -2, -3, 4, 5)));",
  "\t$max = NULL;\n\t$min = NULL;\n\tforeach ($lst as $num) {\n\t\tif ($num > 0 &&\
    \ ($min == NULL || $num < $min)) {\n\t\t\t$min = $num;\n\t\t}\n\t\tif ($num <\
    \ 0 && ($max == NULL || $num > $max)) {\n\t\t\t$max = $num;\n\t\t}\n\t}\n\treturn\
    \ array($max, $min);\n}\n", "    // write your code here\n    $c=-1;\n    $d=1;\n\
    \    $a=NULL;\n    $b=NULL;\n    foreach ($lst as $key => $value) {\n        if($value<0\
    \ && $value>$c){\n            $c=$value;\n        }\n        if($value>0 && $value<$d){\n\
    \            $d=$value;\n        }\n    }\n    if($c!=-1){\n        $a=$c;\n \
    \   }\n    if($d!=1){\n        $b=$d;\n    }\n    $result=array($a,$b);\n    return\
    \ $result;\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
