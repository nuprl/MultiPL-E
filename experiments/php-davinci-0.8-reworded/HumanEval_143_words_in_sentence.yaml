name: HumanEval_143_words_in_sentence
language: php
prompt: "<?php\n// You are given a string representing a sentence,\n// the sentence\
  \ contains some words separated by a space,\n// and you have to return a string\
  \ that contains the words from the original sentence,\n// whose lengths are prime\
  \ numbers,\n// the order of the words in the new string should be the same as the\
  \ original one.\n// Example 1:\n// >>> words_in_sentence(\"This is a test\")\n//\
  \ \"is\"\n// Example 2:\n// >>> words_in_sentence(\"lets go for swimming\")\n//\
  \ \"go for\"\n// Constraints:\n// * 1 <= len(sentence) <= 100\n// * sentence contains\
  \ only letters\nfunction words_in_sentence($sentence) {\n"
tests: "function candidate(...$args) {\n    return words_in_sentence(...$args);\n\
  }\n\nfunction test(): void {\n    if (candidate(\"This is a test\") !== \"is\")\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"lets go for swimming\"\
  ) !== \"go for\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
  there is no place available here\") !== \"there is no place\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"Hi I am Hussein\") !== \"Hi am Hussein\"\
  ) { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"go for it\") !==\
  \ \"go for it\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
  here\") !== \"\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(\"\
  here is\") !== \"is\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $is_prime = function($n) {\n    for ($i = 2; $i < $n; $i++) {\n \
    \     if ($n % $i == 0) {\n        return false;\n      }\n    }\n    return true;\n\
    \  };\n  $words = explode(' ', $sentence);\n  $result = [];\n  foreach ($words\
    \ as $word) {\n    if ($is_prime(strlen($word))) {\n      $result[] = $word;\n\
    \    }\n  }\n  return implode(' ', $result);\n}", "  $split_sentence = explode(\"\
    \ \", $sentence);\n  $prime_word = [];\n  foreach ($split_sentence as $word) {\n\
    \    if (is_prime(strlen($word))) {\n      $prime_word[] = $word;\n    }\n  }\n\
    \  return implode(\" \", $prime_word);\n}\n", "\t$splitSentence = explode(\" \"\
    , $sentence);\n\t$returnString = \"\";\n\tforeach ($splitSentence as $word) {\n\
    \t\tif (isPrime(strlen($word))) {\n\t\t\t$returnString .= $word . \" \";\n\t\t\
    }\n\t}\n\treturn $returnString;\n}", "    // Your code here\n}", "\t$words = explode('\
    \ ', $sentence);\n\t$primes = primes_in_array($words);\n\t$filtered = array_filter($words,\
    \ function($word) use ($primes) {\n\t\t$length = strlen($word);\n\t\treturn in_array($length,\
    \ $primes);\n\t});\n\treturn implode(' ', $filtered);\n}\n", "  // your code here...\n\
    }", "\n}", "\t$sentence = explode(\" \", $sentence);\n\t$newSentence = array();\n\
    \tforeach ($sentence as $word) {\n\t\tif (isPrime(strlen($word))) {\n\t\t\tarray_push($newSentence,\
    \ $word);\n\t\t}\n\t}\n\treturn implode(\" \", $newSentence);\n}", "\t$sentence_arr\
    \ = explode(\" \", $sentence);\n\t$result = array();\n\tforeach ($sentence_arr\
    \ as $index => $word) {\n\t\t$word_length = strlen($word);\n\t\tif(prime_number($word_length))\
    \ {\n\t\t\tarray_push($result, $word);\n\t\t}\n\t}\n\treturn implode(\" \", $result);\n\
    }\n", "    $sentence = explode(' ', $sentence);\n    $result = [];\n    for ($i\
    \ = 0; $i < count($sentence); $i++) {\n        if (is_prime(strlen($sentence[$i])))\
    \ {\n            $result[] = $sentence[$i];\n        }\n    }\n    return implode('\
    \ ', $result);\n}\n", "  // Write your code here\n  // Good luck!\n}", "    $sentence\
    \ = explode(' ', $sentence);\n    foreach ($sentence as $key => $value) {\n  \
    \      if (is_prime($value)) {\n            $return .= $value . ' ';\n       \
    \ }\n    }\n    return $return;\n}", "    $sentence = trim($sentence);\n    $words\
    \ = explode(' ', $sentence);\n    $prime_words = array();\n    foreach ($words\
    \ as $word) {\n        if (is_prime(strlen($word))) {\n            $prime_words[]\
    \ = $word;\n        }\n    }\n    return implode(' ', $prime_words);\n}", "  $words\
    \ = explode(' ', $sentence);\n  $primes = get_primes(100);\n  $results = [];\n\
    \  foreach ($words as $word) {\n    if (in_array(strlen($word), $primes)) {\n\
    \      $results[] = $word;\n    }\n  }\n  return implode(' ', $results);\n}",
  "  $sentence = explode(' ', $sentence);\n  $prime_words = [];\n  foreach ($sentence\
    \ as $word) {\n    if (is_prime(strlen($word))) {\n      $prime_words[] = $word;\n\
    \    }\n  }\n  return implode(' ', $prime_words);\n}", "    $words = explode('\
    \ ', $sentence);\n    $result = [];\n    foreach ($words as $word) {\n       \
    \ if (is_prime(strlen($word))) {\n            $result[] = $word;\n        }\n\
    \    }\n    return implode(' ', $result);\n}\n", "  // your code here\n}", " \
    \   $sentence = explode(' ', $sentence);\n    foreach ($sentence as $word) {\n\
    \        if (strlen($word) == 2) {\n            continue;\n        }\n       \
    \ $is_prime = true;\n        for ($i = 2; $i < strlen($word); $i++) {\n      \
    \      if ((strlen($word) % $i) == 0) {\n                $is_prime = false;\n\
    \                break;\n            }\n        }\n        if ($is_prime) {\n\
    \            $new_sentence[] = $word;\n        }\n    }\n    return implode('\
    \ ', $new_sentence);\n}", "    $words = explode(' ', $sentence);\n    $prime_words\
    \ = array();\n    foreach ($words as $word) {\n        if (is_prime(strlen($word)))\
    \ {\n            $prime_words[] = $word;\n        }\n    }\n    return implode('\
    \ ', $prime_words);\n}\n", "    $split = explode(\" \", $sentence);\n    $newArray\
    \ = [];\n    foreach ($split as $words) {\n        $length = strlen($words);\n\
    \        if (isPrime($length)) {\n            array_push($newArray, $words);\n\
    \        }\n    }\n    return implode(\" \", $newArray);\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
