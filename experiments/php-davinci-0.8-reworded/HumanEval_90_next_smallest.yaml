name: HumanEval_90_next_smallest
language: php
prompt: "<?php\n// You are given an array of integers.\n// Write a function next_smallest()\
  \ that returns the 2nd smallest element of the array.\n// Return null if there is\
  \ no such element.\n// >>> next_smallest(array(1, 2, 3, 4, 5))\n// 2\n// >>> next_smallest(array(5,\
  \ 1, 4, 3, 2))\n// 2\n// >>> next_smallest(array())\n// null\n// >>> next_smallest(array(1,\
  \ 1))\n// null\nfunction next_smallest($lst) {\n"
tests: "function candidate(...$args) {\n    return next_smallest(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(array(1, 2, 3, 4, 5)) !== 2) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(5, 1, 4, 3, 2)) !==\
  \ 2) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !==\
  \ null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1, 1))\
  \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 1, 1, 1, 0)) !== 1) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 1)) !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(-35,\
  \ 34, 12, -45)) !== -35) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["\tif (empty($lst)) return null;\n\tif (count($lst) == 1) return null;\n\
    \t$sml = min($lst);\n\t$secsml = null;\n\tforeach ($lst as $num) {\n\t\tif ($num\
    \ > $sml) {\n\t\t\tif ($secsml == null) $secsml = $num;\n\t\t\telse {\n\t\t\t\t\
    if ($num < $secsml) $secsml = $num;\n\t\t\t}\n\t\t}\n\t}\n\treturn $secsml;\n\
    }\necho next_smallest(array(1, 2, 3, 4, 5));\necho \"<br>\";\necho next_smallest(array(5,\
    \ 1, 4, 3, 2));\necho \"<br>\";\necho next_smallest(array());\necho \"<br>\";\n\
    echo next_smallest(array(1, 1));\necho \"<br>\";\necho next_smallest(array(1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10));\necho \"<br>\";\necho next_smallest(array(10,\
    \ 9, 8, 7, 6, 5, 4, 3, 2, 1));\necho \"<br>\";", "  if (count($lst) < 2) {\n \
    \   return null;\n  }\n\n  $min = min($lst);\n  $min_index = array_search($min,\
    \ $lst);\n  unset($lst[$min_index]);\n  $min2 = min($lst);\n  if ($min == $min2)\
    \ {\n    return null;\n  }\n  return $min2;\n}\n\necho next_smallest([1, 2, 3,\
    \ 4, 5]) . PHP_EOL;\necho next_smallest([5, 1, 4, 3, 2]) . PHP_EOL;\necho next_smallest([])\
    \ . PHP_EOL;\necho next_smallest([1, 1]) . PHP_EOL;", "  if (count($lst) < 2)\
    \ {\n    return null;\n  }\n\n  $min = array_shift($lst);\n  $sec_min = PHP_INT_MAX;\n\
    \  foreach ($lst as $curr) {\n    if ($curr < $min) {\n      $sec_min = $min;\n\
    \      $min = $curr;\n    } else if ($curr < $sec_min) {\n      $sec_min = $curr;\n\
    \    }\n  }\n\n  return $sec_min;\n}\n\nassert(2 == next_smallest([1, 2, 3, 4,\
    \ 5]));\nassert(2 == next_smallest([5, 1, 4, 3, 2]));\nassert(null == next_smallest([]));\n\
    assert(null == next_smallest([1, 1]));", "    if (count($lst) < 2) {\n       \
    \ return null;\n    }\n    $min = $max = $lst[0];\n    for ($i = 1; $i < count($lst);\
    \ $i++) {\n        if ($lst[$i] < $min) {\n            $min = $lst[$i];\n    \
    \    }\n        if ($lst[$i] > $max) {\n            $max = $lst[$i];\n       \
    \ }\n    }\n    $flag = array_fill($min, $max, false);\n    for ($i = 0; $i <\
    \ count($lst); $i++) {\n        $flag[$lst[$i]] = true;\n    }\n    for ($i =\
    \ $min + 1; $i < $max; $i++) {\n        if ($flag[$i]) {\n            return $i;\n\
    \        }\n    }\n    return null;\n}\n", "\t$cnt = count($lst);\n\tif ($cnt\
    \ < 2) {\n\t\treturn null;\n\t}\n\tsort($lst);\n\treturn $lst[1];\n}\n\n$a = array(1,\
    \ 2, 3, 4, 5);\n$b = array(5, 1, 4, 3, 2);\n$c = array();\n$d = array(1, 1);\n\
    \n$result = next_smallest($a);\nprint_r($result);\necho \"\\n\";\n\n$result =\
    \ next_smallest($b);\nprint_r($result);\necho \"\\n\";\n\n$result = next_smallest($c);\n\
    print_r($result);\necho \"\\n\";\n\n$result = next_smallest($d);\nprint_r($result);\n\
    echo \"\\n\";", "    $sorted = $lst;\n    sort($sorted);\n    $cur_min = $sorted[0];\n\
    \    for ($i = 1; $i < count($sorted); $i++) {\n        if ($sorted[$i] > $cur_min)\
    \ {\n            return $sorted[$i];\n        }\n    }\n    return null;\n}\n",
  "\t$nextSmallest = NULL;\n\tif (count($lst) == 0) return $nextSmallest;\n\t$smallest\
    \ = NULL;\n\tforeach ($lst as $num) {\n\t\tif ($smallest == NULL) {\n\t\t\t$smallest\
    \ = $num;\n\t\t} else if ($num < $smallest) {\n\t\t\t$nextSmallest = $smallest;\n\
    \t\t\t$smallest = $num;\n\t\t} else if ($num < $nextSmallest || $nextSmallest\
    \ == NULL) {\n\t\t\t$nextSmallest = $num;\n\t\t}\n\t}\n\treturn $nextSmallest;\n\
    }\n\necho '<pre>';\necho next_smallest(array(1, 2, 3, 4, 5));\necho next_smallest(array(5,\
    \ 1, 4, 3, 2));\necho next_smallest(array());\necho next_smallest(array(1, 1));\n\
    echo '</pre>';", "\tif (empty($lst)) {\n\t\treturn null;\n\t}\n\t$largest = null;\n\
    \t$second_largest = null;\n\tforeach ($lst as $val) {\n\t\tif ($val > $largest)\
    \ {\n\t\t\t$second_largest = $largest;\n\t\t\t$largest = $val;\n\t\t} else if\
    \ ($val > $second_largest) {\n\t\t\t$second_largest = $val;\n\t\t}\n\t}\n\treturn\
    \ $second_largest;\n}\n$lst = [3, 4, 1, 2, 5];\n$r = next_smallest($lst);\nprint_r($r);",
  "    // Your code here\n    return null;\n}\n", "    $count = count($lst);\n   \
    \ if($count<2) return null;\n    $s = min($lst);\n    $s2 = null;\n    $s2i =\
    \ null;\n    for($i=0; $i<$count; $i++) {\n        if($lst[$i]==$s) continue;\n\
    \        if($s2===null || $lst[$i]<$s2) {\n            $s2 = $lst[$i];\n     \
    \       $s2i = $i;\n        }\n    }\n    return $s2;\n}", "  $n = count($lst);\n\
    \  if ($n < 2) {\n    return null;\n  }\n  $lst = array_unique($lst);\n  sort($lst);\n\
    \  if (count($lst) < 2) {\n    return null;\n  }\n  return $lst[1];\n}\necho next_smallest([1,\
    \ 2, 3, 4, 5]);\necho PHP_EOL;\necho next_smallest([5, 1, 4, 3, 2]);\necho PHP_EOL;\n\
    echo next_smallest([]);\necho PHP_EOL;\necho next_smallest([1, 1]);\necho PHP_EOL;",
  "  sort($lst);\n  $lst = array_unique($lst);\n  if (count($lst) < 2) {\n    return\
    \ null;\n  }\n  return $lst[1];\n}\n\necho next_smallest([5, 1, 4, 3, 2]);\necho\
    \ next_smallest([1, 2, 3, 4, 5]);\necho next_smallest([]);\necho next_smallest([1,\
    \ 1]);", "  sort($lst);\n  $cur = null;\n  $next = null;\n  for ($i = 0; $i <\
    \ count($lst); $i++) {\n    if ($cur === null) {\n      $cur = $lst[$i];\n   \
    \ } else if ($cur !== $lst[$i]) {\n      $next = $lst[$i];\n      break;\n   \
    \ }\n  }\n  return $next;\n}\n", "  $min = min($lst);\n  $i = 0;\n  while (sizeof($lst)\
    \ > $i) {\n    if ($lst[$i] == $min) {\n      unset($lst[$i]);\n    }\n    $i++;\n\
    \  }\n  if (sizeof($lst) > 0) {\n    return min($lst);\n  } else {\n    return\
    \ null;\n  }\n}\nprint next_smallest(array(1, 2, 3, 4, 5)) . \"\\n\";\nprint next_smallest(array(5,\
    \ 1, 4, 3, 2)) . \"\\n\";\nprint next_smallest(array()) . \"\\n\";\nprint next_smallest(array(1,\
    \ 1)) . \"\\n\";", "\tsort($lst);\n\t$last = null;\n\tforeach ($lst as $num) {\n\
    \t\tif ($num == $last) continue;\n\t\tif ($last) return $last;\n\t\t$last = $num;\n\
    \t}\n\treturn null;\n}\n", "\tif (count($lst) < 2) {\n\t\treturn null;\n\t}\n\t\
    if (count($lst) == 2) {\n\t\tif ($lst[0] == $lst[1]) {\n\t\t\treturn null;\n\t\
    \t}\n\t}\n\tif (count($lst) == 2) {\n\t\tif ($lst[0] > $lst[1]) {\n\t\t\treturn\
    \ $lst[1];\n\t\t}\n\t\telse {\n\t\t\treturn $lst[0];\n\t\t}\n\t}\n\t$smallest\
    \ = $lst[0];\n\t$next = $lst[1];\n\tforeach ($lst as $val) {\n\t\tif ($val < $smallest)\
    \ {\n\t\t\t$next = $smallest;\n\t\t\t$smallest = $val;\n\t\t}\n\t\telse if ($val\
    \ < $next) {\n\t\t\t$next = $val;\n\t\t}\n\t}\n\treturn $next;\n}\n", "    //\
    \ Your code here\n    $count = count($lst);\n    // if the array is empty\n  \
    \  if ($count == 0) return null;\n    // if the array has 1 element\n    if ($count\
    \ == 1) return null;\n    // if the array has 2 elements\n    if ($count == 2)\
    \ {\n        if ($lst[0] == $lst[1]) return null;\n        else return $lst[1];\n\
    \    }\n    // if the array has more than 2 elements\n    // sort the array in\
    \ ascending order\n    // we can use the natcasesort function\n    natcasesort($lst);\n\
    \    // check if there is two or more duplicated element\n    for ($i = 0; $i\
    \ < $count; $i++) {\n        // if so, there is no 2nd smallest element\n    \
    \    if ($lst[$i] == $lst[$i+1]) return null;\n    }\n    // return the 2nd smallest\
    \ element\n    return $lst[1];\n}\n\n$lst = array(1, 2, 3, 4, 5);\necho next_smallest($lst)\
    \ . \"<br/>\";\n\n$lst = array(5, 1, 4, 3, 2);\necho next_smallest($lst) . \"\
    <br/>\";\n\n$lst = array();\necho next_smallest($lst) . \"<br/>\";\n\n$lst = array(1,\
    \ 1);\necho next_smallest($lst) . \"<br/>\";\n\n$lst = array(1, 2, 3, 4, 5, 1);\n\
    echo next_smallest($lst) . \"<br/>\";\n\n$lst = array(1, 1, 1, 1, 1, 1);\necho\
    \ next_smallest($lst) . \"<br/>\";\n\n$lst = array(1, 2, 3, 4, 5, 2);\necho next_smallest($lst)\
    \ . \"<br/>\";\n\n$lst = array(1, 2, 3, 4, 5, 6);\necho next_smallest($lst) .\
    \ \"<br/>\";\n", "  if (count($lst) == 0) {\n    return null;\n  } else if (count($lst)\
    \ == 1) {\n    return null;\n  } else {\n    sort($lst);\n    return $lst[1];\n\
    \  }\n}\n\n$lst = [1, 2, 3, 4, 5];\nprint(next_smallest($lst).\"\\n\");\n$lst\
    \ = [5, 1, 4, 3, 2];\nprint(next_smallest($lst).\"\\n\");\n$lst = [];\nprint(next_smallest($lst).\"\
    \\n\");\n$lst = [1, 1];\nprint(next_smallest($lst).\"\\n\");", "    if (count($lst)\
    \ < 2) {\n        return null;\n    }\n    $sm = min($lst);\n    $lst = array_diff($lst,\
    \ [$sm]);\n    return min($lst);\n}\n\nprint_r(next_smallest([1, 2, 3, 4, 5])\
    \ . \"\\n\");\nprint_r(next_smallest([5, 1, 4, 3, 2]) . \"\\n\");\nprint_r(next_smallest([])\
    \ . \"\\n\");\nprint_r(next_smallest([1, 1]) . \"\\n\");", "    // your code here\n\
    }", "  $smallest = null;\n  $nsmallest = null;\n  foreach ($lst as $elem) {\n\
    \    if ($smallest === null) {\n      $smallest = $elem;\n    } elseif ($elem\
    \ < $smallest) {\n      $nsmallest = $smallest;\n      $smallest = $elem;\n  \
    \  } elseif ($nsmallest === null || $elem < $nsmallest) {\n      $nsmallest =\
    \ $elem;\n    }\n  }\n  return $nsmallest;\n}\n", "    $n = count($lst);\n   \
    \ if ($n < 2) {\n        return null;\n    }\n    $min1 = null;\n    $min2 = null;\n\
    \    for ($i = 0; $i < $n; $i++) {\n        if ($min1 === null || $lst[$i] < $min1)\
    \ {\n            $min2 = $min1;\n            $min1 = $lst[$i];\n        } else\
    \ if ($min2 === null || $lst[$i] < $min2) {\n            $min2 = $lst[$i];\n \
    \       }\n    }\n    return $min2;\n}\nprint_r(next_smallest([1, 2, 3, 4, 5]));\n\
    print_r(next_smallest([5, 1, 4, 3, 2]));\nprint_r(next_smallest([]));\nprint_r(next_smallest([1,\
    \ 1]));", "    if (count($lst) < 2) {\n        return null;\n    }\n    sort($lst);\n\
    \    $last = $lst[0];\n    $second = null;\n    foreach ($lst as $item) {\n  \
    \      if ($item != $last) {\n            $second = $item;\n            break;\n\
    \        }\n        $last = $item;\n    }\n    return $second;\n}", "    $smallest\
    \ = array_pop($lst);\n    $nextSmallest = array_pop($lst);\n    if ($smallest\
    \ == $nextSmallest) {\n        return null;\n    }\n    while ($smallest <= $nextSmallest)\
    \ {\n        $smallest = $nextSmallest;\n        $nextSmallest = array_pop($lst);\n\
    \    }\n    return $nextSmallest;\n}", "    $min1 = INF;\n    $min2 = INF;\n \
    \   foreach ($lst as $e) {\n        if ($e < $min1) {\n            $min2 = $min1;\n\
    \            $min1 = $e;\n        } else if ($e < $min2) {\n            $min2\
    \ = $e;\n        }\n    }\n    return $min2 < INF ? $min2 : null;\n}\n\nprint_r(next_smallest([1,\
    \ 2, 3, 4, 5]));\nprint_r(next_smallest([5, 1, 4, 3, 2]));\nprint_r(next_smallest([]));\n\
    print_r(next_smallest([1, 1]));", "    // Your code here\n}", "    if (empty($lst))\
    \ return null;\n    $smallest = min($lst);\n    $new_lst = array_diff($lst, array($smallest));\n\
    \    return min($new_lst);\n}", "  $unique_lst = array_unique($lst);\n  sort($unique_lst);\n\
    \  return count($unique_lst) > 1 ? $unique_lst[1] : null;\n}\necho next_smallest([5,\
    \ 1, 4, 3, 2]);", "\t$unique = array_unique($lst);\n\tsort($unique);\n\t$len =\
    \ count($unique);\n\tif ($len < 2) {\n\t\treturn null;\n\t}\n\treturn $unique[1];\n\
    }\n\n$lst = array(1, 2, 3, 4, 5);\n$lst2 = array(5, 1, 4, 3, 2);\n$lst3 = array();\n\
    $lst4 = array(1, 1);\n\necho next_smallest($lst).\"\\n\";\necho next_smallest($lst2).\"\
    \\n\";\necho next_smallest($lst3).\"\\n\";\necho next_smallest($lst4).\"\\n\";",
  "    if (count($lst) < 2) {\n        return null;\n    }\n\n    $sorted_lst = $lst;\n\
    \    sort($sorted_lst);\n    $unique_lst = array_unique($sorted_lst);\n\n    if\
    \ (count($unique_lst) < 2) {\n        return null;\n    }\n\n    return $unique_lst[1];\n\
    }\n\n$lst = [1, 2, 3, 4, 5];\n$lst1 = [5, 1, 4, 3, 2];\n$lst2 = [];\n$lst3 = [1,\
    \ 1];\n\nvar_dump(next_smallest($lst));\nvar_dump(next_smallest($lst1));\nvar_dump(next_smallest($lst2));\n\
    var_dump(next_smallest($lst3));", "    $s = sort($lst);\n    $s = array_unique($s);\n\
    \    $c = count($s);\n    if ($c < 2) {\n        return null;\n    }\n    return\
    \ $s[1];\n}\n\nassert(null === next_smallest([]));\nassert(null === next_smallest([1,\
    \ 1]));\nassert(2 === next_smallest([1, 2, 3, 4, 5]));\nassert(2 === next_smallest([5,\
    \ 1, 4, 3, 2]));", "  $smallest = PHP_INT_MAX;\n  $second_smallest = PHP_INT_MAX;\n\
    \  for ($i = 0; $i < count($lst); $i++) {\n    if ($lst[$i] < $smallest) {\n \
    \     $second_smallest = $smallest;\n      $smallest = $lst[$i];\n    } else if\
    \ ($lst[$i] < $second_smallest) {\n      $second_smallest = $lst[$i];\n    }\n\
    \  }\n  if ($second_smallest == PHP_INT_MAX) {\n    return null;\n  }\n  return\
    \ $second_smallest;\n}\n\nprint(\"Second smallest of [1, 2, 3, 4, 5]: \" . next_smallest([1,\
    \ 2, 3, 4, 5]) . \"\\n\");\nprint(\"Second smallest of [5, 1, 4, 3, 2]: \" . next_smallest([5,\
    \ 1, 4, 3, 2]) . \"\\n\");\nprint(\"Second smallest of []: \" . next_smallest([])\
    \ . \"\\n\");\nprint(\"Second smallest of [1, 1]: \" . next_smallest([1, 1]) .\
    \ \"\\n\");", "  $lst = array_unique($lst);\n  sort($lst);\n  if (count($lst)\
    \ < 2) {\n    return null;\n  }\n  return $lst[1];\n}\n", "  $smallest_pos = -1;\n\
    \  $second_smallest_pos = -1;\n  for ($i = 0; $i < count($lst); $i++) {\n    if\
    \ ($smallest_pos == -1 || $lst[$i] < $lst[$smallest_pos]) {\n      $second_smallest_pos\
    \ = $smallest_pos;\n      $smallest_pos = $i;\n    } else if ($second_smallest_pos\
    \ == -1 || $lst[$i] < $lst[$second_smallest_pos]) {\n      $second_smallest_pos\
    \ = $i;\n    }\n  }\n  if ($second_smallest_pos == -1) {\n    return null;\n \
    \ } else {\n    return $lst[$second_smallest_pos];\n  }\n}\n", "    if(count($lst)\
    \ < 2) return null;\n    $copy = $lst;\n    sort($copy);\n    $smallest = $copy[0];\n\
    \    $secelement = null;\n    foreach($copy as $index => $ele) {\n        if($index\
    \ == 0) continue;\n        if($ele == $smallest) continue;\n        $secelement\
    \ = $ele;\n        break;\n    }\n    return $secelement;\n}", "    sort($lst);\n\
    \    if (count($lst) < 2) {\n        return null;\n    }\n    $smallest = $lst[0];\n\
    \    $prev = $smallest;\n    foreach ($lst as $l) {\n        if ($l == $prev)\
    \ {\n            continue;\n        }\n        if ($l > $smallest) {\n       \
    \     return $l;\n        }\n        $prev = $l;\n    }\n    return null;\n}\n\
    echo \"Given the array [1, 2, 3, 4, 5], next_smallest should return 2:\\n\";\n\
    $r = next_smallest([1, 2, 3, 4, 5]);\nvar_dump($r);\necho \"Given the array [5,\
    \ 1, 4, 3, 2], next_smallest should return 2:\\n\";\n$r = next_smallest([5, 1,\
    \ 4, 3, 2]);\nvar_dump($r);\necho \"Given the array [], next_smallest should return\
    \ null:\\n\";\n$r = next_smallest([]);\nvar_dump($r);\necho \"Given the array\
    \ [1, 1], next_smallest should return null:\\n\";\n$r = next_smallest([1, 1]);\n\
    var_dump($r);", "\tif (count($lst) < 2) {\n\t\treturn null;\n\t}\n\t$min = $lst[0];\n\
    \t$i = 1;\n\tfor ($i = 1; $i < count($lst); $i++) {\n\t\tif ($lst[$i] < $min)\
    \ {\n\t\t\t$min = $lst[$i];\n\t\t}\n\t}\n\t$next_min = null;\n\tfor ($i = 0; $i\
    \ < count($lst); $i++) {\n\t\tif ($lst[$i] < $next_min && $lst[$i] > $min) {\n\
    \t\t\t$next_min = $lst[$i];\n\t\t}\n\t}\n\treturn $next_min;\n}\nprint_r(next_smallest(array(1,\
    \ 2, 3, 4, 5)));\nprint_r(next_smallest(array(5, 1, 4, 3, 2)));\nprint_r(next_smallest(array()));\n\
    print_r(next_smallest(array(1, 1)));\n", "  sort($lst);\n  if (isset($lst[1]))\
    \ {\n    return $lst[1];\n  }\n  return null;\n}\n", "    if (count($lst) < 2)\
    \ {\n        return null;\n    }\n    $min = min($lst);\n    $index = array_search($min,\
    \ $lst);\n    unset($lst[$index]);\n    return min($lst);\n}\n", "\tif(count($lst)\
    \ < 2) return null;\n\t$arr = array_count_values($lst);\n\t$val = min($arr);\n\
    \tif(count($arr) == 1) return null;\n\tfor($i = 0; $i < count($lst); $i++) {\n\
    \t\tif($lst[$i] == $val) {\n\t\t\tcontinue;\n\t\t}\n\t\t$temp = $lst[$i];\n\t\t\
    for($j = $i + 1; $j < count($lst); $j++) {\n\t\t\tif($lst[$j] < $temp) {\n\t\t\
    \t\t$temp = $lst[$j];\n\t\t\t}\n\t\t}\n\t\tif($temp != $val) {\n\t\t\treturn $temp;\n\
    \t\t}\n\t}\n}\n\n$lst = array(1, 2, 3, 4, 5);\necho next_smallest($lst);\n$lst\
    \ = array(5, 1, 4, 3, 2);\necho next_smallest($lst);\n$lst = array();\necho next_smallest($lst);\n\
    $lst = array(1, 1);\necho next_smallest($lst);", "\tif (count($lst) <= 1) {\n\t\
    \treturn null;\n\t}\n\tsort($lst);\n\t$last = null;\n\tforeach ($lst as $i) {\n\
    \t\tif ($last === null) {\n\t\t\t$last = $i;\n\t\t} else if ($i != $last) {\n\t\
    \t\treturn $i;\n\t\t}\n\t}\n\treturn null;\n}", "    if (count($lst) < 2) {\n\
    \        return null;\n    }\n\n    $smallest = $lst[0];\n    $second_smallest\
    \ = null;\n\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i]\
    \ < $smallest) {\n            $second_smallest = $smallest;\n            $smallest\
    \ = $lst[$i];\n        } else if ($lst[$i] < $second_smallest) {\n           \
    \ $second_smallest = $lst[$i];\n        }\n    }\n\n    return $second_smallest;\n\
    }\n", "  if (count($lst) < 2) {\n    return null;\n  }\n  $min = min($lst);\n\
    \  $sort = array_unique($lst);\n  sort($sort);\n  if ($sort[0] == $min) {\n  \
    \  return $sort[1];\n  }\n  return $sort[0];\n}\n$arr = array(1, 2, 3, 4, 5);\n\
    print_r(next_smallest($arr));\nprint_r(\"\\n\");\n$arr = array(5, 1, 4, 3, 2);\n\
    print_r(next_smallest($arr));\nprint_r(\"\\n\");\n$arr = array();\nprint_r(next_smallest($arr));\n\
    print_r(\"\\n\");\n$arr = array(1, 1);\nprint_r(next_smallest($arr));\nprint_r(\"\
    \\n\");", "  $lst = array_unique($lst);\n  if (count($lst) == 0) {\n    return\
    \ null;\n  } else if (count($lst) == 1) {\n    return null;\n  } else {\n    sort($lst);\n\
    \    return $lst[1];\n  }\n}\n", "  $smallest = null;\n  $second_smallest = null;\n\
    \  foreach ($lst as $x) {\n    if ($smallest === null) {\n      $smallest = $x;\n\
    \    } else if ($x < $smallest) {\n      $second_smallest = $smallest;\n     \
    \ $smallest = $x;\n    } else if ($second_smallest === null || $x < $second_smallest)\
    \ {\n      $second_smallest = $x;\n    }\n  }\n  return $second_smallest;\n}\n",
  "  $min = min($lst);\n  $max = max($lst);\n  $count = count($lst);\n  $count_min\
    \ = count(array_keys($lst, $min));\n  $count_max = count(array_keys($lst, $max));\n\
    \  if ($count == 0) {\n    return null;\n  } elseif ($count == 1) {\n    return\
    \ null;\n  } elseif ($count == 2 && $lst[0] == $lst[1]) {\n    return null;\n\
    \  } elseif ($count_min == 1 && $count_max == 1) {\n    return min(array_diff($lst,\
    \ array($min, $max)));\n  } elseif ($count_min == 1 && $count_max > 1) {\n   \
    \ $lst = array_diff($lst, array($min));\n    return min($lst);\n  } elseif ($count_min\
    \ > 1 && $count_max == 1) {\n    $lst = array_diff($lst, array($max));\n    return\
    \ min($lst);\n  } elseif ($count_min > 1 && $count_max > 1) {\n    $lst = array_diff($lst,\
    \ array($min, $max));\n    return min($lst);\n  }\n}\n$test_list = array(1, 2,\
    \ 3, 4, 5);\nprint_r(next_smallest($test_list)); // 2\n$test_list = array(5, 1,\
    \ 4, 3, 2);\nprint_r(next_smallest($test_list)); // 2\n$test_list = array();\n\
    print_r(next_smallest($test_list)); // null\n$test_list = array(1, 1);\nprint_r(next_smallest($test_list));\
    \ // null", "  sort($lst);\n  if (count($lst) < 2) return null;\n  if ($lst[0]\
    \ == $lst[1]) return null;\n  return $lst[1];\n}", "  if (count($lst) < 2) return\
    \ null;\n  $min = min($lst);\n  $lst = array_diff($lst, array($min));\n  return\
    \ min($lst);\n}\n$lst = array(1, 2, 3, 4, 5);\necho next_smallest($lst) . PHP_EOL;\n\
    $lst = array(5, 1, 4, 3, 2);\necho next_smallest($lst) . PHP_EOL;\n$lst = array();\n\
    echo next_smallest($lst) . PHP_EOL;\n$lst = array(1, 1);\necho next_smallest($lst)\
    \ . PHP_EOL;", "  $new_lst = [];\n  if (count($lst) < 2) {\n    return null;\n\
    \  }\n  foreach ($lst as $k => $v) {\n    if (!in_array($v, $new_lst)) {\n   \
    \   $new_lst[] = $v;\n    }\n  }\n  sort($new_lst);\n  return $new_lst[1];\n}\n",
  "\tif (empty($lst)) {\n\t\treturn null;\n\t}\n\tsort($lst);\n\t$tmp = $lst[0];\n\
    \t$cnt = 1;\n\t$ret = $lst[0];\n\tfor ($i = 1; $i < count($lst); $i++) {\n\t\t\
    if ($lst[$i] == $tmp) {\n\t\t\t$cnt++;\n\t\t} else {\n\t\t\tif ($cnt == 1) {\n\
    \t\t\t\treturn $tmp;\n\t\t\t} else {\n\t\t\t\t$tmp = $lst[$i];\n\t\t\t\t$cnt =\
    \ 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn null;\n}\n\necho next_smallest(array(1, 2,\
    \ 3, 4, 5)) . PHP_EOL;\necho next_smallest(array(5, 1, 4, 3, 2)) . PHP_EOL;\n\
    echo next_smallest(array()) . PHP_EOL;\necho next_smallest(array(1, 1)) . PHP_EOL;",
  "  $len = count($lst);\n  if ($len < 2) {\n    return null;\n  }\n  sort($lst);\n\
    \  $arr = array_unique($lst);\n  $arr_len = count($arr);\n  if ($arr_len < 2)\
    \ {\n    return null;\n  }\n  return $arr[1];\n}\n", "  if (count($lst) <= 1)\
    \ {\n    return null;\n  }\n  $lst = array_unique($lst);\n  sort($lst);\n  if\
    \ (count($lst) <= 1) {\n    return null;\n  }\n  return $lst[1];\n}\n\necho 'next_smallest(array(1,\
    \ 2, 3, 4, 5)) => '.next_smallest(array(1, 2, 3, 4, 5)).\"\\n\";\necho 'next_smallest(array(5,\
    \ 1, 4, 3, 2)) => '.next_smallest(array(5, 1, 4, 3, 2)).\"\\n\";\necho 'next_smallest(array())\
    \ => '.next_smallest(array()).\"\\n\";\necho 'next_smallest(array(1, 1)) => '.next_smallest(array(1,\
    \ 1)).\"\\n\";", "    if (empty($lst)) {\n        return null;\n    }\n\n    $min\
    \ = $lst[0];\n    $second_min = null;\n    foreach ($lst as $item) {\n       \
    \ if ($item < $min) {\n            $second_min = $min;\n            $min = $item;\n\
    \        } else if ($item < $second_min || $second_min === null) {\n         \
    \   $second_min = $item;\n        }\n    }\n\n    return $second_min;\n}", " \
    \   if (count($lst) < 2) return null;\n    if (count($lst) == 2) return $lst[0]\
    \ == $lst[1] ? null : $lst[1];\n    $min = min($lst);\n    $lst = array_diff($lst,\
    \ [$min]);\n    return min($lst);\n}\n\n$a = array(1, 2, 3, 4, 5);\necho \">\"\
    .next_smallest($a).\"\\n\";\n$a = array(5, 1, 4, 3, 2);\necho \">\".next_smallest($a).\"\
    \\n\";\n$a = array();\necho \">\".next_smallest($a).\"\\n\";\n$a = array(1, 1);\n\
    echo \">\".next_smallest($a).\"\\n\";\n$a = array(1, 1, 2);\necho \">\".next_smallest($a).\"\
    \\n\";\n$a = array(2, 1, 1);\necho \">\".next_smallest($a).\"\\n\";", "    if(count($lst)\
    \ < 1) return null;\n    if(count($lst) < 2) return null;\n    sort($lst);\n \
    \   return $lst[1];\n}\n\necho next_smallest([1, 2, 3, 4, 5]) . \"\\n\";\necho\
    \ next_smallest([5, 1, 4, 3, 2]) . \"\\n\";\necho next_smallest([]) . \"\\n\"\
    ;\necho next_smallest([1, 1]) . \"\\n\";", "\tif (count($lst) == 0) {\n\t\treturn\
    \ null;\n\t}\n\tif (count($lst) == 1) {\n\t\treturn null;\n\t}\n\t$min = min($lst);\n\
    \t$lst = array_diff($lst, array($min));\n\t$min2 = min($lst);\n\treturn $min2;\n\
    }\nprint next_smallest(array(1, 2, 3, 4, 5));\nprint next_smallest(array(5, 1,\
    \ 4, 3, 2));\nprint next_smallest(array());\nprint next_smallest(array(1, 1));",
  "\t// Bubble sort\n\t// I don't actually know how to sort an array\n\t$lst2 = $lst;\n\
    \tfor ($i = 0; $i < count($lst2) - 1; $i++) {\n\t\tfor ($j = 0; $j < count($lst2)\
    \ - 1; $j++) {\n\t\t\tif ($lst2[$j] > $lst2[$j + 1]) {\n\t\t\t\t$tmp = $lst2[$j];\n\
    \t\t\t\t$lst2[$j] = $lst2[$j + 1];\n\t\t\t\t$lst2[$j + 1] = $tmp;\n\t\t\t}\n\t\
    \t}\n\t}\n\t// Go through the list and make sure everything is unique\n\t$result\
    \ = null;\n\tfor ($i = 0; $i < count($lst2) - 1; $i++) {\n\t\tif ($lst2[$i] !=\
    \ $lst2[$i + 1]) {\n\t\t\tif ($result == null) {\n\t\t\t\t$result = $lst2[$i +\
    \ 1];\n\t\t\t}\n\t\t}\n\t}\n\treturn $result;\n}\n\necho next_smallest(array(1,\
    \ 2, 3, 4, 5)) . \"\\n\";\necho next_smallest(array(5, 1, 4, 3, 2)) . \"\\n\"\
    ;\necho next_smallest(array()) . \"\\n\";\necho next_smallest(array(1, 1)) . \"\
    \\n\";", "    $array_size = count($lst);\n    if($array_size == 0){\n        return\
    \ null;\n    }\n    if($array_size == 1){\n        return null;\n    }\n    $first_smallest\
    \ = $lst[0];\n    $second_smallest = $lst[1];\n    for($x = 1; $x < $array_size;\
    \ $x++){\n        if($lst[$x] < $first_smallest){\n            $second_smallest\
    \ = $first_smallest;\n            $first_smallest = $lst[$x];\n        }\n   \
    \     else if($lst[$x] < $second_smallest && $lst[$x] != $first_smallest){\n \
    \           $second_smallest = $lst[$x];\n        }\n    }\n    if($second_smallest\
    \ == $first_smallest){\n        return null;\n    }\n    return $second_smallest;\n\
    }", "\tif (count($lst) < 2) {\n\t\treturn null;\n\t}\n\t$min1 = null;\n\t$min2\
    \ = null;\n\tforeach ($lst as $v) {\n\t\tif ($min1 === null || $v < $min1) {\n\
    \t\t\t$min2 = $min1;\n\t\t\t$min1 = $v;\n\t\t} else if ($min2 === null || $v <\
    \ $min2) {\n\t\t\t$min2 = $v;\n\t\t}\n\t}\n\treturn $min2;\n}\nprint next_smallest(array(1,\
    \ 2, 3, 4, 5)) . \"\\n\";\nprint next_smallest(array(5, 1, 4, 3, 2)) . \"\\n\"\
    ;\nprint next_smallest(array()) . \"\\n\";\nprint next_smallest(array(1, 1)) .\
    \ \"\\n\";", "    $len = count($lst);\n    if ($len <= 1) {\n        return null;\n\
    \    }\n    $prev = PHP_INT_MAX;\n    $cur = PHP_INT_MAX;\n    for ($i = 0; $i\
    \ < $len; $i++) {\n        if ($lst[$i] < $cur) {\n            $prev = $cur;\n\
    \            $cur = $lst[$i];\n        } else if ($lst[$i] < $prev) {\n      \
    \      $prev = $lst[$i];\n        }\n    }\n    if ($prev == PHP_INT_MAX) {\n\
    \        return null;\n    }\n    return $prev;\n}\n\n$lst = array(5, 1, 4, 3,\
    \ 2);\n$result = next_smallest($lst);\nassert($result == 2);\n\n$lst = array(1,\
    \ 2, 3, 4, 5);\n$result = next_smallest($lst);\nassert($result == 2);\n\n$lst\
    \ = array();\n$result = next_smallest($lst);\nassert($result == null);\n\n$lst\
    \ = array(1, 1);\n$result = next_smallest($lst);\nassert($result == null);\n\n\
    $lst = array(7, 7, 6, 1, 1);\n$result = next_smallest($lst);\nassert($result ==\
    \ 1);\n\n$lst = array(7, 7, 6, 1, 2);\n$result = next_smallest($lst);\nassert($result\
    \ == 1);\n\n$lst = array(7, 7, 6, 1, 2, 3);\n$result = next_smallest($lst);\n\
    assert($result == 2);\n\n$lst = array(7, 7, 6, 1, 2, 3, 4);\n$result = next_smallest($lst);\n\
    assert($result == 2);\n\necho 'All tests are passed' . PHP_EOL;", "\t$n = count($lst);\n\
    \t$min = min($lst);\n\t$min_count = 0;\n\tfor ($i = 0; $i < $n; $i++) {\n\t\t\
    if ($lst[$i] == $min) {\n\t\t\t$min_count++;\n\t\t}\n\t}\n\tif ($min_count > 1)\
    \ {\n\t\treturn null;\n\t}\n\t$min_index = array_search($min, $lst);\n\tfor ($i\
    \ = $min_index + 1; $i < $n; $i++) {\n\t\tif ($lst[$i] > $min) {\n\t\t\treturn\
    \ $lst[$i];\n\t\t}\n\t}\n\treturn null;\n}\n", "  $min = min($lst);\n  $second\
    \ = null;\n  foreach ($lst as $value) {\n    if ($value > $min) {\n      if ($second\
    \ == null) {\n        $second = $value;\n      } else {\n        $second = min($second,\
    \ $value);\n      }\n    }\n  }\n  return $second;\n}\n", "    if (count($lst)\
    \ < 2) {\n        return null;\n    }\n    $lst = array_unique($lst);\n    if\
    \ (count($lst) < 2) {\n        return null;\n    }\n    sort($lst);\n    return\
    \ $lst[1];\n}\n\n$lst = [1, 2, 3, 4, 5];\necho next_smallest($lst) . PHP_EOL;\n\
    $lst = [5, 1, 4, 3, 2];\necho next_smallest($lst) . PHP_EOL;\n$lst = [];\necho\
    \ next_smallest($lst) . PHP_EOL;\n$lst = [1, 1];\necho next_smallest($lst) . PHP_EOL;",
  "  sort($lst);\n  if (count($lst) > 1) {\n    return $lst[1];\n  } else {\n    return\
    \ null;\n  }\n}\necho next_smallest(array(1, 2, 3, 4, 5)) . \"\\n\";\necho next_smallest(array(5,\
    \ 1, 4, 3, 2)) . \"\\n\";\necho next_smallest(array()) . \"\\n\";\necho next_smallest(array(1,\
    \ 1)) . \"\\n\";\n", "    if (count($lst) < 2) {\n        return null;\n    }\n\
    \    $sm = min($lst);\n    $lst[array_search($sm, $lst)] = max($lst) + 1;\n  \
    \  return min($lst);\n}\n", "    $lst = array_unique($lst);\n    sort($lst);\n\
    \    return count($lst) > 1 ? $lst[1] : null;\n}\n", "    $count = count($lst);\n\
    \    if($count == 0) {\n        return null;\n    } else if($count == 1) {\n \
    \       return null;\n    } else {\n        $min = $lst[0];\n        $second_min\
    \ = null;\n        for($i = 1; $i < $count; $i++) {\n            if($lst[$i] <\
    \ $min) {\n                $second_min = $min;\n                $min = $lst[$i];\n\
    \            } else if($lst[$i] < $second_min) {\n                $second_min\
    \ = $lst[$i];\n            }\n        }\n        return $second_min;\n    }\n\
    }\n\n$a = array(1, 2, 3, 4, 5);\necho next_smallest($a);\necho '<br>';\n$a = array(5,\
    \ 1, 4, 3, 2);\necho next_smallest($a);\necho '<br>';\n$a = array();\necho next_smallest($a);\n\
    echo '<br>';\n$a = array(1, 1);\necho next_smallest($a);\necho '<br>';", "   \
    \ $count = count($lst);\n    if ($count <= 1) {\n        return null;\n    }\n\
    \    for ($i = 0; $i < $count - 1; $i++) {\n        if ($lst[$i] < $lst[$i + 1])\
    \ {\n            $smallest = $lst[$i];\n            $next_smallest = $lst[$i +\
    \ 1];\n            break;\n        }\n    }\n    for ($i += 2; $i < $count; $i++)\
    \ {\n        if ($lst[$i] < $next_smallest && $lst[$i] > $smallest) {\n      \
    \      $next_smallest = $lst[$i];\n        }\n    }\n    return $next_smallest;\n\
    }", "  if (count($lst) < 2) return null;\n  $min = 0;\n  $sm_min = null;\n  for\
    \ ($i = 1; $i < count($lst); $i++) {\n    if ($lst[$i] < $lst[$min]) {\n     \
    \ $sm_min = $min;\n      $min = $i;\n    } else if ($sm_min == null || $lst[$i]\
    \ < $lst[$sm_min]) {\n      $sm_min = $i;\n    }\n  }\n  return $lst[$sm_min];\n\
    }\n", "  $lst = array_values(array_unique($lst));\n  if (count($lst) < 2) {\n\
    \    return null;\n  }\n  $lst = sort($lst);\n  return $lst[1];\n}\n\n$list =\
    \ [1,2,3,4,5];\necho next_smallest($list) . PHP_EOL;\n$list = [5,1,4,3,2];\necho\
    \ next_smallest($list) . PHP_EOL;\n$list = [];\necho next_smallest($list) . PHP_EOL;\n\
    $list = [1,1];\necho next_smallest($list) . PHP_EOL;", "    $n = count($lst);\n\
    \    if ($n <= 1) {\n        return null;\n    }\n    $min1 = min($lst);\n   \
    \ $min2 = null;\n    for ($i = 0; $i < $n; $i++) {\n        if ($lst[$i] > $min1)\
    \ {\n            if ($min2 === null || $lst[$i] < $min2) {\n                $min2\
    \ = $lst[$i];\n            }\n        }\n    }\n    return $min2;\n}\n", "  $m\
    \ = false;\n  $m2 = false;\n  foreach ($lst as $e) {\n    if ($m === false) {\n\
    \      $m = $e;\n    } else if ($e < $m) {\n      $m2 = $m;\n      $m = $e;\n\
    \    } else if ($m2 === false || $e < $m2) {\n      $m2 = $e;\n    }\n  }\n  return\
    \ $m2;\n}\n", "  sort($lst);\n  return count($lst) > 1 ? $lst[1] : null;\n}\n\n\
    $lst = array(1, 2, 3, 4, 5);\nprint_r(next_smallest($lst));\nprint_r(next_smallest($lst));\n\
    print_r(next_smallest($lst));\nprint_r(next_smallest($lst));\nprint_r(next_smallest($lst));\n\
    print_r(next_smallest($lst));\nprint_r(next_smallest($lst));\nprint_r(next_smallest($lst));\n\
    print_r(next_smallest($lst));\nprint_r(next_smallest($lst));\nprint_r(next_smallest($lst));\n\
    print_r(next_smallest($lst));\nprint_r(next_smallest($lst));\nprint_r(next_smallest($lst));\n\
    print_r(next_smallest($lst));\nprint_r(next_smallest($lst));\nprint_r(next_smallest($lst));\n\
    print_r(next_smallest($lst));\nprint_r(next_smallest($lst));\nprint_r(next_smallest($lst));\n\
    print_r(next_smallest($lst));\nprint_r(next_smallest($lst));\nprint_r(next_smallest($lst));\n\
    print_r(next_smallest($lst));\nprint_r(next_smallest($lst));\nprint_r(next_smallest($lst));\n\
    print_r(next_smallest($lst));\nprint_r(next_smallest($lst));\nprint_r(next_smallest($lst));\n\
    print_r(next_smallest($lst));\nprint_r(next_smallest($lst));\nprint_r(next_smallest($lst));\n\
    print_r(next_smallest($lst));\nprint_r(next_smallest($lst));\nprint_r(next_smallest($lst));\n\
    print_r(next_smallest($", "  if (count($lst) < 2) {\n    return null;\n  }\n \
    \ $lst = array_unique($lst);\n  if (count($lst) < 2) {\n    return null;\n  }\n\
    \  asort($lst);\n  return $lst[1];\n}\nprint next_smallest([1, 2, 3, 4, 5]) .\
    \ \"\\n\";\nprint next_smallest([5, 1, 4, 3, 2]) . \"\\n\";\nprint next_smallest([])\
    \ . \"\\n\";\nprint next_smallest([1, 1]) . \"\\n\";", "\t$sorted_list = mergesort($lst);\n\
    \t$result = null;\n\tforeach ($sorted_list as $index => $val) {\n\t\tif ($index\
    \ > 0 && $result === null) {\n\t\t\t$result = $val;\n\t\t}\n\t\tif ($index ===\
    \ 0 && $val !== $sorted_list[$index + 1]) {\n\t\t\t$result = $val;\n\t\t}\n\t\
    }\n\treturn $result;\n}\n", "    $lst = array_values(array_unique($lst));\n  \
    \  if (count($lst) < 2) {\n        return null;\n    } else {\n        asort($lst);\n\
    \        return $lst[1];\n    }\n}\n", "    $smallest = min($lst);\n    $sorted\
    \ = $lst;\n    sort($sorted);\n    $count = 0;\n    foreach ($sorted as $item)\
    \ {\n        if ($item == $smallest) {\n            $count++;\n        }\n   \
    \ }\n    if ($count > 1) {\n        return null;\n    }\n    else {\n        return\
    \ $sorted[1];\n    }\n}\necho next_smallest(array(1, 2, 3, 4, 5));\necho next_smallest(array(5,\
    \ 1, 4, 3, 2));\necho next_smallest(array());\necho next_smallest(array(1, 1));",
  "    $lst = array_unique($lst);\n    if (count($lst) < 2) {\n        return null;\n\
    \    }\n    sort($lst);\n    return $lst[1];\n}", "    if (count($lst) == 0) return\
    \ null;\n    if (count($lst) == 1) return null;\n    if (count($lst) == 2) {\n\
    \        if ($lst[0] == $lst[1]) return null;\n        else return $lst[1];\n\
    \    }\n    $min = $lst[0];\n    $sec = null;\n    for ($i = 1; $i < count($lst);\
    \ $i++) {\n        if ($lst[$i] < $min) {\n            $sec = $min;\n        \
    \    $min = $lst[$i];\n        } else if ($lst[$i] < $sec) {\n            $sec\
    \ = $lst[$i];\n        }\n    }\n    return $sec;\n}\n", "  $sz = count($lst);\n\
    \  if ($sz < 2) {\n    return null;\n  }\n  $min = $lst[0];\n  $sec = null;\n\
    \  for ($i = 1; $i < $sz; $i++) {\n    $n = $lst[$i];\n    if ($n < $min) {\n\
    \      $sec = $min;\n      $min = $n;\n    } else if ($n > $min) {\n      if ($sec\
    \ === null || $n < $sec) {\n        $sec = $n;\n      }\n    }\n  }\n  return\
    \ $sec;\n}\n\n$lst = array(1, 2, 3, 4, 5);\nvar_dump(next_smallest($lst));\n$lst\
    \ = array(5, 1, 4, 3, 2);\nvar_dump(next_smallest($lst));\n$lst = array();\nvar_dump(next_smallest($lst));\n\
    $lst = array(1, 1);\nvar_dump(next_smallest($lst));", "\t$res = null;\n\t$min\
    \ = null;\n\tforeach ($lst as $n) {\n\t\tif ($min == null) {\n\t\t\t$min = $n;\n\
    \t\t} else if ($n > $min) {\n\t\t\tif ($res == null) {\n\t\t\t\t$res = $n;\n\t\
    \t\t} else if ($n < $res) {\n\t\t\t\t$res = $n;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ $res;\n}\n\necho next_smallest(array(1, 2, 3, 4, 5));\necho \"\\n\";\necho next_smallest(array(5,\
    \ 1, 4, 3, 2));\necho \"\\n\";\necho next_smallest(array());\necho \"\\n\";\n\
    echo next_smallest(array(1, 1));\necho \"\\n\";", "    if(empty($lst)) {\n   \
    \     return null;\n    }\n    $lst = array_values(array_unique($lst));\n    sort($lst);\n\
    \    return isset($lst[1]) ? $lst[1] : null;\n}\n\n$lst = array(1, 2, 3, 4, 5);\n\
    echo next_smallest($lst) . \"\\n\";\n$lst = array(5, 1, 4, 3, 2);\necho next_smallest($lst)\
    \ . \"\\n\";\n$lst = array();\necho next_smallest($lst) . \"\\n\";\n$lst = array(1,\
    \ 1);\necho next_smallest($lst) . \"\\n\";", "\t\t\t$smallest = $lst[0];\n\t\t\
    \t$next_smallest = null;\n\t\t\tforeach ($lst as $key => $value) {\n\t\t\t\tif\
    \ ($value < $smallest) {\n\t\t\t\t\t$next_smallest = $smallest;\n\t\t\t\t\t$smallest\
    \ = $value;\n\t\t\t\t} else if ($value < $next_smallest && $value != $smallest)\
    \ {\n\t\t\t\t\t$next_smallest = $value;\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn $next_smallest;\n\
    \t\t}", "  if (count($lst) < 2) {\n    return null;\n  }\n  $min = min($lst);\n\
    \  $min_index = array_search($min, $lst);\n  if ($min_index == 0) {\n    $min2\
    \ = min(array_slice($lst, 1));\n  } else if ($min_index == count($lst) - 1) {\n\
    \    $min2 = min(array_slice($lst, 0, count($lst) - 1));\n  } else {\n    $min2\
    \ = min(array_slice($lst, 0, $min_index)) ? min(array_slice($lst, 0, $min_index))\
    \ : min(array_slice($lst, $min_index + 1));\n  }\n  if ($min2 == $min) {\n   \
    \ return null;\n  }\n  return $min2;\n}\n", "  //@todo: Implement this function\n\
    }\n", "\t$curr_min = PHP_INT_MAX;\n\t$second_min = $curr_min;\n\tforeach ($lst\
    \ as $v) {\n\t\tif ($v < $curr_min) {\n\t\t\t$second_min = $curr_min;\n\t\t\t\
    $curr_min = $v;\n\t\t} else if ($v < $second_min) {\n\t\t\t$second_min = $v;\n\
    \t\t}\n\t}\n\tif ($second_min == PHP_INT_MAX) {\n\t\treturn null;\n\t}\n\treturn\
    \ $second_min;\n}\necho next_smallest([1, 2, 3, 4, 5]), PHP_EOL;\necho next_smallest([5,\
    \ 1, 4, 3, 2]), PHP_EOL;\necho next_smallest([]), PHP_EOL;\necho next_smallest([1,\
    \ 1]), PHP_EOL;", "\tif (count($lst) <= 1) {\n\t\treturn null;\n\t}\n\t$first\
    \ = null;\n\t$second = null;\n\tforeach ($lst as $x) {\n\t\tif ($first === null)\
    \ {\n\t\t\t$first = $x;\n\t\t} else if ($x < $first) {\n\t\t\t$second = $first;\n\
    \t\t\t$first = $x;\n\t\t} else if ($second === null || $x < $second) {\n\t\t\t\
    $second = $x;\n\t\t}\n\t}\n\treturn $second;\n}", "    // your code here\n}",
  "    $min = null;\n    $next = null;\n    foreach ($lst as $el) {\n        if ($min\
    \ === null || $el < $min) {\n            $next = $min;\n            $min = $el;\n\
    \        } else if ($next === null || $el < $next) {\n            $next = $el;\n\
    \        }\n    }\n    return $next;\n}\necho next_smallest([1, 2, 3, 4, 5]) .\
    \ \"\\n\";\necho next_smallest([5, 1, 4, 3, 2]) . \"\\n\";\necho next_smallest([])\
    \ . \"\\n\";\necho next_smallest([1, 1]) . \"\\n\";", "\tsort($lst);\n\t$uniques\
    \ = array_unique($lst);\n\tif (count($uniques) <= 1) return null;\n\treturn $uniques[1];\n\
    }\nvar_dump(next_smallest(array(1, 2, 3, 4, 5)));\nvar_dump(next_smallest(array(5,\
    \ 1, 4, 3, 2)));\nvar_dump(next_smallest(array()));\nvar_dump(next_smallest(array(1,\
    \ 1)));\n", "    // YOUR SOLUTION GOES HERE\n}", "    // $lst = array(1, 2, 3,\
    \ 4, 5);\n    if (count($lst) == 0) {\n        return NULL;\n    }\n    $n = count($lst);\n\
    \    $largest = $lst[0];\n    $next_largest = NULL;\n    for ($i = 1; $i < $n;\
    \ $i++) {\n        if ($lst[$i] > $largest) {\n            $largest = $lst[$i];\n\
    \        }\n    }\n    for ($i = 0; $i < $n; $i++) {\n        if ($lst[$i] > $next_largest\
    \ && $lst[$i] < $largest) {\n            $next_largest = $lst[$i];\n        }\n\
    \    }\n    return $next_largest;\n}\n", "    if (empty($lst)) return null;\n\
    \    sort($lst);\n    $i = 0;\n    while ($i < count($lst)-1 && $lst[$i] == $lst[$i+1])\
    \ {\n        $i++;\n    }\n    if ($i == count($lst)-1) return null;\n    return\
    \ $lst[$i+1];\n}\n", "    sort($lst);\n    $n = count($lst);\n    $left = 0;\n\
    \    $right = $n - 1;\n    while ($left < $right) {\n        $mid = floor(($left\
    \ + $right) / 2);\n        if ($lst[$mid] == $lst[$mid + 1]) {\n            $left\
    \ = $mid + 1;\n        } else {\n            $right = $mid;\n        }\n    }\n\
    \    if ($lst[$left] == $lst[$left + 1]) {\n        return null;\n    } else {\n\
    \        return $lst[$left + 1];\n    }\n}\n", "    $min = min($lst);\n    $min2\
    \ = $min;\n    foreach ($lst as $n) {\n        if ($n > $min && $n < $min2) {\n\
    \            $min2 = $n;\n        }\n    }\n    if ($min2 == $min) {\n       \
    \ return null;\n    }\n    return $min2;\n}\n", "    sort($lst);\n    return is_array($lst)\
    \ && count($lst) > 1 ? $lst[1] : null;\n}\n\necho next_smallest([1, 2, 3, 4, 5]);\n\
    echo \"\\n\";\necho next_smallest([5, 1, 4, 3, 2]);\necho \"\\n\";\necho next_smallest([]);\n\
    echo \"\\n\";\necho next_smallest([1, 1]);\necho \"\\n\";", "  if (count($lst)\
    \ <= 1) return null;\n  sort($lst);\n  $min = null;\n  $next_min = null;\n  for\
    \ ($i = 0; $i < count($lst); $i++) {\n    if ($min === null) {\n      $min = $lst[$i];\n\
    \    } else if ($lst[$i] != $min) {\n      $next_min = $lst[$i];\n      break;\n\
    \    }\n  }\n  return $next_min;\n}\n", "    if(count($lst) < 2) {\n        return\
    \ null;\n    }\n    $min = min($lst);\n    $lst = array_filter($lst, function($x)\
    \ use ($min) { return $x > $min; });\n    if(count($lst) == 0) {\n        return\
    \ null;\n    }\n    return min($lst);\n}\n\necho next_smallest([1, 2, 3, 4, 5])\
    \ . \"\\n\";\necho next_smallest([5, 1, 4, 3, 2]) . \"\\n\";\necho next_smallest([])\
    \ . \"\\n\";\necho next_smallest([1, 1]) . \"\\n\";", "  sort($lst);\n  $lst =\
    \ array_unique($lst);\n  $smallest = null;\n  foreach ($lst as $num) {\n    if\
    \ ($smallest == null) {\n      $smallest = $num;\n    } else {\n      return $num;\n\
    \    }\n  }\n  return null;\n}", "\t$count = count($lst);\n\tif ($count < 2) {\n\
    \t\treturn null;\n\t}\n\tsort($lst);\n\tif ($lst[0] === $lst[1]) {\n\t\treturn\
    \ null;\n\t}\n\treturn $lst[1];\n}\necho next_smallest([1, 2, 3, 4, 5]);\necho\
    \ \"<br/>\";\necho next_smallest([5, 1, 4, 3, 2]);\necho \"<br/>\";\necho next_smallest([]);\n\
    echo \"<br/>\";\necho next_smallest([1, 1]);\necho \"<br/>\";\necho next_smallest([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10]);\necho \"<br/>\";\necho next_smallest([2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 1]);\necho \"<br/>\";\necho next_smallest([10, 9, 8, 7, 6,\
    \ 5, 4, 3, 2, 1]);\necho \"<br/>\";\necho next_smallest([1, 2, 3, 3, 3, 3, 3,\
    \ 3, 3, 3]);\necho \"<br/>\";\necho next_smallest([1, 2, 3, 3, 3, 3, 3, 3, 3,\
    \ 4]);\necho \"<br/>\";\necho next_smallest([1, 2, 3, 3, 3, 3, 3, 3, 3, 5]);\n\
    echo \"<br/>\";\necho next_smallest([1, 2, 3, 3, 3, 3, 3, 3, 3, 3]);\necho \"\
    <br/>\";\necho next_smallest([1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3]);\necho \"<br/>\"\
    ;\necho next_smallest([1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 4]);\necho \"<br/>\";\necho\
    \ next_smallest([1, 2, 3, 3, 3, 3, 3, 3, 3, 3, 5]);\necho \"<br/>\";\necho next_smallest([2,\
    \ 2, 2, 2, 2, 2, 2, 2, 2, 2", "    if (count($lst) <= 1) {\n        return null;\n\
    \    }\n\n    $smallest = $lst[0];\n    $secondSmallest = null;\n\n    for ($i\
    \ = 1; $i < count($lst); $i++) {\n        if ($lst[$i] < $smallest) {\n      \
    \      $secondSmallest = $smallest;\n            $smallest = $lst[$i];\n     \
    \   } else if ($lst[$i] > $smallest) {\n            if ($secondSmallest === null\
    \ || $lst[$i] < $secondSmallest) {\n                $secondSmallest = $lst[$i];\n\
    \            }\n        }\n    }\n\n    return $secondSmallest;\n}\n\n$assert\
    \ = function($actual, $expected) {\n    echo $actual === $expected ? '.' : 'F';\n\
    };\n", "    $size = count($lst);\n    $smallest = null;\n    $second_smallest\
    \ = null;\n    for ($i = 0; $i < $size; $i++) {\n        if (empty($smallest))\
    \ {\n            $smallest = $lst[$i];\n        } elseif ($lst[$i] < $smallest)\
    \ {\n            $second_smallest = $smallest;\n            $smallest = $lst[$i];\n\
    \        } elseif (empty($second_smallest) || $lst[$i] < $second_smallest) {\n\
    \            $second_smallest = $lst[$i];\n        }\n    }\n    return $second_smallest;\n\
    }", "    if (count($lst) <= 1) return null;\n    if (count($lst) == 2) return\
    \ $lst[0] == $lst[1] ? null : min($lst);\n    $min = min($lst);\n    $i = array_search($min,\
    \ $lst);\n    $lst[$i] = INF;\n    return min($lst);\n}", "    $nextSmallest =\
    \ null;\n    $smallest = null;\n    foreach ($lst as $i) {\n        if (null ===\
    \ $smallest) {\n            $smallest = $i;\n        } else if ($i > $smallest)\
    \ {\n            if (null === $nextSmallest) {\n                $nextSmallest\
    \ = $i;\n            } else if ($i < $nextSmallest) {\n                $nextSmallest\
    \ = $i;\n            }\n        }\n    }\n    return $nextSmallest;\n}\n", "\t\
    if(count($lst) < 1) {\n\t\treturn null;\n\t} else if(count($lst) == 1) {\n\t\t\
    return null;\n\t} else {\n\t\tsort($lst);\n\t\treturn $lst[1];\n\t}\n}\n\n$lst\
    \ = array(1, 2, 3, 4, 5);\nprint_r(next_smallest($lst));\necho PHP_EOL;\n$lst\
    \ = array(5, 1, 4, 3, 2);\nprint_r(next_smallest($lst));\necho PHP_EOL;\n$lst\
    \ = array();\nprint_r(next_smallest($lst));\necho PHP_EOL;\n$lst = array(1, 1);\n\
    print_r(next_smallest($lst));\necho PHP_EOL;\n", "\t$unique = array_unique($lst);\n\
    \tsort($unique);\n\tif (count($unique) < 2) {\n\t\treturn null;\n\t}\n\treturn\
    \ $unique[1];\n}\n", "  if (count($lst) == 0) {\n    return null;\n  }\n  $min\
    \ = $lst[0];\n  $sm = $lst[0];\n  for ($i = 1; $i < count($lst); $i++) {\n   \
    \ if ($lst[$i] < $min) {\n      $sm = $min;\n      $min = $lst[$i];\n    } else\
    \ if ($lst[$i] < $sm) {\n      $sm = $lst[$i];\n    }\n  }\n  if ($sm == $min)\
    \ {\n    return null;\n  }\n  return $sm;\n}", "\tif (count($lst) < 2) return\
    \ null;\n\t$s = min($lst);\n\t$s2 = $s - 1;\n\tforeach ($lst as $k => $v) {\n\t\
    \tif ($v != $s && $v < $s2) $s2 = $v;\n\t}\n\tif ($s2 == $s - 1) return null;\n\
    \treturn $s2;\n}", "  sort($lst);\n  for ($i = 0; $i < count($lst) - 1; $i++)\
    \ {\n    if ($lst[$i] < $lst[$i + 1]) {\n      return $lst[$i + 1];\n    }\n \
    \ }\n  return null;\n}\n\necho next_smallest([1, 2, 3, 4, 5]);\necho '<br />';\n\
    echo next_smallest([5, 1, 4, 3, 2]);\necho '<br />';\necho next_smallest([]);\n\
    echo '<br />';\necho next_smallest([1, 1]);\necho '<br />';", "    $n = count($lst);\n\
    \    if ($n == 0) {\n        return null;\n    }\n    $mins = [];\n    $mins[]\
    \ = min($lst);\n    $rst = [];\n    foreach ($lst as $item) {\n        if ($item\
    \ != $mins[0]) {\n            $rst[] = $item;\n        }\n    }\n    if (count($rst)\
    \ == 0) {\n        return null;\n    }\n    $mins[] = min($rst);\n    return $mins[1];\n\
    }\n$lst = [1, 2, 3, 4, 5];\n$res = next_smallest($lst);\nassert($res == 2);\n\
    $lst = [5, 1, 4, 3, 2];\n$res = next_smallest($lst);\nassert($res == 2);\n$lst\
    \ = [];\n$res = next_smallest($lst);\nassert($res == null);\n$lst = [1, 1];\n\
    $res = next_smallest($lst);\nassert($res == null);", "    if (empty($lst)) {\n\
    \        return null;\n    }\n    $smallest = null;\n    $second = null;\n   \
    \ foreach ($lst as $item) {\n        if ($smallest === null) {\n            $smallest\
    \ = $item;\n        } else if ($item < $smallest) {\n            $second = $smallest;\n\
    \            $smallest = $item;\n        } else if ($second === null || $item\
    \ < $second) {\n            $second = $item;\n        }\n    }\n    return $second;\n\
    }", "    if (count($lst) < 2) {\n        return null;\n    }\n\n    sort($lst);\n\
    \    if ($lst[0] == $lst[1]) {\n        return null;\n    }\n\n    return $lst[1];\n\
    }\n\necho next_smallest([1, 2, 3, 4, 5]) . \"\\n\"; // 2\necho next_smallest([5,\
    \ 1, 4, 3, 2]) . \"\\n\"; // 2\necho next_smallest([]) . \"\\n\"; // null\necho\
    \ next_smallest([1, 1]) . \"\\n\"; // null", "\tif (empty($lst)) {\n\t\treturn\
    \ null;\n\t}\n\n\t$min = min($lst);\n\t$tmp = array_filter($lst, function($n)\
    \ use ($min) {\n\t\treturn $n > $min;\n\t});\n\n\tif (empty($tmp)) {\n\t\treturn\
    \ null;\n\t}\n\n\treturn min($tmp);\n}\n\necho next_smallest([1, 2, 3, 4, 5]);\n\
    echo next_smallest([5, 1, 4, 3, 2]);\necho next_smallest([]);\necho next_smallest([1,\
    \ 1]);", "    sort($lst);\n    $lst = array_unique($lst);\n    if (count($lst)\
    \ < 2) {\n        return null;\n    }\n    $len = count($lst);\n    return $lst[1];\n\
    }\n", "    $smallest = $lst[0];\n    $nextSmallest = null;\n    for ($i = 1; $i\
    \ < count($lst); $i++) {\n        if ($lst[$i] < $smallest) {\n            $nextSmallest\
    \ = $smallest;\n            $smallest = $lst[$i];\n        } elseif ($lst[$i]\
    \ > $smallest && ($nextSmallest == null || $lst[$i] < $nextSmallest)) {\n    \
    \        $nextSmallest = $lst[$i];\n        }\n    }\n    return $nextSmallest;\n\
    }", "    $min = min($lst);\n    $max = max($lst);\n    $minCount = 0;\n    $maxCount\
    \ = 0;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($lst[$i] == $min)\
    \ {\n            $minCount++;\n        }\n        if ($lst[$i] == $max) {\n  \
    \          $maxCount++;\n        }\n    }\n    if (count($lst) < 2 || $minCount\
    \ == count($lst) || ($minCount == 1 && $maxCount == 1)) {\n        return null;\n\
    \    } else if ($minCount > 1) {\n        return $min;\n    } else {\n       \
    \ $val = null;\n        $min = $max;\n        for ($i = 0; $i < count($lst); $i++)\
    \ {\n            if ($lst[$i] < $min) {\n                $min = $lst[$i];\n  \
    \              $val = $min;\n            }\n        }\n        return $val;\n\
    \    }\n}\n", "    if(empty($lst)) {\n        return NULL;\n    }\n\n    $smallest\
    \ = min($lst);\n    $next_smallest = NULL;\n    foreach($lst as $item) {\n   \
    \     if($item > $smallest) {\n            if($next_smallest !== NULL) {\n   \
    \             $next_smallest = min($item, $next_smallest);\n            } else\
    \ {\n                $next_smallest = $item;\n            }\n        }\n    }\n\
    \n    return $next_smallest;\n}\n\n$lst = array(1, 2, 3, 4, 5);\necho next_smallest($lst);\n\
    echo '<br>';\n$lst = array(5, 1, 4, 3, 2);\necho next_smallest($lst);\necho '<br>';\n\
    $lst = array();\necho next_smallest($lst);\necho '<br>';\n$lst = array(1, 1);\n\
    echo next_smallest($lst);\necho '<br>';", "\t$min1 = $min2 = INF;\n\tforeach ($lst\
    \ as $el) {\n\t\tif ($el < $min1) {\n\t\t\t$min2 = $min1;\n\t\t\t$min1 = $el;\n\
    \t\t} else if ($el < $min2) {\n\t\t\t$min2 = $el;\n\t\t}\n\t}\n\treturn ($min2\
    \ != INF) ? $min2 : null;\n}\n\n$lst = array(5, 1, 4, 3, 2);\necho next_smallest($lst);\n\
    echo PHP_EOL;\n$lst = array(1, 2, 3, 4, 5);\necho next_smallest($lst);\necho PHP_EOL;\n\
    $lst = array();\necho next_smallest($lst);\necho PHP_EOL;\n$lst = array(1, 1);\n\
    echo next_smallest($lst);\necho PHP_EOL;", "    $smallest = NULL;\n    $second_smallest\
    \ = NULL;\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($smallest ===\
    \ NULL) {\n            $smallest = $lst[$i];\n        } elseif ($lst[$i] < $smallest)\
    \ {\n            $second_smallest = $smallest;\n            $smallest = $lst[$i];\n\
    \        } elseif ($second_smallest === NULL || $lst[$i] < $second_smallest) {\n\
    \            $second_smallest = $lst[$i];\n        }\n    }\n    return $second_smallest;\n\
    }\n", "  $min = $lst[0];\n  for ($i = 1; $i < count($lst); $i++) {\n    if ($lst[$i]\
    \ < $min) {\n      $min = $lst[$i];\n    }\n  }\n  for ($i = 0; $i < count($lst);\
    \ $i++) {\n    if ($lst[$i] == $min) {\n      array_splice($lst, $i, 1);\n   \
    \   $i--;\n    }\n  }\n  if (count($lst) == 0) {\n    return null;\n  }\n  $min\
    \ = $lst[0];\n  for ($i = 1; $i < count($lst); $i++) {\n    if ($lst[$i] < $min)\
    \ {\n      $min = $lst[$i];\n    }\n  }\n  return $min;\n}\n", "  $result = null;\n\
    \  $count = count($lst);\n  if ($count > 1) {\n    $smallest = null;\n    for\
    \ ($i = 0; $i < $count; $i++) {\n      if ($smallest === null || $lst[$i] < $smallest)\
    \ {\n        $smallest = $lst[$i];\n      }\n    }\n    $next_smallest = null;\n\
    \    for ($i = 0; $i < $count; $i++) {\n      if ($lst[$i] > $smallest) {\n  \
    \      if ($next_smallest === null || $lst[$i] < $next_smallest) {\n         \
    \ $next_smallest = $lst[$i];\n        }\n      }\n    }\n    if ($next_smallest\
    \ !== null) {\n      $result = $next_smallest;\n    }\n  }\n  return $result;\n\
    }\n", "  sort($lst);\n  $value = null;\n  for ($i = 0; $i < count($lst); $i++)\
    \ {\n    if ($i+1 != count($lst) && $lst[$i] != $lst[$i+1]) {\n      $value =\
    \ $lst[$i+1];\n      break;\n    }\n  }\n  return $value;\n}\n", "  if (count($lst)\
    \ < 2) return null;\n  $min = min($lst);\n  $lst = array_diff($lst, array($min));\n\
    \  return min($lst);\n}\n$input = array(1, 2, 3, 4, 5);\n$input = array(5, 1,\
    \ 4, 3, 2);\n$input = array();\n$input = array(1, 1);\n$input = array(1, -1, -1,\
    \ 0, 1);\n$input = array(2, 2, 2, 2, 3, 2, 2, 2, 2);\n$input = array(1, 2, 3,\
    \ 2, 1);\n$input = array(7, 6, 5, 4, 3, 2, 1);\necho next_smallest($input);",
  "  $size = count($lst);\n  if ($size <= 1) {\n    return null;\n  }\n  // if ($size\
    \ == 2) {\n  //   return null;\n  // }\n  $first = $lst[0];\n  $second = null;\n\
    \  for ($i = 1; $i < $size; $i++) {\n    if ($lst[$i] < $first) {\n      $second\
    \ = $first;\n      $first = $lst[$i];\n    } elseif ($lst[$i] > $first && $second\
    \ === null) {\n      $second = $lst[$i];\n    } elseif ($lst[$i] > $first && $lst[$i]\
    \ < $second) {\n      $second = $lst[$i];\n    }\n  }\n  return $second;\n}\n",
  "    if(empty($lst)){\n        return null;\n    }\n\n    $smallest = $lst[0];\n\
    \    $next_smallest = null;\n\n    for($i = 1; $i < count($lst); $i++){\n    \
    \    if($lst[$i] <= $smallest){\n            $smallest = $lst[$i];\n        }else{\n\
    \            if($next_smallest === null || $lst[$i] < $next_smallest){\n     \
    \           $next_smallest = $lst[$i];\n            }\n        }\n    }\n\n  \
    \  return $next_smallest;\n}\n\necho next_smallest([1,2,3,4,5]);\necho \"\\n\"\
    ;\necho next_smallest([5,1,4,3,2]);\necho \"\\n\";\necho next_smallest([]);\n\
    echo \"\\n\";\necho next_smallest([1,1]);\necho \"\\n\";", "    if (count($lst)\
    \ < 2) {\n        return null;\n    }\n    $min_1 = INF;\n    $min_2 = INF;\n\
    \    foreach ($lst as $num) {\n        if ($num < $min_1) {\n            $min_2\
    \ = $min_1;\n            $min_1 = $num;\n        } else if ($num < $min_2) {\n\
    \            $min_2 = $num;\n        }\n    }\n    return $min_2 === INF ? null\
    \ : $min_2;\n}\n", "\t$n = count($lst);\n\tif ($n < 2) return null;\n\t$smallest\
    \ = $second_smallest = $lst[0];\n\tfor ($i = 1; $i < $n; $i++) {\n\t\tif ($lst[$i]\
    \ <= $smallest) {\n\t\t\t$second_smallest = $smallest;\n\t\t\t$smallest = $lst[$i];\n\
    \t\t} else if ($lst[$i] < $second_smallest) {\n\t\t\t$second_smallest = $lst[$i];\n\
    \t\t}\n\t}\n\treturn $second_smallest;\n}", "\t$len = count($lst);\n\tif ($len\
    \ < 2) return null;\n\t\n\t// First, find the smallest element\n\t$min = $lst[0];\n\
    \tfor ($i = 1; $i < $len; $i++) {\n\t\tif ($lst[$i] < $min) $min = $lst[$i];\n\
    \t}\n\t\n\t// Now, find the smallest element that is not the minimum\n\t$second_min\
    \ = $lst[0];\n\tfor ($i = 1; $i < $len; $i++) {\n\t\tif ($lst[$i] < $second_min\
    \ && $lst[$i] > $min) {\n\t\t\t$second_min = $lst[$i];\n\t\t}\n\t}\n\treturn $second_min;\n\
    }\n", "    $ls_len = count($lst);\n    if ($ls_len < 2) {\n        return null;\n\
    \    }\n    $min_1 = $lst[0];\n    $min_2 = $lst[1];\n    for ($i = 2; $i < $ls_len;\
    \ $i++) {\n        if ($lst[$i] < $min_1) {\n            $min_2 = $min_1;\n  \
    \          $min_1 = $lst[$i];\n        } elseif ($lst[$i] < $min_2) {\n      \
    \      $min_2 = $lst[$i];\n        }\n    }\n    return $min_2;\n}\n", "    if\
    \ (count($lst) < 2) {\n        return null;\n    }\n    $min = $lst[0];\n    $min2\
    \ = $lst[1];\n    for ($i = 1; $i < count($lst); $i++) {\n        if ($lst[$i]\
    \ < $min) {\n            $min2 = $min;\n            $min = $lst[$i];\n       \
    \ } else if ($lst[$i] < $min2) {\n            $min2 = $lst[$i];\n        }\n \
    \   }\n    return $min2;\n}\n\n$lst = array(1, 2, 3, 4, 5);\necho next_smallest($lst)\
    \ . \"\\n\";\n$lst = array(5, 1, 4, 3, 2);\necho next_smallest($lst) . \"\\n\"\
    ;\n$lst = array();\necho next_smallest($lst) . \"\\n\";\n$lst = array(1, 1);\n\
    echo next_smallest($lst) . \"\\n\";\n", "\t$min1 = $min2 = PHP_INT_MAX;\n\tforeach\
    \ ($lst as $num) {\n\t\tif ($num <= $min1) {\n\t\t\t$min1 = $num;\n\t\t} else\
    \ if ($num < $min2) {\n\t\t\t$min2 = $num;\n\t\t}\n\t}\n\treturn $min2;\n}\n\n\
    $lst = [1, 2, 3, 4, 5];\nvar_dump(next_smallest($lst));\n\n$lst = [5, 1, 4, 3,\
    \ 2];\nvar_dump(next_smallest($lst));\n\n$lst = [];\nvar_dump(next_smallest($lst));\n\
    \n$lst = [1, 1];\nvar_dump(next_smallest($lst));", "    // your code goes here\n\
    }\n", "  if (count($lst) < 2) return null;\n  $lst = array_unique($lst);\n  if\
    \ (count($lst) < 2) return null;\n  sort($lst);\n  return $lst[1];\n}\n\n$lst\
    \ = array(1, 2, 3, 4, 5);\nprint_r(next_smallest($lst));\necho \"\\n\";\n\n$lst\
    \ = array(5, 1, 4, 3, 2);\nprint_r(next_smallest($lst));\necho \"\\n\";\n\n$lst\
    \ = array();\nprint_r(next_smallest($lst));\necho \"\\n\";\n\n$lst = array(1,\
    \ 1);\nprint_r(next_smallest($lst));\necho \"\\n\";", "    if (empty($lst)) {\n\
    \        return null;\n    }\n    if (count($lst) === 1) {\n        return null;\n\
    \    }\n    // sort the array\n    sort($lst);\n    // set the second smallest\
    \ value\n    $secondSmallest = null;\n    $currentSmallest = null;\n    $secondSmallest\
    \ = $lst[0];\n    $currentSmallest = $lst[0];\n    // loop through the array,\
    \ we skip the first element as we already have it set\n    for ($i = 1; $i < count($lst);\
    \ $i++) {\n        // set the current smallest value\n        $currentSmallest\
    \ = $lst[$i];\n        // compare current smallest to previous smallest\n    \
    \    if ($currentSmallest != $secondSmallest) {\n            // set the second\
    \ smallest\n            $secondSmallest = $currentSmallest;\n            // we\
    \ have the second smallest, return it\n            return $secondSmallest;\n \
    \       }\n    }\n    // No second smallest found\n    return null;\n}\n\n$lst\
    \ = array(1, 2, 3, 4, 5);\n$result = next_smallest($lst);\nvar_dump($result);\n\
    \n$lst = array(5, 1, 4, 3, 2);\n$result = next_smallest($lst);\nvar_dump($result);\n\
    \n$lst = array();\n$result = next_smallest($lst);\nvar_dump($result);\n\n$lst\
    \ = array(1, 1);\n$result = next_smallest($lst);\nvar_dump($result);", "    if\
    \ (count($lst) < 2) {\n        return null;\n    }\n    $n1 = 0;\n    $n2 = 1;\n\
    \    if ($lst[$n1] > $lst[$n2]) {\n        $n1 = 1;\n        $n2 = 0;\n    }\n\
    \    for ($i = 2; $i < count($lst); $i++) {\n        if ($lst[$i] < $lst[$n1])\
    \ {\n            $n2 = $n1;\n            $n1 = $i;\n        } else if ($lst[$i]\
    \ < $lst[$n2]) {\n            $n2 = $i;\n        }\n    }\n    return $lst[$n2];\n\
    }\n$lst = array(1, 2, 3, 4, 5);\nprint_r($lst);\necho \"next smallest: \" . next_smallest($lst)\
    \ . \"\\n\";\n$lst = array(5, 1, 4, 3, 2);\nprint_r($lst);\necho \"next smallest:\
    \ \" . next_smallest($lst) . \"\\n\";\n$lst = array();\nprint_r($lst);\necho \"\
    next smallest: \" . next_smallest($lst) . \"\\n\";\n$lst = array(1, 1);\nprint_r($lst);\n\
    echo \"next smallest: \" . next_smallest($lst) . \"\\n\";", "\tif(!is_array($lst)\
    \ || count($lst) < 1) return NULL;\n\t$val = NULL;\n\t$flag = FALSE;\n\t$size\
    \ = count($lst);\n\tfor($i = 0; $i < $size; $i++) {\n\t\tif($i == 0) {\n\t\t\t\
    $val = $lst[$i];\n\t\t} else {\n\t\t\tif($val > $lst[$i]) {\n\t\t\t\tif($flag)\
    \ {\n\t\t\t\t\treturn $lst[$i];\n\t\t\t\t} else {\n\t\t\t\t\t$val = $lst[$i];\n\
    \t\t\t\t\t$flag = TRUE;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn NULL;\n}\n",
  "  if (count($lst) == 0) {\n    return null;\n  }\n  sort($lst);\n  $smallest =\
    \ $lst[0];\n  $nextSmallest = null;\n  for ($i = 1; $i < count($lst); $i++) {\n\
    \    if ($lst[$i] > $smallest) {\n      $nextSmallest = $lst[$i];\n      break;\n\
    \    }\n  }\n  return $nextSmallest;\n}\n", "    // inputs: an array of integers\n\
    \    // output: the 2nd smallest element or null if none exists\n\n    // check\
    \ input length\n    $length = count($lst);\n    if ($length == 0) return null;\n\
    \    if ($length == 1) return null;\n\n    // sort array ascending\n    sort($lst);\n\
    \n    // get 2nd smallest element\n    $smallest = $lst[0];\n    $next_smallest\
    \ = null;\n    foreach ($lst as $l) {\n        if ($l > $smallest) {\n       \
    \     $next_smallest = $l;\n            break;\n        }\n    }\n\n    return\
    \ $next_smallest;\n}\n", "  // Your code here\n  sort($lst);\n  $length = count($lst);\n\
    \  if ($length == 0) {\n    return null;\n  } else if ($length == 1) {\n    return\
    \ null;\n  } else if ($length == 2) {\n    if ($lst[0] == $lst[1]) {\n      return\
    \ null;\n    } else {\n      return $lst[1];\n    }\n  } else {\n    $smallest\
    \ = $lst[0];\n    for ($i = 1; $i < $length; $i++) {\n      if ($lst[$i] != $smallest)\
    \ {\n        return $lst[$i];\n      }\n    }\n  }\n}\n", "\tif (empty($lst))\
    \ return null;\n\tsort($lst);\n\t$min = $lst[0];\n\t$smallest = 0;\n\tforeach\
    \ ($lst as $num) {\n\t\tif ($num > $min) {\n\t\t\treturn $num;\n\t\t}\n\t}\n\t\
    return null;\n}\n\n$test = array(1, 2, 3, 4, 5);\necho next_smallest($test) .\
    \ \"\\n\";\n$test = array(5, 1, 4, 3, 2);\necho next_smallest($test) . \"\\n\"\
    ;\n$test = array();\necho next_smallest($test) . \"\\n\";\n$test = array(1, 1);\n\
    echo next_smallest($test) . \"\\n\";", "    if(empty($lst)) {\n        return\
    \ null;\n    }\n    if(count($lst) <= 1) {\n        return null;\n    }\n    $min\
    \ = $lst[0];\n    $next = null;\n    for($i = 1; $i < count($lst); $i++) {\n \
    \       if($lst[$i] < $min) {\n            $next = $min;\n            $min = $lst[$i];\n\
    \        } else if($lst[$i] > $min && ($next == null || $lst[$i] < $next)) {\n\
    \            $next = $lst[$i];\n        }\n    }\n    return $next;\n}\n$lst =\
    \ array(1, 2, 3, 4, 5);\necho next_smallest($lst);\necho \"\\n\";\n$lst = array(5,\
    \ 1, 4, 3, 2);\necho next_smallest($lst);\necho \"\\n\";\n$lst = array();\necho\
    \ next_smallest($lst);\necho \"\\n\";\n$lst = array(1, 1);\necho next_smallest($lst);\n\
    echo \"\\n\";", "    if (count($lst) < 2) {\n        return null;\n    }\n   \
    \ sort($lst);\n    $count = count($lst);\n    for ($i = 1; $i < $count; $i++)\
    \ {\n        if ($lst[$i] > $lst[0]) {\n            return $lst[$i];\n       \
    \ }\n    }\n    return null;\n}", "\t$sorted = $lst;\n\tsort($sorted);\n\t$seen\
    \ = array();\n\tforeach ($sorted as $val) {\n\t\tif (!in_array($val, $seen)) {\n\
    \t\t\tarray_push($seen, $val);\n\t\t}\n\t}\n\tif (count($seen) < 2) {\n\t\treturn\
    \ null;\n\t}\n\treturn $seen[1];\n}\n\n$list1 = array(1, 2, 3, 4, 5);\n$list2\
    \ = array(5, 1, 4, 3, 2);\n$list3 = array();\n$list4 = array(1, 1);\n\necho next_smallest($list1)\
    \ . \"\\n\";\necho next_smallest($list2) . \"\\n\";\necho next_smallest($list3)\
    \ . \"\\n\";\necho next_smallest($list4) . \"\\n\";", "    $smallest = null;\n\
    \    $second_smallest = null;\n    if (!is_array($lst)) {\n        return null;\n\
    \    }\n    for ($i = 0; $i < count($lst); $i++) {\n        if ($smallest ===\
    \ null || $lst[$i] < $smallest) {\n            $second_smallest = $smallest;\n\
    \            $smallest = $lst[$i];\n        } else if ($second_smallest === null\
    \ || $lst[$i] < $second_smallest) {\n            $second_smallest = $lst[$i];\n\
    \        }\n    }\n    return $second_smallest;\n}\n\n$tests = array(\n    'test1'\
    \ => array(\n        'input' => array(1, 2, 3, 4, 5),\n        'expect' => 2\n\
    \    ),\n    'test2' => array(\n        'input' => array(5, 1, 4, 3, 2),\n   \
    \     'expect' => 2\n    ),\n    'test3' => array(\n        'input' => array(),\n\
    \        'expect' => null\n    ),\n    'test4' => array(\n        'input' => array(1,\
    \ 1),\n        'expect' => null\n    ),\n);\n\nforeach ($tests as $test) {\n \
    \   $input = $test['input'];\n    $expect = $test['expect'];\n    $output = next_smallest($input);\n\
    \    if ($output === $expect) {\n        echo \"<p>pass</p>\";\n    } else {\n\
    \        echo \"<p>fail</p>\";\n    }\n}", "    if (count($lst) < 2) {\n     \
    \   return null;\n    }\n    $lst = array_unique($lst);\n    $lst = array_values($lst);\n\
    \    sort($lst);\n    return $lst[1];\n}\n\n$lst = array(1, 2, 3, 4, 5);\n$lst\
    \ = array(5, 1, 4, 3, 2);\n$lst = array();\n$lst = array(1, 1);\necho next_smallest($lst)\
    \ . \"\\n\";", "\t$min = NULL;\n\t$secondMin = NULL;\n\tif (count($lst) > 0) {\n\
    \t\tforeach ($lst as $l) {\n\t\t\tif ($min === NULL || $l < $min) {\n\t\t\t\t\
    $secondMin = $min;\n\t\t\t\t$min = $l;\n\t\t\t} else if ($secondMin === NULL ||\
    \ $l < $secondMin) {\n\t\t\t\t$secondMin = $l;\n\t\t\t}\n\t\t}\n\t}\n\treturn\
    \ $secondMin;\n}\n", "    if (count($lst) < 2) {\n        return null;\n    }\n\
    \    $min = min($lst);\n    $prev = null;\n    foreach ($lst as $val) {\n    \
    \    if ($val > $min) {\n            if ($prev === null || $val < $prev) {\n \
    \               $prev = $val;\n            }\n        }\n    }\n    return $prev;\n\
    }\n", "\t// Make sure list has at least 2 elements\n\tif (count($lst) < 2) {\n\
    \t\treturn null;\n\t}\n\t// Assume that the first element is the smallest\n\t\
    $smallest = $lst[0];\n\t$second_smallest = null;\n\t// Loop through elements and\
    \ check for smaller numbers\n\tforeach ($lst as $i) {\n\t\tif ($i < $smallest)\
    \ {\n\t\t\t$second_smallest = $smallest;\n\t\t\t$smallest = $i;\n\t\t} else if\
    \ ($i < $second_smallest) {\n\t\t\t$second_smallest = $i;\n\t\t}\n\t}\n\treturn\
    \ $second_smallest;\n}", "    if (count($lst) < 2) return null;\n    $smallest\
    \ = $lst[0];\n    $second_smallest = null;\n    foreach ($lst as $val) {\n   \
    \     if ($val < $smallest) {\n            $second_smallest = $smallest;\n   \
    \         $smallest = $val;\n        } else if ($val < $second_smallest || $second_smallest\
    \ === null) {\n            $second_smallest = $val;\n        }\n    }\n    return\
    \ $second_smallest;\n}", "    // Edge case: empty list or list with only one element.\n\
    \    if (count($lst) < 2) {\n        return null;\n    }\n    // Find the smallest\
    \ element.\n    $min = min($lst);\n    // Find the 2nd smallest element.\n   \
    \ $sec_min = $min;\n    foreach ($lst as $element) {\n        if ($element > $min\
    \ && $element < $sec_min) {\n            $sec_min = $element;\n        }\n   \
    \ }\n    // Edge case: list with all identical elements.\n    if ($sec_min ==\
    \ $min) {\n        return null;\n    }\n    return $sec_min;\n}\n", "    $len\
    \ = count($lst);\n    if($len < 1) {\n        return NULL;\n    }\n    if($len\
    \ == 1) {\n        return NULL;\n    }\n    $min1 = $lst[0];\n    $min2 = NULL;\n\
    \    for($i = 1; $i < $len; $i++) {\n        if($lst[$i] < $min1) {\n        \
    \    $min2 = $min1;\n            $min1 = $lst[$i];\n        } else if($lst[$i]\
    \ > $min1 && ($min2 == NULL || $lst[$i] < $min2)) {\n            $min2 = $lst[$i];\n\
    \        }\n    }\n    return $min2;\n}\n\n$a = array(1, 2, 3, 4, 5);\nprint next_smallest($a)\
    \ . \"\\n\";\n$a = array(5, 1, 4, 3, 2);\nprint next_smallest($a) . \"\\n\";\n\
    $a = array();\nprint next_smallest($a) . \"\\n\";\n$a = array(1, 1);\nprint next_smallest($a)\
    \ . \"\\n\";", "\tif (count($lst) < 2) return null;\n\tsort($lst);\n\t$last =\
    \ null;\n\tforeach ($lst as $e) {\n\t\tif ($last != null && $last != $e) return\
    \ $e;\n\t\t$last = $e;\n\t}\n\treturn null;\n}\n", "  $n = count($lst);\n  if\
    \ ($n == 0) return null;\n  if ($n == 1) return null;\n  $first = null;\n  $second\
    \ = null;\n  for ($i = 0; $i < $n; $i++) {\n    if ($lst[$i] < $first || $first\
    \ == null) {\n      $second = $first;\n      $first = $lst[$i];\n    } else if\
    \ ($lst[$i] < $second || $second == null) {\n      $second = $lst[$i];\n    }\n\
    \  }\n  return $second;\n}\n", "  // your code here\n}", "    $min1 = PHP_INT_MAX;\n\
    \    $min2 = PHP_INT_MAX;\n    foreach ($lst as $num) {\n        if ($num < $min1)\
    \ {\n            $min2 = $min1;\n            $min1 = $num;\n        } else if\
    \ ($num < $min2) {\n            $min2 = $num;\n        }\n    }\n    return $min2\
    \ == PHP_INT_MAX ? null : $min2;\n}\n\necho next_smallest([1, 2, 3, 4, 5]) . \"\
    <br/>\";\necho next_smallest([5, 1, 4, 3, 2]) . \"<br/>\";\necho next_smallest([])\
    \ . \"<br/>\";\necho next_smallest([1, 1]) . \"<br/>\";", "\t$min = null;\n\t\
    $num = null;\n\t$n = count($lst);\n\tfor ($i = 0; $i < $n; $i++) {\n\t\tif ($i\
    \ == 0) {\n\t\t\t$min = $lst[$i];\n\t\t} else if ($lst[$i] > $min) {\n\t\t\t$num\
    \ = $lst[$i];\n\t\t\tbreak;\n\t\t}\n\t}\n\tfor ($i = 0; $i < $n; $i++) {\n\t\t\
    if ($lst[$i] > $min && $lst[$i] < $num) {\n\t\t\t$num = $lst[$i];\n\t\t}\n\t}\n\
    \treturn $num;\n}", "\t$tmp = array_flip($lst);\n\tasort($tmp);\n\t$tmp = array_flip($tmp);\n\
    \tunset($tmp[$tmp[0]]);\n\tif (empty($tmp)) {\n\t\treturn null;\n\t}\n\treturn\
    \ $tmp[0];\n}\n\n$lst = array(1, 2, 3, 4, 5);\n$r = next_smallest($lst);\necho\
    \ $r, \"\\n\";\n\n$lst = array(5, 1, 4, 3, 2);\n$r = next_smallest($lst);\necho\
    \ $r, \"\\n\";\n\n$lst = array();\n$r = next_smallest($lst);\nvar_dump($r);\n\n\
    $lst = array(1, 1);\n$r = next_smallest($lst);\nvar_dump($r);", "    // Your code\
    \ here.\n}", "    if (count($lst) < 2) {\n        return null;\n    }\n    sort($lst);\n\
    \    $smallest = $lst[0];\n    $next_smallest = null;\n    foreach ($lst as $num)\
    \ {\n        if ($num === $smallest) {\n            continue;\n        }\n   \
    \     if ($next_smallest === null || $num < $next_smallest) {\n            $next_smallest\
    \ = $num;\n        }\n    }\n    return $next_smallest;\n}\nassert(next_smallest([1,\
    \ 2, 3, 4, 5]) === 2);\nassert(next_smallest([5, 1, 4, 3, 2]) === 2);\nassert(next_smallest([])\
    \ === null);\nassert(next_smallest([1, 1]) === null);", "  if (count($lst) < 2)\
    \ return null;\n  $min = $lst[0];\n  $second_min = null;\n  foreach ($lst as $num)\
    \ {\n    if ($num < $min) {\n      $second_min = $min;\n      $min = $num;\n \
    \   } else if ($num < $second_min || $second_min === null) {\n      $second_min\
    \ = $num;\n    }\n  }\n  return $second_min;\n}\n\n$test = array(1, 2, 3, 4, 5);\n\
    printf(\"next_smallest(%s) = %s\\n\", implode(', ', $test), next_smallest($test));\n\
    $test = array(5, 1, 4, 3, 2);\nprintf(\"next_smallest(%s) = %s\\n\", implode(',\
    \ ', $test), next_smallest($test));\n$test = array();\nprintf(\"next_smallest(%s)\
    \ = %s\\n\", implode(', ', $test), next_smallest($test));\n$test = array(1, 1);\n\
    printf(\"next_smallest(%s) = %s\\n\", implode(', ', $test), next_smallest($test));",
  "    $min = min($lst);\n    $min2 = null;\n    foreach ($lst as $item) {\n     \
    \   if ($item < $min2 && $item > $min) {\n            $min2 = $item;\n       \
    \ }\n    }\n    return $min2;\n}", "    // Your code here\n}", "  if (count($lst)\
    \ < 2) return null;\n  $lst = array_unique($lst);\n  sort($lst);\n  return $lst[1];\n\
    }\n", "\tif (count($lst) < 2) {\n\t\treturn null;\n\t}\n\t$s = min($lst);\n\t\
    $s2 = max($lst);\n\tforeach ($lst as $i) {\n\t\tif ($i > $s && $i < $s2) {\n\t\
    \t\t$s2 = $i;\n\t\t}\n\t}\n\tif ($s2 == max($lst)) {\n\t\treturn null;\n\t}\n\t\
    return $s2;\n}\n$lst = array(1, 2, 3, 4, 5);\n$lst2 = array(5, 1, 4, 3, 2);\n\
    $lst3 = array();\n$lst4 = array(1, 1);\n$lst5 = array(2, 3, 1);\n$lst6 = array(1,\
    \ 3, 2);\necho next_smallest($lst).\"\\n\";\necho next_smallest($lst2).\"\\n\"\
    ;\necho next_smallest($lst3).\"\\n\";\necho next_smallest($lst4).\"\\n\";\necho\
    \ next_smallest($lst5).\"\\n\";\necho next_smallest($lst6).\"\\n\";", "    if(!$lst)\
    \ return null;\n    $lst = array_unique($lst);\n    if(count($lst) == 1) return\
    \ null;\n    sort($lst);\n    return $lst[1];\n}\n", "    $lst = array_unique($lst);\n\
    \    sort($lst);\n    $smallest = array_shift($lst);\n    $second_smallest = array_shift($lst);\n\
    \    return $second_smallest;\n}\nprint_r(next_smallest([1,2,3,4,5]));\nprint_r(next_smallest([5,1,4,3,2]));\n\
    print_r(next_smallest([]));\nprint_r(next_smallest([1,1]));", "\t$min = min($lst);\n\
    \t$out = null;\n\tforeach ($lst as $key => $val) {\n\t\tif ($val > $min) {\n\t\
    \t\tif ($out === null) {\n\t\t\t\t$out = $val;\n\t\t\t} else {\n\t\t\t\t$out =\
    \ min($out, $val);\n\t\t\t}\n\t\t}\n\t}\n\treturn $out;\n}", "  if(count($lst)\
    \ < 2) return null;\n  elseif(count($lst) == 2) {\n    return $lst[0] != $lst[1]\
    \ ? min($lst) : null;\n  }\n  else {\n    $lst = array_unique($lst);\n    $lst\
    \ = array_values($lst);\n    if(count($lst) == 1) return null;\n    sort($lst);\n\
    \    return $lst[1];\n  }\n}\n\n$tests = array(\n  array(1, 2, 3, 4, 5),\n  array(5,\
    \ 1, 4, 3, 2),\n  array(),\n  array(1, 1),\n  array(1, 2, 3, 4, 5, -1, -2),\n\
    \  array(2, 3, 1, -3, -2, -1),\n  array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10),\n  array(1,\
    \ 1, 1, 1, 1, 1, 1, 1, 1, 1),\n  array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16, 17, 18, 19, 20, 1),\n  array(1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 20)\n);\n\nforeach($tests as $test)\
    \ {\n  $r = next_smallest($test);\n  echo '[' . implode(', ', $test) . '] => '\
    \ . $r . \"\\n\";\n}", "\t$a = array_unique($lst);\n\tsort($a);\n\tif (count($a)\
    \ == 1) {\n\t\treturn null;\n\t}\n\treturn $a[1];\n}\n\n$lst = [1, 2, 3, 4, 5];\n\
    $ans = next_smallest($lst);\necho \"ans = $ans\\n\";\n\n$lst = [5, 1, 4, 3, 2];\n\
    $ans = next_smallest($lst);\necho \"ans = $ans\\n\";\n\n$lst = [];\n$ans = next_smallest($lst);\n\
    echo \"ans = $ans\\n\";\n\n$lst = [1, 1];\n$ans = next_smallest($lst);\necho \"\
    ans = $ans\\n\";\n", "    if(count($lst) <= 1) {\n        return null;\n    }\n\
    \    $ans = null;\n    $min = $lst[0];\n    for($i = 1; $i < count($lst); $i++)\
    \ {\n        if($lst[$i] > $min) {\n            if($ans == null || $lst[$i] <\
    \ $ans) {\n                $ans = $lst[$i];\n            }\n        } else {\n\
    \            $min = $lst[$i];\n        }\n    }\n    return $ans;\n}\n\n$lst =\
    \ array(1, 2, 3, 4, 5);\necho \"2nd smallest in \".json_encode($lst).\" is \"\
    .next_smallest($lst).\"\\n\";\n$lst = array(5, 1, 4, 3, 2);\necho \"2nd smallest\
    \ in \".json_encode($lst).\" is \".next_smallest($lst).\"\\n\";\n$lst = array();\n\
    echo \"2nd smallest in \".json_encode($lst).\" is \".next_smallest($lst).\"\\\
    n\";\n$lst = array(1, 1);\necho \"2nd smallest in \".json_encode($lst).\" is \"\
    .next_smallest($lst).\"\\n\";", "  $sml=array();\n  if (count($lst)<=1) {\n  \
    \  return null;\n  }\n  for ($i=0; $i < count($lst); $i++) {\n    if (count($sml)==0)\
    \ {\n      array_push($sml,$lst[$i]);\n    } elseif (count($sml)==1) {\n     \
    \ if ($lst[$i]<$sml[0]) {\n        array_push($sml,$sml[0]);\n        $sml[0]=$lst[$i];\n\
    \      } else {\n        array_push($sml,$lst[$i]);\n      }\n    } else {\n \
    \     if ($lst[$i]<$sml[0]) {\n        $sml[1]=$sml[0];\n        $sml[0]=$lst[$i];\n\
    \      } elseif ($lst[$i]<$sml[1]) {\n        $sml[1]=$lst[$i];\n      }\n   \
    \ }\n  }\n  if (count($sml)==1) {\n    return null;\n  } else {\n    return $sml[1];\n\
    \  }\n}\nprint \"Input array.\\n\";\n$input = fgets(STDIN);\n$array = explode(\"\
    \ \", $input);\nprint \"Second smallest number in array is: \" . next_smallest($array)\
    \ . \"\\n\";", "\tif (count($lst) == 0) {\n\t\treturn null;\n\t} else if (count($lst)\
    \ == 1) {\n\t\treturn null;\n\t} else {\n\t\tsort($lst);\n\t\treturn $lst[1];\n\
    \t}\n}\n\nprint_r(next_smallest(array(1, 2, 3, 4, 5)) . \"\\n\");\nprint_r(next_smallest(array(5,\
    \ 1, 4, 3, 2)) . \"\\n\");\nprint_r(next_smallest(array()) . \"\\n\");\nprint_r(next_smallest(array(1,\
    \ 1)) . \"\\n\");", "\t$res = null;\n\tif (sizeof($lst) > 1) {\n\t\t$sorted_lst\
    \ = $lst;\n\t\tsort($sorted_lst);\n\t\t$prev = null;\n\t\tforeach ($sorted_lst\
    \ as $i) {\n\t\t\tif ($prev !== null && $i !== $prev) {\n\t\t\t\t$res = $i;\n\t\
    \t\t\tbreak;\n\t\t\t}\n\t\t\t$prev = $i;\n\t\t}\n\t}\n\treturn $res;\n}\n", " \
    \   $n = count($lst);\n    if ($n == 0) return null;\n    $min = $lst[0];\n  \
    \  $sec_min = null;\n    for ($i = 1; $i < $n; $i++) {\n        if ($lst[$i] <\
    \ $min) {\n            $sec_min = $min;\n            $min = $lst[$i];\n      \
    \  } else if ($lst[$i] < $sec_min || $sec_min == null) {\n            $sec_min\
    \ = $lst[$i];\n        }\n    }\n    return $sec_min;\n}\n", "    sort($lst);\n\
    \    $last = null;\n    $nextSmallest = null;\n    foreach ($lst as $v) {\n  \
    \      if ($last === null) {\n            $last = $v;\n        } else {\n    \
    \        if ($v > $last) {\n                $nextSmallest = $v;\n            \
    \    break;\n            }\n            $last = $v;\n        }\n    }\n    return\
    \ $nextSmallest;\n}\necho next_smallest([1, 2, 3, 4, 5]);\necho \"\\n\";\necho\
    \ next_smallest([5, 1, 4, 3, 2]);\necho \"\\n\";\necho next_smallest([]);\necho\
    \ \"\\n\";\necho next_smallest([1, 1]);\necho \"\\n\";", "  if (count($lst) <\
    \ 2) {\n    return null;\n  }\n\n  $first = null;\n  $second = null;\n\n  foreach\
    \ ($lst as $value) {\n    if ($first === null) {\n      $first = $value;\n   \
    \ } else if ($second === null) {\n      if ($value < $first) {\n        $second\
    \ = $first;\n        $first = $value;\n      } else {\n        $second = $value;\n\
    \      }\n    } else {\n      if ($value < $first) {\n        $second = $first;\n\
    \        $first = $value;\n      } else if ($value < $second) {\n        $second\
    \ = $value;\n      }\n    }\n  }\n\n  return $second;\n}\n\nprint next_smallest([1,\
    \ 2, 3, 4, 5]) . \"\\n\";\nprint next_smallest([5, 1, 4, 3, 2]) . \"\\n\";\nprint\
    \ next_smallest([]) . \"\\n\";\nprint next_smallest([1, 1]) . \"\\n\";", "   \
    \ if (count($lst) < 2) {\n        return null;\n    }\n    $i = 0;\n    $min =\
    \ null;\n    $second_min = null;\n    while ($i < count($lst)) {\n        if ($min\
    \ === null) {\n            $min = $lst[$i];\n        } elseif ($lst[$i] < $min)\
    \ {\n            $second_min = $min;\n            $min = $lst[$i];\n        }\
    \ elseif ($second_min === null) {\n            $second_min = $lst[$i];\n     \
    \   } elseif ($lst[$i] < $second_min) {\n            $second_min = $lst[$i];\n\
    \        }\n        $i += 1;\n    }\n    return $second_min;\n}\n", "    $min\
    \ = min($lst);\n    unset($lst[array_search($min, $lst)]);\n    if(empty($lst))\
    \ return null;\n    return min($lst);\n}\nprint_r(next_smallest([1, 2, 3, 4, 5]));\n\
    print_r(next_smallest([5, 1, 4, 3, 2]));\nprint_r(next_smallest([]));\nprint_r(next_smallest([1,\
    \ 1]));", "    $smallest = null;\n    $second_smallest = null;\n    foreach ($lst\
    \ as $num) {\n        if (is_null($smallest) || $num < $smallest) {\n        \
    \    $second_smallest = $smallest;\n            $smallest = $num;\n        } else\
    \ if (is_null($second_smallest) || $num < $second_smallest) {\n            $second_smallest\
    \ = $num;\n        }\n    }\n    return $second_smallest;\n}\n\necho next_smallest([1,\
    \ 2, 3, 4, 5]);\necho next_smallest([5, 1, 4, 3, 2]);\necho next_smallest([]);\n\
    echo next_smallest([1, 1]);", "    if (count($lst) == 0) {\n        return null;\n\
    \    }\n    if (count($lst) == 1) {\n        return null;\n    }\n    $min = $lst[0];\n\
    \    $next_min = $lst[1];\n    for ($i = 1; $i < count($lst); $i++) {\n      \
    \  if ($lst[$i] < $min) {\n            $next_min = $min;\n            $min = $lst[$i];\n\
    \        } else if ($lst[$i] < $next_min) {\n            $next_min = $lst[$i];\n\
    \        }\n    }\n    return $next_min;\n}", "    if (count($lst) <= 1) return\
    \ null;\n    $sorted = $lst;\n    sort($sorted);\n    $smallest = array_shift($sorted);\n\
    \    while (count($sorted) > 0) {\n        $next = array_shift($sorted);\n   \
    \     if ($next > $smallest) return $next;\n    }\n    return null;\n}\n", " \
    \   $length = count($lst);\n    if($length < 2) {\n        return null;\n    }\n\
    \    if($length == 2) {\n        if($lst[0] == $lst[1]) {\n            return\
    \ null;\n        }\n        return $lst[0] < $lst[1] ? $lst[0] : $lst[1];\n  \
    \  }\n    $min = $lst[0];\n    $next_min = $lst[1];\n    for($i = 1; $i < $length;\
    \ $i++) {\n        if($lst[$i] < $min) {\n            $next_min = $min;\n    \
    \        $min = $lst[$i];\n        } else if($lst[$i] < $next_min) {\n       \
    \     $next_min = $lst[$i];\n        }\n    }\n    return $next_min;\n}\n$res\
    \ = next_smallest(array(1, 2, 3, 4, 5));\necho $res.\"\\n\";\n$res = next_smallest(array(5,\
    \ 1, 4, 3, 2));\necho $res.\"\\n\";\n$res = next_smallest(array());\necho $res.\"\
    \\n\";\n$res = next_smallest(array(1, 1));\necho $res.\"\\n\";", "    if (count($lst)\
    \ < 2) return null;\n    $smallest = min($lst);\n    $secsmallest = $smallest;\n\
    \    foreach ($lst as $val) {\n        if ($val != $smallest) {\n            $secsmallest\
    \ = $val;\n            break;\n        }\n    }\n    foreach ($lst as $val) {\n\
    \        if ($val > $smallest && $val < $secsmallest) {\n            $secsmallest\
    \ = $val;\n        }\n    }\n    return $secsmallest;\n}", "    if (count($lst)\
    \ < 2) {\n        return null;\n    }\n    $count = count($lst);\n    $sorted\
    \ = sort_array($lst);\n    $index = 2;\n    while ($index < $count) {\n      \
    \  if ($sorted[$index] != $sorted[$index - 1]) {\n            return $sorted[$index];\n\
    \        }\n        $index++;\n    }\n    return null;\n}\n", "  if (count($lst)\
    \ < 2) {\n    return null;\n  }\n  $smallest = $lst[0];\n  $second = null;\n \
    \ for ($i = 1; $i < count($lst); $i++) {\n    if ($lst[$i] < $smallest) {\n  \
    \    $second = $smallest;\n      $smallest = $lst[$i];\n    } else if ($lst[$i]\
    \ < $second || $second === null) {\n      $second = $lst[$i];\n    }\n  }\n  return\
    \ $second;\n}\n\necho next_smallest([1, 2, 3, 4, 5]) . PHP_EOL;\necho next_smallest([5,\
    \ 1, 4, 3, 2]) . PHP_EOL;\necho next_smallest([]) . PHP_EOL;\necho next_smallest([1,\
    \ 1]) . PHP_EOL;", "  if (count($lst) < 2) {\n    return null;\n  }\n  sort($lst);\n\
    \  $current = $lst[0];\n  for ($i = 1; $i < count($lst); $i++) {\n    if ($lst[$i]\
    \ > $current) {\n      return $lst[$i];\n    }\n  }\n  return null;\n}\n", " \
    \   if (empty($lst)) return null;\n    $min = PHP_INT_MAX;\n    $min2 = $min;\n\
    \    foreach ($lst as $num) {\n        if ($num < $min) {\n            $min2 =\
    \ $min;\n            $min = $num;\n        } else if ($num < $min2) {\n      \
    \      $min2 = $num;\n        }\n    }\n    return $min == $min2 ? null : $min2;\n\
    }\n\n$lst = array(5, 1, 4, 3, 2);\n$lst2 = array(5, 1, 4, 3, 2, 0);\n$lst3 = array(1,\
    \ 1);\n$lst4 = array();\necho next_smallest($lst) . \"\\n\";\necho next_smallest($lst2)\
    \ . \"\\n\";\necho next_smallest($lst3) . \"\\n\";\necho next_smallest($lst4)\
    \ . \"\\n\";", "  $c = count($lst);\n  if ($c == 0) {\n    return null;\n  }\n\
    \  if ($c == 1) {\n    return null;\n  }\n  if ($c == 2) {\n    if ($lst[0] !=\
    \ $lst[1]) {\n      return $lst[1];\n    } else {\n      return null;\n    }\n\
    \  }\n  sort($lst);\n  $previous = $lst[0];\n  $next = null;\n  for ($i = 1; $i\
    \ < $c; $i++) {\n    if ($lst[$i] != $previous) {\n      $next = $lst[$i];\n \
    \     break;\n    }\n    $previous = $lst[$i];\n  }\n  return $next;\n}\n", " \
    \   if (count($lst) < 2) {\n        return null;\n    }\n\n    $cur_smallest =\
    \ $lst[0];\n    $next_smallest = null;\n\n    foreach ($lst as $i) {\n       \
    \ if ($i == $cur_smallest) {\n            continue;\n        }\n\n        if ($next_smallest\
    \ == null || $i < $next_smallest) {\n            $next_smallest = $i;\n      \
    \  }\n\n        if ($i < $cur_smallest) {\n            $next_smallest = $cur_smallest;\n\
    \            $cur_smallest = $i;\n        }\n    }\n\n    return $next_smallest;\n\
    }\n", "    $smallest = null;\n    $second_smallest = null;\n    foreach ($lst\
    \ as $i) {\n        if ($smallest === null) {\n            $smallest = $i;\n \
    \       } else if ($i < $smallest) {\n            $second_smallest = $smallest;\n\
    \            $smallest = $i;\n        } else if ($second_smallest === null) {\n\
    \            $second_smallest = $i;\n        } else if ($i < $second_smallest)\
    \ {\n            $second_smallest = $i;\n        }\n    }\n    return $second_smallest;\n\
    }\n\n$lst = [1, 2, 3, 4, 5];\necho next_smallest($lst);\necho \"\\n\";\n$lst =\
    \ [5, 1, 4, 3, 2];\necho next_smallest($lst);\necho \"\\n\";\n$lst = [];\necho\
    \ next_smallest($lst);\necho \"\\n\";\n$lst = [1, 1];\necho next_smallest($lst);\n\
    echo \"\\n\";", "  if(sizeof($lst) == 0) {\n    return NULL;\n  }\n  $lst = array_values(array_unique($lst));\n\
    \  if(sizeof($lst) == 1) {\n    return NULL;\n  }\n  $smallest = $lst[0];\n  $second_smallest\
    \ = $lst[1];\n  for($i = 1; $i < sizeof($lst); $i++) {\n    if($lst[$i] < $smallest)\
    \ {\n      $second_smallest = $smallest;\n      $smallest = $lst[$i];\n    } elseif($lst[$i]\
    \ < $second_smallest) {\n      $second_smallest = $lst[$i];\n    }\n  }\n  return\
    \ $second_smallest;\n}\n\n$arr = array(1, 2, 3, 4, 5);\necho next_smallest($arr);\n\
    \n$arr = array(5, 1, 4, 3, 2);\necho next_smallest($arr);\n\n$arr = array();\n\
    echo next_smallest($arr);\n\n$arr = array(1, 1);\necho next_smallest($arr);\n\n\
    $arr = array(1, 2, 3, 4, 5, 4, 3, 2, 1);\necho next_smallest($arr);", "    if\
    \ (count($lst) < 2) {\n        return null;\n    }\n    rsort($lst);\n    if ($lst[0]\
    \ == $lst[1]) {\n        return null;\n    }\n    return $lst[1];\n}\nprint_r(next_smallest([1,\
    \ 2, 3, 4, 5]) . \"\\n\");\nprint_r(next_smallest([5, 1, 4, 3, 2]) . \"\\n\");\n\
    print_r(next_smallest([]) . \"\\n\");\nprint_r(next_smallest([1, 1]) . \"\\n\"\
    );", "    if (count($lst) <= 1) {\n        return null;\n    }\n    $minimum =\
    \ min($lst);\n    $secondMin = null;\n    for ($i = 0; $i < count($lst); $i++)\
    \ {\n        if ($lst[$i] == $minimum) {\n            continue;\n        }\n \
    \       if ($secondMin == null || $lst[$i] < $secondMin) {\n            $secondMin\
    \ = $lst[$i];\n        }\n    }\n    return $secondMin;\n}\n", "    if (count($lst)\
    \ < 2) {\n        return null;\n    }\n    $smallest = $lst[0];\n    $second_smallest\
    \ = $lst[1];\n    if ($smallest > $second_smallest) {\n        $smallest = $lst[1];\n\
    \        $second_smallest = $lst[0];\n    }\n    for ($i = 2; $i < count($lst);\
    \ $i++) {\n        if ($lst[$i] < $smallest) {\n            $second_smallest =\
    \ $smallest;\n            $smallest = $lst[$i];\n        } else if ($lst[$i] !=\
    \ $smallest && $lst[$i] < $second_smallest) {\n            $second_smallest =\
    \ $lst[$i];\n        }\n    }\n    if ($smallest == $second_smallest) {\n    \
    \    return null;\n    }\n    return $second_smallest;\n}\n", "  $smallest = null;\n\
    \  $second_smallest = null;\n  foreach ($lst as $x) {\n    if ($smallest === null)\
    \ {\n      $smallest = $x;\n    } elseif ($x < $smallest) {\n      $second_smallest\
    \ = $smallest;\n      $smallest = $x;\n    } elseif ($second_smallest === null\
    \ || $x < $second_smallest) {\n      $second_smallest = $x;\n    }\n  }\n  return\
    \ $second_smallest;\n}\n\necho \"Next smallest element: \".next_smallest([1,2,3,4,5]).\"\
    \\n\";\necho \"Next smallest element: \".next_smallest([5,1,4,3,2]).\"\\n\";\n\
    echo \"Next smallest element: \".next_smallest([]).\"\\n\";\necho \"Next smallest\
    \ element: \".next_smallest([1,1]).\"\\n\";", "  $smallest = min($lst);\n  $sub\
    \ = array_diff($lst, array($smallest));\n  if(count($sub)>0) {\n    return min($sub);\n\
    \  } else {\n    return null;\n  }\n}\n\n$input1 = array(1, 2, 3, 4, 5);\n$input2\
    \ = array(5, 1, 4, 3, 2);\n$input3 = array();\n$input4 = array(1, 1);\n\necho\
    \ next_smallest($input1) . \"\\n\";\necho next_smallest($input2) . \"\\n\";\n\
    echo next_smallest($input3) . \"\\n\";\necho next_smallest($input4) . \"\\n\";",
  "    sort($lst);\n    $len = count($lst);\n    $n = 0;\n    for ($i = 0; $i < $len;\
    \ $i++) {\n        if ($lst[$i] !== $lst[$i + 1]) {\n            $n++;\n     \
    \   }\n        if ($n === 2) {\n            return $lst[$i + 1];\n        }\n\
    \    }\n    return null;\n}", "    $min = min($lst);\n    if (count($lst) < 2)\
    \ {\n        return null;\n    }\n    $occurences = array_count_values($lst);\n\
    \    if ($occurences[$min] > 1) {\n        return null;\n    }\n    $min_idx =\
    \ array_search($min, $lst);\n    $lst = array_slice($lst, $min_idx + 1);\n   \
    \ return min($lst);\n}\n\nprint(next_smallest([1, 2, 3, 4, 5]));\nprint(next_smallest([5,\
    \ 1, 4, 3, 2]));\nprint(next_smallest([]));\nprint(next_smallest([1, 1]));", "\t\
    sort($lst);\n\tif (empty($lst)) {\n\t\treturn null;\n\t} elseif (count($lst) ==\
    \ 1) {\n\t\treturn null;\n\t} elseif (count($lst) == 2) {\n\t\tif ($lst[0] ==\
    \ $lst[1]) {\n\t\t\treturn null;\n\t\t} else {\n\t\t\treturn $lst[1];\n\t\t}\n\
    \t} else {\n\t\t$lst = array_unique($lst);\n\t\tsort($lst);\n\t\treturn $lst[1];\n\
    \t}\n}\n\necho next_smallest(array(1, 2, 3, 4, 5)) . PHP_EOL;\necho next_smallest(array(5,\
    \ 1, 4, 3, 2)) . PHP_EOL;\necho next_smallest(array()) . PHP_EOL;\necho next_smallest(array(1,\
    \ 1)) . PHP_EOL;", "    sort($lst);\n    $lst_length = count($lst);\n    $first_var\
    \ = $lst[0];\n    $second_var = $lst[1];\n    if ($lst_length === 0) {\n     \
    \   return NULL;\n    } else if ($lst_length === 1) {\n        return NULL;\n\
    \    } else if ($lst_length === 2) {\n        if ($first_var === $second_var)\
    \ {\n            return NULL;\n        } else {\n            return $second_var;\n\
    \        }\n    } else {\n        return $second_var;\n    }\n}\n\n$array = [5,\
    \ 1, 4, 3, 2];\n$result = next_smallest($array);\nprint_r($result);"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
