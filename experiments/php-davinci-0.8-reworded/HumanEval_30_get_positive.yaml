name: HumanEval_30_get_positive
language: php
prompt: "<?php\n// Return only positive numbers in the array.\n// >>> get_positive(array(-1,\
  \ 2, -4, 5, 6))\n// array(2, 5, 6)\n// >>> get_positive(array(5, 3, -5, 2, -3, 3,\
  \ 9, 0, 123, 1, -10))\n// array(5, 3, 2, 3, 9, 123, 1)\nfunction get_positive($l)\
  \ {\n"
tests: "function candidate(...$args) {\n    return get_positive(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
  \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
  \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
  \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $new_l = array();\n    foreach ($l as $v) {\n        if ($v > 0)\
    \ {\n            $new_l[] = $v;\n        }\n    }\n    return $new_l;\n}\n", " \
    \   $positives = array();\n    foreach ($l as $item) {\n        if ($item > 0)\
    \ {\n            $positives[] = $item;\n        }\n    }\n    return $positives;\n\
    }\n\n$arr = array(-1, 2, -4, 5, 6);\nvar_dump(get_positive($arr));", "    return\
    \ array_filter($l, function($x) {\n        return $x > 0;\n    });\n}\n", "\t\
    $o = array();\n\tforeach ($l as $e) {\n\t\tif ($e > 0) {\n\t\t\t$o[] = $e;\n\t\
    \t}\n\t}\n\treturn $o;\n}\n", "\t$p_list = array();\n\tforeach ($l as $i) {\n\t\
    \tif ($i > 0) {\n\t\t\tarray_push($p_list, $i);\n\t\t}\n\t}\n\treturn $p_list;\n\
    }", "\t$r = array();\n\tforeach ($l as $i) {\n\t\tif ($i > 0) {\n\t\t\t$r[] =\
    \ $i;\n\t\t}\n\t}\n\treturn $r;\n}\n", "    $res = array();\n    foreach ($l as\
    \ $e) {\n        if ($e > 0) {\n            $res[] = $e;\n        }\n    }\n \
    \   return $res;\n}", "\t$ret = array();\n\tforeach ($l as $v) {\n\t\tif ($v >\
    \ 0) {\n\t\t\t$ret[] = $v;\n\t\t}\n\t}\n\treturn $ret;\n}\n", "\t$ret = array();\n\
    \t$i = 0;\n\tforeach ($l as $item) {\n\t\tif ($item > 0) {\n\t\t\t$ret[$i] = $item;\n\
    \t\t\t$i++;\n\t\t}\n\t}\n\treturn $ret;\n}\n", "\t$p = array();\n\tforeach ($l\
    \ as $x) {\n\t\tif ($x > 0) {\n\t\t\t$p[] = $x;\n\t\t}\n\t}\n\treturn $p;\n}",
  "    $k = array();\n    foreach ($l as $v) {\n        if ($v > 0) {\n          \
    \  $k[] = $v;\n        }\n    }\n    return $k;\n}", "    $l = array_filter($l,\
    \ function($a) {\n        return $a > 0;\n    });\n    return $l;\n}\n", "\t$new_array\
    \ = array();\n\tforeach ($l as $key => $value) {\n\t\tif ($value > 0) {\n\t\t\t\
    $new_array[] = $value;\n\t\t}\n\t}\n\tprint_r($new_array);\n}\nget_positive(array(-1,\
    \ 2, -4, 5, 6));\necho \"<br>\";\nget_positive(array(5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10));\n\necho \"<br>\";\necho \"<br>\";\n", "\t$arr = array();\n\t\
    foreach ($l as $k => $v) {\n\t\tif ($v > 0) {\n\t\t\t$arr[] = $v;\n\t\t}\n\t}\n\
    \treturn $arr;\n}\n", "    $result = array();\n    foreach ($l as $i) {\n    \
    \    if ($i > 0) {\n            $result[] = $i;\n        }\n    }\n    return\
    \ $result;\n}\n", "\t\n}\n", "  $res = array();\n  foreach ($l as $v) {\n    if\
    \ ($v > 0) {\n      $res[] = $v;\n    }\n  }\n  return $res;\n}\n", "\treturn\
    \ array_filter($l, function($n) { return $n > 0; });\n}\n", "    $result = array();\n\
    \    foreach ($l as $number) {\n        if ($number > 0) {\n            $result[]\
    \ = $number;\n        }\n    }\n    return $result;\n}", "    $pos = [];\n   \
    \ foreach ($l as $v) {\n        if ($v > 0) {\n            $pos[] = $v;\n    \
    \    }\n    }\n    return $pos;\n}", "  $r = array();\n  foreach ($l as $value)\
    \ {\n    if ($value > 0) {\n      $r[] = $value;\n    }\n  }\n  return $r;\n}\n",
  "  $ret = array();\n  foreach ($l as $val) {\n    if ($val > 0) {\n      $ret[]\
    \ = $val;\n    }\n  }\n  return $ret;\n}\n", "\t// Your code here.\n\t$res = array();\n\
    \tforeach ($l as $val) {\n\t\tif ($val > 0) {\n\t\t\t$res[] = $val;\n\t\t}\n\t\
    }\n\treturn $res;\n}\n", "    // $r = array();\n    // foreach ($l as $e) {\n\
    \    //     if ($e > 0) {\n    //         $r[] = $e;\n    //     }\n    // }\n\
    \    // return $r;\n    return array_filter($l, function($e) {\n        return\
    \ $e > 0;\n    });\n}\n", "\t$l = array_filter($l, function($e){\n\t\treturn $e\
    \ > 0;\n\t});\n\treturn $l;\n}", "    $new = array();\n    foreach ($l as $n)\
    \ {\n        if ($n > 0) {\n            $new[] = $n;\n        }\n    }\n    return\
    \ $new;\n}\n", "    $a = array();\n    foreach ($l as $v) {\n        if ($v >\
    \ 0) {\n            $a[] = $v;\n        }\n    }\n    return $a;\n}", "\treturn\
    \ array_filter($l, function($num) {\n\t\treturn $num > 0;\n\t});\n}\n", "    $r\
    \ = array();\n    foreach ($l as $v) {\n        if ($v > 0) {\n            $r[]\
    \ = $v;\n        }\n    }\n    return $r;\n}\n", "    return array_filter($l,\
    \ function($i) {\n        return $i > 0;\n    });\n}\n", "\t$a = [];\n\tforeach\
    \ ($l as $i) {\n\t\tif ($i > 0) {\n\t\t\t$a[] = $i;\n\t\t}\n\t}\n\treturn $a;\n\
    }\n", "    $p = array();\n    foreach ($l as $i) {\n        if ($i > 0)\n    \
    \        $p[] = $i;\n    }\n    return $p;\n}\n", "\treturn array_filter($l, function($v)\
    \ {\n\t\treturn $v > 0;\n\t});\n}\n", "  // your code here\n}\n", "    $res =\
    \ array();\n    foreach ($l as $x) {\n        if ($x > 0) {\n            $res[]\
    \ = $x;\n        }\n    }\n    return $res;\n}\n", "  foreach ($l as $num) {\n\
    \    if ($num > 0) {\n      $r[] = $num;\n    }\n  }\n  return $r;\n}\n", "\t\
    $pos = [];\n\tforeach ($l as $value) {\n\t\tif ($value > 0) {\n\t\t\t$pos[] =\
    \ $value;\n\t\t}\n\t}\n\treturn $pos;\n}\n\necho \"\\n\\n\" . implode(\",\", get_positive([-1,\
    \ 2, -4, 5, 6])) . \"\\n\\n\";\necho \"\\n\\n\" . implode(\",\", get_positive([5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10])) . \"\\n\\n\";", "  return array_filter($l,\
    \ function($n) {\n    return $n > 0;\n  });\n}\n", "\t$r = array();\n\tforeach\
    \ ($l as $v) {\n\t\tif ($v > 0) {\n\t\t\t$r[] = $v;\n\t\t}\n\t}\n\treturn $r;\n\
    }\n", "    $e = [];\n    for ($i = 0; $i < count($l); $i++) {\n        if ($l[$i]\
    \ > 0) {\n            array_push($e, $l[$i]);\n        }\n    }\n    return $e;\n\
    }\n", "    $p = array();\n    foreach ($l as $x) {\n        if ($x > 0) {\n  \
    \          $p[] = $x;\n        }\n    }\n    return $p;\n}\n$l = array(-1, 2,\
    \ -4, 5, 6);\nprint_r(get_positive($l));\n$l = array(5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10);\nprint_r(get_positive($l));\n", "  $res = array();\n  foreach\
    \ ($l as $val) {\n    if ($val > 0) {\n      $res[] = $val;\n    }\n  }\n  return\
    \ $res;\n}\n", "\t$r = array();\n\tforeach ($l as $n) {\n\t\tif ($n > 0) {\n\t\
    \t\t$r[] = $n;\n\t\t}\n\t}\n\treturn $r;\n}\n", "  // Your code here...\n}\n",
  "    return array_filter($l, function($x) { return $x > 0; });\n}\n", "\t$res =\
    \ array();\n\tforeach ($l as $e) {\n\t\tif ($e > 0)\n\t\t\t$res[] = $e;\n\t}\n\
    \treturn $res;\n}\n", "  $r = array();\n  foreach ($l as $key => $val) {\n   \
    \ if ($val > 0)\n      $r[] = $val;\n  }\n  return $r;\n}\n", "  return array_filter($l,\
    \ function($x) { return $x > 0; });\n}\n", "\treturn array_filter($l, function($a)\
    \ { return $a > 0; });\n}\n", "    $ret = array();\n    foreach ($l as $e) {\n\
    \        if ($e > 0) {\n            $ret[] = $e;\n        }\n    }\n    return\
    \ $ret;\n}\n", "\t$ret = array();\n\tforeach ($l as $v) {\n\t\tif ($v > 0) {\n\
    \t\t\t$ret[] = $v;\n\t\t}\n\t}\n\treturn $ret;\n}\n", "    return array_filter($l,\
    \ function($i) {\n        return $i > 0;\n    });\n}\n", "\treturn array_filter($l,\
    \ function($e) {\n\t\treturn $e > 0;\n\t});\n}\n", "\t// TODO: implement this\n\
    \treturn array_values(array_filter($l, function($v) { return $v >= 0; }));\n}\n",
  "\t$new_array = array();\n\tforeach ($l as $key => $value) {\n\t\tif ($value >=\
    \ 0) {\n\t\t\t$new_array[] = $value;\n\t\t}\n\t}\n\treturn $new_array;\n}\nprint_r(get_positive(array(-1,\
    \ 2, -4, 5, 6)));\nprint_r(get_positive(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10)));", "  return array_filter($l, function($n) { return $n > 0; });\n}\n",
  "\tforeach ($l as $i => $element) {\n\t\tif ($element < 0) {\n\t\t\tunset($l[$i]);\n\
    \t\t}\n\t}\n\treturn $l;\n}\n", "  return array_filter($l, function($i) { return\
    \ $i > 0; });\n}\n", "\t$result = array();\n\tfor ($i = 0; $i < count($l); $i++)\
    \ {\n\t\tif ($l[$i] > 0) {\n\t\t\tarray_push($result, $l[$i]);\n\t\t}\n\t}\n\t\
    return $result;\n}\n", "  $r = array();\n  foreach ($l as $e) {\n    if ($e >\
    \ 0) {\n      $r[] = $e;\n    }\n  }\n  return $r;\n}\n", "  $result = array();\n\
    \  for ($i = 0; $i < count($l); $i++) {\n    if ($l[$i] > 0) {\n      array_push($result,\
    \ $l[$i]);\n    }\n  }\n  return $result;\n}\n", "  $result = array();\n  for\
    \ ($i = 0; $i < count($l); $i++) {\n    if ($l[$i] > 0) {\n      array_push($result,\
    \ $l[$i]);\n    }\n  }\n  return $result;\n}", "    $r = array();\n    foreach\
    \ ($l as $i) {\n        if ($i > 0) {\n            $r[] = $i;\n        }\n   \
    \ }\n    return $r;\n}\nprint_r(get_positive(array(-1, 2, -4, 5, 6)));\nprint_r(get_positive(array(5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)));", "\t$n=array();\n\tfor($i=0;$i<count($l);$i++)\
    \ {\n\t\tif($l[$i]>0) {\n\t\t\t$n[]=$l[$i];\n\t\t}\n\t}\n\treturn $n;\n}\n", "\t\
    $n = array();\n\tforeach ($l as $k => $v) {\n\t\tif ($v > 0) {\n\t\t\t$n[] = $v;\n\
    \t\t}\n\t}\n\treturn $n;\n}\n", "}\n", "\treturn array_filter($l, function($x)\
    \ {\n\t\treturn $x > 0;\n\t});\n}\n", "  $ret = array();\n  foreach ($l as $v)\
    \ {\n    if ($v > 0) {\n      $ret[] = $v;\n    }\n  }\n  return $ret;\n}\n",
  "  $output = array();\n  for ($i = 0; $i < count($l); $i++) {\n    if ($l[$i] >\
    \ 0) {\n      array_push($output, $l[$i]);\n    }\n  }\n  return $output;\n}\n",
  "    $r = array();\n    foreach ($l as $v) {\n        if ($v > 0) {\n          \
    \  $r[] = $v;\n        }\n    }\n    return $r;\n}\n", "\treturn array_filter($l,\
    \ function($num) { return $num > 0; });\n}\n", "\t$pos = array();\n\tforeach ($l\
    \ as $i) {\n\t\tif ($i > 0) {\n\t\t\t$pos[] = $i;\n\t\t}\n\t}\n\treturn $pos;\n\
    }\n", "    return array_filter($l, \"filter_positive\");\n}\n", "    $r = array();\n\
    \    foreach ($l as $v) {\n        if ($v > 0) {\n            $r[] = $v;\n   \
    \     }\n    }\n    return $r;\n}\n", "    $res = array();\n    foreach ($l as\
    \ $item) {\n        if ($item > 0) {\n            $res[] = $item;\n        }\n\
    \    }\n    return $res;\n}\n", "  // TODO: Handle wrong input.\n  $result = array();\n\
    \  foreach ($l as $val) {\n    if ($val > 0) {\n      $result[] = $val;\n    }\n\
    \  }\n  return $result;\n}\n", "  return array_filter($l, function($a) {\n   \
    \ return $a > 0;\n  });\n}\n", "\tforeach ($l as $i) {\n\t\tif ($i > 0) {\n\t\t\
    \t$result[] = $i;\n\t\t}\n\t}\n\treturn $result;\n}\n$num = array(-1, 2, -4, 5,\
    \ 6);\n$pos = get_positive($num);\nvar_dump($pos);\n", "  $lp = array();\n  foreach\
    \ ($l as $num) {\n    if ($num > 0) {\n      array_push($lp, $num);\n    }\n \
    \ }\n  return $lp;\n}\n", "    $ret = array();\n    foreach ($l as $e) {\n   \
    \     if ($e > 0)\n            $ret[] = $e;\n    }\n    return $ret;\n}\n", " \
    \ $r = array();\n  foreach ($l as $e) {\n    if ($e > 0)\n      $r[] = $e;\n \
    \ }\n  return $r;\n}\n", "    $res = array();\n    foreach ($l as $k => $v) {\n\
    \        if ($v > 0) {\n            $res[] = $v;\n        }\n    }\n    return\
    \ $res;\n}", "    $result = array();\n    foreach ($l as $v) {\n        if ($v\
    \ > 0) {\n            $result[] = $v;\n        }\n    }\n    return $result;\n\
    }\n", "}\n", "\t$result = array();\n\tforeach ($l as $value) {\n\t\tif ($value\
    \ > 0) {\n\t\t\tarray_push($result, $value);\n\t\t}\n\t}\n\treturn $result;\n\
    }\n", "    return array_filter($l, function($x) { return $x > 0; });\n}\n", " \
    \   return array_filter($l, \"is_positive\");\n}\n", "    return array_filter($l,\
    \ \"is_positive\");\n}\n", "    // Your code here\n}", "    return array_filter($l,\
    \ function($x) { return $x > 0; });\n}\n", "    return array_filter($l, function($n)\
    \ {\n        return $n > 0;\n    });\n}\n\n$test = [\n    'test 1' => array(-1,\
    \ 2, -4, 5, 6),\n    'test 2' => array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10),\n\
    ];\n\necho '<pre>';\nforeach ($test as $label => $input) {\n    $t = get_positive($input);\n\
    \    echo $label . ' : ' . print_r($t, true) . '<br>';\n}\necho '</pre>';", " \
    \   // Your code goes here...\n}\n", "  return array_filter($l, function($x) {\n\
    \    return $x > 0;\n  });\n}\n\nvar_dump(get_positive(array(-1, 2, -4, 5, 6)));\n\
    var_dump(get_positive(array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)));", "  //$res\
    \ = array();\n  //$res = array_filter($l, function($x) {return $x > 0;});\n  //$res\
    \ = array_filter($l, \"is_positive\");\n  //return $res;\n  return array_filter($l,\
    \ \"is_positive\");\n}\n", "\t$result = array();\n\tforeach ($l as $item) {\n\t\
    \tif ($item > 0) {\n\t\t\t$result[] = $item;\n\t\t}\n\t}\n\treturn $result;\n\
    }\n", "    $a = array();\n    foreach ($l as $n) {\n        if ($n > 0) {\n  \
    \          $a[] = $n;\n        }\n    }\n    return $a;\n}\n", "}\n", "    $r\
    \ = array();\n    foreach ($l as $i) {\n        if ($i > 0) {\n            $r[]\
    \ = $i;\n        }\n    }\n    return $r;\n}\n", "    return array_filter($l,\
    \ function($x) {\n        return $x > 0;\n    });\n}\n", "    $result = array();\n\
    \    for ($i = 0; $i < count($l); $i++) {\n        if ($l[$i] > 0) {\n       \
    \     array_push($result, $l[$i]);\n        }\n    }\n    return $result;\n}",
  "  return array_filter($l, function($x) { return $x > 0; });\n}\n", "\t// YOUR CODE\
    \ HERE\n}\n", "    // Fill in your code here\n    return $l;\n}", "    return\
    \ array_filter($l, function($i) { return $i > 0; });\n}", "    return array_filter($l,\
    \ function($i) { return $i > 0; });\n}\n", "    return array_filter($l, function($e)\
    \ {\n        return $e > 0;\n    });\n}\n", "    if (count($l) == 0) {\n     \
    \   return [];\n    }\n    else {\n        $res = [];\n        foreach ($l as\
    \ $val) {\n            if ($val > 0) {\n                $res[] = $val;\n     \
    \       }\n        }\n        return $res;\n    }\n}\n", "\t$res = array();\n\t\
    for ($i = 0; $i < count($l); $i++) {\n\t\tif ($l[$i] > 0) {\n\t\t\tarray_push($res,\
    \ $l[$i]);\n\t\t}\n\t}\n\treturn $res;\n}\n\necho json_encode(get_positive(array(-1,\
    \ 2, -4, 5, 6)));\necho '<br>';\necho json_encode(get_positive(array(5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10)));\necho '<br>';\n", "\t$ret = array();\n\tforeach\
    \ ($l as $item) {\n\t\tif ($item > 0) {\n\t\t\t$ret[] = $item;\n\t\t}\n\t}\n\t\
    return $ret;\n}\n", "  return array_filter($l, function($a) {\n    return $a >\
    \ 0;\n  });\n}\nprint_r(get_positive(array(-1, 2, -4, 5, 6)));\nprint_r(get_positive(array(5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)));\n", "\t$a = array();\n\tfor ($i = 0;\
    \ $i < count($l); $i++) {\n\t\tif ($l[$i] > 0) {\n\t\t\tarray_push($a, $l[$i]);\n\
    \t\t}\n\t}\n\treturn $a;\n}\n", "\t$r = array();\n\t$i = 0;\n\twhile ($i < count($l))\
    \ {\n\t\tif ($l[$i] > 0) {\n\t\t\t$r[] = $l[$i];\n\t\t}\n\t\t$i = $i + 1;\n\t\
    }\n\treturn $r;\n}\necho \"<pre>\";\nprint_r(get_positive(array(-1, 2, -4, 5,\
    \ 6)));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(get_positive(array(5, 3, -5,\
    \ 2, -3, 3, 9, 0, 123, 1, -10)));\necho \"</pre>\";", "    $out = array();\n \
    \   foreach ($l as $value) {\n        if ($value > 0) {\n            $out[] =\
    \ $value;\n        }\n    }\n    return $out;\n}\n", "  $ret = array();\n  foreach\
    \ ($l as $v) {\n    if ($v > 0) {\n      $ret[] = $v;\n    }\n  }\n  return $ret;\n\
    }\nprint_r(get_positive(array(-1, 2, -4, 5, 6)));\necho \"\\n\";\nprint_r(get_positive(array(5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10)));\necho \"\\n\";\n", "\t$ret = array();\n\
    \tforeach ($l as $number) {\n\t\tif ($number > 0) {\n\t\t\t$ret[] = $number;\n\
    \t\t}\n\t}\n\treturn $ret;\n}\n", "\treturn array_filter($l, function($n) {\n\t\
    \treturn $n > 0;\n\t});\n}\n", "\t$new_list = array();\n\tforeach ($l as $item)\
    \ {\n\t\tif ($item > 0) {\n\t\t\tarray_push($new_list, $item);\n\t\t}\n\t}\n\t\
    return $new_list;\n}\n", "  $res = array();\n  foreach ($l as $v) {\n    if ($v\
    \ > 0) {\n      $res[] = $v;\n    }\n  }\n  return $res;\n}\n", "\t$out = array();\n\
    \tforeach ($l as $item) {\n\t\tif ($item > 0) {\n\t\t\t$out[] = $item;\n\t\t}\n\
    \t}\n\treturn $out;\n}", "  $result = array();\n  foreach ($l as $i) {\n    if\
    \ ($i > 0) {\n      $result[] = $i;\n    }\n  }\n  return $result;\n}\n", "\t\
    $res = array();\n\tforeach ($l as $v) {\n\t\tif ($v > 0) {\n\t\t\t$res[] = $v;\n\
    \t\t}\n\t}\n\treturn $res;\n}", "\t$result = array();\n\tforeach ($l as $i) {\n\
    \t\tif ($i > 0) {\n\t\t\t$result[] = $i;\n\t\t}\n\t}\n\treturn $result;\n}\n",
  "  $result = array();\n  foreach ($l as $val) {\n    if ($val > 0) {\n      $result[]\
    \ = $val;\n    }\n  }\n  return $result;\n}\n", "\treturn array_filter($l, function($x)\
    \ {\n\t\treturn $x > 0;\n\t});\n}\n", "  return array_filter($l, function($n)\
    \ {\n    return $n > 0;\n  });\n}\n", "\t$a = array();\n\tforeach ($l as $x) {\n\
    \t\tif ($x > 0) {\n\t\t\t$a[] = $x;\n\t\t}\n\t}\n\treturn $a;\n}\n", "\t$result\
    \ = array();\n\tforeach ($l as $v) {\n\t\tif ($v > 0) {\n\t\t\t$result[] = $v;\n\
    \t\t}\n\t}\n\treturn $result;\n}\n", "\t$res = array();\n\tforeach ($l as $val)\
    \ {\n\t\tif ($val > 0) {\n\t\t\t$res[] = $val;\n\t\t}\n\t}\n\treturn $res;\n}\n",
  "  return array_filter($l, function($x) {\n    return $x > 0;\n  });\n}\n", "\t\
    $positive_array = array();\n\tforeach ($l as $value) {\n\t\tif ($value > 0) {\n\
    \t\t\tarray_push($positive_array, $value);\n\t\t}\n\t}\n\treturn $positive_array;\n\
    }\n", "    $result = array();\n    foreach ($l as $value) {\n        if ($value\
    \ > 0) {\n            $result[] = $value;\n        }\n    }\n    return $result;\n\
    }\n", "\t$result = array();\n\tforeach ($l as $value) {\n\t\tif ($value > 0)\n\
    \t\t\t$result[] = $value;\n\t}\n\treturn $result;\n}\n\necho implode(', ', get_positive(array(-1,\
    \ 2, -4, 5, 6)));\necho \"\\n\";\necho implode(', ', get_positive(array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10)));\necho \"\\n\";", "  return array_filter($l,\
    \ function($a) { return $a >= 0; });\n}\n", "    // Your code here.\n    $positive\
    \ = [];\n    foreach ($l as $value) {\n        if ($value > 0) {\n           \
    \ array_push($positive, $value);\n        }\n    }\n    return $positive;\n}\n",
  "  $positive = array();\n  foreach ($l as $x) {\n    if ($x > 0) {\n      $positive[]\
    \ = $x;\n    }\n  }\n  return $positive;\n}\n", "    $result = array();\n    foreach\
    \ ($l as $num) {\n        if ($num > 0) {\n            $result[] = $num;\n   \
    \     }\n    }\n    return $result;\n}\n$l = array(-1, 2, -4, 5, 6);\n$res = get_positive($l);\n\
    var_dump($res);\necho \"<br>\";\n$l = array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1,\
    \ -10);\n$res = get_positive($l);\nvar_dump($res);\necho \"<br>\";\n", "  $result\
    \ = array();\n  foreach ($l as $v) {\n    if ($v > 0) {\n      $result[] = $v;\n\
    \    }\n  }\n  return $result;\n}\n", "\t// Write your code here ...\n}\n", " \
    \   // you code here\n    $result = array();\n    foreach ($l as $item) {\n  \
    \      if ($item > 0) {\n            $result[] = $item;\n        }\n    }\n  \
    \  return $result;\n}\n", "    return array_filter($l, function($v) {\n      \
    \  return $v > 0;\n    });\n}\n", "    $i = 0;\n    $l2 = array();\n    while\
    \ ($i < count($l)) {\n        if ($l[$i] > 0) {\n            $l2[] = $l[$i];\n\
    \        }\n        $i = $i + 1;\n    }\n    return $l2;\n}\n", "\t$result = array();\n\
    \tforeach ($l as $val) {\n\t\tif ($val > 0) {\n\t\t\t$result[] = $val;\n\t\t}\n\
    \t}\n\treturn $result;\n}\n\n$arr = array(-1, 2, -4, 5, 6);\necho implode(', ',\
    \ get_positive($arr)) . '<br>';\n\n$arr = array(5, 3, -5, 2, -3, 3, 9, 0, 123,\
    \ 1, -10);\necho implode(', ', get_positive($arr)) . '<br>';\n", "    $result\
    \ = array();\n    foreach ($l as $element) {\n        if ($element > 0) {\n  \
    \          $result[] = $element;\n        }\n    }\n    return $result;\n}\n",
  "\t$new_l = array();\n\tforeach ($l as $e) {\n\t\tif ($e > 0) {\n\t\t\t$new_l[]\
    \ = $e;\n\t\t}\n\t}\n\treturn $new_l;\n}\n", "  $out = array();\n  foreach ($l\
    \ as $v) {\n    if ($v > 0) {\n      $out[] = $v;\n    }\n  }\n  return $out;\n\
    }\n", "\t$result = array();\n\tforeach ($l as $e) {\n\t\tif ($e > 0) {\n\t\t\t\
    $result[] = $e;\n\t\t}\n\t}\n\treturn $result;\n}\n", "    return array_filter($l,\
    \ function($n) { return $n > 0; });\n}\n", "\t$g = array();\n\tforeach ($l as\
    \ $v) {\n\t\tif ($v >= 0) {\n\t\t\t$g[] = $v;\n\t\t}\n\t}\n\treturn $g;\n}\n",
  "    return array_filter($l, function($x) {\n        return $x > 0;\n    });\n}\n",
  "  $result = array();\n  foreach ($l as $number) {\n    if ($number > 0) {\n   \
    \   $result[] = $number;\n    }\n  }\n  return $result;\n}\n", "  return array_filter($l,\
    \ function($n) {\n    return $n > 0;\n  });\n}\n", "\t$result = array();\n\tforeach\
    \ ($l as $val) {\n\t\tif ($val > 0) {\n\t\t\t$result[] = $val;\n\t\t}\n\t}\n\t\
    return $result;\n}\n", "  return array_filter($l, function($n) {\n    return $n\
    \ > 0;\n  });\n}\n", "\treturn array_filter($l, function($x) {\n\t\treturn $x\
    \ > 0;\n\t});\n}\n", "  return array_filter($l, function($n) {\n    return $n\
    \ > 0;\n  });\n}\n", "\t$a = array();\n\tforeach ($l as $e) {\n\t\tif ($e > 0)\
    \ {\n\t\t\t$a[] = $e;\n\t\t}\n\t}\n\treturn $a;\n}\n", "    // Fill me in!\n \
    \   return $l;\n}\n", "\t$arr = array();\n\tforeach ($l as $num) {\n\t\tif ($num\
    \ > 0) {\n\t\t\tarray_push($arr, $num);\n\t\t}\n\t}\n\treturn $arr;\n}\n", " \
    \ $list = [];\n  foreach ($l as $el) {\n    if ($el > 0) {\n      $list[] = $el;\n\
    \    }\n  }\n  return $list;\n}\n", "    return array_filter($l, function($value)\
    \ {\n        return $value > 0;\n    });\n}\n", "    $positiveNums = array();\n\
    \    $index = 0;\n    foreach ($l as $num) {\n        if ($num > 0) {\n      \
    \      $positiveNums[$index] = $num;\n            $index++;\n        }\n    }\n\
    \    return $positiveNums;\n}\n$l = array(-1, 2, -4, 5, 6);\n$l2 = array(5, 3,\
    \ -5, 2, -3, 3, 9, 0, 123, 1, -10);\nprint_r(get_positive($l));\nprint_r(get_positive($l2));\n",
  "    $positive = array();\n    foreach ($l as $value) {\n        if ($value > 0)\
    \ {\n            array_push($positive, $value);\n        }\n    }\n    return\
    \ $positive;\n}", "    return array_filter($l, function($x) {\n        return\
    \ $x > 0;\n    });\n}", "\treturn array_filter($l, function($v) {\n\t\treturn\
    \ $v > 0;\n\t});\n}\n", "  // TODO\n}\n", "  $l = array_filter($l, function($x)\
    \ { return $x > 0; });\n  return $l;\n}\n\n$l = array(-1, 2, -4, 5, 6);\nprint_r(get_positive($l));\n\
    echo \"\\n\";\n\n$l = array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\nprint_r(get_positive($l));\n\
    echo \"\\n\";\n", "    return array_filter($l, function($v) { return $v > 0; });\n\
    }\n", "\t$result = array();\n\tforeach ($l as $num) {\n\t\tif ($num > 0) {\n\t\
    \t\tarray_push($result, $num);\n\t\t}\n\t}\n\treturn $result;\n}\n", "    return\
    \ array_filter($l, function($x) {\n        return $x > 0;\n    });\n}\n", "\t\
    $p = array();\n\tforeach ($l as $v) {\n\t\tif ($v > 0)\n\t\t\t$p[] = $v;\n\t}\n\
    \treturn $p;\n}\n\n$a = array(-1, 2, -4, 5, 6);\nprint_r(get_positive($a));\n\n\
    $b = array(5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\nprint_r(get_positive($b));",
  "\t$l = array_map(function($n) {\n\t\treturn $n > 0 ? $n : null;\n\t}, $l);\n\t\
    return array_filter($l);\n}\n", "  $l = array_filter($l, function($v) {\n    return\
    \ $v > 0;\n  });\n  return $l;\n}\n$numbers = array(-1, 2, -4, 5, 6);\n$p_numbers\
    \ = get_positive($numbers);", "    $ret = array();\n    foreach ($l as $val) {\n\
    \        if ($val > 0) {\n            $ret[] = $val;\n        }\n    }\n    return\
    \ $ret;\n}\n", '}', "  return array_filter($l, function($n) {\n    return $n >\
    \ 0;\n  });\n}\n", "    $result = array();\n    foreach ($l as $n) {\n       \
    \ if ($n > 0) {\n            $result[] = $n;\n        }\n    }\n    return $result;\n\
    }", "\t$r = array();\n\tforeach ($l as $n) {\n\t\tif ($n > 0)\n\t\t\t$r[] = $n;\n\
    \t}\n\treturn $r;\n}\n", "\t// Your code here...\n}\n", "    $res = array();\n\
    \    foreach ($l as $item) {\n        if ($item > 0) {\n            $res[] = $item;\n\
    \        }\n    }\n    return $res;\n}\n", "\t$n_list = array();\n\tforeach ($l\
    \ as $num) {\n\t\tif ($num > 0) {\n\t\t\tarray_push($n_list, $num);\n\t\t}\n\t\
    }\n\treturn $n_list;\n}\n", "    $r = array();\n    foreach ($l as $v) {\n   \
    \     if ($v > 0) {\n            $r[] = $v;\n        }\n    }\n    return $r;\n\
    }\n", "    $new = array();\n    foreach ($l as $i) {\n        if ($i > 0)\n  \
    \          $new[] = $i;\n    }\n    return $new;\n}\n", "\t$retval = array();\n\
    \tforeach ($l as $value) {\n\t\tif ($value > 0) {\n\t\t\t$retval[] = $value;\n\
    \t\t}\n\t}\n\treturn $retval;\n}\n\n$a = array(-1, 2, -4, 5, 6);\n$b = array(5,\
    \ 3, -5, 2, -3, 3, 9, 0, 123, 1, -10);\nprint_r(get_positive($a));\nprint_r(get_positive($b));",
  "  $list = array();\n  foreach ($l as $item) {\n    if ($item > 0) {\n      array_push($list,\
    \ $item);\n    }\n  }\n  return $list;\n}", '}', "    $numbers = array();\n  \
    \  foreach ($l as $n) {\n        if ($n > 0) {\n            $numbers[] = $n;\n\
    \        }\n    }\n    return $numbers;\n}", "\t$new_array = array();\n\tfor ($i\
    \ = 0; $i < count($l); $i++) {\n\t\tif ($l[$i] > 0) {\n\t\t\tarray_push($new_array,\
    \ $l[$i]);\n\t\t}\n\t}\n\treturn $new_array;\n}\n\n$l = array(-1, 2, -4, 5, 6);\n\
    print_r(get_positive($l));\n\necho \"<br><br>\";\n\n$l = array(5, 3, -5, 2, -3,\
    \ 3, 9, 0, 123, 1, -10);\nprint_r(get_positive($l));", "  $n = array();\n  foreach\
    \ ($l as $v) {\n    if ($v > 0) {\n      $n[] = $v;\n    }\n  }\n  return $n;\n\
    }\n", "    $result = array();\n    foreach ($l as $i) {\n        if ($i > 0) {\n\
    \            $result[] = $i;\n        }\n    }\n    return $result;\n}\n", " \
    \   return array_filter($l, function($item) {\n        return $item > 0;\n   \
    \ });\n}", "    return array_filter($l, function($a) {\n        return $a > 0;\n\
    \    });\n}\n", "\t$res = array();\n\tforeach ($l as $i) {\n\t\tif ($i > 0) $res[]\
    \ = $i;\n\t}\n\treturn $res;\n}\n", "\t$out = array();\n\tforeach ($l as $x) {\n\
    \t\tif ($x > 0) {\n\t\t\t$out[] = $x;\n\t\t}\n\t}\n\treturn $out;\n}\n", "  return\
    \ array_filter($l,function($n){return $n>0;});\n}\n", "\t$ret = array();\n\tfor\
    \ ($i = 0; $i < count($l); $i += 1) {\n\t\tif ($l[$i] > 0) {\n\t\t\t$ret[] = $l[$i];\n\
    \t\t}\n\t}\n\treturn $ret;\n}\n", "\t$s = [];\n\tforeach ($l as $i) {\n\t\tif\
    \ ($i > 0) $s[] = $i;\n\t}\n\treturn $s;\n}\n", "  $d = array();\n  foreach ($l\
    \ as $k => $v) {\n    if ($v > 0) {\n      $d[] = $v;\n    }\n  }\n  return $d;\n\
    }\n", "\t$res = array();\n\tforeach ($l as $i) {\n\t\tif ($i > 0)\n\t\t\t$res[]\
    \ = $i;\n\t}\n\treturn $res;\n}\n", "\t$new_list = array();\n\tfor ($i = 0; $i\
    \ < count($l); $i++) {\n\t\tif ($l[$i] > 0) {\n\t\t\tarray_push($new_list, $l[$i]);\n\
    \t\t}\n\t}\n\treturn $new_list;\n}\n", "    $new_l = array();\n    foreach ($l\
    \ as $value) {\n        if ($value > 0) {\n            array_push($new_l, $value);\n\
    \        }\n    }\n    return $new_l;\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
