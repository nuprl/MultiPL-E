name: HumanEval_30_get_positive
language: php
prompt: "<?php\n// Return only positive numbers in the array.\n// >>> get_positive(array(-1,\
  \ 2, -4, 5, 6))\n// array(2, 5, 6)\n// >>> get_positive(array(5, 3, -5, 2, -3, 3,\
  \ 9, 0, 123, 1, -10))\n// array(5, 3, 2, 3, 9, 123, 1)\nfunction get_positive($l)\
  \ {\n"
tests: "function candidate(...$args) {\n    return get_positive(...$args);\n}\n\n\
  function test(): void {\n    if (candidate(array(-1, -2, 4, 5, 6)) !== array(4,\
  \ 5, 6)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(5,\
  \ 3, -5, 2, 3, 3, 9, 0, 123, 1, -10)) !== array(5, 3, 2, 3, 3, 9, 123, 1)) { throw\
  \ new Exception(\"Test failed!\"); }\n    if (candidate(array(-1, -2)) !== array())\
  \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(array()) !== array())\
  \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $new_l = array();\n    foreach ($l as $v) {\n        if ($v > 0)\
    \ {\n            $new_l[] = $v;\n        }\n    }\n    return $new_l;\n}\n", " \
    \   $positives = array();\n    foreach ($l as $item) {\n        if ($item > 0)\
    \ {\n            $positives[] = $item;\n        }\n    }\n    return $positives;\n\
    }\n\n$arr = array(-1, 2, -4, 5, 6);\nvar_dump(get_positive($arr));", "    return\
    \ array_filter($l, function($x) {\n        return $x > 0;\n    });\n}\n", "\t\
    $o = array();\n\tforeach ($l as $e) {\n\t\tif ($e > 0) {\n\t\t\t$o[] = $e;\n\t\
    \t}\n\t}\n\treturn $o;\n}\n", "\t$p_list = array();\n\tforeach ($l as $i) {\n\t\
    \tif ($i > 0) {\n\t\t\tarray_push($p_list, $i);\n\t\t}\n\t}\n\treturn $p_list;\n\
    }", "\t$r = array();\n\tforeach ($l as $i) {\n\t\tif ($i > 0) {\n\t\t\t$r[] =\
    \ $i;\n\t\t}\n\t}\n\treturn $r;\n}\n", "    $res = array();\n    foreach ($l as\
    \ $e) {\n        if ($e > 0) {\n            $res[] = $e;\n        }\n    }\n \
    \   return $res;\n}", "\t$ret = array();\n\tforeach ($l as $v) {\n\t\tif ($v >\
    \ 0) {\n\t\t\t$ret[] = $v;\n\t\t}\n\t}\n\treturn $ret;\n}\n", "\t$ret = array();\n\
    \t$i = 0;\n\tforeach ($l as $item) {\n\t\tif ($item > 0) {\n\t\t\t$ret[$i] = $item;\n\
    \t\t\t$i++;\n\t\t}\n\t}\n\treturn $ret;\n}\n", "\t$p = array();\n\tforeach ($l\
    \ as $x) {\n\t\tif ($x > 0) {\n\t\t\t$p[] = $x;\n\t\t}\n\t}\n\treturn $p;\n}",
  "    $k = array();\n    foreach ($l as $v) {\n        if ($v > 0) {\n          \
    \  $k[] = $v;\n        }\n    }\n    return $k;\n}", "    $l = array_filter($l,\
    \ function($a) {\n        return $a > 0;\n    });\n    return $l;\n}\n", "\t$new_array\
    \ = array();\n\tforeach ($l as $key => $value) {\n\t\tif ($value > 0) {\n\t\t\t\
    $new_array[] = $value;\n\t\t}\n\t}\n\tprint_r($new_array);\n}\nget_positive(array(-1,\
    \ 2, -4, 5, 6));\necho \"<br>\";\nget_positive(array(5, 3, -5, 2, -3, 3, 9, 0,\
    \ 123, 1, -10));\n\necho \"<br>\";\necho \"<br>\";\n", "\t$arr = array();\n\t\
    foreach ($l as $k => $v) {\n\t\tif ($v > 0) {\n\t\t\t$arr[] = $v;\n\t\t}\n\t}\n\
    \treturn $arr;\n}\n", "    $result = array();\n    foreach ($l as $i) {\n    \
    \    if ($i > 0) {\n            $result[] = $i;\n        }\n    }\n    return\
    \ $result;\n}\n", "\t\n}\n", "  $res = array();\n  foreach ($l as $v) {\n    if\
    \ ($v > 0) {\n      $res[] = $v;\n    }\n  }\n  return $res;\n}\n", "\treturn\
    \ array_filter($l, function($n) { return $n > 0; });\n}\n", "    $result = array();\n\
    \    foreach ($l as $number) {\n        if ($number > 0) {\n            $result[]\
    \ = $number;\n        }\n    }\n    return $result;\n}", "    $pos = [];\n   \
    \ foreach ($l as $v) {\n        if ($v > 0) {\n            $pos[] = $v;\n    \
    \    }\n    }\n    return $pos;\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
