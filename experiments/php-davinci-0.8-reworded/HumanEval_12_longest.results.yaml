language: php
name: HumanEval_12_longest
results:
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    // Your code here\n    $longestStr\
    \ = null;\n    $maxlen = 0;\n    foreach ($strings as $str) {\n      if (strlen($str)\
    \ > $maxlen) {\n        $maxlen = strlen($str);\n        $longestStr = $str;\n\
    \      }\n    }\n    return $longestStr;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824386
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    // YOUR CODE HERE\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6w7x7sg1.php:20\n\
    Stack trace:\n#0 /tmp/tmp6w7x7sg1.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp6w7x7sg1.php\
    \ on line 20\n"
  timestamp: 1659824386
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n\t// write your code here\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpca9egajw.php:20\n\
    Stack trace:\n#0 /tmp/tmpca9egajw.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpca9egajw.php\
    \ on line 20\n"
  timestamp: 1659824386
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  $longest = null;\n  foreach ($strings\
    \ as $string) {\n    if (strlen($string) > strlen($longest)) {\n      $longest\
    \ = $string;\n    }\n  }\n  return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Deprecated: strlen(): Passing null to parameter #1 ($string) of type string is
    deprecated in /tmp/tmp8j7f2quw.php on line 13


    Deprecated: strlen(): Passing null to parameter #1 ($string) of type string is
    deprecated in /tmp/tmp8j7f2quw.php on line 13

    '
  timestamp: 1659824386
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) > 0) {\n   \
    \     $max_length = 0;\n        $longest_string = \"\";\n        foreach ($strings\
    \ as $string) {\n            if (strlen($string) > $max_length) {\n          \
    \      $max_length = strlen($string);\n                $longest_string = $string;\n\
    \            }\n        }\n        return $longest_string;\n    } else {\n   \
    \     return null;\n    }\n}\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824386
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n\t$lengths = array_map('strlen', $strings);\n\
    \tarray_multisort($lengths, SORT_DESC, $strings);\n\treturn empty($strings) ?\
    \ null : $strings[0];\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4e7jzlyk.php:23\n\
    Stack trace:\n#0 /tmp/tmp4e7jzlyk.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp4e7jzlyk.php\
    \ on line 23\n"
  timestamp: 1659824386
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  $longest = NULL;\n  foreach ($strings\
    \ as $string) {\n    if (is_null($longest) || strlen($string) > strlen($longest))\
    \ {\n      $longest = $string;\n    }\n  }\n  return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824386
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = NULL;\n    $longestLength\
    \ = 0;\n    foreach ($strings as $string) {\n        if (strlen($string) > $longestLength)\
    \ {\n            $longest = $string;\n            $longestLength = strlen($string);\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824386
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  if (count($strings) === 0) {\n   \
    \ return null;\n  }\n  $longest = $strings[0];\n  foreach ($strings as $string)\
    \ {\n    if (strlen($string) > strlen($longest)) {\n      $longest = $string;\n\
    \    }\n  }\n  return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824386
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $str) {\n        if ($longest === null || strlen($str) > strlen($longest))\
    \ {\n            $longest = $str;\n        }\n    }\n    return $longest;\n}\n\
    \nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824386
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n\tif (empty($strings)) {\n\t\treturn\
    \ null;\n\t}\n\t$maxString = $strings[0];\n\t$maxLength = strlen($maxString);\n\
    \tforeach ($strings as $s) {\n\t\tif (strlen($s) > $maxLength) {\n\t\t\t$maxString\
    \ = $s;\n\t\t\t$maxLength = strlen($s);\n\t\t}\n\t}\n\treturn $maxString;\n}\n\
    \nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824386
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    // YOUR CODE HERE\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6w7x7sg1.php:20\n\
    Stack trace:\n#0 /tmp/tmp6w7x7sg1.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp6w7x7sg1.php\
    \ on line 20\n"
  timestamp: 1659824386
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n\tif(count($strings) == 0) {\n\t\treturn\
    \ null;\n\t}\n\telse {\n\t\t$i = 0;\n\t\t$longest = null;\n\t\twhile($i < count($strings))\
    \ {\n\t\t\tif(strlen($strings[$i]) > strlen($longest)) {\n\t\t\t\t$longest = $strings[$i];\n\
    \t\t\t}\n\t\t\t$i++;\n\t\t}\n\t\treturn $longest;\n\t}\n}\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Deprecated: strlen(): Passing null to parameter #1 ($string) of type string is
    deprecated in /tmp/tmplvp6pfs4.php on line 18


    Deprecated: strlen(): Passing null to parameter #1 ($string) of type string is
    deprecated in /tmp/tmplvp6pfs4.php on line 18

    '
  timestamp: 1659824386
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n    $longest_string = $strings[0];\n    $longest_string_length\
    \ = strlen($longest_string);\n    for ($i = 1; $i < count($strings); $i++) {\n\
    \        $curr_string = $strings[$i];\n        $curr_string_length = strlen($curr_string);\n\
    \        if ($curr_string_length > $longest_string_length) {\n            $longest_string\
    \ = $curr_string;\n            $longest_string_length = $curr_string_length;\n\
    \        }\n    }\n    return $longest_string;\n}\n\n$strings = array(\n    \"\
    a\",\n    \"bb\",\n    \"ccc\"\n);\nassert(longest($strings) == \"ccc\");\n\n\
    $strings = array(\n    \"a\",\n    \"bb\",\n    \"ccc\",\n    \"dddd\",\n    \"\
    eeeee\"\n);\nassert(longest($strings) == \"eeeee\");\n\n$strings = array(\n  \
    \  \"a\",\n    \"b\",\n    \"c\"\n);\nassert(longest($strings) == \"a\");\n\n\
    $strings = array();\nassert(longest($strings) == null);\n\necho \"Finished!\"\
    ;\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Finished!
  timestamp: 1659824386
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    // YOUR CODE HERE\n    $length =\
    \ count($strings);\n    $index = 0;\n    $longest = $strings[0];\n    if ($length\
    \ == 0) {\n        return null;\n    }\n    else {\n        while ($index < $length)\
    \ {\n            if (strlen($longest) < strlen($strings[$index])) {\n        \
    \        $longest = $strings[$index];\n            }\n            $index++;\n\
    \        }\n        return $longest;\n    }\n}\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 0 in /tmp/tmpw77xow1r.php on line 14

    '
  timestamp: 1659824386
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824386
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $result = $strings[0];\n    $result_length = strlen($result);\n\
    \    foreach ($strings as $s) {\n        $s_length = strlen($s);\n        if ($s_length\
    \ > $result_length) {\n            $result = $s;\n            $result_length =\
    \ $s_length;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824386
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpol94ld7h.php:19\n\
    Stack trace:\n#0 /tmp/tmpol94ld7h.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpol94ld7h.php\
    \ on line 19\n"
  timestamp: 1659824386
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    // your code goes here\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp63ejog9p.php:20\n\
    Stack trace:\n#0 /tmp/tmp63ejog9p.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp63ejog9p.php\
    \ on line 20\n"
  timestamp: 1659824386
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  if (count($strings) == 0) {\n    return\
    \ null;\n  }\n  $result = $strings[0];\n  foreach ($strings as $s) {\n    if (strlen($s)\
    \ > strlen($result)) {\n      $result = $s;\n    }\n  }\n  return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824386
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) === 0) {\n \
    \       return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $str) {\n        if (strlen($str) > strlen($longest)) {\n            $longest\
    \ = $str;\n        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009100
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n\tif (empty($strings)) {\n\t\treturn\
    \ null;\n\t}\n\n\t// Find the longest string.\n\t$result = $strings[0];\n\tforeach\
    \ ($strings as $string) {\n\t\tif (strlen($string) > strlen($result)) {\n\t\t\t\
    $result = $string;\n\t\t}\n\t}\n\n\treturn $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009100
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  if (count($strings) == 0) {\n    return\
    \ null;\n  }\n  $maxlen = 0;\n  $maxstr = null;\n  foreach ($strings as $s) {\n\
    \    if (strlen($s) > $maxlen) {\n      $maxlen = strlen($s);\n      $maxstr =\
    \ $s;\n    }\n  }\n  return $maxstr;\n}\n\nfunction candidate(...$args) {\n  \
    \  return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660009100
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    if(!empty($strings)){\n\
    \        foreach($strings as $string){\n            if(strlen($string) > strlen($longest)){\n\
    \                $longest = $string;\n            }\n        }\n    }\n    return\
    \ $longest;\n}\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Deprecated: strlen(): Passing null to parameter #1 ($string) of type string is
    deprecated in /tmp/tmpwjkvvhs4.php on line 14


    Deprecated: strlen(): Passing null to parameter #1 ($string) of type string is
    deprecated in /tmp/tmpwjkvvhs4.php on line 14

    '
  timestamp: 1660009100
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    // Write code here\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdvdacz0v.php:20\n\
    Stack trace:\n#0 /tmp/tmpdvdacz0v.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpdvdacz0v.php\
    \ on line 20\n"
  timestamp: 1660028883
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n\tif (sizeof($strings) == 0) {\n\t\t\
    return null;\n\t}\n\n\t$longest = $strings[0];\n\tfor ($i = 1; $i < sizeof($strings);\
    \ $i++) {\n\t\tif (strlen($strings[$i]) > strlen($longest)) {\n\t\t\t$longest\
    \ = $strings[$i];\n\t\t}\n\t}\n\n\treturn $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028883
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    // Put your code here\n    return\
    \ null;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgtg2yx6l.php:21\n\
    Stack trace:\n#0 /tmp/tmpgtg2yx6l.php(25): test()\n#1 {main}\n  thrown in /tmp/tmpgtg2yx6l.php\
    \ on line 21\n"
  timestamp: 1660028883
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $str) {\n        if ($longest === null || strlen($str) > strlen($longest))\
    \ {\n            $longest = $str;\n        }\n    }\n    return $longest;\n}\n\
    function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028883
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  //+++BEGIN_SOLUTION+++\n  if (count($strings)\
    \ === 0) {\n    return null;\n  }\n  $longestString = $strings[0];\n  foreach\
    \ ($strings as $currentString) {\n    if (strlen($currentString) > strlen($longestString))\
    \ {\n      $longestString = $currentString;\n    }\n  }\n  return $longestString;\n\
    \  //---END_SOLUTION---\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028883
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  $longest = null;\n  foreach ($strings\
    \ as $string) {\n    if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n      $longest = $string;\n    }\n  }\n  return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028883
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if(count($strings) == 0) {\n   \
    \     return null;\n    }\n    $longest = $strings[0];\n    foreach($strings as\
    \ $string) {\n        if(strlen($string) > strlen($longest)) {\n            $longest\
    \ = $string;\n        }\n    }\n    return $longest;\n}\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028883
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n    $result = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($result)) {\n          \
    \  $result = $string;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028883
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  $longest = null;\n  foreach ($strings\
    \ as $s) {\n    if ($longest === null || strlen($s) > strlen($longest)) {\n  \
    \    $longest = $s;\n    }\n  }\n  return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028883
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    // BEGIN\n    if (empty($strings))\
    \ {\n        return null;\n    }\n    $result = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($result)) {\n          \
    \  $result = $string;\n        }\n    }\n    return $result;\n    // END\n}\n\n\
    function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028883
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n\tif (count($strings) == 0) {\n\t\t\
    return null;\n\t}\n\t$longest = $strings[0];\n\tfor ($i = 1; $i < count($strings);\
    \ $i++) {\n\t\tif (strlen($strings[$i]) > strlen($longest)) {\n\t\t\t$longest\
    \ = $strings[$i];\n\t\t}\n\t}\n\treturn $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028883
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    // YOUR CODE HERE\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6w7x7sg1.php:20\n\
    Stack trace:\n#0 /tmp/tmp6w7x7sg1.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp6w7x7sg1.php\
    \ on line 20\n"
  timestamp: 1659824386
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $l = null;\n    foreach ($strings\
    \ as $str) {\n        if ($l === null || strlen($str) > strlen($l)) {\n      \
    \      $l = $str;\n        }\n    }\n    return $l;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028883
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  if (!sizeof($strings)) return null;\n\
    \  $longest = $strings[0];\n  foreach ($strings as $string) {\n    if (strlen($string)\
    \ > strlen($longest)) $longest = $string;\n  }\n  return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028883
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  if (empty($strings)) {\n    return\
    \ null;\n  }\n  $max_length = 0;\n  $max_string = null;\n  foreach ($strings as\
    \ $string) {\n    if (strlen($string) > $max_length) {\n      $max_length = strlen($string);\n\
    \      $max_string = $string;\n    }\n  }\n  return $max_string;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028883
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n}\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2lbncid5.php:18\n\
    Stack trace:\n#0 /tmp/tmp2lbncid5.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp2lbncid5.php\
    \ on line 18\n"
  timestamp: 1660028883
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n\tif(!is_array($strings)){\n\t\treturn\
    \ null;\n\t}\n\t$longest = array_shift($strings);\n\tforeach($strings as $str){\n\
    \t\tif(strlen($str) > strlen($longest)){\n\t\t\t$longest = $str;\n\t\t}\n\t}\n\
    \treturn $longest;\n}\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028883
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n\tif(sizeof($strings) == 0) {\n\t\t\
    return null;\n\t}\n\n\tif(sizeof($strings) == 1) {\n\t\treturn $strings[0];\n\t\
    }\n\n\t$longest = $strings[0];\n\t$length = strlen($longest);\n\n\tfor($i = 1;\
    \ $i < sizeof($strings); $i++) {\n\t\t$current = $strings[$i];\n\t\t$currentLength\
    \ = strlen($current);\n\n\t\tif($currentLength > $length) {\n\t\t\t$longest =\
    \ $current;\n\t\t\t$length = $currentLength;\n\t\t}\n\t}\n\n\treturn $longest;\n\
    }\n\n$res = longest(array());\necho $res;\necho \"\\n\";\n\n$res = longest(array(\"\
    a\", \"b\", \"c\"));\necho $res;\necho \"\\n\";\n\n$res = longest(array(\"a\"\
    , \"bb\", \"ccc\"));\necho $res;\necho \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    a

    ccc

    '
  timestamp: 1660028883
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    // TODO\n}\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk8z4fxzj.php:19\n\
    Stack trace:\n#0 /tmp/tmpk8z4fxzj.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpk8z4fxzj.php\
    \ on line 19\n"
  timestamp: 1660028883
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  if (count($strings) === 0) {\n   \
    \ return null;\n  }\n  $longest = $strings[0];\n  for ($i = 1; $i < count($strings);\
    \ $i++) {\n    if (strlen($strings[$i]) > strlen($longest)) {\n      $longest\
    \ = $strings[$i];\n    }\n  }\n  return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028883
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpol94ld7h.php:19\n\
    Stack trace:\n#0 /tmp/tmpol94ld7h.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpol94ld7h.php\
    \ on line 19\n"
  timestamp: 1659824386
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n    $longest = $strings[0];\n    for ($i = 1; $i <\
    \ count($strings); $i++) {\n        if (strlen($strings[$i]) > strlen($longest))\
    \ {\n            $longest = $strings[$i];\n        }\n    }\n    return $longest;\n\
    }\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028883
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    // your code here\n    if (count($strings)\
    \ == 0) {\n        return null;\n    }\n    $longest = $strings[0];\n    foreach\
    \ ($strings as $s) {\n        if (strlen($s) > strlen($longest)) {\n         \
    \   $longest = $s;\n        }\n    }\n    return $longest;\n}\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028883
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n\t$longest = NULL;\n\tforeach ($strings\
    \ as $string) {\n\t\tif ($longest == NULL) {\n\t\t\t$longest = $string;\n\t\t\
    } else if (strlen($string) > strlen($longest)) {\n\t\t\t$longest = $string;\n\t\
    \t}\n\t}\n\treturn $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028883
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  $longest = null;\n  foreach ($strings\
    \ as $string) {\n    if (strlen($string) > strlen($longest)) {\n      $longest\
    \ = $string;\n    }\n  }\n  return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Deprecated: strlen(): Passing null to parameter #1 ($string) of type string is
    deprecated in /tmp/tmp8j7f2quw.php on line 13


    Deprecated: strlen(): Passing null to parameter #1 ($string) of type string is
    deprecated in /tmp/tmp8j7f2quw.php on line 13

    '
  timestamp: 1659824386
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n\tif (empty($strings)) {\n\t\treturn\
    \ null;\n\t}\n\t$result = null;\n\t$longest = 0;\n\tforeach ($strings as $string)\
    \ {\n\t\t$str_len = strlen($string);\n\t\tif ($str_len > $longest) {\n\t\t\t$longest\
    \ = $str_len;\n\t\t\t$result = $string;\n\t\t}\n\t}\n\treturn $result;\n}\n\n\
    $result = longest(array(\"a\", \"bb\", \"ccc\"));\necho \"Longest word: {$result}\\\
    n\";\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Longest word: ccc

    '
  timestamp: 1660028883
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n\n    $longest = null;\n    foreach ($strings as $string)\
    \ {\n        if (is_null($longest) || strlen($string) > strlen($longest)) {\n\
    \            $longest = $string;\n        }\n    }\n\n    return $longest;\n}\n\
    \nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028883
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    // Write your code here\n}\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprgkikd6j.php:19\n\
    Stack trace:\n#0 /tmp/tmprgkikd6j.php(23): test()\n#1 {main}\n  thrown in /tmp/tmprgkikd6j.php\
    \ on line 19\n"
  timestamp: 1660028883
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n    // TODO\n}\nfunction candidate(...$args) {\n \
    \   return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph3ecx4a7.php:22\n\
    Stack trace:\n#0 /tmp/tmph3ecx4a7.php(26): test()\n#1 {main}\n  thrown in /tmp/tmph3ecx4a7.php\
    \ on line 22\n"
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  if (count($strings) == 0) {\n    return\
    \ null;\n  }\n  $longest = $strings[0];\n  foreach ($strings as $string) {\n \
    \   if (strlen($string) > strlen($longest)) {\n      $longest = $string;\n   \
    \ }\n  }\n  return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028883
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  $max_string = null;\n  $max_length\
    \ = -1;\n  foreach ($strings as $string) {\n    $length = strlen($string);\n \
    \   if ($length > $max_length) {\n      $max_length = $length;\n      $max_string\
    \ = $string;\n    }\n  }\n  return $max_string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $length = sizeof($strings);\n  \
    \  if ($length == 0) return null;\n    $longest = $strings[0];\n    for ($i =\
    \ 1; $i < $length; $i++) {\n        if (strlen($strings[$i]) > strlen($longest))\
    \ {\n            $longest = $strings[$i];\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    // Your code here.\n}\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe11dgiua.php:19\n\
    Stack trace:\n#0 /tmp/tmpe11dgiua.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpe11dgiua.php\
    \ on line 19\n"
  timestamp: 1660028883
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpol94ld7h.php:19\n\
    Stack trace:\n#0 /tmp/tmpol94ld7h.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpol94ld7h.php\
    \ on line 19\n"
  timestamp: 1659824386
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  $longest_string = null;\n  $longest_length\
    \ = 0;\n  foreach ($strings as $string) {\n    if (strlen($string) > $longest_length)\
    \ {\n      $longest_string = $string;\n      $longest_length = strlen($string);\n\
    \    }\n  }\n  return $longest_string;\n}\nfunction candidate(...$args) {\n  \
    \  return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028883
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n\tif (sizeof($strings)==0) {\n\t\treturn\
    \ null;\n\t} else {\n\t\t$result = $strings[0];\n\t\tforeach ($strings as $value)\
    \ {\n\t\t\tif (strlen($value) > strlen($result)) {\n\t\t\t\t$result = $value;\n\
    \t\t\t}\n\t\t}\n\t\treturn $result;\n\t}\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028883
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $result = null;\n    foreach ($strings\
    \ as $string) {\n        if ($result === null || strlen($string) > strlen($result))\
    \ {\n            $result = $string;\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  $max_str = '';\n  $max_str_length\
    \ = 0;\n  foreach ($strings as $string) {\n    if (strlen($string) > $max_str_length)\
    \ {\n      $max_str = $string;\n      $max_str_length = strlen($string);\n   \
    \ }\n  }\n  return $max_str;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqowaf_4s.php:27\n\
    Stack trace:\n#0 /tmp/tmpqowaf_4s.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpqowaf_4s.php\
    \ on line 27\n"
  timestamp: 1660028883
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  if (empty($strings)) {\n    return\
    \ null;\n  }\n\n  $longest = \"\";\n  foreach ($strings as $string) {\n    if\
    \ (strlen($string) > strlen($longest)) {\n      $longest = $string;\n    }\n \
    \ }\n\n  return $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028883
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  //$num = sizeof($strings);\n  $max\
    \ = 0;\n  $longest_word = \"\";\n  for ($i = 0; $i < sizeof($strings); $i++) {\n\
    \    $s = $strings[$i];\n    if (strlen($s) > $max) {\n      $max = strlen($s);\n\
    \      $longest_word = $s;\n    }\n  }\n  return $longest_word;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdlv1t8_q.php:29\n\
    Stack trace:\n#0 /tmp/tmpdlv1t8_q.php(34): test()\n#1 {main}\n  thrown in /tmp/tmpdlv1t8_q.php\
    \ on line 29\n"
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  $n = count($strings);\n  if ($n ==\
    \ 0) {\n    return null;\n  }\n  $longest = $strings[0];\n  for ($i = 1; $i <\
    \ $n; $i++) {\n    if (strlen($strings[$i]) > strlen($longest)) {\n      $longest\
    \ = $strings[$i];\n    }\n  }\n  return $longest;\n}\n\necho longest(array());\n\
    echo longest(array(\"a\", \"b\", \"c\"));\necho longest(array(\"a\", \"bb\", \"\
    ccc\"));\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: accc
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  $longest = null;\n  $longest_length\
    \ = 0;\n  foreach ($strings as $string) {\n    if (strlen($string) > $longest_length)\
    \ {\n      $longest = $string;\n      $longest_length = strlen($string);\n   \
    \ }\n  }\n  return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028883
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if (is_null($longest) || (strlen($string) > strlen($longest)))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  if (count($strings) == 0) return null;\n\
    \  $max = $strings[0];\n  for ($i = 1; $i < count($strings); $i++) {\n    if (strlen($strings[$i])\
    \ > strlen($max)) {\n      $max = $strings[$i];\n    }\n  }\n  return $max;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $r = null;\n    foreach ($strings\
    \ as $s) {\n        if ($r === null || strlen($s) > strlen($r)) {\n          \
    \  $r = $s;\n        }\n    }\n    return $r;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n\t\n\t// test if string array is empty\n\
    \tif (count($strings) < 1) {\n\t\treturn null;\n\t}\n\t\n\t// test if the array\
    \ is full of blank strings\n\tif (count(array_filter($strings)) === 0) {\n\t\t\
    return \"\";\n\t}\n\t\n\t// sort strings by length, return the longest\n\tusort($strings,\
    \ function($a, $b) {\n\t\treturn strlen($b) - strlen($a);\n\t});\n\t\n\treturn\
    \ $strings[0];\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    // This is your job. :)\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp86ssk91f.php:20\n\
    Stack trace:\n#0 /tmp/tmp86ssk91f.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp86ssk91f.php\
    \ on line 20\n"
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  $longest = null;\n  foreach ($strings\
    \ as $string) {\n    if (!isset($longest) || strlen($string) > strlen($longest))\
    \ {\n      $longest = $string;\n    }\n  }\n  return $longest;\n}\n\n$tests =\
    \ [\n  [array(), null],\n  [array(\"a\", \"b\", \"c\"), \"a\"],\n  [array(\"a\"\
    , \"bb\", \"ccc\"), \"ccc\"],\n];\nforeach ($tests as $test) {\n  $input = json_encode($test[0]);\n\
    \  $expected = json_encode($test[1]);\n  $actual = json_encode(longest($test[0]));\n\
    \  echo \"Test: longest($input), Expect: $expected, Actual: $actual\";\n  if ($expected\
    \ != $actual) {\n    echo \" FAIL\";\n  }\n  echo \"\\n\";\n}\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'Test: longest([]), Expect: null, Actual: null

    Test: longest(["a","b","c"]), Expect: "a", Actual: "a"

    Test: longest(["a","bb","ccc"]), Expect: "ccc", Actual: "ccc"

    '
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n\tif(empty($strings)) {\n\t\treturn\
    \ null;\n\t}\n\t$maxLength = 0;\n\t$longest = null;\n\tforeach($strings as $string)\
    \ {\n\t\tif(strlen($string) > $maxLength) {\n\t\t\t$maxLength = strlen($string);\n\
    \t\t\t$longest = $string;\n\t\t}\n\t}\n\treturn $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028883
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n\t// TODO\n}\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwu3w3z7t.php:19\n\
    Stack trace:\n#0 /tmp/tmpwu3w3z7t.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpwu3w3z7t.php\
    \ on line 19\n"
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  if (count($strings) == 0) {\n    return\
    \ null;\n  }\n  $longest = $strings[0];\n  foreach ($strings as $string) {\n \
    \   if (strlen($string) > strlen($longest)) {\n      $longest = $string;\n   \
    \ }\n  }\n  return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028883
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n\t$longest = null;\n\tforeach ($strings\
    \ as $string) {\n\t\tif (strlen($string) > strlen($longest)) {\n\t\t\t$longest\
    \ = $string;\n\t\t}\n\t}\n\treturn $longest;\n}\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Deprecated: strlen(): Passing null to parameter #1 ($string) of type string is
    deprecated in /tmp/tmpcljvlvqf.php on line 13


    Deprecated: strlen(): Passing null to parameter #1 ($string) of type string is
    deprecated in /tmp/tmpcljvlvqf.php on line 13

    '
  timestamp: 1660028884
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    // your code here\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcf_jsb4o.php:20\n\
    Stack trace:\n#0 /tmp/tmpcf_jsb4o.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpcf_jsb4o.php\
    \ on line 20\n"
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $l = array_map('strlen', $strings);\n    $longest =\
    \ array_reduce($l, function($a, $b) {\n        return $a > $b ? $a : $b;\n   \
    \ });\n    $index = array_search($longest, $l);\n    return $strings[$index];\n\
    }\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n}\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2lbncid5.php:18\n\
    Stack trace:\n#0 /tmp/tmp2lbncid5.php(22): test()\n#1 {main}\n  thrown in /tmp/tmp2lbncid5.php\
    \ on line 18\n"
  timestamp: 1660028883
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n\tif (count($strings) == 0) {\n\t\t\
    return null;\n\t}\n\t$longest = \"\";\n\tforeach ($strings as $str) {\n\t\tif\
    \ (strlen($str) > strlen($longest)) {\n\t\t\t$longest = $str;\n\t\t}\n\t}\n\t\
    return $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n\t$length = 0;\n\t$output;\n\tforeach\
    \ ($strings as $string) {\n\t\tif (strlen($string) >= $length) {\n\t\t\t$length\
    \ = strlen($string);\n\t\t\t$output = $string;\n\t\t}\n\t}\n\treturn $output;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined variable $output in /tmp/tmpyn1si2ae.php on line 19\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyn1si2ae.php:28\nStack\
    \ trace:\n#0 /tmp/tmpyn1si2ae.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpyn1si2ae.php\
    \ on line 28\n"
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n\t$longest = null;\n\t\n\tforeach ($strings\
    \ as $string) {\n\t\tif (is_null($longest) || strlen($string) > strlen($longest))\
    \ {\n\t\t\t$longest = $string;\n\t\t}\n\t}\n\t\n\treturn $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    // TODO: Write your code here\n\
    \    $counts = array_map('strlen', $strings);\n    array_multisort($counts, SORT_DESC,\
    \ $strings);\n    return empty($strings) ? null : $strings[0];\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpnnqxyp6n.php:24\n\
    Stack trace:\n#0 /tmp/tmpnnqxyp6n.php(27): test()\n#1 {main}\n  thrown in /tmp/tmpnnqxyp6n.php\
    \ on line 24\n"
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n\t$longest = null;\n\tif (count($strings)\
    \ > 0) {\n\t\t$longest = $strings[0];\n\t\tforeach ($strings as $string) {\n\t\
    \t\tif (strlen($string) > strlen($longest)) {\n\t\t\t\t$longest = $string;\n\t\
    \t\t}\n\t\t}\n\t}\n\treturn $longest;\n}\n\nfunction candidate(...$args) {\n \
    \   return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n\n    $longest = \"\";\n    foreach ($strings as $s) {\n\
    \        if (strlen($s) > strlen($longest)) {\n            $longest = $s;\n  \
    \      }\n    }\n\n    return $longest;\n}\n\n$a = array();\n$b = array(\"a\"\
    , \"b\", \"c\");\n$c = array(\"a\", \"bb\", \"ccc\");\n\necho longest($a) . \"\
    \\n\";\necho longest($b) . \"\\n\";\necho longest($c) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    a

    ccc

    '
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n\t$longest = $strings[0];\n\tif(isset($strings)){\n\
    \tforeach($strings as $string){\n\t\tif(strlen($string) > strlen($longest)){\n\
    \t\t\t$longest = $string;\n\t\t}\n\t}\n\t}\n\telse{\n\t\t$longest = NULL;\n\t\
    }\n\treturn $longest;\n}\n\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 0 in /tmp/tmp2ai4ht42.php on line 11

    '
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n\tif (empty($strings)) return null;\n\
    \t$longest = $strings[0];\n\tforeach ($strings as $string) {\n\t\tif (strlen($string)\
    \ > strlen($longest)) {\n\t\t\t$longest = $string;\n\t\t}\n\t}\n\treturn $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n\t$longest = null;\n\tforeach ($strings\
    \ as $s) {\n\t\tif ($longest == null || strlen($s) > strlen($longest))\n\t\t\t\
    $longest = $s;\n\t}\n\treturn $longest;\n}\nfunction candidate(...$args) {\n \
    \   return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (!$strings) {\n        return\
    \ null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $item) {\n\
    \        if (strlen($item) > strlen($longest)) {\n            $longest = $item;\n\
    \        }\n    }\n    return $longest;\n}\nfunction candidate(...$args) {\n \
    \   return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  $lengths = array_map('strlen', $strings);\n\
    \  $max = max($lengths);\n  $index = array_search($max, $lengths);\n  return $strings[$index];\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ValueError: max(): Argument #1 ($value) must contain\
    \ at least one element in /tmp/tmppckbdg23.php:12\nStack trace:\n#0 /tmp/tmppckbdg23.php(12):\
    \ max(Array)\n#1 /tmp/tmppckbdg23.php(18): longest(Array)\n#2 /tmp/tmppckbdg23.php(22):\
    \ candidate(Array)\n#3 /tmp/tmppckbdg23.php(27): test()\n#4 {main}\n  thrown in\
    \ /tmp/tmppckbdg23.php on line 12\n"
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  if (empty($strings)) {\n    return\
    \ null;\n  }\n  $max = 0;\n  $longest = null;\n  foreach ($strings as $str) {\n\
    \    if (strlen($str) > $max) {\n      $max = strlen($str);\n      $longest =\
    \ $str;\n    }\n  }\n  return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) return null;\n\
    \    $max_length = 0;\n    $max_string = \"\";\n    foreach ($strings as $str)\
    \ {\n        if (strlen($str) > $max_length) {\n            $max_length = strlen($str);\n\
    \            $max_string = $str;\n        }\n    }\n    return $max_string;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqefl_2ch.php:20\n\
    Stack trace:\n#0 /tmp/tmpqefl_2ch.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpqefl_2ch.php\
    \ on line 20\n"
  timestamp: 1660028884
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n    if (count($strings) == 1) {\n        return $strings[0];\n\
    \    }\n    return max($strings);\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5m8rekxc.php:26\n\
    Stack trace:\n#0 /tmp/tmp5m8rekxc.php(30): test()\n#1 {main}\n  thrown in /tmp/tmp5m8rekxc.php\
    \ on line 26\n"
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $max_length = 0;\n    $longest_string\
    \ = null;\n    foreach ($strings as $string) {\n        if (strlen($string) >\
    \ $max_length) {\n            $max_length = strlen($string);\n            $longest_string\
    \ = $string;\n        }\n    }\n    return $longest_string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    // your code here\n    if(empty($strings))\
    \ {\n        return null;\n    }\n    $longest = $strings[0];\n    foreach($strings\
    \ as $string) {\n        if(strlen($string) > strlen($longest)) {\n          \
    \  $longest = $string;\n        }\n    }\n    return $longest;\n}\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $str) {\n        if (strlen($str) > strlen($longest)) {\n            $longest\
    \ = $str;\n        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n\t// YOUR CODE HERE\n\t$max = NULL;\n\
    \tif (count($strings) == 0) {\n\t\treturn $max;\n\t}\n\tforeach ($strings as $str)\
    \ {\n\t\tif ($max == NULL) {\n\t\t\t$max = $str;\n\t\t} else {\n\t\t\tif (strlen($str)\
    \ > strlen($max)) {\n\t\t\t\t$max = $str;\n\t\t\t}\n\t\t}\n\t}\n\treturn $max;\n\
    }\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  if(empty($strings)) {\n    return\
    \ null;\n  }\n\n  $longest = $strings[0];\n  foreach($strings as $string) {\n\
    \    if(strlen($string) > strlen($longest)) {\n      $longest = $string;\n   \
    \ }\n  }\n\n  return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  $result = null;\n  $maxLength = 0;\n\
    \  foreach ($strings as $string) {\n    if (strlen($string) > $maxLength) {\n\
    \      $maxLength = strlen($string);\n      $result = $string;\n    }\n  }\n \
    \ return $result;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  if (empty($strings)) {\n    return\
    \ null;\n  }\n  $longest = null;\n  foreach ($strings as $str) {\n    if ($longest\
    \ === null || strlen($str) > strlen($longest)) {\n      $longest = $str;\n   \
    \ }\n  }\n  return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if (!$longest || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $lengths = array_map('strlen', $strings);\n\
    \    $maxLength = max($lengths);\n    $index = array_search($maxLength, $lengths);\n\
    \    return $strings[$index];\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught ValueError: max(): Argument #1 ($value) must contain\
    \ at least one element in /tmp/tmp7qvi3dup.php:12\nStack trace:\n#0 /tmp/tmp7qvi3dup.php(12):\
    \ max(Array)\n#1 /tmp/tmp7qvi3dup.php(18): longest(Array)\n#2 /tmp/tmp7qvi3dup.php(22):\
    \ candidate(Array)\n#3 /tmp/tmp7qvi3dup.php(27): test()\n#4 {main}\n  thrown in\
    \ /tmp/tmp7qvi3dup.php on line 12\n"
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n\tif (count($strings) == 0) {\n\t\t\
    return null;\n\t}\n\t$longest = $strings[0];\n\tfor ($i = 1; $i < count($strings);\
    \ $i++) {\n\t\tif (strlen($strings[$i]) > strlen($longest)) {\n\t\t\t$longest\
    \ = $strings[$i];\n\t\t}\n\t}\n\treturn $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028883
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (sizeof($strings) == 0) {\n \
    \       return null;\n    }\n\n    $longest = $strings[0];\n    for ($i = 1; $i\
    \ < sizeof($strings); $i++) {\n        if (strlen($strings[$i]) > strlen($longest))\
    \ {\n            $longest = $strings[$i];\n        }\n    }\n\n    return $longest;\n\
    }\n\nprint longest(array()) . PHP_EOL;\nprint longest(array(\"a\", \"b\", \"c\"\
    )) . PHP_EOL;\nprint longest(array(\"a\", \"bb\", \"ccc\")) . PHP_EOL;\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    a

    ccc

    '
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  if (sizeof($strings) == 0) {\n   \
    \ return null;\n  }\n  $longest = $strings[0];\n  for ($i = 1; $i < sizeof($strings);\
    \ $i++) {\n    if (strlen($strings[$i]) > strlen($longest)) {\n      $longest\
    \ = $strings[$i];\n    }\n  }\n  return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if(count($strings) == 0) {\n   \
    \     return null;\n    }\n    $longest = $strings[0];\n    for($i = 1; $i < count($strings);\
    \ $i++) {\n        if(strlen($strings[$i]) > strlen($longest)) {\n           \
    \ $longest = $strings[$i];\n        }\n    }\n    return $longest;\n}\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n\tif(empty($strings)) return null;\n\
    \t$longest = \"\";\n\tforeach($strings as $string) {\n\t\tif(strlen($string) >\
    \ strlen($longest)) $longest = $string;\n\t}\n\treturn $longest;\n}\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    // your code here\n    if ($strings\
    \ == []) {\n        return null;\n    }\n    return max(array_map('strlen', $strings));\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp01vy_8jx.php:24\n\
    Stack trace:\n#0 /tmp/tmp01vy_8jx.php(28): test()\n#1 {main}\n  thrown in /tmp/tmp01vy_8jx.php\
    \ on line 24\n"
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (!empty($strings)) {\n      \
    \  $maxLength = max(array_map('strlen', $strings));\n        return reset(array_filter($strings,\
    \ function($string) use ($maxLength) {\n            return strlen($string) ==\
    \ $maxLength;\n        }));\n    }\n    return null;\n}\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Notice: Only variables should be passed by reference in /tmp/tmpb7pcwrdm.php on
    line 15


    Notice: Only variables should be passed by reference in /tmp/tmpb7pcwrdm.php on
    line 15

    '
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $result = array_shift($strings);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($result)) {\n          \
    \  $result = $string;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $max = \"\";\n    foreach ($strings\
    \ as $s) {\n        if (strlen($s) > strlen($max)) {\n            $max = $s;\n\
    \        }\n    }\n    return $max;\n}\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwp_mzooj.php:24\n\
    Stack trace:\n#0 /tmp/tmpwp_mzooj.php(29): test()\n#1 {main}\n  thrown in /tmp/tmpwp_mzooj.php\
    \ on line 24\n"
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    $length =\
    \ 0;\n    foreach ($strings as $s) {\n        if (strlen($s) > $length) {\n  \
    \          $longest = $s;\n            $length = strlen($s);\n        }\n    }\n\
    \    return $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if (is_null($longest) || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824386
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    $length =\
    \ 0;\n    foreach ($strings as $string) {\n        if (strlen($string) > $length)\
    \ {\n            $longest = $string;\n            $length = strlen($string);\n\
    \        }\n    }\n    return $longest;\n}\nfunction candidate(...$args) {\n \
    \   return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n\t// TODO\n}\n\nclass LongestTest extends\
    \ PHPUnit_Framework_TestCase {\n\tpublic function testEmpty() {\n\t\t$this->assertEquals(null,\
    \ longest(array()));\n\t}\n\n\tpublic function testOneLetter() {\n\t\t$this->assertEquals(\"\
    a\", longest(array(\"a\", \"b\", \"c\")));\n\t}\n\n\tpublic function testMultipleLetters()\
    \ {\n\t\t$this->assertEquals(\"ccc\", longest(array(\"a\", \"bb\", \"ccc\")));\n\
    \t}\n}\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Class \"PHPUnit_Framework_TestCase\" not\
    \ found in /tmp/tmp_i0s8c3_.php:14\nStack trace:\n#0 {main}\n  thrown in /tmp/tmp_i0s8c3_.php\
    \ on line 14\n"
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  if (sizeof($strings) === 0) {\n  \
    \  return null;\n  }\n\n  $index = 0;\n  $result = $strings[$index];\n  for ($i\
    \ = 1; $i < sizeof($strings); $i++) {\n    if (strlen($strings[$i]) > strlen($result))\
    \ {\n      $index = $i;\n      $result = $strings[$i];\n    }\n  }\n\n  return\
    \ $result;\n}\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if(empty($strings)){\n        return\
    \ null;\n    }\n    $str = $strings[0];\n    for($i = 1; $i < count($strings);\
    \ $i++){\n        if(strlen($strings[$i]) > strlen($str)){\n            $str =\
    \ $strings[$i];\n        }\n    }\n    return $str;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $current_max = 0;\n    $result =\
    \ null;\n    foreach ($strings as $str) {\n        if (strlen($str) > $current_max)\
    \ {\n            $current_max = strlen($str);\n            $result = $str;\n \
    \       }\n    }\n    return $result;\n}\n\nfunction candidate(...$args) {\n \
    \   return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n\tif (sizeof($strings) == 0) {\n\t\t\
    return null;\n\t}\n\t$longest = $strings[0];\n\tforeach ($strings as $string)\
    \ {\n\t\tif (strlen($string) > strlen($longest)) {\n\t\t\t$longest = $string;\n\
    \t\t}\n\t}\n\treturn $longest;\n}\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  $longestString = null;\n  $longestLength\
    \ = 0;\n  foreach ($strings as $string) {\n    if (strlen($string) > $longestLength)\
    \ {\n      $longestString = $string;\n      $longestLength = strlen($string);\n\
    \    }\n  }\n  return $longestString;\n}\n\nfunction candidate(...$args) {\n \
    \   return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  // YOUR CODE HERE\n}\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvlb4zvrq.php:19\n\
    Stack trace:\n#0 /tmp/tmpvlb4zvrq.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpvlb4zvrq.php\
    \ on line 19\n"
  timestamp: 1660028884
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    // TODO: Implement this function\n\
    \    return null;\n}\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_n9w51uk.php:20\n\
    Stack trace:\n#0 /tmp/tmp_n9w51uk.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp_n9w51uk.php\
    \ on line 20\n"
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if(count($strings) == 0) {\n   \
    \     return null;\n    }\n    $max_length = 0;\n    $max_index = 0;\n    foreach($strings\
    \ as $index => $str) {\n        if(strlen($str) > $max_length) {\n           \
    \ $max_length = strlen($str);\n            $max_index = $index;\n        }\n \
    \   }\n    return $strings[$max_index];\n}\nfunction candidate(...$args) {\n \
    \   return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n\t$longest_string = null;\n\tforeach\
    \ ($strings as $string) {\n\t\tif ($longest_string === null || strlen($string)\
    \ > strlen($longest_string)) {\n\t\t\t$longest_string = $string;\n\t\t}\n\t}\n\
    \treturn $longest_string;\n}\n\n$strings = array(\"a\", \"bb\", \"ccc\");\necho\
    \ longest($strings);\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ccc
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $s) {\n        if ($longest === null || strlen($s) > strlen($longest)) {\n\
    \            $longest = $s;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  if (empty($strings)) {\n    return\
    \ null;\n  }\n\n  $longest = $strings[0];\n  foreach ($strings as $value) {\n\
    \    if (strlen($value) > strlen($longest)) {\n      $longest = $value;\n    }\n\
    \  }\n  return $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n\n    $longest = $strings[0];\n    foreach ($strings as\
    \ $str) {\n        if (strlen($str) > strlen($longest)) {\n            $longest\
    \ = $str;\n        }\n    }\n\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    // Your code here\n}\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg4t0tdgm.php:19\n\
    Stack trace:\n#0 /tmp/tmpg4t0tdgm.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpg4t0tdgm.php\
    \ on line 19\n"
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest_string = null;\n    $longest_string_length\
    \ = 0;\n    foreach ($strings as $string) {\n        if (strlen($string) > $longest_string_length)\
    \ {\n            $longest_string = $string;\n            $longest_string_length\
    \ = strlen($string);\n        }\n    }\n    return $longest_string;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n\t$longest = null;\n\tforeach ($strings\
    \ as $string) {\n\t\tif ($longest === null || strlen($string) > strlen($longest))\
    \ {\n\t\t\t$longest = $string;\n\t\t}\n\t}\n\treturn $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $result = null;\n    foreach ($strings\
    \ as $string) {\n        if ($result === null || strlen($string) > strlen($result))\
    \ {\n            $result = $string;\n        }\n    }\n    return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n\t$max = null;\n\tforeach ($strings\
    \ as $string) {\n\t\tif (empty($max) || strlen($string) > strlen($max)) {\n\t\t\
    \t$max = $string;\n\t\t}\n\t}\n\treturn $max;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\nassert_options(ASSERT_BAIL,\
    \ 1);\nassert(is_null(longest(array())));\nassert(longest(array(\"a\", \"b\",\
    \ \"c\")) === \"a\");\nassert(longest(array(\"a\", \"bb\", \"ccc\")) === \"ccc\"\
    );\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n\tif (empty($strings)) {\n\t\treturn\
    \ null;\n\t}\n\n\t$longestString = \"\";\n\t$longestStringLength = 0;\n\n\tforeach\
    \ ($strings as $string) {\n\t\t$stringLength = strlen($string);\n\t\tif ($stringLength\
    \ > $longestStringLength) {\n\t\t\t$longestString = $string;\n\t\t\t$longestStringLength\
    \ = $stringLength;\n\t\t}\n\t}\n\n\treturn $longestString;\n}\n\n$strings = array();\n\
    echo longest($strings) . \"\\n\";\n\n$strings = array(\"a\", \"b\", \"c\");\n\
    echo longest($strings) . \"\\n\";\n\n$strings = array(\"a\", \"bb\", \"ccc\");\n\
    echo longest($strings) . \"\\n\";\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    a

    ccc

    '
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  $len = 0;\n  $result = null;\n  foreach\
    \ ($strings as $string) {\n    if (strlen($string) > $len) {\n      $len = strlen($string);\n\
    \      $result = $string;\n    }\n  }\n  return $result;\n}\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  $longest = NULL;\n  $longestLength\
    \ = 0;\n  foreach ($strings as $string) {\n    if (strlen($string) > $longestLength)\
    \ {\n      $longest = $string;\n      $longestLength = strlen($string);\n    }\n\
    \  }\n  return $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n\t$longest_string = '';\n\tforeach ($strings\
    \ as $string) {\n\t\tif (strlen($string) > strlen($longest_string)) {\n\t\t\t\
    $longest_string = $string;\n\t\t}\n\t}\n\treturn $longest_string;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmk8m0_07.php:25\n\
    Stack trace:\n#0 /tmp/tmpmk8m0_07.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpmk8m0_07.php\
    \ on line 25\n"
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $lengths = array_map('strlen', $strings);\n    $max\
    \ = max($lengths);\n    $key = array_search($max, $lengths);\n    return $strings[$key];\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n\tif (empty($strings)) {\n\t\treturn\
    \ null;\n\t}\n\t\n\t$longest = '';\n\tforeach ($strings as $string) {\n\t\tif\
    \ (strlen($string) > strlen($longest)) {\n\t\t\t$longest = $string;\n\t\t}\n\t\
    }\n\t\n\treturn $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  if (count($strings) == 0) {\n    return\
    \ null;\n  }\n  else {\n    $longest_string = $strings[0];\n    foreach ($strings\
    \ as $i) {\n      if (strlen($i) > strlen($longest_string)) {\n        $longest_string\
    \ = $i;\n      }\n    }\n    return $longest_string;\n  }\n}\n\n$list = array(\"\
    Hello\", \"I\", \"am\", \"Ujjwal\", \"Singh\");\necho longest($list);\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: Ujjwal
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  // Your code here.\n  $l = 0;\n  $res\
    \ = NULL;\n  foreach ($strings as $string) {\n    if ($l < strlen($string)) {\n\
    \      $l = strlen($string);\n      $res = $string;\n    }\n  }\n  return $res;\n\
    }\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    // PUT YOUR CODE HERE\n}\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpu2t7u4cy.php:19\n\
    Stack trace:\n#0 /tmp/tmpu2t7u4cy.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpu2t7u4cy.php\
    \ on line 19\n"
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest_string = null;\n    $longest_string_length\
    \ = 0;\n    foreach ($strings as $string) {\n        if (strlen($string) > $longest_string_length)\
    \ {\n            $longest_string = $string;\n            $longest_string_length\
    \ = strlen($string);\n        }\n    }\n    return $longest_string;\n}\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  $longest = NULL;\n  foreach ($strings\
    \ as $s) {\n    if (is_null($longest) || strlen($s) > strlen($longest)) {\n  \
    \    $longest = $s;\n    }\n  }\n  return $longest;\n}\necho longest(array()).\"\
    \\n\";\necho longest(array(\"a\", \"b\", \"c\")).\"\\n\";\necho longest(array(\"\
    a\", \"bb\", \"ccc\")).\"\\n\";\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    a

    ccc

    '
  timestamp: 1660028884
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  // write your code here\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7zcj6dic.php:20\n\
    Stack trace:\n#0 /tmp/tmp7zcj6dic.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp7zcj6dic.php\
    \ on line 20\n"
  timestamp: 1660028884
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  // Write your code here\n  // Hint:\
    \ You can use strlen function to get the length of a string\n}\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprxziq8_e.php:20\n\
    Stack trace:\n#0 /tmp/tmprxziq8_e.php(24): test()\n#1 {main}\n  thrown in /tmp/tmprxziq8_e.php\
    \ on line 20\n"
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n    $longest = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest_string = null;\n    foreach\
    \ ($strings as $string) {\n        if (!isset($longest_string) || strlen($string)\
    \ > strlen($longest_string)) {\n            $longest_string = $string;\n     \
    \   }\n    }\n    return $longest_string;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  $longest = null;\n  foreach ($strings\
    \ as $s) {\n    if ($longest === null || strlen($s) > strlen($longest)) {\n  \
    \    $longest = $s;\n    }\n  }\n  return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028883
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) === 0) {\n \
    \       return null;\n    }\n    $longest = $strings[0];\n    for ($i = 1; $i\
    \ < count($strings); $i++) {\n        if (strlen($strings[$i]) > strlen($longest))\
    \ {\n            $longest = $strings[$i];\n        }\n    }\n    return $longest;\n\
    }\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n\n    $result = $strings[0];\n    foreach ($strings\
    \ as $element) {\n        if (strlen($element) > strlen($result)) {\n        \
    \    $result = $element;\n        }\n    }\n    return $result;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest_string = null;\n    $longest_length\
    \ = 0;\n    foreach ($strings as $string) {\n        if (strlen($string) > $longest_length)\
    \ {\n            $longest_string = $string;\n            $longest_length = strlen($string);\n\
    \        }\n    }\n    return $longest_string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  if (count($strings) == 0) {\n    return\
    \ null;\n  }\n  $longest = $strings[0];\n  for ($i = 1; $i < count($strings);\
    \ $i++) {\n    if (strlen($strings[$i]) > strlen($longest)) {\n      $longest\
    \ = $strings[$i];\n    }\n  }\n  return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    // Get the length of the longest\
    \ string\n    $longest = -1;\n    foreach ($strings as $string) {\n        $len\
    \ = strlen($string);\n        if ($len > $longest) {\n            $longest = $len;\n\
    \        }\n    }\n\n    // Get the first string with the length of the longest\
    \ string\n    foreach ($strings as $string) {\n        if (strlen($string) ==\
    \ $longest) {\n            return $string;\n        }\n    }\n}\n\n$test1 = longest(array());\n\
    assert($test1 === null);\n$test2 = longest(array(\"a\", \"b\", \"c\"));\nassert($test2\
    \ === \"a\");\n$test3 = longest(array(\"a\", \"bb\", \"ccc\"));\nassert($test3\
    \ === \"ccc\");\necho \"Test 3 passed!\";\nfunction candidate(...$args) {\n  \
    \  return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Test 3 passed!
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (sizeof($strings) == 0) {\n \
    \       return null;\n    }\n    $longestString = $strings[0];\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longestString)) {\n   \
    \         $longestString = $string;\n        }\n    }\n    return $longestString;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $res = \"\";\n    $maxLength = 0;\n\
    \    foreach ($strings as $s) {\n        if (strlen($s) > $maxLength) {\n    \
    \        $maxLength = strlen($s);\n            $res = $s;\n        }\n    }\n\
    \    return $res;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpz_bkjytg.php:27\n\
    Stack trace:\n#0 /tmp/tmpz_bkjytg.php(32): test()\n#1 {main}\n  thrown in /tmp/tmpz_bkjytg.php\
    \ on line 27\n"
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest_string = null;\n    $longest_length\
    \ = 0;\n    foreach ($strings as $string) {\n        if ($longest_length < strlen($string))\
    \ {\n            $longest_length = strlen($string);\n            $longest_string\
    \ = $string;\n        }\n    }\n    return $longest_string;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $str) {\n        if (is_null($longest) || strlen($str) > strlen($longest))\
    \ {\n            $longest = $str;\n        }\n    }\n    return $longest;\n}\n\
    \nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    // ...\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfv78dhx_.php:20\n\
    Stack trace:\n#0 /tmp/tmpfv78dhx_.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpfv78dhx_.php\
    \ on line 20\n"
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = \"\";\n    foreach ($strings as $string)\
    \ {\n        if (strlen($string) > strlen($longest)) {\n            $longest =\
    \ $string;\n        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n    $longest = $strings[0];\n    for ($i = 1; $i <\
    \ count($strings); $i++) {\n        if (strlen($strings[$i]) > strlen($longest))\
    \ {\n            $longest = $strings[$i];\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n\tif(empty($strings)){\n\t\treturn null;\n\
    \t}\n\t$longest=array_reduce($strings, function($a, $b){\n\t\tif(strlen($a)>strlen($b)){\n\
    \t\t\treturn $a;\n\t\t}\n\t\telse{\n\t\t\treturn $b;\n\t\t}\n\t});\n\treturn $longest;\n\
    }\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: strlen(): Passing null to parameter #1 ($string) of type\
    \ string is deprecated in /tmp/tmp79y7hc85.php on line 15\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp79y7hc85.php:30\nStack trace:\n#0 /tmp/tmp79y7hc85.php(34):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp79y7hc85.php on line 30\n"
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n\tif (count($strings) == 0) {\n\t\t\
    return null;\n\t}\n\t$longest = $strings[0];\n\tforeach ($strings as $s) {\n\t\
    \tif (strlen($s) > strlen($longest)) {\n\t\t\t$longest = $s;\n\t\t}\n\t}\n\treturn\
    \ $longest;\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824386
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (sizeof($strings) === 0) {\n\
    \        return null;\n    }\n    $longest_string = $strings[0];\n    for ($i\
    \ = 1; $i < sizeof($strings); $i++) {\n        if (strlen($strings[$i]) > strlen($longest_string))\
    \ {\n            $longest_string = $strings[$i];\n        }\n    }\n    return\
    \ $longest_string;\n}\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    // YOUR CODE HERE\n    if (empty($strings))\
    \ {\n        return null;\n    }\n    $longest = $strings[0];\n    for ($i = 1;\
    \ $i < count($strings); $i++) {\n        if (strlen($strings[$i]) > strlen($longest))\
    \ {\n            $longest = $strings[$i];\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpol94ld7h.php:19\n\
    Stack trace:\n#0 /tmp/tmpol94ld7h.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpol94ld7h.php\
    \ on line 19\n"
  timestamp: 1659824386
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\necho longest(array()) . \"\\n\";\necho longest(array(\"a\", \"b\", \"c\"\
    )) . \"\\n\";\necho longest(array(\"a\", \"bb\", \"ccc\")) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    a

    ccc

    '
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if(count($strings) == 0) {\n   \
    \     return null;\n    }\n    $max = $strings[0];\n    foreach($strings as $string)\
    \ {\n        if(strlen($string) > strlen($max)) {\n            $max = $string;\n\
    \        }\n    }\n    return $max;\n}\n\nfunction candidate(...$args) {\n   \
    \ return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) return null;\n\
    \    $longest = \"\";\n    foreach ($strings as $string) {\n        if (strlen($string)\
    \ > strlen($longest)) {\n            $longest = $string;\n        }\n    }\n \
    \   return $longest;\n}\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  $longest = null;\n  foreach ($strings\
    \ as $string) {\n    if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n      $longest = $string;\n    }\n  }\n  return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028883
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  $max = 0;\n  $longest = null;\n  foreach\
    \ ($strings as $str) {\n    if (strlen($str) > $max) {\n      $max = strlen($str);\n\
    \      $longest = $str;\n    }\n  }\n  return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $str) {\n        if ($longest === null || strlen($str) > strlen($longest))\
    \ {\n            $longest = $str;\n        }\n    }\n    return $longest;\n}\n\
    \nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824386
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  $max_length = 0;\n  $max_string =\
    \ \"\";\n  foreach ($strings as $string) {\n    if (strlen($string) > $max_length)\
    \ {\n      $max_length = strlen($string);\n      $max_string = $string;\n    }\n\
    \  }\n  return $max_string;\n}\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4n65790a.php:26\n\
    Stack trace:\n#0 /tmp/tmp4n65790a.php(31): test()\n#1 {main}\n  thrown in /tmp/tmp4n65790a.php\
    \ on line 26\n"
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $str) {\n        if (!isset($longest) || strlen($str) > strlen($longest))\
    \ {\n            $longest = $str;\n        }\n    }\n    return $longest;\n}\n\
    \nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  $max_length = null;\n  $max_index\
    \ = null;\n  foreach ($strings as $i => $string) {\n    if (is_null($max_length)\
    \ || strlen($string) > $max_length) {\n      $max_length = strlen($string);\n\
    \      $max_index = $i;\n    }\n  }\n  return is_null($max_index) ? null : $strings[$max_index];\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n\t$longest = null;\n\tforeach ($strings\
    \ as $str) {\n\t\tif ($longest === null || strlen($str) > strlen($longest)) {\n\
    \t\t\t$longest = $str;\n\t\t}\n\t}\n\treturn $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  // if(count($strings) == 0) {\n  //\
    \   return null;\n  // }\n  // $longestStr = $strings[0];\n  // for($i = 1; $i\
    \ < count($strings); $i++) {\n  //   if(strlen($strings[$i]) > strlen($longestStr))\
    \ {\n  //     $longestStr = $strings[$i];\n  //   }\n  // }\n  // return $longestStr;\n\
    \  // return count($strings) == 0 ? null : max($strings);\n  return empty($strings)\
    \ ? null : max($strings);\n}\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp80irkhkm.php:30\n\
    Stack trace:\n#0 /tmp/tmp80irkhkm.php(34): test()\n#1 {main}\n  thrown in /tmp/tmp80irkhkm.php\
    \ on line 30\n"
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if(!$strings) return null;\n   \
    \ $longest = $strings[0];\n    foreach($strings as $string) {\n        if(strlen($string)\
    \ > strlen($longest)) $longest = $string;\n    }\n    return $longest;\n}\n\n\
    function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $max_string = NULL;\n    $max_length\
    \ = 0;\n    foreach ($strings as $string) {\n        $length = strlen($string);\n\
    \        if ($length > $max_length) {\n            $max_length = $length;\n  \
    \          $max_string = $string;\n        }\n    }\n    return $max_string;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) === 0) return\
    \ null;\n    if (count($strings) === 1) return $strings[0];\n    $longestString\
    \ = $strings[0];\n    for ($i = 1; $i < count($strings); $i++) {\n        if (strlen($strings[$i])\
    \ > strlen($longestString)) {\n            $longestString = $strings[$i];\n  \
    \      }\n    }\n    return $longestString;\n}\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n\tif (count($strings) == 0) {\n\t\t\
    return null;\n\t}\n\t$longest = $strings[0];\n\tforeach ($strings as $s) {\n\t\
    \tif (strlen($s) > strlen($longest)) {\n\t\t\t$longest = $s;\n\t\t}\n\t}\n\treturn\
    \ $longest;\n}\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  // TODO\n}\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpl8jvilv5.php:19\n\
    Stack trace:\n#0 /tmp/tmpl8jvilv5.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpl8jvilv5.php\
    \ on line 19\n"
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $longest = null;\n    foreach ($strings as $string)\
    \ {\n        if (empty($longest) || strlen($string) > strlen($longest)) {\n  \
    \          $longest = $string;\n        }\n    }\n    return $longest;\n}\n\n\
    function candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n\n    $longest = $strings[0];\n    foreach ($strings as\
    \ $string) {\n        if (strlen($string) > strlen($longest)) {\n            $longest\
    \ = $string;\n        }\n    }\n\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n\t// your code goes here\n\tif (sizeof($strings)\
    \ == 0) {\n\t\treturn null;\n\t}\n\t$longest = $strings[0];\n\tfor ($i = 1; $i\
    \ < sizeof($strings); $i++) {\n\t\tif (strlen($strings[$i]) > strlen($longest))\
    \ {\n\t\t\t$longest = $strings[$i];\n\t\t}\n\t}\n\treturn $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (!is_array($strings)) {\n   \
    \     throw new Exception('Argument must be an array');\n    }\n    $longest =\
    \ null;\n    foreach ($strings as $str) {\n        if (!is_string($str)) {\n \
    \           throw new Exception('Array must contain only strings');\n        }\n\
    \        if (strlen($str) > strlen($longest)) {\n            $longest = $str;\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Deprecated: strlen(): Passing null to parameter #1 ($string) of type string is
    deprecated in /tmp/tmpv83aa0ea.php on line 19


    Deprecated: strlen(): Passing null to parameter #1 ($string) of type string is
    deprecated in /tmp/tmpv83aa0ea.php on line 19

    '
  timestamp: 1660028884
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = \"\";\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) > strlen($longest)) {\n         \
    \   $longest = $string;\n        }\n    }\n    return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpa21nuf9l.php:25\n\
    Stack trace:\n#0 /tmp/tmpa21nuf9l.php(30): test()\n#1 {main}\n  thrown in /tmp/tmpa21nuf9l.php\
    \ on line 25\n"
  timestamp: 1660028884
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $lengths = array_map('strlen', $strings);\n\
    \    rsort($lengths);\n    $longest = array_pop($lengths);\n    foreach ($strings\
    \ as $string) {\n        if (strlen($string) == $longest) {\n            return\
    \ $string;\n        }\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptixuvjx8.php:28\n\
    Stack trace:\n#0 /tmp/tmptixuvjx8.php(31): test()\n#1 {main}\n  thrown in /tmp/tmptixuvjx8.php\
    \ on line 28\n"
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if(empty($strings)) {\n        return\
    \ null;\n    }\n\n    $result = $strings[0];\n    foreach($strings as $str) {\n\
    \        if(strlen($str) > strlen($result)) {\n            $result = $str;\n \
    \       }\n    }\n\n    return $result;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (!is_array($strings)) {\n   \
    \     return null;\n    }\n    $longest = null;\n    foreach ($strings as $current)\
    \ {\n        if (strlen($current) > strlen($longest)) {\n            $longest\
    \ = $current;\n        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Deprecated: strlen(): Passing null to parameter #1 ($string) of type string is
    deprecated in /tmp/tmpmqfokdbc.php on line 16


    Deprecated: strlen(): Passing null to parameter #1 ($string) of type string is
    deprecated in /tmp/tmpmqfokdbc.php on line 16

    '
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  $max = 0;\n  $maxIdx = null;\n  foreach\
    \ ($strings as $idx => $str) {\n    if (strlen($str) > $max) {\n      $max = strlen($str);\n\
    \      $maxIdx = $idx;\n    }\n  }\n  return is_null($maxIdx) ? null : $strings[$maxIdx];\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpol94ld7h.php:19\n\
    Stack trace:\n#0 /tmp/tmpol94ld7h.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpol94ld7h.php\
    \ on line 19\n"
  timestamp: 1659824386
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n\n    $longest = $strings[0];\n    foreach ($strings as\
    \ $string) {\n        if (strlen($string) > strlen($longest)) {\n            $longest\
    \ = $string;\n        }\n    }\n\n    return $longest;\n}\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $n = count($strings);\n    if ($n\
    \ == 0) {\n        return null;\n    }\n    $longest = $strings[0];\n    for ($i\
    \ = 1; $i < $n; $i++) {\n        if (strlen($strings[$i]) > strlen($longest))\
    \ {\n            $longest = $strings[$i];\n        }\n    }\n    return $longest;\n\
    }\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660028884
