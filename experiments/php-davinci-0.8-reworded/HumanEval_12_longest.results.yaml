language: php
name: HumanEval_12_longest
results:
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    // Your code here\n    $longestStr\
    \ = null;\n    $maxlen = 0;\n    foreach ($strings as $str) {\n      if (strlen($str)\
    \ > $maxlen) {\n        $maxlen = strlen($str);\n        $longestStr = $str;\n\
    \      }\n    }\n    return $longestStr;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824386
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    // YOUR CODE HERE\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6w7x7sg1.php:20\n\
    Stack trace:\n#0 /tmp/tmp6w7x7sg1.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp6w7x7sg1.php\
    \ on line 20\n"
  timestamp: 1659824386
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n\t// write your code here\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpca9egajw.php:20\n\
    Stack trace:\n#0 /tmp/tmpca9egajw.php(24): test()\n#1 {main}\n  thrown in /tmp/tmpca9egajw.php\
    \ on line 20\n"
  timestamp: 1659824386
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  $longest = null;\n  foreach ($strings\
    \ as $string) {\n    if (strlen($string) > strlen($longest)) {\n      $longest\
    \ = $string;\n    }\n  }\n  return $longest;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Deprecated: strlen(): Passing null to parameter #1 ($string) of type string is
    deprecated in /tmp/tmp8j7f2quw.php on line 13


    Deprecated: strlen(): Passing null to parameter #1 ($string) of type string is
    deprecated in /tmp/tmp8j7f2quw.php on line 13

    '
  timestamp: 1659824386
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) > 0) {\n   \
    \     $max_length = 0;\n        $longest_string = \"\";\n        foreach ($strings\
    \ as $string) {\n            if (strlen($string) > $max_length) {\n          \
    \      $max_length = strlen($string);\n                $longest_string = $string;\n\
    \            }\n        }\n        return $longest_string;\n    } else {\n   \
    \     return null;\n    }\n}\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824386
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n\t$lengths = array_map('strlen', $strings);\n\
    \tarray_multisort($lengths, SORT_DESC, $strings);\n\treturn empty($strings) ?\
    \ null : $strings[0];\n}\n\nfunction candidate(...$args) {\n    return longest(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(array()) !== null) { throw new\
    \ Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\"\
    )) !== \"x\") { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new\
    \ Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4e7jzlyk.php:23\n\
    Stack trace:\n#0 /tmp/tmp4e7jzlyk.php(26): test()\n#1 {main}\n  thrown in /tmp/tmp4e7jzlyk.php\
    \ on line 23\n"
  timestamp: 1659824386
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  $longest = NULL;\n  foreach ($strings\
    \ as $string) {\n    if (is_null($longest) || strlen($string) > strlen($longest))\
    \ {\n      $longest = $string;\n    }\n  }\n  return $longest;\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824386
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = NULL;\n    $longestLength\
    \ = 0;\n    foreach ($strings as $string) {\n        if (strlen($string) > $longestLength)\
    \ {\n            $longest = $string;\n            $longestLength = strlen($string);\n\
    \        }\n    }\n    return $longest;\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824386
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  if (count($strings) === 0) {\n   \
    \ return null;\n  }\n  $longest = $strings[0];\n  foreach ($strings as $string)\
    \ {\n    if (strlen($string) > strlen($longest)) {\n      $longest = $string;\n\
    \    }\n  }\n  return $longest;\n}\n\nfunction candidate(...$args) {\n    return\
    \ longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824386
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $str) {\n        if ($longest === null || strlen($str) > strlen($longest))\
    \ {\n            $longest = $str;\n        }\n    }\n    return $longest;\n}\n\
    \nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824386
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n\tif (empty($strings)) {\n\t\treturn\
    \ null;\n\t}\n\t$maxString = $strings[0];\n\t$maxLength = strlen($maxString);\n\
    \tforeach ($strings as $s) {\n\t\tif (strlen($s) > $maxLength) {\n\t\t\t$maxString\
    \ = $s;\n\t\t\t$maxLength = strlen($s);\n\t\t}\n\t}\n\treturn $maxString;\n}\n\
    \nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824386
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    // YOUR CODE HERE\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6w7x7sg1.php:20\n\
    Stack trace:\n#0 /tmp/tmp6w7x7sg1.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp6w7x7sg1.php\
    \ on line 20\n"
  timestamp: 1659824386
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n\tif(count($strings) == 0) {\n\t\treturn\
    \ null;\n\t}\n\telse {\n\t\t$i = 0;\n\t\t$longest = null;\n\t\twhile($i < count($strings))\
    \ {\n\t\t\tif(strlen($strings[$i]) > strlen($longest)) {\n\t\t\t\t$longest = $strings[$i];\n\
    \t\t\t}\n\t\t\t$i++;\n\t\t}\n\t\treturn $longest;\n\t}\n}\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Deprecated: strlen(): Passing null to parameter #1 ($string) of type string is
    deprecated in /tmp/tmplvp6pfs4.php on line 18


    Deprecated: strlen(): Passing null to parameter #1 ($string) of type string is
    deprecated in /tmp/tmplvp6pfs4.php on line 18

    '
  timestamp: 1659824386
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (count($strings) == 0) {\n  \
    \      return null;\n    }\n    $longest_string = $strings[0];\n    $longest_string_length\
    \ = strlen($longest_string);\n    for ($i = 1; $i < count($strings); $i++) {\n\
    \        $curr_string = $strings[$i];\n        $curr_string_length = strlen($curr_string);\n\
    \        if ($curr_string_length > $longest_string_length) {\n            $longest_string\
    \ = $curr_string;\n            $longest_string_length = $curr_string_length;\n\
    \        }\n    }\n    return $longest_string;\n}\n\n$strings = array(\n    \"\
    a\",\n    \"bb\",\n    \"ccc\"\n);\nassert(longest($strings) == \"ccc\");\n\n\
    $strings = array(\n    \"a\",\n    \"bb\",\n    \"ccc\",\n    \"dddd\",\n    \"\
    eeeee\"\n);\nassert(longest($strings) == \"eeeee\");\n\n$strings = array(\n  \
    \  \"a\",\n    \"b\",\n    \"c\"\n);\nassert(longest($strings) == \"a\");\n\n\
    $strings = array();\nassert(longest($strings) == null);\n\necho \"Finished!\"\
    ;\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: Finished!
  timestamp: 1659824386
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    // YOUR CODE HERE\n    $length =\
    \ count($strings);\n    $index = 0;\n    $longest = $strings[0];\n    if ($length\
    \ == 0) {\n        return null;\n    }\n    else {\n        while ($index < $length)\
    \ {\n            if (strlen($longest) < strlen($strings[$index])) {\n        \
    \        $longest = $strings[$index];\n            }\n            $index++;\n\
    \        }\n        return $longest;\n    }\n}\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    Warning: Undefined array key 0 in /tmp/tmpw77xow1r.php on line 14

    '
  timestamp: 1659824386
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    $longest = null;\n    foreach ($strings\
    \ as $string) {\n        if ($longest === null || strlen($string) > strlen($longest))\
    \ {\n            $longest = $string;\n        }\n    }\n    return $longest;\n\
    }\n\nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824386
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    if (empty($strings)) {\n       \
    \ return null;\n    }\n    $result = $strings[0];\n    $result_length = strlen($result);\n\
    \    foreach ($strings as $s) {\n        $s_length = strlen($s);\n        if ($s_length\
    \ > $result_length) {\n            $result = $s;\n            $result_length =\
    \ $s_length;\n        }\n    }\n    return $result;\n}\n\nfunction candidate(...$args)\
    \ {\n    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824386
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n}\n\nfunction candidate(...$args) {\n\
    \    return longest(...$args);\n}\n\nfunction test(): void {\n    if (candidate(array())\
    \ !== null) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"\
    x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"Test failed!\"); }\n  \
    \  if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\"))\
    \ !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpol94ld7h.php:19\n\
    Stack trace:\n#0 /tmp/tmpol94ld7h.php(23): test()\n#1 {main}\n  thrown in /tmp/tmpol94ld7h.php\
    \ on line 19\n"
  timestamp: 1659824386
- exit_code: 255
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n    // your code goes here\n}\n\nfunction\
    \ candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(array()) !== null) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"yyy\", \"zzzz\", \"www\"\
    , \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp63ejog9p.php:20\n\
    Stack trace:\n#0 /tmp/tmp63ejog9p.php(24): test()\n#1 {main}\n  thrown in /tmp/tmp63ejog9p.php\
    \ on line 20\n"
  timestamp: 1659824386
- exit_code: 0
  program: "<?php\n// Out of array of strings, return the longest one. Return the\
    \ first one in case of multiple\n// strings of the same length. Return null in\
    \ case the input array is empty.\n// >>> longest(array())\n// null\n// >>> longest(array(\"\
    a\", \"b\", \"c\"))\n// \"a\"\n// >>> longest(array(\"a\", \"bb\", \"ccc\"))\n\
    // \"ccc\"\nfunction longest($strings) {\n  if (count($strings) == 0) {\n    return\
    \ null;\n  }\n  $result = $strings[0];\n  foreach ($strings as $s) {\n    if (strlen($s)\
    \ > strlen($result)) {\n      $result = $s;\n    }\n  }\n  return $result;\n}\n\
    \nfunction candidate(...$args) {\n    return longest(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(array()) !== null) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(array(\"x\", \"y\", \"z\")) !== \"x\") {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(array(\"x\", \"\
    yyy\", \"zzzz\", \"www\", \"kkkk\", \"abc\")) !== \"zzzz\") { throw new Exception(\"\
    Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659824386
