name: HumanEval_10_make_palindrome
language: php
prompt: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
  // Algorithm idea is simple:\n// - Find the longest postfix of supplied string that\
  \ is a palindrome.\n// - Append to the end of the string reverse of a string prefix\
  \ that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\
  \"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\"\
  )\n// \"catac\"\nfunction make_palindrome($string) {\n"
tests: "function candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
  \ Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $i = strlen($string);\n  while (!is_palindrome($string, $i)) {\n\
    \    $i--;\n  }\n  return substr($string, 0, $i) . strrev(substr($string, $i));\n\
    }\n", "    $len = strlen($string);\n    if ($len <= 1) {\n        return $string;\n\
    \    }\n    $longest_palindrome_postfix = longest_palindrome_postfix($string);\n\
    \    $prefix = substr($string, 0, $len - strlen($longest_palindrome_postfix));\n\
    \    return $string . strrev($prefix);\n}\n", "    if ($string == \"\") return\
    \ \"\";\n    $length = strlen($string);\n    for ($i = $length; $i > 0; $i--)\
    \ {\n        $substring = substr($string, $length - $i);\n        if (is_palindrome($substring))\
    \ {\n            return $string . strrev(substr($string, 0, $length - $i));\n\
    \        }\n    }\n}\n", "    $length = strlen($string);\n    $start = 0;\n  \
    \  $end = $length - 1;\n    while ($start < $end) {\n        if ($string[$start]\
    \ != $string[$end]) {\n            break;\n        }\n        $start++;\n    \
    \    $end--;\n    }\n    if ($start == $end) {\n        return $string;\n    }\n\
    \    $candidate = $string . strrev(substr($string, 0, $start));\n    $length_candidate\
    \ = strlen($candidate);\n    $start = $length_candidate - 1;\n    $end = $length_candidate\
    \ - 1;\n    while ($start > $end) {\n        if ($candidate[$start] != $candidate[$end])\
    \ {\n            break;\n        }\n        $start--;\n        $end--;\n    }\n\
    \    return $candidate . substr($candidate, 0, $length_candidate - $start - 1);\n\
    }", "  $prefix = palindrome_prefix($string);\n  $postfix = palindrome_postfix($string);\n\
    \  $reverse_prefix = strrev(substr($string, 0, strlen($string) - strlen($postfix)));\n\
    \  return $prefix . $reverse_prefix;\n}\n", "  if (!$string) {\n    return \"\"\
    ;\n  }\n  $palindrome_suffix = longest_palindrome_suffix($string);\n  $palindrome_prefix\
    \ = strrev(substr($string, 0, strlen($string) - strlen($palindrome_suffix)));\n\
    \  return $string . $palindrome_prefix;\n}\n", "  // we want a string to be at\
    \ least 1 character long\n  if (strlen($string) <= 1) {\n    return $string;\n\
    \  }\n  // get the reversed prefix\n  $reversed_prefix = strrev(get_prefix($string));\n\
    \  // return a string made of prefix and reversed prefix\n  return $string . $reversed_prefix;\n\
    }\n", "    $len = strlen($string);\n    for ($i = $len - 1; $i >= 0; $i--) {\n\
    \        if (is_palindrome(substr($string, $i))) {\n            return $string\
    \ . strrev(substr($string, 0, $i));\n        }\n    }\n    return $string;\n}\n",
  "    if (empty($string)) {\n        return $string;\n    }\n    if (is_palindrome($string))\
    \ {\n        return $string;\n    }\n    $suffix = strrev(strstr($string, strrev($string),\
    \ true));\n    $prefix = substr($string, strlen($suffix));\n    return $string\
    \ . $prefix;\n}\n", "  // Find the longest palindromic suffix.\n  $lps = find_longest_palindromic_suffix($string);\n\
    \  // Concatenate the string prefix and reverse it.\n  $prefix = reverse(substr($string,\
    \ 0, -strlen($lps)));\n  // Return the resulting palindrome.\n  return $string\
    \ . $prefix;\n}", "    $len = strlen($string);\n    if ($len <= 1) {\n       \
    \ return $string;\n    }\n    $i = $len - 1;\n    while ($i >= 0) {\n        if\
    \ ($string[$i] == $string[0]) {\n            if (is_palindrome(substr($string,\
    \ 0, $i+1))) {\n                break;\n            }\n        }\n        $i--;\n\
    \    }\n    $before = strrev(substr($string, $i+1));\n    return $string . $before;\n\
    }\n", "    $reverse = strrev($string);\n    $string_len = strlen($string);\n \
    \   $iterations = 0;\n    for ($i = $string_len - 1; $i >= 0; $i--) {\n      \
    \  $prefix = substr($string, 0, $i);\n        $postfix = substr($string, $i);\n\
    \        $postfix_reverse = strrev($postfix);\n        if ($postfix == $postfix_reverse)\
    \ {\n            $iterations++;\n            return $string . $prefix;\n     \
    \   }\n    }\n    return $string;\n}", "  // Find the longest palindromic suffix\
    \ of supplied string.\n  $palindrome_suffix = find_longest_palindrome_suffix($string);\n\
    \  // Find the string prefix that comes before the palindromic suffix.\n  $prefix\
    \ = substr($string, 0, strlen($string) - strlen($palindrome_suffix));\n  // Find\
    \ the reverse of the prefix.\n  $reversed_prefix = strrev($prefix);\n  // Return\
    \ the concatenation of the prefix, the palindromic suffix and the reversed prefix.\n\
    \  return $prefix . $palindrome_suffix . $reversed_prefix;\n}\n", "    $length\
    \ = strlen($string);\n    $n = $length * 2 + 1;\n    $string = str_split($string);\n\
    \    $string[] = \"#\";\n\n    $rightmost = 0;\n    $rightcenter = 0;\n    $p\
    \ = [];\n    for ($i = 0; $i < $n; $i++) {\n        $mirror = 2 * $rightcenter\
    \ - $i;\n        if ($i < $rightmost) {\n            $p[$i] = min($rightmost -\
    \ $i, $p[$mirror]);\n        }\n\n        while ($i - $p[$i] - 1 >= 0 && $i +\
    \ $p[$i] + 1 < $n && $string[$i - $p[$i] - 1] == $string[$i + $p[$i] + 1]) {\n\
    \            $p[$i]++;\n        }\n\n        if ($i + $p[$i] > $rightmost) {\n\
    \            $rightmost = $i + $p[$i];\n            $rightcenter = $i;\n     \
    \   }\n    }\n\n    // Find the center of the longest palindrome.\n    $leftcenter\
    \ = $rightcenter = 0;\n    $max = 0;\n    for ($i = 0; $i < $n; $i++) {\n    \
    \    if ($p[$i] > $max) {\n            $max = $p[$i];\n            $leftcenter\
    \ = $i;\n        }\n    }\n\n    $palindrome = [];\n    for ($i = $leftcenter\
    \ - $max; $i <= $leftcenter + $max; $i++) {\n        if ($string[$i] != \"#\"\
    ) {\n            $palindrome[] = $string[$i];\n        }\n    }\n\n    $prefix\
    \ = array_slice($string, 0, $leftcenter - $max);\n    $prefix = array_reverse($prefix);\n\
    \    return implode(\"\", $prefix) . implode(\"\", $palindrome);\n}\n", "  //\
    \ Build a table of substrings of $string.\n  $table = array();\n  for ($i = 0;\
    \ $i < strlen($string); $i++) {\n    for ($j = $i; $j < strlen($string); $j++)\
    \ {\n      $table[$i][$j] = substr($string, $i, $j - $i + 1);\n    }\n  }\n  //\
    \ Find the longest substring in the table that is a palindrome.\n  $longest_index\
    \ = null;\n  $longest_length = 0;\n  for ($i = 0; $i < count($table); $i++) {\n\
    \    for ($j = $i; $j < count($table[$i]); $j++) {\n      if (is_palindrome($table[$i][$j])\
    \ && strlen($table[$i][$j]) > $longest_length) {\n        $longest_index = $i;\n\
    \        $longest_length = strlen($table[$i][$j]);\n      }\n    }\n  }\n  //\
    \ Find the prefix that comes before the palindromic suffix.\n  $prefix = substr($string,\
    \ 0, $longest_index);\n  // Construct the palindrome.\n  return $string . strrev($prefix);\n\
    }", "  $string_reversed = strrev($string);\n  $string_length = strlen($string);\n\
    \  // Find the longest suffix of $string that is a palindrome.\n  $suffix_length\
    \ = 0;\n  while($suffix_length < $string_length) {\n    if(substr($string, $string_length\
    \ - $suffix_length - 1, $suffix_length + 1) == substr($string_reversed, 0, $suffix_length\
    \ + 1)) {\n      break;\n    }\n    $suffix_length++;\n  }\n  // In order to make\
    \ a palindrome, we have to append to the end of $string reverse of a prefix\n\
    \  // that comes before the palindromic suffix.\n  return $string . substr($string_reversed,\
    \ $suffix_length);\n}\n$string = \"cata\";\n$palindrome = make_palindrome($string);\n\
    echo \"Shortest palindrome that begins with '$string' is '$palindrome'.\\n\";",
  "    $string_len = strlen($string);\n    for ($i = 0; $i < $string_len; $i++) {\n\
    \        $substring = substr($string, $i);\n        if (is_palindrome($substring))\
    \ {\n            return $string . strrev(substr($string, 0, $i));\n        }\n\
    \    }\n    return $string;\n}\n", "    // Find the longest palindromic suffix\
    \ of the supplied string\n    $longest_palindromic_suffix = find_longest_palindromic_suffix($string);\n\
    \    // Now just add to the end of the string the reverse of the prefix that comes\
    \ before the palindromic suffix\n    return $string . strrev(substr($string, 0,\
    \ -strlen($longest_palindromic_suffix)));\n}\n", "    // find the longest palindromic\
    \ suffix.\n    $palindrome = find_longest_palindrome($string);\n    // reverse\
    \ the string that precedes the suffix\n    $prefix = strrev(substr($string, 0,\
    \ strlen($string) - strlen($palindrome)));\n    // return the palindrome\n   \
    \ return $prefix . $string;\n}\n", "  $max_length = strlen($string);\n  $max_length\
    \ = $max_length > strlen($string)/2 ? $max_length : strlen($string)/2;\n  for\
    \ ($i = $max_length; $i > 0; $i--) {\n    $substring = substr($string, 0, $i);\n\
    \    if ($substring == strrev($substring)) {\n      return $string . strrev(substr($string,\
    \ 0, strlen($string) - $i));\n    }\n  }\n  return $string;\n}\n\necho make_palindrome(\"\
    cata\") . \"\\n\";\necho make_palindrome(\"cat\") . \"\\n\";\necho make_palindrome(\"\
    \") . \"\\n\";"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
