name: HumanEval_10_make_palindrome
language: php
prompt: "<?php\n// Find the shortest palindrome that begins with a supplied string.\n\
  // Algorithm idea is simple:\n// - Find the longest postfix of supplied string that\
  \ is a palindrome.\n// - Append to the end of the string reverse of a string prefix\
  \ that comes before the palindromic suffix.\n// >>> make_palindrome(\"\")\n// \"\
  \"\n// >>> make_palindrome(\"cat\")\n// \"catac\"\n// >>> make_palindrome(\"cata\"\
  )\n// \"catac\"\nfunction make_palindrome($string) {\n"
tests: "function candidate(...$args) {\n    return make_palindrome(...$args);\n}\n\
  \nfunction test(): void {\n    if (candidate(\"\") !== \"\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"x\") !== \"x\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"xyz\") !== \"xyzyx\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"xyx\") !== \"xyx\") { throw new Exception(\"\
  Test failed!\"); }\n    if (candidate(\"jerry\") !== \"jerryrrej\") { throw new\
  \ Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["  $i = strlen($string);\n  while (!is_palindrome($string, $i)) {\n\
    \    $i--;\n  }\n  return substr($string, 0, $i) . strrev(substr($string, $i));\n\
    }\n", "    $len = strlen($string);\n    if ($len <= 1) {\n        return $string;\n\
    \    }\n    $longest_palindrome_postfix = longest_palindrome_postfix($string);\n\
    \    $prefix = substr($string, 0, $len - strlen($longest_palindrome_postfix));\n\
    \    return $string . strrev($prefix);\n}\n", "    if ($string == \"\") return\
    \ \"\";\n    $length = strlen($string);\n    for ($i = $length; $i > 0; $i--)\
    \ {\n        $substring = substr($string, $length - $i);\n        if (is_palindrome($substring))\
    \ {\n            return $string . strrev(substr($string, 0, $length - $i));\n\
    \        }\n    }\n}\n", "    $length = strlen($string);\n    $start = 0;\n  \
    \  $end = $length - 1;\n    while ($start < $end) {\n        if ($string[$start]\
    \ != $string[$end]) {\n            break;\n        }\n        $start++;\n    \
    \    $end--;\n    }\n    if ($start == $end) {\n        return $string;\n    }\n\
    \    $candidate = $string . strrev(substr($string, 0, $start));\n    $length_candidate\
    \ = strlen($candidate);\n    $start = $length_candidate - 1;\n    $end = $length_candidate\
    \ - 1;\n    while ($start > $end) {\n        if ($candidate[$start] != $candidate[$end])\
    \ {\n            break;\n        }\n        $start--;\n        $end--;\n    }\n\
    \    return $candidate . substr($candidate, 0, $length_candidate - $start - 1);\n\
    }", "  $prefix = palindrome_prefix($string);\n  $postfix = palindrome_postfix($string);\n\
    \  $reverse_prefix = strrev(substr($string, 0, strlen($string) - strlen($postfix)));\n\
    \  return $prefix . $reverse_prefix;\n}\n", "  if (!$string) {\n    return \"\"\
    ;\n  }\n  $palindrome_suffix = longest_palindrome_suffix($string);\n  $palindrome_prefix\
    \ = strrev(substr($string, 0, strlen($string) - strlen($palindrome_suffix)));\n\
    \  return $string . $palindrome_prefix;\n}\n", "  // we want a string to be at\
    \ least 1 character long\n  if (strlen($string) <= 1) {\n    return $string;\n\
    \  }\n  // get the reversed prefix\n  $reversed_prefix = strrev(get_prefix($string));\n\
    \  // return a string made of prefix and reversed prefix\n  return $string . $reversed_prefix;\n\
    }\n", "    $len = strlen($string);\n    for ($i = $len - 1; $i >= 0; $i--) {\n\
    \        if (is_palindrome(substr($string, $i))) {\n            return $string\
    \ . strrev(substr($string, 0, $i));\n        }\n    }\n    return $string;\n}\n",
  "    if (empty($string)) {\n        return $string;\n    }\n    if (is_palindrome($string))\
    \ {\n        return $string;\n    }\n    $suffix = strrev(strstr($string, strrev($string),\
    \ true));\n    $prefix = substr($string, strlen($suffix));\n    return $string\
    \ . $prefix;\n}\n", "  // Find the longest palindromic suffix.\n  $lps = find_longest_palindromic_suffix($string);\n\
    \  // Concatenate the string prefix and reverse it.\n  $prefix = reverse(substr($string,\
    \ 0, -strlen($lps)));\n  // Return the resulting palindrome.\n  return $string\
    \ . $prefix;\n}", "    $len = strlen($string);\n    if ($len <= 1) {\n       \
    \ return $string;\n    }\n    $i = $len - 1;\n    while ($i >= 0) {\n        if\
    \ ($string[$i] == $string[0]) {\n            if (is_palindrome(substr($string,\
    \ 0, $i+1))) {\n                break;\n            }\n        }\n        $i--;\n\
    \    }\n    $before = strrev(substr($string, $i+1));\n    return $string . $before;\n\
    }\n", "    $reverse = strrev($string);\n    $string_len = strlen($string);\n \
    \   $iterations = 0;\n    for ($i = $string_len - 1; $i >= 0; $i--) {\n      \
    \  $prefix = substr($string, 0, $i);\n        $postfix = substr($string, $i);\n\
    \        $postfix_reverse = strrev($postfix);\n        if ($postfix == $postfix_reverse)\
    \ {\n            $iterations++;\n            return $string . $prefix;\n     \
    \   }\n    }\n    return $string;\n}", "  // Find the longest palindromic suffix\
    \ of supplied string.\n  $palindrome_suffix = find_longest_palindrome_suffix($string);\n\
    \  // Find the string prefix that comes before the palindromic suffix.\n  $prefix\
    \ = substr($string, 0, strlen($string) - strlen($palindrome_suffix));\n  // Find\
    \ the reverse of the prefix.\n  $reversed_prefix = strrev($prefix);\n  // Return\
    \ the concatenation of the prefix, the palindromic suffix and the reversed prefix.\n\
    \  return $prefix . $palindrome_suffix . $reversed_prefix;\n}\n", "    $length\
    \ = strlen($string);\n    $n = $length * 2 + 1;\n    $string = str_split($string);\n\
    \    $string[] = \"#\";\n\n    $rightmost = 0;\n    $rightcenter = 0;\n    $p\
    \ = [];\n    for ($i = 0; $i < $n; $i++) {\n        $mirror = 2 * $rightcenter\
    \ - $i;\n        if ($i < $rightmost) {\n            $p[$i] = min($rightmost -\
    \ $i, $p[$mirror]);\n        }\n\n        while ($i - $p[$i] - 1 >= 0 && $i +\
    \ $p[$i] + 1 < $n && $string[$i - $p[$i] - 1] == $string[$i + $p[$i] + 1]) {\n\
    \            $p[$i]++;\n        }\n\n        if ($i + $p[$i] > $rightmost) {\n\
    \            $rightmost = $i + $p[$i];\n            $rightcenter = $i;\n     \
    \   }\n    }\n\n    // Find the center of the longest palindrome.\n    $leftcenter\
    \ = $rightcenter = 0;\n    $max = 0;\n    for ($i = 0; $i < $n; $i++) {\n    \
    \    if ($p[$i] > $max) {\n            $max = $p[$i];\n            $leftcenter\
    \ = $i;\n        }\n    }\n\n    $palindrome = [];\n    for ($i = $leftcenter\
    \ - $max; $i <= $leftcenter + $max; $i++) {\n        if ($string[$i] != \"#\"\
    ) {\n            $palindrome[] = $string[$i];\n        }\n    }\n\n    $prefix\
    \ = array_slice($string, 0, $leftcenter - $max);\n    $prefix = array_reverse($prefix);\n\
    \    return implode(\"\", $prefix) . implode(\"\", $palindrome);\n}\n", "  //\
    \ Build a table of substrings of $string.\n  $table = array();\n  for ($i = 0;\
    \ $i < strlen($string); $i++) {\n    for ($j = $i; $j < strlen($string); $j++)\
    \ {\n      $table[$i][$j] = substr($string, $i, $j - $i + 1);\n    }\n  }\n  //\
    \ Find the longest substring in the table that is a palindrome.\n  $longest_index\
    \ = null;\n  $longest_length = 0;\n  for ($i = 0; $i < count($table); $i++) {\n\
    \    for ($j = $i; $j < count($table[$i]); $j++) {\n      if (is_palindrome($table[$i][$j])\
    \ && strlen($table[$i][$j]) > $longest_length) {\n        $longest_index = $i;\n\
    \        $longest_length = strlen($table[$i][$j]);\n      }\n    }\n  }\n  //\
    \ Find the prefix that comes before the palindromic suffix.\n  $prefix = substr($string,\
    \ 0, $longest_index);\n  // Construct the palindrome.\n  return $string . strrev($prefix);\n\
    }", "  $string_reversed = strrev($string);\n  $string_length = strlen($string);\n\
    \  // Find the longest suffix of $string that is a palindrome.\n  $suffix_length\
    \ = 0;\n  while($suffix_length < $string_length) {\n    if(substr($string, $string_length\
    \ - $suffix_length - 1, $suffix_length + 1) == substr($string_reversed, 0, $suffix_length\
    \ + 1)) {\n      break;\n    }\n    $suffix_length++;\n  }\n  // In order to make\
    \ a palindrome, we have to append to the end of $string reverse of a prefix\n\
    \  // that comes before the palindromic suffix.\n  return $string . substr($string_reversed,\
    \ $suffix_length);\n}\n$string = \"cata\";\n$palindrome = make_palindrome($string);\n\
    echo \"Shortest palindrome that begins with '$string' is '$palindrome'.\\n\";",
  "    $string_len = strlen($string);\n    for ($i = 0; $i < $string_len; $i++) {\n\
    \        $substring = substr($string, $i);\n        if (is_palindrome($substring))\
    \ {\n            return $string . strrev(substr($string, 0, $i));\n        }\n\
    \    }\n    return $string;\n}\n", "    // Find the longest palindromic suffix\
    \ of the supplied string\n    $longest_palindromic_suffix = find_longest_palindromic_suffix($string);\n\
    \    // Now just add to the end of the string the reverse of the prefix that comes\
    \ before the palindromic suffix\n    return $string . strrev(substr($string, 0,\
    \ -strlen($longest_palindromic_suffix)));\n}\n", "    // find the longest palindromic\
    \ suffix.\n    $palindrome = find_longest_palindrome($string);\n    // reverse\
    \ the string that precedes the suffix\n    $prefix = strrev(substr($string, 0,\
    \ strlen($string) - strlen($palindrome)));\n    // return the palindrome\n   \
    \ return $prefix . $string;\n}\n", "  $max_length = strlen($string);\n  $max_length\
    \ = $max_length > strlen($string)/2 ? $max_length : strlen($string)/2;\n  for\
    \ ($i = $max_length; $i > 0; $i--) {\n    $substring = substr($string, 0, $i);\n\
    \    if ($substring == strrev($substring)) {\n      return $string . strrev(substr($string,\
    \ 0, strlen($string) - $i));\n    }\n  }\n  return $string;\n}\n\necho make_palindrome(\"\
    cata\") . \"\\n\";\necho make_palindrome(\"cat\") . \"\\n\";\necho make_palindrome(\"\
    \") . \"\\n\";", "  $string_length = strlen($string);\n  $palindrome_length =\
    \ $string_length;\n  $match = '';\n  // Find longest suffix that is a palindrome.\n\
    \  for ($i = 0; $i < $string_length; $i++) {\n    $prefix = substr($string, 0,\
    \ $i);\n    $suffix = substr($string, $i);\n    if (is_palindrome($suffix)) {\n\
    \      $match = $suffix;\n      $palindrome_length = $i;\n      break;\n    }\n\
    \  }\n  $palindrome = $string . substr(strrev($string), $palindrome_length);\n\
    \  return $palindrome;\n}\n", "  $length = strlen($string);\n  if ($length ===\
    \ 0) {\n    return $string;\n  }\n  $longest_palindrome_substring = longest_palindrome_substring($string);\n\
    \  $prefix = substr($string, 0, $length - strlen($longest_palindrome_substring));\n\
    \  return $string . strrev($prefix);\n}\n", "  $string_reversed = reverse_string($string);\n\
    \  // Find longest palindromic suffix.\n  $palindromic_suffix = '';\n  for ($i\
    \ = 1; $i <= strlen($string); $i++) {\n    $prefix = substr($string, 0, $i);\n\
    \    $reversed_prefix = reverse_string($prefix);\n    if (strpos($string_reversed,\
    \ $reversed_prefix) === 0) {\n      $palindromic_suffix = $prefix;\n    }\n  }\n\
    \  // Append the reverse of string prefix before palindromic suffix.\n  $palindromic_prefix\
    \ = reverse_string(substr($string, strlen($palindromic_suffix)));\n  return $palindromic_prefix\
    \ . $string;\n}", "    $len = strlen($string);\n    if ($len == 0) {\n       \
    \ return \"\";\n    }\n    $idx = $len - 1;\n    $palindrome_len = 1;\n    while\
    \ ($idx > 0) {\n        $prefix = substr($string, 0, $idx);\n        $suffix =\
    \ substr($string, $len - $idx);\n        if ($prefix == $suffix) {\n         \
    \   $palindrome_len = $idx;\n            break;\n        }\n        $idx--;\n\
    \    }\n    return $string . strrev(substr($string, 0, $len - $palindrome_len));\n\
    }\n", "  // Find the longest palindromic suffix.\n  $longest_palindromic_suffix\
    \ = \"\";\n  for ($i = strlen($string) - 1; $i >= 0; $i--) {\n    if (is_palindrome(substr($string,\
    \ $i))) {\n      $longest_palindromic_suffix = substr($string, $i);\n      break;\n\
    \    }\n  }\n  // Append to the end of the string reverse of a string prefix that\
    \ comes before the palindromic suffix.\n  return $string . strrev(substr($string,\
    \ 0, strlen($string) - strlen($longest_palindromic_suffix)));\n}\n", "    if ($string\
    \ == '') {\n        return '';\n    }\n    $length = strlen($string);\n    for\
    \ ($i = $length; $i > 0; $i--) {\n        $needle = substr($string, 0, $i);\n\
    \        $needle_rev = strrev($needle);\n        if (substr($string, $length -\
    \ $i) == $needle_rev) {\n            return $string . substr($needle_rev, 1);\n\
    \        }\n    }\n}\n\necho make_palindrome('') . PHP_EOL;\necho make_palindrome('cat')\
    \ . PHP_EOL;\necho make_palindrome('cata') . PHP_EOL;", "  if (strlen($string)\
    \ < 2) {\n    return $string;\n  }\n  $longest_suffix = \"\";\n  $longest_suffix_len\
    \ = 0;\n  $len = strlen($string);\n  for ($i = 0; $i < $len; $i++) {\n    $substring\
    \ = substr($string, $i);\n    if (is_palindrome($substring)) {\n      $substring_len\
    \ = strlen($substring);\n      if ($substring_len > $longest_suffix_len) {\n \
    \       $longest_suffix = $substring;\n        $longest_suffix_len = $substring_len;\n\
    \      }\n    }\n  }\n  if ($longest_suffix_len > 0) {\n    $prefix = substr($string,\
    \ 0, $len - $longest_suffix_len);\n    return $prefix . reverse($longest_suffix);\n\
    \  }\n  return \"\";\n}\n", "  // in case string is empty, return it as-is\n \
    \ if (!$string) {\n    return $string;\n  }\n\n  // find the longest palindromic\
    \ suffix\n  $len = strlen($string);\n  $suffix = '';\n  for ($i = $len - 1; $i\
    \ >= 0; $i--) {\n    $suffix = $string[$i] . $suffix;\n    $pos = strpos($string,\
    \ $suffix);\n    if ($pos === 0) {\n      break;\n    }\n  }\n\n  // if there\
    \ was a palindromic suffix, return it appended to string with suffix removed and\
    \ reversed\n  if ($pos === 0) {\n    return $string . substr(strrev($string),\
    \ strlen($suffix));\n  }\n\n  // no palindromic suffix, return string as-is\n\
    \  return $string;\n}\n\n$argv[1] = isset($argv[1]) ? $argv[1] : '';\necho make_palindrome($argv[1])\
    \ . \"\\n\";", "    if (strlen($string) == 0) {\n        return $string;\n   \
    \ }\n\n    $reversed = strrev($string);\n    $palindrome_suffix = build_suffix_palindrome($string);\n\
    \    $string_prefix = substr($string, 0, strlen($string) - strlen($palindrome_suffix));\n\
    \    $palindrome_prefix = strrev($string_prefix);\n\n    return $string . $palindrome_prefix;\n\
    }\n", "  $len = strlen($string);\n  if ($len == 0) {\n    return \"\";\n  }\n\
    \  $longest_prefix = $len;\n  while ($longest_prefix >= 1) {\n    if (substr($string,\
    \ 0, $longest_prefix) == substr($string, $len - $longest_prefix, $longest_prefix))\
    \ {\n      break;\n    }\n    $longest_prefix--;\n  }\n  return $string . substr($string,\
    \ 0, $len - $longest_prefix);\n}\n", "  // Empty and single-character strings\
    \ are already palindromes.\n  if ($string == \"\" || $string == \"a\") {\n   \
    \ return $string;\n  }\n  // Find the longest postfix that is a palindrome.\n\
    \  $postfix = find_longest_palindromic_postfix($string);\n  // If a found postfix\
    \ ends at the end of the string, it means that the whole string is a palindrome\n\
    \  // and there is nothing to append.\n  if ($postfix == $string) {\n    return\
    \ $string;\n  }\n  // We append the reverse of a prefix that comes before the\
    \ palindromic suffix.\n  $prefix = substr($string, 0, strlen($string) - strlen($postfix));\n\
    \  return $string . strrev($prefix);\n}\n", "    $n = strlen($string);\n    for\
    \ ($i = $n - 1; $i >= 0; $i--) {\n        if (strncmp($string, substr($string,\
    \ $i), $n - $i) == 0) {\n            return $string . strrev(substr($string, 0,\
    \ $i));\n        }\n    }\n    return $string;\n}\n", "    $palindrome = '';\n\
    \    $i = strlen($string);\n    for (; $i > 0; $i--) {\n        $suffix = substr($string,\
    \ $i);\n        $prefix = substr($string, 0, $i);\n        if ($suffix == strrev($suffix))\
    \ {\n            $palindrome = $string . strrev($prefix);\n            break;\n\
    \        }\n    }\n    return $palindrome;\n}\n", "  $len = strlen($string);\n\
    \  $palindrome = \"\";\n  $m = -1;\n  $j = 0;\n  for ($i = 0; $i < $len; $i++)\
    \ {\n    $k = 1;\n    if ($i > $m) {\n      $palindrome .= $string[$i];\n    }\
    \ else {\n      $palindrome .= $string[$m - $i + $j];\n    }\n    while (($i -\
    \ $k >= 0) && ($i + $k < $len) && ($string[$i - $k] == $string[$i + $k])) {\n\
    \      $palindrome .= $string[$i - $k];\n      $k++;\n    }\n    if ($i + $k -\
    \ 1 > $m) {\n      $m = $i + $k - 1;\n      $j = $k;\n    }\n  }\n  return strrev(substr($string,\
    \ $m + 1)) . $palindrome;\n}", "    $l = strlen($string);\n    for ($i = $l; $i\
    \ > 0; $i--) {\n        if (strcmp(strrev(substr($string, 0, $i)), substr($string,\
    \ $i)) == 0) {\n            return $string . strrev(substr($string, 0, $i));\n\
    \        }\n    }\n    return $string;\n}\n", "  $len = strlen($string);\n  $i\
    \ = $len;\n  while ($i > 0) {\n    $substring = substr($string, $len - $i);\n\
    \    if (is_palindrome($substring)) {\n      break;\n    }\n    $i--;\n  }\n \
    \ $prefix = substr($string, 0, $len - $i);\n  return $string . strrev($prefix);\n\
    }\n", "    $length = strlen($string);\n    if ($length === 0) {\n        return\
    \ \"\";\n    }\n    $suffix = \"\";\n    for ($i = $length - 1; $i >= 0; $i--)\
    \ {\n        $substring = substr($string, $i);\n        if (is_palindrome($substring))\
    \ {\n            $suffix = $substring;\n            break;\n        }\n    }\n\
    \    return $string . strrev(substr($string, 0, $length - strlen($suffix)));\n\
    }", "  $longest_palindrome = \"\";\n  $len = strlen($string);\n  for ($index =\
    \ 0; $index < $len; $index++) {\n    $test_suffix = substr($string, $index);\n\
    \    $test_prefix = substr($string, 0, $len - $index);\n    if ($test_suffix ==\
    \ strrev($test_suffix) && $test_suffix > $longest_palindrome) {\n      $longest_palindrome\
    \ = $test_suffix;\n    }\n    if ($test_prefix == strrev($test_prefix) && $test_prefix\
    \ > $longest_palindrome) {\n      $longest_palindrome = $test_prefix;\n    }\n\
    \  }\n  return $string . strrev(substr($string, 0, $len - strlen($longest_palindrome)));\n\
    }\n\n$strings = array(\"\", \"cat\", \"cata\", \"tacocat\", \"racecar\", \"af\"\
    , \"afqwertyuiop\", \"a\", \"aa\", \"ab\", \"abb\", \"abbb\", \"abbbb\", \"abbbbb\"\
    , \"abbbbbb\");\nforeach ($strings as $string) {\n  echo \"make_palindrome(\\\"\
    $string\\\")\\n\";\n  echo make_palindrome($string) . \"\\n\";\n}", "    $length\
    \ = strlen($string);\n    if ($length === 0) return \"\";\n    if ($length ===\
    \ 1) return $string . $string;\n    if ($length === 2) {\n        if ($string[0]\
    \ === $string[1]) {\n            return $string . $string;\n        } else {\n\
    \            return $string . strrev($string);\n        }\n    }\n    // Find\
    \ the longest postfix of the string that is a palindrome.\n    $best = \"\";\n\
    \    for ($i = $length - 1; $i >= 1; $i--) {\n        $suffix = substr($string,\
    \ $i);\n        $suffix_length = strlen($suffix);\n        $is_palindrome = true;\n\
    \        for ($j = 0; $j < $suffix_length; $j++) {\n            if ($suffix[$j]\
    \ !== $suffix[$suffix_length - $j - 1]) {\n                $is_palindrome = false;\n\
    \                break;\n            }\n        }\n        if ($is_palindrome)\
    \ {\n            $best = $suffix;\n            break;\n        }\n    }\n    //\
    \ Add reverse of a string prefix to the end of the string.\n    return $string\
    \ . strrev(substr($string, 0, $length - strlen($best)));\n}\n$string = readline(\"\
    Enter string: \");\n$result = make_palindrome($string);\necho \"Palindrome: $result\\\
    n\";", "    $length = strlen($string);\n    if ($length === 0) {\n        return\
    \ $string;\n    }\n    // Find the longest palindromic suffix by comparing the\
    \ characters\n    // at the beginning and the end of the string.\n    $is_suffix_palindrome\
    \ = true;\n    $suffix_length = 0;\n    while ($is_suffix_palindrome) {\n    \
    \    if ($string[$suffix_length] === $string[$length - 1 - $suffix_length]) {\n\
    \            $suffix_length++;\n        } else {\n            $is_suffix_palindrome\
    \ = false;\n        }\n    }\n    // Append to the end of the string the reverse\
    \ of the string\n    // prefix that comes before the palindromic suffix.\n   \
    \ $prefix_length = $length - $suffix_length;\n    $string .= strrev(substr($string,\
    \ 0, $prefix_length));\n    return $string;\n}\n", "    // empty string is trivially\
    \ a palindrome.\n    if ($string == \"\") {\n        return \"\";\n    }\n   \
    \ // find the longest palindromic suffix.\n    $longest_palindromic_suffix = longest_palindromic_suffix($string);\n\
    \    // reverse the prefix.\n    $prefix = substr($string, 0, strlen($string)\
    \ - strlen($longest_palindromic_suffix));\n    $reversed_prefix = strrev($prefix);\n\
    \    // return the concatenation of the reversed prefix, the suffix and the original\
    \ string.\n    return $reversed_prefix . $longest_palindromic_suffix . $string;\n\
    }\n", "    $length = strlen($string);\n    $palsuffix = \"\";\n    $result = $string;\n\
    \    for ($i = $length; $i > 0; $i--) {\n        if (is_palindrome($string, $i,\
    \ $length)) {\n            $palsuffix = substr($string, $i, $length);\n      \
    \      break;\n        }\n    }\n    $prefix = substr($string, 0, $length - strlen($palsuffix));\n\
    \    $prefix = strrev($prefix);\n    $result .= $prefix;\n    return $result;\n\
    }\n", "  $length = strlen($string);\n  for ($i = $length; $i > 0; $i--) {\n  \
    \  $prefix = substr($string, 0, $i);\n    $suffix = substr($string, $length -\
    \ $i);\n    if ($prefix == strrev($suffix)) {\n      return $string . strrev(substr($string,\
    \ 0, $length - $i));\n    }\n  }\n  return $string;\n}\n\necho make_palindrome(\"\
    \"), \"\\n\";\necho make_palindrome(\"cat\"), \"\\n\";\necho make_palindrome(\"\
    cata\"), \"\\n\";", "    $max_suffix_len = longest_palindrome_suffix_len($string);\n\
    \    $string .= strrev(substr($string, 0, strlen($string) - $max_suffix_len));\n\
    \    return $string;\n}\n", "  $len = strlen($string);\n  $temp_string = strrev($string);\n\
    \  for ($i = 0; $i < $len; $i++) {\n    $temp_string_len = strlen($temp_string);\n\
    \    $pos = strpos($temp_string, $string[$i]);\n    if ($pos !== false) {\n  \
    \    if (substr($temp_string, $pos, $temp_string_len - $pos) == substr($string,\
    \ 0, $temp_string_len - $pos)) {\n        break;\n      }\n    }\n  }\n  $prefix\
    \ = substr($string, $temp_string_len - $pos);\n  return $string . strrev($prefix);\n\
    }\n\n$fp = fopen(\"php://stdin\", \"r\");\n\nfscanf($fp, \"%d\", $t);\n\nfor ($a0\
    \ = 0; $a0 < $t; $a0++) {\n    fscanf($fp, \"%s\", $s);\n    echo make_palindrome($s)\
    \ . \"\\n\";\n}", "    $reversed = strrev($string);\n    $max_length = strlen($string);\n\
    \    $l = 0;\n    $k = 0;\n    $end = 0;\n    $start = 0;\n    $n = strlen($string);\n\
    \    $new_array = array();\n    for ($i = 0; $i < $n; $i++) {\n        $new_array[$i]\
    \ = array();\n        for ($j = 0; $j < $n; $j++) {\n            $new_array[$i][$j]\
    \ = 0;\n        }\n    }\n    for ($i = 0; $i < $n; $i++) {\n        $new_array[$i][$i]\
    \ = 1;\n    }\n    for ($i = 0; $i < $n - 1; $i++) {\n        if ($string[$i]\
    \ == $string[$i + 1]) {\n            $new_array[$i][$i + 1] = 1;\n           \
    \ $start = $i;\n            $end = $i + 1;\n        }\n    }\n    for ($k = 3;\
    \ $k <= $n; $k++) {\n        for ($i = 0; $i < $n - $k + 1; $i++) {\n        \
    \    $j = $i + $k - 1;\n            if ($string[$i] == $string[$j] && $new_array[$i\
    \ + 1][$j - 1] == 1) {\n                $new_array[$i][$j] = 1;\n            \
    \    if ($k > $max_length) {\n                    $start = $i;\n             \
    \       $end = $j;\n                    $max_length = $k;\n                }\n\
    \            }\n        }\n    }\n    $prefix = substr($string, 0, $start);\n\
    \    $res = $string . strrev($prefix);\n    return $res;\n}", "    $size = strlen($string);\n\
    \    $i = $size - 1;\n    while ($i >= 0) {\n        if (substr($string, 0, $i\
    \ + 1) == strrev(substr($string, $size - $i - 1))) {\n            break;\n   \
    \     }\n        $i--;\n    }\n    return $string . strrev(substr($string, 0,\
    \ $i));\n}\n", "    if (strlen($string) <= 1) {\n        return $string;\n   \
    \ }\n\n    $n = strlen($string);\n    $pivot = $n - 1;\n    $pref = array();\n\
    \    $pref[0] = 0;\n    $k = 0;\n    for ($i = 1; $i < $n; $i++) {\n        while\
    \ ($k > 0 && $string[$k] != $string[$i]) {\n            $k = $pref[$k - 1];\n\
    \        }\n        if ($string[$k] == $string[$i]) {\n            $k++;\n   \
    \     }\n        $pref[$i] = $k;\n    }\n\n    $k = $pref[$n - 1];\n    $ans =\
    \ \"\";\n    while ($k > 0) {\n        $ans = $string[$k - 1] . $ans;\n      \
    \  $k = $pref[$k - 1];\n    }\n\n    return $string . $ans;\n}\n", "  $len = strlen($string);\n\
    \  $pos = 0;\n  $pal_len = 0;\n  $tmp_pos = $len;\n  while ($tmp_pos > $pal_len)\
    \ {\n    // Find a potential palindrome start.\n    if ($string[$tmp_pos - 1]\
    \ === $string[$pal_len]) {\n      // Count the length of the palindrome, starting\
    \ from the potential palindrome start.\n      $cnt = 0;\n      while ($string[$tmp_pos\
    \ - 1 - $cnt] === $string[$pal_len + $cnt]) {\n        $cnt++;\n      }\n    \
    \  // Check if a found palindrome is the longest palindrome in the string.\n \
    \     if ($pal_len + $cnt > $pal_len) {\n        $pal_len = $pal_len + $cnt;\n\
    \        $pos = $tmp_pos - 1;\n      }\n    }\n    $tmp_pos--;\n  }\n  return\
    \ $string . strrev(substr($string, 0, $pos - $pal_len));\n}\n\necho make_palindrome(\"\
    \") . \"\\n\";\necho make_palindrome(\"cat\") . \"\\n\";\necho make_palindrome(\"\
    cata\") . \"\\n\";", "  $s = str_split($string);\n  $len = strlen($string);\n\
    \  $i = $len - 1;\n  for (; $i >= 0; $i--) {\n    if (is_palindrome(array_slice($s,\
    \ $i))) {\n      return $string . strrev(join('', array_slice($s, 0, $i)));\n\
    \    }\n  }\n  return $string;\n}\n", "  // check if given string is palindrome\n\
    \  if ($string == strrev($string)) {\n    return $string;\n  }\n  // find the\
    \ longest palindromic suffix\n  $length = strlen($string);\n  for ($i = $length;\
    \ $i > 0; $i--) {\n    $suffix = substr($string, $length - $i);\n    if ($suffix\
    \ == strrev($suffix)) {\n      break;\n    }\n  }\n  // append reverse of the\
    \ prefix that comes before the palindromic suffix\n  $prefix = substr($string,\
    \ 0, $length - $i);\n  return $string . strrev($prefix);\n}\n\n$string = readline(\"\
    Enter a string: \");\necho \"The result is: \" . make_palindrome($string) . \"\
    \\n\";", "    // Find out the length of the longest palindromic postfix of the\
    \ string.\n    $postfix_length = 0;\n    $l = strlen($string);\n    for ($i =\
    \ $l; $i > 0; $i--) {\n        if (is_palindrome(substr($string, $i))) {\n   \
    \         $postfix_length = $l - $i;\n            break;\n        }\n    }\n \
    \   // Add prefix to the original string.\n    $string .= substr($string, 0, $l\
    \ - $postfix_length);\n    return $string;\n}", "  // Step 1: Find the longest\
    \ postfix that is a palindrome\n  $postfix = longest_palindrome_suffix($string);\n\
    \  // Step 2: Append to the end of the string reverse of a string prefix that\
    \ comes before the palindromic suffix.\n  $prefix = strrev(substr($string, 0,\
    \ strlen($string) - strlen($postfix)));\n  return $string . $prefix;\n}\n", " \
    \   $length = strlen($string);\n    $suffix = \"\";\n    for ($i = $length - 1;\
    \ $i >= 0; $i--) {\n        $suffix = $string[$i] . $suffix;\n        if (strpos($string,\
    \ $suffix) === 0) {\n            $prefix = substr($string, strlen($suffix));\n\
    \            return $string . strrev($prefix);\n        }\n    }\n    return $string;\n\
    }\n\necho make_palindrome(\"\"), \"\\n\";\necho make_palindrome(\"cat\"), \"\\\
    n\";\necho make_palindrome(\"cata\"), \"\\n\";", "  $len = strlen($string);\n\
    \  for ($i = $len; $i > 0; $i--) {\n    if (is_palindrome(substr($string, 0, $i)))\
    \ {\n      return $string . strrev(substr($string, 0, $len - $i));\n    }\n  }\n\
    \  return $string;\n}\n", "    $length = strlen($string);\n    $i = 0;\n    $j\
    \ = $length - 1;\n    while ($i < $j) {\n        if ($string[$i] != $string[$j])\
    \ {\n            $i = 0;\n            $j--;\n        } else {\n            $i++;\n\
    \        }\n    }\n    $postfix = substr($string, $i);\n    $prefix = strrev(substr($string,\
    \ 0, $i));\n    return $string . $prefix;\n}\n", "    // O(n^2)\n    $len = strlen($string);\n\
    \    if ($len < 2) {\n        return $string;\n    }\n    $result = '';\n    $palindrome\
    \ = '';\n    $suffix = '';\n    for ($i = $len - 1; $i >= 0; $i--) {\n       \
    \ if ($string[$i] == $string[0]) {\n            $suffix = substr($string, 0, $i\
    \ + 1);\n            if (is_palindrome($suffix)) {\n                $palindrome\
    \ = $suffix;\n                break;\n            }\n        }\n    }\n    $result\
    \ = $string . strrev(substr($string, strlen($palindrome)));\n    return $result;\n\
    }\n", "    $reverse = strrev($string);\n    $len = strlen($string);\n    $longest\
    \ = '';\n    for ($i = 0; $i < $len; $i++) {\n        $prefix = substr($string,\
    \ 0, $i);\n        $suffix = substr($reverse, $len - $i);\n        if ($prefix\
    \ == $suffix) {\n            $longest = $prefix;\n        }\n    }\n    return\
    \ $string . substr($reverse, strlen($longest));\n}\n", "    $suffix = longest_palindromic_substring($string);\n\
    \    $prefix = strrev(substr($string, 0, strlen($string) - strlen($suffix)));\n\
    \    return $string . $prefix;\n}\n\necho \"Test make_palindrome:\\n\";\nassert(make_palindrome(\"\
    \") == \"\");\nassert(make_palindrome(\"cat\") == \"catac\");\nassert(make_palindrome(\"\
    cata\") == \"catac\");\nassert(make_palindrome(\"ab\") == \"aba\");\nassert(make_palindrome(\"\
    aba\") == \"aba\");\nassert(make_palindrome(\"abac\") == \"abacaba\");\nassert(make_palindrome(\"\
    abacabac\") == \"abacabac\");\nassert(make_palindrome(\"abbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabbabb",
  "  $l = strlen($string);\n  if ($l == 0) {\n    return \"\";\n  }\n\n  $longest_palindrome_length\
    \ = 0;\n  $longest_palindrome_start = -1;\n  for ($i = 0; $i < $l; $i++) {\n \
    \   $left = $i;\n    $right = $i;\n    while ($left >= 0 && $right < $l && $string[$left]\
    \ == $string[$right]) {\n      $left--;\n      $right++;\n    }\n    $length =\
    \ $right - $left - 1;\n    if ($length > $longest_palindrome_length) {\n     \
    \ $longest_palindrome_length = $length;\n      $longest_palindrome_start = $left\
    \ + 1;\n    }\n  }\n\n  $prefix = substr($string, 0, $longest_palindrome_start);\n\
    \  $palindrome = substr($string, $longest_palindrome_start, $longest_palindrome_length);\n\
    \  $reverse_prefix = strrev($prefix);\n  return $prefix . $palindrome . $reverse_prefix;\n\
    }\n", "  $str_length = strlen($string);\n  $suffix = get_longest_palindromic_suffix($string);\n\
    \  $prefix = $str_length > 0 ? substr($string, 0, -strlen($suffix)) : '';\n  return\
    \ $string . strrev($prefix);\n}\n", "    if (strlen($string) == 0) {\n       \
    \ return $string;\n    }\n    $palindrome_index = get_longest_palindrome_index($string);\n\
    \    $prefix = substr($string, 0, $palindrome_index);\n    $prefix_reverse = strrev($prefix);\n\
    \    return $string . $prefix_reverse;\n}\n", "  for ($i = strlen($string) - 1;\
    \ $i >= 0; $i--) {\n    $suffix = substr($string, $i);\n    $prefix = substr($string,\
    \ 0, $i);\n    if ($suffix == strrev($suffix)) {\n      $prefix = strrev($prefix);\n\
    \      return $string . $prefix;\n    }\n  }\n  return $string;\n}\n", "  $longest_palindrome\
    \ = \"\";\n  $len = strlen($string);\n  // Search from the end of the string.\n\
    \  for ($i = $len; $i >= 0; $i--) {\n    // Search for a longest palindrome in\
    \ a substring of given string.\n    for ($j = 0; $j < $len - $i; $j++) {\n   \
    \   $palindrome = substr($string, $i, $len - $j);\n      // Check if string is\
    \ palindrome.\n      if ($palindrome == strrev($palindrome)) {\n        // Check\
    \ if palindrome is longer than the previous one.\n        if (strlen($palindrome)\
    \ > strlen($longest_palindrome)) {\n          $longest_palindrome = $palindrome;\n\
    \        }\n      }\n    }\n  }\n  return $string . strrev(substr($string, 0,\
    \ strlen($string) - strlen($longest_palindrome)));\n}\n\necho make_palindrome(\"\
    \");\necho \"\\n\";\necho make_palindrome(\"cat\");\necho \"\\n\";\necho make_palindrome(\"\
    cata\");\necho \"\\n\";", "    if ($string == \"\") return \"\";\n    // Find\
    \ the longest palindromic suffix of the given string\n    $suffix = find_longest_palindromic_suffix($string);\n\
    \    // Append to the given string the reverse of its prefix before the found\
    \ palindromic suffix\n    $prefix = strrev(substr($string, 0, strlen($string)\
    \ - strlen($suffix)));\n    return $string . $prefix;\n}\n", "  $i = 0;\n  $j\
    \ = strlen($string) - 1;\n  while($i < $j) {\n    if($string[$i] != $string[$j])\
    \ {\n      break;\n    }\n    $i++;\n    $j--;\n  }\n  if($i >= $j) {\n    return\
    \ $string;\n  }\n  return make_palindrome(substr($string, 0, $j + 1)) . strrev(substr($string,\
    \ $j + 1));\n}\n\nprint_r(make_palindrome(\"\") . \"\\n\");\nprint_r(make_palindrome(\"\
    cat\") . \"\\n\");\nprint_r(make_palindrome(\"cata\") . \"\\n\");", "    $longest_palindrome\
    \ = \"\";\n    // try to find the longest palindrome that starts at the beginning\
    \ of the string\n    for ($i = 0; $i < strlen($string); $i++) {\n        $substring\
    \ = substr($string, 0, strlen($string) - $i);\n        $reversed_substring = strrev($substring);\n\
    \        if ($substring == $reversed_substring) {\n            $longest_palindrome\
    \ = $substring;\n        }\n    }\n    // if no such palindrome is found, the\
    \ whole string is already a palindrome\n    if ($longest_palindrome == \"\") {\n\
    \        return $string;\n    }\n    // form a prefix of the string that comes\
    \ before the palindromic postfix\n    $prefix = substr($string, strlen($longest_palindrome));\n\
    \    // append the reverse of the prefix to the end of the string\n    return\
    \ $string . strrev($prefix);\n}\n", "  if ($string == \"\") {\n    return \"\"\
    ;\n  }\n  // Check how long the postfix of supplied string is a palindrome.\n\
    \  $longest_palindrome_len = 0;\n  for ($i = 0; $i < floor(strlen($string) / 2);\
    \ $i++) {\n    if ($string[$i] == $string[strlen($string) - 1 - $i]) {\n     \
    \ $longest_palindrome_len++;\n    } else {\n      break;\n    }\n  }\n  // Append\
    \ to the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n  return $string . strrev(substr($string, 0, strlen($string) - $longest_palindrome_len));\n\
    }\n\necho make_palindrome(\"\") . \"\\n\";\necho make_palindrome(\"cat\") . \"\
    \\n\";\necho make_palindrome(\"cata\") . \"\\n\";", "    $len = strlen($string);\n\
    \    for ($i = $len; $i > 0; $i--) {\n        if (substr($string, 0, $i) == strrev(substr($string,\
    \ $len - $i))) {\n            return $string . strrev(substr($string, 0, $len\
    \ - $i));\n        }\n    }\n    return $string;\n}\n", "    $strlen = strlen($string);\n\
    \    if ($strlen == 0) {\n        return \"\";\n    }\n    $suffix = '';\n   \
    \ for ($i = $strlen - 1; $i >= 0; $i--) {\n        $suffix = $string[$i] . $suffix;\n\
    \        if (is_palindrome($suffix)) {\n            break;\n        }\n    }\n\
    \    return $string . strrev(substr($string, 0, $strlen - strlen($suffix)));\n\
    }\n", "  if ($string == \"\") {\n    return \"\";\n  }\n  $palindrome_len = find_palindrome_length($string);\n\
    \  return substr($string, 0, $palindrome_len) . make_palindrome(substr($string,\
    \ $palindrome_len));\n}\n", "    if ($string == \"\") {\n        return \"\";\n\
    \    }\n    $suffix = suffix_palindrome($string);\n    $result = $string . strrev(substr($string,\
    \ 0, strlen($string) - strlen($suffix)));\n    return $result;\n}\n", "    //\
    \ Find the longest postfix that is a palindrome.\n    $length = strlen($string);\n\
    \    $postfix = \"\";\n    for ($size = $length; $size > 0; $size--) {\n     \
    \   $postfix = substr($string, $length - $size);\n        if (is_palindrome($postfix))\
    \ {\n            break;\n        }\n    }\n    // Append reverse of a string prefix\
    \ before the palindromic suffix.\n    $prefix = substr($string, 0, $length - $size);\n\
    \    return $string . strrev($prefix);\n}\n", "  $string_length = strlen($string);\n\
    \  for ($i = $string_length; $i > 0; $i--) {\n    if (is_palindrome(substr($string,\
    \ 0, $i))) {\n      return substr($string, 0, $i) . strrev(substr($string, $i));\n\
    \    }\n  }\n  return $string;\n}", "  $length = strlen($string);\n  $longest_postfix\
    \ = '';\n  for ($suffix_length = $length; $suffix_length > 0; $suffix_length--)\
    \ {\n    $suffix = substr($string, $length - $suffix_length);\n    if (is_palindrome($suffix))\
    \ {\n      $longest_postfix = $suffix;\n      break;\n    }\n  }\n  $prefix =\
    \ substr($string, 0, $length - strlen($longest_postfix));\n  return $string .\
    \ strrev($prefix);\n}", "  $min_len = strlen($string);\n  if ($min_len < 2) {\n\
    \    return $string;\n  }\n  $max_len = $min_len + 1;\n  // Store prefices in\
    \ a hash map to speed up the search.\n  $prefixes = [];\n  $palindrome_suffix\
    \ = '';\n  $palindrome_suffix_len = 0;\n  $palindrome_len = 0;\n  for ($len =\
    \ $min_len; $len <= $max_len; $len++) {\n    $prefix = substr($string, 0, $len);\n\
    \    $prefixes[$prefix] = $len;\n    if (is_palindrome($prefix)) {\n      $palindrome_suffix\
    \ = $prefix;\n      $palindrome_suffix_len = $len;\n      $palindrome_len = $len;\n\
    \    }\n  }\n  // Shortcut to avoid computation.\n  if ($palindrome_len == $max_len)\
    \ {\n    return $string;\n  }\n  // Check whether remaining part of the string\
    \ could be a palindrome.\n  $remaining_part = substr($string, $palindrome_suffix_len);\n\
    \  for ($len = strlen($remaining_part); $len >= 0; $len--) {\n    $prefix = substr($remaining_part,\
    \ 0, $len);\n    if (isset($prefixes[$prefix])) {\n      if (is_palindrome($prefix))\
    \ {\n        $palindrome_len += $len;\n        break;\n      }\n    }\n  }\n \
    \ // Only if all of the string is a palindrome, return it.\n  if ($palindrome_len\
    \ == $max_len) {\n    return $string;\n  }\n  $prefix = substr($string, 0, $palindrome_len);\n\
    \  return $prefix . strrev(substr($string, $palindrome_len));\n}\n", "  if (empty($string))\
    \ {\n    return $string;\n  }\n  $longest = '';\n  for ($i = strlen($string) -\
    \ 1; $i >= 0; $i--) {\n    $substr = substr($string, $i);\n    if (is_palindrome($substr))\
    \ {\n      $longest = $substr;\n      break;\n    }\n  }\n  return $string . reverse(substr($string,\
    \ 0, strlen($string) - strlen($longest)));\n}\n", "    $prefix = find_palindrome_prefix($string);\n\
    \    $prefix_reverse = strrev(substr($string, 0, strlen($string) - strlen($prefix)));\n\
    \    return $string . $prefix_reverse;\n}\n", "    if (empty($string)) {\n   \
    \     return $string;\n    }\n    $length = strlen($string);\n    $end = $length\
    \ - 1;\n    $begin = 0;\n    while ($begin < $end) {\n        if ($string[$begin]\
    \ !== $string[$end]) {\n            break;\n        }\n        $begin++;\n   \
    \     $end--;\n    }\n    if ($begin >= $end) {\n        return $string;\n   \
    \ }\n    $suffix = substr($string, $begin);\n    $prefix = substr($string, 0,\
    \ $end + 1);\n    return $prefix . strrev($suffix) . $suffix;\n}\n", "    $string_length\
    \ = strlen($string);\n    $palindrome_suffix = '';\n    for ($len = $string_length;\
    \ $len > 0; $len--) {\n        $prefix = substr($string, 0, $len);\n        if\
    \ ($prefix == strrev($prefix)) {\n            $palindrome_suffix = $prefix;\n\
    \            break;\n        }\n    }\n    $string .= strrev(substr($string, 0,\
    \ $string_length - strlen($palindrome_suffix)));\n    return $string;\n}\n", " \
    \   $strLen = strlen($string);\n    if ($strLen === 0) {\n        return $string;\n\
    \    }\n    $longestPalindrome = find_longest_palindrome($string);\n    $prefixLen\
    \ = $strLen - strlen($longestPalindrome);\n    $reverseOfPrefix = strrev(substr($string,\
    \ 0, $prefixLen));\n    return $string . $reverseOfPrefix;\n}\n", "  if (!$string)\
    \ {\n    return $string;\n  }\n  $reverse = strrev($string);\n  // find the longest\
    \ palindromic suffix, then add the reverse of the prefix to it.\n  $longest =\
    \ 0;\n  for ($i = 0; $i < strlen($string); $i++) {\n    if (substr($string, $i)\
    \ == substr($reverse, 0, strlen($string) - $i)) {\n      $longest = strlen($string)\
    \ - $i;\n    }\n  }\n  return $string . substr($reverse, $longest);\n}\n\necho\
    \ make_palindrome(\"\") . PHP_EOL;\necho make_palindrome(\"cat\") . PHP_EOL;\n\
    echo make_palindrome(\"cata\") . PHP_EOL;", "    if (strlen($string) == 0) {\n\
    \        return \"\";\n    }\n\n    $length = strlen($string);\n    $max_palindrome_length\
    \ = 0;\n    $max_palindrome_index = -1;\n    for ($i = 0; $i < $length; $i++)\
    \ {\n        $palindrome_length = 0;\n        $palindrome_index = $i;\n      \
    \  for ($j = 0; $j <= $i; $j++) {\n            if ($string[$i - $j] == $string[$i\
    \ + $j]) {\n                $palindrome_length = 2 * $j + 1;\n               \
    \ $palindrome_index = $i - $j;\n            } else {\n                break;\n\
    \            }\n        }\n        if ($palindrome_length > $max_palindrome_length)\
    \ {\n            $max_palindrome_length = $palindrome_length;\n            $max_palindrome_index\
    \ = $palindrome_index;\n        }\n    }\n\n    for ($i = 0; $i < $length - 1;\
    \ $i++) {\n        $palindrome_length = 0;\n        $palindrome_index = $i;\n\
    \        for ($j = 0; $j <= $i; $j++) {\n            if ($string[$i - $j] == $string[$i\
    \ + 1 + $j]) {\n                $palindrome_length = 2 * $j + 2;\n           \
    \     $palindrome_index = $i - $j;\n            } else {\n                break;\n\
    \            }\n        }\n        if ($palindrome_length > $max_palindrome_length)\
    \ {\n            $max_palindrome_length = $palindrome_length;\n            $max_palindrome_index\
    \ = $palindrome_index;\n        }\n    }\n\n    if ($max_palindrome_length ==\
    \ 0) {\n        return \"\";\n    }\n\n    return substr($string, 0, $max_palindrome_index)\
    \ . $string . strrev(substr($string, 0, $max_palindrome_index));\n}\n\necho make",
  "  // Find the longest palindromic postfix for the supplied string.\n  // TODO:\
    \ implement.\n  return \"\";\n}\n", "  if (strlen($string) < 2) {\n    return\
    \ $string;\n  }\n  // We are taking an input string and iteratively shifting the\
    \ left most character to the right.\n  // At each iteration we check if the input\
    \ string is a palindrome.\n  // If it is, we are removing the first character\
    \ and appending it to the end.\n  // This procedure repeats until we have a palindrome\
    \ and then we just reverse the left over\n  // suffix and concatenate it with\
    \ the original string.\n  $chars = str_split($string);\n  $len = count($chars);\n\
    \  for ($i = 1; $i < $len; $i++) {\n    array_push($chars, array_shift($chars));\n\
    \    if (is_palindrome($chars)) {\n      break;\n    }\n  }\n  return $string\
    \ . strrev(implode($chars));\n}", "    $palindrome = $string;\n    $len = strlen($string);\n\
    \    $offset = 0;\n    $is_palindrome = true;\n    while ($offset < $len) {\n\
    \        $i = 0;\n        while ($i < $len && $string[$i] == $string[$len - $i\
    \ - 1]) {\n            $i++;\n        }\n        if ($i == $len) {\n         \
    \   $is_palindrome = true;\n            break;\n        }\n        $offset++;\n\
    \        $palindrome = $string[$offset] . $palindrome;\n    }\n    if (!$is_palindrome)\
    \ {\n        $palindrome .= strrev(substr($string, 0, $offset));\n    }\n    return\
    \ $palindrome;\n}\n", "    if (empty($string)) {\n        return $string;\n  \
    \  }\n    $len = strlen($string);\n    for ($i = 0; $i < $len; $i++) {\n     \
    \   $suffix = substr($string, -$i - 1);\n        $prefix = substr($string, 0,\
    \ $len - $i - 1);\n        if ($suffix == strrev($suffix)) {\n            return\
    \ $string . strrev($prefix);\n        }\n    }\n}\n\necho make_palindrome(\"cata\"\
    ) . \"\\n\";", "    $length = strlen($string);\n    if ($length === 0) {\n   \
    \     return \"\";\n    }\n    if ($length === 1) {\n        return $string .\
    \ $string;\n    }\n    // Find the longest postfix palindrome.\n    $i = $length\
    \ - 1;\n    while ($i >= 0) {\n        $j = $length - 1;\n        while ($i +\
    \ $j < $length) {\n            if ($string[$i] !== $string[$j]) {\n          \
    \      break;\n            }\n            $i--;\n            $j--;\n        }\n\
    \        if ($i + $j === $length - 1) {\n            break;\n        }\n     \
    \   $i++;\n    }\n    if ($i === -1) {\n        return $string . strrev($string);\n\
    \    }\n    // Append the reverse of the prefix before the palindromic suffix.\n\
    \    return $string . strrev(substr($string, 0, $i));\n}", "  $length = strlen($string);\n\
    \  if ($length <= 1) {\n    return $string;\n  }\n  $array = str_split($string);\n\
    \  $left = 0;\n  $right = $length - 1;\n  while ($left < $right) {\n    if ($array[$left]\
    \ == $array[$right]) {\n      $left++;\n      $right--;\n    } else {\n      $left\
    \ = 0;\n      $right--;\n    }\n  }\n  $prefix = implode(array_slice($array, 0,\
    \ $right + 1));\n  $suffix = implode(array_slice($array, $right + 1));\n  return\
    \ $string . strrev($prefix);\n}", "  $n = strlen($string);\n  if ($n == 0) {\n\
    \    return \"\";\n  }\n\n  $longest = longest_palindrome_suffix($string);\n \
    \ $prepend = substr($string, 0, $n - $longest);\n  $prepend = strrev($prepend);\n\
    \  return $prepend . $string;\n}\n", "    $rev_string = strrev($string);\n   \
    \ $len = strlen($string);\n    for ($i = $len; $i >= 0; $i--) {\n        if (substr($string,\
    \ 0, $i) == substr($rev_string, $len - $i)) {\n            return $string . substr($rev_string,\
    \ 0, $len - $i);\n        }\n    }\n}", "    $suffix = get_longest_palindromic_suffix($string);\n\
    \    $prefix = strrev(substr($string, 0, strlen($string) - strlen($suffix)));\n\
    \    return $string . $prefix;\n}", "    $n = strlen($string);\n    $n_half =\
    \ floor($n / 2);\n    $i = $n - 1;\n    while ($i >= $n_half) {\n        if ($string[$i]\
    \ === $string[$n - $i - 1]) {\n            --$i;\n        } else {\n         \
    \   break;\n        }\n    }\n    $p = $n - $i - 1;\n    return $string . strrev(substr($string,\
    \ 0, $p));\n}\n", "    $palindrome_suffix = find_palindrome_suffix($string);\n\
    \    $palindrome_prefix = strrev(substr($string, 0, - strlen($palindrome_suffix)));\n\
    \    return $string . $palindrome_prefix;\n}\n", "    $string_length = strlen($string);\n\
    \    for ($i = $string_length; $i > 0; $i--) {\n        $first_part = substr($string,\
    \ 0, $i);\n        $second_part = substr($string, $i);\n        if ($first_part\
    \ == strrev($second_part)) {\n            return $string . strrev(substr($string,\
    \ 0, $string_length - $i));\n        }\n    }\n    return $string;\n}", "  for\
    \ ($x = 0; $x < strlen($string); $x++) {\n    $possible_palindrome = substr($string,\
    \ 0, $x + 1);\n    if (substr($possible_palindrome, 0, -1) == strrev(substr($possible_palindrome,\
    \ 1))) {\n      $prefix = substr($string, $x + 1);\n      return $string . strrev($prefix);\n\
    \    }\n  }\n  return $string;\n}\n\nassert(make_palindrome(\"\") == \"\");\n\
    assert(make_palindrome(\"cat\") == \"catac\");\nassert(make_palindrome(\"cata\"\
    ) == \"catac\");\nassert(make_palindrome(\"cact\") == \"cacttcac\");\nassert(make_palindrome(\"\
    cactt\") == \"cactttac\");", "  if (strlen($string) == 0) return \"\";\n  $longest\
    \ = longest_palindrome_suffix($string);\n  return $string . reverse_string(substr($string,\
    \ 0, -strlen($longest)));\n}\n", "    $length = strlen($string);\n    if ($length\
    \ == 0) {\n        return $string;\n    }\n    $max_palindrome_length = 0;\n \
    \   $max_palindrome_position = -1;\n    // Check the whole string suffixes to\
    \ find the longest palindrome.\n    for ($i = 0; $i < $length; $i++) {\n     \
    \   $palindrome_length = is_palindrome($string, $i, $length - 1);\n        if\
    \ ($palindrome_length > $max_palindrome_length) {\n            $max_palindrome_length\
    \ = $palindrome_length;\n            $max_palindrome_position = $i;\n        }\n\
    \    }\n    // Return result string made from the reverse of the string prefix\
    \ and the rest of the string.\n    return substr($string, 0, $max_palindrome_position)\
    \ . strrev(substr($string, 0, $max_palindrome_position)) . substr($string, $max_palindrome_position);\n\
    }", "  $length = strlen($string);\n  $first_half = strrev(substr($string, $length\
    \ / 2));\n  $remainder = $string . $first_half;\n  return $remainder;\n}\n", " \
    \ // Find the length of longest palindromic suffix.\n  $suffix_length = 0;\n \
    \ for ($i = 0; $i < strlen($string); $i++) {\n    $substring = substr($string,\
    \ -1 - $i);\n    if (strrev($substring) == $substring) {\n      $suffix_length\
    \ = $i + 1;\n      break;\n    }\n  }\n  // Add reverse prefix to the end of the\
    \ string.\n  return $string . strrev(substr($string, 0, strlen($string) - $suffix_length));\n\
    }\n", "    if (strlen($string) <= 1) {\n        return $string;\n    }\n\n   \
    \ $postfix = find_longest_palindromic_postfix($string);\n    $prefix = substr($string,\
    \ 0, strlen($string) - strlen($postfix));\n    $prefix = strrev($prefix);\n\n\
    \    return $string . $prefix;\n}\n", "  $stringLength = strlen($string);\n  $lps\
    \ = array_fill(0, $stringLength, 1);\n  $maxLength = 1;\n  $index = 0;\n  $i =\
    \ 1;\n  while ($i < $stringLength) {\n    if ($string[$i] == $string[$i - $lps[$i\
    \ - 1]]) {\n      $lps[$i] = $lps[$i - 1] + 1;\n      if ($lps[$i] > $maxLength)\
    \ {\n        $maxLength = $lps[$i];\n        $index = $i;\n      }\n    }\n  \
    \  $i++;\n  }\n  $suffix = substr($string, $index - $maxLength + 1, $maxLength);\n\
    \  $prefix = substr($string, 0, $index - $maxLength + 1);\n  return $string .\
    \ strrev($prefix);\n}\n", "  $palindrome = \"\";\n  for ($i = 0; $i < strlen($string);\
    \ $i++) {\n    if (is_palindrome(substr($string, $i))) {\n      $palindrome =\
    \ substr($string, 0, $i);\n      break;\n    }\n  }\n  return $string . strrev($palindrome);\n\
    }", "  $new_string = \"\";\n  $len = strlen($string);\n  $max_len = 0;\n  for\
    \ ($i = 0; $i < $len; $i++) {\n    $rev_pos = $len - $i - 1;\n    if ($string[$i]\
    \ == $string[$rev_pos]) {\n      $new_string = $string[$i] . $new_string;\n  \
    \    $max_len++;\n    } else {\n      break;\n    }\n  }\n  $new_string = $string\
    \ . substr($string, 0, $len - $max_len);\n  return $new_string;\n}\n", "  $reverse\
    \ = strrev($string);\n  $mid_str = substr($string, 0, strlen($string) / 2);\n\
    \  $result = [];\n  $result[0] = $string;\n  $result[1] = $reverse;\n  $result[2]\
    \ = $mid_str;\n  $suffix = '';\n  $prefix = '';\n  for ($i = 0; $i < strlen($mid_str);\
    \ $i++) {\n    $suffix = $suffix . $mid_str[$i];\n    $prefix = $mid_str[$i] .\
    \ $prefix;\n    $result[3] = $suffix;\n    $result[4] = $prefix;\n    if ($suffix\
    \ == $prefix) {\n      return $string . strrev(substr($string, 0, strlen($string)\
    \ - strlen($suffix)));\n    }\n  }\n  return \"\";\n}\n\n$string = $argv[1];\n\
    echo make_palindrome($string);", "    $postfix = find_palindromic_postfix($string);\n\
    \    $prefix = substr($string, 0, strlen($string) - strlen($postfix));\n    return\
    \ $string . strrev($prefix);\n}\n", "  // Find the longest palindromic suffix.\n\
    \  $half_len = floor(strlen($string) / 2);\n  $suffix = '';\n  $is_full_palindrome\
    \ = true;\n  for ($i = 0; $i < $half_len; $i++) {\n    if ($string[$i] != $string[strlen($string)\
    \ - 1 - $i]) {\n      $is_full_palindrome = false;\n      break;\n    }\n    $suffix\
    \ = $string[$i] . $suffix;\n  }\n  if ($is_full_palindrome) {\n    return $string;\n\
    \  }\n  $len = strlen($suffix);\n  for ($i = 0; $i < $len; $i++) {\n    $prefix\
    \ .= $suffix[$len - 1 - $i];\n  }\n  return $string . $prefix;\n}\n", "    $s\
    \ = new String($string);\n    return $s->make_palindrome();\n}\n\nclass String\
    \ {\n    function __construct($string) {\n        $this->string = $string;\n \
    \   }\n\n    function make_palindrome() {\n        $len = strlen($this->string);\n\
    \        if ($len === 0) {\n            return $this->string;\n        }\n\n \
    \       $reverse = new String(strrev($this->string));\n        $prefix = $this->string;\n\
    \        while (strlen($prefix) > 0) {\n            $postfix = substr($reverse->string,\
    \ 0, strlen($prefix));\n            if ($prefix === $postfix) {\n            \
    \    break;\n            }\n\n            $prefix = substr($prefix, 0, strlen($prefix)\
    \ - 1);\n        }\n\n        $prefix = new String($prefix);\n        $suffix\
    \ = substr($this->string, strlen($prefix->string));\n        $result = new String($this->string\
    \ . $prefix->reverse()->string . $suffix);\n        return $result->string;\n\
    \    }\n\n    function reverse() {\n        $rev = strrev($this->string);\n  \
    \      return new String($rev);\n    }\n}\n\necho make_palindrome(\"\") . \"\\\
    n\";\necho make_palindrome(\"cat\") . \"\\n\";\necho make_palindrome(\"cata\"\
    ) . \"\\n\";", "    $prefix = \"\";\n    $suffix = \"\";\n    $suffix_length =\
    \ strlen($string);\n    $min_suffix_length = 0;\n    $prefix_char = 0;\n    while\
    \ ($suffix_length >= $min_suffix_length) {\n        $suffix = substr($string,\
    \ $suffix_length * -1);\n        if (is_palindrome($suffix)) {\n            $prefix_char\
    \ = $suffix_length * -1 - 1;\n            if ($prefix_char < 0) {\n          \
    \      $prefix_char = 0;\n            }\n            $prefix = substr($string,\
    \ 0, $prefix_char + 1);\n            $prefix = strrev($prefix);\n            break;\n\
    \        }\n        $suffix_length--;\n    }\n    return $string . $prefix;\n\
    }\n", "  $longest_palindrome = find_longest_palindrome($string);\n  return $string\
    \ . strrev(substr($string, 0, strlen($string) - strlen($longest_palindrome)));\n\
    }\n", "    for ($i = 0; $i < strlen($string); $i++) {\n        if (is_palindrome(substr($string,\
    \ $i))) {\n            $suffix = substr($string, $i);\n            $prefix = substr($string,\
    \ 0, $i);\n            return $string . strrev($prefix);\n        }\n    }\n \
    \   return $string;\n}\n", "  $length = strlen($string);\n  $len = $length;\n\
    \  for ($i = 0; $i < $length - 1; $i++) {\n    if (is_palindrome($string, $i +\
    \ 1)) {\n      $len = $i + 1;\n      break;\n    }\n  }\n  $suffix = substr($string,\
    \ $len);\n  $prefix = strrev($suffix);\n  return $string . $prefix;\n}\n", " \
    \   if (empty($string)) {\n        return $string;\n    }\n    $result = '';\n\
    \    $length = strlen($string);\n    for ($i = $length - 1; $i >= 0; $i--) {\n\
    \        $result .= $string[$i];\n    }\n    $prefix = substr($string, 0, $length\
    \ - 1);\n    $suffix = substr($string, $length - 1);\n    while ($prefix !== \"\
    \" && strpos($suffix, $prefix) !== 0) {\n        $prefix = substr($prefix, 0,\
    \ strlen($prefix) - 1);\n        $suffix = substr($suffix, 1);\n    }\n    $result\
    \ .= $prefix;\n    return $result;\n}\n", "    // This is a very simple algorithm.\n\
    \    // Search the whole string for the longest suffix that is a palindrome.\n\
    \    // Append reverse of the prefix that is not a palindrome.\n    // This function\
    \ was written to emphasize recursive algorithm.\n    // Without recursion it is\
    \ more elegant and efficient.\n    // This algorithm doesn't work for strings\
    \ of size larger than 7.\n    // Recursion depth of 7 is already too large for\
    \ my PHP (5.5.12).\n    // It works for strings up to a length of 4 (less than\
    \ 7).\n    // If you increase the value of limit below PHP will complain about\
    \ the recursion depth.\n    // Strings of length 5 and above will overflow the\
    \ stack.\n    $limit = 7;\n    //if ($limit == 0) {\n    //    // Uncommenting\
    \ this line makes the algorithm work for strings of length up to 7.\n    //  \
    \  // It doesn't make much sense to have it commented.\n    //    // This function\
    \ isn't a palindrome finder.\n    //    // It is a function that finds the shortest\
    \ palindrome that begins with supplied string.\n    //    // If the string is\
    \ already a palindrome it will leave it alone.\n    //    if (is_palindrome($string))\
    \ {\n    //        return $string;\n    //    }\n    //}\n    $limit--;\n    //\
    \ Find the longest postfix that is a palindrome.\n    $length = strlen($string);\n\
    \    $prefix = substr($string, 0, $length - 1);\n    $postfix = substr($string,\
    \ $length - 1);\n    // Recursively find the longest postfix that is a palindrome.\n\
    \    $postfix = make_palindrome($postfix);\n    // If the postfix is shorter than\
    \ the prefix, no palindrome was found.\n    if (strlen($postfix) > strlen($prefix))\
    \ {\n        return $postfix . strrev($prefix);\n    }\n    // Otherwise append\
    \ the reverse of the prefix that is not a palindrome.\n    return $string . strrev($prefix);\n\
    }", "  $length = strlen($string);\n  $candidate = $length;\n  while (1) {\n  \
    \  $candidate = $candidate - 1;\n    if (is_palindrome($string, $candidate)) {\n\
    \      break;\n    }\n  }\n  return $string . strrev(substr($string, 0, $length\
    \ - $candidate));\n}\n", "    $n = strlen($string);\n    $first = $string[0];\n\
    \    $found = false;\n    for ($i = $n; $i > 0; $i--) {\n        if ($string[$i]\
    \ == $first) {\n            $suffix = substr($string, 0, $i);\n            if\
    \ (is_palindrome($suffix)) {\n                $prefix = substr($string, $i, $n\
    \ - $i);\n                $found = true;\n                break;\n           \
    \ }\n        }\n    }\n    if ($found) {\n        return $string . strrev($prefix);\n\
    \    } else {\n        return $string . strrev($string);\n    }\n}\n", "    $str_len\
    \ = strlen($string);\n    for ($i = 0; $i < $str_len; $i++) {\n        $end =\
    \ $str_len - $i;\n        $end_str = substr($string, $end);\n        $beg_str\
    \ = substr($string, 0, $end);\n        if ($end_str == strrev($beg_str)) {\n \
    \           return $string . strrev(substr($string, 0, $end));\n        }\n  \
    \  }\n    return '';\n}", "    // Find longest palindromic suffix.\n    for ($i\
    \ = strlen($string); $i > 0; $i--) {\n        $suffix = substr($string, $i);\n\
    \        if (is_palindrome($suffix)) {\n            break;\n        }\n    }\n\
    \    // Reverse string prefix and append it to the end of the string.\n    $prefix\
    \ = substr($string, 0, $i);\n    $prefix = strrev($prefix);\n    return $string\
    \ . $prefix;\n}", "    $len = strlen($string);\n    for ($i = $len - 1; $i >=\
    \ 0; $i--) {\n        if (is_palindrome(substr($string, $i))) {\n            $first_part\
    \ = substr($string, 0, $i);\n            $second_part = strrev($first_part);\n\
    \            return $string . $second_part;\n        }\n    }\n    return \"\"\
    ;\n}\n", "    $string = (string)$string;\n    if (strlen($string) <= 1) {\n  \
    \      return $string;\n    }\n    $longest_palindrome_suffix = $string;\n   \
    \ for ($i = strlen($string); $i > 0; $i--) {\n        $suffix = substr($string,\
    \ -$i);\n        if (is_palindrome($suffix)) {\n            $longest_palindrome_suffix\
    \ = $suffix;\n            break;\n        }\n    }\n    $prefix = substr($string,\
    \ 0, strlen($string) - strlen($longest_palindrome_suffix));\n    return $string\
    \ . strrev($prefix);\n}\n", "    $suffix = longest_palindromic_suffix($string);\n\
    \    $prefix = substr($string, 0, strlen($string) - strlen($suffix));\n    return\
    \ $string . strrev($prefix);\n}\n", "    $length = strlen($string);\n    $rev\
    \ = strrev($string);\n    $palindrome = false;\n    for ($j = $length - 1; $j\
    \ >= 0; $j--) {\n        for ($i = 0; $i <= $j; $i++) {\n            if ($string[$i]\
    \ == $rev[$j - $i]) {\n                $palindrome = true;\n            } else\
    \ {\n                $palindrome = false;\n                break;\n          \
    \  }\n        }\n        if ($palindrome) {\n            break;\n        }\n \
    \   }\n    $postfix = substr($string, 0, $i);\n    return $string . strrev($postfix);\n\
    }\necho make_palindrome(\"cat\") . \"\\n\";\necho make_palindrome(\"cata\") .\
    \ \"\\n\";\necho make_palindrome(\"\") . \"\\n\";\n", "    $palindrome_suffix\
    \ = lps($string);\n    return $string . reverse(substr($string, 0, strlen($string)\
    \ - strlen($palindrome_suffix)));\n}\n", "    $palindrome = $string;\n    $suffix\
    \ = ''.$string;\n    while (strlen($suffix) > 0) {\n        if (is_palindrome($suffix))\
    \ {\n            $palindrome .= strrev(substr($string, 0, -strlen($suffix)));\n\
    \            break;\n        }\n        $suffix = substr($suffix, 1);\n    }\n\
    \    return $palindrome;\n}\n", "  $l = strlen($string);\n  $i = $l;\n  while\
    \ ($i > 0) {\n    $i--;\n    if (is_palindrome(substr($string, $i))) {\n     \
    \ $prefix = substr($string, 0, $i);\n      $postfix = strrev($prefix);\n     \
    \ return $string . $postfix;\n    }\n  }\n  return $string;\n}\n", "  $s = $string;\n\
    \  $s_len = strlen($s);\n  for ($i = $s_len - 1; $i >= 0; $i--) {\n    if (is_palindrome(substr($s,\
    \ $i))) {\n      return $s . substr(strrev($s), 0, $s_len - $i);\n    }\n  }\n\
    \  return $s;\n}\n", "    $first_postfix = first_postfix_palindrome($string);\n\
    \    return $string . reverse(substr($string, 0, strlen($string) - strlen($first_postfix)));\n\
    }\n", "  $length = strlen($string);\n  if($length <= 1) {\n    return $string;\n\
    \  }\n  $j = $length - 1;\n  while(!($string[0] == $string[$j] && is_palindrome(substr($string,\
    \ 0, $j)))) {\n    $j--;\n  }\n  return $string . substr(strrev($string), $length\
    \ - $j);\n}\n", "    $left = 0;\n    $right = strlen($string) - 1;\n    while\
    \ ($left < $right) {\n        if ($string[$left] == $string[$right]) {\n     \
    \       $left++;\n            $right--;\n        } else {\n            $left =\
    \ 0;\n            $right--;\n        }\n    }\n    return $string . strrev(substr($string,\
    \ 0, $right + 1));\n}\n\necho make_palindrome(\"\");\necho PHP_EOL;\necho make_palindrome(\"\
    cat\");\necho PHP_EOL;\necho make_palindrome(\"cata\");\necho PHP_EOL;", "   \
    \ $longest_palindrome = find_longest_palindrome($string);\n    $prefix = substr($string,\
    \ 0, strlen($string) - strlen($longest_palindrome));\n    return $string . strrev($prefix);\n\
    }\n", "    $max_postfix_len = 0;\n    for ($i = 0; $i < strlen($string); $i++)\
    \ {\n        $prefix = substr($string, 0, $i);\n        $postfix = substr($string,\
    \ $i);\n        if (is_palindrome($postfix)) {\n            $max_postfix_len =\
    \ strlen($postfix);\n        }\n    }\n    $prefix = substr($string, 0, strlen($string)\
    \ - $max_postfix_len);\n    $prefix_reverse = strrev($prefix);\n    return $string\
    \ . $prefix_reverse;\n}\n", "    $palindrome_suffix = find_longest_palindrome_suffix($string);\n\
    \    $palindrome_prefix = strrev(substr($string, 0, strlen($string) - strlen($palindrome_suffix)));\n\
    \    return $string . $palindrome_prefix;\n}\n", "  if (is_palindrome($string))\
    \ return $string;\n  for ($i = 0; $i < strlen($string); $i++) {\n    $p = substr($string,\
    \ $i);\n    if (is_palindrome($p)) {\n      $q = substr($string, 0, $i);\n   \
    \   return $string . strrev($q);\n    }\n  }\n}\n", "  $len = strlen($string);\n\
    \  $is_palindrome = function($i, $j) use ($string) {\n    $len = strlen($string);\n\
    \    while ($i < $j) {\n      if ($string[$i] != $string[$j]) {\n        return\
    \ false;\n      }\n      $i++;\n      $j--;\n    }\n    return true;\n  };\n \
    \ $max_palindrome_len = 0;\n  $palindrome_start = 0;\n  for ($i = 0; $i < $len;\
    \ $i++) {\n    for ($j = $len - 1; $j >= $i; $j--) {\n      if ($is_palindrome($i,\
    \ $j)) {\n        $cur_palindrome_len = $j - $i + 1;\n        if ($cur_palindrome_len\
    \ > $max_palindrome_len) {\n          $max_palindrome_len = $cur_palindrome_len;\n\
    \          $palindrome_start = $i;\n        }\n        break;\n      }\n    }\n\
    \  }\n  $result = substr($string, 0, $palindrome_start);\n  for ($i = $len - 1;\
    \ $i >= $palindrome_start; $i--) {\n    $result .= $string[$i];\n  }\n  return\
    \ $result;\n}\necho make_palindrome(\"cat\");\necho \"\\n\";\necho make_palindrome(\"\
    cata\");\necho \"\\n\";\necho make_palindrome(\"\");\necho \"\\n\";\necho make_palindrome(\"\
    XYZAXYZ\");\necho \"\\n\";", "    // Find longest postfix that is a palindrome.\n\
    \    $s = $string;\n    $last_s = null;\n    $len = strlen($s);\n    $max_len\
    \ = 0;\n    $pos = 0;\n    while ($s !== $last_s) {\n        $last_s = $s;\n \
    \       $s = substr($s, 0, $len - 1);\n        if ($s === $last_s) break;\n  \
    \      if (is_palindrome($s)) {\n            $max_len = $len - 1;\n          \
    \  $pos = strlen($string) - $len + 1;\n        }\n        $len--;\n    }\n   \
    \ // Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n    $prefix = substr($string, 0, $pos);\n    $postfix\
    \ = substr($string, $pos, $max_len);\n    return $prefix . $postfix . strrev($prefix);\n\
    }\n\n$tests = [\n    '',\n    'cat',\n    'cata',\n    'abccba',\n    'abcba',\n\
    \    'abc',\n    'abcd',\n    'abcde',\n    'abcdef',\n    'abcdefg',\n    'abcdefgh',\n\
    \    'abcdefghi',\n    'abcdefghij',\n    'abcdabcdabcd',\n    'abcdabcdabcdabcd',\n\
    \    'abcdabcdabcdabcdabcd',\n    'abcdabcdabcdabcdabcdabcd',\n    'abcdabcdabcdabcdabcdabcdabcd',\n\
    \    'abcdabcdabcdabcdabcdabcdabcdabcd',\n    'abcdabcdabcdabcdabcdabcdabcdabcdabcd',\n\
    \    'abcdabcdabcdabcdabcdabcdabcdabcdabcdabcd',\n    'abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcd',\n\
    \    'abcdabcdabcdabcdabcdabcdabcdabcdabcdabcdabcdab", "  // Our approach is to\
    \ find the longest postfix palindrome and append the reverse of the prefix that\
    \ comes before it.\n  // First, we will make the string palindromic by appending\
    \ to it reverse of the first half of the string.\n  // Making it palindromic ensures\
    \ that when we start comparing the tail of the string to its head, we will never\n\
    \  // run into the case where the tail string is longer than its head. Otherwise,\
    \ if we attempted to find\n  // the longest postfix palindrome without making\
    \ the string palindromic, we would run into the following cases:\n  // - tail\
    \ of the string is longer than its head (will always fail)\n  // - tail of the\
    \ string is the same length as its head (will always be a palindrome)\n  // -\
    \ tail of the string is shorter than its head (could be palindrome or could not)\n\
    \  $length = strlen($string);\n  $palindromic_string = $string . strrev(substr($string,\
    \ 0, ($length / 2)));\n  $string_length = strlen($palindromic_string);\n  // Now\
    \ we will find the longest postfix palindrome.\n  // We will iterate through the\
    \ indices of the string, which are the heads of tail strings,\n  // and try to\
    \ find the longest common postfix between the tail string and the head string.\n\
    \  // If the longest common postfix is longer than our previous longest common\
    \ postfix,\n  // update the current longest common postfix.\n  $longest_common_postfix\
    \ = \"\";\n  for ($i = 0; $i < $string_length; $i++) {\n    $head_string = substr($palindromic_string,\
    \ 0, $i);\n    $tail_string = substr($palindromic_string, $i);\n    $longest_common_postfix\
    \ = find_longest_common_postfix($tail_string, $head_string);\n    if (strlen($longest_common_postfix)\
    \ === strlen($head_string)) {\n      break;\n    }\n  }\n  // The longest common\
    \ postfix is now the longest postfix palindrome of the string.\n  // So the shortest\
    \ palindrome that starts with", "    // Find the longest palindromic substring\
    \ of a given string.\n    function longest_palindrome($string) {\n        $palindrome\
    \ = \"\";\n        // Iterate over all possible center positions of a palindrome.\n\
    \        for ($center = 0; $center < strlen($string); $center++) {\n         \
    \   // Expand both left and right from the center position.\n            for ($left\
    \ = $center, $right = $center; $left >= 0 && $right < strlen($string); $left--,\
    \ $right++) {\n                // No need to expand from the left side more than\
    \ once in case of an odd palindrome.\n                if ($left < $center && $left\
    \ == $right - 1) {\n                    break;\n                }\n          \
    \      // If string between left and right is a palindrome, then update the longest\
    \ palindrome found so far.\n                if ($string[$left] == $string[$right])\
    \ {\n                    $palindrome = max($palindrome, substr($string, $left,\
    \ $right - $left + 1));\n                } else {\n                    break;\n\
    \                }\n            }\n        }\n        return $palindrome;\n  \
    \  }\n    // Find the longest palindromic suffix of a given string.\n    function\
    \ longest_palindromic_suffix($string) {\n        // Iterate over all possible\
    \ center positions of a palindrome.\n        for ($center = 0; $center < strlen($string);\
    \ $center++) {\n            // Expand left from the center position.\n       \
    \     for ($left = $center; $left >= 0; $left--) {\n                // If string\
    \ between left and right is a palindrome, then return the found suffix.\n    \
    \            if ($string[$left] == $string[$center]) {\n                    $suffix\
    \ = substr($string, $left, $center - $left + 1);\n                    if ($suffix\
    \ == strrev($suffix)) {\n                        return $suffix;\n           \
    \         }\n                } else {\n                    break;\n          \
    \      }\n            }\n        }\n        return \"\";\n    }\n    $palindrome\
    \ = longest_palindrome($string);\n    $suffix = longest_palindromic_suffix($string);\n\
    \   ", "    $prefix = str_split($string);\n    $prefix_reverse = array_reverse($prefix);\n\
    \    $suffix = array();\n    for ($i = count($prefix) - 1; $i >= 0; $i--) {\n\
    \        $suffix[] = $prefix[$i];\n        if ($prefix == array_slice($prefix_reverse,\
    \ 0, count($prefix) - $i)) {\n            return $string . implode(\"\", array_slice($prefix_reverse,\
    \ count($prefix) - $i));\n        }\n    }\n}\n\necho make_palindrome(\"\") .\
    \ \"\\n\";\necho make_palindrome(\"cat\") . \"\\n\";\necho make_palindrome(\"\
    cata\") . \"\\n\";", "  if (strlen($string) == 0) return $string;\n  $len = strlen($string);\n\
    \  $pal_len = 0;\n  for ($i = $len; $i > 0; $i--) {\n    if (substr($string, 0,\
    \ $i) == strrev(substr($string, $len - $i))) {\n      $pal_len = $i;\n      break;\n\
    \    }\n  }\n  return $string . strrev(substr($string, 0, $len - $pal_len));\n\
    }\n\necho make_palindrome('') . \"\\n\";\necho make_palindrome('cat') . \"\\n\"\
    ;\necho make_palindrome('cata') . \"\\n\";", "  $reverse = strrev($string);\n\
    \  $pos_of_palindrome = strrpos($string, $reverse);\n  if ($pos_of_palindrome\
    \ === false) {\n    $pos_of_palindrome = strlen($string);\n  }\n  $string_prefix\
    \ = substr($string, 0, $pos_of_palindrome);\n  $string_suffix = substr($string,\
    \ $pos_of_palindrome);\n  return $string_suffix . strrev($string_prefix);\n}\n",
  "    $string_length = strlen($string);\n    for ($i = $string_length; $i > 0; $i--)\
    \ {\n        $suffix = substr($string, $string_length - $i);\n        if (is_palindrome($suffix))\
    \ {\n            $prefix = substr($string, 0, $string_length - $i);\n        \
    \    return $string . strrev($prefix);\n        }\n    }\n    return $string;\n\
    }", "  $n = strlen($string);\n  $i = 0;\n  $j = $n - 1;\n  $result = \"\";\n \
    \ while ($i < $j) {\n    if ($string[$i] === $string[$j]) {\n      $i++;\n   \
    \   $j--;\n    } else {\n      $i = 0;\n      $j--;\n      $result = $string[$j];\n\
    \    }\n  }\n  return $string . strrev($result);\n}\n\necho make_palindrome(\"\
    \") . \"\\n\";\necho make_palindrome(\"cat\") . \"\\n\";\necho make_palindrome(\"\
    cata\") . \"\\n\";", "    $max_length = strlen($string);\n    $palindrome_length\
    \ = 0;\n    // Find the longest postfix of supplied string that is a palindrome.\n\
    \    for ($i = 1; $i <= $max_length; $i++) {\n        if (palindrome_detect(substr($string,\
    \ $max_length - $i))) {\n            $palindrome_length = $i;\n            break;\n\
    \        }\n    }\n    // Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    return $string . strrev(substr($string,\
    \ 0, $max_length - $palindrome_length));\n}\n", "    $max_prefix_len = 0;\n  \
    \  for ($i = strlen($string) - 1; $i >= 0; $i--) {\n        if (substr($string,\
    \ 0, $i) == strrev(substr($string, $i))) {\n            $max_prefix_len = $i;\n\
    \            break;\n        }\n    }\n    return $string . strrev(substr($string,\
    \ 0, strlen($string) - $max_prefix_len));\n}\n", "  $pali = palindrome_suffix($string);\n\
    \  return substr($string, 0, strlen($string) - strlen($pali)) . $pali . strrev(substr($string,\
    \ 0, strlen($string) - strlen($pali)));\n}\n", "  $n = strlen($string);\n  $length\
    \ = 0;\n  $best_start = 0;\n  for ($i = $n - 1; $i >= 0; $i--) {\n    if ($string[$i]\
    \ == $string[$length]) {\n      $length++;\n      $best_start = $i;\n    }\n \
    \ }\n  return substr($string, 0, $best_start) . strrev(substr($string, $best_start,\
    \ $n - $best_start)) . substr($string, $best_start);\n}\n", "    $length = strlen($string);\n\
    \    $pals = array();\n    for ($i = $length; $i > 0; $i--) {\n        $substring\
    \ = substr($string, 0, $i);\n        if ($substring == strrev($substring)) {\n\
    \            $pals[] = $substring;\n        }\n    }\n    return $string . strrev(substr($string,\
    \ 0, $length - strlen(max($pals))));\n}\n\necho make_palindrome(\"cat\");", " \
    \ $length = strlen($string);\n  if ($length == 0) return \"\";\n  $longest_palindrome_start\
    \ = 0;\n  $longest_palindrome_length = 0;\n  for ($i = 0; $i < $length; $i++)\
    \ {\n    // Even palindrome check\n    if ($i > 0 && $string[$i] == $string[$i\
    \ - 1]) {\n      $palindrome_start = $i - 1;\n      $palindrome_length = 2;\n\
    \      $offset = 1;\n      while ($palindrome_start - $offset >= 0 && $i + $offset\
    \ < $length) {\n        if ($string[$palindrome_start - $offset] != $string[$i\
    \ + $offset]) break;\n        $palindrome_start--;\n        $palindrome_length\
    \ += 2;\n        $offset++;\n      }\n      if ($palindrome_length > $longest_palindrome_length)\
    \ {\n        $longest_palindrome_start = $palindrome_start;\n        $longest_palindrome_length\
    \ = $palindrome_length;\n      }\n    }\n    // Odd palindrome check\n    if ($i\
    \ > 0 && $i < $length - 1 && $string[$i - 1] == $string[$i + 1]) {\n      $palindrome_start\
    \ = $i - 1;\n      $palindrome_length = 3;\n      $offset = 1;\n      while ($palindrome_start\
    \ - $offset >= 0 && $i + $offset + 1 < $length) {\n        if ($string[$palindrome_start\
    \ - $offset] != $string[$i + $offset + 1]) break;\n        $palindrome_start--;\n\
    \        $palindrome_length += 2;\n        $offset++;\n      }\n      if ($palindrome_length\
    \ > $longest_palindrome_length) {\n        $longest_palindrome_start = $palindrome_start;\n\
    \        $longest_palindrome_length = $palindrome_length;\n      }\n    }\n  }\n\
    \  $prefix = substr", "    // Trivial case.\n    if (strlen($string) == 0) return\
    \ $string;\n    // Find the longest postfix that is a palindrome.\n    $last_index\
    \ = strlen($string) - 1;\n    $pre_suffix_index = 0;\n    for ($i = $last_index;\
    \ $i >= 0; $i--) {\n        if ($string[$i] == $string[$last_index - $i]) {\n\
    \            $pre_suffix_index = $i;\n        } else {\n            break;\n \
    \       }\n    }\n    // Find the prefix to be reversed and appended to the end\
    \ of the string.\n    $prefix = substr($string, 0, $pre_suffix_index);\n    $postfix\
    \ = strrev($prefix);\n    return $string . $postfix;\n}\n", "  $rev_string = strrev($string);\n\
    \  $result = \"\";\n  $is_palindrome = false;\n  for ($i = 0; $i < strlen($string);\
    \ $i++) {\n    if (substr($string, $i) == substr($rev_string, 0, strlen($string)\
    \ - $i)) {\n      $result = $string . substr($rev_string, strlen($string) - $i);\n\
    \      $is_palindrome = true;\n      break;\n    }\n  }\n  if (!$is_palindrome)\
    \ {\n    $result = $string . $rev_string;\n  }\n  return $result;\n}\n$fp = fopen(\"\
    php://stdin\", \"r\");\nfscanf($fp, \"%d\", $tests);\nfor ($test = 0; $test <\
    \ $tests; $test++) {\n  fscanf($fp, \"%s\", $string);\n  echo make_palindrome($string)\
    \ . \"\\n\";\n}", "    $longest_palindrome = get_longest_palindrome($string);\n\
    \    $reverse_prefix = array_reverse(str_split(get_prefix($string, $longest_palindrome)));\n\
    \    return $string . implode(\"\", $reverse_prefix);\n}\n", "    $length = strlen($string);\n\
    \    $suffix = longest_suffix_palindrome($string);\n    return substr($string,\
    \ 0, $length - strlen($suffix)) . strrev($suffix) . $suffix;\n}\n", "    if ($string\
    \ == \"\") {\n        return \"\";\n    }\n    $longest_palindrome_suffix = longest_palindrome_suffix($string);\n\
    \    $reverse_prefix = strrev(substr($string, 0, -strlen($longest_palindrome_suffix)));\n\
    \    return $string . $reverse_prefix;\n}\n", "  $string = (string) $string;\n\
    \  if ($string === \"\") {\n    return \"\";\n  }\n\n  $string_length = strlen($string);\n\
    \  for ($i = $string_length; $i > 0; $i--) {\n    $substring = substr($string,\
    \ 0, $i);\n    if ($substring === strrev($substring)) {\n      return $string\
    \ . strrev(substr($string, 0, $string_length - $i));\n    }\n  }\n}", "  $n =\
    \ strlen($string);\n  $i = 0;\n  while($i < $n) {\n    if($n - $i > 1 && substr($string,\
    \ $i, 2) == substr($string, $n - 2, 2)) {\n      $i++;\n    } else if($n - $i\
    \ > 0 && substr($string, $i, 1) == substr($string, $n - 1, 1)) {\n      $i++;\n\
    \    } else {\n      break;\n    }\n  }\n  $rev = strrev(substr($string, 0, $i));\n\
    \  return $string . $rev;\n}\n", "  $flip_string = strrev($string);\n  $longest_palindrome\
    \ = '';\n  for ($i = 0; $i < strlen($string); $i++) {\n    if (substr($string,\
    \ 0, $i) == substr($flip_string, 0, $i)) {\n      $longest_palindrome = substr($string,\
    \ 0, $i);\n    }\n  }\n  $remaining_string = substr($string, strlen($longest_palindrome));\n\
    \  return $string . strrev($remaining_string);\n}\n\necho \"-- Testing make_palindrome\\\
    n\";\nassert(make_palindrome(\"\") == \"\");\nassert(make_palindrome(\"cat\")\
    \ == \"catac\");\nassert(make_palindrome(\"cata\") == \"catac\");\necho \"OK\\\
    n\";\n", "    $length = strlen($string);\n    $k = 1;\n    while ($k <= $length)\
    \ {\n        if (is_palindrome(substr($string, $length - $k))) {\n           \
    \ return $string . strrev(substr($string, 0, $length - $k));\n        }\n    \
    \    $k++;\n    }\n    return null;\n}\n", "    // Find the longest postfix of\
    \ supplied string that is a palindrome.\n    $max_length = strlen($string);\n\
    \    while ($max_length >= 0) {\n        $postfix = substr($string, -$max_length);\n\
    \        $prefix = substr($string, 0, $max_length);\n        if ($postfix == strrev($postfix))\
    \ break;\n        $max_length--;\n    }\n    if ($max_length == 0) return $string;\n\
    \n    // Append to the end of the string reverse of a string prefix that comes\
    \ before the palindromic suffix.\n    $result = $string . strrev(substr($string,\
    \ 0, strlen($string) - $max_length));\n    return $result;\n}\n", "    $reverse\
    \ = strrev($string);\n    $s = substr($string, 1) . substr($reverse, 0, -1);\n\
    \    $m = substr($string, 0, -1) . substr($reverse, 1);\n    $found = substr($s,\
    \ 0, strpos($s, $reverse));\n    if (strlen($found) >= strlen($m)) {\n       \
    \ return $string . strrev($found);\n    } else {\n        return $string . strrev($m);\n\
    \    }\n}\n", "    $string_len = strlen($string);\n    for ($i = 0; $i < $string_len;\
    \ $i++) {\n        if (substr($string, 0, $string_len - $i) == strrev(substr($string,\
    \ $i))) {\n            return $string . strrev(substr($string, 0, $string_len\
    \ - $i));\n        }\n    }\n    return false;\n}\n", "  $reversed = strrev($string);\n\
    \  if (strlen($string) == 0) {\n    return \"\";\n  }\n  $i = 1;\n  while (!ends_with($string,\
    \ $reversed, $i)) {\n    $i++;\n  }\n  $prefix = substr($string, 0, $i);\n  return\
    \ $string . strrev($prefix);\n}\n", "    $lps = lps($string);\n    $prefix = substr($string,\
    \ 0, strlen($string) - $lps);\n    return $string . strrev($prefix);\n}\n", " \
    \   if (strlen($string) == 0) {\n        return $string;\n    }\n    $lps = longest_palindromic_suffix($string);\n\
    \    $prefix = substr($string, 0, strlen($string) - strlen($lps));\n    return\
    \ $string . strrev($prefix);\n}\n", "    $len = strlen($string);\n    for ($pos\
    \ = $len; $pos >= 0; $pos--) {\n        if (is_palindrome(substr($string, $pos)))\
    \ {\n            break;\n        }\n    }\n    return substr($string, 0, $pos)\
    \ . strrev(substr($string, 0, $len - $pos));\n}\n", "  if ($string == \"\") {\n\
    \    return \"\";\n  }\n  $suffix = get_palindromic_suffix($string);\n  $prefix\
    \ = strrev(substr($string, 0, strlen($string) - strlen($suffix)));\n  return $string\
    \ . $prefix;\n}\n", "    $n = strlen($string);\n    $suffix = \"\";\n    for ($i\
    \ = 0; $i < $n; $i++) {\n        $suffix = $string[$i] . $suffix;\n        if\
    \ (is_palindrome($suffix)) break;\n    }\n    return $string . substr($suffix,\
    \ 0, $n - strlen($suffix));\n}\n", "  $palindrome = $string;\n  $non_palindrome_prefix\
    \ = get_non_palindrome_prefix($string);\n  $palindrome_suffix = substr($string,\
    \ strlen($non_palindrome_prefix));\n  $palindrome .= strrev(substr($string, 0,\
    \ strlen($non_palindrome_prefix)));\n  return $palindrome;\n}\n", "    $length\
    \ = strlen($string);\n    if ($length === 0) {\n        return \"\";\n    }\n\n\
    \    $prefix = 1;\n    $suffix = 1;\n    for ($i = 0; $i < $length - 1; $i++)\
    \ {\n        // The length of the longest palindromic suffix.\n        $suffix\
    \ = $i + 1;\n        // The length of the longest palindromic prefix.\n      \
    \  $prefix = $length - $i - 1;\n        if ($string[$i] !== $string[$length -\
    \ $i - 1]) {\n            break;\n        }\n    }\n\n    // Append the reverse\
    \ of the prefix that comes before the palindromic suffix.\n    return substr($string,\
    \ 0, $prefix) . strrev(substr($string, $suffix));\n}\n", "  $reverse = strrev($string);\n\
    \  $prefix = '';\n  for ($i = strlen($string) - 1; $i >= 0; $i--) {\n    if (substr($string,\
    \ 0, $i) == substr($reverse, strlen($string) - $i)) {\n      $prefix = substr($string,\
    \ 0, $i);\n      break;\n    }\n  }\n  $postfix = strrev($prefix);\n  return $string\
    \ . $postfix;\n}\n", "    $length = strlen($string);\n    if ($length == 0) {\n\
    \        return $string;\n    }\n    for ($i = $length; $i > 0; $i--) {\n    \
    \    if (is_palindrome(substr($string, $length - $i))) {\n            return $string\
    \ . strrev(substr($string, 0, $length - $i));\n        }\n    }\n}\n", "    //\
    \ Longest palindromic postfix.\n    $postfix = longest_palindromic_postfix($string);\n\
    \    // Add to the end the reverse of a prefix that comes before the postfix.\n\
    \    return $string . reverse(substr($string, 0, strlen($string) - strlen($postfix)));\n\
    }\n", "  if ($string == \"\") {\n    return \"\";\n  }\n  // Find the longest\
    \ palindromic suffix.\n  $longest_palindromic_suffix = \"\";\n  for ($i = 1; $i\
    \ <= strlen($string); $i++) {\n    $palindromic_suffix = substr($string, strlen($string)\
    \ - $i);\n    if (is_palindrome($palindromic_suffix)) {\n      $longest_palindromic_suffix\
    \ = $palindromic_suffix;\n      break;\n    }\n  }\n  $palindromic_prefix = substr($string,\
    \ 0, strlen($string) - strlen($longest_palindromic_suffix));\n  $reverse_palindromic_prefix\
    \ = strrev($palindromic_prefix);\n  return $string . $reverse_palindromic_prefix;\n\
    }\n", "    // no need to append if string is empty\n    if (strlen($string) ==\
    \ 0) {\n        return $string;\n    }\n    // find the longest palindromic postfix\n\
    \    $postfix = find_longest_palindromic_postfix($string);\n    // reverse a prefix\
    \ that comes before the postfix and append it to the end of the string\n    $prefix\
    \ = strrev(substr($string, 0, strlen($string) - strlen($postfix)));\n    return\
    \ $string . $prefix;\n}\n", "    $string_length = strlen($string);\n    $string_half_length\
    \ = (int) ($string_length / 2);\n    // Find the longest postfix of supplied string\
    \ that is a palindrome.\n    $palindrome_start = -1;\n    $palindrome_length =\
    \ 0;\n    $current_postfix_length = 0;\n    $i = $string_length - 1;\n    while\
    \ ($i >= 0) {\n        $j = $i;\n        $k = $string_length - 1;\n        $current_postfix_length\
    \ = 0;\n        while ($j >= 0 && $k >= 0 && $string[$j] == $string[$k]) {\n \
    \           $current_postfix_length++;\n            $j--;\n            $k--;\n\
    \        }\n        if ($current_postfix_length > $palindrome_length) {\n    \
    \        $palindrome_start = $j;\n            $palindrome_length = $current_postfix_length;\n\
    \        }\n        $i--;\n    }\n    // If the supplied string is a palindrome\
    \ itself - return it.\n    if ($palindrome_length == $string_length) {\n     \
    \   return $string;\n    }\n    // Append to the end of the string reverse of\
    \ a string prefix that comes before the palindromic suffix.\n    return substr($string,\
    \ 0, $palindrome_start + 1) .\n        strrev(substr($string, 0, $palindrome_start\
    \ + 1));\n}", "    $result = $string;\n    $suffix = find_longest_palindromic_suffix($string);\n\
    \    $prefix = substr($string, 0, -strlen($suffix));\n    $result .= strrev($prefix);\n\
    \    return $result;\n}\n", "    $suffix = longest_palindromic_suffix($string);\n\
    \    $prefix = substr($string, 0, strlen($string) - strlen($suffix));\n    return\
    \ $string . strrev($prefix);\n}\n", "    $max_suffix_length = 0;\n    $max_suffix_index\
    \ = -1;\n    $n = strlen($string);\n    for ($i = 0; $i < $n; $i++) {\n      \
    \  if ($string[$i] == $string[$n - 1]) {\n            $j = 0;\n            while\
    \ ($j < $n - $i - 1 && $string[$i + $j + 1] == $string[$n - $j - 2]) {\n     \
    \           $j++;\n            }\n            if ($j > $max_suffix_length) {\n\
    \                $max_suffix_length = $j;\n                $max_suffix_index =\
    \ $i;\n            }\n        }\n    }\n    $prefix = '';\n    for ($i = 0; $i\
    \ < $n - $max_suffix_length - 1; $i++) {\n        $prefix .= $string[$i];\n  \
    \  }\n    return $string . strrev($prefix);\n}", "  // find the longest palindromic\
    \ postfix of $string.\n  $longest_palindromic_postfix = find_longest_palindromic_postfix($string);\n\
    \  $prefix = substr($string, 0, strlen($string) - strlen($longest_palindromic_postfix));\n\
    \  $prefix_reversed = strrev($prefix);\n  return $string . $prefix_reversed;\n\
    }\n", "    $len = strlen($string);\n    $max_prefix_len = 0;\n    $prefix = \"\
    \";\n    $suffix = \"\";\n    for ($i = 0; $i < $len; $i++) {\n        if ($string[$i]\
    \ == $string[$len - 1 - $i]) {\n            $prefix .= $string[$i];\n        \
    \    $max_prefix_len++;\n        } else {\n            break;\n        }\n   \
    \ }\n    $suffix = strrev(substr($string, $max_prefix_len));\n    return $string\
    \ . $suffix;\n}\n\necho make_palindrome(\"cat\"), \"\\n\";\necho make_palindrome(\"\
    cata\"), \"\\n\";\necho make_palindrome(\"acgac\"), \"\\n\";\necho make_palindrome(\"\
    \"), \"\\n\";\necho make_palindrome(\"a\"), \"\\n\";\necho make_palindrome(\"\
    ab\"), \"\\n\";\necho make_palindrome(\"abc\"), \"\\n\";\necho make_palindrome(\"\
    cac\"), \"\\n\";\necho make_palindrome(\"catac\"), \"\\n\";", "  $string_length\
    \ = strlen($string);\n  $suffix_length = 0;\n  while ($suffix_length <= $string_length\
    \ / 2) {\n    if (substr($string, $string_length - $suffix_length - 1, 1) == substr($string,\
    \ $suffix_length, 1)) {\n      $suffix_length++;\n    } else {\n      $suffix_length\
    \ = 0;\n    }\n  }\n  return $string . strrev(substr($string, 0, $string_length\
    \ - $suffix_length));\n}\n\nprint(make_palindrome(\"\") . \"\\n\");\nprint(make_palindrome(\"\
    cat\") . \"\\n\");\nprint(make_palindrome(\"cata\") . \"\\n\");", "    $longest\
    \ = '';\n    $length = strlen($string);\n    for ($i = 0; $i < $length; $i++)\
    \ {\n        if ($string[$i] === $string[$length - 1 - $i]) {\n            $longest\
    \ = substr($string, $i, $length - $i);\n        }\n    }\n    return $string .\
    \ strrev(substr($string, 0, $length - strlen($longest)));\n}\n", "    // empty\
    \ string is always a palindrome\n    if (empty($string)) {\n        return $string;\n\
    \    }\n\n    // find the longest palindromic postfix of the string\n    $len\
    \ = strlen($string);\n    $prefix = str_split($string);\n    $suffix = array_reverse($prefix);\n\
    \    $longest = 0;\n    for ($i = 0; $i < $len; $i++) {\n        // compare next\
    \ symbol of prefix and suffix\n        if ($prefix[$i] == $suffix[$i]) {\n   \
    \         $longest = $i + 1;\n        } else {\n            break;\n        }\n\
    \    }\n\n    // append reverse of string prefix to the current palindromic suffix\n\
    \    return substr($string, 0, $len - $longest) . substr($string, $len - $longest,\
    \ $longest) . strrev(substr($string, 0, $len - $longest));\n}", "  if (!strlen($string))\
    \ return \"\";\n  $rev = strrev($string);\n  $i = 1;\n  $len = strlen($string);\n\
    \  $res = \"\";\n  while ($i < $len) {\n    if (substr($string, $i) == substr($rev,\
    \ 0, $len - $i)) {\n      $res = substr($string, 0, $i) . $rev;\n      break;\n\
    \    }\n    $i++;\n  }\n  return $res;\n}\n", "  // Find the longest postfix that\
    \ is a palindrome.\n  // Since the string is symmetric, if we find the longest\
    \ postfix that is a palindrome,\n  // then we can just append the reverse of the\
    \ string prefix that comes before the palindromic suffix.\n  $j = 0;\n  for ($i\
    \ = $len = strlen($string); $i >= 0; $i--) {\n    if ($string[$i] == $string[$j])\
    \ {\n      $j++;\n    }\n  }\n  // If the longest palindromic postfix is equal\
    \ to the entire string,\n  // then we just return the string appended with its\
    \ reverse.\n  if ($j == $len) {\n    return $string . strrev($string);\n  }\n\
    \  // Otherwise the prefix that comes before the palindromic suffix is the longest\
    \ palindromic prefix.\n  // So we append it to the end of the string.\n  return\
    \ $string . strrev(substr($string, 0, $len - $j));\n}\n\necho(make_palindrome(\"\
    \") . \"\\n\");\necho(make_palindrome(\"cat\") . \"\\n\");\necho(make_palindrome(\"\
    cata\") . \"\\n\");", "    $reverse = strrev($string);\n    $string_length = strlen($string);\n\
    \    $max_suffix_length = 0;\n    for ($suffix_length = 1; $suffix_length <= $string_length;\
    \ $suffix_length++) {\n        $suffix = substr($string, -$suffix_length);\n \
    \       $prefix = substr($reverse, 0, $suffix_length);\n        if ($suffix ==\
    \ $prefix) {\n            $max_suffix_length = $suffix_length;\n        }\n  \
    \  }\n    return $string . substr($reverse, $max_suffix_length);\n}\n", "  //\
    \ Find the longest postfix of supplied string that is a palindrome.\n  $found\
    \ = false;\n  $len = strlen($string);\n  $i = $len - 1;\n  while (!$found && $i\
    \ >= 0) {\n    $substr = substr($string, $i);\n    if (strrev($substr) == $substr)\
    \ {\n      $found = true;\n    } else {\n      $i--;\n    }\n  }\n  if ($found)\
    \ {\n    $substr = substr($string, 0, $i);\n    return $string . strrev($substr);\n\
    \  } else {\n    return $string;\n  }\n}\n", "  // Find the longest palindromic\
    \ suffix.\n  $longest_palindromic_suffix = \"\";\n  for ($i = 0; $i < strlen($string);\
    \ $i++) {\n    if (is_palindrome(substr($string, $i))) {\n      $longest_palindromic_suffix\
    \ = substr($string, $i);\n      break;\n    }\n  }\n  if ($longest_palindromic_suffix\
    \ === \"\") {\n    return \"\";\n  }\n  // Chop the palindromic suffix off the\
    \ string.\n  $prefix = substr($string, 0, strlen($string) - strlen($longest_palindromic_suffix));\n\
    \  // Reverse the prefix and append it to the end of the string.\n  return $string\
    \ . strrev($prefix);\n}\n", "    $palindrome = $string;\n    $string = reverse($string);\n\
    \    $string_length = strlen($string);\n    for ($i = 0; $i < $string_length;\
    \ $i++) {\n        $palindrome_length = strlen($palindrome);\n        $suffix\
    \ = substr($string, 0, $i);\n        $reversed_suffix = reverse($suffix);\n  \
    \      $suffix_palindrome = $suffix . $reversed_suffix;\n        if (strpos($palindrome,\
    \ $suffix_palindrome) === false) {\n            $palindrome .= $reversed_suffix;\n\
    \        }\n    }\n    return $palindrome;\n}\n", "    $len = strlen($string);\n\
    \    if ($len < 2) return $string;\n    for ($i = $len - 1; $i >= 0; $i--) {\n\
    \        if ($string[$i] === $string[0]) {\n            $suffix = substr($string,\
    \ 1, $i);\n            if (is_palindrome($suffix)) {\n                $prefix\
    \ = substr($string, $i + 1);\n                return $string . strrev($prefix);\n\
    \            }\n        }\n    }\n    return $string . strrev(substr($string,\
    \ 1));\n}\n", "    $len = strlen($string);\n    if ($len == 0) {\n        return\
    \ $string;\n    }\n    $mirror = strrev($string);\n    $len--;\n    $postfix =\
    \ '';\n    for ($i = 0; $i < $len; $i++) {\n        $postfix .= $string[$i];\n\
    \        if ($mirror == $postfix . $string) {\n            return $string . substr($mirror,\
    \ $i + 1);\n        }\n    }\n    return $string . $mirror;\n}\n", "    // Find\
    \ the longest palindromic postfix\n    $postfix = longest_palindromic_postfix($string);\n\
    \    // Reverse the part of the string before the palindromic postfix\n    $prefix\
    \ = strrev(substr($string, 0, strlen($string) - strlen($postfix)));\n    // Append\
    \ the reversed prefix to the string\n    return $string . $prefix;\n}\n", "  $length\
    \ = strlen($string);\n  if ($length == 0) {\n    return $string;\n  }\n\n  $i\
    \ = $length - 1;\n  while ($i >= 0) {\n    $postfix = substr($string, $i);\n \
    \   if (is_palindrome($postfix)) {\n      $prefix = substr($string, 0, $i);\n\
    \      return $string . strrev($prefix);\n    }\n    $i--;\n  }\n}\n", "    $count\
    \ = strlen($string);\n    $i = $count - 1;\n    while ($i >= 0) {\n        if\
    \ (substr($string, 0, $i) == strrev(substr($string, $count - $i))) {\n       \
    \     return $string . strrev(substr($string, 0, $count - $i));\n        }\n \
    \       $i--;\n    }\n    return $string;\n}", "  if (empty($string)) {\n    return\
    \ $string;\n  }\n  $left = 0;\n  $right = strlen($string) - 1;\n  $found = false;\n\
    \  while ($left < $right) {\n    if ($string[$left] == $string[$right]) {\n  \
    \    $left++;\n      $right--;\n    } else {\n      if ($left == 0) {\n      \
    \  $right--;\n      } else {\n        $left = 0;\n      }\n      $found = true;\n\
    \    }\n  }\n  if ($found) {\n    return make_palindrome(substr($string, 0, $left))\
    \ . substr($string, $left);\n  } else {\n    return $string;\n  }\n}\n\nmake_palindrome('');",
  "    if ($string == '') {\n        return '';\n    }\n    $l = longest_palindrome_suffix($string);\n\
    \    $prefix = substr($string, 0, -$l);\n    return $string . strrev($prefix);\n\
    }\n", "    if (strlen($string) == 0) {\n        return $string;\n    }\n    $reverse\
    \ = strrev($string);\n    $longest_possible_suffix = $string;\n    for ($i = 1;\
    \ $i < strlen($string); $i++) {\n        $current_suffix = substr($string, $i);\n\
    \        $current_prefix = substr($string, 0, strlen($string) - $i);\n       \
    \ if ($current_suffix == $reverse && strlen($current_prefix) < strlen($longest_possible_suffix))\
    \ {\n            $longest_possible_suffix = $current_suffix;\n        }\n    }\n\
    \    return $string . strrev(substr($string, 0, strlen($string) - strlen($longest_possible_suffix)));\n\
    }\n", "    if ($string == \"\") {\n        return \"\";\n    }\n    $length =\
    \ strlen($string);\n    $return = \"\";\n    $i = $length - 1;\n    while ($i\
    \ >= 0) {\n        if (is_palindrome(substr($string, $i))) {\n            $return\
    \ = substr($string, 0, $i);\n            break;\n        }\n        $i--;\n  \
    \  }\n    return $string . strrev($return);\n}\n", "  $len = strlen($string);\n\
    \  $j = 0;\n  for ($i = $len - 1; $i >= 0; $i--) {\n    $sub = substr($string,\
    \ 0, $i);\n    $sub_rev = strrev($sub);\n    if ($sub == $sub_rev) {\n      $j\
    \ = $i;\n      break;\n    }\n  }\n  $sub = substr($string, $j);\n  $sub_rev =\
    \ strrev($sub);\n  return $string . $sub_rev;\n}\n", "    $l = strlen($string);\n\
    \    for ($i = $l; $i > 0; $i--) {\n        if (is_palindrome(substr($string,\
    \ $l - $i))) {\n            return $string . strrev(substr($string, 0, $l - $i));\n\
    \        }\n    }\n    return $string;\n}\n", "  if ($string == strrev($string))\
    \ return $string;\n\n  $i = strlen($string);\n  while (true) {\n    if ($i < 1)\
    \ {\n      // Longest palindrome is the empty string\n      return $string . strrev($string);\n\
    \    }\n    $postfix = substr($string, -$i);\n    if ($postfix == strrev($postfix))\
    \ {\n      // We have a longest palindrome\n      return $string . strrev(substr($string,\
    \ 0, strlen($string) - $i));\n    }\n    $i--;\n  }\n}\n"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
