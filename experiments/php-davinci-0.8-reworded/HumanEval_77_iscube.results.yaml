language: php
name: HumanEval_77_iscube
results:
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    return (pow($a, 1/3) - floor(pow($a, 1/3)) == 0);\n}\necho iscube(180);\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzjc6qyft.php:29\n\
    Stack trace:\n#0 /tmp/tmpzjc6qyft.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpzjc6qyft.php\
    \ on line 29\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    $x = sqrt($a);\n    return $x * $x * $x == $a;\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9r6xfu5c.php:29\n\
    Stack trace:\n#0 /tmp/tmp9r6xfu5c.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp9r6xfu5c.php\
    \ on line 29\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \tif($a == 0 || $a == 1 || $a == -1)\n\t\treturn \"true\";\n\telse {\n\t\t$root\
    \ = pow($a, 1/3);\n\t\tif($root - floor($root) == 0)\n\t\t\treturn \"true\";\n\
    \t\telse \n\t\t\treturn \"false\";\n\t}\n}\necho iscube(4);\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "false\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ra2ynoz.php:35\n\
    Stack trace:\n#0 /tmp/tmp7ra2ynoz.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp7ra2ynoz.php\
    \ on line 35\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \  if ($a == 0) {\n    return true;\n  }\n  elseif ($a < 0) {\n    $a = -$a;\n\
    \  }\n  for ($i = 1; $i < $a; $i++) {\n    if ($i * $i * $i == $a) {\n      return\
    \ true;\n    }\n  }\n  return false;\n}\n\nif (iscube(1)) {\n  echo \"true\";\n\
    }\nelse {\n  echo \"false\";\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "false\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdmx51il5.php:44\n\
    Stack trace:\n#0 /tmp/tmpdmx51il5.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpdmx51il5.php\
    \ on line 44\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    return $a == round(pow($a, 1/3));\n}\nfor ($i = -100; $i < 100; $i++) {\n\
    \    if (iscube($i)) {\n        echo \"$i\\n\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwscbbv3w.php:33\n\
    Stack trace:\n#0 /tmp/tmpwscbbv3w.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpwscbbv3w.php\
    \ on line 33\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \treturn ($a == (int)pow(pow($a, 1/3), 3));\n}\n\necho iscube(1);\necho \"\\n\"\
    ;\necho iscube(2);\necho \"\\n\";\necho iscube(-1);\necho \"\\n\";\necho iscube(64);\n\
    echo \"\\n\";\necho iscube(0);\necho \"\\n\";\necho iscube(180);\necho \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n1\n\n\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjgncg64y.php:40\n\
    Stack trace:\n#0 /tmp/tmpjgncg64y.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpjgncg64y.php\
    \ on line 40\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    // TODO\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1qu262_o.php:26\n\
    Stack trace:\n#0 /tmp/tmp1qu262_o.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp1qu262_o.php\
    \ on line 26\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \  $i = 1;\n  while ( $i * $i * $i < $a) {\n    $i = $i + 1;\n  }\n  if ($i *\
    \ $i * $i == $a) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\
    echo iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\"\
    ;\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\
    \\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n\n1\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyoyokc1z.php:42\n\
    Stack trace:\n#0 /tmp/tmpyoyokc1z.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpyoyokc1z.php\
    \ on line 42\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \treturn ((int) pow($a, 1/3) == pow($a, 1/3));\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6fs0l8ke.php:29\n\
    Stack trace:\n#0 /tmp/tmp6fs0l8ke.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp6fs0l8ke.php\
    \ on line 29\n"
  timestamp: 1659823601
- exit_code: 0
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a === 0) return true;\n    if ($a < 0) return iscube(-1 * $a);\n   \
    \ $root = 0;\n    $absA = abs($a);\n    while ($root * $root * $root < $absA)\
    \ {\n        $root++;\n    }\n    return $root * $root * $root === $absA;\n}\n\
    \nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823601
- exit_code: 0
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a == 0) {\n        return true;\n    }\n    if ($a < 0) {\n        $a\
    \ = -$a;\n    }\n    $root = round(pow($a, 1 / 3));\n    return $root * $root\
    \ * $root == $a;\n}\necho iscube(1) . PHP_EOL;\necho iscube(2) . PHP_EOL;\necho\
    \ iscube(-1) . PHP_EOL;\necho iscube(64) . PHP_EOL;\necho iscube(0) . PHP_EOL;\n\
    echo iscube(180) . PHP_EOL;\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t$num = (int) pow($a, (1/3));\n\tif ($num * $num * $num == $a) {\n\t\treturn\
    \ \"true\";\n\t} else {\n\t\treturn \"false\";\n\t}\n}\n\necho iscube(1) . \"\
    <br>\";\necho iscube(2) . \"<br>\";\necho iscube(-1) . \"<br>\";\necho iscube(64)\
    \ . \"<br>\";\necho iscube(0) . \"<br>\";\necho iscube(180) . \"<br>\";\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "true<br>false<br>false<br>false<br>true<br>false<br>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpnfb7ane7.php:38\nStack trace:\n#0 /tmp/tmpnfb7ane7.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpnfb7ane7.php on line 38\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t$root = sqrt($a);\n\tif ($root % 1 != 0) {\n\t\treturn false;\n\t} else {\n\t\
    \treturn true;\n\t}\n}\n\necho \"iscube(1) = \" . iscube(1) . \"\\n\";\necho \"\
    iscube(2) = \" . iscube(2) . \"\\n\";\necho \"iscube(-1) = \" . iscube(-1) . \"\
    \\n\";\necho \"iscube(64) = \" . iscube(64) . \"\\n\";\necho \"iscube(0) = \"\
    \ . iscube(0) . \"\\n\";\necho \"iscube(180) = \" . iscube(180) . \"\\n\";\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "iscube(1) = 1\n\nDeprecated: Implicit conversion from float 1.4142135623730951\
    \ to int loses precision in /tmp/tmp06ycvjzi.php on line 20\niscube(2) = 1\n\n\
    Deprecated: Implicit conversion from float NAN to int loses precision in /tmp/tmp06ycvjzi.php\
    \ on line 20\niscube(-1) = 1\niscube(64) = 1\niscube(0) = 1\n\nDeprecated: Implicit\
    \ conversion from float 13.416407864998739 to int loses precision in /tmp/tmp06ycvjzi.php\
    \ on line 20\niscube(180) = 1\n\nDeprecated: Implicit conversion from float 1.4142135623730951\
    \ to int loses precision in /tmp/tmp06ycvjzi.php on line 20\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp06ycvjzi.php:40\nStack trace:\n#0 /tmp/tmp06ycvjzi.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp06ycvjzi.php on line 40\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t$result = false;\n\t$x = 0;\n\twhile($x * $x * $x <= $a) {\n\t\tif ($x * $x\
    \ * $x == $a) {\n\t\t\t$result = true;\n\t\t\tbreak;\n\t\t}\n\t\t$x++;\n\t}\n\t\
    return $result;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpar7sblv4.php:38\n\
    Stack trace:\n#0 /tmp/tmpar7sblv4.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpar7sblv4.php\
    \ on line 38\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    $temp = $a;\n    if ($a<0) {\n        $temp = -$a;\n    }\n    $root = pow($temp,\
    \ 1/3);\n    if (round($root, 0) == $root) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkby641q2.php:39\n\
    Stack trace:\n#0 /tmp/tmpkby641q2.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpkby641q2.php\
    \ on line 39\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t// convert $a to a string and compare it with it's cubed root\n\t$a = (string)$a;\n\
    \t$cubed = $a[0];\n\tfor ($i = 1; $i < strlen($a); $i++) {\n\t\t$cubed = $cubed.\"\
    0\";\n\t}\n\t$cubed = (int)$cubed;\n\t$cubed = $cubed * $cubed * $cubed;\n\tif\
    \ ($cubed == $a) {\n\t\treturn \"true\";\n\t} else {\n\t\treturn \"false\";\n\t\
    }\n}\necho iscube(1);\necho iscube(2);\necho iscube(-1);\necho iscube(64);\necho\
    \ iscube(0);\necho iscube(180);\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "truefalsefalsefalsetruefalse\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpmvptq59k.php:44\nStack trace:\n#0 /tmp/tmpmvptq59k.php(54): test()\n\
    #1 {main}\n  thrown in /tmp/tmpmvptq59k.php on line 44\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \treturn is_int(cbrt($a));\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function cbrt() in /tmp/tmptsjzjya_.php:19\n\
    Stack trace:\n#0 /tmp/tmptsjzjya_.php(23): iscube(1)\n#1 /tmp/tmptsjzjya_.php(27):\
    \ candidate(1)\n#2 /tmp/tmptsjzjya_.php(37): test()\n#3 {main}\n  thrown in /tmp/tmptsjzjya_.php\
    \ on line 19\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t// WRITE YOUR CODE HERE\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp579br2a1.php:26\n\
    Stack trace:\n#0 /tmp/tmp579br2a1.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp579br2a1.php\
    \ on line 26\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \tfor ($i = 0; $i <= $a; $i++) {\n\t\tif ($i*$i*$i == $a) {\n\t\t\treturn true;\n\
    \t\t}\n\t}\n\treturn false;\n}\necho iscube(0);\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjwxl_ftr.php:34\n\
    Stack trace:\n#0 /tmp/tmpjwxl_ftr.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpjwxl_ftr.php\
    \ on line 34\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t$base = pow($a, 1/3);\n\treturn $base == floor($base);\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf9ajox_1.php:30\n\
    Stack trace:\n#0 /tmp/tmpf9ajox_1.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpf9ajox_1.php\
    \ on line 30\n"
  timestamp: 1659823601
- exit_code: 0
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    $a = abs($a);\n    for ($i = 0; $i <= $a; $i++) {\n        if ($i*$i*$i ==\
    \ $a) {\n            return true;\n        }\n    }\n    return false;\n}\n$result\
    \ = iscube(-1);\nif ($result == true) {\n    echo \"true\";\n} else {\n    echo\
    \ \"false\";\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true'
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a == 0) {\n        return true;\n    } else if ($a < 0) {\n        return\
    \ (floatval(sqrt($a * -1)) == intval(sqrt($a * -1)));\n    } else {\n        return\
    \ (floatval(sqrt($a)) == intval(sqrt($a)));\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6sltj02d.php:38\n\
    Stack trace:\n#0 /tmp/tmp6sltj02d.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp6sltj02d.php\
    \ on line 38\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a == 0) return true;\n    if ($a < 0) $a = abs($a);\n    return (is_int(pow($a,\
    \ 1/3)));\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyi_4h4zr.php:29\n\
    Stack trace:\n#0 /tmp/tmpyi_4h4zr.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpyi_4h4zr.php\
    \ on line 29\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a > 0) {\n        return is_int(pow($a, 1/3));\n    } else {\n     \
    \   return false;\n    }\n}\necho iscube(64) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1evda9eg.php:31\n\
    Stack trace:\n#0 /tmp/tmp1evda9eg.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp1evda9eg.php\
    \ on line 31\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t// your code here\n\treturn false;\n}\n\nfunction candidate(...$args) {\n  \
    \  return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9vimt1sv.php:28\n\
    Stack trace:\n#0 /tmp/tmp9vimt1sv.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp9vimt1sv.php\
    \ on line 28\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \  // Your code here\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcehb2kr3.php:26\n\
    Stack trace:\n#0 /tmp/tmpcehb2kr3.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpcehb2kr3.php\
    \ on line 26\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    $b = pow($a, 1/3);\n    if (is_int($b)) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\necho \"The number is \" . iscube(6) . \"\
    <br>\";\necho \"The number is \" . iscube(2) . \"<br>\";\necho \"The number is\
    \ \" . iscube(-1) . \"<br>\";\necho \"The number is \" . iscube(64) . \"<br>\"\
    ;\necho \"The number is \" . iscube(0) . \"<br>\";\necho \"The number is \" .\
    \ iscube(180) . \"<br>\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "The number is <br>The number is <br>The number is <br>The number is <br>The\
    \ number is <br>The number is <br>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpfam7t4tx.php:37\nStack trace:\n#0 /tmp/tmpfam7t4tx.php(47): test()\n\
    #1 {main}\n  thrown in /tmp/tmpfam7t4tx.php on line 37\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    $c = (int)cbrt($a);\n    return $c * $c * $c == $a;\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function cbrt() in /tmp/tmp5vc5l31b.php:19\n\
    Stack trace:\n#0 /tmp/tmp5vc5l31b.php(23): iscube(1)\n#1 /tmp/tmp5vc5l31b.php(27):\
    \ candidate(1)\n#2 /tmp/tmp5vc5l31b.php(37): test()\n#3 {main}\n  thrown in /tmp/tmp5vc5l31b.php\
    \ on line 19\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t$num = 0;\n\twhile ($num * $num * $num < $a) {\n\t\t$num++;\n\t}\n\treturn $num\
    \ * $num * $num == $a;\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpms6vq9n_.php:32\n\
    Stack trace:\n#0 /tmp/tmpms6vq9n_.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpms6vq9n_.php\
    \ on line 32\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t$b = sqrt($a);\n\tif($b != 0 && $b == floor($b)) {\n\t\t$c = pow($b, 3);\n\t\
    \tif($c == $a) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp3ohxc27s.php:36\n\
    Stack trace:\n#0 /tmp/tmp3ohxc27s.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp3ohxc27s.php\
    \ on line 36\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t$c = pow($a, 1/3);\n\tif (is_int($c)) {\n\t\treturn true;\n\t}\n\telse {\n\t\
    \treturn false;\n\t}\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp82gwocuf.php:33\n\
    Stack trace:\n#0 /tmp/tmp82gwocuf.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp82gwocuf.php\
    \ on line 33\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \treturn (pow($a, 1/3) == round(pow($a, 1/3)));\n}\necho \"iscube(1) = \".iscube(1).\"\
    \\n\";\necho \"iscube(2) = \".iscube(2).\"\\n\";\necho \"iscube(-1) = \".iscube(-1).\"\
    \\n\";\necho \"iscube(64) = \".iscube(64).\"\\n\";\necho \"iscube(0) = \".iscube(0).\"\
    \\n\";\necho \"iscube(180) = \".iscube(180).\"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "iscube(1) = 1\niscube(2) = \niscube(-1) = \niscube(64) = \niscube(0) =\
    \ 1\niscube(180) = \n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuf0m8daj.php:35\n\
    Stack trace:\n#0 /tmp/tmpuf0m8daj.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpuf0m8daj.php\
    \ on line 35\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    // Write your code here\n    // To print results to the standard output you\
    \ can use print\n    // Example: print \"Hello world!\";\n    $b = pow($a,1/3);\n\
    \    $c = round($b);\n    if($b == $c){\n        return true;\n    }else{\n  \
    \      return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvfta76yb.php:38\n\
    Stack trace:\n#0 /tmp/tmpvfta76yb.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpvfta76yb.php\
    \ on line 38\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    return pow($a, 1/3) % 1 == 0;\n}\necho iscube(180);\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: Implicit conversion from float 5.64621617328617 to int loses\
    \ precision in /tmp/tmptotc9dzx.php on line 19\n1\nDeprecated: Implicit conversion\
    \ from float 1.2599210498948732 to int loses precision in /tmp/tmptotc9dzx.php\
    \ on line 19\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptotc9dzx.php:28\n\
    Stack trace:\n#0 /tmp/tmptotc9dzx.php(37): test()\n#1 {main}\n  thrown in /tmp/tmptotc9dzx.php\
    \ on line 28\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t$b = $a;\n\t$c = 1;\n\t$d = 1;\n\twhile ($a>=$c) {\n\t\t$c=$c*$d;\n\t\t$d++;\n\
    \t}\n\treturn $c==$b;\n}\necho iscube(180);\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgj0jgxr0.php:34\n\
    Stack trace:\n#0 /tmp/tmpgj0jgxr0.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpgj0jgxr0.php\
    \ on line 34\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \tif ($a < 0) {\n\t\t$a = -$a;\n\t}\n\t$i = 1;\n\twhile ($i * $i * $i <= $a) {\n\
    \t\tif ($i * $i * $i == $a) {\n\t\t\treturn true;\n\t\t}\n\t\t$i++;\n\t}\n\treturn\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_wgyhju9.php:43\n\
    Stack trace:\n#0 /tmp/tmp_wgyhju9.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp_wgyhju9.php\
    \ on line 43\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    return ($a%2 == 1 ? (is_int(pow($a, 1/3))) : false);\n}\n\n$a = $_GET['a'];\n\
    echo iscube($a);\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nWarning: Undefined array key \"a\" in /tmp/tmp4g8g4vn9.php on line 22\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4g8g4vn9.php:29\nStack\
    \ trace:\n#0 /tmp/tmp4g8g4vn9.php(39): test()\n#1 {main}\n  thrown in /tmp/tmp4g8g4vn9.php\
    \ on line 29\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t$root = pow($a, 1/3);\n\tif ($root - floor($root) != 0)\n\t\treturn false;\n\
    \telse\n\t\treturn true;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxf_cczvc.php:33\n\
    Stack trace:\n#0 /tmp/tmpxf_cczvc.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpxf_cczvc.php\
    \ on line 33\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \treturn is_int(cbrt($a));\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function cbrt() in /tmp/tmptaf2meqn.php:19\n\
    Stack trace:\n#0 /tmp/tmptaf2meqn.php(22): iscube(1)\n#1 /tmp/tmptaf2meqn.php(26):\
    \ candidate(1)\n#2 /tmp/tmptaf2meqn.php(36): test()\n#3 {main}\n  thrown in /tmp/tmptaf2meqn.php\
    \ on line 19\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    // Write your code here\n    $x = sqrt($a);\n    if($x*$x*$x == $a) {\n \
    \   \treturn TRUE;\n    }\n    else {\n    \treturn FALSE;\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv81lj6ev.php:35\n\
    Stack trace:\n#0 /tmp/tmpv81lj6ev.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpv81lj6ev.php\
    \ on line 35\n"
  timestamp: 1659978870
- exit_code: 0
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    $x = 0;\n    while ($x * $x * $x < abs($a)) {\n        $x = $x + 1;\n   \
    \ }\n    if ($x * $x * $x != abs($a)) {\n        return false;\n    }\n    return\
    \ true;\n}\n\necho iscube(1) . \"<br>\";\necho iscube(2) . \"<br>\";\necho iscube(-1)\
    \ . \"<br>\";\necho iscube(64) . \"<br>\";\necho iscube(0) . \"<br>\";\necho iscube(180)\
    \ . \"<br>\";\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 1<br><br>1<br>1<br>1<br><br>
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \  if ($a == 0) {\n    return true;\n  }\n  if ($a < 0) {\n    $a = -$a;\n  }\n\
    \  $n = (int)pow($a, 1/3);\n  return pow($n, 3) == $a;\n}\n\nprint iscube(1);\n\
    print iscube(2);\nprint iscube(-1);\nprint iscube(64);\nprint iscube(0);\nprint\
    \ iscube(180);\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwoormh_2.php:44\n\
    Stack trace:\n#0 /tmp/tmpwoormh_2.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpwoormh_2.php\
    \ on line 44\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \  // must use double equals because if single equals, then will automatically\
    \ turn into true.\n  if ($a == 0) {\n    return true;\n  } elseif ($a > 0) {\n\
    \    $x = sqrt($a);\n    $x = round($x);\n    $x *= $x * $x;\n    if ($x == $a)\
    \ {\n      return true;\n    } else {\n      return false;\n    }\n  } else {\n\
    \    $x = sqrt(abs($a));\n    $x = round($x);\n    $x *= $x * $x;\n    if ($x\
    \ == abs($a)) {\n      return true;\n    } else {\n      return false;\n    }\n\
    \  }\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpe7oo2z6t.php:51\n\
    Stack trace:\n#0 /tmp/tmpe7oo2z6t.php(58): test()\n#1 {main}\n  thrown in /tmp/tmpe7oo2z6t.php\
    \ on line 51\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    // your code goes here\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqp3c8gds.php:26\n\
    Stack trace:\n#0 /tmp/tmpqp3c8gds.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpqp3c8gds.php\
    \ on line 26\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    $c = $a ** 1/3;\n    if (round($c) == $c) {\n        return true;\n    }\
    \ else {\n        return false;\n    }\n}\nfunction candidate(...$args) {\n  \
    \  return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptjeo_wlp.php:31\n\
    Stack trace:\n#0 /tmp/tmptjeo_wlp.php(41): test()\n#1 {main}\n  thrown in /tmp/tmptjeo_wlp.php\
    \ on line 31\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \  $cubes = array(1, 8, 27, 64, 125, 216, 343, 512, 729, 1000, 1331, 1728, 2197,\
    \ 2744, 3375, 4096, 4913, 5832, 6859, 8000, 9261);\n  if (in_array($a, $cubes))\
    \ {\n    return true;\n  } else {\n    return false;\n  }\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjdcm4i69.php:34\n\
    Stack trace:\n#0 /tmp/tmpjdcm4i69.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpjdcm4i69.php\
    \ on line 34\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \  $n = 1;\n  while ($n * $n * $n < $a) {\n    $n++;\n  }\n  return $n * $n *\
    \ $n == $a;\n}\n\nprint_r(iscube(1)); // true\nprint_r(iscube(2)); // false\n\
    print_r(iscube(-1)); // true\nprint_r(iscube(64)); // true\nprint_r(iscube(0));\
    \ // true\nprint_r(iscube(180)); // false\nfunction candidate(...$args) {\n  \
    \  return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "11\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf8_bwsvh.php:39\n\
    Stack trace:\n#0 /tmp/tmpf8_bwsvh.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpf8_bwsvh.php\
    \ on line 39\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a == 0) {\n        return true;\n    }\n    $x = abs($a);\n    $divisor\
    \ = abs($a);\n    while ($divisor > 1) {\n        $divisor = $divisor / 2;\n \
    \       $square = $divisor * $divisor * $divisor;\n        if ($square == $x)\
    \ {\n            return true;\n        }\n    }\n    return false;\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf75vpjzb.php:39\n\
    Stack trace:\n#0 /tmp/tmpf75vpjzb.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpf75vpjzb.php\
    \ on line 39\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t$n = $a;\n\twhile ($n > 0) {\n\t\tif ($n ** 3 == $a) {\n\t\t\treturn true;\n\
    \t\t}\n\t\t$n--;\n\t}\n\treturn false;\n}\n\necho \"iscube(1)\\n\";\necho iscube(1)\
    \ . \"\\n\";\necho \"iscube(2)\\n\";\necho iscube(2) . \"\\n\";\necho \"iscube(-1)\\\
    n\";\necho iscube(-1) . \"\\n\";\necho \"iscube(64)\\n\";\necho iscube(64) . \"\
    \\n\";\necho \"iscube(0)\\n\";\necho iscube(0) . \"\\n\";\necho \"iscube(180)\\\
    n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "iscube(1)\n1\niscube(2)\n\niscube(-1)\n\niscube(64)\n1\niscube(0)\n\niscube(180)\n\
    \n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8a4a8qpz.php:48\n\
    Stack trace:\n#0 /tmp/tmp8a4a8qpz.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp8a4a8qpz.php\
    \ on line 48\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \treturn is_numeric(pow($a,1/3));\n}\n\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8qylkwrb.php:28\n\
    Stack trace:\n#0 /tmp/tmp8qylkwrb.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp8qylkwrb.php\
    \ on line 28\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    // Your code here\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpk1udj5uj.php:26\n\
    Stack trace:\n#0 /tmp/tmpk1udj5uj.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpk1udj5uj.php\
    \ on line 26\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \treturn pow($a,1/3)==round(pow($a,1/3))?true:false;\n}\necho iscube(2);\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpygrg8qrj.php:29\n\
    Stack trace:\n#0 /tmp/tmpygrg8qrj.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpygrg8qrj.php\
    \ on line 29\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t$b = 0;\n\t$c = 0;\n\tif($a == 0) {\n\t\treturn true;\n\t} else {\n\t\twhile($c\
    \ <= $a) {\n\t\t\t$c = $b*$b*$b;\n\t\t\tif($c == $a) {\n\t\t\t\treturn true;\n\
    \t\t\t}\n\t\t\t$b++;\n\t\t}\n\t\treturn false;\n\t}\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpweglrpyd.php:41\n\
    Stack trace:\n#0 /tmp/tmpweglrpyd.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpweglrpyd.php\
    \ on line 41\n"
  timestamp: 1659978870
- exit_code: 0
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a === 0) {\n        return true;\n    } elseif ($a < 0) {\n        $a\
    \ = -$a;\n    }\n    for ($i = 1; $i * $i * $i <= $a; $i++) {\n        if ($i\
    \ * $i * $i === $a) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\n\necho iscube(180) . PHP_EOL;\necho iscube(1) . PHP_EOL;\necho iscube(0)\
    \ . PHP_EOL;\necho iscube(-1) . PHP_EOL;\necho iscube(64) . PHP_EOL;\necho iscube(2)\
    \ . PHP_EOL;\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '

    1

    1

    1

    1


    '
  timestamp: 1659978870
- exit_code: 0
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \  if ($a == 0) return true;\n  $i = 1;\n  $i3 = $i * $i * $i;\n  while ($i3 <=\
    \ abs($a)) {\n    if ($i3 == abs($a)) return true;\n    $i++;\n    $i3 = $i *\
    \ $i * $i;\n  }\n  return false;\n}\n\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t$count = 0;\n\tfor ($i = 0; $i <= $a; $i++) {\n\t\tif ($i * $i * $i == $a) {\n\
    \t\t\t$count += 1;\n\t\t}\n\t}\n\tif ($count > 0) {\n\t\treturn true;\n\t} else\
    \ {\n\t\treturn false;\n\t}\n}\necho (iscube(1));\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps6u7eqb7.php:39\n\
    Stack trace:\n#0 /tmp/tmps6u7eqb7.php(47): test()\n#1 {main}\n  thrown in /tmp/tmps6u7eqb7.php\
    \ on line 39\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \tif($a == 0) return true;\n\t$b = floor(pow($a, 1/3));\n\treturn ($b * $b * $b\
    \ == $a);\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcgy0mjby.php:31\n\
    Stack trace:\n#0 /tmp/tmpcgy0mjby.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpcgy0mjby.php\
    \ on line 31\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0) {\n        $a = -$a;\n    }\n    for ($i = 0; $i < $a; $i++)\
    \ {\n        if ($i * $i * $i == $a) {\n            return true;\n        }\n\
    \    }\n    return false;\n}\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\\
    n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) .\
    \ \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n1\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptbu7vwdp.php:40\n\
    Stack trace:\n#0 /tmp/tmptbu7vwdp.php(50): test()\n#1 {main}\n  thrown in /tmp/tmptbu7vwdp.php\
    \ on line 40\n"
  timestamp: 1659978870
- exit_code: 0
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \tif($a < 0) {\n\t\t$a = -$a;\n\t}\n\tif($a === 0) {\n\t\treturn true;\n\t}\n\t\
    for($i = 1; $i <= $a; $i++) {\n\t\tif($i * $i * $i == $a) {\n\t\t\treturn true;\n\
    \t\t}\n\t}\n\treturn false;\n}\necho iscube(1) ? \"true <br>\" : \"false <br>\"\
    ;\necho iscube(2) ? \"true <br>\" : \"false <br>\";\necho iscube(-1) ? \"true\
    \ <br>\" : \"false <br>\";\necho iscube(64) ? \"true <br>\" : \"false <br>\";\n\
    echo iscube(0) ? \"true <br>\" : \"false <br>\";\necho iscube(180) ? \"true <br>\"\
    \ : \"false <br>\";\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: true <br>false <br>true <br>true <br>true <br>false <br>
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    $x = sqrt($a);\n    if($x == round($x)) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpspbj4e2l.php:33\n\
    Stack trace:\n#0 /tmp/tmpspbj4e2l.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpspbj4e2l.php\
    \ on line 33\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \  return $a == 0 or abs($a) == bcpow(abs(bcroot($a, 3)), 3);\n}\n\necho iscube(27)\
    \ . \"\\n\";\necho iscube(28) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(64.1)\
    \ . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(-125) . \"\\n\";\necho iscube(-1)\
    \ . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args) {\n  \
    \  return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function bcpow() in /tmp/tmpolr0r6gb.php:19\n\
    Stack trace:\n#0 /tmp/tmpolr0r6gb.php(22): iscube(27)\n#1 {main}\n  thrown in\
    \ /tmp/tmpolr0r6gb.php on line 19\n"
  timestamp: 1659978870
- exit_code: 0
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \tif ($a == 0) {\n\t\treturn true;\n\t}\n\tif ($a < 0) {\n\t\t$a = -$a;\n\t}\n\
    \tfor ($i = 1; $i <= $a; $i++) {\n\t\tif (pow($i, 3) == $a) {\n\t\t\treturn true;\n\
    \t\t}\n\t}\n\treturn false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    return is_int(pow($a, 1 / 3));\n}\necho iscube(1);\necho iscube(2);\necho\
    \ iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph5fppk1y.php:33\n\
    Stack trace:\n#0 /tmp/tmph5fppk1y.php(43): test()\n#1 {main}\n  thrown in /tmp/tmph5fppk1y.php\
    \ on line 33\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \  return !($a % sqrt($a)) ? true : false;\n}\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: Implicit conversion from float 1.4142135623730951 to int\
    \ loses precision in /tmp/tmpb7lxcz_s.php on line 19\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpb7lxcz_s.php:27\nStack trace:\n#0 /tmp/tmpb7lxcz_s.php(36):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpb7lxcz_s.php on line 27\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    return cbrt($a) == intval(cbrt($a));\n}\n\necho iscube(0) ? \"true\\n\" :\
    \ \"false\\n\";\necho iscube(1) ? \"true\\n\" : \"false\\n\";\necho iscube(2)\
    \ ? \"true\\n\" : \"false\\n\";\necho iscube(3) ? \"true\\n\" : \"false\\n\";\n\
    echo iscube(8) ? \"true\\n\" : \"false\\n\";\necho iscube(27) ? \"true\\n\" :\
    \ \"false\\n\";\necho iscube(64) ? \"true\\n\" : \"false\\n\";\necho iscube(125)\
    \ ? \"true\\n\" : \"false\\n\";\necho iscube(1000) ? \"true\\n\" : \"false\\n\"\
    ;\necho iscube(5000) ? \"true\\n\" : \"false\\n\";\necho iscube(729) ? \"true\\\
    n\" : \"false\\n\";\necho iscube(2281) ? \"true\\n\" : \"false\\n\";\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function cbrt() in /tmp/tmpw9bjtu0t.php:19\n\
    Stack trace:\n#0 /tmp/tmpw9bjtu0t.php(22): iscube(0)\n#1 {main}\n  thrown in /tmp/tmpw9bjtu0t.php\
    \ on line 19\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t// your code here\n\t$n = pow($a,1/3);\n\tif(($n - floor($n)) == 0) {\n\t\t\
    return true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9njqk0b6.php:36\n\
    Stack trace:\n#0 /tmp/tmp9njqk0b6.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp9njqk0b6.php\
    \ on line 36\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t// $c = $a^(1/3);\n\t// return (round($c) == $c) ? true : false;\n\n\t//$c =\
    \ round(pow($a, 1/3));\n\t$c = (int)round(pow($a, 1/3));\n\treturn $c * $c * $c\
    \ == $a;\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpcbztv69t.php:33\n\
    Stack trace:\n#0 /tmp/tmpcbztv69t.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpcbztv69t.php\
    \ on line 33\n"
  timestamp: 1659978870
- exit_code: 0
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if($a == 0 || $a == 1 || $a == -1) {\n        return true;\n    } else {\n\
    \        $i = 0;\n        while($i * $i * $i < $a) {\n            $i++;\n    \
    \    }\n        if($i * $i * $i == $a) {\n            return true;\n        }\
    \ else {\n            return false;\n        }\n    }\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \  if ($a == 0) {\n    return true;\n  }\n  if ($a < 0) {\n    $a = $a * -1;\n\
    \  }\n  for ($i = 1; $i < $a; $i++) {\n    if ($i * $i * $i == $a) {\n      return\
    \ true;\n    }\n  }\n  return false;\n}\necho iscube(1) . PHP_EOL;\necho iscube(2)\
    \ . PHP_EOL;\necho iscube(-1) . PHP_EOL;\necho iscube(64) . PHP_EOL;\necho iscube(0)\
    \ . PHP_EOL;\necho iscube(180) . PHP_EOL;\nfunction candidate(...$args) {\n  \
    \  return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvy116kdh.php:43\n\
    Stack trace:\n#0 /tmp/tmpvy116kdh.php(53): test()\n#1 {main}\n  thrown in /tmp/tmpvy116kdh.php\
    \ on line 43\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0) {\n        $a = -$a;\n    }\n    $root = pow($a, 1 / 3);\n  \
    \  return $root == floor($root);\n}\n\n$a = -1;\necho \"Is \" . $a . \" a cube\
    \ number? \" . iscube($a) . \"\\n\";\n$a = 2;\necho \"Is \" . $a . \" a cube number?\
    \ \" . iscube($a) . \"\\n\";\n$a = -1;\necho \"Is \" . $a . \" a cube number?\
    \ \" . iscube($a) . \"\\n\";\n$a = 64;\necho \"Is \" . $a . \" a cube number?\
    \ \" . iscube($a) . \"\\n\";\n$a = 0;\necho \"Is \" . $a . \" a cube number? \"\
    \ . iscube($a) . \"\\n\";\n$a = 180;\necho \"Is \" . $a . \" a cube number? \"\
    \ . iscube($a) . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Is -1 a cube number? 1\nIs 2 a cube number? \nIs -1 a cube number? 1\n\
    Is 64 a cube number? \nIs 0 a cube number? 1\nIs 180 a cube number? \n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmp2twzhaf7.php:46\nStack trace:\n\
    #0 /tmp/tmp2twzhaf7.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp2twzhaf7.php\
    \ on line 46\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \tif($a==1){\n\t\treturn true;\n\t}\n\tfor($i=1;$i<=$a;$i++){\n\t\tif($i*$i*$i==$a){\n\
    \t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n$num = 7;\necho $num,\" is\
    \ cube or not: \",iscube($num);\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "7 is cube or not: \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpj_i4rz4p.php:38\n\
    Stack trace:\n#0 /tmp/tmpj_i4rz4p.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpj_i4rz4p.php\
    \ on line 38\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t$b = round(pow($a, 1 / 3));\n\tif ($b * $b * $b == $a) {\n\t\treturn true;\n\
    \t} else {\n\t\treturn false;\n\t}\n}\nvar_dump(iscube(1));\nvar_dump(iscube(2));\n\
    var_dump(iscube(-1));\nvar_dump(iscube(64));\nvar_dump(iscube(0));\nvar_dump(iscube(180));\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "bool(true)\nbool(false)\nbool(false)\nbool(true)\nbool(true)\nbool(false)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpln1t0zbe.php:39\nStack\
    \ trace:\n#0 /tmp/tmpln1t0zbe.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpln1t0zbe.php\
    \ on line 39\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    return is_numeric($a) && (($a % 3) == 0) && ($a > 0);\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq2td7lx4.php:27\n\
    Stack trace:\n#0 /tmp/tmpq2td7lx4.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpq2td7lx4.php\
    \ on line 27\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    $b = abs($a);\n    $i = 1;\n    while ($i * $i * $i < $b) {\n        $i++;\n\
    \    }\n    return $i * $i * $i == $b;\n}\necho iscube(64);\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpspl4pg_f.php:38\n\
    Stack trace:\n#0 /tmp/tmpspl4pg_f.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpspl4pg_f.php\
    \ on line 38\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    return $a == round(pow($a, 1/3));\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfmnqxnky.php:29\n\
    Stack trace:\n#0 /tmp/tmpfmnqxnky.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpfmnqxnky.php\
    \ on line 29\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    // Your code here\n}\n\n$is = iscube(1);\n\necho \"1 \";\necho ($is) ? \"\
    true\" : \"false\";\necho PHP_EOL;\n\n$is = iscube(2);\n\necho \"2 \";\necho ($is)\
    \ ? \"true\" : \"false\";\necho PHP_EOL;\n\n$is = iscube(-1);\n\necho \"-1 \"\
    ;\necho ($is) ? \"true\" : \"false\";\necho PHP_EOL;\n\n$is = iscube(64);\n\n\
    echo \"64 \";\necho ($is) ? \"true\" : \"false\";\necho PHP_EOL;\n\n$is = iscube(0);\n\
    \necho \"0 \";\necho ($is) ? \"true\" : \"false\";\necho PHP_EOL;\n\n$is = iscube(180);\n\
    \necho \"180 \";\necho ($is) ? \"true\" : \"false\";\necho PHP_EOL;\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1 false\n2 false\n-1 false\n64 false\n0 false\n180 false\n\nFatal error:\
    \ Uncaught Exception: Test failed! in /tmp/tmpejp3_rnf.php:62\nStack trace:\n\
    #0 /tmp/tmpejp3_rnf.php(72): test()\n#1 {main}\n  thrown in /tmp/tmpejp3_rnf.php\
    \ on line 62\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t$cubes = array();\n\tfor ($i = 0; $i < 3 * $a; $i++) {\n\t\t$cubes[] = $i *\
    \ $i * $i;\n\t}\n\treturn in_array($a, $cubes);\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmphwb_qvnm.php:33\n\
    Stack trace:\n#0 /tmp/tmphwb_qvnm.php(41): test()\n#1 {main}\n  thrown in /tmp/tmphwb_qvnm.php\
    \ on line 33\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t$x = 1;\n\twhile (1) {\n\t\tif ($x * $x * $x == $a) {\n\t\t\treturn \"true\"\
    ;\n\t\t}\n\t\telseif ($x * $x * $x > $a) {\n\t\t\treturn \"false\";\n\t\t}\n\t\
    \t$x++;\n\t}\n}\necho iscube(-1);\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "false\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgfb8hq25.php:36\n\
    Stack trace:\n#0 /tmp/tmpgfb8hq25.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpgfb8hq25.php\
    \ on line 36\n"
  timestamp: 1659978870
- exit_code: 0
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0) {\n        $a = -$a;\n    }\n    if ($a < 1) {\n        return\
    \ true;\n    }\n    $i = 1;\n    while ($i * $i * $i < $a) {\n        $i++;\n\
    \    }\n    if ($i * $i * $i == $a) {\n        return true;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a == 0) {\n        return true;\n    } elseif ($a < 0) {\n        $a\
    \ = -$a;\n    }\n\n    $root = cbrt($a);\n    return $root - (int)$root == 0;\n\
    }\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\
    \\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function cbrt() in /tmp/tmpxst308y7.php:25\n\
    Stack trace:\n#0 /tmp/tmpxst308y7.php(29): iscube(1)\n#1 {main}\n  thrown in /tmp/tmpxst308y7.php\
    \ on line 25\n"
  timestamp: 1659978870
- exit_code: 0
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \  $a = abs($a);\n  if ($a == 0) return true;\n  $low = 1;\n  $high = $a;\n  while\
    \ ($low <= $high) {\n    $mid = floor(($low + $high) / 2);\n    $mid3 = $mid *\
    \ $mid * $mid;\n    if ($mid3 == $a) return true;\n    else if ($mid3 < $a) $low\
    \ = $mid + 1;\n    else $high = $mid - 1;\n  }\n  return false;\n}\necho (iscube(1)\
    \ == true) ? \"PASS\\n\" : \"FAIL\\n\";\necho (iscube(2) == false) ? \"PASS\\\
    n\" : \"FAIL\\n\";\necho (iscube(-1) == true) ? \"PASS\\n\" : \"FAIL\\n\";\necho\
    \ (iscube(64) == true) ? \"PASS\\n\" : \"FAIL\\n\";\necho (iscube(0) == true)\
    \ ? \"PASS\\n\" : \"FAIL\\n\";\necho (iscube(180) == false) ? \"PASS\\n\" : \"\
    FAIL\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'PASS

    PASS

    PASS

    PASS

    PASS

    PASS

    '
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    $result = false;\n    if ($a == 0) {\n        $result = true;\n    } elseif\
    \ ($a > 0) {\n        for ($i = 1; $i < $a; $i++) {\n            if ($i*$i*$i\
    \ == $a) {\n                $result = true;\n                break;\n        \
    \    }\n        }\n    } else {\n        for ($i = -1; $i > $a; $i--) {\n    \
    \        if ($i*$i*$i == $a) {\n                $result = true;\n            \
    \    break;\n            }\n        }\n    }\n    return $result;\n}\n\necho \"\
    18 is a cube: \".iscube(18).\"\\n\";\necho \"64 is a cube: \".iscube(64).\"\\\
    n\";\necho \"80 is a cube: \".iscube(80).\"\\n\";\necho \"1 is a cube: \".iscube(1).\"\
    \\n\";\necho \"0 is a cube: \".iscube(0).\"\\n\";\necho \"-27 is a cube: \".iscube(-27).\"\
    \\n\";\necho \"-14 is a cube: \".iscube(-14).\"\\n\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "18 is a cube: \n64 is a cube: 1\n80 is a cube: \n1 is a cube: \n0 is a\
    \ cube: 1\n-27 is a cube: 1\n-14 is a cube: \n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmp3m14z3ga.php:52\nStack trace:\n#0 /tmp/tmp3m14z3ga.php(62):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp3m14z3ga.php on line 52\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \treturn  pow(abs($a),1/3)==round(pow(abs($a),1/3));\n}\n\nvar_dump(iscube(1));\n\
    var_dump(iscube(2));\nvar_dump(iscube(-1));\nvar_dump(iscube(64));\nvar_dump(iscube(0));\n\
    var_dump(iscube(180));\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "bool(true)\nbool(false)\nbool(true)\nbool(false)\nbool(true)\nbool(false)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwiss5sqk.php:36\nStack\
    \ trace:\n#0 /tmp/tmpwiss5sqk.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpwiss5sqk.php\
    \ on line 36\n"
  timestamp: 1659978870
- exit_code: 0
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \tif($a<0)\n\t\t$a=-$a;\n\tfor($i=0;$i<=$a;$i++)\n\t{\n\t\tif($i*$i*$i==$a)\n\t\
    \t\treturn true;\n\t}\n\treturn false;\n}\n\necho iscube(64);\necho \"<br>\";\n\
    echo iscube(180);\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 1<br>
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \  $a = abs($a);\n  $s = sqrt($a);\n  return $s*$s*$s === $a;\n}\nvar_dump(iscube(1));\n\
    var_dump(iscube(2));\nvar_dump(iscube(-1));\nvar_dump(iscube(64));\nvar_dump(iscube(0));\n\
    var_dump(iscube(180));\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "bool(false)\nbool(false)\nbool(false)\nbool(false)\nbool(false)\nbool(false)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8zrxu7s6.php:34\nStack\
    \ trace:\n#0 /tmp/tmp8zrxu7s6.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp8zrxu7s6.php\
    \ on line 34\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if (pow($a, 1/3) - floor(pow($a, 1/3)) == 0) {\n        return true;\n  \
    \  } else {\n        return false;\n    }\n}\necho iscube(1) . \"\\n\";\necho\
    \ iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\"\
    ;\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n\n\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf3io5o6v.php:38\n\
    Stack trace:\n#0 /tmp/tmpf3io5o6v.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpf3io5o6v.php\
    \ on line 38\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t$num = round(cbrt($a));\n\tif ($num*$num*$num == $a) {\n\t\treturn \"true\"\
    ;\n\t}\n\telse {\n\t\treturn \"false\";\n\t}\n}\necho iscube(1);\necho \"<br>\"\
    ;\necho iscube(2);\necho \"<br>\";\necho iscube(-1);\necho \"<br>\";\necho iscube(64);\n\
    echo \"<br>\";\necho iscube(0);\necho \"<br>\";\necho iscube(180);\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function cbrt() in /tmp/tmpmw42b4dm.php:19\n\
    Stack trace:\n#0 /tmp/tmpmw42b4dm.php(27): iscube(1)\n#1 {main}\n  thrown in /tmp/tmpmw42b4dm.php\
    \ on line 19\n"
  timestamp: 1659978870
- exit_code: 0
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    $a = abs($a);\n    $i = 0;\n    while ($i * $i * $i < $a) {\n        $i++;\n\
    \    }\n    return $i * $i * $i == $a;\n}\nfor ($i = -10; $i < 11; $i++) {\n \
    \   echo \"iscube($i)=\" . iscube($i) . \"\\n\";\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'iscube(-10)=

    iscube(-9)=

    iscube(-8)=1

    iscube(-7)=

    iscube(-6)=

    iscube(-5)=

    iscube(-4)=

    iscube(-3)=

    iscube(-2)=

    iscube(-1)=1

    iscube(0)=1

    iscube(1)=1

    iscube(2)=

    iscube(3)=

    iscube(4)=

    iscube(5)=

    iscube(6)=

    iscube(7)=

    iscube(8)=1

    iscube(9)=

    iscube(10)=

    '
  timestamp: 1659978870
- exit_code: -1
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \tif ($a == 1 || $a == -1 || $a == 0) {\n\t\treturn true;\n\t} else {\n\t\t$result\
    \ = false;\n\t\t$n = 1;\n\t\twhile ($result == false) {\n\t\t\t$n++;\n\t\t\tif\
    \ ($n * $n * $n == $a) {\n\t\t\t\t$result = true;\n\t\t\t}\n\t\t}\n\t\treturn\
    \ $result;\n\t}\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1659978875
- exit_code: 0
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t$i = 1;\n\t$result = true;\n\twhile($i<$a) {\n\t\tif($i**3==$a) {\n\t\t\t$result\
    \ = true;\n\t\t\treturn $result;\n\t\t} else {\n\t\t\t$result = false;\n\t\t}\n\
    \t\t$i++;\n\t}\n\treturn $result;\n}\necho iscube(0);\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1'
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    return ($a === 0 || is_int(pow($a, 1/3)));\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpiz12h3ty.php:27\n\
    Stack trace:\n#0 /tmp/tmpiz12h3ty.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpiz12h3ty.php\
    \ on line 27\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    // Your code here\n    $i = 1;\n    while ($i < $a) {\n        $cube = $i\
    \ * $i * $i;\n        if ($cube == $a) {\n            return true;\n        }\n\
    \        $i++;\n    }\n    return false;\n}\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmdbvdyy8.php:35\n\
    Stack trace:\n#0 /tmp/tmpmdbvdyy8.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpmdbvdyy8.php\
    \ on line 35\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \  $cube = 0;\n  for ($i = 0; $i < $a; $i++) {\n    $cube = $i * $i * $i;\n  \
    \  if ($cube == $a) {\n      return true;\n    }\n  }\n  return false;\n}\n\n\
    var_dump(iscube(64));\necho \"<br/>\";\necho \"<br/>\";\necho \"<br/>\";\necho\
    \ \"<br/>\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "bool(true)\n<br/><br/><br/><br/>\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmphpaqrb71.php:39\nStack trace:\n#0 /tmp/tmphpaqrb71.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmphpaqrb71.php on line 39\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a >= 0) {\n        return (pow(round(pow($a, 1/3)), 3) == $a);\n   \
    \ } else {\n        return (pow(round(pow($a, 1/3)), 3) == -$a);\n    }\n}\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmprhltvb5j.php:32\n\
    Stack trace:\n#0 /tmp/tmprhltvb5j.php(40): test()\n#1 {main}\n  thrown in /tmp/tmprhltvb5j.php\
    \ on line 32\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t$i = 0;\n\twhile (pow($i, 3) <= $a) {\n\t\tif (pow($i, 3) == $a) {\n\t\t\treturn\
    \ true;\n\t\t}\n\t\t$i++;\n\t}\n\treturn false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp5mmu9w5o.php:36\n\
    Stack trace:\n#0 /tmp/tmp5mmu9w5o.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp5mmu9w5o.php\
    \ on line 36\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \  $b = sqrt($a);\n  $c = $b * $b * $b;\n  if ($c == $a) {\n    return true;\n\
    \  } else {\n    return false;\n  }\n}\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpubqjln_c.php:34\n\
    Stack trace:\n#0 /tmp/tmpubqjln_c.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpubqjln_c.php\
    \ on line 34\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \treturn (($a == 0 || $a == 1 || $a == -1) || ($a != 0 && $a % pow($a,1/3) ==\
    \ 0));\n}\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1)\
    \ . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\nDeprecated: Implicit conversion from float 1.2599210498948732 to int\
    \ loses precision in /tmp/tmpcraukkuv.php on line 19\n1\n1\n\nDeprecated: Implicit\
    \ conversion from float 3.9999999999999996 to int loses precision in /tmp/tmpcraukkuv.php\
    \ on line 19\n\n1\n\nDeprecated: Implicit conversion from float 5.64621617328617\
    \ to int loses precision in /tmp/tmpcraukkuv.php on line 19\n1\n\nDeprecated:\
    \ Implicit conversion from float 1.2599210498948732 to int loses precision in\
    \ /tmp/tmpcraukkuv.php on line 19\n\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpcraukkuv.php:34\nStack trace:\n#0 /tmp/tmpcraukkuv.php(43): test()\n\
    #1 {main}\n  thrown in /tmp/tmpcraukkuv.php on line 34\n"
  timestamp: 1659978870
- exit_code: 0
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if($a < 0) {\n        $a = -$a;\n    }\n    $i = 0;\n    while($i*$i*$i <\
    \ $a) {\n        $i++;\n    }\n    if($i*$i*$i == $a) {\n        return true;\n\
    \    }\n    return false;\n}\n$n = 64;\necho iscube($n);\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1'
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    return is_int(cbrt($a));\n}\n\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function cbrt() in /tmp/tmplnlp_b87.php:19\n\
    Stack trace:\n#0 /tmp/tmplnlp_b87.php(23): iscube(1)\n#1 /tmp/tmplnlp_b87.php(27):\
    \ candidate(1)\n#2 /tmp/tmplnlp_b87.php(37): test()\n#3 {main}\n  thrown in /tmp/tmplnlp_b87.php\
    \ on line 19\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a >= 0) {\n        $a = sqrt($a);\n        $b = sqrt($a);\n        if\
    \ ($a == $b) {\n            echo \"true\";\n        } else {\n            echo\
    \ \"false\";\n        }\n    } else {\n        $a = abs($a);\n        $a = sqrt($a);\n\
    \        $b = sqrt($a);\n        if ($a == $b) {\n            echo \"true\";\n\
    \        } else {\n            echo \"false\";\n        }\n    }\n}\niscube(1);\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "truetrue\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmwuf94jl.php:44\n\
    Stack trace:\n#0 /tmp/tmpmwuf94jl.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpmwuf94jl.php\
    \ on line 44\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \  return (abs($a) == cbrt(abs($a)) * cbrt(abs($a)) * cbrt(abs($a)));\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function cbrt() in /tmp/tmpl7k7ve__.php:19\n\
    Stack trace:\n#0 /tmp/tmpl7k7ve__.php(23): iscube(1)\n#1 /tmp/tmpl7k7ve__.php(27):\
    \ candidate(1)\n#2 /tmp/tmpl7k7ve__.php(37): test()\n#3 {main}\n  thrown in /tmp/tmpl7k7ve__.php\
    \ on line 19\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a == 0 || $a == 1) {\n        return true;\n    } elseif ($a < 0) {\n\
    \        return iscube(- $a);\n    } else {\n        $x = $a ** (1/3);\n     \
    \   return ((int)$x == $x);\n    }\n}\necho iscube(125) . \"\\n\";\necho iscube(122)\
    \ . \"\\n\";\necho iscube(180) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(64)\
    \ . \"\\n\";\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n1\n\n1\n\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp83g_c89i.php:44\n\
    Stack trace:\n#0 /tmp/tmp83g_c89i.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp83g_c89i.php\
    \ on line 44\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    $cube = pow($a, 1/3);\n    $integ = (int)$cube;\n    if ($cube == $integ)\
    \ {\n        return true;\n    } else {\n        return false;\n    }\n}\n$a =\
    \ pow(-1, 1/3);\necho iscube($a);\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpmco4sghd.php:36\n\
    Stack trace:\n#0 /tmp/tmpmco4sghd.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpmco4sghd.php\
    \ on line 36\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t$c = ceil( pow($a, 1/3) );\n\treturn $c * $c * $c == $a;\n}\necho iscube(180)\
    \ ? \"true\\n\" : \"false\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "false\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8xqjtu34.php:30\n\
    Stack trace:\n#0 /tmp/tmp8xqjtu34.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp8xqjtu34.php\
    \ on line 30\n"
  timestamp: 1659978870
- exit_code: 0
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if($a === 0) {\n        return true;\n    }\n    if($a < 0) {\n        $a\
    \ = -$a;\n    }\n    $r = 1;\n    while($r * $r * $r < $a) {\n        $r += 1;\n\
    \    }\n    return $r * $r * $r === $a;\n}\n$a = (int)fgets(STDIN);\necho iscube($a)\
    \ ? \"true\" : \"false\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: 'true'
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \  // Write your code here...\n}\n\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_6hm3fi8.php:27\n\
    Stack trace:\n#0 /tmp/tmp_6hm3fi8.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp_6hm3fi8.php\
    \ on line 27\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a == 0) {\n        return true;\n    } else if ($a < 0) {\n        $n\
    \ = -1 * $a;\n        $res = pow($n, (1/3));\n        if ($res % 1 == 0) {\n \
    \           return true;\n        } else {\n            return false;\n      \
    \  }\n    } else {\n        $res = pow($a, (1/3));\n        if ($res % 1 == 0)\
    \ {\n            return true;\n        } else {\n            return false;\n \
    \       }\n    }\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: Implicit conversion from float 1.2599210498948732 to int\
    \ loses precision in /tmp/tmphupnxkpz.php on line 31\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmphupnxkpz.php:44\nStack trace:\n#0 /tmp/tmphupnxkpz.php(53):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmphupnxkpz.php on line 44\n"
  timestamp: 1659978870
- exit_code: 0
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \tif ($a == 0) return true;\n\tif ($a < 0) $a = -$a;\n\t$root = 1;\n\twhile ($root*$root*$root\
    \ < $a) {\n\t\t$root++;\n\t}\n\tif ($root*$root*$root == $a) return true;\n\t\
    return false;\n}\n\necho iscube(64) . \"\\n\";\necho iscube(60) . \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    '
  timestamp: 1659978870
- exit_code: 0
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if(abs($a) == 0) {\n        return true;\n    }\n    if(abs($a) > 0) {\n\
    \        $cube_num = 0;\n        while($cube_num * $cube_num * $cube_num < abs($a))\
    \ {\n            $cube_num++;\n        }\n        if($cube_num * $cube_num * $cube_num\
    \ == abs($a)) {\n            return true;\n        } else {\n            return\
    \ false;\n        }\n    }\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t$i = 1;\n\t$result = 0;\n\tdo {\n\t\t$result = $i * $i * $i;\n\t\tif ($result\
    \ == $a) {\n\t\t\treturn true;\n\t\t}\n\t\t$i++;\n\t} while ($result < $a);\n\t\
    return false;\n}\n\necho iscube(180);\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmps4n4xg0f.php:39\n\
    Stack trace:\n#0 /tmp/tmps4n4xg0f.php(47): test()\n#1 {main}\n  thrown in /tmp/tmps4n4xg0f.php\
    \ on line 39\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t$b = 1;\n\twhile ($b*$b*$b < $a) {\n\t\t$b++;\n\t}\n\treturn $b*$b*$b == $a;\n\
    }\necho iscube(1).\"\\n\";\necho iscube(2).\"\\n\";\necho iscube(-1).\"\\n\";\n\
    echo iscube(64).\"\\n\";\necho iscube(0).\"\\n\";\necho iscube(180).\"\\n\";\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n\n1\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpai3smy8u.php:38\n\
    Stack trace:\n#0 /tmp/tmpai3smy8u.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpai3smy8u.php\
    \ on line 38\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a == 0) {\n        return true;\n    } elseif ($a % 2 == 0) {\n    \
    \    $a = abs($a);\n        $x = pow($a, 1/3);\n        if ($x % 1 == 0) {\n \
    \           return true;\n        } else {\n            return false;\n      \
    \  }\n    } else {\n        return false;\n    }\n}\n\necho iscube(1);\necho iscube(2);\n\
    echo iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nDeprecated: Implicit conversion from float 1.2599210498948732 to int\
    \ loses precision in /tmp/tmpfcnjtozb.php on line 24\n1\nDeprecated: Implicit\
    \ conversion from float 3.9999999999999996 to int loses precision in /tmp/tmpfcnjtozb.php\
    \ on line 24\n11\nDeprecated: Implicit conversion from float 5.64621617328617\
    \ to int loses precision in /tmp/tmpfcnjtozb.php on line 24\n1\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpfcnjtozb.php:45\nStack trace:\n#0 /tmp/tmpfcnjtozb.php(55):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpfcnjtozb.php on line 45\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a == 0) {\n        return true;\n    }\n    if ($a < 0) {\n        $a\
    \ = -$a;\n    }\n    $b = log($a, 3);\n    return $b == round($b);\n}\necho iscube(1);\n\
    echo iscube(2);\necho iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp82gswi_6.php:42\n\
    Stack trace:\n#0 /tmp/tmp82gswi_6.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp82gswi_6.php\
    \ on line 42\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    $i = 1;\n    $result = 0;\n    while ($result <= $a) {\n        $result =\
    \ $i * $i * $i;\n        if ($result == $a) {\n            return true;\n    \
    \    }\n        $i++;\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpn8eikvu3.php:37\n\
    Stack trace:\n#0 /tmp/tmpn8eikvu3.php(45): test()\n#1 {main}\n  thrown in /tmp/tmpn8eikvu3.php\
    \ on line 37\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t// we just need to check if the cube root of $a is an integer number\n\treturn\
    \ is_int(pow($a, 1/3));\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpxhkhen9k.php:27\n\
    Stack trace:\n#0 /tmp/tmpxhkhen9k.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpxhkhen9k.php\
    \ on line 27\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    return $a == pow(intval(pow($a, 1 / 3) + 0.1), 3);\n}\n\necho iscube(180);\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwepgvglb.php:30\n\
    Stack trace:\n#0 /tmp/tmpwepgvglb.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpwepgvglb.php\
    \ on line 30\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t$counter = 0;\n\tfor ($i = 1; $i <= $a; $i++) {\n\t\t$counter += $i;\n\t\tif\
    \ ($counter == $a) {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\necho\
    \ iscube(1) . PHP_EOL;\necho iscube(2) . PHP_EOL;\necho iscube(-1) . PHP_EOL;\n\
    echo iscube(64) . PHP_EOL;\necho iscube(0) . PHP_EOL;\necho iscube(180) . PHP_EOL;\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n\n\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2alftt69.php:42\n\
    Stack trace:\n#0 /tmp/tmp2alftt69.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp2alftt69.php\
    \ on line 42\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \treturn is_numeric(pow($a, 1/3));\n}\nprint(iscube(1) . \"\\n\");\nprint(iscube(2)\
    \ . \"\\n\");\nprint(iscube(-1) . \"\\n\");\nprint(iscube(64) . \"\\n\");\nprint(iscube(0)\
    \ . \"\\n\");\nprint(iscube(180) . \"\\n\");\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n1\n1\n1\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfw339hqf.php:33\n\
    Stack trace:\n#0 /tmp/tmpfw339hqf.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpfw339hqf.php\
    \ on line 33\n"
  timestamp: 1659978870
- exit_code: 0
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a<0) {\n        $a = -$a;\n    }\n    if ($a == 0) {\n        return\
    \ true;\n    }\n    $i = 1;\n    while ($i*$i*$i <= $a) {\n        if ($i*$i*$i\
    \ == $a) {\n            return true;\n        }\n        $i++;\n    }\n    return\
    \ false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    return $a == round(pow($a, 1/3));\n}\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfmnqxnky.php:29\n\
    Stack trace:\n#0 /tmp/tmpfmnqxnky.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpfmnqxnky.php\
    \ on line 29\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    $cube = cbrt($a);\n    if (is_int($cube)) {\n        return true;\n    }\
    \ else {\n        return false;\n    }\n}\necho iscube(1) . \"\\n\";\necho iscube(2)\
    \ . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\\n\";\necho iscube(0)\
    \ . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args) {\n  \
    \  return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function cbrt() in /tmp/tmp4l96ll71.php:19\n\
    Stack trace:\n#0 /tmp/tmp4l96ll71.php(26): iscube(1)\n#1 {main}\n  thrown in /tmp/tmp4l96ll71.php\
    \ on line 19\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \  if ($a === 0 || $a === 1) {\n    return true;\n  }\n  if ($a < 0) {\n    $a\
    \ = abs($a);\n  }\n  $start = 0;\n  $end = $a;\n  while ($start <= $end) {\n \
    \   $mid = ($start + $end) / 2;\n    $square = $mid * $mid * $mid;\n    if ($square\
    \ === $a) {\n      return true;\n    } else if ($square < $a) {\n      $start\
    \ = $mid + 1;\n    } else {\n      $end = $mid - 1;\n    }\n  }\n  return false;\n\
    }\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8uny2efj.php:48\n\
    Stack trace:\n#0 /tmp/tmp8uny2efj.php(56): test()\n#1 {main}\n  thrown in /tmp/tmp8uny2efj.php\
    \ on line 48\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t$i = 1;\n\twhile ($i*$i*$i < $a) {\n\t\t$i++;\n\t}\n\treturn $i*$i*$i == $a;\n\
    }\necho iscube(1).'<br>';\necho iscube(2).'<br>';\necho iscube(-1).'<br>';\necho\
    \ iscube(64).'<br>';\necho iscube(0).'<br>';\necho iscube(180).'<br>';\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1<br><br><br>1<br><br><br>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpujsm1a8t.php:38\nStack trace:\n#0 /tmp/tmpujsm1a8t.php(46): test()\n\
    #1 {main}\n  thrown in /tmp/tmpujsm1a8t.php on line 38\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \tif($a == 0) {\n\t\treturn true;\n\t}\n\tif($a > 0) {\n\t\t$b = sqrt($a);\n\t\
    \tif($b == round($b)) {\n\t\t\treturn true;\n\t\t}\n\t}\n\tif($a < 0) {\n\t\t\
    $b = sqrt(abs($a));\n\t\tif($b == round($b)) {\n\t\t\treturn true;\n\t\t}\n\t\
    }\n\treturn false;\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ufu15b5.php:46\n\
    Stack trace:\n#0 /tmp/tmp2ufu15b5.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp2ufu15b5.php\
    \ on line 46\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \treturn $a == pow(ceil(pow($a, 1/3)), 3);\n}\n\necho iscube(1).\"\\n\";\necho\
    \ iscube(2).\"\\n\";\necho iscube(-1).\"\\n\";\necho iscube(64).\"\\n\";\necho\
    \ iscube(0).\"\\n\";\necho iscube(180).\"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdop0g_uu.php:36\n\
    Stack trace:\n#0 /tmp/tmpdop0g_uu.php(44): test()\n#1 {main}\n  thrown in /tmp/tmpdop0g_uu.php\
    \ on line 36\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    return is_int(pow($a, 1/3));\n}\n\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpvhjrhkeh.php:27\n\
    Stack trace:\n#0 /tmp/tmpvhjrhkeh.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpvhjrhkeh.php\
    \ on line 27\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t// calculate the cube root of $a and store it in the variable $b\n\t$b = \n\t\
    // multiply $b by itself and multiply by $b\n\t$c = \n\t// if $c is the same as\
    \ $a then return true\n\tif ($c == $a) {\n\t\treturn true;\n\t}\n\t// otherwise,\
    \ return false\n\telse {\n\t\treturn false;\n\t}\n}\n\necho iscube(1) . PHP_EOL;\n\
    echo iscube(2) . PHP_EOL;\necho iscube(-1) . PHP_EOL;\necho iscube(64) . PHP_EOL;\n\
    echo iscube(0) . PHP_EOL;\necho iscube(180) . PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: '

    Parse error: syntax error, unexpected token "if" in /tmp/tmpnrrgo6kl.php on line
    24

    '
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \  return is_int(cbrt($a));\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function cbrt() in /tmp/tmp5x3pg1mh.php:19\n\
    Stack trace:\n#0 /tmp/tmp5x3pg1mh.php(22): iscube(1)\n#1 /tmp/tmp5x3pg1mh.php(26):\
    \ candidate(1)\n#2 /tmp/tmp5x3pg1mh.php(36): test()\n#3 {main}\n  thrown in /tmp/tmp5x3pg1mh.php\
    \ on line 19\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a == 0) return true;\n    if ($a < 0) return iscube(-1 * $a);\n    return\
    \ is_int(pow($a, 1/3));\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmph49dibiv.php:29\n\
    Stack trace:\n#0 /tmp/tmph49dibiv.php(39): test()\n#1 {main}\n  thrown in /tmp/tmph49dibiv.php\
    \ on line 29\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    $root = pow($a, 1/3);\n    if (is_int($root)) {\n        return true;\n \
    \   } else {\n        return false;\n    }\n}\necho iscube(1);\necho iscube(2);\n\
    echo iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp65ktvk9h.php:37\n\
    Stack trace:\n#0 /tmp/tmp65ktvk9h.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp65ktvk9h.php\
    \ on line 37\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0) {\n        $a = $a * -1;\n    }\n\n    for ($i = 0; $i < $a;\
    \ $i++) {\n        if ($i ** 3 == $a) {\n            return true;\n        }\n\
    \    }\n    return false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpljaqax4h.php:36\n\
    Stack trace:\n#0 /tmp/tmpljaqax4h.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpljaqax4h.php\
    \ on line 36\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if (pow(ceil(pow($a, 1 / 3)), 3) == $a) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\necho iscube(3);\necho \"\\n\";\necho iscube(8);\n\
    echo \"\\n\";\necho iscube(27);\necho \"\\n\";\necho iscube(64);\necho \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n1\n1\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpuqel4uxp.php:40\n\
    Stack trace:\n#0 /tmp/tmpuqel4uxp.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpuqel4uxp.php\
    \ on line 40\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    return (pow((int)sqrt($a), 3) == $a);\n}\necho iscube(1) ? \"true\" : \"\
    false\";\necho \"\\n\";\necho iscube(2) ? \"true\" : \"false\";\necho \"\\n\"\
    ;\necho iscube(-1) ? \"true\" : \"false\";\necho \"\\n\";\necho iscube(64) ? \"\
    true\" : \"false\";\necho \"\\n\";\necho iscube(0) ? \"true\" : \"false\";\necho\
    \ \"\\n\";\necho iscube(180) ? \"true\" : \"false\";\necho \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "true\nfalse\nfalse\nfalse\ntrue\nfalse\n\nFatal error: Uncaught Exception:\
    \ Test failed! in /tmp/tmpxtmi8cgk.php:40\nStack trace:\n#0 /tmp/tmpxtmi8cgk.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpxtmi8cgk.php on line 40\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \tif (pow($a, 2) % 2 == 0) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\
    \t}\n}\nvar_dump(iscube(180));\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "bool(true)\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpg2vtacqi.php:32\n\
    Stack trace:\n#0 /tmp/tmpg2vtacqi.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpg2vtacqi.php\
    \ on line 32\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a <= 0) {\n        return true;\n    }\n    $i = 1;\n    while($i <\
    \ $a) {\n        $i *= 2;\n    }\n    return $i === $a;\n}\n\n$a = array(1, 2,\
    \ -1, 64, 0, 180);\nforeach ($a as $v) {\n    var_dump(iscube($v));\n}\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "bool(true)\nbool(true)\nbool(true)\nbool(true)\nbool(true)\nbool(false)\n\
    \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfm43y5j8.php:39\nStack\
    \ trace:\n#0 /tmp/tmpfm43y5j8.php(48): test()\n#1 {main}\n  thrown in /tmp/tmpfm43y5j8.php\
    \ on line 39\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t$root = round(pow($a, 1/3));\n\treturn $root * $root * $root == $a;\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp4wreadrn.php:30\n\
    Stack trace:\n#0 /tmp/tmp4wreadrn.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp4wreadrn.php\
    \ on line 30\n"
  timestamp: 1659978870
- exit_code: 0
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t$cube = false;\n\tif ($a == 0) {\n\t\t$cube = true;\n\t} elseif ($a > 0) {\n\
    \t\t$root = round(pow($a, 1/3));\n\t\tif (pow($root, 3) == $a) {\n\t\t\t$cube\
    \ = true;\n\t\t}\n\t} else {\n\t\t$root = round(pow(abs($a), 1/3));\n\t\tif (pow($root,\
    \ 3) == abs($a)) {\n\t\t\t$cube = true;\n\t\t}\n\t}\n\treturn $cube;\n}\n\n$a\
    \ = 0;\n\necho iscube($a);\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1'
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    // Write your code here...\n    if(pow($a,1/3)-round(pow($a,1/3)) == 0) {\n\
    \        return true;\n    }\n    else {\n        return false;\n    }\n}\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpv2c6hnk1.php:35\n\
    Stack trace:\n#0 /tmp/tmpv2c6hnk1.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpv2c6hnk1.php\
    \ on line 35\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    return $a == 1 || ($a < 0 && ($a * -1) == pow(round(pow($a * -1, 1/3)), 3));\n\
    }\n\nfor ($i=0; $i<=64; $i++) {\n    $res = iscube($i);\n    echo \"<br>$i - $res\"\
    ;\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "<br>0 - <br>1 - 1<br>2 - <br>3 - <br>4 - <br>5 - <br>6 - <br>7 - <br>8\
    \ - <br>9 - <br>10 - <br>11 - <br>12 - <br>13 - <br>14 - <br>15 - <br>16 - <br>17\
    \ - <br>18 - <br>19 - <br>20 - <br>21 - <br>22 - <br>23 - <br>24 - <br>25 - <br>26\
    \ - <br>27 - <br>28 - <br>29 - <br>30 - <br>31 - <br>32 - <br>33 - <br>34 - <br>35\
    \ - <br>36 - <br>37 - <br>38 - <br>39 - <br>40 - <br>41 - <br>42 - <br>43 - <br>44\
    \ - <br>45 - <br>46 - <br>47 - <br>48 - <br>49 - <br>50 - <br>51 - <br>52 - <br>53\
    \ - <br>54 - <br>55 - <br>56 - <br>57 - <br>58 - <br>59 - <br>60 - <br>61 - <br>62\
    \ - <br>63 - <br>64 - \nFatal error: Uncaught Exception: Test failed! in /tmp/tmpq6x_thjj.php:34\n\
    Stack trace:\n#0 /tmp/tmpq6x_thjj.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpq6x_thjj.php\
    \ on line 34\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \tif ($a == 0) return true;\n\t$b = abs($a);\n\t$t = 0;\n\tfor($i = 1; $i < $b;\
    \ $i++) {\n\t\t$t = $i * $i * $i;\n\t\tif ($t == $b) {\n\t\t\treturn true;\n\t\
    \t}\n\t}\n\treturn false;\n}\n\necho iscube(1);\necho iscube(0);\necho iscube(64);\n\
    echo iscube(180);\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "11\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp127df4ue.php:40\n\
    Stack trace:\n#0 /tmp/tmp127df4ue.php(50): test()\n#1 {main}\n  thrown in /tmp/tmp127df4ue.php\
    \ on line 40\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \  // Your code here\n  if($a == 0){\n    return true;\n  }\n  if($a < 0){\n \
    \   $a = -$a;\n  }\n  $r = 1;\n  while($r < $a){\n    $r = $r * 3;\n  }\n  if($r\
    \ == $a){\n    return true;\n  }\n  return false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8lreoz19.php:44\n\
    Stack trace:\n#0 /tmp/tmp8lreoz19.php(51): test()\n#1 {main}\n  thrown in /tmp/tmp8lreoz19.php\
    \ on line 44\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \  $root = (round(abs($a) ** (1/3)));\n  if ($root ** 3 == $a) {\n    return true;\n\
    \  } else {\n    return false;\n  }\n}\n\necho \"The number is \" . (iscube(1)\
    \ ? \"a cube\" : \"not a cube\") . \".\\n\";\necho \"The number is \" . (iscube(2)\
    \ ? \"a cube\" : \"not a cube\") . \".\\n\";\necho \"The number is \" . (iscube(-1)\
    \ ? \"a cube\" : \"not a cube\") . \".\\n\";\necho \"The number is \" . (iscube(64)\
    \ ? \"a cube\" : \"not a cube\") . \".\\n\";\necho \"The number is \" . (iscube(0)\
    \ ? \"a cube\" : \"not a cube\") . \".\\n\";\necho \"The number is \" . (iscube(180)\
    \ ? \"a cube\" : \"not a cube\") . \".\\n\";\n\nfunction candidate(...$args) {\n\
    \    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "The number is a cube.\nThe number is not a cube.\nThe number is not a cube.\n\
    The number is a cube.\nThe number is a cube.\nThe number is not a cube.\n\nFatal\
    \ error: Uncaught Exception: Test failed! in /tmp/tmpjk_p46h3.php:41\nStack trace:\n\
    #0 /tmp/tmpjk_p46h3.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpjk_p46h3.php\
    \ on line 41\n"
  timestamp: 1659978870
- exit_code: 0
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \tif($a == 1 || $a == 0 || $a == -1) {\n\t\treturn true;\n\t}\n\t$i = 1;\n\twhile($i\
    \ * $i * $i < $a) {\n\t\t$i++;\n\t}\n\tif($i * $i * $i == $a) {\n\t\treturn true;\n\
    \t}\n\treturn false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \tif ($a == 0) {\n\t\treturn true;\n\t} else {\n\t\tfor ($i = 1; $i <= abs($a);\
    \ $i++) {\n\t\t\tif ($i*$i*$i == $a) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\
    \t\treturn false;\n\t}\n}\n$a = 1;\necho iscube($a);\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1i114nt9.php:39\n\
    Stack trace:\n#0 /tmp/tmp1i114nt9.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp1i114nt9.php\
    \ on line 39\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a < 0) {\n        $a = -$a;\n    }\n    $cnt = 0;\n    while ($a > 0)\
    \ {\n        $a -= ++$cnt * 2 - 1;\n    }\n    return $a == 0;\n}\n\nforeach (range(1,\
    \ 10) as $n) {\n    echo $n.\"\\t\".iscube($n).\"\\n\";\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\t1\n2\t\n3\t\n4\t1\n5\t\n6\t\n7\t\n8\t\n9\t1\n10\t\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpdx_fpd7s.php:42\nStack trace:\n#0 /tmp/tmpdx_fpd7s.php(47):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpdx_fpd7s.php on line 42\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    $a = abs($a);\n    $b = round(cbrt($a));\n    return $a == $b * $b * $b;\n\
    }\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function cbrt() in /tmp/tmpe50hklk7.php:20\n\
    Stack trace:\n#0 /tmp/tmpe50hklk7.php(24): iscube(1)\n#1 /tmp/tmpe50hklk7.php(28):\
    \ candidate(1)\n#2 /tmp/tmpe50hklk7.php(38): test()\n#3 {main}\n  thrown in /tmp/tmpe50hklk7.php\
    \ on line 20\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t$x = $a**(1/3);\n\tif (floor($x) == $x) {\n\t\treturn true;\n\t} else {\n\t\t\
    return false;\n\t}\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpc9sgd22t.php:33\n\
    Stack trace:\n#0 /tmp/tmpc9sgd22t.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpc9sgd22t.php\
    \ on line 33\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \tif ($a < 0) {\n\t\t$a = -$a;\n\t}\n\tif (intval(pow($a, 1/3)) == pow($a, 1/3))\
    \ {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\necho iscube(1).PHP_EOL;\n\
    echo iscube(2).PHP_EOL;\necho iscube(-1).PHP_EOL;\necho iscube(64).PHP_EOL;\n\
    echo iscube(0).PHP_EOL;\necho iscube(180).PHP_EOL;\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n1\n\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp72kb7kmn.php:42\n\
    Stack trace:\n#0 /tmp/tmp72kb7kmn.php(49): test()\n#1 {main}\n  thrown in /tmp/tmp72kb7kmn.php\
    \ on line 42\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    $square = pow($a, 2);\n    $cube = pow($a, 3);\n    if ($a == 0) {\n    \
    \    return true;\n    }\n    if ($a > 0) {\n        if ($cube % $square == 0)\
    \ {\n            return true;\n        }\n    }\n    if ($a < 0) {\n        if\
    \ ($cube % $square == 0) {\n            return true;\n        }\n    }\n    return\
    \ false;\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpd1uae2kx.php:42\n\
    Stack trace:\n#0 /tmp/tmpd1uae2kx.php(51): test()\n#1 {main}\n  thrown in /tmp/tmpd1uae2kx.php\
    \ on line 42\n"
  timestamp: 1659978870
- exit_code: 0
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \tif ($a<0) {\n\t\t$a = $a * -1;\n\t}\n\tif (pow(round(pow($a, 1/3)), 3) == $a)\
    \ {\n\t\treturn true;\n\t}\n\telse {\n\t\treturn false;\n\t}\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t$b = 1;\n\twhile ($b * $b * $b < $a) {\n\t\t$b++;\n\t}\n\tif ($b * $b * $b ==\
    \ $a) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t}\n}\n\n$testcases\
    \ = array(\n\t1 => true,\n\t2 => false,\n\t-1 => true,\n\t64 => true,\n\t0 =>\
    \ true,\n\t180 => false,\n);\n\n$passed = 0;\n$failed = 0;\n\nforeach ($testcases\
    \ as $key => $value) {\n\tif (iscube($key) == $value) {\n\t\t$passed++;\n\t} else\
    \ {\n\t\t$failed++;\n\t}\n}\n\necho \"Passed: \" . $passed . \"; Failed: \" .\
    \ $failed . \"\\n\";\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "Passed: 4; Failed: 2\n\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmpjbhw68si.php:59\nStack trace:\n#0 /tmp/tmpjbhw68si.php(67): test()\n\
    #1 {main}\n  thrown in /tmp/tmpjbhw68si.php on line 59\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a == 0) {\n        return true;\n    }\n    elseif (is_int($a) && $a\
    \ > 0) {\n        $b = sqrt($a);\n        $b = (int)$b;\n        $cube = $b *\
    \ $b * $b;\n        if ($cube == $a) {\n            return true;\n        }\n\
    \        else {\n            return false;\n        }\n    }\n    elseif (is_int($a)\
    \ && $a < 0) {\n        $a = abs($a);\n        $b = sqrt($a);\n        $b = (int)$b;\n\
    \        $cube = $b * $b * $b;\n        if ($cube == $a) {\n            return\
    \ true;\n        }\n        else {\n            return false;\n        }\n   \
    \ }\n    else {\n        return false;\n    }\n}\necho iscube(64);\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1vbcor5i.php:58\n\
    Stack trace:\n#0 /tmp/tmp1vbcor5i.php(65): test()\n#1 {main}\n  thrown in /tmp/tmp1vbcor5i.php\
    \ on line 58\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if (pow(round(pow($a, 1 / 3)), 3) == $a) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp2ad8374y.php:33\n\
    Stack trace:\n#0 /tmp/tmp2ad8374y.php(41): test()\n#1 {main}\n  thrown in /tmp/tmp2ad8374y.php\
    \ on line 33\n"
  timestamp: 1659978870
- exit_code: 0
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if($a == 0) {\n        return true;\n    }\n    elseif($a < 0) {\n      \
    \  $a = -$a;\n    }\n    for($i = 1; $i * $i * $i <= $a; $i++) {\n        if($i\
    \ * $i * $i == $a) {\n            return true;\n        }\n    }\n    return false;\n\
    }\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\
    \\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    // your code here\n    return is_int(pow($a, 1/3));\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpclu421ku.php:28\n\
    Stack trace:\n#0 /tmp/tmpclu421ku.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpclu421ku.php\
    \ on line 28\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t$b = pow($a, 1/3);\n\tif ($b == round($b)) {\n\t\treturn true;\n\t} else {\n\
    \t\treturn false;\n\t}\n}\n\necho iscube(1);\necho \"\\n\";\necho iscube(2);\n\
    echo \"\\n\";\necho iscube(-1);\necho \"\\n\";\necho iscube(64);\necho \"\\n\"\
    ;\necho iscube(0);\necho \"\\n\";\necho iscube(180);\necho \"\\n\";\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n\n\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpki7ouz1t.php:46\n\
    Stack trace:\n#0 /tmp/tmpki7ouz1t.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpki7ouz1t.php\
    \ on line 46\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t//your code here\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9o61xcl2.php:26\n\
    Stack trace:\n#0 /tmp/tmp9o61xcl2.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp9o61xcl2.php\
    \ on line 26\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t// your code here\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp8gwev5pg.php:27\n\
    Stack trace:\n#0 /tmp/tmp8gwev5pg.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp8gwev5pg.php\
    \ on line 27\n"
  timestamp: 1659978870
- exit_code: 0
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \tif($a == 0) {\n\t\treturn true;\n\t}\n\t$a = abs($a);\n\t$x = 1;\n\twhile(($x*$x*$x)<=$a)\
    \ {\n\t\tif(($x*$x*$x) == $a) {\n\t\t\treturn true;\n\t\t}\n\t\t$x++;\n\t}\n\t\
    return false;\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \treturn (pow($a,1/3)%1==0);\n}\necho \"iscube(1)=\".(iscube(1)?\"true\":\"false\"\
    ).\"\\n\";\necho \"iscube(2)=\".(iscube(2)?\"true\":\"false\").\"\\n\";\necho\
    \ \"iscube(-1)=\".(iscube(-1)?\"true\":\"false\").\"\\n\";\necho \"iscube(64)=\"\
    .(iscube(64)?\"true\":\"false\").\"\\n\";\necho \"iscube(0)=\".(iscube(0)?\"true\"\
    :\"false\").\"\\n\";\necho \"iscube(180)=\".(iscube(180)?\"true\":\"false\").\"\
    \\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "iscube(1)=true\n\nDeprecated: Implicit conversion from float 1.2599210498948732\
    \ to int loses precision in /tmp/tmpx2urdz6w.php on line 19\niscube(2)=true\n\n\
    Deprecated: Implicit conversion from float NAN to int loses precision in /tmp/tmpx2urdz6w.php\
    \ on line 19\niscube(-1)=true\n\nDeprecated: Implicit conversion from float 3.9999999999999996\
    \ to int loses precision in /tmp/tmpx2urdz6w.php on line 19\niscube(64)=true\n\
    iscube(0)=true\n\nDeprecated: Implicit conversion from float 5.64621617328617\
    \ to int loses precision in /tmp/tmpx2urdz6w.php on line 19\niscube(180)=true\n\
    \nDeprecated: Implicit conversion from float 1.2599210498948732 to int loses precision\
    \ in /tmp/tmpx2urdz6w.php on line 19\n\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpx2urdz6w.php:33\nStack trace:\n#0 /tmp/tmpx2urdz6w.php(42):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpx2urdz6w.php on line 33\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    return is_numeric($a) && ($a == pow((int)pow($a, 1/3), 3));\n}\n\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp10yh7l2y.php:29\n\
    Stack trace:\n#0 /tmp/tmp10yh7l2y.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp10yh7l2y.php\
    \ on line 29\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t$i = 0;\n\t$b = 0;\n\twhile ($b <= $a) {\n\t\t$b = $i * $i * $i;\n\t\tif ($b\
    \ == $a) {\n\t\t\treturn true;\n\t\t}\n\t\t$i += 1;\n\t}\n\treturn false;\n}\n\
    \nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpr_ildc9m.php:38\n\
    Stack trace:\n#0 /tmp/tmpr_ildc9m.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpr_ildc9m.php\
    \ on line 38\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t// write your code here\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaep_3if5.php:27\n\
    Stack trace:\n#0 /tmp/tmpaep_3if5.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpaep_3if5.php\
    \ on line 27\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t// Use the formula: a = n^3\n\t// Since we are given a, we can solve for n\n\
    \t// n = (a^1/3)\n\t// Convert to integer by rounding down\n\t$n = intval(pow($a,\
    \ 1 / 3));\n\t\n\t// If a is the cube of n, the cube of n will be equal to a\n\
    \tif (pow($n, 3) == $a) {\n\t\treturn true;\n\t} else {\n\t\treturn false;\n\t\
    }\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpswc29a73.php:39\n\
    Stack trace:\n#0 /tmp/tmpswc29a73.php(47): test()\n#1 {main}\n  thrown in /tmp/tmpswc29a73.php\
    \ on line 39\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    $a = (int) $a;\n    if ($a < 0) {\n        $a = abs($a);\n    }\n    for\
    \ ($i = 1; $i < $a; $i++) {\n        if ($i*$i*$i === $a) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\necho iscube(180);\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbtx4nmf9.php:36\n\
    Stack trace:\n#0 /tmp/tmpbtx4nmf9.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpbtx4nmf9.php\
    \ on line 36\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    return ($a < 0) ? (abs($a) == pow(-1, 1/3)) : pow($a, 1/3) == (int)pow($a,\
    \ 1/3);\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpgu92lwk8.php:28\n\
    Stack trace:\n#0 /tmp/tmpgu92lwk8.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpgu92lwk8.php\
    \ on line 28\n"
  timestamp: 1659978870
- exit_code: 0
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t$a = (int)$a;\n\tif ($a < 0) {\n\t\t$a = abs($a);\n\t}\n\tif ($a == 0) {\n\t\
    \treturn true;\n\t}\n\t$check = ceil(pow($a, 1/3));\n\tif ($check * $check * $check\
    \ == $a) {\n\t\treturn true;\n\t}\n\treturn false;\n}\necho iscube(1) . \"\\n\"\
    ;\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\";\necho iscube(64) . \"\
    \\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\\n\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    return is_numeric($a) && !fmod($a,1) && is_int(cbrt($a));\n}\necho iscube(1);\n\
    echo iscube(2);\necho iscube(-1);\necho iscube(64);\necho iscube(0);\necho iscube(180);\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function cbrt() in /tmp/tmpba3wqd1k.php:19\n\
    Stack trace:\n#0 /tmp/tmpba3wqd1k.php(21): iscube(1)\n#1 {main}\n  thrown in /tmp/tmpba3wqd1k.php\
    \ on line 19\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    $r = $a;\n    $r = abs($r);\n    if ($r == 0) {\n        return true;\n \
    \   }\n    while ($r % 3 == 0) {\n        $r = $r / 3;\n    }\n    if ($r == 1)\
    \ {\n        return true;\n    }\n    return false;\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7yztixuf.php:40\n\
    Stack trace:\n#0 /tmp/tmp7yztixuf.php(47): test()\n#1 {main}\n  thrown in /tmp/tmp7yztixuf.php\
    \ on line 40\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \  if ($a == 0) return true;\n  $b = sqrt($a);\n  return ($b*$b*$b == $a);\n}\n\
    echo iscube(1), \"<br/>\";\necho iscube(2), \"<br/>\";\necho iscube(-1), \"<br/>\"\
    ;\necho iscube(64), \"<br/>\";\necho iscube(0), \"<br/>\";\necho iscube(180),\
    \ \"<br/>\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1<br/><br/><br/><br/>1<br/><br/>\nFatal error: Uncaught Exception: Test\
    \ failed! in /tmp/tmpv18s8qcd.php:36\nStack trace:\n#0 /tmp/tmpv18s8qcd.php(44):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpv18s8qcd.php on line 36\n"
  timestamp: 1659978870
- exit_code: 0
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if($a < 0) {\n        $a = -1 * $a;\n    }\n    if($a == 0) {\n        return\
    \ true;\n    } else {\n        $x = 1;\n        while($x * $x * $x < $a) {\n \
    \           $x = $x + 1;\n        }\n        if($x * $x * $x == $a) {\n      \
    \      return true;\n        } else {\n            return false;\n        }\n\
    \    }\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\n\
    function test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    $cube = ceil(pow($a, 1/3));\n    return $cube * $cube * $cube == $a;\n}\n\
    \nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpbgjf9gax.php:30\n\
    Stack trace:\n#0 /tmp/tmpbgjf9gax.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpbgjf9gax.php\
    \ on line 30\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    // Your code here.\n    return pow($a, 1/3) == floor(pow($a, 1/3));\n}\n\n\
    echo iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\"\
    ;\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\
    \\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n\n\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6unh0wr3.php:36\n\
    Stack trace:\n#0 /tmp/tmp6unh0wr3.php(44): test()\n#1 {main}\n  thrown in /tmp/tmp6unh0wr3.php\
    \ on line 36\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \treturn false;\n}\necho assertTrue(iscube(1));\necho assertTrue(iscube(-1));\n\
    echo assertTrue(iscube(64));\necho assertTrue(iscube(0));\necho assertFalse(iscube(2));\n\
    echo assertFalse(iscube(180));\necho assertFalse(iscube(9));\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function assertTrue()\
    \ in /tmp/tmp_33thcpy.php:21\nStack trace:\n#0 {main}\n  thrown in /tmp/tmp_33thcpy.php\
    \ on line 21\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    return cbrt($a) == floor(cbrt($a));\n}\nprint_r(iscube(1).\"\\n\");\nprint_r(iscube(2).\"\
    \\n\");\nprint_r(iscube(-1).\"\\n\");\nprint_r(iscube(64).\"\\n\");\nprint_r(iscube(0).\"\
    \\n\");\nprint_r(iscube(180).\"\\n\");\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function cbrt() in /tmp/tmphbpslb0y.php:19\n\
    Stack trace:\n#0 /tmp/tmphbpslb0y.php(21): iscube(1)\n#1 {main}\n  thrown in /tmp/tmphbpslb0y.php\
    \ on line 19\n"
  timestamp: 1659978870
- exit_code: 0
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a >= 0) {\n        $cube = round(pow($a, 1 / 3));\n        if (pow($cube,\
    \ 3) == $a) {\n            return true;\n        } else {\n            return\
    \ false;\n        }\n    } else {\n        return true;\n    }\n}\n\necho iscube(1);\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1'
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \  return ($a>=0 && pow($a, 1/3) == round(pow($a, 1/3)));\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmptr5v1is5.php:28\n\
    Stack trace:\n#0 /tmp/tmptr5v1is5.php(36): test()\n#1 {main}\n  thrown in /tmp/tmptr5v1is5.php\
    \ on line 28\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t$i = 1;\n\twhile ($i * $i * $i < $a) {\n\t\t$i++;\n\t}\n\treturn $i * $i * $i\
    \ == $a;\n}\n\necho iscube(1);\necho \"\\n\";\necho iscube(2);\necho \"\\n\";\n\
    echo iscube(-1);\necho \"\\n\";\necho iscube(64);\necho \"\\n\";\necho iscube(0);\n\
    echo \"\\n\";\necho iscube(180);\necho \"\\n\";\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n\n1\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6t9a3kh3.php:46\n\
    Stack trace:\n#0 /tmp/tmp6t9a3kh3.php(54): test()\n#1 {main}\n  thrown in /tmp/tmp6t9a3kh3.php\
    \ on line 46\n"
  timestamp: 1659978870
- exit_code: 0
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \tif ($a > 0) {\n\t\tfor ($i = 0; $i <= $a; $i++) {\n\t\t\tif ($i * $i * $i ==\
    \ $a) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t} else {\n\t\tfor ($i = 0; $i\
    \ >= $a; $i--) {\n\t\t\tif ($i * $i * $i == $a) {\n\t\t\t\treturn true;\n\t\t\t\
    }\n\t\t}\n\t}\n\treturn false;\n}\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if($a > 0){\n        $b = pow($a, 1/3);\n        return is_int($b);\n   \
    \ }\n    return true;\n}\n\nprint(iscube(180));\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9s3umum3.php:33\n\
    Stack trace:\n#0 /tmp/tmp9s3umum3.php(43): test()\n#1 {main}\n  thrown in /tmp/tmp9s3umum3.php\
    \ on line 33\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    // your code goes here\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpqp3c8gds.php:26\n\
    Stack trace:\n#0 /tmp/tmpqp3c8gds.php(36): test()\n#1 {main}\n  thrown in /tmp/tmpqp3c8gds.php\
    \ on line 26\n"
  timestamp: 1659978870
- exit_code: 0
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \  if ($a < 0) {\n    $a = -$a;\n  }\n  for ($i = 0; $i <= $a; $i++) {\n    if\
    \ ($i * $i * $i == $a) {\n      return true;\n    }\n  }\n  return false;\n}\n\
    echo iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\"\
    ;\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\
    \\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    $num = pow($a, 1/3);\n    if (pow($num, 3) == $a) {\n        return true;\n\
    \    }\n    return false;\n}\nprint_r(iscube(1));\nprint_r(iscube(2));\nprint_r(iscube(-1));\n\
    print_r(iscube(64));\nprint_r(iscube(0));\nprint_r(iscube(180));\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "111\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7m3c9o6p.php:37\n\
    Stack trace:\n#0 /tmp/tmp7m3c9o6p.php(46): test()\n#1 {main}\n  thrown in /tmp/tmp7m3c9o6p.php\
    \ on line 37\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \treturn pow($a,1/3) == round(pow($a,1/3));\n}\necho iscube(1);\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpfyb_s7vo.php:29\n\
    Stack trace:\n#0 /tmp/tmpfyb_s7vo.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpfyb_s7vo.php\
    \ on line 29\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \tif ($a == 0 || $a == 1) {\n\t\treturn true;\n\t} else if ($a > 0) {\n\t\tfor\
    \ ($i = 2; $i < $a; $i++) {\n\t\t\tif ($i * $i * $i == $a) {\n\t\t\t\treturn true;\n\
    \t\t\t}\n\t\t}\n\t} else {\n\t\tfor ($i = -2; $i > $a; $i--) {\n\t\t\tif ($i *\
    \ $i * $i == $a) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\t}\n\treturn false;\n\
    }\n\necho iscube(1);\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp15o9xe9s.php:45\n\
    Stack trace:\n#0 /tmp/tmp15o9xe9s.php(53): test()\n#1 {main}\n  thrown in /tmp/tmp15o9xe9s.php\
    \ on line 45\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a === 0) {\n        return true;\n    }\n    if ($a < 0) {\n       \
    \ $a = abs($a);\n    }\n    $x = pow($a, 1/3);\n    if ($x == floor($x)) {\n \
    \       return true;\n    }\n    return false;\n}\necho iscube(1) . \"<br>\";\n\
    echo iscube(2) . \"<br>\";\necho iscube(-1) . \"<br>\";\necho iscube(64) . \"\
    <br>\";\necho iscube(0) . \"<br>\";\necho iscube(180) . \"<br>\";\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1<br><br>1<br><br>1<br><br>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpykw42qs3.php:45\nStack trace:\n#0 /tmp/tmpykw42qs3.php(52): test()\n\
    #1 {main}\n  thrown in /tmp/tmpykw42qs3.php on line 45\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    // Write your code here\n    // To print results to the standard output you\
    \ can use print\n    // Example: print \"Hello world!\";\n    if ($a == 0) {\n\
    \        return true;\n    }\n    if ($a < 0) {\n        $a = -1 * $a;\n    }\n\
    \    $i = 0;\n    while ($i * $i * $i < $a) {\n        $i++;\n    }\n    if ($i\
    \ * $i * $i == $a) {\n        return true;\n    }\n    return false;\n}\n$line\
    \ = readline();\nif(iscube($line)){\n    print \"true\";\n}else{\n    print \"\
    false\";\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function readline() in\
    \ /tmp/tmpvyygd961.php:37\nStack trace:\n#0 {main}\n  thrown in /tmp/tmpvyygd961.php\
    \ on line 37\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    $check = sqrt($a);\n    $b = pow($check,3);\n    if ($a == $b) {\n      \
    \  return true;\n    }\n    else {\n        return false;\n    }\n}\necho iscube(1);\n\
    echo \"<br>\";\necho iscube(2);\necho \"<br>\";\necho iscube(-1);\necho \"<br>\"\
    ;\necho iscube(64);\necho \"<br>\";\necho iscube(0);\necho \"<br>\";\necho iscube(180);\n\
    echo \"<br>\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1<br><br><br><br>1<br><br>\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpvgeqm7yc.php:47\nStack trace:\n#0 /tmp/tmpvgeqm7yc.php(55): test()\n\
    #1 {main}\n  thrown in /tmp/tmpvgeqm7yc.php on line 47\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \tif($a==0){\n\t\treturn true;\n\t}\n\tif($a<0){\n\t\t$a=-$a;\n\t}\n\t$k=cbrt($a);\n\
    \tif(floor($k)==$k){\n\t\treturn true;\n\t}else{\n\t\treturn false;\n\t}\n}\n\
    echo iscube(0);\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Error: Call to undefined function cbrt() in /tmp/tmpvyb47voq.php:25\n\
    Stack trace:\n#0 /tmp/tmpvyb47voq.php(34): iscube(1)\n#1 /tmp/tmpvyb47voq.php(38):\
    \ candidate(1)\n#2 /tmp/tmpvyb47voq.php(48): test()\n#3 {main}\n  thrown in /tmp/tmpvyb47voq.php\
    \ on line 25\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t$r = array_map(function($x) use ($a) {\n\t\treturn $x * $x * $x;\n\t}, range(1,\
    \ 1000));\n\treturn in_array($a, $r);\n}\n\nfunction candidate(...$args) {\n \
    \   return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf0qjza5t.php:32\n\
    Stack trace:\n#0 /tmp/tmpf0qjza5t.php(40): test()\n#1 {main}\n  thrown in /tmp/tmpf0qjza5t.php\
    \ on line 32\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a == 0) {\n        return true;\n    }\n    else if ($a < 0) {\n   \
    \     $a = abs($a);\n    }\n    for ($i = 1; $i < $a; $i++) {\n        if ($i\
    \ * $i * $i == $a) {\n            return true;\n        }\n    }\n    return false;\n\
    }\n\necho iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\
    \\n\";\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180)\
    \ . \"\\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\
    \nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\n\n\n1\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpaxjpopds.php:44\n\
    Stack trace:\n#0 /tmp/tmpaxjpopds.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpaxjpopds.php\
    \ on line 44\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \tif ($a < 0) $a = abs($a);\n\tif ($a == 0) return true;\n\tif ($a % 3 == 0) return\
    \ true;\n\treturn false;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_rjcd0xl.php:30\n\
    Stack trace:\n#0 /tmp/tmp_rjcd0xl.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp_rjcd0xl.php\
    \ on line 30\n"
  timestamp: 1659978870
- exit_code: 0
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \tif ($a <= 0) {\n\t\t$a = abs($a);\n\t}\n\t$num = 0;\n\twhile ($num ** 3 < $a)\
    \ {\n\t\t$num++;\n\t}\n\tif ($num ** 3 == $a) {\n\t\treturn true;\n\t} else {\n\
    \t\treturn false;\n\t}\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978870
- exit_code: 0
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \tif($a==0) {\n\t\treturn true;\n\t}\n\tif($a<0) {\n\t\t$a = -$a;\n\t}\n\t$upper\
    \ = ceil(pow($a, 1/3));\n\tfor($i=1; $i<=$upper; $i++) {\n\t\tif($i*$i*$i == $a)\
    \ {\n\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978870
- exit_code: 0
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a <= 0) {\n        return true;\n    } elseif (pow(round(pow($a, 1/3)),\
    \ 3) == $a) {\n        return true;\n    } else {\n        return false;\n   \
    \ }\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    // $root is the cube root of $a (if it exists)\n    $root = round(pow($a,\
    \ 1/3));\n    // cube of $root should equal $a\n    return pow($root, 3) == $a;\n\
    }\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpo51w_1pn.php:31\n\
    Stack trace:\n#0 /tmp/tmpo51w_1pn.php(39): test()\n#1 {main}\n  thrown in /tmp/tmpo51w_1pn.php\
    \ on line 31\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    return (pow($a, 1/3) == round(pow($a, 1/3)));\n}\n\nprint iscube(64);\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp_6qhrgdx.php:30\n\
    Stack trace:\n#0 /tmp/tmp_6qhrgdx.php(38): test()\n#1 {main}\n  thrown in /tmp/tmp_6qhrgdx.php\
    \ on line 30\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t$c = $a;\n\t$s = 0;\n\twhile($a > 0) {\n\t\t$s += $a % 10;\n\t\t$a = floor($a\
    \ / 10);\n\t}\n\tif($s * $s * $s == $c) {\n\t\treturn true;\n\t}\n\treturn false;\n\
    }\n\n$result = iscube(1);\nprint($result);\necho \"<br>\";\n$result = iscube(2);\n\
    print($result);\necho \"<br>\";\n$result = iscube(-1);\nprint($result);\necho\
    \ \"<br>\";\n$result = iscube(64);\nprint($result);\necho \"<br>\";\n$result =\
    \ iscube(0);\nprint($result);\necho \"<br>\";\n$result = iscube(180);\nprint($result);\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1<br><br><br><br>1<br>\nFatal error: Uncaught Exception: Test failed! in\
    \ /tmp/tmp71nns623.php:55\nStack trace:\n#0 /tmp/tmp71nns623.php(63): test()\n\
    #1 {main}\n  thrown in /tmp/tmp71nns623.php on line 55\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \  if ($a==0) return True;\n  return is_int(pow($a, 1/3));\n}\n\nforeach (range(0,\
    \ 100) as $i) {\n  if (iscube($i)) {\n    echo \"$i is cube\\n\";\n  }\n}\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0 is cube\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpez3g2zwy.php:33\n\
    Stack trace:\n#0 /tmp/tmpez3g2zwy.php(43): test()\n#1 {main}\n  thrown in /tmp/tmpez3g2zwy.php\
    \ on line 33\n"
  timestamp: 1659978870
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a >= 0) {\n        return is_int(pow($a, 1 / 3));\n    } else {\n  \
    \      return is_int(-pow(- $a, 1 / 3));\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7wk2sqb4.php:30\n\
    Stack trace:\n#0 /tmp/tmp7wk2sqb4.php(40): test()\n#1 {main}\n  thrown in /tmp/tmp7wk2sqb4.php\
    \ on line 30\n"
  timestamp: 1659978870
