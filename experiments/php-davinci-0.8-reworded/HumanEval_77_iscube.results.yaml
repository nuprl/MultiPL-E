language: php
name: HumanEval_77_iscube
results:
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    return (pow($a, 1/3) - floor(pow($a, 1/3)) == 0);\n}\necho iscube(180);\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpzjc6qyft.php:29\n\
    Stack trace:\n#0 /tmp/tmpzjc6qyft.php(37): test()\n#1 {main}\n  thrown in /tmp/tmpzjc6qyft.php\
    \ on line 29\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    $x = sqrt($a);\n    return $x * $x * $x == $a;\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp9r6xfu5c.php:29\n\
    Stack trace:\n#0 /tmp/tmp9r6xfu5c.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp9r6xfu5c.php\
    \ on line 29\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \tif($a == 0 || $a == 1 || $a == -1)\n\t\treturn \"true\";\n\telse {\n\t\t$root\
    \ = pow($a, 1/3);\n\t\tif($root - floor($root) == 0)\n\t\t\treturn \"true\";\n\
    \t\telse \n\t\t\treturn \"false\";\n\t}\n}\necho iscube(4);\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "false\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp7ra2ynoz.php:35\n\
    Stack trace:\n#0 /tmp/tmp7ra2ynoz.php(45): test()\n#1 {main}\n  thrown in /tmp/tmp7ra2ynoz.php\
    \ on line 35\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \  if ($a == 0) {\n    return true;\n  }\n  elseif ($a < 0) {\n    $a = -$a;\n\
    \  }\n  for ($i = 1; $i < $a; $i++) {\n    if ($i * $i * $i == $a) {\n      return\
    \ true;\n    }\n  }\n  return false;\n}\n\nif (iscube(1)) {\n  echo \"true\";\n\
    }\nelse {\n  echo \"false\";\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "false\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpdmx51il5.php:44\n\
    Stack trace:\n#0 /tmp/tmpdmx51il5.php(54): test()\n#1 {main}\n  thrown in /tmp/tmpdmx51il5.php\
    \ on line 44\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    return $a == round(pow($a, 1/3));\n}\nfor ($i = -100; $i < 100; $i++) {\n\
    \    if (iscube($i)) {\n        echo \"$i\\n\";\n    }\n}\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "0\n1\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpwscbbv3w.php:33\n\
    Stack trace:\n#0 /tmp/tmpwscbbv3w.php(41): test()\n#1 {main}\n  thrown in /tmp/tmpwscbbv3w.php\
    \ on line 33\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \treturn ($a == (int)pow(pow($a, 1/3), 3));\n}\n\necho iscube(1);\necho \"\\n\"\
    ;\necho iscube(2);\necho \"\\n\";\necho iscube(-1);\necho \"\\n\";\necho iscube(64);\n\
    echo \"\\n\";\necho iscube(0);\necho \"\\n\";\necho iscube(180);\necho \"\\n\"\
    ;\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n1\n\n\n1\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjgncg64y.php:40\n\
    Stack trace:\n#0 /tmp/tmpjgncg64y.php(49): test()\n#1 {main}\n  thrown in /tmp/tmpjgncg64y.php\
    \ on line 40\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    // TODO\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp1qu262_o.php:26\n\
    Stack trace:\n#0 /tmp/tmp1qu262_o.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp1qu262_o.php\
    \ on line 26\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \  $i = 1;\n  while ( $i * $i * $i < $a) {\n    $i = $i + 1;\n  }\n  if ($i *\
    \ $i * $i == $a) {\n    return true;\n  } else {\n    return false;\n  }\n}\n\
    echo iscube(1) . \"\\n\";\necho iscube(2) . \"\\n\";\necho iscube(-1) . \"\\n\"\
    ;\necho iscube(64) . \"\\n\";\necho iscube(0) . \"\\n\";\necho iscube(180) . \"\
    \\n\";\nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\n\n\n1\n\n\n\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpyoyokc1z.php:42\n\
    Stack trace:\n#0 /tmp/tmpyoyokc1z.php(50): test()\n#1 {main}\n  thrown in /tmp/tmpyoyokc1z.php\
    \ on line 42\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \treturn ((int) pow($a, 1/3) == pow($a, 1/3));\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp6fs0l8ke.php:29\n\
    Stack trace:\n#0 /tmp/tmp6fs0l8ke.php(37): test()\n#1 {main}\n  thrown in /tmp/tmp6fs0l8ke.php\
    \ on line 29\n"
  timestamp: 1659823601
- exit_code: 0
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a === 0) return true;\n    if ($a < 0) return iscube(-1 * $a);\n   \
    \ $root = 0;\n    $absA = abs($a);\n    while ($root * $root * $root < $absA)\
    \ {\n        $root++;\n    }\n    return $root * $root * $root === $absA;\n}\n\
    \nfunction candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction\
    \ test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1659823601
- exit_code: 0
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    if ($a == 0) {\n        return true;\n    }\n    if ($a < 0) {\n        $a\
    \ = -$a;\n    }\n    $root = round(pow($a, 1 / 3));\n    return $root * $root\
    \ * $root == $a;\n}\necho iscube(1) . PHP_EOL;\necho iscube(2) . PHP_EOL;\necho\
    \ iscube(-1) . PHP_EOL;\necho iscube(64) . PHP_EOL;\necho iscube(0) . PHP_EOL;\n\
    echo iscube(180) . PHP_EOL;\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: '1


    1

    1

    1


    '
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t$num = (int) pow($a, (1/3));\n\tif ($num * $num * $num == $a) {\n\t\treturn\
    \ \"true\";\n\t} else {\n\t\treturn \"false\";\n\t}\n}\n\necho iscube(1) . \"\
    <br>\";\necho iscube(2) . \"<br>\";\necho iscube(-1) . \"<br>\";\necho iscube(64)\
    \ . \"<br>\";\necho iscube(0) . \"<br>\";\necho iscube(180) . \"<br>\";\nfunction\
    \ candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test(): void\
    \ {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(2) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(64) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"); }\n\
    \    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"); }\n \
    \   if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"); }\n\
    }\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "true<br>false<br>false<br>false<br>true<br>false<br>\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmpnfb7ane7.php:38\nStack trace:\n#0 /tmp/tmpnfb7ane7.php(48):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmpnfb7ane7.php on line 38\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t$root = sqrt($a);\n\tif ($root % 1 != 0) {\n\t\treturn false;\n\t} else {\n\t\
    \treturn true;\n\t}\n}\n\necho \"iscube(1) = \" . iscube(1) . \"\\n\";\necho \"\
    iscube(2) = \" . iscube(2) . \"\\n\";\necho \"iscube(-1) = \" . iscube(-1) . \"\
    \\n\";\necho \"iscube(64) = \" . iscube(64) . \"\\n\";\necho \"iscube(0) = \"\
    \ . iscube(0) . \"\\n\";\necho \"iscube(180) = \" . iscube(180) . \"\\n\";\n\n\
    function candidate(...$args) {\n    return iscube(...$args);\n}\n\nfunction test():\
    \ void {\n    if (candidate(1) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(2) !== false) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(-1) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(64) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(180) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\");\
    \ }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "iscube(1) = 1\n\nDeprecated: Implicit conversion from float 1.4142135623730951\
    \ to int loses precision in /tmp/tmp06ycvjzi.php on line 20\niscube(2) = 1\n\n\
    Deprecated: Implicit conversion from float NAN to int loses precision in /tmp/tmp06ycvjzi.php\
    \ on line 20\niscube(-1) = 1\niscube(64) = 1\niscube(0) = 1\n\nDeprecated: Implicit\
    \ conversion from float 13.416407864998739 to int loses precision in /tmp/tmp06ycvjzi.php\
    \ on line 20\niscube(180) = 1\n\nDeprecated: Implicit conversion from float 1.4142135623730951\
    \ to int loses precision in /tmp/tmp06ycvjzi.php on line 20\n\nFatal error: Uncaught\
    \ Exception: Test failed! in /tmp/tmp06ycvjzi.php:40\nStack trace:\n#0 /tmp/tmp06ycvjzi.php(49):\
    \ test()\n#1 {main}\n  thrown in /tmp/tmp06ycvjzi.php on line 40\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t$result = false;\n\t$x = 0;\n\twhile($x * $x * $x <= $a) {\n\t\tif ($x * $x\
    \ * $x == $a) {\n\t\t\t$result = true;\n\t\t\tbreak;\n\t\t}\n\t\t$x++;\n\t}\n\t\
    return $result;\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpar7sblv4.php:38\n\
    Stack trace:\n#0 /tmp/tmpar7sblv4.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpar7sblv4.php\
    \ on line 38\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \    $temp = $a;\n    if ($a<0) {\n        $temp = -$a;\n    }\n    $root = pow($temp,\
    \ 1/3);\n    if (round($root, 0) == $root) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\n\nfunction candidate(...$args) {\n    return\
    \ iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true) {\
    \ throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpkby641q2.php:39\n\
    Stack trace:\n#0 /tmp/tmpkby641q2.php(46): test()\n#1 {main}\n  thrown in /tmp/tmpkby641q2.php\
    \ on line 39\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t// convert $a to a string and compare it with it's cubed root\n\t$a = (string)$a;\n\
    \t$cubed = $a[0];\n\tfor ($i = 1; $i < strlen($a); $i++) {\n\t\t$cubed = $cubed.\"\
    0\";\n\t}\n\t$cubed = (int)$cubed;\n\t$cubed = $cubed * $cubed * $cubed;\n\tif\
    \ ($cubed == $a) {\n\t\treturn \"true\";\n\t} else {\n\t\treturn \"false\";\n\t\
    }\n}\necho iscube(1);\necho iscube(2);\necho iscube(-1);\necho iscube(64);\necho\
    \ iscube(0);\necho iscube(180);\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "truefalsefalsefalsetruefalse\nFatal error: Uncaught Exception: Test failed!\
    \ in /tmp/tmpmvptq59k.php:44\nStack trace:\n#0 /tmp/tmpmvptq59k.php(54): test()\n\
    #1 {main}\n  thrown in /tmp/tmpmvptq59k.php on line 44\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \treturn is_int(cbrt($a));\n}\n\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Error: Call to undefined function cbrt() in /tmp/tmptsjzjya_.php:19\n\
    Stack trace:\n#0 /tmp/tmptsjzjya_.php(23): iscube(1)\n#1 /tmp/tmptsjzjya_.php(27):\
    \ candidate(1)\n#2 /tmp/tmptsjzjya_.php(37): test()\n#3 {main}\n  thrown in /tmp/tmptsjzjya_.php\
    \ on line 19\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t// WRITE YOUR CODE HERE\n}\nfunction candidate(...$args) {\n    return iscube(...$args);\n\
    }\n\nfunction test(): void {\n    if (candidate(1) !== true) { throw new Exception(\"\
    Test failed!\"); }\n    if (candidate(2) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(-1) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(64) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(180) !== false) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(1000) !== true) { throw new Exception(\"Test\
    \ failed!\"); }\n    if (candidate(0) !== true) { throw new Exception(\"Test failed!\"\
    ); }\n    if (candidate(1729) !== false) { throw new Exception(\"Test failed!\"\
    ); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmp579br2a1.php:26\n\
    Stack trace:\n#0 /tmp/tmp579br2a1.php(36): test()\n#1 {main}\n  thrown in /tmp/tmp579br2a1.php\
    \ on line 26\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \tfor ($i = 0; $i <= $a; $i++) {\n\t\tif ($i*$i*$i == $a) {\n\t\t\treturn true;\n\
    \t\t}\n\t}\n\treturn false;\n}\necho iscube(0);\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "1\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpjwxl_ftr.php:34\n\
    Stack trace:\n#0 /tmp/tmpjwxl_ftr.php(42): test()\n#1 {main}\n  thrown in /tmp/tmpjwxl_ftr.php\
    \ on line 34\n"
  timestamp: 1659823601
- exit_code: 255
  program: "<?php\n// Write a function that takes an integer a and returns true \n\
    // if this ingeger is a cube of some integer number.\n// Note: you may assume\
    \ the input is always valid.\n// Examples:\n// >>> iscube(1)\n// true\n// >>>\
    \ iscube(2)\n// false\n// >>> iscube(-1)\n// true\n// >>> iscube(64)\n// true\n\
    // >>> iscube(0)\n// true\n// >>> iscube(180)\n// false\nfunction iscube($a) {\n\
    \t$base = pow($a, 1/3);\n\treturn $base == floor($base);\n}\n\nfunction candidate(...$args)\
    \ {\n    return iscube(...$args);\n}\n\nfunction test(): void {\n    if (candidate(1)\
    \ !== true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(2) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(-1) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(64) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(180) !==\
    \ false) { throw new Exception(\"Test failed!\"); }\n    if (candidate(1000) !==\
    \ true) { throw new Exception(\"Test failed!\"); }\n    if (candidate(0) !== true)\
    \ { throw new Exception(\"Test failed!\"); }\n    if (candidate(1729) !== false)\
    \ { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
  status: Exception
  stderr: ''
  stdout: "\nFatal error: Uncaught Exception: Test failed! in /tmp/tmpf9ajox_1.php:30\n\
    Stack trace:\n#0 /tmp/tmpf9ajox_1.php(38): test()\n#1 {main}\n  thrown in /tmp/tmpf9ajox_1.php\
    \ on line 30\n"
  timestamp: 1659823601
