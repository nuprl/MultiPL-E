name: HumanEval_152_compare
language: php
prompt: "<?php\n// I think we all remember that feeling when the result of some long-awaited\n\
  // event is finally known. The feelings and thoughts you have at that moment are\n\
  // definitely worth noting down and comparing.\n// Your task is to determine if\
  \ a person correctly guessed the results of a number of matches.\n// You are given\
  \ two arrays of scores and guesses of equal length, where each index shows a match.\
  \ \n// Return an array of the same length denoting how far off each guess was. If\
  \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
  \ absolute difference between the guess and the score.\n// example:\n// >>> compare(array(1,\
  \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>>\
  \ compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1,\
  \ 0, 0, 6)\nfunction compare($game, $guess) {\n"
tests: "function candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2,\
  \ -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
  \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0,\
  \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $score = [];\n    for ($i = 0; $i < count($game); $i++) {\n   \
    \     if ($game[$i] > $guess[$i]) {\n            $score[] = $game[$i] - $guess[$i];\n\
    \        } elseif ($game[$i] < $guess[$i]) {\n            $score[] = $guess[$i]\
    \ - $game[$i];\n        } else {\n            $score[] = 0;\n        }\n    }\n\
    \    return $score;\n}", "    $arr = [];\n    for ($i = 0; $i < count($game);\
    \ $i++) {\n        if ($game[$i] == $guess[$i]) {\n            $arr[] = 0;\n \
    \       } else {\n            $arr[] = abs($game[$i] - $guess[$i]);\n        }\n\
    \    }\n    return $arr;\n}\n", "  foreach ($game as $key => $val) {\n    if ($val\
    \ - $guess[$key] > 0) {\n      $results[] = $val - $guess[$key];\n    } else {\n\
    \      $results[] = $guess[$key] - $val;\n    }\n  }\n  return $results;\n}",
  "    $output = [];\n    foreach ($game as $k => $v) {\n        $output[] = abs($v\
    \ - $guess[$k]);\n    }\n    return $output;\n}", "    $result = [];\n    for\
    \ ($i = 0; $i < count($game); $i++) {\n        $result[] = abs($game[$i] - $guess[$i]);\n\
    \    }\n    return $result;\n}", "    $result = [];\n    for ($i = 0; $i < count($game);\
    \ $i++) {\n        $score = abs($game[$i] - $guess[$i]);\n        $result[] =\
    \ $score == 0 ? 0 : $score;\n    }\n    return $result;\n}\n\n$game = [1, 2, 3,\
    \ 4, 5, 1];\n$guess = [1, 2, 3, 4, 2, -2];\nvar_dump(compare($game, $guess));",
  "\n}", "  $score = array();\n  foreach($game as $k => $v) {\n    $score[] = abs($v\
    \ - $guess[$k]);\n  }\n  return $score;\n}\n$game = array(1, 2, 3, 4, 5, 1);\n\
    $guess = array(1, 2, 3, 4, 2, -2);\nprint_r(compare($game, $guess));", "\t// your\
    \ code here\n}", "    $compare = [];\n    foreach($game as $key => $val) {\n \
    \       $compare[] = abs($val - $guess[$key]);\n    }\n    return $compare;\n\
    }\n\nvar_dump(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]));\nvar_dump(compare([0,\
    \ 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]));", "    $arr = [];\n    for ($i = 0; $i\
    \ < count($game); $i++) {\n        $arr[] = ($game[$i] == $guess[$i]) ? 0 : abs($game[$i]\
    \ - $guess[$i]);\n    }\n    return $arr;\n}\n", "    $difference = [];\n    for\
    \ ($i = 0; $i < count($game); $i++) {\n        $difference[] = abs($game[$i] -\
    \ $guess[$i]);\n    }\n    return $difference;\n}\n\necho '<pre>';\nprint_r(compare(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)));\necho '</pre>';\n\necho '<pre>';\n\
    print_r(compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2)));\necho '</pre>';",
  "    $results = [];\n    for ($i = 0; $i < count($game); $i++) {\n        $results[]\
    \ = ($game[$i] === $guess[$i]) ? 0 : abs($game[$i] - $guess[$i]);\n    }\n   \
    \ return $results;\n}", "    // Your code here\n}", "\tfor ($i=0; $i < count($game);\
    \ $i++) { \n\t\tif ($game[$i] != $guess[$i]) {\n\t\t\t$results[] = abs($game[$i]\
    \ - $guess[$i]);\n\t\t} else {\n\t\t\t$results[] = 0;\n\t\t}\n\t}\n\treturn $results;\n\
    }", "    $result = [];\n    for ($i = 0; $i < count($game); $i++) {\n        if\
    \ ($game[$i] === $guess[$i]) {\n            $result[] = 0;\n        } else {\n\
    \            $result[] = abs($game[$i] - $guess[$i]);\n        }\n    }\n    return\
    \ $result;\n}\n$game = [1, 2, 3, 4, 5, 1];\n$guess = [1, 2, 3, 4, 2, -2];\n\n\
    print_r(compare($game, $guess));", "  $results = [];\n  for ($i = 0; $i < count($game);\
    \ $i++) {\n    $results[] = abs($game[$i] - $guess[$i]);\n  }\n  return $results;\n\
    }\n$game = [1, 2, 3, 4, 5, 1];\n$guess = [1, 2, 3, 4, 2, -2];\nprint_r(compare($game,\
    \ $guess));", "    $array = [];\n    foreach($game as $key => $value) {\n    \
    \    if($game[$key] < 0) {\n            $game[$key] = -$game[$key];\n        }\n\
    \        if($guess[$key] < 0) {\n            $guess[$key] = -$guess[$key];\n \
    \       }\n        if($game[$key] === $guess[$key]) {\n            $array[] =\
    \ 0;\n        } else {\n            $array[] = abs($game[$key] - $guess[$key]);\n\
    \        }\n    }\n    return $array;\n}\n$game = [1, 2, 3, 4, 5, 1];\n$guess\
    \ = [1, 2, 3, 4, 2, -2];\nprint_r(compare($game, $guess));\necho \"<br>\";\n$game2\
    \ = [0, 5, 0, 0, 0, 4];\n$guess2 = [4, 1, 1, 0, 0, -2];\nprint_r(compare($game2,\
    \ $guess2));", "    $result = [];\n    foreach ($game as $index => $value) {\n\
    \        $result[] = abs($value - $guess[$index]);\n    }\n    return $result;\n\
    }\n", "    $result = [];\n    foreach ($game as $key => $value) {\n        $result[]\
    \ = abs($value - $guess[$key]);\n    }\n    return $result;\n}", "    $score =\
    \ array();\n    foreach($game as $key => $value) {\n        $score[$key] = abs($value\
    \ - $guess[$key]);\n    }\n    return $score;\n}", "    return array_map(function($score,\
    \ $guess) {\n        if ($score < 0 && $guess > 0) {\n            return abs($score)\
    \ + $guess;\n        }\n        if ($score > 0 && $guess < 0) {\n            return\
    \ abs($guess) + $score;\n        }\n        return abs($score - $guess);\n   \
    \ }, $game, $guess);\n}\n", "    $result = [];\n    for ($i = 0; $i < count($game);\
    \ $i++) {\n        if ($game[$i] > $guess[$i]) {\n            $result[] = $game[$i]\
    \ - $guess[$i];\n        } else {\n            $result[] = $guess[$i] - $game[$i];\n\
    \        }\n    }\n    return $result;\n}\n", "\t$res = array();\n\tforeach ($game\
    \ as $idx => $val) {\n\t\tif ($val == $guess[$idx]) {\n\t\t\t$res[] = 0;\n\t\t\
    } else {\n\t\t\t$res[] = abs($val - $guess[$idx]);\n\t\t}\n\t}\n\treturn $res;\n\
    }\n", "  $results = [];\n  $error = 'invalid inputs';\n  if (!is_array($game)\
    \ || !is_array($guess)) {\n    return $error;\n  }\n  for ($i = 0; $i < count($game);\
    \ $i++) {\n    if (!is_int($game[$i]) || !is_int($guess[$i])) {\n      return\
    \ $error;\n    }\n    $results[] = abs($game[$i] - $guess[$i]);\n  }\n  return\
    \ $results;\n}\n", "  $diff = [];\n  foreach ($game as $index => $score) {\n \
    \   $diff[] = abs($score - $guess[$index]);\n  }\n  return $diff;\n}\n", "   \
    \ $length = count($game);\n    $result = array();\n    for ($i = 0; $i < $length;\
    \ $i++) {\n        $diff = abs($game[$i] - $guess[$i]);\n        array_push($result,\
    \ $diff);\n    }\n    return $result;\n}", "    $result = [];\n    for ($i = 0;\
    \ $i < count($game); $i++) {\n        $result[] = ($game[$i] - $guess[$i] == 0)\
    \ ? 0 : abs($game[$i] - $guess[$i]);\n    }\n    return $result;\n}\n", "   $result\
    \ = array();\n   foreach($game as $key => $value) {\n      $result[] = abs($value\
    \ - $guess[$key]);\n   }\n   return $result;\n}\n", "    $result = [];\n    foreach\
    \ ($game as $key => $value) {\n        if ($value == $guess[$key]) {\n       \
    \     $result[] = 0;\n        } else {\n            $result[] = abs($value - $guess[$key]);\n\
    \        }\n    }\n    return $result;\n}\nprint_r(compare(array(1, 2, 3, 4, 5,\
    \ 1), array(1, 2, 3, 4, 2, -2)));", "    $diff = [];\n    foreach($game as $key\
    \ => $val) {\n        $diff[] = abs($guess[$key] - $val);\n    }\n    return $diff;\n\
    }\n", "    $result = [];\n    foreach($game as $key => $value) {\n        $result[]\
    \ = abs($value - $guess[$key]);\n    }\n    return $result;\n}\n", "  $output\
    \ = [];\n  foreach($game as $k => $v) {\n    $output[] = abs($v - $guess[$k]);\n\
    \  }\n  return $output;\n}\nprint_r(compare(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)));", "  return array_map(function($a, $b) {\n    return abs($a\
    \ - $b);\n  }, $game, $guess);\n}\n\nclass CompareCases extends TestCase {\n \
    \ public function testBasics() {\n    $this->assertEquals(compare([0, 5, 0, 0,\
    \ 0, 4], [4, 1, 1, 0, 0, -2]), [4, 4, 1, 0, 0, 6]);\n    $this->assertEquals(compare([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]), [0, 0, 0, 0, 3, 3]);\n    $this->assertEquals(compare([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 5, 5, -1]), [0, 0, 0, 1, 0, 2]);\n    $this->assertEquals(compare([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 5, -1]), [0, 0, 0, 0, 0, 2]);\n    $this->assertEquals(compare([-1,\
    \ -2, -3, -4, -5, -1], [-1, -2, -3, -4, -5, -1]), [0, 0, 0, 0, 0, 0]);\n    $this->assertEquals(compare([-1,\
    \ -2, -3, -4, -5, -1], [-1, -2, -3, -4, -5, 1]), [0, 0, 0, 0, 0, 2]);\n    $this->assertEquals(compare([-1,\
    \ -2, -3, -4, -5, -1], [-1, -2, -3, -4, -5, 0]), [0, 0, 0, 0, 0, 1]);\n    $this->assertEquals(compare([0,\
    \ 0, 0, 0, 0, 0], [0, 0, 0, 0, 0, 0]), [0, 0, 0, 0, 0, 0]);\n    $this->assertEquals(compare([1,\
    \ 2, 3, 4, 5", "    $result = [];\n    for ($i = 0; $i < count($game); $i++) {\n\
    \        if ($game[$i] == $guess[$i]) {\n            $result[] = 0;\n        }\
    \ else {\n            $result[] = abs($game[$i] - $guess[$i]);\n        }\n  \
    \  }\n    return $result;\n}\n", "  $result = [];\n  foreach($game as $key =>\
    \ $value) {\n    if ($value == $guess[$key]) {\n      $result[] = 0;\n    } else\
    \ {\n      $result[] = abs($value - $guess[$key]);\n    }\n  }\n  return $result;\n\
    }\n\necho \"Compare scores:<br>\";\necho implode(', ', compare(array(1, 2, 3,\
    \ 4, 5, 1), array(1, 2, 3, 4, 2, -2)));\n\necho \"<br><br>\";\n", "  $result =\
    \ [];\n  for ($i = 0; $i < count($game); $i++) {\n    if ($game[$i] === $guess[$i])\
    \ {\n      $result[] = 0;\n    } else {\n      $result[] = abs($game[$i] - $guess[$i]);\n\
    \    }\n  }\n  return $result;\n}\n", "  $points = [];\n  foreach ($game as $index\
    \ => $result) {\n    $points[] = abs($result - $guess[$index]);\n  }\n  return\
    \ $points;\n}\n", "    $output = [];\n    for ($i = 0; $i < count($game); $i++)\
    \ {\n        $score = $game[$i];\n        $g = $guess[$i];\n        if ($score\
    \ > $g) {\n            $diff = $score - $g;\n        } else {\n            $diff\
    \ = $g - $score;\n        }\n        array_push($output, $diff);\n    }\n    return\
    \ $output;\n}\necho '<pre>';\nvar_dump(compare(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)));\necho '</pre>';\necho '<pre>';\nvar_dump(compare(array(0,\
    \ 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2)));\necho '</pre>';", "\tfor ($i=0;\
    \ $i < count($game); $i++) { \n\t\t$result = $game[$i] - $guess[$i];\n\t\tif ($result\
    \ < 0) {\n\t\t\t$result = $result * -1;\n\t\t} else {\n\t\t\t$result = $result\
    \ * 1;\n\t\t}\n\t\t$guesses[] = $result;\n\t}\n\treturn $guesses;\n}", "    $result\
    \ = [];\n    $length = count($game);\n    for ($i = 0; $i < $length; $i++) {\n\
    \        $result[] = abs($game[$i] - $guess[$i]);\n    }\n    return $result;\n\
    }\n\n$game = [1, 2, 3, 4, 5, 1];\n$guess = [1, 2, 3, 4, 2, -2];\n\nprint_r(compare($game,\
    \ $guess));", "    return array_map(function($result, $prediction) {\n       \
    \ return $result == $prediction ? 0 : abs($result - $prediction);\n    }, $game,\
    \ $guess);\n}\n$game = array(0, 5, 0, 0, 0, 4);\n$guess = array(4, 1, 1, 0, 0,\
    \ -2);\nprint_r(compare($game, $guess));", "    $result = [];\n    for ($i = 0;\
    \ $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i]) {\n       \
    \     $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}", "  $res = [];\n \
    \ for ($i = 0; $i < count($game); $i++) {\n    if ($game[$i] != $guess[$i]) {\n\
    \      $res[] = abs($game[$i] - $guess[$i]);\n    } else {\n      $res[] = 0;\n\
    \    }\n  }\n  return $res;\n}\n", "    $result = [];\n    for ($i = 0; $i < count($game);\
    \ $i++) {\n        $result[] = abs($game[$i] - $guess[$i]);\n    }\n    return\
    \ $result;\n}", "  $game = array_values($game);\n  $guess = array_values($guess);\n\
    \  $result = [];\n  foreach ($game as $key => $value) {\n    $result[] = abs($value\
    \ - $guess[$key]);\n  }\n  return $result;\n}\n", "\n}\n", "  $result = [];\n\
    \  for ($i = 0; $i < count($game); $i++) {\n    if ($game[$i] === $guess[$i])\
    \ {\n      $result[] = 0;\n    } else {\n      $result[] = abs($game[$i] - $guess[$i]);\n\
    \    }\n  }\n  return $result;\n}\n\n$game = [0, 5, 0, 0, 0, 4];\n$guess = [4,\
    \ 1, 1, 0, 0, -2];\n\nprint_r(compare($game, $guess));", "  return array_map(function($el,\
    \ $el2) {\n    if ($el > $el2) return $el - $el2;\n    elseif ($el < $el2) return\
    \ $el2 - $el;\n    else return 0;\n  }, $game, $guess);\n}\n", "    $result =\
    \ [];\n    for ($i = 0; $i < count($game); $i++) {\n        $result[] = abs($game[$i]\
    \ - $guess[$i]);\n    }\n    return $result;\n}\n\necho implode(', ', compare([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]));", "    $count = count($game);\n    $result\
    \ = [];\n    for ($i = 0; $i < $count; $i++) {\n        $diff = abs($game[$i]\
    \ - $guess[$i]);\n        $result[] = $diff;\n    }\n    return $result;\n}\n",
  "  $results = [];\n  for ($i = 0; $i < count($game); $i++) {\n    if ($game[$i]\
    \ === $guess[$i]) {\n      $results[] = 0;\n    } else {\n      $results[] = abs($game[$i]\
    \ - $guess[$i]);\n    }\n  }\n  return $results;\n}\n\n$game1 = [1, 2, 3, 4, 5,\
    \ 1];\n$guess1 = [1, 2, 3, 4, 2, -2];\n\n$game2 = [0, 5, 0, 0, 0, 4];\n$guess2\
    \ = [4, 1, 1, 0, 0, -2];\n\nvar_dump(compare($game1, $guess1));", "  return array_map(function($v,\
    \ $i) use ($game) {\n    return $v - $game[$i];\n  }, $guess, array_keys($guess));\n\
    }", "    // your code here\n    $result = [];\n    foreach($game as $index =>\
    \ $score) {\n        if($score == $guess[$index]) {\n            $result[] = 0;\n\
    \        } else {\n            $result[] = abs($score - $guess[$index]);\n   \
    \     }\n    }\n    return $result;\n}\n", "  $match = [];\n  $score = [];\n \
    \ $i = 0;\n  while ($i < count($game)) {\n    if ($game[$i] == $guess[$i]) {\n\
    \      $match[] = 0;\n    } else {\n      $match[] = abs($game[$i] - $guess[$i]);\n\
    \    }\n    $i++;\n  }\n  return $match;\n}\nprint_r(compare(array(1, 2, 3, 4,\
    \ 5, 1), array(1, 2, 3, 4, 2, -2)));\necho \"<br>\";\nprint_r(compare(array(0,\
    \ 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2)));", "  $result = [];\n  for ($i =\
    \ 0; $i < count($game); $i++) {\n    $result[] = abs($game[$i] - $guess[$i]);\n\
    \  }\n  return $result;\n}", "  $diff = array();\n  foreach ($game as $i => $score)\
    \ {\n    $diff[] = abs($guess[$i] - $score);\n  }\n  return $diff;\n}\n\n/*\n\
    \ * Tests.\n */\n\n$test1 = array(\n  'game' => array(1, 2, 3, 4, 5, 1),\n  'guess'\
    \ => array(1, 2, 3, 4, 2, -2),\n  'expected' => array(0, 0, 0, 0, 3, 3)\n);\n\n\
    $test2 = array(\n  'game' => array(0, 5, 0, 0, 0, 4),\n  'guess' => array(4, 1,\
    \ 1, 0, 0, -2),\n  'expected' => array(4, 4, 1, 0, 0, 6)\n);\n\n$tests = array($test1,\
    \ $test2);\n\nforeach ($tests as $test) {\n  if (assert(compare($test['game'],\
    \ $test['guess']) === $test['expected'])) {\n    echo 'Test passed!';\n  }\n \
    \ else {\n    echo 'Test failed!';\n  }\n  echo \"\\n\";\n}", "\tfor ($i=0; $i\
    \ < count($game); $i++) { \n\t\t$output[$i] = ($game[$i] - $guess[$i]);\n\t\t\
    $output[$i] = abs($output[$i]);\n\t}\n\treturn $output;\n}\n\n$game = array(1,\
    \ 2, 3, 4, 5, 1);\n$guess = array(1, 2, 3, 4, 2, -2);\n\n$game2 = array(0, 5,\
    \ 0, 0, 0, 4);\n$guess2 = array(4, 1, 1, 0, 0, -2);\n\n$game3 = array(5,5,5,5,5,5);\n\
    $guess3 = array(5,5,5,5,5,5);\n\necho \"<pre>\";\nprint_r(compare($game, $guess));\n\
    echo \"</pre>\";\n\necho \"<pre>\";\nprint_r(compare($game2, $guess2));\necho\
    \ \"</pre>\";\n\necho \"<pre>\";\nprint_r(compare($game3, $guess3));\necho \"\
    </pre>\";\n", "    $diff = [];\n    foreach ($game as $key => $value) {\n    \
    \    $diff[] = abs($value - $guess[$key]);\n    }\n    return $diff;\n}", "\t\
    $result = array();\n\tfor ($i = 0; $i < count($game); $i++) {\n\t\t$current =\
    \ abs($game[$i] - $guess[$i]);\n\t\tarray_push($result, $current);\n\t}\n\treturn\
    \ $result;\n}", "  $return = array();\n  for ($i = 0; $i < count($game); $i++)\
    \ {\n    if ($game[$i] > $guess[$i]) {\n      $return[] = $game[$i] - $guess[$i];\n\
    \    } elseif ($game[$i] < $guess[$i]) {\n      $return[] = $guess[$i] - $game[$i];\n\
    \    } else {\n      $return[] = 0;\n    }\n  }\n  return $return;\n}\n", "  \
    \  return array_map(function($score, $guess) {\n        if ($score > $guess) {\n\
    \            return $score - $guess;\n        } else {\n            return $guess\
    \ - $score;\n        }\n    }, $game, $guess);\n}\necho implode(compare(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)));", "    return array_map(function($game,\
    \ $guess) {\n        return abs($game - $guess);\n    }, $game, $guess);\n}\n\n\
    compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]);\ncompare([0, 5, 0, 0, 0, 4],\
    \ [4, 1, 1, 0, 0, -2]);", "\n}", "  foreach ($game as $key => $value) {\n    if\
    \ ($value - $guess[$key] < 0) {\n      $diff[] = abs($value - $guess[$key]);\n\
    \    } else {\n      $diff[] = $value - $guess[$key];\n    }\n  }\n  return $diff;\n\
    }\nprint_r(compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)));", "  $result\
    \ = [];\n  $len = count($game);\n  for ($i = 0; $i < $len; $i++) {\n    $result[]\
    \ = abs($game[$i] - $guess[$i]);\n  }\n  return $result;\n}\necho implode(', ',\
    \ compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]));\necho \"<br>\";\necho implode(',\
    \ ', compare([0, 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]));", "\t$result = array();\n\
    \tforeach ($game as $index => $value) {\n\t\t$result[] = abs($value - $guess[$index]);\n\
    \t}\n\treturn $result;\n}\n", "  $result = [];\n  $i = 0;\n  while($i < count($game))\
    \ {\n    if($game[$i] !== $guess[$i]) {\n      array_push($result, abs($game[$i]\
    \ - $guess[$i]));\n    } else {\n      array_push($result, 0);\n    }\n    $i++;\n\
    \  }\n  return $result;\n}", "\t$result = array();\n\tfor ($i = 0; $i < count($game);\
    \ $i++) {\n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\t$result[] = 0;\n\t\t} else\
    \ {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\t\t}\n\t}\n\treturn $result;\n\
    }\n", "\t$result = array();\n\tfor ($i = 0; $i < count($game); $i++) {\n\t\t$x\
    \ = abs($game[$i] - $guess[$i]);\n\t\tarray_push($result, $x);\n\t}\n\treturn\
    \ $result;\n}\n", "    $results = [];\n    foreach ($game as $key => $value) {\n\
    \        $results[] = abs($value - $guess[$key]);\n    }\n    return $results;\n\
    }\n", "  // not sure if i need this, \n  // but i dont want to use string keys\
    \ on my associative array\n  $game_count = count($game);\n  $guess_count = count($guess);\n\
    \  if($game_count !== $guess_count) {\n    throw new Exception(\"Length of arrays\
    \ must be the same\");\n  }\n  // starting my associative array\n  $comparison\
    \ = array();\n  // interating through the items and comparing them\n  for($i =\
    \ 0; $i < $game_count; $i++) {\n    $comparison[$i] = abs($game[$i] - $guess[$i]);\n\
    \  }\n  return $comparison;\n}\n", "  return array_map(function($a, $b) {\n  \
    \  return $a != $b ? abs($a - $b) : 0;\n  }, $game, $guess);\n}\n\nprint_r(compare(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)));\nprint_r(compare(array(0, 5, 0,\
    \ 0, 0, 4), array(4, 1, 1, 0, 0, -2)));", "  $result = [];\n  foreach ($game as\
    \ $index => $value) {\n    if ($value === $guess[$index]) {\n      $result[] =\
    \ 0;\n    } else {\n      $result[] = abs($value - $guess[$index]);\n    }\n \
    \ }\n  return $result;\n}\necho '<pre>';\nvar_dump(compare(array(1, 2, 3, 4, 5,\
    \ 1), array(1, 2, 3, 4, 2, -2)));\nvar_dump(compare(array(0, 5, 0, 0, 0, 4), array(4,\
    \ 1, 1, 0, 0, -2)));\necho '</pre>';\n", "  $result = [];\n  for ($i = 0; $i <\
    \ count($game); $i++) {\n    if ($game[$i] == $guess[$i]) {\n      $result[] =\
    \ 0;\n    } else {\n      $result[] = abs($game[$i] - $guess[$i]);\n    }\n  }\n\
    \  return $result;\n}\n\n$game = [1, 2, 3, 4, 5, 1];\n$guess = [1, 2, 3, 4, 2,\
    \ -2];\nprint_r(compare($game, $guess));", "    $result = [];\n    for ($i = 0;\
    \ $i < count($game); $i++) {\n        if ($game[$i] > $guess[$i]) {\n        \
    \    $result[] = $game[$i] - $guess[$i];\n        } elseif ($game[$i] < $guess[$i])\
    \ {\n            $result[] = $guess[$i] - $game[$i];\n        } else {\n     \
    \       $result[] = 0;\n        }\n    }\n    return $result;\n}\n$game = [0,\
    \ 5, 0, 0, 0, 4];\n$guess = [4, 1, 1, 0, 0, -2];\n$result = compare($game, $guess);\n\
    var_dump($result);", "    $diff = [];\n    for ($i = 0; $i < count($game); $i++)\
    \ {\n        $diff[] = abs($game[$i] - $guess[$i]);\n    }\n    return $diff;\n\
    }\n", "    $count = count($game);\n    for ($i = 0; $i < $count; $i++) {\n   \
    \     $guess[$i] = abs($game[$i] - $guess[$i]);\n    }\n    return $guess;\n}",
  "\t$result = array();\n\tfor ($i = 0; $i < count($game); $i++) {\n\t\t$result[$i]\
    \ = abs($game[$i] - $guess[$i]);\n\t}\n\treturn $result;\n}\n\n$game = array(1,\
    \ 2, 3, 4, 5, 1);\n$guess = array(1, 2, 3, 4, 2, -2);\nprint_r(compare($game,\
    \ $guess));", "    $result = [];\n    foreach ($game as $key => $value) {\n  \
    \      if ($value == $guess[$key]) {\n            $result[] = 0;\n        } else\
    \ {\n            $result[] = abs($value - $guess[$key]);\n        }\n    }\n \
    \   return $result;\n}\n\nprint_r(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2,\
    \ -2]));", "  $results = [];\n  for ($i = 0; $i < count($game); $i++) {\n    if\
    \ ($game[$i] == $guess[$i]) {\n      $results[] = 0;\n    } else {\n      $results[]\
    \ = abs($game[$i] - $guess[$i]);\n    }\n  }\n  return $results;\n}", "  $result\
    \ = [];\n  for ($i = 0; $i < count($game); $i++) {\n    if ($game[$i] === $guess[$i])\
    \ {\n      $result[] = 0;\n    } else {\n      $result[] = abs($game[$i] - $guess[$i]);\n\
    \    }\n  }\n  return $result;\n}\n\nvar_dump(compare([1, 2, 3, 4, 5, 1], [1,\
    \ 2, 3, 4, 2, -2])); // [0, 0, 0, 0, 3, 3]\nvar_dump(compare([0, 5, 0, 0, 0, 4],\
    \ [4, 1, 1, 0, 0, -2])); // [4, 4, 1, 0, 0, 6]", "  $result = [];\n  foreach ($game\
    \ as $key => $value) {\n    if ($value > $guess[$key]) {\n      $result[] = $value\
    \ - $guess[$key];\n    } elseif ($value < $guess[$key]) {\n      $result[] = $guess[$key]\
    \ - $value;\n    } else {\n      $result[] = 0;\n    }\n  }\n  return $result;\n\
    }", "\t$result = array();\n\tfor ($i = 0; $i < count($game); $i++) {\n\t\tif ($game[$i]\
    \ == $guess[$i]) {\n\t\t\t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i]\
    \ - $guess[$i]);\n\t\t}\n\t}\n\treturn $result;\n}", "    // first, we need to\
    \ see what each player got.\n    // the difference is how much the guess is off.\n\
    \    $result = [];\n    foreach ($game as $key => $value) {\n        $result[]\
    \ = abs($value - $guess[$key]);\n    }\n    return $result;\n}\n\nprint_r(compare([1,\
    \ 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]));\nprint_r(compare([0, 5, 0, 0, 0, 4],\
    \ [4, 1, 1, 0, 0, -2]));", "    //loop through the arrays comparing the data and\
    \ returning the absolute value\n    //difference between the two. If the values\
    \ are the same, then return 0\n    $results = array();\n    for($i = 0; $i < count($game);\
    \ $i++) {\n        $results[] = ($game[$i] == $guess[$i]) ? 0 : abs($game[$i]\
    \ - $guess[$i]);\n    }\n    return $results;\n}", "\t$result = array();\n\t\n\
    \tfor ($i = 0; $i < count($game); $i++) {\n\t\t$result[$i] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\t\n\treturn $result;\n}\n\n$game1 = array(1, 2, 3, 4, 5, 1);\n$guess1 =\
    \ array(1, 2, 3, 4, 2, -2);\n\n$game2 = array(0, 5, 0, 0, 0, 4);\n$guess2 = array(4,\
    \ 1, 1, 0, 0, -2);\n\necho implode(', ', compare($game1, $guess1)) . \"\\n\";\n\
    echo implode(', ', compare($game2, $guess2)) . \"\\n\";", "\t$data = [];\n\tfor\
    \ ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\
    \t$data[] = 0;\n\t\t} else {\n\t\t\t$data[] = abs($game[$i] - $guess[$i]);\n\t\
    \t}\n\t}\n\treturn $data;\n}\n\nprint_r(compare(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)));\necho \"<br>\";\nprint_r(compare(array(0, 5, 0, 0, 0, 4),\
    \ array(4, 1, 1, 0, 0, -2)));", "\t$array = array();\n\tforeach($game as $key\
    \ => $value) {\n\t\tif($value == $guess[$key]) {\n\t\t\t$array[] = 0;\n\t\t} else\
    \ {\n\t\t\t$array[] = abs($value - $guess[$key]);\n\t\t}\n\t}\n\treturn $array;\n\
    }\n$arrayGame = array(1, 2, 3, 4, 5, 1);\n$arrayGuess = array(1, 2, 3, 4, 2, -2);\n\
    print_r(compare($arrayGame, $arrayGuess));\necho \"<br>\";\n$arrayGame = array(0,\
    \ 5, 0, 0, 0, 4);\n$arrayGuess = array(4, 1, 1, 0, 0, -2);\nprint_r(compare($arrayGame,\
    \ $arrayGuess));\necho \"<br>\";\n$arrayGame = array(1, 2, 3, 4, 5, 1);\n$arrayGuess\
    \ = array(1, 2, 3, 4, -2, -2);\nprint_r(compare($arrayGame, $arrayGuess));\necho\
    \ \"<br>\";\n$arrayGame = array(1, 2, 3, 4, 5, 1);\n$arrayGuess = array(1, 2,\
    \ 3, 4, -2, 2);\nprint_r(compare($arrayGame, $arrayGuess));\necho \"<br>\";\n\
    $arrayGame = array(1, 2, 3, 4, 5, 1);\n$arrayGuess = array(1, 2, 3, 4, 5, -2);\n\
    print_r(compare($arrayGame, $arrayGuess));\necho \"<br>\";\n$arrayGame = array(1,\
    \ 2, 3, 4, 5, 1);\n$arrayGuess = array(1, 2, 3, 4, 5, 2);\nprint_r(compare($arrayGame,\
    \ $arrayGuess));\necho \"<br>\";\n$arrayGame = array(0, 5, 0, 0, 0, 4);\n$arrayGuess\
    \ = array(4, 1, 1, 0, 0, -2);\nprint_r(compare($arrayGame, $arrayGu", "  $result\
    \ = [];\n  foreach($game as $key => $g) {\n    $result[] = abs($g - $guess[$key]);\n\
    \  }\n  return $result;\n}", "\t$score = array();\n\t$game_count = count($game);\n\
    \tfor ($i = 0; $i < $game_count; $i++) {\n\t\t$diff = abs($game[$i] - $guess[$i]);\n\
    \t\t$score[] = $diff;\n\t}\n\treturn $score;\n}\n$game = array(1, 2, 3, 4, 5,\
    \ 1);\n$guess = array(1, 2, 3, 4, 2, -2);\necho \"game: (\" . implode(\", \",\
    \ $game) . \")\\n\";\necho \"guess: (\" . implode(\", \", $guess) . \")\\n\";\n\
    $result = compare($game, $guess);\necho \"score: (\" . implode(\", \", $result)\
    \ . \")\\n\";", "  $results = [];\n  for ($i = 0; $i < count($game); $i++) {\n\
    \    $results[] = abs($game[$i] - $guess[$i]);\n  }\n  return $results;\n}", " \
    \ return array_map(function($v, $k) use ($game, $guess) {\n    return abs($game[$k]\
    \ - $guess[$k]);\n  }, $game, array_keys($game));\n}\n", "    $result = [];\n\
    \    foreach ($game as $key => $value) {\n        $result[] = abs($value - $guess[$key]);\n\
    \    }\n    return $result;\n}\n", "    $results = [];\n    for ($i = 0; $i <\
    \ count($game); $i++) {\n        $results[] = abs($game[$i] - $guess[$i]);\n \
    \   }\n    return $results;\n}\n", "    $result = [];\n    $game_count = count($game);\n\
    \    for ($i = 0; $i < $game_count; $i++) {\n        if ($game[$i] == $guess[$i])\
    \ {\n            $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\n", "    $n = count($game);\n\
    \    $result = array();\n    for ($i = 0; $i < $n; $i++) {\n        $result[$i]\
    \ = abs($game[$i] - $guess[$i]);\n    }\n    return $result;\n}\necho json_encode(compare(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)));", "    $game = array_map('abs',\
    \ $game);\n    $guess = array_map('abs', $guess);\n    $result = [];\n    foreach\
    \ ($game as $key => $value) {\n        $result[] = $value - $guess[$key];\n  \
    \  }\n    return $result;\n}", "  $result = [];\n  for ($i = 0; $i < count($game);\
    \ $i++) {\n    $result[] = abs($game[$i] - $guess[$i]);\n  }\n  return $result;\n\
    }\n", "  $mismatch = array();\n  for ($i = 0; $i < count($game); $i++) {\n   \
    \ $mismatch[] = abs($game[$i] - $guess[$i]);\n  }\n  return $mismatch;\n}", " \
    \   $result = [];\n    for ($i = 0; $i < count($game); $i++) {\n        $result[]\
    \ = $game[$i] - $guess[$i];\n    }\n    return $result;\n}\n", "  $result = [];\n\
    \  foreach($game as $key => $value) {\n    $result[] = abs($value - $guess[$key]);\n\
    \  }\n  return $result;\n}\n", "    $result = [];\n    for ($i = 0; $i < count($game);\
    \ $i++) {\n        $result[] = $game[$i] - $guess[$i];\n    }\n    return $result;\n\
    }", "    for ($i = 0; $i < count($game); $i++) {\n        $comparison[] = abs($game[$i]\
    \ - $guess[$i]);\n    }\n    return $comparison;\n}\nprint_r(compare(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)));", "    $result = [];\n    for ($i\
    \ = 0; $i < count($game); $i++) {\n        $result[] = abs($game[$i] - $guess[$i]);\n\
    \    }\n    return $result;\n}\n", "    $result = [];\n    foreach ($game as $key\
    \ => $value) {\n        $result[] = abs($game[$key] - $guess[$key]);\n    }\n\
    \    return $result;\n}\n$game = [0, 5, 0, 0, 0, 4];\n$guess = [4, 1, 1, 0, 0,\
    \ -2];\n\nprint_r(compare($game, $guess));", "\t$result = array();\n\tfor ($i\
    \ = 0; $i < count($game); $i++) {\n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\t\
    $result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}\n", "   $result = array();\n   for ($i = 0; $i\
    \ < count($game); $i++) {\n     if ($game[$i] == $guess[$i]) {\n       $result[]\
    \ = 0;\n     } else {\n       $result[] = abs($game[$i] - $guess[$i]);\n     }\n\
    \   }\n   return $result;\n}\n\necho \"expect: 1,1,1,1,3,3\\n\";\nprint_r(compare(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)));\necho \"expect: 4,4,1,0,0,6\\n\"\
    ;\nprint_r(compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2)));\necho\
    \ \"expect: 3,3,3,3,1,1\\n\";\nprint_r(compare(array(3, 2, 1, 0, 1, 2), array(3,\
    \ 2, 1, 0, 3, 3)));\necho \"expect: 1,1,1,1,1,1\\n\";\nprint_r(compare(array(1,\
    \ 2, 3, 4, 5, 6), array(1, 2, 3, 4, 5, 6)));\necho \"expect: 0,0,0,0,0,0\\n\"\
    ;\nprint_r(compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 5, 1)));\necho \"\
    expect: 0,0,0,0,0,0\\n\";\nprint_r(compare(array(1, 2, 3, 4, 5, 1), array(1, 2,\
    \ 3, 4, 5, 1)));\necho \"expect: 2,1,1,1,1,1\\n\";\nprint_r(compare(array(0, 2,\
    \ 0, 4, 0, 6), array(2, 2, 2, 4, 2, 2)));\necho \"expect: 0,1,2,3,4,0\\", "  \
    \  $result = [];\n    for ($i = 0; $i < count($game); $i++) {\n        $result[]\
    \ = abs($game[$i] - $guess[$i]);\n    }\n    return $result;\n}", "    $results\
    \ = [];\n    $size = count($game);\n    for ($i = 0; $i < $size; $i++) {\n   \
    \     $results[] = abs($game[$i] - $guess[$i]);\n    }\n    return $results;\n\
    }\n$game = [0, 5, 0, 0, 0, 4];\n$guess = [4, 1, 1, 0, 0, -2];\n$res = compare($game,\
    \ $guess);\nprint_r($res);", "  $arr = [];\n  for ($i = 0; $i < count($game);\
    \ $i++) {\n    if ($game[$i] > $guess[$i]) {\n      $arr[] = $game[$i] - $guess[$i];\n\
    \    } else if ($game[$i] < $guess[$i]) {\n      $arr[] = $guess[$i] - $game[$i];\n\
    \    } else {\n      $arr[] = 0;\n    }\n  }\n  return $arr;\n}\n", "   //your\
    \ code here\n   $out = [];\n   $len = count($game);\n   for ($i = 0; $i < $len;\
    \ $i++) {\n      if ($game[$i] == $guess[$i])\n         $out[] = 0;\n      else\n\
    \         $out[] = abs($game[$i] - $guess[$i]);\n   }\n   return $out;\n}\n",
  "  $array = [];\n  $i = 0;\n  while($i < count($game)) {\n    $array[] = abs($game[$i]\
    \ - $guess[$i]);\n    $i++;\n  }\n  return $array;\n}", "  $compare = [];\n  for\
    \ ($i = 0; $i < count($game); $i++) {\n    $compare[] = abs($game[$i] - $guess[$i]);\n\
    \  }\n  return $compare;\n}\necho \"<pre>\";\nprint_r(compare(array(1, 2, 3, 4,\
    \ 5, 1), array(1, 2, 3, 4, 2, -2)));\necho \"</pre>\";\necho \"<pre>\";\nprint_r(compare(array(0,\
    \ 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2)));\necho \"</pre>\";", "  $result =\
    \ [];\n  for ($i = 0; $i < count($game); $i++) {\n    if ($game[$i] > $guess[$i])\
    \ {\n      $result[] = $game[$i] - $guess[$i];\n    } else if ($game[$i] < $guess[$i])\
    \ {\n      $result[] = $guess[$i] - $game[$i];\n    } else {\n      $result[]\
    \ = 0;\n    }\n  }\n  return $result;\n}", "    $results = [];\n    for ($i =\
    \ 0; $i < count($game); $i++) {\n        if ($game[$i] < 0) {\n            $game[$i]\
    \ = 0;\n        }\n        if ($guess[$i] < 0) {\n            $guess[$i] = 0;\n\
    \        }\n        if ($game[$i] == $guess[$i]) {\n            $results[] = 0;\n\
    \        } else {\n            $results[] = abs($game[$i] - $guess[$i]);\n   \
    \     }\n    }\n    return $results;\n}", "    $res = [];\n    for ($i = 0; $i\
    \ < count($game); $i++) {\n        if ($game[$i] === $guess[$i]) {\n         \
    \   $res[] = 0;\n        } else {\n            $res[] = abs($game[$i] - $guess[$i]);\n\
    \        }\n    }\n    return $res;\n}\n\n$game = [1, 2, 3, 4, 5, 1];\n$guess\
    \ = [1, 2, 3, 4, 2, -2];\n$res = compare($game, $guess);\nprint_r($res);", " \
    \ //your code here\n}", "\t$ret = array();\n\tfor ($i = 0; $i < count($game);\
    \ $i++) {\n\t\t$ret[] = ($game[$i] == $guess[$i]) ? 0 : abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $ret;\n}\n$game = array(1, 2, 3, 4, 5, 1);\n$guess = array(1, 2,\
    \ 3, 4, 2, -2);\n\n$game = array(0, 5, 0, 0, 0, 4);\n$guess = array(4, 1, 1, 0,\
    \ 0, -2);\n\nvar_dump(compare($game, $guess));", "    $diff = [];\n    for ($i\
    \ = 0; $i < count($game); $i++) {\n        $diff[] = abs($game[$i] - $guess[$i]);\n\
    \    }\n    return $diff;\n}\n\necho implode(compare([1, 2, 3, 4, 5, 1], [1, 2,\
    \ 3, 4, 2, -2]), ',') . PHP_EOL;\necho implode(compare([0, 5, 0, 0, 0, 4], [4,\
    \ 1, 1, 0, 0, -2]), ',') . PHP_EOL;", "    // Your code here\n    return array_map(function($a,\
    \ $b) { return $a === $b ? 0 : abs($a - $b); }, $game, $guess);\n}\n", "  for\
    \ ($i = 0; $i < count($game); $i++) {\n    $guess[$i] = abs($game[$i] - $guess[$i]);\n\
    \  }\n  return $guess;\n}\n\n$game = array(1, 2, 3, 4, 5, 1);\n$guess = array(1,\
    \ 2, 3, 4, 2, -2);\n\nprint_r(compare($game, $guess));", "\t$results = array();\n\
    \tforeach($game as $key => $value) {\n\t\tif ($value == $guess[$key]) {\n\t\t\t\
    $results[] = 0;\n\t\t} else {\n\t\t\t$results[] = abs($value - $guess[$key]);\n\
    \t\t}\n\t}\n\treturn $results;\n}", "  $len = count($game);\n  $output = array();\n\
    \  for ($i = 0; $i < $len; $i++) {\n    $output[] = abs($game[$i] - $guess[$i]);\n\
    \  }\n  return $output;\n}\n\n$game = array(1, 2, 3, 4, 5, 1);\n$guess = array(1,\
    \ 2, 3, 4, 2, -2);\necho implode(', ', compare($game, $guess));", "\t$return =\
    \ array();\n\tfor ($i = 0; $i < count($game); $i++) {\n\t\t$return[] = abs($game[$i]\
    \ - $guess[$i]);\n\t}\n\treturn $return;\n}\n", "\t$result = array();\n\tfor ($i\
    \ = 0; $i < count($game); $i++) {\n\t\tif ($game[$i] == $guess[$i]) {\n\t\t\t\
    $result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i] - $guess[$i]);\n\
    \t\t}\n\t}\n\treturn $result;\n}", "    foreach($game as $key => $score) {\n \
    \       $diff = $score - $guess[$key];\n        $abs_diff = abs($diff);\n    \
    \    $output[] = $abs_diff;\n    }\n    return $output;\n}\n\n$game = array(1,\
    \ 2, 3, 4, 5, 1);\n$guess = array(1, 2, 3, 4, 2, -2);\necho implode(', ', compare($game,\
    \ $guess)) . PHP_EOL;\n\n$game = array(0, 5, 0, 0, 0, 4);\n$guess = array(4, 1,\
    \ 1, 0, 0, -2);\necho implode(', ', compare($game, $guess)) . PHP_EOL;", "  $compare\
    \ = [];\n  foreach ($game as $key => $value) {\n    $compare[] = abs($game[$key]\
    \ - $guess[$key]);\n  }\n  return $compare;\n}\n", "    $result = [];\n    $length\
    \ = count($game);\n    for ($i = 0; $i < $length; $i++) {\n        $result[] =\
    \ abs($game[$i] - $guess[$i]);\n    }\n    return $result;\n}\n", "  $result =\
    \ [];\n  $count = count($game);\n  for ($i = 0; $i < $count; $i++) {\n    if ($game[$i]\
    \ != $guess[$i]) {\n      $result[] = abs($game[$i] - $guess[$i]);\n    } else\
    \ {\n      $result[] = 0;\n    }\n  }\n  return $result;\n}\nprint_r(compare(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)));\nprint_r(compare(array(0, 5, 0,\
    \ 0, 0, 4), array(4, 1, 1, 0, 0, -2)));", "    // i'm sure there is a pretty straightforward\
    \ way to do this\n    // i hope someone will let me know in the comments :)\n\
    \    foreach($game as $idx => $score) {\n        $guessDiff[] = abs($guess[$idx]\
    \ - $score);\n    }\n    return $guessDiff;\n}", "  $diff = [];\n  for ($i = 0;\
    \ $i < count($game); $i++) {\n    if ($game[$i] > $guess[$i]) {\n      $diff[]\
    \ = $game[$i] - $guess[$i];\n    } else {\n      $diff[] = $guess[$i] - $game[$i];\n\
    \    }\n  }\n  return $diff;\n}", "    $result = [];\n    for ($i = 0; $i < count($game);\
    \ $i++) {\n        if ($game[$i] == $guess[$i]) {\n            $result[] = 0;\n\
    \        } else {\n            $result[] = abs($game[$i] - $guess[$i]);\n    \
    \    }\n    }\n    return $result;\n}", "  $results = [];\n  foreach($game as\
    \ $key => $value) {\n    $results[] = abs($value - $guess[$key]);\n  }\n  return\
    \ $results;\n}", "    $res = [];\n    foreach($game as $i => $item) {\n      \
    \  $res[] = abs($item - $guess[$i]);\n    }\n    return $res;\n}", "  $results\
    \ = [];\n  for ($i = 0; $i < count($game); $i++) {\n    $results[] = abs($game[$i]\
    \ - $guess[$i]);\n  }\n  return $results;\n}", "    $result = [];\n    for ($i\
    \ = 0; $i < count($game); $i++) {\n        if ($game[$i] == $guess[$i]) {\n  \
    \          $result[] = 0;\n        } else {\n            $result[] = abs($game[$i]\
    \ - $guess[$i]);\n        }\n    }\n    return $result;\n}\necho '<pre>';\nvar_dump(compare(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)));\nvar_dump(compare(array(0, 5, 0,\
    \ 0, 0, 4), array(4, 1, 1, 0, 0, -2)));\necho '</pre>';\n", "\t$final = array();\n\
    \t$count = count($game);\n\tfor ($i = 0; $i < $count; $i++) {\n\t\tif ($game[$i]\
    \ != $guess[$i]) {\n\t\t\t$final[] = abs($game[$i] - $guess[$i]);\n\t\t} else\
    \ {\n\t\t\t$final[] = 0;\n\t\t}\n\t}\n\treturn $final;\n}\necho '<pre>';\nprint_r(compare(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)));\nprint_r(compare(array(0, 5, 0,\
    \ 0, 0, 4), array(4, 1, 1, 0, 0, -2)));\necho '</pre>';\n", "    $result = [];\n\
    \    foreach($game as $key => $g) {\n        $result[] = abs($g - $guess[$key]);\n\
    \    }\n    return $result;\n}\necho '<pre>';\nprint_r(compare(array(1, 2, 3,\
    \ 4, 5, 1), array(1, 2, 3, 4, 2, -2)));\necho '</pre>';\n", "    $newArr = [];\n\
    \    $length = count($game);\n    for ($i = 0; $i < $length; $i++) {\n       \
    \ if ($game[$i] > $guess[$i]) {\n            $newArr[] = $game[$i] - $guess[$i];\n\
    \        } elseif ($game[$i] < $guess[$i]) {\n            $newArr[] = $guess[$i]\
    \ - $game[$i];\n        } else {\n            $newArr[] = 0;\n        }\n    }\n\
    \    return $newArr;\n}", "  $score = [];\n  for ($i = 0; $i < count($game); $i++){\n\
    \    if ($game[$i] == $guess[$i]){\n      $score[] = 0;\n    } else if ($game[$i]\
    \ < $guess[$i]){\n      $score[] = $guess[$i] - $game[$i];\n    } else {\n   \
    \   $score[] = $game[$i] - $guess[$i];\n    }\n  }\n  return $score;\n}\n", " \
    \   $guess_off = [];\n    for ($i = 0; $i < count($game); $i++) {\n        if\
    \ ($game[$i] != $guess[$i]) {\n            $guess_off[] = abs($game[$i] - $guess[$i]);\n\
    \        } else {\n            $guess_off[] = 0;\n        }\n    }\n    return\
    \ $guess_off;\n}\n", "  $result = [];\n  foreach ($game as $key => $value) {\n\
    \    $diff = abs($value - $guess[$key]);\n    array_push($result, $diff);\n  }\n\
    \  return $result;\n}\n$result = compare(array(1, 2, 3, 4, 5, 1), array(1, 2,\
    \ 3, 4, 2, -2));\nprint_r($result);", "    $result = [];\n    $count = count($game);\n\
    \    for ($i = 0; $i < $count; $i++) {\n        $result[] = abs($game[$i] - $guess[$i]);\n\
    \    }\n    return $result;\n}", "    $results = [];\n    for ($i = 0; $i < count($game);\
    \ $i++) {\n        $results[] = abs($game[$i] - $guess[$i]);\n    }\n    return\
    \ $results;\n}\n\n$game = [1, 2, 3, 4, 5, 1];\n$guess = [1, 2, 3, 4, 2, -2];\n\
    print_r(compare($game, $guess));\n", "  $arr = [];\n  for ($i = 0; $i < count($game);\
    \ $i++) {\n    if ($game[$i] == $guess[$i]) {\n      $arr[] = 0;\n    } else {\n\
    \      $arr[] = abs($game[$i] - $guess[$i]);\n    }\n  }\n  return $arr;\n}",
  "  // your code here\n}\n", "    $output = [];\n    foreach($game as $key => $value)\
    \ {\n        $output[] = abs($value - $guess[$key]);\n    }\n    return $output;\n\
    }\n", "  // Your code here\n}\n$game = array(1, 2, 3, 4, 5, 1);\n$guess = array(1,\
    \ 2, 3, 4, 2, -2);\nprint_r(compare($game, $guess));", "    $finalArray = [];\n\
    \    foreach ($game as $key => $gameScore) {\n        $guessScore = $guess[$key];\n\
    \        if ($gameScore == $guessScore) {\n            $finalArray[] = 0;\n  \
    \      } else {\n            $difference = abs($gameScore - $guessScore);\n  \
    \          $finalArray[] = $difference;\n        }\n    }\n    return $finalArray;\n\
    }\n$answer = compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2));\nvar_dump($answer);",
  "  foreach ($game as $key => $value) {\n    if ($value == $guess[$key]) {\n    \
    \  $result[] = 0;\n    } else {\n      $result[] = abs($guess[$key] - $value);\n\
    \    }\n  }\n  return $result;\n}\n", "\treturn array_map(function($value, $key)\
    \ use ($game) {\n\t\treturn abs($value - $game[$key]);\n\t}, $guess, array_keys($guess));\n\
    }\n\n$game = array(0, 5, 0, 0, 0, 4);\n$guess = array(4, 1, 1, 0, 0, -2);\nprint_r(compare($game,\
    \ $guess));", "  $results = [];\n  foreach ($game as $key => $value) {\n    $results[]\
    \ = abs($game[$key] - $guess[$key]);\n  }\n  return $results;\n}", "    // your\
    \ code here\n}\n", "  $newArr = [];\n  for ($i = 0; $i < count($game); $i++) {\n\
    \    if ($game[$i] == $guess[$i]) {\n      array_push($newArr, 0);\n    } else\
    \ {\n      array_push($newArr, abs($game[$i] - $guess[$i]));\n    }\n  }\n  return\
    \ $newArr;\n}\nprint_r(compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)));\n\
    echo \"\\n\";\nprint_r(compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2)));",
  "    $diff = array();\n    for ($i = 0; $i < count($game); $i++) {\n        $diff[]\
    \ = abs($game[$i] - $guess[$i]);\n    }\n    return $diff;\n}\necho \"<pre>\"\
    ;\nprint_r(compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)));\necho\
    \ \"</pre>\";\n\necho \"<pre>\";\nprint_r(compare(array(0, 5, 0, 0, 0, 4), array(4,\
    \ 1, 1, 0, 0, -2)));\necho \"</pre>\";", "    $result = [];\n    foreach ($game\
    \ as $key => $value) {\n        if ($value === $guess[$key]) {\n            $result[]\
    \ = 0;\n        } else {\n            $result[] = abs($value - $guess[$key]);\n\
    \        }\n    }\n    return $result;\n}", "  $result = [];\n  foreach ($game\
    \ as $key => $val) {\n    $result[] = abs($val - $guess[$key]);\n  }\n  return\
    \ $result;\n}", "  $result = [];\n  for ($i = 0; $i < count($game); $i++) {\n\
    \    $diff = abs($game[$i] - $guess[$i]);\n    $result[] = $diff;\n  }\n  return\
    \ $result;\n}\n", "  $result = [];\n  for ($i = 0; $i < count($game); $i++) {\n\
    \    if ($game[$i] == $guess[$i]) {\n      $result[] = 0;\n    } else {\n    \
    \  $result[] = abs($game[$i] - $guess[$i]);\n    }\n  }\n  return $result;\n}\n\
    \n$test1 = compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2));\n$test2\
    \ = compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2));\n\nprint_r($test1);\n\
    print_r($test2);", "    return array_map(function($a, $b) {\n        return abs($a\
    \ - $b);\n    }, $game, $guess);\n}\n", "  $result = [];\n  for ($i = 0; $i <\
    \ count($game); $i++) {\n    if ($game[$i] == $guess[$i]) {\n      $result[] =\
    \ 0;\n    } else {\n      $result[] = abs($game[$i] - $guess[$i]);\n    }\n  }\n\
    \  return $result;\n}\necho implode(', ', compare(array(1, 2, 3, 4, 5, 1), array(1,\
    \ 2, 3, 4, 2, -2)));", "    return array_map(function($a, $b) {\n        return\
    \ abs($a - $b);\n    }, $game, $guess);\n}\n", "\t$outputArray = array();\n\t\
    $gameLength = count($game);\n\t$guessLength = count($guess);\n\tif($gameLength\
    \ !== $guessLength) {\n\t\treturn false;\n\t}\n\tfor($i = 0; $i < $gameLength;\
    \ $i++) {\n\t\t$outputArray[$i] = abs($game[$i] - $guess[$i]);\n\t}\n\treturn\
    \ $outputArray;\n}\n\nprint_r(compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3,\
    \ 4, 2, -2)));\nprint_r(compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0,\
    \ -2)));\nprint_r(compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)));\n",
  "  $total_matches = 0;\n  $perfect_guesses = 0;\n  $result = array();\n  if (count($game)\
    \ == count($guess)) {\n    $total_matches = count($game);\n    for ($i = 0; $i\
    \ < $total_matches; $i++) {\n      if ($game[$i] == $guess[$i]) {\n        $perfect_guesses++;\n\
    \        $result[$i] = 0;\n      } else {\n        $result[$i] = abs($game[$i]\
    \ - $guess[$i]);\n      }\n    }\n  }\n  echo 'Perfect guesses: ' . $perfect_guesses\
    \ . '<br>';\n  echo 'Total matches: ' . $total_matches . '<br>';\n  echo 'Game\
    \ score: ' . implode(', ', $game) . '<br>';\n  echo 'Guess score: ' . implode(',\
    \ ', $guess) . '<br>';\n  echo 'Total score: ' . implode(', ', $result) . '<br>';\n\
    }\n", "\t$newArr = [];\n\tforeach ($game as $key => $value) {\n\t\t$diff = $value\
    \ - $guess[$key];\n\t\tif ($diff < 0) {\n\t\t\t$diff = -$diff;\n\t\t}\n\t\t$newArr[]\
    \ = $diff;\n\t}\n\treturn $newArr;\n}\n", "  $results = [];\n  foreach($game as\
    \ $key => $value) {\n    if ($value < 0) {\n      $results[] = abs($guess[$key]\
    \ - $value);\n    } else {\n      $results[] = abs($guess[$key] - $value);\n \
    \   }\n  }\n  return $results;\n}", "    $result = [];\n    for ($i = 0; $i <\
    \ count($game); $i++) {\n        $result[] = abs($game[$i] - $guess[$i]);\n  \
    \  }\n    return $result;\n}\necho implode(\" \", compare([1, 2, 3, 4, 5, 1],\
    \ [1, 2, 3, 4, 2, -2]));", "    $result = [];\n    for ($i = 0; $i < count($game);\
    \ $i++) {\n        $result[] = abs($game[$i] - $guess[$i]);\n    }\n    return\
    \ $result;\n}\n", "\tfor ($i=0; $i < count($game); $i++) { \n\t\tif ($game[$i]\
    \ == $guess[$i]) {\n\t\t\t$result[] = 0;\n\t\t} else {\n\t\t\t$result[] = abs($game[$i]\
    \ - $guess[$i]);\n\t\t}\n\t}\n\treturn $result;\n}", "    $out = [];\n    foreach\
    \ ($game as $key => $value) {\n        $out[] = abs($value - $guess[$key]);\n\
    \    }\n    return $out;\n}\necho \"<pre>\";\nprint_r(compare(array(1, 2, 3, 4,\
    \ 5, 1), array(1, 2, 3, 4, 2, -2)));\nprint_r(compare(array(0, 5, 0, 0, 0, 4),\
    \ array(4, 1, 1, 0, 0, -2)));\necho \"</pre>\";", "\t$output = array();\n\tfor\
    \ ($i = 0; $i < count($game); $i++) {\n\t\t$output[] = abs($game[$i] - $guess[$i]);\n\
    \t}\n\treturn $output;\n}\n\n$game = array(1, 2, 3, 4, 5, 1);\n$guess = array(1,\
    \ 2, 3, 4, 2, -2);\n$answer = compare($game, $guess);\nprint_r($answer);\n\n$game\
    \ = array(0, 5, 0, 0, 0, 4);\n$guess = array(4, 1, 1, 0, 0, -2);\n$answer = compare($game,\
    \ $guess);\nprint_r($answer);", "    $res = [];\n    foreach ($game as $key =>\
    \ $value) {\n        $res[] = abs($value - $guess[$key]);\n    }\n    return $res;\n\
    }", "  return array_map(function($a, $b) {\n    return $a - $b ? abs($a - $b)\
    \ : 0;\n  }, $game, $guess);\n}\n\n$guess1 = array(1, 2, 3, 4, 5, 1);\n$game1\
    \ = array(1, 2, 3, 4, 2, -2);\n\n$guess2 = array(0, 5, 0, 0, 0, 4);\n$game2 =\
    \ array(4, 1, 1, 0, 0, -2);\n\nvar_dump(compare($game1, $guess1));\nvar_dump(compare($game2,\
    \ $guess2));", "    foreach ($game as $key => $value) {\n        if ($value !=\
    \ $guess[$key]) {\n            $result[] = abs($value - $guess[$key]);\n     \
    \   } else {\n            $result[] = 0;\n        }\n    }\n    return $result;\n\
    }\n$game = array(1, 2, 3, 4, 5, 1);\n$guess = array(1, 2, 3, 4, 2, -2);\n$result\
    \ = compare($game, $guess);\nprint_r($result);\n", "  $results = [];\n  for ($i\
    \ = 0; $i < count($game); $i++) {\n    if ($game[$i] > $guess[$i]) {\n      $results[]\
    \ = $game[$i] - $guess[$i];\n    } else if ($game[$i] < $guess[$i]) {\n      $results[]\
    \ = $guess[$i] - $game[$i];\n    } else {\n      $results[] = 0;\n    }\n  }\n\
    \  return $results;\n}", "    $res = [];\n    foreach ($game as $key => $value)\
    \ {\n        $res[] = abs($game[$key] - $guess[$key]);\n    }\n    return $res;\n\
    }\nprint_r(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]));\nprint_r(compare([0,\
    \ 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]));", "  $points = [];\n  foreach ($game\
    \ as $key => $score) {\n    $points[] = abs($score - $guess[$key]);\n  }\n  return\
    \ $points;\n}", "    $output = [];\n    for ($i = 0; $i < count($game); $i++)\
    \ {\n        $output[] = abs($game[$i] - $guess[$i]);\n    }\n    return $output;\n\
    }\n", "\tfor ($i=0; $i < count($game); $i++) { \n\t\t$result[] = abs($game[$i]\
    \ - $guess[$i]);\n\t}\n\treturn $result;\n}\n\necho \"<pre>\";\nprint_r(compare(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)));\necho \"</pre>\";", "  $results\
    \ = [];\n  for ($i = 0; $i < count($game); $i++) {\n    $results[] = abs($game[$i]\
    \ - $guess[$i]);\n  }\n  return $results;\n}", "   $diff = array();\n   for ($i\
    \ = 0; $i < count($game); $i++) {\n      if ($game[$i] != $guess[$i])\n      \
    \   $diff[] = abs($game[$i] - $guess[$i]);\n      else\n         $diff[] = 0;\n\
    \   }\n   return $diff;\n}\n$game = array(0, 5, 0, 0, 0, 4);\n$guess = array(4,\
    \ 1, 1, 0, 0, -2);\n$result = compare($game, $guess);\nprint_r($result);", " \
    \   $result = [];\n    for ($i = 0; $i < count($game); $i++) {\n        $result[]\
    \ = abs($game[$i] - $guess[$i]);\n    }\n    return $result;\n}\necho '<pre>';\n\
    print_r(compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)));\nprint_r(compare(array(0,\
    \ 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2)));\necho '</pre>';", "\t$differences\
    \ = array();\n\tfor ($i = 0; $i < count($game); $i++) {\n\t\t$difference = $game[$i]\
    \ - $guess[$i];\n\t\tif ($difference < 0) {\n\t\t\t$difference = -$difference;\n\
    \t\t}\n\t\t$differences[] = $difference;\n\t}\n\treturn $differences;\n}\n\n$game\
    \ = array(1, 2, 3, 4, 5, 1);\n$guess = array(1, 2, 3, 4, 2, -2);\n\nvar_dump(compare($game,\
    \ $guess));\n", "    $diff = [];\n    $diff[0] = $game[0] - $guess[0];\n    $diff[1]\
    \ = $game[1] - $guess[1];\n    $diff[2] = $game[2] - $guess[2];\n    $diff[3]\
    \ = $game[3] - $guess[3];\n    $diff[4] = $game[4] - $guess[4];\n    $diff[5]\
    \ = $game[5] - $guess[5];\n    return $diff;\n}\n", "    $result = [];\n    foreach\
    \ ($game as $key => $value) {\n        $diff = abs($value - $guess[$key]);\n \
    \       array_push($result, $diff);\n    }\n    return $result;\n}", "\t$result\
    \ = array();\n\tforeach ($game as $key => $value) {\n\t\t$val = ($value - $guess[$key]);\n\
    \t\t$result[] = abs($val);\n\t}\n\treturn $result;\n}\n", "    $scores = [];\n\
    \    for ($i = 0; $i < count($game); $i++) {\n        $scores[] = abs($game[$i]\
    \ - $guess[$i]);\n    }\n    return $scores;\n}\n\necho \"<pre>\";\nvar_dump(compare(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)));\nvar_dump(compare(array(0, 5, 0,\
    \ 0, 0, 4), array(4, 1, 1, 0, 0, -2)));\necho \"</pre>\";", "    $result = [];\n\
    \    $array_length = count($game);\n    for ($i = 0; $i < $array_length; $i++)\
    \ {\n        $result[$i] = $game[$i] - $guess[$i];\n        if ($result[$i] <\
    \ 0) {\n            $result[$i] = $result[$i] * -1;\n        }\n    }\n    return\
    \ $result;\n}", "\treturn array_map(function($value, $index) use ($game) {\n\t\
    \treturn abs($value - $game[$index]);\n\t}, $guess, array_keys($guess));\n}",
  "  $diff = [];\n  for ($i = 0; $i < count($game); $i++) {\n    if ($game[$i] ==\
    \ $guess[$i]) {\n      $diff[] = 0;\n    } else {\n      $diff[] = abs($game[$i]\
    \ - $guess[$i]);\n    }\n  }\n  return $diff;\n}\n", "    for ($i = 0; $i < count($game);\
    \ $i++) {\n        if ($game[$i] === $guess[$i]) {\n            $result[] = 0;\n\
    \        } else {\n            $result[] = abs($game[$i] - $guess[$i]);\n    \
    \    }\n    }\n    return $result;\n}", "  $result = [];\n  for ($i = 0; $i <\
    \ count($game); $i++) {\n    if ($game[$i] == $guess[$i]) {\n      $result[] =\
    \ 0;\n    } else {\n      $result[] = abs($game[$i] - $guess[$i]);\n    }\n  }\n\
    \  return $result;\n}\n", "  $correct = array();\n  for ($i = 0; $i < count($game);\
    \ $i++) {\n    if ($game[$i] == $guess[$i]) {\n      $correct[] = 0;\n    } else\
    \ {\n      $correct[] = abs($game[$i] - $guess[$i]);\n    }\n  }\n  return $correct;\n\
    }\necho implode(', ', compare(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)));\n\
    echo '<br>';\necho implode(', ', compare(array(0, 5, 0, 0, 0, 4), array(4, 1,\
    \ 1, 0, 0, -2)));", "    $differences = [];\n    for ($i = 0; $i < count($game);\
    \ $i++) {\n        $guessDifference = abs($game[$i] - $guess[$i]);\n        array_push($differences,\
    \ $guessDifference);\n    }\n    return $differences;\n}\n", "  $diff = array();\n\
    \  $game_length = count($game);\n  for ($i = 0; $i < $game_length; $i++) {\n \
    \   $game_i = $game[$i];\n    $guess_i = $guess[$i];\n    $diff_i = $game_i -\
    \ $guess_i;\n    if ($diff_i < 0) {\n      $diff_i = $diff_i * -1;\n    }\n  \
    \  $diff[] = $diff_i;\n  }\n  return $diff;\n}\n", "  return array_map(function($gameValue,\
    \ $guessValue) {\n    return abs($gameValue - $guessValue);\n  }, $game, $guess);\n\
    }\n", "  $distance = [];\n  for ($i = 0; $i < count($game); $i++) {\n    if ($game[$i]\
    \ === $guess[$i]) {\n      $distance[] = 0;\n    } else {\n      $distance[] =\
    \ abs($game[$i] - $guess[$i]);\n    }\n  }\n  return $distance;\n}\n", "  $result\
    \ = [];\n  foreach ($game as $index => $item) {\n    $diff = abs($item - $guess[$index]);\n\
    \    array_push($result, $diff);\n  }\n  return $result;\n}\n\ncompare([1, 2,\
    \ 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]);", "    return array_map(function($score,\
    \ $g) {\n      return $score - $g;\n    }, $game, $guess);\n  }"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
