name: HumanEval_152_compare
language: php
prompt: "<?php\n// I think we all remember that feeling when the result of some long-awaited\n\
  // event is finally known. The feelings and thoughts you have at that moment are\n\
  // definitely worth noting down and comparing.\n// Your task is to determine if\
  \ a person correctly guessed the results of a number of matches.\n// You are given\
  \ two arrays of scores and guesses of equal length, where each index shows a match.\
  \ \n// Return an array of the same length denoting how far off each guess was. If\
  \ they have guessed correctly,\n// the value is 0, and if not, the value is the\
  \ absolute difference between the guess and the score.\n// example:\n// >>> compare(array(1,\
  \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2))\n// array(0, 0, 0, 0, 3, 3)\n// >>>\
  \ compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2))\n// array(4, 4, 1,\
  \ 0, 0, 6)\nfunction compare($game, $guess) {\n"
tests: "function candidate(...$args) {\n    return compare(...$args);\n}\n\nfunction\
  \ test(): void {\n    if (candidate(array(1, 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2,\
  \ -2)) !== array(0, 0, 0, 0, 3, 3)) { throw new Exception(\"Test failed!\"); }\n\
  \    if (candidate(array(0, 0, 0, 0, 0, 0), array(0, 0, 0, 0, 0, 0)) !== array(0,\
  \ 0, 0, 0, 0, 0)) { throw new Exception(\"Test failed!\"); }\n    if (candidate(array(1,\
  \ 2, 3), array(-1, -2, -3)) !== array(2, 4, 6)) { throw new Exception(\"Test failed!\"\
  ); }\n    if (candidate(array(1, 2, 3, 5), array(-1, 2, 3, 4)) !== array(2, 0, 0,\
  \ 1)) { throw new Exception(\"Test failed!\"); }\n}\n\ntest();"
completions: ["    $score = [];\n    for ($i = 0; $i < count($game); $i++) {\n   \
    \     if ($game[$i] > $guess[$i]) {\n            $score[] = $game[$i] - $guess[$i];\n\
    \        } elseif ($game[$i] < $guess[$i]) {\n            $score[] = $guess[$i]\
    \ - $game[$i];\n        } else {\n            $score[] = 0;\n        }\n    }\n\
    \    return $score;\n}", "    $arr = [];\n    for ($i = 0; $i < count($game);\
    \ $i++) {\n        if ($game[$i] == $guess[$i]) {\n            $arr[] = 0;\n \
    \       } else {\n            $arr[] = abs($game[$i] - $guess[$i]);\n        }\n\
    \    }\n    return $arr;\n}\n", "  foreach ($game as $key => $val) {\n    if ($val\
    \ - $guess[$key] > 0) {\n      $results[] = $val - $guess[$key];\n    } else {\n\
    \      $results[] = $guess[$key] - $val;\n    }\n  }\n  return $results;\n}",
  "    $output = [];\n    foreach ($game as $k => $v) {\n        $output[] = abs($v\
    \ - $guess[$k]);\n    }\n    return $output;\n}", "    $result = [];\n    for\
    \ ($i = 0; $i < count($game); $i++) {\n        $result[] = abs($game[$i] - $guess[$i]);\n\
    \    }\n    return $result;\n}", "    $result = [];\n    for ($i = 0; $i < count($game);\
    \ $i++) {\n        $score = abs($game[$i] - $guess[$i]);\n        $result[] =\
    \ $score == 0 ? 0 : $score;\n    }\n    return $result;\n}\n\n$game = [1, 2, 3,\
    \ 4, 5, 1];\n$guess = [1, 2, 3, 4, 2, -2];\nvar_dump(compare($game, $guess));",
  "\n}", "  $score = array();\n  foreach($game as $k => $v) {\n    $score[] = abs($v\
    \ - $guess[$k]);\n  }\n  return $score;\n}\n$game = array(1, 2, 3, 4, 5, 1);\n\
    $guess = array(1, 2, 3, 4, 2, -2);\nprint_r(compare($game, $guess));", "\t// your\
    \ code here\n}", "    $compare = [];\n    foreach($game as $key => $val) {\n \
    \       $compare[] = abs($val - $guess[$key]);\n    }\n    return $compare;\n\
    }\n\nvar_dump(compare([1, 2, 3, 4, 5, 1], [1, 2, 3, 4, 2, -2]));\nvar_dump(compare([0,\
    \ 5, 0, 0, 0, 4], [4, 1, 1, 0, 0, -2]));", "    $arr = [];\n    for ($i = 0; $i\
    \ < count($game); $i++) {\n        $arr[] = ($game[$i] == $guess[$i]) ? 0 : abs($game[$i]\
    \ - $guess[$i]);\n    }\n    return $arr;\n}\n", "    $difference = [];\n    for\
    \ ($i = 0; $i < count($game); $i++) {\n        $difference[] = abs($game[$i] -\
    \ $guess[$i]);\n    }\n    return $difference;\n}\n\necho '<pre>';\nprint_r(compare(array(1,\
    \ 2, 3, 4, 5, 1), array(1, 2, 3, 4, 2, -2)));\necho '</pre>';\n\necho '<pre>';\n\
    print_r(compare(array(0, 5, 0, 0, 0, 4), array(4, 1, 1, 0, 0, -2)));\necho '</pre>';",
  "    $results = [];\n    for ($i = 0; $i < count($game); $i++) {\n        $results[]\
    \ = ($game[$i] === $guess[$i]) ? 0 : abs($game[$i] - $guess[$i]);\n    }\n   \
    \ return $results;\n}", "    // Your code here\n}", "\tfor ($i=0; $i < count($game);\
    \ $i++) { \n\t\tif ($game[$i] != $guess[$i]) {\n\t\t\t$results[] = abs($game[$i]\
    \ - $guess[$i]);\n\t\t} else {\n\t\t\t$results[] = 0;\n\t\t}\n\t}\n\treturn $results;\n\
    }", "    $result = [];\n    for ($i = 0; $i < count($game); $i++) {\n        if\
    \ ($game[$i] === $guess[$i]) {\n            $result[] = 0;\n        } else {\n\
    \            $result[] = abs($game[$i] - $guess[$i]);\n        }\n    }\n    return\
    \ $result;\n}\n$game = [1, 2, 3, 4, 5, 1];\n$guess = [1, 2, 3, 4, 2, -2];\n\n\
    print_r(compare($game, $guess));", "  $results = [];\n  for ($i = 0; $i < count($game);\
    \ $i++) {\n    $results[] = abs($game[$i] - $guess[$i]);\n  }\n  return $results;\n\
    }\n$game = [1, 2, 3, 4, 5, 1];\n$guess = [1, 2, 3, 4, 2, -2];\nprint_r(compare($game,\
    \ $guess));", "    $array = [];\n    foreach($game as $key => $value) {\n    \
    \    if($game[$key] < 0) {\n            $game[$key] = -$game[$key];\n        }\n\
    \        if($guess[$key] < 0) {\n            $guess[$key] = -$guess[$key];\n \
    \       }\n        if($game[$key] === $guess[$key]) {\n            $array[] =\
    \ 0;\n        } else {\n            $array[] = abs($game[$key] - $guess[$key]);\n\
    \        }\n    }\n    return $array;\n}\n$game = [1, 2, 3, 4, 5, 1];\n$guess\
    \ = [1, 2, 3, 4, 2, -2];\nprint_r(compare($game, $guess));\necho \"<br>\";\n$game2\
    \ = [0, 5, 0, 0, 0, 4];\n$guess2 = [4, 1, 1, 0, 0, -2];\nprint_r(compare($game2,\
    \ $guess2));", "    $result = [];\n    foreach ($game as $index => $value) {\n\
    \        $result[] = abs($value - $guess[$index]);\n    }\n    return $result;\n\
    }\n", "    $result = [];\n    foreach ($game as $key => $value) {\n        $result[]\
    \ = abs($value - $guess[$key]);\n    }\n    return $result;\n}"]
stop_tokens:
- "\nfunction"
- "\n?>"
- "\n//"
- "\n#"
