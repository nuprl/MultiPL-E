{
  "name": "mbpp_279_is_num_decagonal",
  "language": "swift",
  "prompt": "\n/// Write a function to find the nth decagonal number.\nfunc is_num_decagonal(n: Int) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_279_is_num_decagonal.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(is_num_decagonal(n: 3) == 27)\nassert(is_num_decagonal(n: 7) == 175)\nassert(is_num_decagonal(n: 10) == 370)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    return n * (3 * n - 2)",
    "    return (n * (3 * n - 2))",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return (n * (3 * n - 2))",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return (n * (3 * n - 2))",
    "    return n * (3 * n - 2)",
    "    return (n * (3 * n - 2))",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return (n * (3 * n - 2))",
    "    let num = (3 * n * n - n) / 2\n    return num",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return (n * (3 * n - 2))",
    "    return n * (3 * n - 2)",
    "    return (n * (3 * n - 2))",
    "    return n * (3 * n - 2)",
    "    return (n * (3 * n - 2))",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return (n * (3 * n - 2))",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    let decagonal_number = n * (3 * n - 2)\n    return decagonal_number",
    "    return n * (3 * n - 2)",
    "    return (n * (3 * n - 1)) / 2",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return (n * (3 * n - 2))",
    "    return n * (3 * n - 2)",
    "    return (n * (3 * n - 2))",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return (n * (3 * n - 2))",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return (n * (3 * n - 2))",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    var decagonal = 0\n    var i = 1\n    while decagonal < n {\n        decagonal = i * (3 * i - 1) / 2\n        i += 1\n    }\n    return decagonal",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    let decagonal = n * (3 * n - 2)\n    return decagonal",
    "    return (n * (3 * n - 2))",
    "    return n * (3 * n - 2)",
    "    return (n * (3 * n - 2))",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return (n * (3 * n - 2))",
    "    return n * (3 * n - 2)",
    "    return (n * (3 * n - 2))",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    let d = (3 * n * n - n) / 2\n    return d",
    "    return (n * (3 * n - 2)) / 2",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return (n * (3 * n - 2))",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return (n * (3 * n - 2))",
    "    return (n * (3 * n - 2))",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return (n * (3 * n - 2))",
    "    return n * (3 * n - 2)",
    "    return (n * (3 * n - 2))",
    "    return n * (3 * n - 2)",
    "    return (n * (3 * n - 2))",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    let num = (3 * n * n - n) / 2\n    return num",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    var i = 1\n    var decagonal = 1\n    while i < n {\n        decagonal = decagonal + 3 * i + 1\n        i = i + 1\n    }\n    return decagonal",
    "    let nth_decagonal = n * (3 * n - 2)\n    return nth_decagonal",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return (n * (3 * n - 2))",
    "    return (3 * n * n - n) / 2",
    "    return (n * (3 * n - 2))",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return (n * (3 * n - 2))",
    "    return n * (3 * n - 2)",
    "    var num = 0\n    for i in 1...n {\n        num = i * (3 * i - 1) / 2\n    }\n    return num",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return (n * (3 * n - 2)) / 2",
    "    return (n * (3 * n - 2))",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return (3 * n * n - n) / 2",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return (n * (3 * n - 2))",
    "    return (n * (3 * n - 2))",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return (n * (3 * n - 2))",
    "    return (n * (3 * n - 2))",
    "    return (n * (3 * n - 2))",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return (n * (3 * n - 2))",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return (n * (3 * n - 2))",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    if n == 1 {\n        return 1\n    }\n    return is_num_decagonal(n - 1) + 3 * (n - 1) + 1",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return (n * (3 * n - 2)) / 2",
    "    return n * (3 * n - 2)",
    "    return (n * (3 * n - 2)) / 2",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return n * (3 * n - 2)",
    "    return (n * (3 * n - 2))",
    "    return (n * (3 * n - 2))",
    "    return n * (3 * n - 2)"
  ]
}