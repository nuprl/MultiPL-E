{
  "name": "mbpp_737_check_str",
  "language": "swift",
  "prompt": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_737_check_str.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpj2wviwwa.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpj2wviwwa.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmptzau8uwj.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmptzau8uwj.swift:5:65: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count))\n                                                                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpj2wviwwa.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpj2wviwwa.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpj2wviwwa.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpj2wviwwa.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpldbj9s8z.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpldbj9s8z.swift:5:65: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.count))\n                                                                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiouAEIOU]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmp4td5tpkn.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiouAEIOU]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp4td5tpkn.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpf01gb3c1.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpf01gb3c1.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpf01gb3c1.swift:5:65: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.count))\n                                                                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpj2wviwwa.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpj2wviwwa.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou].*$\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmp3074imer.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou].*$\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp3074imer.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpj2wviwwa.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpj2wviwwa.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpj2wviwwa.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpj2wviwwa.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiouAEIOU]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmp4td5tpkn.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiouAEIOU]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp4td5tpkn.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou].*\", options: [])\n    let range = NSRange(location: 0, length: string.utf16.count)\n    return regex.firstMatch(in: string, options: [], range: range) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmp4u1x2739.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou].*\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp4u1x2739.swift:5:17: error: cannot find 'NSRange' in scope\n    let range = NSRange(location: 0, length: string.utf16.count)\n                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpj2wviwwa.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpj2wviwwa.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmpodxne4b4.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpodxne4b4.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpodxne4b4.swift:5:65: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count))\n                                                                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpj2wviwwa.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpj2wviwwa.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpj2wviwwa.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpj2wviwwa.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpldbj9s8z.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpldbj9s8z.swift:5:65: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.count))\n                                                                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpj2wviwwa.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpj2wviwwa.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpf01gb3c1.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpf01gb3c1.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpf01gb3c1.swift:5:65: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.count))\n                                                                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpf01gb3c1.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpf01gb3c1.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpf01gb3c1.swift:5:65: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.count))\n                                                                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpj2wviwwa.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpj2wviwwa.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpf01gb3c1.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpf01gb3c1.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpf01gb3c1.swift:5:65: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.count))\n                                                                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmptzau8uwj.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmptzau8uwj.swift:5:65: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count))\n                                                                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiouAEIOU]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmpvogbjnz8.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiouAEIOU]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvogbjnz8.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiouAEIOU]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmpvogbjnz8.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiouAEIOU]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvogbjnz8.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpf01gb3c1.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpf01gb3c1.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpf01gb3c1.swift:5:65: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.count))\n                                                                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpj2wviwwa.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpj2wviwwa.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    let range = NSRange(location: 0, length: string.utf16.count)\n    return regex.firstMatch(in: string, options: [], range: range) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmpkbh0f51j.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpkbh0f51j.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpkbh0f51j.swift:5:17: error: cannot find 'NSRange' in scope\n    let range = NSRange(location: 0, length: string.utf16.count)\n                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpj2wviwwa.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpj2wviwwa.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpf01gb3c1.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpf01gb3c1.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpf01gb3c1.swift:5:65: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.count))\n                                                                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpldbj9s8z.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpldbj9s8z.swift:5:65: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.count))\n                                                                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    if regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmpb70jqs10.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpb70jqs10.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpb70jqs10.swift:5:57: error: cannot find 'NSRange' in scope\n    if regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil {\n                                                        ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiouAEIOU]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmpvogbjnz8.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiouAEIOU]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvogbjnz8.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpj2wviwwa.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpj2wviwwa.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpj2wviwwa.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpj2wviwwa.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiouAEIOU]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmp4td5tpkn.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiouAEIOU]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp4td5tpkn.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpf01gb3c1.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpf01gb3c1.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpf01gb3c1.swift:5:65: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.count))\n                                                                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmpautxr2_6.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpautxr2_6.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpautxr2_6.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpf01gb3c1.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpf01gb3c1.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpf01gb3c1.swift:5:65: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.count))\n                                                                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiouAEIOU]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmpvogbjnz8.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiouAEIOU]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvogbjnz8.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpf01gb3c1.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpf01gb3c1.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpf01gb3c1.swift:5:65: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.count))\n                                                                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiouAEIOU]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmpvogbjnz8.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiouAEIOU]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvogbjnz8.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmptzau8uwj.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmptzau8uwj.swift:5:65: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count))\n                                                                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpj2wviwwa.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpj2wviwwa.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmpautxr2_6.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpautxr2_6.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpautxr2_6.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: NSRegularExpression.Options.caseInsensitive)\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmp6wbdz39z.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: NSRegularExpression.Options.caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp6wbdz39z.swift:4:72: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: NSRegularExpression.Options.caseInsensitive)\n                                                                       ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp6wbdz39z.swift:5:65: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.count))\n                                                                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiouAEIOU]\", options: [])\n    if regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil {\n        return true\n    } else {\n        return false\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmp02qqa42o.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiouAEIOU]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp02qqa42o.swift:5:57: error: cannot find 'NSRange' in scope\n    if regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil {\n                                                        ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpldbj9s8z.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpldbj9s8z.swift:5:65: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.count))\n                                                                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpj2wviwwa.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpj2wviwwa.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    let range = NSRange(location: 0, length: string.utf16.count)\n    return regex.firstMatch(in: string, options: [], range: range) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmpkbh0f51j.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpkbh0f51j.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpkbh0f51j.swift:5:17: error: cannot find 'NSRange' in scope\n    let range = NSRange(location: 0, length: string.utf16.count)\n                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpj2wviwwa.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpj2wviwwa.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmpautxr2_6.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpautxr2_6.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpautxr2_6.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpf01gb3c1.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpf01gb3c1.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpf01gb3c1.swift:5:65: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.count))\n                                                                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpj2wviwwa.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpj2wviwwa.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmpautxr2_6.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpautxr2_6.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpautxr2_6.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmptzau8uwj.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmptzau8uwj.swift:5:65: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count))\n                                                                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmptzau8uwj.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmptzau8uwj.swift:5:65: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count))\n                                                                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpf01gb3c1.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpf01gb3c1.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpf01gb3c1.swift:5:65: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.count))\n                                                                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpldbj9s8z.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpldbj9s8z.swift:5:65: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.count))\n                                                                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpj2wviwwa.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpj2wviwwa.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpj2wviwwa.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpj2wviwwa.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiouAEIOU]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmpvogbjnz8.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiouAEIOU]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvogbjnz8.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiouAEIOU]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmpvogbjnz8.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiouAEIOU]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvogbjnz8.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpf01gb3c1.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpf01gb3c1.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpf01gb3c1.swift:5:65: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.count))\n                                                                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpf01gb3c1.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpf01gb3c1.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpf01gb3c1.swift:5:65: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.count))\n                                                                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpj2wviwwa.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpj2wviwwa.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpf01gb3c1.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpf01gb3c1.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpf01gb3c1.swift:5:65: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.count))\n                                                                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    let range = NSRange(location: 0, length: string.utf16.count)\n    return regex.firstMatch(in: string, options: [], range: range) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmpkbh0f51j.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpkbh0f51j.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpkbh0f51j.swift:5:17: error: cannot find 'NSRange' in scope\n    let range = NSRange(location: 0, length: string.utf16.count)\n                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmptzau8uwj.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmptzau8uwj.swift:5:65: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count))\n                                                                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiouAEIOU]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmp4td5tpkn.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiouAEIOU]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp4td5tpkn.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.count))\n    return matches.count > 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpldbj9s8z.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpldbj9s8z.swift:5:65: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.count))\n                                                                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpj2wviwwa.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpj2wviwwa.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpj2wviwwa.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpj2wviwwa.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpvl719ezi.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:4:73: error: cannot infer contextual base in reference to member 'caseInsensitive'\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: .caseInsensitive)\n                                                                       ~^~~~~~~~~~~~~~~\n/tmp/tmpvl719ezi.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmppah7vorf.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmppah7vorf.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: NSRegularExpression.Options.caseInsensitive)\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.count))\n    if matches.count > 0 {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1666123456,
      "stdout": "",
      "stderr": "/tmp/tmpagg1v1c8.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: NSRegularExpression.Options.caseInsensitive)\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpagg1v1c8.swift:4:72: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: NSRegularExpression.Options.caseInsensitive)\n                                                                       ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpagg1v1c8.swift:5:65: error: cannot find 'NSRange' in scope\n    let matches = regex.matches(in: string, options: [], range: NSRange(location: 0, length: string.count))\n                                                                ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpj2wviwwa.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpj2wviwwa.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check whether the given string is starting with a vowel or not using regex.\nfunc check_str(string: String) -> Bool {\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_str(string: \"annie\") == true)\nassert(check_str(string: \"dawood\") == false)\nassert(check_str(string: \"Else\") == true)",
      "timestamp": 1665510220,
      "stdout": "",
      "stderr": "/tmp/tmpj2wviwwa.swift:4:22: error: cannot find 'NSRegularExpression' in scope\n    let regex = try! NSRegularExpression(pattern: \"^[aeiou]\", options: [])\n                     ^~~~~~~~~~~~~~~~~~~\n/tmp/tmpj2wviwwa.swift:5:61: error: cannot find 'NSRange' in scope\n    return regex.firstMatch(in: string, options: [], range: NSRange(location: 0, length: string.utf16.count)) != nil\n                                                            ^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}