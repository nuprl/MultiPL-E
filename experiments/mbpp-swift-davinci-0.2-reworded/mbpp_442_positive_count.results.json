{
  "name": "mbpp_442_positive_count",
  "language": "swift",
  "prompt": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_442_positive_count.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var positive_count = 0\n    for num in nums {\n        if num > 0 {\n            positive_count += 1\n        }\n    }\n    return Double(positive_count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmp44nwqur4/tmp44nwqur4.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba5a57d0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba5a54c7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba5a54c7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba5a54c67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44nwqur4                        0x000056097f648525 <unavailable> + 5413\n5    libc.so.6                          0x00002ba5a59bc460 __libc_start_main + 245\n6    tmp44nwqur4                        0x000056097f648129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0.0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return count / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmphdp02suw/tmphdp02suw.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9dd5464c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9dd515bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9dd515b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9dd515a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphdp02suw                        0x0000564f3d37f525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9dd5650460 __libc_start_main + 245\n6    tmphdp02suw                        0x0000564f3d37f129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count: Double = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return count / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "tmpwy1qzveb/tmpwy1qzveb.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b89146c2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b89143b9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b89143b9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b89143b87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwy1qzveb                        0x000055814899f525 <unavailable> + 5413\n5    libc.so.6                          0x00002b89148ae460 __libc_start_main + 245\n6    tmpwy1qzveb                        0x000055814899f129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var positiveCount = 0\n    for num in nums {\n        if num > 0 {\n            positiveCount += 1\n        }\n    }\n    return Double(positiveCount) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "tmp_712scvr/tmp_712scvr.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b884f105c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b884edfcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b884edfc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b884edfb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_712scvr                        0x0000560e48dd6525 <unavailable> + 5413\n5    libc.so.6                          0x00002b884f2f1460 __libc_start_main + 245\n6    tmp_712scvr                        0x0000560e48dd6129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0.0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return count / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmphdp02suw/tmphdp02suw.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9dd5464c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9dd515bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9dd515b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9dd515a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphdp02suw                        0x0000564f3d37f525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9dd5650460 __libc_start_main + 245\n6    tmphdp02suw                        0x0000564f3d37f129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count)/Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "tmp26k6f2x3/tmp26k6f2x3.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4160346c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b416003db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b416003d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b416003c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp26k6f2x3                        0x00005577a5854525 <unavailable> + 5413\n5    libc.so.6                          0x00002b4160532460 __libc_start_main + 245\n6    tmp26k6f2x3                        0x00005577a5854129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0.0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return count / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmphdp02suw/tmphdp02suw.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9dd5464c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9dd515bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9dd515b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9dd515a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphdp02suw                        0x0000564f3d37f525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9dd5650460 __libc_start_main + 245\n6    tmphdp02suw                        0x0000564f3d37f129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var positive_count = 0\n    for num in nums {\n        if num > 0 {\n            positive_count += 1\n        }\n    }\n    return Double(positive_count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmp44nwqur4/tmp44nwqur4.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba5a57d0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba5a54c7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba5a54c7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba5a54c67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44nwqur4                        0x000056097f648525 <unavailable> + 5413\n5    libc.so.6                          0x00002ba5a59bc460 __libc_start_main + 245\n6    tmp44nwqur4                        0x000056097f648129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var positive_count = 0\n    for num in nums {\n        if num > 0 {\n            positive_count += 1\n        }\n    }\n    return Double(positive_count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmp44nwqur4/tmp44nwqur4.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba5a57d0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba5a54c7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba5a54c7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba5a54c67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44nwqur4                        0x000056097f648525 <unavailable> + 5413\n5    libc.so.6                          0x00002ba5a59bc460 __libc_start_main + 245\n6    tmp44nwqur4                        0x000056097f648129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0.0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return count / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmphdp02suw/tmphdp02suw.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9dd5464c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9dd515bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9dd515b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9dd515a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphdp02suw                        0x0000564f3d37f525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9dd5650460 __libc_start_main + 245\n6    tmphdp02suw                        0x0000564f3d37f129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0.0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return count / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmphdp02suw/tmphdp02suw.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9dd5464c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9dd515bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9dd515b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9dd515a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphdp02suw                        0x0000564f3d37f525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9dd5650460 __libc_start_main + 245\n6    tmphdp02suw                        0x0000564f3d37f129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0.0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return count / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmphdp02suw/tmphdp02suw.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9dd5464c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9dd515bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9dd515b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9dd515a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphdp02suw                        0x0000564f3d37f525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9dd5650460 __libc_start_main + 245\n6    tmphdp02suw                        0x0000564f3d37f129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count: Double = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return count / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "tmpwy1qzveb/tmpwy1qzveb.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b89146c2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b89143b9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b89143b9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b89143b87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwy1qzveb                        0x000055814899f525 <unavailable> + 5413\n5    libc.so.6                          0x00002b89148ae460 __libc_start_main + 245\n6    tmpwy1qzveb                        0x000055814899f129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var positive_count = 0\n    for num in nums {\n        if num > 0 {\n            positive_count += 1\n        }\n    }\n    return Double(positive_count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmp44nwqur4/tmp44nwqur4.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba5a57d0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba5a54c7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba5a54c7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba5a54c67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44nwqur4                        0x000056097f648525 <unavailable> + 5413\n5    libc.so.6                          0x00002ba5a59bc460 __libc_start_main + 245\n6    tmp44nwqur4                        0x000056097f648129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var positives = 0\n    for num in nums {\n        if num > 0 {\n            positives += 1\n        }\n    }\n    return Double(positives) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1666123856,
      "stdout": "",
      "stderr": "tmpyy1q7817/tmpyy1q7817.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aefa5779c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aefa5470b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aefa5470988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aefa546f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpyy1q7817                        0x000055754cf19525 <unavailable> + 5413\n5    libc.so.6                          0x00002aefa5965460 __libc_start_main + 245\n6    tmpyy1q7817                        0x000055754cf19129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0.0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return count / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmphdp02suw/tmphdp02suw.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9dd5464c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9dd515bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9dd515b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9dd515a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphdp02suw                        0x0000564f3d37f525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9dd5650460 __libc_start_main + 245\n6    tmphdp02suw                        0x0000564f3d37f129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0.0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return count / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmphdp02suw/tmphdp02suw.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9dd5464c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9dd515bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9dd515b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9dd515a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphdp02suw                        0x0000564f3d37f525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9dd5650460 __libc_start_main + 245\n6    tmphdp02suw                        0x0000564f3d37f129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0.0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return count / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmphdp02suw/tmphdp02suw.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9dd5464c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9dd515bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9dd515b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9dd515a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphdp02suw                        0x0000564f3d37f525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9dd5650460 __libc_start_main + 245\n6    tmphdp02suw                        0x0000564f3d37f129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0.0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return count / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmphdp02suw/tmphdp02suw.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9dd5464c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9dd515bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9dd515b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9dd515a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphdp02suw                        0x0000564f3d37f525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9dd5650460 __libc_start_main + 245\n6    tmphdp02suw                        0x0000564f3d37f129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0.0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return count / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmphdp02suw/tmphdp02suw.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9dd5464c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9dd515bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9dd515b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9dd515a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphdp02suw                        0x0000564f3d37f525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9dd5650460 __libc_start_main + 245\n6    tmphdp02suw                        0x0000564f3d37f129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var positive_count = 0\n    for num in nums {\n        if num > 0 {\n            positive_count += 1\n        }\n    }\n    return Double(positive_count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmp44nwqur4/tmp44nwqur4.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba5a57d0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba5a54c7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba5a54c7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba5a54c67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp44nwqur4                        0x000056097f648525 <unavailable> + 5413\n5    libc.so.6                          0x00002ba5a59bc460 __libc_start_main + 245\n6    tmp44nwqur4                        0x000056097f648129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the ration of positive numbers in an array of integers.\nfunc positive_count(nums: [Int]) -> Double {\n    var count = 0\n    for num in nums {\n        if num > 0 {\n            count += 1\n        }\n    }\n    return Double(count) / Double(nums.count)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(positive_count(nums: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8]) == 0.54)\nassert(positive_count(nums: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 0.69)\nassert(positive_count(nums: [2, 4, -6, -9, 11, -12, 14, -5, 17]) == 0.56)",
      "timestamp": 1665517103,
      "stdout": "",
      "stderr": "tmpvdnnm4qc/tmpvdnnm4qc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9b91bdfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9b918d6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9b918d6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9b918d57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvdnnm4qc                        0x00005607b2eac525 <unavailable> + 5413\n5    libc.so.6                          0x00002b9b91dcb460 __libc_start_main + 245\n6    tmpvdnnm4qc                        0x00005607b2eac129 <unavailable> + 4393\n",
      "exit_code": -4,
      "status": "Exception"
    }
  ]
}