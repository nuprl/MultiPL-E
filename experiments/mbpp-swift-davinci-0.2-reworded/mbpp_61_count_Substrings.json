{
  "name": "mbpp_61_count_Substrings",
  "language": "swift",
  "prompt": "\n/// Write a swiftthon function to count the number of substrings with the sum of digits equal to their length.\nfunc count_Substrings(s: String) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_61_count_Substrings.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_Substrings(s: \"112112\") == 6)\nassert(count_Substrings(s: \"111\") == 6)\nassert(count_Substrings(s: \"1101112\") == 12)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.reduce(0, {$0 + Int(String($1))!}) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    let s_arr = Array(s)\n    for i in 0..<s_arr.count {\n        for j in i..<s_arr.count {\n            let sub_arr = Array(s_arr[i...j])\n            let sum = sub_arr.reduce(0, { $0 + Int(String($1))! })\n            if sum == sub_arr.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0) { $0 + Int(String($1))! }\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.reduce(0, {$0 + Int(String($1))!}) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, { $0 + Int(String($1))! })\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, {$0 + Int(String($1))!})\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 1...s.count {\n        for j in 0...s.count - i {\n            let sub = s[j..<j+i]\n            let sum = sub.reduce(0, {$0 + Int(String($1))!})\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.reduce(0, { $0 + Int(String($1))! }) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, { $0 + Int(String($1))! })\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.digits.sum() {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let subString = s[i...j]\n            let sum = subString.reduce(0, { $0 + Int(String($1))! })\n            if sum == subString.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.reduce(0, { $0 + Int(String($1))! }) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.reduce(0, { $0 + Int(String($1))! }) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let subString = s[i...j]\n            if subString.count == subString.reduce(0, {$0 + Int(String($1))!}) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            var sum = 0\n            for c in sub {\n                sum += Int(String(c))!\n            }\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.digits.sum() {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0, {$0 + Int(String($1))!})\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sum_of_digits(s: sub) {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            let sum = sub.reduce(0) { $0 + Int(String($1))! }\n            if sum == sub.count {\n                count += 1\n            }\n        }\n    }\n    return count",
    "    var count = 0\n    for i in 0..<s.count {\n        for j in i..<s.count {\n            let sub = s[i...j]\n            if sub.count == sub.reduce(0, {$0 + Int(String($1))!}) {\n                count += 1\n            }\n        }\n    }\n    return count"
  ]
}