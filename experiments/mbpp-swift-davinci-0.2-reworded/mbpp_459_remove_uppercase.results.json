{
  "name": "mbpp_459_remove_uppercase",
  "language": "swift",
  "prompt": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_459_remove_uppercase.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str1.replacingOccurrences(of: str2, with: \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "/tmp/tmpusrby1iw.swift:10:17: error: value of type 'String' has no member 'replacingOccurrences'\n    return str1.replacingOccurrences(of: str2, with: \"\")\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            continue\n        }\n        str2.append(char)\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    let str2 = str1.lowercased()\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmp_2v58ikd/tmp_2v58ikd.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b150a21dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1509f14b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1509f14988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1509f137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_2v58ikd                        0x000056305c115357 <unavailable> + 4951\n5    libc.so.6                          0x00002b150a409460 __libc_start_main + 245\n6    tmp_2v58ikd                        0x000056305c114f99 <unavailable> + 3993\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    let str2 = str1.lowercased()\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmp_2v58ikd/tmp_2v58ikd.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b150a21dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1509f14b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1509f14988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1509f137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_2v58ikd                        0x000056305c115357 <unavailable> + 4951\n5    libc.so.6                          0x00002b150a409460 __libc_start_main + 245\n6    tmp_2v58ikd                        0x000056305c114f99 <unavailable> + 3993\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for i in str1 {\n        if i.isUppercase {\n            str2.append(i)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpiec3hpjt/tmpiec3hpjt.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afeb9644c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afeb933bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afeb933b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afeb933a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpiec3hpjt                        0x0000556e81787467 <unavailable> + 5223\n5    libc.so.6                          0x00002afeb9830460 __libc_start_main + 245\n6    tmpiec3hpjt                        0x0000556e817870a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    return str1.lowercased()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpyzl6rrs5/tmpyzl6rrs5.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0189539c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0189230b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0189230988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b018922f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpyzl6rrs5                        0x000055e4a71a5357 <unavailable> + 4951\n5    libc.so.6                          0x00002b0189725460 __libc_start_main + 245\n6    tmpyzl6rrs5                        0x000055e4a71a4f99 <unavailable> + 3993\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if !char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for c in str1 {\n        if c.isUppercase {\n            str2.append(c)\n        }\n    }\n    return str1.replacingOccurrences(of: str2, with: \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "/tmp/tmp83uji_p6.swift:10:17: error: value of type 'String' has no member 'replacingOccurrences'\n    return str1.replacingOccurrences(of: str2, with: \"\")\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str = str1\n    var index = 0\n    while index < str.count {\n        if str[str.index(str.startIndex, offsetBy: index)].isUppercase {\n            str.remove(at: str.index(str.startIndex, offsetBy: index))\n        } else {\n            index += 1\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if str[str.index(str.startIndex, offsetBy: i)].isUppercase {\n            str.remove(at: str.index(str.startIndex, offsetBy: i))\n        } else {\n            i += 1\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if !(char >= \"A\" && char <= \"Z\") {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    return str1.replacingOccurrences(of: \"[A-Z]\", with: \"\", options: .regularExpression)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "/tmp/tmpwaei2fiy.swift:4:17: error: value of type 'String' has no member 'replacingOccurrences'\n    return str1.replacingOccurrences(of: \"[A-Z]\", with: \"\", options: .regularExpression)\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpwaei2fiy.swift:4:71: error: cannot infer contextual base in reference to member 'regularExpression'\n    return str1.replacingOccurrences(of: \"[A-Z]\", with: \"\", options: .regularExpression)\n                                                                     ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str1.replacingOccurrences(of: str2, with: \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "/tmp/tmpusrby1iw.swift:10:17: error: value of type 'String' has no member 'replacingOccurrences'\n    return str1.replacingOccurrences(of: str2, with: \"\")\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str1.replacingOccurrences(of: str2, with: \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "/tmp/tmpusrby1iw.swift:10:17: error: value of type 'String' has no member 'replacingOccurrences'\n    return str1.replacingOccurrences(of: str2, with: \"\")\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if !(char >= \"A\" && char <= \"Z\") {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if str[str.index(str.startIndex, offsetBy: i)].isUppercase {\n            str.remove(at: str.index(str.startIndex, offsetBy: i))\n        } else {\n            i += 1\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if !char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        let index = str.index(str.startIndex, offsetBy: i)\n        if str[index].isUppercase {\n            str.remove(at: index)\n            i -= 1\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char).lowercased()\n        } else {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "tmpbm23tut1/tmpbm23tut1.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aefb07a6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aefb049db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aefb049d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aefb049c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbm23tut1                        0x000055d6b5acf517 <unavailable> + 5399\n5    libc.so.6                          0x00002aefb0992460 __libc_start_main + 245\n6    tmpbm23tut1                        0x000055d6b5acf159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    let str2 = str1.lowercased()\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmp_2v58ikd/tmp_2v58ikd.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b150a21dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1509f14b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1509f14988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1509f137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_2v58ikd                        0x000056305c115357 <unavailable> + 4951\n5    libc.so.6                          0x00002b150a409460 __libc_start_main + 245\n6    tmp_2v58ikd                        0x000056305c114f99 <unavailable> + 3993\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if str[i].isUppercase {\n            str.remove(at: str.index(str.startIndex, offsetBy: i))\n        } else {\n            i += 1\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "/tmp/tmpe47pcq3q.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i].isUppercase {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "tmp42gsj9k1/tmp42gsj9k1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b99d984ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b99d9541b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b99d9541988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b99d95407b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp42gsj9k1                        0x0000564357db74b7 <unavailable> + 5303\n5    libc.so.6                          0x00002b99d9a36460 __libc_start_main + 245\n6    tmp42gsj9k1                        0x0000564357db70f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char).lowercased()\n        } else {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "tmpbm23tut1/tmpbm23tut1.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aefb07a6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aefb049db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aefb049d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aefb049c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbm23tut1                        0x000055d6b5acf517 <unavailable> + 5399\n5    libc.so.6                          0x00002aefb0992460 __libc_start_main + 245\n6    tmpbm23tut1                        0x000055d6b5acf159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    return str1.lowercased()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpyzl6rrs5/tmpyzl6rrs5.swift:20: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0189539c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0189230b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0189230988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b018922f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpyzl6rrs5                        0x000055e4a71a5357 <unavailable> + 4951\n5    libc.so.6                          0x00002b0189725460 __libc_start_main + 245\n6    tmpyzl6rrs5                        0x000055e4a71a4f99 <unavailable> + 3993\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if !char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    let str2 = str1.lowercased()\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmp_2v58ikd/tmp_2v58ikd.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b150a21dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1509f14b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1509f14988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1509f137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_2v58ikd                        0x000056305c115357 <unavailable> + 4951\n5    libc.so.6                          0x00002b150a409460 __libc_start_main + 245\n6    tmp_2v58ikd                        0x000056305c114f99 <unavailable> + 3993\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    return str1.replacingOccurrences(of: \"[A-Z]\", with: \"\", options: .regularExpression)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "/tmp/tmpwaei2fiy.swift:4:17: error: value of type 'String' has no member 'replacingOccurrences'\n    return str1.replacingOccurrences(of: \"[A-Z]\", with: \"\", options: .regularExpression)\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpwaei2fiy.swift:4:71: error: cannot infer contextual base in reference to member 'regularExpression'\n    return str1.replacingOccurrences(of: \"[A-Z]\", with: \"\", options: .regularExpression)\n                                                                     ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    let str2 = str1.lowercased()\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmp_2v58ikd/tmp_2v58ikd.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b150a21dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1509f14b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1509f14988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1509f137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_2v58ikd                        0x000056305c115357 <unavailable> + 4951\n5    libc.so.6                          0x00002b150a409460 __libc_start_main + 245\n6    tmp_2v58ikd                        0x000056305c114f99 <unavailable> + 3993\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str = str1\n    for i in 0..<str.count {\n        if str[str.index(str.startIndex, offsetBy: i)].isUppercase {\n            str.remove(at: str.index(str.startIndex, offsetBy: i))\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "Swift/StringIndexValidation.swift:120: Fatal error: String index is out of bounds\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0c51cffc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0c519f6561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b0c519f6286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b0c519f613c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b0c519f5bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftCore.so                    0x00002b0c51b29ec2 <unavailable> + 2694850\n6    libswiftCore.so                    0x00002b0c51ae2660 String.subscript.getter + 34\n7    tmppfi6k_9x                        0x00005596db920afd <unavailable> + 6909\n8    tmppfi6k_9x                        0x00005596db9205e6 <unavailable> + 5606\n9    libc.so.6                          0x00002b0c51eeb460 __libc_start_main + 245\n10   tmppfi6k_9x                        0x00005596db9202e9 <unavailable> + 4841\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if str[i] >= \"A\" && str[i] <= \"Z\" {\n            str.remove(at: str.index(str.startIndex, offsetBy: i))\n        } else {\n            i += 1\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "/tmp/tmp7qcdn2h0.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i] >= \"A\" && str[i] <= \"Z\" {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp7qcdn2h0.swift:7:29: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i] >= \"A\" && str[i] <= \"Z\" {\n                            ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str1.replacingOccurrences(of: str2, with: \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "/tmp/tmpusrby1iw.swift:10:17: error: value of type 'String' has no member 'replacingOccurrences'\n    return str1.replacingOccurrences(of: str2, with: \"\")\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "tmp42gsj9k1/tmp42gsj9k1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b99d984ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b99d9541b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b99d9541988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b99d95407b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp42gsj9k1                        0x0000564357db74b7 <unavailable> + 5303\n5    libc.so.6                          0x00002b99d9a36460 __libc_start_main + 245\n6    tmp42gsj9k1                        0x0000564357db70f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str1.replacingOccurrences(of: str2, with: \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "/tmp/tmpusrby1iw.swift:10:17: error: value of type 'String' has no member 'replacingOccurrences'\n    return str1.replacingOccurrences(of: str2, with: \"\")\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    let str = str1.lowercased()\n    var result = \"\"\n    for char in str {\n        if char >= \"a\" && char <= \"z\" {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "tmp968n45bl/tmp968n45bl.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae6416fac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae6413f1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae6413f1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae6413f07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp968n45bl                        0x000055c853eed627 <unavailable> + 5671\n5    libc.so.6                          0x00002ae6418e6460 __libc_start_main + 245\n6    tmp968n45bl                        0x000055c853eed269 <unavailable> + 4713\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char).lowercased()\n        } else {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "tmpbm23tut1/tmpbm23tut1.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aefb07a6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aefb049db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aefb049d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aefb049c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbm23tut1                        0x000055d6b5acf517 <unavailable> + 5399\n5    libc.so.6                          0x00002aefb0992460 __libc_start_main + 245\n6    tmpbm23tut1                        0x000055d6b5acf159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str1.replacingOccurrences(of: str2, with: \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "/tmp/tmpusrby1iw.swift:10:17: error: value of type 'String' has no member 'replacingOccurrences'\n    return str1.replacingOccurrences(of: str2, with: \"\")\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char).lowercased()\n        } else {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "tmpbm23tut1/tmpbm23tut1.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aefb07a6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aefb049db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aefb049d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aefb049c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbm23tut1                        0x000055d6b5acf517 <unavailable> + 5399\n5    libc.so.6                          0x00002aefb0992460 __libc_start_main + 245\n6    tmpbm23tut1                        0x000055d6b5acf159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char).lowercased()\n        } else {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "tmpbm23tut1/tmpbm23tut1.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aefb07a6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aefb049db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aefb049d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aefb049c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbm23tut1                        0x000055d6b5acf517 <unavailable> + 5399\n5    libc.so.6                          0x00002aefb0992460 __libc_start_main + 245\n6    tmpbm23tut1                        0x000055d6b5acf159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    let str2 = str1.lowercased()\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmp_2v58ikd/tmp_2v58ikd.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b150a21dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1509f14b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1509f14988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1509f137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_2v58ikd                        0x000056305c115357 <unavailable> + 4951\n5    libc.so.6                          0x00002b150a409460 __libc_start_main + 245\n6    tmp_2v58ikd                        0x000056305c114f99 <unavailable> + 3993\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if !char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str1.replacingOccurrences(of: str2, with: \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "/tmp/tmpusrby1iw.swift:10:17: error: value of type 'String' has no member 'replacingOccurrences'\n    return str1.replacingOccurrences(of: str2, with: \"\")\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str1.replacingOccurrences(of: str2, with: \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "/tmp/tmpusrby1iw.swift:10:17: error: value of type 'String' has no member 'replacingOccurrences'\n    return str1.replacingOccurrences(of: str2, with: \"\")\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char).lowercased()\n        } else {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "tmpbm23tut1/tmpbm23tut1.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aefb07a6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aefb049db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aefb049d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aefb049c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbm23tut1                        0x000055d6b5acf517 <unavailable> + 5399\n5    libc.so.6                          0x00002aefb0992460 __libc_start_main + 245\n6    tmpbm23tut1                        0x000055d6b5acf159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    let str2 = str1.lowercased()\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmp_2v58ikd/tmp_2v58ikd.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b150a21dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1509f14b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1509f14988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1509f137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_2v58ikd                        0x000056305c115357 <unavailable> + 4951\n5    libc.so.6                          0x00002b150a409460 __libc_start_main + 245\n6    tmp_2v58ikd                        0x000056305c114f99 <unavailable> + 3993\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char).lowercased()\n        } else {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "tmpbm23tut1/tmpbm23tut1.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aefb07a6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aefb049db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aefb049d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aefb049c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbm23tut1                        0x000055d6b5acf517 <unavailable> + 5399\n5    libc.so.6                          0x00002aefb0992460 __libc_start_main + 245\n6    tmpbm23tut1                        0x000055d6b5acf159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for i in str1 {\n        if i.isUppercase {\n            str2 += String(i).lowercased()\n        } else {\n            str2 += String(i)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "tmp0azfuteb/tmp0azfuteb.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b157d048c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b157cd3fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b157cd3f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b157cd3e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0azfuteb                        0x0000557bf2035517 <unavailable> + 5399\n5    libc.so.6                          0x00002b157d234460 __libc_start_main + 245\n6    tmp0azfuteb                        0x0000557bf2035159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    let str2 = str1.lowercased()\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmp_2v58ikd/tmp_2v58ikd.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b150a21dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1509f14b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1509f14988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1509f137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_2v58ikd                        0x000056305c115357 <unavailable> + 4951\n5    libc.so.6                          0x00002b150a409460 __libc_start_main + 245\n6    tmp_2v58ikd                        0x000056305c114f99 <unavailable> + 3993\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str1.replacingOccurrences(of: str2, with: \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "/tmp/tmpusrby1iw.swift:10:17: error: value of type 'String' has no member 'replacingOccurrences'\n    return str1.replacingOccurrences(of: str2, with: \"\")\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    let str2 = str1.filter { $0.isLowercase }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char).lowercased()\n        } else {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "tmpbm23tut1/tmpbm23tut1.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aefb07a6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aefb049db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aefb049d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aefb049c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbm23tut1                        0x000055d6b5acf517 <unavailable> + 5399\n5    libc.so.6                          0x00002aefb0992460 __libc_start_main + 245\n6    tmpbm23tut1                        0x000055d6b5acf159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for c in str1 {\n        if c.isUppercase {\n            continue\n        }\n        str2.append(c)\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    return str1.replacingOccurrences(of: \"[A-Z]\", with: \"\", options: .regularExpression)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "/tmp/tmpwaei2fiy.swift:4:17: error: value of type 'String' has no member 'replacingOccurrences'\n    return str1.replacingOccurrences(of: \"[A-Z]\", with: \"\", options: .regularExpression)\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpwaei2fiy.swift:4:71: error: cannot infer contextual base in reference to member 'regularExpression'\n    return str1.replacingOccurrences(of: \"[A-Z]\", with: \"\", options: .regularExpression)\n                                                                     ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    return str1.replacingOccurrences(of: \"[A-Z]\", with: \"\", options: .regularExpression)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "/tmp/tmpwaei2fiy.swift:4:17: error: value of type 'String' has no member 'replacingOccurrences'\n    return str1.replacingOccurrences(of: \"[A-Z]\", with: \"\", options: .regularExpression)\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpwaei2fiy.swift:4:71: error: cannot infer contextual base in reference to member 'regularExpression'\n    return str1.replacingOccurrences(of: \"[A-Z]\", with: \"\", options: .regularExpression)\n                                                                     ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if str[str.index(str.startIndex, offsetBy: i)].isUppercase {\n            str.remove(at: str.index(str.startIndex, offsetBy: i))\n        } else {\n            i += 1\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    return str1.replacingOccurrences(of: \"[A-Z]\", with: \"\", options: .regularExpression)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "/tmp/tmpwaei2fiy.swift:4:17: error: value of type 'String' has no member 'replacingOccurrences'\n    return str1.replacingOccurrences(of: \"[A-Z]\", with: \"\", options: .regularExpression)\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmpwaei2fiy.swift:4:71: error: cannot infer contextual base in reference to member 'regularExpression'\n    return str1.replacingOccurrences(of: \"[A-Z]\", with: \"\", options: .regularExpression)\n                                                                     ~^~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if str[str.index(str.startIndex, offsetBy: i)].isUppercase {\n            str.remove(at: str.index(str.startIndex, offsetBy: i))\n        } else {\n            i += 1\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    let str2 = str1.lowercased()\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmp_2v58ikd/tmp_2v58ikd.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b150a21dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1509f14b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1509f14988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1509f137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_2v58ikd                        0x000056305c115357 <unavailable> + 4951\n5    libc.so.6                          0x00002b150a409460 __libc_start_main + 245\n6    tmp_2v58ikd                        0x000056305c114f99 <unavailable> + 3993\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if str[i].isUppercase {\n            str.remove(at: str.index(str.startIndex, offsetBy: i))\n        } else {\n            i += 1\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "/tmp/tmpe47pcq3q.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i].isUppercase {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if str[i] >= \"A\" && str[i] <= \"Z\" {\n            str.remove(at: str.index(str.startIndex, offsetBy: i))\n        } else {\n            i += 1\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "/tmp/tmp7qcdn2h0.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i] >= \"A\" && str[i] <= \"Z\" {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp7qcdn2h0.swift:7:29: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i] >= \"A\" && str[i] <= \"Z\" {\n                            ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    let str2 = str1.lowercased()\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmp_2v58ikd/tmp_2v58ikd.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b150a21dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1509f14b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1509f14988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1509f137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_2v58ikd                        0x000056305c115357 <unavailable> + 4951\n5    libc.so.6                          0x00002b150a409460 __libc_start_main + 245\n6    tmp_2v58ikd                        0x000056305c114f99 <unavailable> + 3993\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "tmp42gsj9k1/tmp42gsj9k1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b99d984ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b99d9541b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b99d9541988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b99d95407b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp42gsj9k1                        0x0000564357db74b7 <unavailable> + 5303\n5    libc.so.6                          0x00002b99d9a36460 __libc_start_main + 245\n6    tmp42gsj9k1                        0x0000564357db70f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char).lowercased()\n        } else {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "tmpbm23tut1/tmpbm23tut1.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aefb07a6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aefb049db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aefb049d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aefb049c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbm23tut1                        0x000055d6b5acf517 <unavailable> + 5399\n5    libc.so.6                          0x00002aefb0992460 __libc_start_main + 245\n6    tmpbm23tut1                        0x000055d6b5acf159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str.append(char)\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "tmp665vovtc/tmp665vovtc.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b571d0b4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b571cdabb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b571cdab988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b571cdaa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp665vovtc                        0x00005635b7c74467 <unavailable> + 5223\n5    libc.so.6                          0x00002b571d2a0460 __libc_start_main + 245\n6    tmp665vovtc                        0x00005635b7c740a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char).lowercased()\n        } else {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "tmpbm23tut1/tmpbm23tut1.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aefb07a6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aefb049db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aefb049d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aefb049c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbm23tut1                        0x000055d6b5acf517 <unavailable> + 5399\n5    libc.so.6                          0x00002aefb0992460 __libc_start_main + 245\n6    tmpbm23tut1                        0x000055d6b5acf159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if !char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    let str2 = str1.lowercased()\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmp_2v58ikd/tmp_2v58ikd.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b150a21dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1509f14b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1509f14988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1509f137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_2v58ikd                        0x000056305c115357 <unavailable> + 4951\n5    libc.so.6                          0x00002b150a409460 __libc_start_main + 245\n6    tmp_2v58ikd                        0x000056305c114f99 <unavailable> + 3993\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str1.replacingOccurrences(of: str2, with: \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "/tmp/tmpusrby1iw.swift:10:17: error: value of type 'String' has no member 'replacingOccurrences'\n    return str1.replacingOccurrences(of: str2, with: \"\")\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for i in str1 {\n        if i.isUppercase {\n            str2 += String(i).lowercased()\n        } else {\n            str2 += String(i)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "tmp0azfuteb/tmp0azfuteb.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b157d048c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b157cd3fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b157cd3f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b157cd3e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0azfuteb                        0x0000557bf2035517 <unavailable> + 5399\n5    libc.so.6                          0x00002b157d234460 __libc_start_main + 245\n6    tmp0azfuteb                        0x0000557bf2035159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if !char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char).lowercased()\n        } else {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "tmpbm23tut1/tmpbm23tut1.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aefb07a6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aefb049db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aefb049d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aefb049c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbm23tut1                        0x000055d6b5acf517 <unavailable> + 5399\n5    libc.so.6                          0x00002aefb0992460 __libc_start_main + 245\n6    tmpbm23tut1                        0x000055d6b5acf159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for c in str1 {\n        if c.isLowercase {\n            str2.append(c)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    let str2 = str1.lowercased()\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmp_2v58ikd/tmp_2v58ikd.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b150a21dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1509f14b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1509f14988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1509f137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_2v58ikd                        0x000056305c115357 <unavailable> + 4951\n5    libc.so.6                          0x00002b150a409460 __libc_start_main + 245\n6    tmp_2v58ikd                        0x000056305c114f99 <unavailable> + 3993\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char).lowercased()\n        } else {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "tmpbm23tut1/tmpbm23tut1.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aefb07a6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aefb049db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aefb049d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aefb049c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbm23tut1                        0x000055d6b5acf517 <unavailable> + 5399\n5    libc.so.6                          0x00002aefb0992460 __libc_start_main + 245\n6    tmpbm23tut1                        0x000055d6b5acf159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str1.replacingOccurrences(of: str2, with: \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "/tmp/tmpusrby1iw.swift:10:17: error: value of type 'String' has no member 'replacingOccurrences'\n    return str1.replacingOccurrences(of: str2, with: \"\")\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str = str1\n    for c in str1.characters {\n        if c.isUppercase {\n            str = str.stringByReplacingOccurrencesOfString(String(c), withString: \"\")\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "/tmp/tmp83qyi0gr.swift:5:19: error: 'characters' is unavailable: Please use String directly\n    for c in str1.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp83qyi0gr.swift:7:23: error: value of type 'String' has no member 'stringByReplacingOccurrencesOfString'\n            str = str.stringByReplacingOccurrencesOfString(String(c), withString: \"\")\n                  ~~~ ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char).lowercased()\n        } else {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "tmpbm23tut1/tmpbm23tut1.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aefb07a6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aefb049db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aefb049d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aefb049c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbm23tut1                        0x000055d6b5acf517 <unavailable> + 5399\n5    libc.so.6                          0x00002aefb0992460 __libc_start_main + 245\n6    tmpbm23tut1                        0x000055d6b5acf159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    let str2 = str1.lowercased()\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmp_2v58ikd/tmp_2v58ikd.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b150a21dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1509f14b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1509f14988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1509f137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_2v58ikd                        0x000056305c115357 <unavailable> + 4951\n5    libc.so.6                          0x00002b150a409460 __libc_start_main + 245\n6    tmp_2v58ikd                        0x000056305c114f99 <unavailable> + 3993\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if !char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if str[i] >= \"A\" && str[i] <= \"Z\" {\n            str.remove(at: str.index(str.startIndex, offsetBy: i))\n            i -= 1\n        }\n        i += 1\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "/tmp/tmpnzbjjlvj.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i] >= \"A\" && str[i] <= \"Z\" {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpnzbjjlvj.swift:7:29: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i] >= \"A\" && str[i] <= \"Z\" {\n                            ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str1.replacingOccurrences(of: str2, with: \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "/tmp/tmpusrby1iw.swift:10:17: error: value of type 'String' has no member 'replacingOccurrences'\n    return str1.replacingOccurrences(of: str2, with: \"\")\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char).lowercased()\n        } else {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "tmpbm23tut1/tmpbm23tut1.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aefb07a6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aefb049db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aefb049d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aefb049c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbm23tut1                        0x000055d6b5acf517 <unavailable> + 5399\n5    libc.so.6                          0x00002aefb0992460 __libc_start_main + 245\n6    tmpbm23tut1                        0x000055d6b5acf159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    let str = str1.lowercased()\n    var result = \"\"\n    for char in str {\n        if char.isLetter {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "tmpvuafcqc1/tmpvuafcqc1.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6c8f81ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6c8f515b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6c8f515988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6c8f5147b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvuafcqc1                        0x00005630c02d34b7 <unavailable> + 5303\n5    libc.so.6                          0x00002b6c8fa0a460 __libc_start_main + 245\n6    tmpvuafcqc1                        0x00005630c02d30f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char).lowercased()\n        } else {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "tmpbm23tut1/tmpbm23tut1.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aefb07a6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aefb049db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aefb049d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aefb049c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbm23tut1                        0x000055d6b5acf517 <unavailable> + 5399\n5    libc.so.6                          0x00002aefb0992460 __libc_start_main + 245\n6    tmpbm23tut1                        0x000055d6b5acf159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char).lowercased()\n        } else {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "tmpbm23tut1/tmpbm23tut1.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aefb07a6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aefb049db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aefb049d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aefb049c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbm23tut1                        0x000055d6b5acf517 <unavailable> + 5399\n5    libc.so.6                          0x00002aefb0992460 __libc_start_main + 245\n6    tmpbm23tut1                        0x000055d6b5acf159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str1.replacingOccurrences(of: str2, with: \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "/tmp/tmpusrby1iw.swift:10:17: error: value of type 'String' has no member 'replacingOccurrences'\n    return str1.replacingOccurrences(of: str2, with: \"\")\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char).lowercased()\n        } else {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "tmpbm23tut1/tmpbm23tut1.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aefb07a6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aefb049db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aefb049d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aefb049c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbm23tut1                        0x000055d6b5acf517 <unavailable> + 5399\n5    libc.so.6                          0x00002aefb0992460 __libc_start_main + 245\n6    tmpbm23tut1                        0x000055d6b5acf159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if !char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char)\n        }\n    }\n    return str1.replacingOccurrences(of: str2, with: \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "/tmp/tmplcus3dv3.swift:10:17: error: value of type 'String' has no member 'replacingOccurrences'\n    return str1.replacingOccurrences(of: str2, with: \"\")\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str = str1\n    for i in str1.characters {\n        if i >= \"A\" && i <= \"Z\" {\n            str = str.replacingOccurrences(of: String(i), with: \"\")\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "/tmp/tmp2k444lyi.swift:5:19: error: 'characters' is unavailable: Please use String directly\n    for i in str1.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp2k444lyi.swift:7:23: error: value of type 'String' has no member 'replacingOccurrences'\n            str = str.replacingOccurrences(of: String(i), with: \"\")\n                  ~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    let str2 = str1.lowercased()\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmp_2v58ikd/tmp_2v58ikd.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b150a21dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1509f14b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1509f14988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1509f137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_2v58ikd                        0x000056305c115357 <unavailable> + 4951\n5    libc.so.6                          0x00002b150a409460 __libc_start_main + 245\n6    tmp_2v58ikd                        0x000056305c114f99 <unavailable> + 3993\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char).lowercased()\n        } else {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "tmpbm23tut1/tmpbm23tut1.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aefb07a6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aefb049db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aefb049d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aefb049c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbm23tut1                        0x000055d6b5acf517 <unavailable> + 5399\n5    libc.so.6                          0x00002aefb0992460 __libc_start_main + 245\n6    tmpbm23tut1                        0x000055d6b5acf159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char).lowercased()\n        } else {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "tmpbm23tut1/tmpbm23tut1.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aefb07a6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aefb049db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aefb049d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aefb049c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbm23tut1                        0x000055d6b5acf517 <unavailable> + 5399\n5    libc.so.6                          0x00002aefb0992460 __libc_start_main + 245\n6    tmpbm23tut1                        0x000055d6b5acf159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if !char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    let str = str1.lowercased()\n    var result = \"\"\n    for char in str {\n        if char.isLetter {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "tmpvuafcqc1/tmpvuafcqc1.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6c8f81ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6c8f515b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6c8f515988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6c8f5147b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpvuafcqc1                        0x00005630c02d34b7 <unavailable> + 5303\n5    libc.so.6                          0x00002b6c8fa0a460 __libc_start_main + 245\n6    tmpvuafcqc1                        0x00005630c02d30f9 <unavailable> + 4345\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if !char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char).lowercased()\n        } else {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "tmpbm23tut1/tmpbm23tut1.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aefb07a6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aefb049db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aefb049d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aefb049c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbm23tut1                        0x000055d6b5acf517 <unavailable> + 5399\n5    libc.so.6                          0x00002aefb0992460 __libc_start_main + 245\n6    tmpbm23tut1                        0x000055d6b5acf159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str1.replacingOccurrences(of: str2, with: \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "/tmp/tmpusrby1iw.swift:10:17: error: value of type 'String' has no member 'replacingOccurrences'\n    return str1.replacingOccurrences(of: str2, with: \"\")\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    let str2 = str1.lowercased()\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmp_2v58ikd/tmp_2v58ikd.swift:21: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b150a21dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1509f14b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1509f14988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1509f137b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_2v58ikd                        0x000056305c115357 <unavailable> + 4951\n5    libc.so.6                          0x00002b150a409460 __libc_start_main + 245\n6    tmp_2v58ikd                        0x000056305c114f99 <unavailable> + 3993\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char).lowercased()\n        } else {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "tmpbm23tut1/tmpbm23tut1.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aefb07a6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aefb049db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aefb049d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aefb049c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbm23tut1                        0x000055d6b5acf517 <unavailable> + 5399\n5    libc.so.6                          0x00002aefb0992460 __libc_start_main + 245\n6    tmpbm23tut1                        0x000055d6b5acf159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str1.replacingOccurrences(of: str2, with: \"\")\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "/tmp/tmpusrby1iw.swift:10:17: error: value of type 'String' has no member 'replacingOccurrences'\n    return str1.replacingOccurrences(of: str2, with: \"\")\n           ~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for c in str1 {\n        if c.isLowercase {\n            str2.append(c)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for i in str1 {\n        if i.isUppercase {\n            str2.append(i)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpiec3hpjt/tmpiec3hpjt.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afeb9644c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afeb933bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afeb933b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afeb933a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpiec3hpjt                        0x0000556e81787467 <unavailable> + 5223\n5    libc.so.6                          0x00002afeb9830460 __libc_start_main + 245\n6    tmpiec3hpjt                        0x0000556e817870a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    let str2 = str1.replacingOccurrences(of: \"[A-Z]\", with: \"\", options: .regularExpression, range: nil)\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "/tmp/tmp8jxprc36.swift:4:21: error: value of type 'String' has no member 'replacingOccurrences'\n    let str2 = str1.replacingOccurrences(of: \"[A-Z]\", with: \"\", options: .regularExpression, range: nil)\n               ~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp8jxprc36.swift:4:75: error: cannot infer contextual base in reference to member 'regularExpression'\n    let str2 = str1.replacingOccurrences(of: \"[A-Z]\", with: \"\", options: .regularExpression, range: nil)\n                                                                         ~^~~~~~~~~~~~~~~~~\n/tmp/tmp8jxprc36.swift:4:101: error: 'nil' requires a contextual type\n    let str2 = str1.replacingOccurrences(of: \"[A-Z]\", with: \"\", options: .regularExpression, range: nil)\n                                                                                                    ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "tmpuvl0pkh1/tmpuvl0pkh1.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab0e37f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab0e34eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab0e34ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab0e34e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuvl0pkh1                        0x000055e821c2a467 <unavailable> + 5223\n5    libc.so.6                          0x00002ab0e39df460 __libc_start_main + 245\n6    tmpuvl0pkh1                        0x000055e821c2a0a9 <unavailable> + 4265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2 += String(char).lowercased()\n        } else {\n            str2 += String(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "tmpbm23tut1/tmpbm23tut1.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aefb07a6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aefb049db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aefb049d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aefb049c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbm23tut1                        0x000055d6b5acf517 <unavailable> + 5399\n5    libc.so.6                          0x00002aefb0992460 __libc_start_main + 245\n6    tmpbm23tut1                        0x000055d6b5acf159 <unavailable> + 4441\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str = str1\n    var i = 0\n    while i < str.count {\n        if str[i] >= \"A\" && str[i] <= \"Z\" {\n            str.remove(at: str.index(str.startIndex, offsetBy: i))\n        } else {\n            i += 1\n        }\n    }\n    return str\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "/tmp/tmp7qcdn2h0.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i] >= \"A\" && str[i] <= \"Z\" {\n           ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp7qcdn2h0.swift:7:29: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str[i] >= \"A\" && str[i] <= \"Z\" {\n                            ^~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1665510183,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n    var str2 = \"\"\n    for char in str1 {\n        if (char >= \"a\" && char <= \"z\") {\n            str2.append(char)\n        }\n    }\n    return str2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
      "timestamp": 1666123147,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}