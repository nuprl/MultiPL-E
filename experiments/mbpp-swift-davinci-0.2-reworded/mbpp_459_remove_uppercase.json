{
  "name": "mbpp_459_remove_uppercase",
  "language": "swift",
  "prompt": "\n/// Write a function to remove uppercase substrings from a given string.\nfunc remove_uppercase(str1: String) -> String {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_459_remove_uppercase.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(remove_uppercase(str1: \"cAstyoUrFavoRitETVshoWs\") == \"cstyoravoitshos\")\nassert(remove_uppercase(str1: \"wAtchTheinTernEtrAdIo\") == \"wtchheinerntrdo\")\nassert(remove_uppercase(str1: \"VoicESeaRchAndreComMendaTionS\") == \"oiceachndreomendaion\")",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str1.replacingOccurrences(of: str2, with: \"\")",
    "    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2",
    "    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            continue\n        }\n        str2.append(char)\n    }\n    return str2",
    "    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2",
    "    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2",
    "    let str2 = str1.lowercased()\n    return str2",
    "    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2",
    "    let str2 = str1.lowercased()\n    return str2",
    "    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2",
    "    var str2 = \"\"\n    for i in str1 {\n        if i.isUppercase {\n            str2.append(i)\n        }\n    }\n    return str2",
    "    return str1.lowercased()",
    "    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2",
    "    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2",
    "    var str2 = \"\"\n    for char in str1 {\n        if !char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2",
    "    var str2 = \"\"\n    for char in str1 {\n        if char.isUppercase {\n            str2.append(char)\n        }\n    }\n    return str2",
    "    var str2 = \"\"\n    for c in str1 {\n        if c.isUppercase {\n            str2.append(c)\n        }\n    }\n    return str1.replacingOccurrences(of: str2, with: \"\")",
    "    var str = str1\n    var index = 0\n    while index < str.count {\n        if str[str.index(str.startIndex, offsetBy: index)].isUppercase {\n            str.remove(at: str.index(str.startIndex, offsetBy: index))\n        } else {\n            index += 1\n        }\n    }\n    return str",
    "    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2",
    "    var str2 = \"\"\n    for char in str1 {\n        if char.isLowercase {\n            str2.append(char)\n        }\n    }\n    return str2",
    "    var str = str1\n    var i = 0\n    while i < str.count {\n        if str[str.index(str.startIndex, offsetBy: i)].isUppercase {\n            str.remove(at: str.index(str.startIndex, offsetBy: i))\n        } else {\n            i += 1\n        }\n    }\n    return str"
  ]
}