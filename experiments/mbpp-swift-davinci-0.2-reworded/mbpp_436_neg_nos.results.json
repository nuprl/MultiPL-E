{
  "name": "mbpp_436_neg_nos",
  "language": "swift",
  "prompt": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_436_neg_nos.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_nos = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_nos.append(i)\n        }\n    }\n    return neg_nos\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_nos = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_nos.append(i)\n        }\n    }\n    return neg_nos\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_nos = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_nos.append(i)\n        }\n    }\n    return neg_nos\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var list2: [Int] = []\n    for i in list1 {\n        if i < 0 {\n            list2.append(i)\n        }\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for item in list1 {\n        if item < 0 {\n            neg_list.append(item)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for num in list1 {\n        if num < 0 {\n            neg_list.append(num)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var list2: [Int] = []\n    for i in list1 {\n        if i < 0 {\n            list2.append(i)\n        }\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var list2: [Int] = []\n    for i in list1 {\n        if i < 0 {\n            list2.append(i)\n        }\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list: [Int] = []\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_nos: [Int] = []\n    for i in list1 {\n        if i < 0 {\n            neg_nos.append(i)\n        }\n    }\n    return neg_nos\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var list2 = [Int]()\n    for i in list1 {\n        if i < 0 {\n            list2.append(i)\n        }\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_nos = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_nos.append(i)\n        }\n    }\n    return neg_nos\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var list2 = [Int]()\n    for i in list1 {\n        if i < 0 {\n            list2.append(i)\n        }\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_nos_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_nos_list.append(i)\n        }\n    }\n    return neg_nos_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var list2 = [Int]()\n    for i in list1 {\n        if i < 0 {\n            list2.append(i)\n        }\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for num in list1 {\n        if num < 0 {\n            neg_list.append(num)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var list2 = [Int]()\n    for i in list1 {\n        if i < 0 {\n            list2.append(i)\n        }\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for num in list1 {\n        if num < 0 {\n            neg_list.append(num)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var list2: [Int] = []\n    for i in list1 {\n        if i < 0 {\n            list2.append(i)\n        }\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var list2 = [Int]()\n    for i in list1 {\n        if i < 0 {\n            list2.append(i)\n        }\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var list2: [Int] = []\n    for i in list1 {\n        if i < 0 {\n            list2.append(i)\n        }\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var list2: [Int] = []\n    for i in list1 {\n        if i < 0 {\n            list2.append(i)\n        }\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_nos = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_nos.append(i)\n        }\n    }\n    return neg_nos\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_nos = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_nos.append(i)\n        }\n    }\n    return neg_nos\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var list2 = [Int]()\n    for i in list1 {\n        if i < 0 {\n            list2.append(i)\n        }\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for num in list1 {\n        if num < 0 {\n            neg_list.append(num)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var list2 = [Int]()\n    for i in list1 {\n        if i < 0 {\n            list2.append(i)\n        }\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var list2 = [Int]()\n    for i in list1 {\n        if i < 0 {\n            list2.append(i)\n        }\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var list2 = [Int]()\n    for i in list1 {\n        if i < 0 {\n            list2.append(i)\n        }\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var list2 = [Int]()\n    for i in list1 {\n        if i < 0 {\n            list2.append(i)\n        }\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for num in list1 {\n        if num < 0 {\n            neg_list.append(num)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var list2: [Int] = []\n    for i in list1 {\n        if i < 0 {\n            list2.append(i)\n        }\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list: [Int] = []\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_nos = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_nos.append(i)\n        }\n    }\n    return neg_nos\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for num in list1 {\n        if num < 0 {\n            neg_list.append(num)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var list2 = [Int]()\n    for i in list1 {\n        if i < 0 {\n            list2.append(i)\n        }\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var list2: [Int] = []\n    for i in list1 {\n        if i < 0 {\n            list2.append(i)\n        }\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var list2 = [Int]()\n    for i in list1 {\n        if i < 0 {\n            list2.append(i)\n        }\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_nos = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_nos.append(i)\n        }\n    }\n    return neg_nos\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_nos = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_nos.append(i)\n        }\n    }\n    return neg_nos\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var list2 = [Int]()\n    for i in list1 {\n        if i < 0 {\n            list2.append(i)\n        }\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var list2: [Int] = []\n    for i in list1 {\n        if i < 0 {\n            list2.append(i)\n        }\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_nos = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_nos.append(i)\n        }\n    }\n    return neg_nos\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var list2 = [Int]()\n    for i in list1 {\n        if i < 0 {\n            list2.append(i)\n        }\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_nos = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_nos.append(i)\n        }\n    }\n    return neg_nos\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var list2 = [Int]()\n    for i in list1 {\n        if i < 0 {\n            list2.append(i)\n        }\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var list2: [Int] = []\n    for i in list1 {\n        if i < 0 {\n            list2.append(i)\n        }\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var list2: [Int] = []\n    for i in list1 {\n        if i < 0 {\n            list2.append(i)\n        }\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    return list1.filter { $0 < 0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_nos = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_nos.append(i)\n        }\n    }\n    return neg_nos\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list: [Int] = []\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var list2 = [Int]()\n    for i in list1 {\n        if i < 0 {\n            list2.append(i)\n        }\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var list2 = [Int]()\n    for i in list1 {\n        if i < 0 {\n            list2.append(i)\n        }\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var list2 = [Int]()\n    for i in list1 {\n        if i < 0 {\n            list2.append(i)\n        }\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var list2 = [Int]()\n    for i in list1 {\n        if i < 0 {\n            list2.append(i)\n        }\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for num in list1 {\n        if num < 0 {\n            neg_list.append(num)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var list2 = [Int]()\n    for i in list1 {\n        if i < 0 {\n            list2.append(i)\n        }\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for num in list1 {\n        if num < 0 {\n            neg_list.append(num)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var neg_list = [Int]()\n    for i in list1 {\n        if i < 0 {\n            neg_list.append(i)\n        }\n    }\n    return neg_list\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1665510113,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to return the negative numbers in an array.\nfunc neg_nos(list1: [Int]) -> [Int] {\n    var list2 = [Int]()\n    for i in list1 {\n        if i < 0 {\n            list2.append(i)\n        }\n    }\n    return list2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(neg_nos(list1: [-1, 4, 5, -6]) == [-1, -6])\nassert(neg_nos(list1: [-1, -2, 3, 4]) == [-1, -2])\nassert(neg_nos(list1: [-7, -6, 8, 9]) == [-7, -6])",
      "timestamp": 1666122762,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}