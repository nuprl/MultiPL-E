{
  "name": "mbpp_572_two_unique_nums",
  "language": "swift",
  "prompt": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_572_two_unique_nums.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var nums = nums\n    while nums.count > 0 {\n        let num = nums.removeFirst()\n        if !nums.contains(num) {\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpfqnt7l30/tmpfqnt7l30.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b81bc983c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b81bc67ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b81bc67a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b81bc6797b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfqnt7l30                        0x0000558e686545f4 <unavailable> + 5620\n5    libc.so.6                          0x00002b81bcb6f460 __libc_start_main + 245\n6    tmpfqnt7l30                        0x0000558e686541d9 <unavailable> + 4569\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var nums = nums\n    var unique_nums: [Int] = []\n    while nums.count > 0 {\n        let num = nums.removeFirst()\n        if nums.contains(num) {\n            nums.remove(at: nums.index(of: num)!)\n        } else {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var nums = nums\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpfa4d7lg4/tmpfa4d7lg4.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5162b53c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b516284ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b516284a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b51628497b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfa4d7lg4                        0x00005579472cd664 <unavailable> + 5732\n5    libc.so.6                          0x00002b5162d3f460 __libc_start_main + 245\n6    tmpfa4d7lg4                        0x00005579472cd249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var nums = nums\n    var result: [Int] = []\n    for i in 0..<nums.count {\n        var count = 0\n        for j in 0..<nums.count {\n            if nums[i] == nums[j] {\n                count += 1\n            }\n        }\n        if count == 1 {\n            result.append(nums[i])\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    var unique_nums_dict: [Int: Int] = [:]\n    for num in nums {\n        if unique_nums_dict[num] == nil {\n            unique_nums_dict[num] = 1\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "tmpadpoh8sw/tmpadpoh8sw.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba2f1795c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba2f148cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba2f148c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba2f148b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpadpoh8sw                        0x000055ac036a46f4 <unavailable> + 5876\n5    libc.so.6                          0x00002ba2f1981460 __libc_start_main + 245\n6    tmpadpoh8sw                        0x000055ac036a42d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var nums = nums\n    var unique_nums = [Int]()\n    \n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "tmparizv5ji/tmparizv5ji.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7e33db4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7e33aabb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7e33aab988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7e33aaa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmparizv5ji                        0x00005596ac7ab664 <unavailable> + 5732\n5    libc.so.6                          0x00002b7e33fa0460 __libc_start_main + 245\n6    tmparizv5ji                        0x00005596ac7ab249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var set = Set<Int>()\n    var result = [Int]()\n    for num in nums {\n        if !set.contains(num) {\n            set.insert(num)\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "tmpf12ieq1q/tmpf12ieq1q.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8130a56c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b813074db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b813074d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b813074c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf12ieq1q                        0x00005654d21f6754 <unavailable> + 5972\n5    libc.so.6                          0x00002b8130c42460 __libc_start_main + 245\n6    tmpf12ieq1q                        0x00005654d21f6339 <unavailable> + 4921\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    var nums_dict = [Int: Int]()\n    for num in nums {\n        if nums_dict[num] == nil {\n            nums_dict[num] = 1\n        } else {\n            nums_dict[num]! += 1\n        }\n    }\n    for (key, value) in nums_dict {\n        if value == 1 {\n            unique_nums.append(key)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "tmpfya7hnn_/tmpfya7hnn_.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5e3c73cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b5e3c433b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b5e3c433988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b5e3c4327b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfya7hnn_                        0x0000555abd32bacb <unavailable> + 6859\n5    libc.so.6                          0x00002b5e3c928460 __libc_start_main + 245\n6    tmpfya7hnn_                        0x0000555abd32b569 <unavailable> + 5481\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var dict: [Int: Int] = [:]\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    return dict.filter { $0.value == 1 }.map { $0.key }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "tmp2kuaeafo/tmp2kuaeafo.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba963bc1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba9638b8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba9638b8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba9638b77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2kuaeafo                        0x0000560d0ec897b4 <unavailable> + 6068\n5    libc.so.6                          0x00002ba963dad460 __libc_start_main + 245\n6    tmp2kuaeafo                        0x0000560d0ec89399 <unavailable> + 5017\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    var seen_nums: [Int] = []\n    for num in nums {\n        if !seen_nums.contains(num) {\n            seen_nums.append(num)\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "tmpya6lcq1a/tmpya6lcq1a.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9cb74e8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9cb71dfb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9cb71df988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9cb71de7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpya6lcq1a                        0x0000555cdd9c4614 <unavailable> + 5652\n5    libc.so.6                          0x00002b9cb76d4460 __libc_start_main + 245\n6    tmpya6lcq1a                        0x0000555cdd9c41f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var nums_set = Set<Int>()\n    for num in nums {\n        nums_set.insert(num)\n    }\n    return Array(nums_set)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "tmpz505rfd6/tmpz505rfd6.swift:24: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b869c781c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b869c478b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b869c478988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b869c4777b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpz505rfd6                        0x0000564de000c6f4 <unavailable> + 5876\n5    libc.so.6                          0x00002b869c96d460 __libc_start_main + 245\n6    tmpz505rfd6                        0x0000564de000c2d9 <unavailable> + 4825\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var nums = nums\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpfa4d7lg4/tmpfa4d7lg4.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5162b53c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b516284ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b516284a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b51628497b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfa4d7lg4                        0x00005579472cd664 <unavailable> + 5732\n5    libc.so.6                          0x00002b5162d3f460 __libc_start_main + 245\n6    tmpfa4d7lg4                        0x00005579472cd249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var nums_set = Set<Int>()\n    var result = [Int]()\n    for num in nums {\n        if nums_set.contains(num) {\n            result.append(num)\n        } else {\n            nums_set.insert(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "tmpr790f_sn/tmpr790f_sn.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8814d82c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8814a79b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8814a79988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8814a787b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpr790f_sn                        0x0000561a5e8ed754 <unavailable> + 5972\n5    libc.so.6                          0x00002b8814f6e460 __libc_start_main + 245\n6    tmpr790f_sn                        0x0000561a5e8ed339 <unavailable> + 4921\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var nums_set = Set<Int>()\n    var result = [Int]()\n    for num in nums {\n        if nums_set.contains(num) {\n            result.append(num)\n        } else {\n            nums_set.insert(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "tmpr790f_sn/tmpr790f_sn.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8814d82c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8814a79b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8814a79988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8814a787b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpr790f_sn                        0x0000561a5e8ed754 <unavailable> + 5972\n5    libc.so.6                          0x00002b8814f6e460 __libc_start_main + 245\n6    tmpr790f_sn                        0x0000561a5e8ed339 <unavailable> + 4921\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var nums = nums\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "tmpuk7k_qip/tmpuk7k_qip.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1542e03c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1542afab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1542afa988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1542af97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuk7k_qip                        0x0000561e56b2d614 <unavailable> + 5652\n5    libc.so.6                          0x00002b1542fef460 __libc_start_main + 245\n6    tmpuk7k_qip                        0x0000561e56b2d1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var nums_set = Set<Int>()\n    var result = [Int]()\n    for num in nums {\n        if nums_set.contains(num) {\n            result.append(num)\n        } else {\n            nums_set.insert(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "tmpr790f_sn/tmpr790f_sn.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8814d82c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8814a79b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8814a79988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8814a787b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpr790f_sn                        0x0000561a5e8ed754 <unavailable> + 5972\n5    libc.so.6                          0x00002b8814f6e460 __libc_start_main + 245\n6    tmpr790f_sn                        0x0000561a5e8ed339 <unavailable> + 4921\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var nums_set = Set<Int>()\n    var unique_nums = [Int]()\n    for num in nums {\n        if nums_set.contains(num) {\n            unique_nums.append(num)\n        } else {\n            nums_set.insert(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "tmpu6cu_qoo/tmpu6cu_qoo.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b95836fac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b95833f1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b95833f1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b95833f07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpu6cu_qoo                        0x00005576315e0754 <unavailable> + 5972\n5    libc.so.6                          0x00002b95838e6460 __libc_start_main + 245\n6    tmpu6cu_qoo                        0x00005576315e0339 <unavailable> + 4921\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var nums_set = Set<Int>()\n    var result = [Int]()\n    for num in nums {\n        if nums_set.contains(num) {\n            result.append(num)\n        } else {\n            nums_set.insert(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "tmpr790f_sn/tmpr790f_sn.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8814d82c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8814a79b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8814a79988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8814a787b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpr790f_sn                        0x0000561a5e8ed754 <unavailable> + 5972\n5    libc.so.6                          0x00002b8814f6e460 __libc_start_main + 245\n6    tmpr790f_sn                        0x0000561a5e8ed339 <unavailable> + 4921\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var set = Set<Int>()\n    var result = [Int]()\n    for num in nums {\n        if !set.contains(num) {\n            set.insert(num)\n            result.append(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "tmpf12ieq1q/tmpf12ieq1q.swift:28: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8130a56c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b813074db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b813074d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b813074c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf12ieq1q                        0x00005654d21f6754 <unavailable> + 5972\n5    libc.so.6                          0x00002b8130c42460 __libc_start_main + 245\n6    tmpf12ieq1q                        0x00005654d21f6339 <unavailable> + 4921\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var nums = nums\n    var unique = [Int]()\n    for num in nums {\n        if !unique.contains(num) {\n            unique.append(num)\n        }\n    }\n    return unique\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "tmpbqjqr927/tmpbqjqr927.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9773038c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9772d2fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9772d2f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9772d2e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbqjqr927                        0x00005572ff48e664 <unavailable> + 5732\n5    libc.so.6                          0x00002b9773224460 __libc_start_main + 245\n6    tmpbqjqr927                        0x00005572ff48e249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var nums = nums\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpfa4d7lg4/tmpfa4d7lg4.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5162b53c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b516284ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b516284a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b51628497b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfa4d7lg4                        0x00005579472cd664 <unavailable> + 5732\n5    libc.so.6                          0x00002b5162d3f460 __libc_start_main + 245\n6    tmpfa4d7lg4                        0x00005579472cd249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var nums = nums\n    var unique_nums = [Int]()\n    for i in 0..<nums.count {\n        if !unique_nums.contains(nums[i]) {\n            unique_nums.append(nums[i])\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "tmpmxavp7pi/tmpmxavp7pi.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac8322c4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac831fbbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac831fbb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac831fba7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmxavp7pi                        0x0000557769921734 <unavailable> + 5940\n5    libc.so.6                          0x00002ac8324b0460 __libc_start_main + 245\n6    tmpmxavp7pi                        0x0000557769921319 <unavailable> + 4889\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var nums = nums\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpfa4d7lg4/tmpfa4d7lg4.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5162b53c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b516284ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b516284a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b51628497b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfa4d7lg4                        0x00005579472cd664 <unavailable> + 5732\n5    libc.so.6                          0x00002b5162d3f460 __libc_start_main + 245\n6    tmpfa4d7lg4                        0x00005579472cd249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var result: [Int] = []\n    var nums = nums\n    for i in 0..<nums.count {\n        for j in i+1..<nums.count {\n            if nums[i] == nums[j] {\n                nums.remove(at: j)\n            }\n        }\n    }\n    return nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "Swift/ContiguousArrayBuffer.swift:600: Fatal error: Index out of range\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5986995c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b598668c561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b598668c286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b598668c13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b598668bbb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    libswiftSwiftOnoneSupport.so       0x00002b598648ce83 <unavailable> + 188035\n6    tmp8i423hps                        0x000055af6e13cc6a <unavailable> + 7274\n7    tmp8i423hps                        0x000055af6e13c594 <unavailable> + 5524\n8    libc.so.6                          0x00002b5986b81460 __libc_start_main + 245\n9    tmp8i423hps                        0x000055af6e13c259 <unavailable> + 4697\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var nums_set = Set<Int>()\n    var result = [Int]()\n    for num in nums {\n        if nums_set.contains(num) {\n            result.append(num)\n        } else {\n            nums_set.insert(num)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "tmpr790f_sn/tmpr790f_sn.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8814d82c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8814a79b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8814a79988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8814a787b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpr790f_sn                        0x0000561a5e8ed754 <unavailable> + 5972\n5    libc.so.6                          0x00002b8814f6e460 __libc_start_main + 245\n6    tmpr790f_sn                        0x0000561a5e8ed339 <unavailable> + 4921\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var nums = nums\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpfa4d7lg4/tmpfa4d7lg4.swift:27: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b5162b53c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b516284ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b516284a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b51628497b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfa4d7lg4                        0x00005579472cd664 <unavailable> + 5732\n5    libc.so.6                          0x00002b5162d3f460 __libc_start_main + 245\n6    tmpfa4d7lg4                        0x00005579472cd249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var result = [Int]()\n    var dict = [Int: Int]()\n    for num in nums {\n        if let count = dict[num] {\n            dict[num] = count + 1\n        } else {\n            dict[num] = 1\n        }\n    }\n    for (key, value) in dict {\n        if value == 1 {\n            result.append(key)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "tmplqdty8cn/tmplqdty8cn.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6af876cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6af8463b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6af8463988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6af84627b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmplqdty8cn                        0x00005624493498a4 <unavailable> + 6308\n5    libc.so.6                          0x00002b6af8958460 __libc_start_main + 245\n6    tmplqdty8cn                        0x0000562449349489 <unavailable> + 5257\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpg4cct0ch/tmpg4cct0ch.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad5c6dccc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad5c6ac3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad5c6ac3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad5c6ac27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpg4cct0ch                        0x000055ce0d59b614 <unavailable> + 5652\n5    libc.so.6                          0x00002ad5c6fb8460 __libc_start_main + 245\n6    tmpg4cct0ch                        0x000055ce0d59b1f9 <unavailable> + 4601\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1665509752,
      "stdout": "",
      "stderr": "tmpwjx85eui/tmpwjx85eui.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acc1571ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acc15411b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acc15411988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acc154107b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwjx85eui                        0x000055a76e62d664 <unavailable> + 5732\n5    libc.so.6                          0x00002acc15906460 __libc_start_main + 245\n6    tmpwjx85eui                        0x000055a76e62d249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var nums = nums\n    var unique_nums = [Int]()\n    var i = 0\n    while i < nums.count {\n        if !unique_nums.contains(nums[i]) {\n            unique_nums.append(nums[i])\n        }\n        i += 1\n    }\n    return unique_nums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "tmp5nnfcn7k/tmp5nnfcn7k.swift:29: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3fa0b18c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3fa080fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3fa080f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3fa080e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5nnfcn7k                        0x0000556597b0d5a4 <unavailable> + 5540\n5    libc.so.6                          0x00002b3fa0d04460 __libc_start_main + 245\n6    tmp5nnfcn7k                        0x0000556597b0d189 <unavailable> + 4489\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n    var uniqueNums = [Int]()\n    for num in nums {\n        if !uniqueNums.contains(num) {\n            uniqueNums.append(num)\n        }\n    }\n    return uniqueNums\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
      "timestamp": 1666124166,
      "stdout": "",
      "stderr": "tmpw3vve1ye/tmpw3vve1ye.swift:26: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7d9afa7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b7d9ac9eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b7d9ac9e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b7d9ac9d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpw3vve1ye                        0x000055ca9aef5664 <unavailable> + 5732\n5    libc.so.6                          0x00002b7d9b193460 __libc_start_main + 245\n6    tmpw3vve1ye                        0x000055ca9aef5249 <unavailable> + 4681\n",
      "exit_code": -4,
      "status": "Exception"
    }
  ]
}