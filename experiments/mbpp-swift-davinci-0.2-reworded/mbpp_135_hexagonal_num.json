{
  "name": "mbpp_135_hexagonal_num",
  "language": "swift",
  "prompt": "\n/// Write a function to find the nth hexagonal number.\nfunc hexagonal_num(n: Int) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_135_hexagonal_num.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(hexagonal_num(n: 10) == 190)\nassert(hexagonal_num(n: 5) == 45)\nassert(hexagonal_num(n: 7) == 91)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    return n * (2 * n - 1)",
    "    return n * (2 * n - 1)",
    "    return n * (2 * n - 1)",
    "    return n * (2 * n - 1)",
    "    return n * (2 * n - 1)",
    "    return n * (2 * n - 1)",
    "    return n * (2 * n - 1)",
    "    return n * (2 * n - 1)",
    "    return n * (2 * n - 1)",
    "    return n * (2 * n - 1)",
    "    return n * (2 * n - 1)",
    "    return n * (2 * n - 1)",
    "    return n * (2 * n - 1)",
    "    return n * (2 * n - 1)",
    "    return n * (2 * n - 1)",
    "    return n * (2 * n - 1)",
    "    return n * (2 * n - 1)",
    "    return n * (2 * n - 1)",
    "    return n * (2 * n - 1)",
    "    return n * (2 * n - 1)"
  ]
}