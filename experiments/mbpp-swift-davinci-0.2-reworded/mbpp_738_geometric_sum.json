{
  "name": "mbpp_738_geometric_sum",
  "language": "swift",
  "prompt": "\n/// Write a function to calculate the geometric sum of n-1. https://www.w3resource.com/swiftthon-exercises/data-structures-and-algorithms/swiftthon-recursion-exercise-9.php\nfunc geometric_sum(n: Int) -> Double {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_738_geometric_sum.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(geometric_sum(n: 7) == 1.9921875)\nassert(geometric_sum(n: 4) == 1.9375)\nassert(geometric_sum(n: 8) == 1.99609375)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    if n == 0 {\n        return 1\n    } else {\n        return 1 / pow(2, Double(n)) + geometric_sum(n: n - 1)\n    }",
    "    if n == 0 {\n        return 1\n    }\n    return 1 / pow(2, Double(n)) + geometric_sum(n: n - 1)",
    "    if n == 0 {\n        return 1\n    }\n    return 1 / pow(2, Double(n)) + geometric_sum(n: n - 1)",
    "    if n == 0 {\n        return 1\n    }\n    return 1 / pow(2, Double(n)) + geometric_sum(n: n - 1)",
    "    if n == 0 {\n        return 1\n    }\n    return 1 / pow(2, Double(n)) + geometric_sum(n: n - 1)",
    "    if n == 0 {\n        return 1\n    }\n    return 1 / pow(2, Double(n)) + geometric_sum(n: n - 1)",
    "    if n == 0 {\n        return 1\n    }\n    return 1 / pow(2, Double(n)) + geometric_sum(n: n - 1)",
    "    if n == 0 {\n        return 1\n    }\n    return 1 / pow(2, Double(n)) + geometric_sum(n: n - 1)",
    "    if n == 0 {\n        return 1\n    }\n    return 1 / Double(n) + geometric_sum(n: n - 1)",
    "    if n == 0 {\n        return 1\n    }\n    return geometric_sum(n: n - 1) + 1 / pow(2, Double(n))",
    "    if n == 0 {\n        return 1\n    }\n    return 1 / pow(2, Double(n)) + geometric_sum(n: n - 1)",
    "    if n == 0 {\n        return 1\n    }\n    return 1 / pow(2, Double(n)) + geometric_sum(n: n - 1)",
    "    if n == 0 {\n        return 1\n    }\n    return 1 / pow(2, Double(n)) + geometric_sum(n: n-1)",
    "    if n == 0 {\n        return 1\n    }\n    return 1 / pow(2, Double(n)) + geometric_sum(n: n - 1)",
    "    if n == 0 {\n        return 1\n    }\n    return 1 / pow(2, Double(n)) + geometric_sum(n: n - 1)",
    "    if n == 0 {\n        return 1\n    }\n    return 1 / pow(2, Double(n)) + geometric_sum(n: n - 1)",
    "    if n == 0 {\n        return 1\n    }\n    return 1 / pow(2, Double(n)) + geometric_sum(n: n - 1)",
    "    if n == 0 {\n        return 1\n    }\n    return 1 / pow(2, Double(n)) + geometric_sum(n: n - 1)",
    "    if n == 0 {\n        return 1\n    }\n    return 1 / pow(2, Double(n)) + geometric_sum(n: n - 1)",
    "    if n == 0 {\n        return 1\n    }\n    return 1 / pow(2, Double(n)) + geometric_sum(n: n - 1)"
  ]
}