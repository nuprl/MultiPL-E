{
  "name": "mbpp_739_find_Index",
  "language": "swift",
  "prompt": "\n/// Write a swiftthon function to find the index of smallest triangular number with n digits. https://www.geeksforgeeks.org/index-of-smallest-triangular-number-with-n-digits/\nfunc find_Index(n: Int) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_739_find_Index.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_Index(n: 2) == 4)\nassert(find_Index(n: 3) == 14)\nassert(find_Index(n: 4) == 45)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var i = 1\n    var tri = 0\n    while true {\n        tri = (i * (i + 1)) / 2\n        if tri.count == n {\n            break\n        }\n        i += 1\n    }\n    return i",
    "    var i = 1\n    var t = 1\n    while true {\n        if t.digits == n {\n            return i\n        }\n        i += 1\n        t += i\n    }",
    "    var i = 1\n    var tri = 0\n    while String(tri).count < n {\n        tri += i\n        i += 1\n    }\n    return i - 1",
    "    var i = 1\n    var tri = 0\n    while true {\n        tri = (i*(i+1))/2\n        if tri.count == n {\n            return i\n        }\n        i += 1\n    }",
    "    var i = 1\n    var j = 1\n    while true {\n        if String(i).count == n {\n            return j\n        }\n        i = i + j\n        j = j + 1\n    }",
    "    var i = 1\n    var triangle = 0\n    while (String(triangle).count < n) {\n        triangle = (i * (i + 1)) / 2\n        i += 1\n    }\n    return i - 1",
    "    var index = 1\n    var tri = 0\n    while true {\n        tri = (index * (index + 1)) / 2\n        if tri.count == n {\n            return index\n        }\n        index += 1\n    }",
    "    var i = 1\n    var tri = 0\n    while true {\n        tri = (i * (i + 1)) / 2\n        if tri.count == n {\n            return i\n        }\n        i += 1\n    }",
    "    var i = 1\n    var tri = 0\n    while true {\n        tri = (i * (i + 1)) / 2\n        if String(tri).count == n {\n            return i\n        }\n        i += 1\n    }",
    "    var i = 1\n    var t = 0\n    while true {\n        t = (i * (i + 1)) / 2\n        if t.digits.count == n {\n            return i\n        }\n        i += 1\n    }",
    "    var i = 1\n    var tri = 0\n    while true {\n        tri = (i * (i + 1)) / 2\n        if tri.count == n {\n            return i\n        }\n        i += 1\n    }",
    "    var i = 1\n    var tri = 0\n    while true {\n        tri = (i * (i + 1)) / 2\n        if tri.count == n {\n            return i\n        }\n        i += 1\n    }",
    "    var i = 1\n    var triangularNumber = 0\n    while true {\n        triangularNumber = (i * (i + 1)) / 2\n        if String(triangularNumber).count == n {\n            break\n        }\n        i += 1\n    }\n    return i",
    "    var i = 1\n    var tri = 0\n    while true {\n        tri = (i * (i + 1)) / 2\n        if tri.count == n {\n            return i\n        }\n        i += 1\n    }",
    "    var i = 1\n    var tri = 0\n    while true {\n        tri = (i * (i + 1)) / 2\n        if tri.count == n {\n            return i\n        }\n        i += 1\n    }",
    "    var i = 1\n    var tri = 0\n    while String(tri).count < n {\n        tri += i\n        i += 1\n    }\n    return i - 1",
    "    var i = 1\n    var tri = 0\n    while true {\n        tri = (i * (i + 1)) / 2\n        if tri.count == n {\n            return i\n        }\n        i += 1\n    }",
    "    var index = 1\n    var triangular = 1\n    while true {\n        if String(triangular).count == n {\n            return index\n        }\n        index += 1\n        triangular += index\n    }",
    "    var i = 1\n    var tri = 0\n    while String(tri).count < n {\n        tri += i\n        i += 1\n    }\n    return i",
    "    var i = 1\n    var triangle = 0\n    while String(triangle).count < n {\n        triangle += i\n        i += 1\n    }\n    return i - 1"
  ]
}