{
  "name": "mbpp_629_Split",
  "language": "swift",
  "prompt": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_629_Split.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            even.append(i)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            evens.append(i)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens: [Int] = []\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            even.append(i)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evenList = [Int]()\n    for num in list {\n        if num % 2 == 0 {\n            evenList.append(num)\n        }\n    }\n    return evenList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens: [Int] = []\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            evens.append(i)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evenList = [Int]()\n    for num in list {\n        if num % 2 == 0 {\n            evenList.append(num)\n        }\n    }\n    return evenList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            even.append(i)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            evens.append(i)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    return list.filter { $0 % 2 == 0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            evens.append(i)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            even.append(i)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens: [Int] = []\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for num in list {\n        if num % 2 == 0 {\n            even.append(num)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            even.append(i)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evenList = [Int]()\n    for num in list {\n        if num % 2 == 0 {\n            evenList.append(num)\n        }\n    }\n    return evenList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            evens.append(i)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for number in list {\n        if number % 2 == 0 {\n            evens.append(number)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evenNumbers: [Int] = []\n    for number in list {\n        if number % 2 == 0 {\n            evenNumbers.append(number)\n        }\n    }\n    return evenNumbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            evens.append(i)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evenList: [Int] = []\n    for num in list {\n        if num % 2 == 0 {\n            evenList.append(num)\n        }\n    }\n    return evenList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            even.append(i)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            even.append(i)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            even.append(i)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for number in list {\n        if number % 2 == 0 {\n            evens.append(number)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            evens.append(i)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    return list.filter { $0 % 2 == 0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            even.append(i)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for number in list {\n        if number % 2 == 0 {\n            evens.append(number)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens: [Int] = []\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            even.append(i)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens: [Int] = []\n    for i in list {\n        if i % 2 == 0 {\n            evens.append(i)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            evens.append(i)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evenList: [Int] = []\n    for i in list {\n        if i % 2 == 0 {\n            evenList.append(i)\n        }\n    }\n    return evenList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    return list.filter { $0 % 2 == 0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            even.append(i)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            even.append(i)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            even.append(i)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for number in list {\n        if number % 2 == 0 {\n            evens.append(number)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            even.append(i)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for i in list {\n        if (i % 2 == 0) {\n            even.append(i)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            even.append(i)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens: [Int] = []\n    for i in list {\n        if i % 2 == 0 {\n            evens.append(i)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            evens.append(i)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for number in list {\n        if number % 2 == 0 {\n            evens.append(number)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            even.append(i)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            even.append(i)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens: [Int] = []\n    for i in list {\n        if i % 2 == 0 {\n            evens.append(i)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for number in list {\n        if number % 2 == 0 {\n            evens.append(number)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens: [Int] = []\n    for i in list {\n        if i % 2 == 0 {\n            evens.append(i)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            even.append(i)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            evens.append(i)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens: [Int] = []\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            even.append(i)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for item in list {\n        if item % 2 == 0 {\n            evens.append(item)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens: [Int] = []\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for number in list {\n        if number % 2 == 0 {\n            evens.append(number)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            even.append(i)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            even.append(i)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens: [Int] = []\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            even.append(i)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            evens.append(i)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens: [Int] = []\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            even.append(i)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evenList: [Int] = []\n    for i in list {\n        if i % 2 == 0 {\n            evenList.append(i)\n        }\n    }\n    return evenList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            evens.append(i)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            even.append(i)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            even.append(i)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens: [Int] = []\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            even.append(i)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            even.append(i)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    return list.filter { $0 % 2 == 0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evenList: [Int] = []\n    for i in list {\n        if i % 2 == 0 {\n            evenList.append(i)\n        }\n    }\n    return evenList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens: [Int] = []\n    for i in list {\n        if i % 2 == 0 {\n            evens.append(i)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for x in list {\n        if x % 2 == 0 {\n            even.append(x)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            even.append(i)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens: [Int] = []\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evenList: [Int] = []\n    for i in list {\n        if i % 2 == 0 {\n            evenList.append(i)\n        }\n    }\n    return evenList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens: [Int] = []\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            even.append(i)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            evens.append(i)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            evens.append(i)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for num in list {\n        if num % 2 == 0 {\n            even.append(num)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens: [Int] = []\n    for number in list {\n        if number % 2 == 0 {\n            evens.append(number)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            even.append(i)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            even.append(i)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    return list.filter { $0 % 2 == 0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens: [Int] = []\n    for i in list {\n        if i % 2 == 0 {\n            evens.append(i)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for number in list {\n        if number % 2 == 0 {\n            evens.append(number)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            evens.append(i)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens: [Int] = []\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evenNumbers = [Int]()\n    for number in list {\n        if number % 2 == 0 {\n            evenNumbers.append(number)\n        }\n    }\n    return evenNumbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            even.append(i)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evenList: [Int] = []\n    for i in list {\n        if i % 2 == 0 {\n            evenList.append(i)\n        }\n    }\n    return evenList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evenList = [Int]()\n    for item in list {\n        if item % 2 == 0 {\n            evenList.append(item)\n        }\n    }\n    return evenList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens: [Int] = []\n    for i in list {\n        if i % 2 == 0 {\n            evens.append(i)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens: [Int] = []\n    for i in list {\n        if i % 2 == 0 {\n            evens.append(i)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for number in list {\n        if number % 2 == 0 {\n            evens.append(number)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for num in list {\n        if num % 2 == 0 {\n            even.append(num)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for number in list {\n        if number % 2 == 0 {\n            evens.append(number)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            evens.append(i)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            even.append(i)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            evens.append(i)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            even.append(i)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            evens.append(i)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens: [Int] = []\n    for i in list {\n        if i % 2 == 0 {\n            evens.append(i)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            evens.append(i)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evenList: [Int] = []\n    for number in list {\n        if number % 2 == 0 {\n            evenList.append(number)\n        }\n    }\n    return evenList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            even.append(i)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            even.append(i)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            even.append(i)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens: [Int] = []\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens: [Int] = []\n    for i in list {\n        if i % 2 == 0 {\n            evens.append(i)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            evens.append(i)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            even.append(i)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens: [Int] = []\n    for number in list {\n        if number % 2 == 0 {\n            evens.append(number)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evenNumbers = [Int]()\n    for number in list {\n        if number % 2 == 0 {\n            evenNumbers.append(number)\n        }\n    }\n    return evenNumbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            evens.append(i)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens: [Int] = []\n    for i in list {\n        if i % 2 == 0 {\n            evens.append(i)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            evens.append(i)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            even.append(i)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            even.append(i)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for number in list {\n        if number % 2 == 0 {\n            evens.append(number)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens: [Int] = []\n    for number in list {\n        if number % 2 == 0 {\n            evens.append(number)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens: [Int] = []\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            evens.append(i)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for number in list {\n        if number % 2 == 0 {\n            evens.append(number)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for number in list {\n        if number % 2 == 0 {\n            evens.append(number)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens: [Int] = []\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens: [Int] = []\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            evens.append(i)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            even.append(i)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens: [Int] = []\n    for number in list {\n        if number % 2 == 0 {\n            evens.append(number)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            even.append(i)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens: [Int] = []\n    for i in list {\n        if i % 2 == 0 {\n            evens.append(i)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            even.append(i)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evenNumbers: [Int] = []\n    for number in list {\n        if number % 2 == 0 {\n            evenNumbers.append(number)\n        }\n    }\n    return evenNumbers\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            even.append(i)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evenList = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            evenList.append(i)\n        }\n    }\n    return evenList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens: [Int] = []\n    for i in list {\n        if i % 2 == 0 {\n            evens.append(i)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    return list.filter { $0 % 2 == 0 }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evenList: [Int] = []\n    for num in list {\n        if num % 2 == 0 {\n            evenList.append(num)\n        }\n    }\n    return evenList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for number in list {\n        if number % 2 == 0 {\n            evens.append(number)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            even.append(i)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            evens.append(i)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evenList: [Int] = []\n    for num in list {\n        if num % 2 == 0 {\n            evenList.append(num)\n        }\n    }\n    return evenList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for num in list {\n        if num % 2 == 0 {\n            even.append(num)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            evens.append(i)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens: [Int] = []\n    for i in list {\n        if i % 2 == 0 {\n            evens.append(i)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens: [Int] = []\n    for i in list {\n        if i % 2 == 0 {\n            evens.append(i)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    return list.filter({$0 % 2 == 0})\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for number in list {\n        if number % 2 == 0 {\n            evens.append(number)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            evens.append(i)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var even = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            even.append(i)\n        }\n    }\n    return even\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evenList = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            evenList.append(i)\n        }\n    }\n    return evenList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            evens.append(i)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            evens.append(i)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for number in list {\n        if number % 2 == 0 {\n            evens.append(number)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for num in list {\n        if num % 2 == 0 {\n            evens.append(num)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens: [Int] = []\n    for i in list {\n        if i % 2 == 0 {\n            evens.append(i)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1666123702,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evenList = [Int]()\n    for num in list {\n        if num % 2 == 0 {\n            evenList.append(num)\n        }\n    }\n    return evenList\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find even numbers from an array of numbers.\nfunc Split(list: [Int]) -> [Int] {\n    var evens = [Int]()\n    for i in list {\n        if i % 2 == 0 {\n            evens.append(i)\n        }\n    }\n    return evens\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Split(list: [1, 2, 3, 4, 5]) == [2, 4])\nassert(Split(list: [4, 5, 6, 7, 8, 0, 1]) == [4, 6, 8, 0])\nassert(Split(list: [8, 12, 15, 19]) == [8, 12])",
      "timestamp": 1665510378,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}