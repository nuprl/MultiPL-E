{
  "name": "mbpp_771_check_expression",
  "language": "swift",
  "prompt": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_771_check_expression.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpxx3lh5vj.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            }\n            if char == \"]\" && top != \"[\" {\n                return false\n            }\n            if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    if stack.isEmpty() {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmpt35ici5f.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if (top == \"(\" && char != \")\") || (top == \"[\" && char != \"]\") || (top == \"{\" && char != \"}\") {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp_vk2o7bs.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            } else if char == \"]\" && top != \"[\" {\n                return false\n            } else if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp7mdszs23.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            } else if char == \"]\" && top != \"[\" {\n                return false\n            } else if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp7mdszs23.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            } else if char == \"]\" && top != \"[\" {\n                return false\n            } else if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp7mdszs23.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            }\n            if char == \"]\" && top != \"[\" {\n                return false\n            }\n            if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp1r6xhkxj.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpxx3lh5vj.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"{\" || char == \"[\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"}\" || char == \"]\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if top == \"(\" && char != \")\" {\n                return false\n            }\n            if top == \"{\" && char != \"}\" {\n                return false\n            }\n            if top == \"[\" && char != \"]\" {\n                return false\n            }\n        }\n    }\n    if stack.isEmpty() {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmpgdn8i8z9.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    \n    for char in exp {\n        if char == \"(\" || char == \"{\" || char == \"[\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"}\" || char == \"]\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            } else if char == \"}\" && top != \"{\" {\n                return false\n            } else if char == \"]\" && top != \"[\" {\n                return false\n            }\n        }\n    }\n    \n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmpc04190i9.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack: [Character] = []\n    for char in exp {\n        if char == \"(\" {\n            stack.append(char)\n        } else if char == \")\" {\n            if stack.isEmpty {\n                return false\n            } else {\n                stack.removeLast()\n            }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "tmp1yy3i1vb/tmp1yy3i1vb.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3459e3bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3459b32b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3459b32988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3459b317b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1yy3i1vb                        0x0000557f0e92877b <unavailable> + 6011\n5    libc.so.6                          0x00002b345a027460 __libc_start_main + 245\n6    tmp1yy3i1vb                        0x0000557f0e928369 <unavailable> + 4969\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(element: char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            }\n            if char == \"]\" && top != \"[\" {\n                return false\n            }\n            if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmp072mdyt3.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty {\n                return false\n            }\n            let top = stack.pop()\n            if !isMatchingPair(top: top, char: char) {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpiy_u6myr.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n/tmp/tmpiy_u6myr.swift:13:17: error: cannot find 'isMatchingPair' in scope\n            if !isMatchingPair(top: top, char: char) {\n                ^~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if (char == \")\" && top != \"(\") || (char == \"]\" && top != \"[\") || (char == \"}\" && top != \"{\") {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpfu7z4sq4.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if (top == \"(\" && char != \")\") || (top == \"[\" && char != \"]\") || (top == \"{\" && char != \"}\") {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp_vk2o7bs.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() || stack.pop() != \"(\" {\n                return false\n            }\n        } else if char == \"]\" {\n            if stack.isEmpty() || stack.pop() != \"[\" {\n                return false\n            }\n        } else if char == \"}\" {\n            if stack.isEmpty() || stack.pop() != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpz_v7dyju.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            } else if char == \"]\" && top != \"[\" {\n                return false\n            } else if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp7mdszs23.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(element: char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if (top == \"(\" && char != \")\") || (top == \"[\" && char != \"]\") || (top == \"{\" && char != \"}\") {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpmqyv_gd4.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for c in exp {\n        if c == \"(\" || c == \"{\" || c == \"[\" {\n            stack.push(c)\n        } else if c == \")\" || c == \"}\" || c == \"]\" {\n            if stack.isEmpty() {\n                return false\n            }\n            if c == \")\" && stack.top() != \"(\" {\n                return false\n            }\n            if c == \"}\" && stack.top() != \"{\" {\n                return false\n            }\n            if c == \"]\" && stack.top() != \"[\" {\n                return false\n            }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpbxgkh0b3.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                let top = stack.pop()\n                if (char == \")\" && top != \"(\") || (char == \"]\" && top != \"[\") || (char == \"}\" && top != \"{\") {\n                    return false\n                }\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmph0pfk6dm.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if top == \"(\" && char != \")\" {\n                return false\n            }\n            if top == \"[\" && char != \"]\" {\n                return false\n            }\n            if top == \"{\" && char != \"}\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpev_flytw.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for c in exp {\n        if c == \"(\" || c == \"{\" || c == \"[\" {\n            stack.push(c)\n        } else if c == \")\" || c == \"}\" || c == \"]\" {\n            if stack.isEmpty() {\n                return false\n            }\n            if c == \")\" && stack.peek() == \"(\" {\n                stack.pop()\n            } else if c == \"}\" && stack.peek() == \"{\" {\n                stack.pop()\n            } else if c == \"]\" && stack.peek() == \"[\" {\n                stack.pop()\n            } else {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpp6kf445q.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                let top = stack.pop()\n                if char == \")\" && top != \"(\" {\n                    return false\n                } else if char == \"]\" && top != \"[\" {\n                    return false\n                } else if char == \"}\" && top != \"{\" {\n                    return false\n                }\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpq020hz28.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if (char == \")\" && top != \"(\") || (char == \"]\" && top != \"[\") || (char == \"}\" && top != \"{\") {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpfu7z4sq4.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"{\" || char == \"[\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"}\" || char == \"]\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if !((char == \")\" && top == \"(\") || (char == \"}\" && top == \"{\") || (char == \"]\" && top == \"[\")) {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmphkp6uv4r.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if !((top == \"(\" && char == \")\") || (top == \"[\" && char == \"]\") || (top == \"{\" && char == \"}\")) {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmp92wtaqgp.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"{\" || char == \"[\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"}\" || char == \"]\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            } else if char == \"}\" && top != \"{\" {\n                return false\n            } else if char == \"]\" && top != \"[\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpyd5zjjd9.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                let top = stack.pop()\n                if !((top == \"(\" && char == \")\") || (top == \"[\" && char == \"]\") || (top == \"{\" && char == \"}\")) {\n                    return false\n                }\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmp80udsjkb.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            } else if char == \"]\" && top != \"[\" {\n                return false\n            } else if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpke6_p3hw.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmps1yyvl9i.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for c in exp {\n        if c == \"(\" || c == \"[\" || c == \"{\" {\n            stack.push(c)\n        } else if c == \")\" || c == \"]\" || c == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if !isMatchingPair(top: top, c: c) {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmp3k79ygvf.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n/tmp/tmp3k79ygvf.swift:13:17: error: cannot find 'isMatchingPair' in scope\n            if !isMatchingPair(top: top, c: c) {\n                ^~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            }\n            if char == \"]\" && top != \"[\" {\n                return false\n            }\n            if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp1r6xhkxj.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            } else if char == \"]\" && top != \"[\" {\n                return false\n            } else if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp7mdszs23.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for c in exp {\n        if c == \"(\" || c == \"[\" || c == \"{\" {\n            stack.push(c)\n        } else if c == \")\" || c == \"]\" || c == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if c == \")\" && top != \"(\" {\n                return false\n            } else if c == \"]\" && top != \"[\" {\n                return false\n            } else if c == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpzwqwi623.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            } else if char == \"]\" && top != \"[\" {\n                return false\n            } else if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp7mdszs23.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"{\" || char == \"[\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"}\" || char == \"]\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if (top == \"(\" && char != \")\") || (top == \"{\" && char != \"}\") || (top == \"[\" && char != \"]\") {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpup9pg95s.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if (top == \"(\" && char != \")\") || (top == \"[\" && char != \"]\") || (top == \"{\" && char != \"}\") {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp_vk2o7bs.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if (char == \")\" && top != \"(\") || (char == \"]\" && top != \"[\") || (char == \"}\" && top != \"{\") {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpfu7z4sq4.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for c in exp {\n        if c == \"(\" || c == \"{\" || c == \"[\" {\n            stack.push(c)\n        } else if c == \")\" || c == \"}\" || c == \"]\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if c == \")\" && top != \"(\" {\n                return false\n            } else if c == \"}\" && top != \"{\" {\n                return false\n            } else if c == \"]\" && top != \"[\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmp_9bi4qhp.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for c in exp {\n        if c == \"(\" {\n            stack.push(c)\n        } else if c == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpdk9p8wvl.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            if char == \")\" && stack.pop() != \"(\" {\n                return false\n            }\n            if char == \"]\" && stack.pop() != \"[\" {\n                return false\n            }\n            if char == \"}\" && stack.pop() != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmp05wzdqf4.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.pop() != \"(\" {\n                return false\n            }\n        } else if char == \"]\" {\n            if stack.pop() != \"[\" {\n                return false\n            }\n        } else if char == \"}\" {\n            if stack.pop() != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmp5frcoyqy.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"{\" || char == \"[\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"}\" || char == \"]\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if top == \"(\" && char != \")\" {\n                return false\n            }\n            if top == \"{\" && char != \"}\" {\n                return false\n            }\n            if top == \"[\" && char != \"]\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpmpqad6t7.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.pop() != \"(\" {\n                return false\n            }\n        } else if char == \"]\" {\n            if stack.pop() != \"[\" {\n                return false\n            }\n        } else if char == \"}\" {\n            if stack.pop() != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmp5frcoyqy.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmps1yyvl9i.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if (top == \"(\" && char != \")\") || (top == \"[\" && char != \"]\") || (top == \"{\" && char != \"}\") {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp_vk2o7bs.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if (char == \")\" && top != \"(\") || (char == \"]\" && top != \"[\") || (char == \"}\" && top != \"{\") {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpfu7z4sq4.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    \n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpmg4rmmyt.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            }\n            if char == \"]\" && top != \"[\" {\n                return false\n            }\n            if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp1r6xhkxj.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() || stack.pop() != \"(\" {\n                return false\n            }\n        } else if char == \"]\" {\n            if stack.isEmpty() || stack.pop() != \"[\" {\n                return false\n            }\n        } else if char == \"}\" {\n            if stack.isEmpty() || stack.pop() != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpz_v7dyju.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            }\n            if char == \"]\" && top != \"[\" {\n                return false\n            }\n            if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp1r6xhkxj.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack: [Character] = []\n    for char in exp {\n        if char == \"(\" {\n            stack.append(char)\n        } else if char == \")\" {\n            if stack.isEmpty {\n                return false\n            } else {\n                stack.removeLast()\n            }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "tmp1yy3i1vb/tmp1yy3i1vb.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3459e3bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3459b32b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3459b32988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3459b317b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1yy3i1vb                        0x0000557f0e92877b <unavailable> + 6011\n5    libc.so.6                          0x00002b345a027460 __libc_start_main + 245\n6    tmp1yy3i1vb                        0x0000557f0e928369 <unavailable> + 4969\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            if char == \")\" && stack.peek() != \"(\" {\n                return false\n            }\n            if char == \"]\" && stack.peek() != \"[\" {\n                return false\n            }\n            if char == \"}\" && stack.peek() != \"{\" {\n                return false\n            }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpia4jcqae.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for c in exp {\n        if c == \"(\" {\n            stack.push(c)\n        } else if c == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpdk9p8wvl.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"{\" || char == \"[\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"}\" || char == \"]\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if !((top == \"(\" && char == \")\") || (top == \"{\" && char == \"}\") || (top == \"[\" && char == \"]\")) {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmplq8q0wzp.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            } else if char == \"]\" && top != \"[\" {\n                return false\n            } else if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp7mdszs23.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            } else if char == \"]\" && top != \"[\" {\n                return false\n            } else if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp7mdszs23.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack: [Character] = []\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.append(char)\n        } else if char == \")\" {\n            if stack.last == \"(\" {\n                stack.removeLast()\n            } else {\n                return false\n            }\n        } else if char == \"]\" {\n            if stack.last == \"[\" {\n                stack.removeLast()\n            } else {\n                return false\n            }\n        } else if char == \"}\" {\n            if stack.last == \"{\" {\n                stack.removeLast()\n            } else {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"{\" || char == \"[\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"}\" || char == \"]\" {\n            if stack.isEmpty() {\n                return false\n            }\n            if char == \")\" && stack.peek() == \"(\" {\n                stack.pop()\n            } else if char == \"}\" && stack.peek() == \"{\" {\n                stack.pop()\n            } else if char == \"]\" && stack.peek() == \"[\" {\n                stack.pop()\n            } else {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpy6axp__p.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            } else if char == \"]\" && top != \"[\" {\n                return false\n            } else if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp7mdszs23.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            } else if char == \"]\" && top != \"[\" {\n                return false\n            } else if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp7mdszs23.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            } else if char == \"]\" && top != \"[\" {\n                return false\n            } else if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp7mdszs23.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            }\n            if char == \"]\" && top != \"[\" {\n                return false\n            }\n            if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp1r6xhkxj.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for c in exp {\n        if c == \"(\" || c == \"{\" || c == \"[\" {\n            stack.push(c)\n        } else if c == \")\" || c == \"}\" || c == \"]\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if c == \")\" && top != \"(\" {\n                return false\n            }\n            if c == \"}\" && top != \"{\" {\n                return false\n            }\n            if c == \"]\" && top != \"[\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmp_v593hnd.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for c in exp {\n        if c == \"(\" || c == \"[\" || c == \"{\" {\n            stack.push(c)\n        } else if c == \")\" || c == \"]\" || c == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if (c == \")\" && top != \"(\") || (c == \"]\" && top != \"[\") || (c == \"}\" && top != \"{\") {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpmhlwxsp8.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"{\" || char == \"[\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"}\" || char == \"]\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                let top = stack.pop()\n                if char == \")\" && top != \"(\" {\n                    return false\n                } else if char == \"}\" && top != \"{\" {\n                    return false\n                } else if char == \"]\" && top != \"[\" {\n                    return false\n                }\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmp_92xuqkn.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            if char == \")\" && stack.peek() == \"(\" {\n                stack.pop()\n            } else if char == \"]\" && stack.peek() == \"[\" {\n                stack.pop()\n            } else if char == \"}\" && stack.peek() == \"{\" {\n                stack.pop()\n            } else {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmppzx3kp1y.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if (char == \")\" && top != \"(\") || (char == \"]\" && top != \"[\") || (char == \"}\" && top != \"{\") {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpfu7z4sq4.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            } else if char == \"]\" && top != \"[\" {\n                return false\n            } else if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp7mdszs23.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            }\n            if char == \"]\" && top != \"[\" {\n                return false\n            }\n            if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp1r6xhkxj.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() || stack.pop() != \"(\" {\n                return false\n            }\n        } else if char == \"]\" {\n            if stack.isEmpty() || stack.pop() != \"[\" {\n                return false\n            }\n        } else if char == \"}\" {\n            if stack.isEmpty() || stack.pop() != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpz_v7dyju.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack: [Character] = []\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.append(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.count == 0 {\n                return false\n            }\n            let pop = stack.removeLast()\n            if pop == \"(\" && char != \")\" || pop == \"[\" && char != \"]\" || pop == \"{\" && char != \"}\" {\n                return false\n            }\n        }\n    }\n    return stack.count == 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"{\" || char == \"[\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"}\" || char == \"]\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            } else if char == \"}\" && top != \"{\" {\n                return false\n            } else if char == \"]\" && top != \"[\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpyd5zjjd9.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            } else if char == \"]\" && top != \"[\" {\n                return false\n            } else if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp7mdszs23.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpxx3lh5vj.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    \n    for char in exp {\n        if char == \"(\" || char == \"{\" || char == \"[\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"}\" || char == \"]\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if (top == \"(\" && char != \")\") || (top == \"{\" && char != \"}\") || (top == \"[\" && char != \"]\") {\n                return false\n            }\n        }\n    }\n    \n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpwwfu14ck.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            } else if char == \"]\" && top != \"[\" {\n                return false\n            } else if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpke6_p3hw.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for c in exp {\n        if c == \"(\" {\n            stack.push(c)\n        } else if c == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpdk9p8wvl.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"{\" || char == \"[\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"}\" || char == \"]\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            } else if char == \"}\" && top != \"{\" {\n                return false\n            } else if char == \"]\" && top != \"[\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpyd5zjjd9.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"{\" || char == \"[\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"}\" || char == \"]\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            }\n            if char == \"}\" && top != \"{\" {\n                return false\n            }\n            if char == \"]\" && top != \"[\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpzwejuaaz.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"{\" || char == \"[\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"}\" || char == \"]\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if (char == \")\" && top != \"(\") || (char == \"}\" && top != \"{\") || (char == \"]\" && top != \"[\") {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmplg2utv5f.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            if (char == \")\" && stack.peek() != \"(\") || (char == \"]\" && stack.peek() != \"[\") || (char == \"}\" && stack.peek() != \"{\") {\n                return false\n            }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmp8eg_6_xw.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            } else if char == \"]\" && top != \"[\" {\n                return false\n            } else if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp7mdszs23.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            } else if char == \"]\" && top != \"[\" {\n                return false\n            } else if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp7mdszs23.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpxx3lh5vj.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for c in exp {\n        if c == \"(\" || c == \"[\" || c == \"{\" {\n            stack.push(c)\n        } else if c == \")\" || c == \"]\" || c == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if c == \")\" && top != \"(\" {\n                return false\n            } else if c == \"]\" && top != \"[\" {\n                return false\n            } else if c == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpzwqwi623.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            }\n            if char == \"]\" && top != \"[\" {\n                return false\n            }\n            if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    if stack.isEmpty() {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmpt35ici5f.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if !((top == \"(\" && char == \")\") || (top == \"[\" && char == \"]\") || (top == \"{\" && char == \"}\")) {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmp92wtaqgp.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"{\" || char == \"[\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"}\" || char == \"]\" {\n            if stack.isEmpty() {\n                return false\n            }\n            if char == \")\" && stack.peek() != \"(\" {\n                return false\n            }\n            if char == \"}\" && stack.peek() != \"{\" {\n                return false\n            }\n            if char == \"]\" && stack.peek() != \"[\" {\n                return false\n            }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpbajl7med.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if (char == \")\" && top != \"(\") || (char == \"]\" && top != \"[\") || (char == \"}\" && top != \"{\") {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpfu7z4sq4.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"{\" || char == \"[\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"}\" || char == \"]\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if (top == \"(\" && char != \")\") || (top == \"{\" && char != \"}\") || (top == \"[\" && char != \"]\") {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpup9pg95s.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpxx3lh5vj.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpxx3lh5vj.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if !((top == \"(\" && char == \")\") || (top == \"[\" && char == \"]\") || (top == \"{\" && char == \"}\")) {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmp92wtaqgp.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            if char == \")\" && stack.peek() == \"(\" {\n                stack.pop()\n            } else if char == \"]\" && stack.peek() == \"[\" {\n                stack.pop()\n            } else if char == \"}\" && stack.peek() == \"{\" {\n                stack.pop()\n            } else {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmppzx3kp1y.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(element: char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            }\n            if char == \"]\" && top != \"[\" {\n                return false\n            }\n            if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmp072mdyt3.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmps1yyvl9i.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(element: char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpjj112mx7.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if (char == \")\" && top != \"(\") || (char == \"]\" && top != \"[\") || (char == \"}\" && top != \"{\") {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpfu7z4sq4.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if (top == \"(\" && char != \")\") || (top == \"[\" && char != \"]\") || (top == \"{\" && char != \"}\") {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp_vk2o7bs.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpxx3lh5vj.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"{\" || char == \"[\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"}\" || char == \"]\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            } else if char == \"}\" && top != \"{\" {\n                return false\n            } else if char == \"]\" && top != \"[\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpyd5zjjd9.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            }\n            stack.pop()\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpxx3lh5vj.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if (top == \"(\" && char != \")\") || (top == \"[\" && char != \"]\") || (top == \"{\" && char != \"}\") {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp_vk2o7bs.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            } else if char == \"]\" && top != \"[\" {\n                return false\n            } else if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp7mdszs23.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"{\" || char == \"[\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"}\" || char == \"]\" {\n            if stack.isEmpty() {\n                return false\n            }\n            if char == \")\" && stack.peek() == \"(\" {\n                stack.pop()\n            } else if char == \"}\" && stack.peek() == \"{\" {\n                stack.pop()\n            } else if char == \"]\" && stack.peek() == \"[\" {\n                stack.pop()\n            } else {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpy6axp__p.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            }\n            stack.pop()\n        }\n    }\n    if stack.isEmpty() {\n        return true\n    }\n    return false\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1666122795,
      "stdout": "",
      "stderr": "/tmp/tmpqmxjdz0g.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if (top == \"(\" && char != \")\") || (top == \"[\" && char != \"]\") || (top == \"{\" && char != \"}\") {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp_vk2o7bs.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" || char == \"[\" || char == \"{\" {\n            stack.push(char)\n        } else if char == \")\" || char == \"]\" || char == \"}\" {\n            if stack.isEmpty() {\n                return false\n            }\n            let top = stack.pop()\n            if char == \")\" && top != \"(\" {\n                return false\n            } else if char == \"]\" && top != \"[\" {\n                return false\n            } else if char == \"}\" && top != \"{\" {\n                return false\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "/tmp/tmp7mdszs23.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack: [Character] = []\n    for char in exp {\n        if char == \"(\" {\n            stack.append(char)\n        } else if char == \")\" {\n            if stack.isEmpty {\n                return false\n            } else {\n                stack.removeLast()\n            }\n        }\n    }\n    return stack.isEmpty\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509954,
      "stdout": "",
      "stderr": "tmp1yy3i1vb/tmp1yy3i1vb.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3459e3bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3459b32b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3459b32988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3459b317b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp1yy3i1vb                        0x0000557f0e92877b <unavailable> + 6011\n5    libc.so.6                          0x00002b345a027460 __libc_start_main + 245\n6    tmp1yy3i1vb                        0x0000557f0e928369 <unavailable> + 4969\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to check if the given expression is balanced or not. https://www.geeksforgeeks.org/check-for-balanced-parentheses-in-an-expression/\nfunc check_expression(exp: String) -> Bool {\n    var stack = Stack<Character>()\n    for char in exp {\n        if char == \"(\" {\n            stack.push(char)\n        } else if char == \")\" {\n            if stack.isEmpty() {\n                return false\n            } else {\n                stack.pop()\n            }\n        }\n    }\n    return stack.isEmpty()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(check_expression(exp: \"{()}[{}]\") == true)\nassert(check_expression(exp: \"{()}[{]\") == false)\nassert(check_expression(exp: \"{()}[{}][]({})\") == true)",
      "timestamp": 1665509953,
      "stdout": "",
      "stderr": "/tmp/tmpj38bodr_.swift:4:17: error: cannot find 'Stack' in scope\n    var stack = Stack<Character>()\n                ^~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}