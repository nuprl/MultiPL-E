{
  "name": "mbpp_411_snake_to_camel",
  "language": "swift",
  "prompt": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_411_snake_to_camel.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(c).uppercased()\n                next_upper = false\n            } else {\n                result += String(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmp574ex7gy/tmp574ex7gy.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab1945b2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab1942a9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab1942a9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab1942a87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp574ex7gy                        0x000055c617fa45a7 <unavailable> + 5543\n5    libc.so.6                          0x00002ab19479e460 __libc_start_main + 245\n6    tmp574ex7gy                        0x000055c617fa41e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var camel_word = \"\"\n    var first_word = true\n    for letter in word {\n        if letter == \"_\" {\n            first_word = false\n        } else if first_word {\n            camel_word.append(letter)\n        } else {\n            camel_word.append(letter.uppercased())\n        }\n    }\n    return camel_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpm01q9ned/tmpm01q9ned.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2c01203c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2c00efab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2c00efa988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2c00ef97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpm01q9ned                        0x00005617543be5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b2c013ef460 __libc_start_main + 245\n6    tmpm01q9ned                        0x00005617543be1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first_letter = true\n    for letter in word {\n        if letter == \"_\" {\n            is_first_letter = true\n            continue\n        }\n        if is_first_letter {\n            result.append(letter.uppercased())\n            is_first_letter = false\n        } else {\n            result.append(letter)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result += String(char).uppercased()\n                is_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpipa1mu_v/tmpipa1mu_v.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac214edfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac214bd6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac214bd6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac214bd57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpipa1mu_v                        0x0000563f358d75a7 <unavailable> + 5543\n5    libc.so.6                          0x00002ac2150cb460 __libc_start_main + 245\n6    tmpipa1mu_v                        0x0000563f358d71e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpue2mm5u7/tmpue2mm5u7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b630a5e0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b630a2d7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b630a2d7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b630a2d67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpue2mm5u7                        0x00005612e36bd5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b630a7cc460 __libc_start_main + 245\n6    tmpue2mm5u7                        0x00005612e36bd1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercased())\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercased())\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmp0mj_4um4/tmp0mj_4um4.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aff7f318c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aff7f00fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aff7f00f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aff7f00e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0mj_4um4                        0x0000555b35ee25a7 <unavailable> + 5543\n5    libc.so.6                          0x00002aff7f504460 __libc_start_main + 245\n6    tmp0mj_4um4                        0x0000555b35ee21e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercased())\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "/tmp/tmpurvcg_nv.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first_char = true\n    for char in word {\n        if char == \"_\" {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result.append(char.uppercased())\n                is_first_char = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercased())\n                is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmphz_s_uj3/tmphz_s_uj3.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2489b55c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b248984cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b248984c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b248984b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphz_s_uj3                        0x0000565120a335a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b2489d41460 __libc_start_main + 245\n6    tmphz_s_uj3                        0x0000565120a331e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercased())\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmp47tr1h2w/tmp47tr1h2w.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b643c391c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b643c088b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b643c088988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b643c0877b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp47tr1h2w                        0x00005598199875a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b643c57d460 __libc_start_main + 245\n6    tmp47tr1h2w                        0x00005598199871e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercased())\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercaseString)\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "/tmp/tmp6pdwv100.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp6pdwv100.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var camel = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                camel += String(char).uppercased()\n                next_upper = false\n            } else {\n                camel += String(char)\n            }\n        }\n    }\n    return camel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpt6pg8piv/tmpt6pg8piv.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aad2e07cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aad2dd73b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aad2dd73988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aad2dd727b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt6pg8piv                        0x000055e9c86f45a7 <unavailable> + 5543\n5    libc.so.6                          0x00002aad2e268460 __libc_start_main + 245\n6    tmpt6pg8piv                        0x000055e9c86f41e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpob3_5vqv/tmpob3_5vqv.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b767f143c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b767ee3ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b767ee3a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b767ee397b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpob3_5vqv                        0x00005588d93cf5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b767f32f460 __libc_start_main + 245\n6    tmpob3_5vqv                        0x00005588d93cf1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "/tmp/tmpxl2ti_mv.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercased())\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "/tmp/tmpurvcg_nv.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercaseString\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "/tmp/tmpimb67ykn.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpimb67ykn.swift:11:40: error: value of type 'String' has no member 'uppercaseString'\n                result += String(char).uppercaseString\n                          ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word {\n        if char == \"_\" {\n            is_first = true\n        } else if is_first {\n            result.append(char.uppercased())\n            is_first = false\n        } else {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercase())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "/tmp/tmpo8bk8ex9.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpo8bk8ex9.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word.characters {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercased())\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpxhpadq10.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercaseString)\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "/tmp/tmp6pdwv100.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp6pdwv100.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word {\n        if c == \"_\" {\n            next_upper = true\n        } else if next_upper {\n            result.append(c.uppercased())\n            next_upper = false\n        } else {\n            result.append(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "tmppg__v1im/tmppg__v1im.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4c4b2d5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4c4afccb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4c4afcc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4c4afcb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmppg__v1im                        0x000055823cddb5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b4c4b4c1460 __libc_start_main + 245\n6    tmppg__v1im                        0x000055823cddb1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpob3_5vqv/tmpob3_5vqv.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b767f143c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b767ee3ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b767ee3a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b767ee397b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpob3_5vqv                        0x00005588d93cf5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b767f32f460 __libc_start_main + 245\n6    tmpob3_5vqv                        0x00005588d93cf1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpob3_5vqv/tmpob3_5vqv.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b767f143c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b767ee3ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b767ee3a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b767ee397b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpob3_5vqv                        0x00005588d93cf5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b767f32f460 __libc_start_main + 245\n6    tmpob3_5vqv                        0x00005588d93cf1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word {\n        if char == \"_\" {\n            is_upper = true\n            continue\n        }\n        if is_upper {\n            result.append(char.uppercased())\n            is_upper = false\n        } else {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "tmptct9is70/tmptct9is70.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adbc9b46c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adbc983db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adbc983d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adbc983c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptct9is70                        0x00005618b51c15a7 <unavailable> + 5543\n5    libc.so.6                          0x00002adbc9d32460 __libc_start_main + 245\n6    tmptct9is70                        0x00005618b51c11e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first_word = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first_word = false\n        } else {\n            if is_first_word {\n                result.append(c)\n            } else {\n                result.append(c.uppercaseString)\n                is_first_word = true\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmp6sfrtj4d.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp6sfrtj4d.swift:13:33: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(c.uppercaseString)\n                              ~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for c in word {\n        if c == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(c.uppercased())\n                capitalize = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "tmpurfsr78s/tmpurfsr78s.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b92f6312c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b92f6009b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b92f6009988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b92f60087b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpurfsr78s                        0x0000558618ed25a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b92f64fe460 __libc_start_main + 245\n6    tmpurfsr78s                        0x0000558618ed21e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for c in word {\n        if c == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(c.uppercased())\n                is_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "tmptzus0rne/tmptzus0rne.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad851ee7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad851bdeb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad851bde988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad851bdd7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptzus0rne                        0x000055faf02375a7 <unavailable> + 5543\n5    libc.so.6                          0x00002ad8520d3460 __libc_start_main + 245\n6    tmptzus0rne                        0x000055faf02371e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpue2mm5u7/tmpue2mm5u7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b630a5e0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b630a2d7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b630a2d7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b630a2d67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpue2mm5u7                        0x00005612e36bd5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b630a7cc460 __libc_start_main + 245\n6    tmpue2mm5u7                        0x00005612e36bd1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercased())\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercase())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "/tmp/tmpo8bk8ex9.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpo8bk8ex9.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercased())\n                is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmphz_s_uj3/tmphz_s_uj3.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2489b55c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b248984cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b248984c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b248984b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphz_s_uj3                        0x0000565120a335a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b2489d41460 __libc_start_main + 245\n6    tmphz_s_uj3                        0x0000565120a331e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first_char = true\n    for char in word {\n        if char == \"_\" {\n            is_first_char = true\n        } else if is_first_char {\n            result.append(char.uppercased())\n            is_first_char = false\n        } else {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_is_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            next_is_upper = true\n        } else {\n            if next_is_upper {\n                result += String(c).uppercased()\n                next_is_upper = false\n            } else {\n                result += String(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpku7meaie.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(c).uppercased()\n                next_upper = false\n            } else {\n                result += String(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmp574ex7gy/tmp574ex7gy.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab1945b2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab1942a9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab1942a9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab1942a87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp574ex7gy                        0x000055c617fa45a7 <unavailable> + 5543\n5    libc.so.6                          0x00002ab19479e460 __libc_start_main + 245\n6    tmp574ex7gy                        0x000055c617fa41e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var camel_word = \"\"\n    for i in 0..<words.count {\n        if i == 0 {\n            camel_word += words[i]\n        } else {\n            camel_word += words[i].capitalized\n        }\n    }\n    return camel_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpqwc30ji4.swift:10:36: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n            camel_word += words[i].capitalized\n                          ~~~~~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpob3_5vqv/tmpob3_5vqv.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b767f143c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b767ee3ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b767ee3a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b767ee397b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpob3_5vqv                        0x00005588d93cf5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b767f32f460 __libc_start_main + 245\n6    tmpob3_5vqv                        0x00005588d93cf1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercased())\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word {\n        if c == \"_\" {\n            is_first = true\n        } else if is_first {\n            result.append(c.uppercased())\n            is_first = false\n        } else {\n            result.append(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpue2mm5u7/tmpue2mm5u7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b630a5e0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b630a2d7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b630a2d7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b630a2d67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpue2mm5u7                        0x00005612e36bd5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b630a7cc460 __libc_start_main + 245\n6    tmpue2mm5u7                        0x00005612e36bd1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpob3_5vqv/tmpob3_5vqv.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b767f143c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b767ee3ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b767ee3a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b767ee397b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpob3_5vqv                        0x00005588d93cf5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b767f32f460 __libc_start_main + 245\n6    tmpob3_5vqv                        0x00005588d93cf1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first_char = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result.append(char.uppercaseString)\n                is_first_char = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmp3em533uy.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp3em533uy.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercased())\n                is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpud84kanm.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercased())\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    return word.split(separator: \"_\").enumerated().map {\n        $0.offset == 0 ? $0.element : $0.element.capitalized\n    }.joined()\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmph2owbd44.swift:5:50: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n        $0.offset == 0 ? $0.element : $0.element.capitalized\n                                      ~~~~~~~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpue2mm5u7/tmpue2mm5u7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b630a5e0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b630a2d7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b630a2d7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b630a2d67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpue2mm5u7                        0x00005612e36bd5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b630a7cc460 __libc_start_main + 245\n6    tmpue2mm5u7                        0x00005612e36bd1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var camel = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                camel += String(char).capitalized\n                capitalize = false\n            } else {\n                camel += String(char)\n            }\n        }\n    }\n    return camel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpitkctoic.swift:11:39: error: value of type 'String' has no member 'capitalized'\n                camel += String(char).capitalized\n                         ~~~~~~~~~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result += String(char).uppercased()\n                is_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpipa1mu_v/tmpipa1mu_v.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac214edfc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac214bd6b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac214bd6988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac214bd57b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpipa1mu_v                        0x0000563f358d75a7 <unavailable> + 5543\n5    libc.so.6                          0x00002ac2150cb460 __libc_start_main + 245\n6    tmpipa1mu_v                        0x0000563f358d71e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercased())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first_char = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result.append(char.uppercased())\n                is_first_char = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpoddxl6vp.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercased())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpobr4rotx.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpue2mm5u7/tmpue2mm5u7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b630a5e0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b630a2d7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b630a2d7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b630a2d67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpue2mm5u7                        0x00005612e36bd5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b630a7cc460 __libc_start_main + 245\n6    tmpue2mm5u7                        0x00005612e36bd1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercased())\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercased())\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercased())\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmp47tr1h2w/tmp47tr1h2w.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b643c391c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b643c088b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b643c088988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b643c0877b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp47tr1h2w                        0x00005598199875a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b643c57d460 __libc_start_main + 245\n6    tmp47tr1h2w                        0x00005598199871e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercaseString)\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpnywb7imq.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpnywb7imq.swift:11:33: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(c.uppercaseString)\n                              ~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpob3_5vqv/tmpob3_5vqv.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b767f143c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b767ee3ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b767ee3a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b767ee397b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpob3_5vqv                        0x00005588d93cf5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b767f32f460 __libc_start_main + 245\n6    tmpob3_5vqv                        0x00005588d93cf1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpue2mm5u7/tmpue2mm5u7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b630a5e0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b630a2d7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b630a2d7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b630a2d67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpue2mm5u7                        0x00005612e36bd5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b630a7cc460 __libc_start_main + 245\n6    tmpue2mm5u7                        0x00005612e36bd1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercaseString)\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmp1a9apvh5.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp1a9apvh5.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for letter in word {\n        if letter == \"_\" {\n            is_first = true\n        } else if is_first {\n            result.append(letter)\n            is_first = false\n        } else {\n            result.append(letter.lowercased())\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "tmpwa3rd_8a/tmpwa3rd_8a.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b66bed66c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b66bea5db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b66bea5d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b66bea5c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwa3rd_8a                        0x0000556a5980f5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b66bef52460 __libc_start_main + 245\n6    tmpwa3rd_8a                        0x0000556a5980f1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercaseString)\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "/tmp/tmp6pdwv100.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp6pdwv100.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var nextUpper = false\n    for c in word {\n        if c == \"_\" {\n            nextUpper = true\n        } else if nextUpper {\n            result += String(c).uppercased()\n            nextUpper = false\n        } else {\n            result += String(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "tmpcfxoac13/tmpcfxoac13.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b74808b4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b74805abb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b74805ab988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b74805aa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpcfxoac13                        0x000055948d4ad5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b7480aa0460 __libc_start_main + 245\n6    tmpcfxoac13                        0x000055948d4ad1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercase())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmp2aij23st.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp2aij23st.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpob3_5vqv/tmpob3_5vqv.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b767f143c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b767ee3ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b767ee3a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b767ee397b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpob3_5vqv                        0x00005588d93cf5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b767f32f460 __libc_start_main + 245\n6    tmpob3_5vqv                        0x00005588d93cf1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercaseString)\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpnywb7imq.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpnywb7imq.swift:11:33: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(c.uppercaseString)\n                              ~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else if is_first {\n            result.append(c.uppercased())\n            is_first = false\n        } else {\n            result.append(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpyana4mbv.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercase())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "/tmp/tmpo8bk8ex9.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpo8bk8ex9.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first_char = true\n    for char in word {\n        if char == \"_\" {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result.append(char)\n                is_first_char = false\n            } else {\n                result.append(char.lowercased())\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "tmp8sg_qiht/tmp8sg_qiht.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6dd5cd7c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6dd59ceb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6dd59ce988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6dd59cd7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8sg_qiht                        0x000055a016d525a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b6dd5ec3460 __libc_start_main + 245\n6    tmp8sg_qiht                        0x000055a016d521e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpue2mm5u7/tmpue2mm5u7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b630a5e0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b630a2d7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b630a2d7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b630a2d67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpue2mm5u7                        0x00005612e36bd5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b630a7cc460 __libc_start_main + 245\n6    tmpue2mm5u7                        0x00005612e36bd1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpob3_5vqv/tmpob3_5vqv.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b767f143c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b767ee3ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b767ee3a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b767ee397b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpob3_5vqv                        0x00005588d93cf5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b767f32f460 __libc_start_main + 245\n6    tmpob3_5vqv                        0x00005588d93cf1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercaseString)\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmp1a9apvh5.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp1a9apvh5.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercase())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmp2aij23st.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp2aij23st.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercased())\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmp0mj_4um4/tmp0mj_4um4.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aff7f318c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aff7f00fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aff7f00f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aff7f00e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0mj_4um4                        0x0000555b35ee25a7 <unavailable> + 5543\n5    libc.so.6                          0x00002aff7f504460 __libc_start_main + 245\n6    tmp0mj_4um4                        0x0000555b35ee21e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercase())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmp2aij23st.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp2aij23st.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first_char = true\n    for char in word {\n        if char == \"_\" {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result.append(char.uppercased())\n                is_first_char = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else if is_first {\n            result.append(c.uppercased())\n            is_first = false\n        } else {\n            result.append(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpyana4mbv.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalizeNext = false\n    for char in word.characters {\n        if char == \"_\" {\n            capitalizeNext = true\n        } else {\n            if capitalizeNext {\n                result.append(char.uppercase())\n                capitalizeNext = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpd3clo39u.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpd3clo39u.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercased())\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmp47tr1h2w/tmp47tr1h2w.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b643c391c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b643c088b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b643c088988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b643c0877b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp47tr1h2w                        0x00005598199875a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b643c57d460 __libc_start_main + 245\n6    tmp47tr1h2w                        0x00005598199871e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result += String(char).uppercased()\n                is_first = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercased())\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "/tmp/tmpurvcg_nv.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpue2mm5u7/tmpue2mm5u7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b630a5e0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b630a2d7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b630a2d7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b630a2d67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpue2mm5u7                        0x00005612e36bd5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b630a7cc460 __libc_start_main + 245\n6    tmpue2mm5u7                        0x00005612e36bd1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpue2mm5u7/tmpue2mm5u7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b630a5e0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b630a2d7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b630a2d7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b630a2d67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpue2mm5u7                        0x00005612e36bd5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b630a7cc460 __libc_start_main + 245\n6    tmpue2mm5u7                        0x00005612e36bd1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var camel = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            camel += word\n        } else {\n            camel += word.capitalized\n        }\n    }\n    return camel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmp29kmfzfd.swift:10:27: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n            camel += word.capitalized\n                     ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(c).uppercased()\n                next_upper = false\n            } else {\n                result += String(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmp574ex7gy/tmp574ex7gy.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab1945b2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab1942a9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab1942a9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab1942a87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp574ex7gy                        0x000055c617fa45a7 <unavailable> + 5543\n5    libc.so.6                          0x00002ab19479e460 __libc_start_main + 245\n6    tmp574ex7gy                        0x000055c617fa41e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercaseString)\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "/tmp/tmp6pdwv100.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp6pdwv100.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercased())\n                is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmphz_s_uj3/tmphz_s_uj3.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2489b55c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b248984cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b248984c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b248984b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphz_s_uj3                        0x0000565120a335a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b2489d41460 __libc_start_main + 245\n6    tmphz_s_uj3                        0x0000565120a331e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercase())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "/tmp/tmpo8bk8ex9.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpo8bk8ex9.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first = true\n        } else if is_first {\n            result.append(char.uppercase())\n            is_first = false\n        } else {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpzus3_aeu.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpzus3_aeu.swift:10:32: error: value of type 'Character' has no member 'uppercase'\n            result.append(char.uppercase())\n                          ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.components(separatedBy: \"_\")\n    var camel = \"\"\n    for i in 0..<words.count {\n        if i == 0 {\n            camel += words[i]\n        } else {\n            camel += words[i].capitalized\n        }\n    }\n    return camel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpo76aq6l_.swift:4:22: error: value of type 'String' has no member 'components'\n    let words = word.components(separatedBy: \"_\")\n                ~~~~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for ch in word.characters {\n        if ch == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(ch.uppercase())\n                is_first = false\n            } else {\n                result.append(ch)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpvtg93ehq.swift:6:20: error: 'characters' is unavailable: Please use String directly\n    for ch in word.characters {\n                   ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpvtg93ehq.swift:11:34: error: value of type 'Character' has no member 'uppercase'\n                result.append(ch.uppercase())\n                              ~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercased())\n                is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmphz_s_uj3/tmphz_s_uj3.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2489b55c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b248984cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b248984c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b248984b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphz_s_uj3                        0x0000565120a335a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b2489d41460 __libc_start_main + 245\n6    tmphz_s_uj3                        0x0000565120a331e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpob3_5vqv/tmpob3_5vqv.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b767f143c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b767ee3ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b767ee3a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b767ee397b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpob3_5vqv                        0x00005588d93cf5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b767f32f460 __libc_start_main + 245\n6    tmpob3_5vqv                        0x00005588d93cf1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(String(c).uppercaseString)\n                is_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmp4zvrr1d_.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp4zvrr1d_.swift:11:41: error: value of type 'String' has no member 'uppercaseString'\n                result.append(String(c).uppercaseString)\n                              ~~~~~~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercase())\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpmfdj2rzt.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpmfdj2rzt.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(c).uppercased()\n                next_upper = false\n            } else {\n                result += String(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmp574ex7gy/tmp574ex7gy.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab1945b2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab1942a9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab1942a9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab1942a87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp574ex7gy                        0x000055c617fa45a7 <unavailable> + 5543\n5    libc.so.6                          0x00002ab19479e460 __libc_start_main + 245\n6    tmp574ex7gy                        0x000055c617fa41e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first_char = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result.append(char.uppercase())\n                is_first_char = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpp86yhjo0.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpp86yhjo0.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.components(separatedBy: \"_\")\n    var camel = \"\"\n    for var i in 0..<words.count {\n        if i == 0 {\n            camel += words[i]\n        } else {\n            camel += words[i].capitalized\n        }\n    }\n    return camel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmp3fad_5pg.swift:4:22: error: value of type 'String' has no member 'components'\n    let words = word.components(separatedBy: \"_\")\n                ~~~~ ^~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercase())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmp2aij23st.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp2aij23st.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercaseString)\n                is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpnnkc4mle.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpnnkc4mle.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercased())\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var nextUpper = false\n    for char in word {\n        if char == \"_\" {\n            nextUpper = true\n        } else {\n            if nextUpper {\n                result.append(char.uppercased())\n                nextUpper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "tmp9zupnh6q/tmp9zupnh6q.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1061567c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b106125eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b106125e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b106125d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp9zupnh6q                        0x000055c24bddb5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b1061753460 __libc_start_main + 245\n6    tmp9zupnh6q                        0x000055c24bddb1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first_char = true\n    for char in word {\n        if char == \"_\" {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result.append(char.uppercased())\n                is_first_char = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result += String(char).uppercased()\n                capitalize = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "tmp0_g0ke4v/tmp0_g0ke4v.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad512dd6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad512acdb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad512acd988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad512acc7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0_g0ke4v                        0x000055e7c10bd5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002ad512fc2460 __libc_start_main + 245\n6    tmp0_g0ke4v                        0x000055e7c10bd1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else if capitalize {\n            result.append(char.uppercased())\n            capitalize = false\n        } else {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "tmpkxihxrda/tmpkxihxrda.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b07fd3abc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b07fd0a2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b07fd0a2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b07fd0a17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkxihxrda                        0x0000556e78d165a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b07fd597460 __libc_start_main + 245\n6    tmpkxihxrda                        0x0000556e78d161e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first_char = true\n    for char in word {\n        if char == \"_\" {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result.append(char.uppercased())\n                is_first_char = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercased())\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmp47tr1h2w/tmp47tr1h2w.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b643c391c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b643c088b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b643c088988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b643c0877b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp47tr1h2w                        0x00005598199875a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b643c57d460 __libc_start_main + 245\n6    tmp47tr1h2w                        0x00005598199871e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercaseString)\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpdls1df52.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpdls1df52.swift:11:33: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(c.uppercaseString)\n                              ~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercased())\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmp47tr1h2w/tmp47tr1h2w.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b643c391c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b643c088b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b643c088988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b643c0877b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp47tr1h2w                        0x00005598199875a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b643c57d460 __libc_start_main + 245\n6    tmp47tr1h2w                        0x00005598199871e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word {\n        if char == \"_\" {\n            is_first = true\n        } else if is_first {\n            result.append(char.uppercased())\n            is_first = false\n        } else {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercased())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpobr4rotx.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpue2mm5u7/tmpue2mm5u7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b630a5e0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b630a2d7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b630a2d7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b630a2d67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpue2mm5u7                        0x00005612e36bd5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b630a7cc460 __libc_start_main + 245\n6    tmpue2mm5u7                        0x00005612e36bd1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var i = 0\n    while i < word.count {\n        let index = word.index(word.startIndex, offsetBy: i)\n        if word[index] == \"_\" {\n            i += 1\n            let index = word.index(word.startIndex, offsetBy: i)\n            result.append(word[index].uppercased())\n        } else {\n            result.append(word[index])\n        }\n        i += 1\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "tmprcx97m4m/tmprcx97m4m.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9f22d5dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9f22a54b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9f22a54988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9f22a537b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmprcx97m4m                        0x000055e85d613657 <unavailable> + 5719\n5    libc.so.6                          0x00002b9f22f49460 __libc_start_main + 245\n6    tmprcx97m4m                        0x000055e85d613299 <unavailable> + 4761\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_char_is_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_char_is_upper = true\n        } else {\n            if next_char_is_upper {\n                result.append(char.uppercaseString)\n                next_char_is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpp111kbjv.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpp111kbjv.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercaseString)\n                is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpnnkc4mle.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpnnkc4mle.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result += String(char).uppercased()\n                is_first = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var new_word = \"\"\n    var is_upper = false\n    \n    for letter in word {\n        if letter == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                new_word += String(letter).uppercased()\n                is_upper = false\n            } else {\n                new_word += String(letter)\n            }\n        }\n    }\n    \n    return new_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "tmpnppy1d5k/tmpnppy1d5k.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4853999c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4853690b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4853690988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b485368f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnppy1d5k                        0x000056458518f5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b4853b85460 __libc_start_main + 245\n6    tmpnppy1d5k                        0x000056458518f1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpue2mm5u7/tmpue2mm5u7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b630a5e0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b630a2d7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b630a2d7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b630a2d67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpue2mm5u7                        0x00005612e36bd5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b630a7cc460 __libc_start_main + 245\n6    tmpue2mm5u7                        0x00005612e36bd1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_is_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_is_upper = true\n        } else {\n            if next_is_upper {\n                result.append(char.uppercased())\n                next_is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "tmpnc0rgazh/tmpnc0rgazh.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1d41af6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1d417edb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1d417ed988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1d417ec7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpnc0rgazh                        0x0000561378d8e5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b1d41ce2460 __libc_start_main + 245\n6    tmpnc0rgazh                        0x0000561378d8e1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercased())\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmp47tr1h2w/tmp47tr1h2w.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b643c391c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b643c088b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b643c088988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b643c0877b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp47tr1h2w                        0x00005598199875a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b643c57d460 __libc_start_main + 245\n6    tmp47tr1h2w                        0x00005598199871e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercaseString)\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpdls1df52.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpdls1df52.swift:11:33: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(c.uppercaseString)\n                              ~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercased())\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmp47tr1h2w/tmp47tr1h2w.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b643c391c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b643c088b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b643c088988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b643c0877b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp47tr1h2w                        0x00005598199875a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b643c57d460 __libc_start_main + 245\n6    tmp47tr1h2w                        0x00005598199871e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            result += next_upper ? String(char).uppercased() : String(char)\n            next_upper = false\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "tmpii1gcs0z/tmpii1gcs0z.swift:30: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aec1df47c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aec1dc3eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aec1dc3e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aec1dc3d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpii1gcs0z                        0x0000560b031005a7 <unavailable> + 5543\n5    libc.so.6                          0x00002aec1e133460 __libc_start_main + 245\n6    tmpii1gcs0z                        0x0000560b031001e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercased())\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmp0mj_4um4/tmp0mj_4um4.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aff7f318c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aff7f00fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aff7f00f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aff7f00e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0mj_4um4                        0x0000555b35ee25a7 <unavailable> + 5543\n5    libc.so.6                          0x00002aff7f504460 __libc_start_main + 245\n6    tmp0mj_4um4                        0x0000555b35ee21e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(c).uppercased()\n                next_upper = false\n            } else {\n                result += String(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmp574ex7gy/tmp574ex7gy.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab1945b2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab1942a9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab1942a9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab1942a87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp574ex7gy                        0x000055c617fa45a7 <unavailable> + 5543\n5    libc.so.6                          0x00002ab19479e460 __libc_start_main + 245\n6    tmp574ex7gy                        0x000055c617fa41e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercase())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmp2aij23st.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp2aij23st.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercased())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpobr4rotx.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercased())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpobr4rotx.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercaseString)\n                is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpnnkc4mle.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpnnkc4mle.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capital = false\n    for char in word {\n        if char == \"_\" {\n            capital = true\n        } else {\n            if capital {\n                result.append(char.uppercased())\n                capital = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "tmpbo4jrrwu/tmpbo4jrrwu.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2a1c74ac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2a1c441b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2a1c441988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2a1c4407b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbo4jrrwu                        0x000055d4d5aff5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b2a1c936460 __libc_start_main + 245\n6    tmpbo4jrrwu                        0x000055d4d5aff1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpue2mm5u7/tmpue2mm5u7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b630a5e0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b630a2d7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b630a2d7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b630a2d67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpue2mm5u7                        0x00005612e36bd5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b630a7cc460 __libc_start_main + 245\n6    tmpue2mm5u7                        0x00005612e36bd1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercased())\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpob3_5vqv/tmpob3_5vqv.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b767f143c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b767ee3ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b767ee3a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b767ee397b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpob3_5vqv                        0x00005588d93cf5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b767f32f460 __libc_start_main + 245\n6    tmpob3_5vqv                        0x00005588d93cf1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result += String(c).uppercased()\n                is_first = false\n            } else {\n                result += String(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmp_4_01xsz.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercased())\n                is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpud84kanm.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercase())\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmp1nlegq_h.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp1nlegq_h.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var new_word = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                new_word.append(char.uppercased())\n                next_upper = false\n            } else {\n                new_word.append(char)\n            }\n        }\n    }\n    return new_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "tmpes6764kk/tmpes6764kk.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adc938e8c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adc935dfb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adc935df988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adc935de7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpes6764kk                        0x0000563ae7d505a7 <unavailable> + 5543\n5    libc.so.6                          0x00002adc93ad4460 __libc_start_main + 245\n6    tmpes6764kk                        0x0000563ae7d501e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercased())\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmp0mj_4um4/tmp0mj_4um4.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aff7f318c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aff7f00fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aff7f00f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aff7f00e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0mj_4um4                        0x0000555b35ee25a7 <unavailable> + 5543\n5    libc.so.6                          0x00002aff7f504460 __libc_start_main + 245\n6    tmp0mj_4um4                        0x0000555b35ee21e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpob3_5vqv/tmpob3_5vqv.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b767f143c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b767ee3ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b767ee3a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b767ee397b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpob3_5vqv                        0x00005588d93cf5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b767f32f460 __libc_start_main + 245\n6    tmpob3_5vqv                        0x00005588d93cf1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var nextUpper = false\n    for c in word {\n        if c == \"_\" {\n            nextUpper = true\n        } else {\n            if nextUpper {\n                result.append(c.uppercased())\n                nextUpper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "tmpybvhuxpd/tmpybvhuxpd.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8259ecdc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8259bc4b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8259bc4988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8259bc37b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpybvhuxpd                        0x0000558595a175a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b825a0b9460 __libc_start_main + 245\n6    tmpybvhuxpd                        0x0000558595a171e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercase())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmp2aij23st.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp2aij23st.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpue2mm5u7/tmpue2mm5u7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b630a5e0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b630a2d7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b630a2d7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b630a2d67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpue2mm5u7                        0x00005612e36bd5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b630a7cc460 __libc_start_main + 245\n6    tmpue2mm5u7                        0x00005612e36bd1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word {\n        if c == \"_\" {\n            is_first = true\n        } else if is_first {\n            result.append(c.uppercased())\n            is_first = false\n        } else {\n            result.append(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpue2mm5u7/tmpue2mm5u7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b630a5e0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b630a2d7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b630a2d7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b630a2d67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpue2mm5u7                        0x00005612e36bd5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b630a7cc460 __libc_start_main + 245\n6    tmpue2mm5u7                        0x00005612e36bd1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercase())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "/tmp/tmpo8bk8ex9.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpo8bk8ex9.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercaseString)\n                is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpnnkc4mle.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpnnkc4mle.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalizeNext = false\n    for character in word.characters {\n        if character == \"_\" {\n            capitalizeNext = true\n        } else {\n            if capitalizeNext {\n                result.append(String(character).uppercased())\n                capitalizeNext = false\n            } else {\n                result.append(character)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpyhgzxs9b.swift:6:27: error: 'characters' is unavailable: Please use String directly\n    for character in word.characters {\n                          ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first = true\n        } else if is_first {\n            result.append(char.uppercase())\n            is_first = false\n        } else {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpzus3_aeu.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpzus3_aeu.swift:10:32: error: value of type 'Character' has no member 'uppercase'\n            result.append(char.uppercase())\n                          ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            result += next_upper ? String(char).uppercaseString : String(char)\n            next_upper = false\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmps_c2dize.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmps_c2dize.swift:10:49: error: value of type 'String' has no member 'uppercaseString'\n            result += next_upper ? String(char).uppercaseString : String(char)\n                                   ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpue2mm5u7/tmpue2mm5u7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b630a5e0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b630a2d7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b630a2d7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b630a2d67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpue2mm5u7                        0x00005612e36bd5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b630a7cc460 __libc_start_main + 245\n6    tmpue2mm5u7                        0x00005612e36bd1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercased())\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmp47tr1h2w/tmp47tr1h2w.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b643c391c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b643c088b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b643c088988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b643c0877b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp47tr1h2w                        0x00005598199875a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b643c57d460 __libc_start_main + 245\n6    tmp47tr1h2w                        0x00005598199871e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else if next_upper {\n            result += String(char).uppercased()\n            next_upper = false\n        } else {\n            result += String(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "tmp05k86sxj/tmp05k86sxj.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ad70c64dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ad70c344b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ad70c344988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ad70c3437b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp05k86sxj                        0x000055c896f7c5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002ad70c839460 __libc_start_main + 245\n6    tmp05k86sxj                        0x000055c896f7c1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(c).uppercased()\n                next_upper = false\n            } else {\n                result += String(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmp574ex7gy/tmp574ex7gy.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab1945b2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab1942a9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab1942a9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab1942a87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp574ex7gy                        0x000055c617fa45a7 <unavailable> + 5543\n5    libc.so.6                          0x00002ab19479e460 __libc_start_main + 245\n6    tmp574ex7gy                        0x000055c617fa41e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_next_upper = false\n    for char in word {\n        if char == \"_\" {\n            is_next_upper = true\n        } else {\n            if is_next_upper {\n                result.append(char.uppercased())\n                is_next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "tmpmvt9h2ss/tmpmvt9h2ss.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0c912d3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0c90fcab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0c90fca988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0c90fc97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmvt9h2ss                        0x0000555ce71f25a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b0c914bf460 __libc_start_main + 245\n6    tmpmvt9h2ss                        0x0000555ce71f21e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else if is_first {\n            result.append(c.uppercaseString)\n            is_first = false\n        } else {\n            result.append(c)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpwjbp2f2n.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpwjbp2f2n.swift:10:29: error: value of type 'Character' has no member 'uppercaseString'\n            result.append(c.uppercaseString)\n                          ~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var camel = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            camel += word\n        } else {\n            camel += word.capitalized\n        }\n    }\n    return camel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmp29kmfzfd.swift:10:27: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n            camel += word.capitalized\n                     ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercase())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "/tmp/tmpo8bk8ex9.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpo8bk8ex9.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result.append(char.uppercased())\n                capitalize = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmp47tr1h2w/tmp47tr1h2w.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b643c391c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b643c088b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b643c088988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b643c0877b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp47tr1h2w                        0x00005598199875a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b643c57d460 __libc_start_main + 245\n6    tmp47tr1h2w                        0x00005598199871e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercaseString\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "/tmp/tmpimb67ykn.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpimb67ykn.swift:11:40: error: value of type 'String' has no member 'uppercaseString'\n                result += String(char).uppercaseString\n                          ~~~~~~~~~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercase())\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpmfdj2rzt.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpmfdj2rzt.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpue2mm5u7/tmpue2mm5u7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b630a5e0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b630a2d7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b630a2d7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b630a2d67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpue2mm5u7                        0x00005612e36bd5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b630a7cc460 __libc_start_main + 245\n6    tmpue2mm5u7                        0x00005612e36bd1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result += String(char).capitalized\n                capitalize = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmp42_0aybw.swift:11:40: error: value of type 'String' has no member 'capitalized'\n                result += String(char).capitalized\n                          ~~~~~~~~~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercase())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "/tmp/tmpo8bk8ex9.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpo8bk8ex9.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercaseString)\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpnywb7imq.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpnywb7imq.swift:11:33: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(c.uppercaseString)\n                              ~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercased())\n                is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmphz_s_uj3/tmphz_s_uj3.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2489b55c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b248984cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b248984c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b248984b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphz_s_uj3                        0x0000565120a335a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b2489d41460 __libc_start_main + 245\n6    tmphz_s_uj3                        0x0000565120a331e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpob3_5vqv/tmpob3_5vqv.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b767f143c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b767ee3ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b767ee3a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b767ee397b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpob3_5vqv                        0x00005588d93cf5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b767f32f460 __libc_start_main + 245\n6    tmpob3_5vqv                        0x00005588d93cf1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpue2mm5u7/tmpue2mm5u7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b630a5e0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b630a2d7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b630a2d7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b630a2d67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpue2mm5u7                        0x00005612e36bd5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b630a7cc460 __libc_start_main + 245\n6    tmpue2mm5u7                        0x00005612e36bd1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "/tmp/tmpxl2ti_mv.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    let words = word.split(separator: \"_\")\n    var camel = \"\"\n    for (index, word) in words.enumerated() {\n        if index == 0 {\n            camel += word\n        } else {\n            camel += word.capitalized\n        }\n    }\n    return camel\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmp29kmfzfd.swift:10:27: error: value of type 'String.SubSequence' (aka 'Substring') has no member 'capitalized'\n            camel += word.capitalized\n                     ~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpue2mm5u7/tmpue2mm5u7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b630a5e0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b630a2d7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b630a2d7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b630a2d67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpue2mm5u7                        0x00005612e36bd5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b630a7cc460 __libc_start_main + 245\n6    tmpue2mm5u7                        0x00005612e36bd1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercased())\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmp0mj_4um4/tmp0mj_4um4.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aff7f318c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aff7f00fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aff7f00f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aff7f00e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0mj_4um4                        0x0000555b35ee25a7 <unavailable> + 5543\n5    libc.so.6                          0x00002aff7f504460 __libc_start_main + 245\n6    tmp0mj_4um4                        0x0000555b35ee21e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercased())\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmp0mj_4um4/tmp0mj_4um4.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aff7f318c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aff7f00fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aff7f00f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aff7f00e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp0mj_4um4                        0x0000555b35ee25a7 <unavailable> + 5543\n5    libc.so.6                          0x00002aff7f504460 __libc_start_main + 245\n6    tmp0mj_4um4                        0x0000555b35ee21e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercase())\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmp1nlegq_h.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp1nlegq_h.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpob3_5vqv/tmpob3_5vqv.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b767f143c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b767ee3ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b767ee3a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b767ee397b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpob3_5vqv                        0x00005588d93cf5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b767f32f460 __libc_start_main + 245\n6    tmpob3_5vqv                        0x00005588d93cf1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercase())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "/tmp/tmpo8bk8ex9.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpo8bk8ex9.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercased())\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercased())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpobr4rotx.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word {\n        if char == \"_\" {\n            is_first = true\n        } else if is_first {\n            result.append(char.uppercased())\n            is_first = false\n        } else {\n            result.append(char)\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalizeNext = false\n    for char in word.characters {\n        if char == \"_\" {\n            capitalizeNext = true\n        } else {\n            if capitalizeNext {\n                result.append(char.uppercased())\n                capitalizeNext = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmp4l8qtt52.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalizeNext = false\n    for char in word {\n        if char == \"_\" {\n            capitalizeNext = true\n        } else {\n            if capitalizeNext {\n                result += String(char).capitalized\n                capitalizeNext = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpi9escihn.swift:11:40: error: value of type 'String' has no member 'capitalized'\n                result += String(char).capitalized\n                          ~~~~~~~~~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalize = false\n    for char in word {\n        if char == \"_\" {\n            capitalize = true\n        } else {\n            if capitalize {\n                result += String(char).capitalized\n                capitalize = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmp42_0aybw.swift:11:40: error: value of type 'String' has no member 'capitalized'\n                result += String(char).capitalized\n                          ~~~~~~~~~~~~ ^~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(c).uppercased()\n                next_upper = false\n            } else {\n                result += String(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmp574ex7gy/tmp574ex7gy.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab1945b2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab1942a9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab1942a9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab1942a87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp574ex7gy                        0x000055c617fa45a7 <unavailable> + 5543\n5    libc.so.6                          0x00002ab19479e460 __libc_start_main + 245\n6    tmp574ex7gy                        0x000055c617fa41e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for c in word.characters {\n        if c == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(c.uppercase())\n                next_upper = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpmfdj2rzt.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpmfdj2rzt.swift:11:33: error: value of type 'Character' has no member 'uppercase'\n                result.append(c.uppercase())\n                              ~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpob3_5vqv/tmpob3_5vqv.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b767f143c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b767ee3ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b767ee3a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b767ee397b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpob3_5vqv                        0x00005588d93cf5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b767f32f460 __libc_start_main + 245\n6    tmpob3_5vqv                        0x00005588d93cf1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercase())\n            } else {\n                result.append(char)\n            }\n            next_upper = false\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmp872xyxkm.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp872xyxkm.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word.characters {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercased())\n                is_first = false\n            } else {\n                result.append(c)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpobr4rotx.swift:6:19: error: 'characters' is unavailable: Please use String directly\n    for c in word.characters {\n                  ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n            } else {\n                result.append(char)\n            }\n            next_upper = false\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "tmpe8j0qwi5/tmpe8j0qwi5.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b84db1b6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b84daeadb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b84daead988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b84daeac7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe8j0qwi5                        0x000055a896cf75a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b84db3a2460 __libc_start_main + 245\n6    tmpe8j0qwi5                        0x000055a896cf71e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var capitalizeNext = false\n    for char in word.characters {\n        if char == \"_\" {\n            capitalizeNext = true\n        } else {\n            if capitalizeNext {\n                result.append(char.uppercased())\n                capitalizeNext = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmp4l8qtt52.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first_char = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first_char = true\n        } else {\n            if is_first_char {\n                result.append(char.uppercase())\n                is_first_char = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpp86yhjo0.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpp86yhjo0.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercase())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "/tmp/tmpo8bk8ex9.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpo8bk8ex9.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercase())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "/tmp/tmpo8bk8ex9.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpo8bk8ex9.swift:11:36: error: value of type 'Character' has no member 'uppercase'\n                result.append(char.uppercase())\n                              ~~~~ ^~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word.characters {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercaseString)\n                is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "/tmp/tmpnnkc4mle.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpnnkc4mle.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for c in word {\n        if c == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(c.uppercased())\n            } else {\n                result.append(c)\n            }\n            is_first = false\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var camel_case_word = \"\"\n    var is_first_char = true\n    for char in word {\n        if char == \"_\" {\n            is_first_char = true\n        } else if is_first_char {\n            camel_case_word += String(char).uppercased()\n            is_first_char = false\n        } else {\n            camel_case_word += String(char)\n        }\n    }\n    return camel_case_word\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word.characters {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result.append(char.uppercaseString)\n                is_first = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517254,
      "stdout": "",
      "stderr": "/tmp/tmp6pdwv100.swift:6:22: error: 'characters' is unavailable: Please use String directly\n    for char in word.characters {\n                     ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmp6pdwv100.swift:11:36: error: value of type 'Character' has no member 'uppercaseString'\n                result.append(char.uppercaseString)\n                              ~~~~ ^~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_first = true\n    for char in word {\n        if char == \"_\" {\n            is_first = true\n        } else {\n            if is_first {\n                result += String(char).uppercased()\n                is_first = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var upper = false\n    for char in word {\n        if char == \"_\" {\n            upper = true\n        } else {\n            if upper {\n                result += String(char).uppercased()\n                upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1666122828,
      "stdout": "",
      "stderr": "tmpemykmkmg/tmpemykmkmg.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b3bfb78dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3bfb484b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3bfb484988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b3bfb4837b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpemykmkmg                        0x000055b0381115a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b3bfb979460 __libc_start_main + 245\n6    tmpemykmkmg                        0x000055b0381111e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var is_upper = false\n    for char in word {\n        if char == \"_\" {\n            is_upper = true\n        } else {\n            if is_upper {\n                result.append(char.uppercased())\n                is_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmphz_s_uj3/tmphz_s_uj3.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2489b55c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b248984cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b248984c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b248984b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmphz_s_uj3                        0x0000565120a335a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b2489d41460 __libc_start_main + 245\n6    tmphz_s_uj3                        0x0000565120a331e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result.append(char.uppercased())\n                next_upper = false\n            } else {\n                result.append(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpob3_5vqv/tmpob3_5vqv.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b767f143c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b767ee3ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b767ee3a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b767ee397b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpob3_5vqv                        0x00005588d93cf5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b767f32f460 __libc_start_main + 245\n6    tmpob3_5vqv                        0x00005588d93cf1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to convert the given snake case string to camel case string.\nfunc snake_to_camel(word: String) -> String {\n    var result = \"\"\n    var next_upper = false\n    for char in word {\n        if char == \"_\" {\n            next_upper = true\n        } else {\n            if next_upper {\n                result += String(char).uppercased()\n                next_upper = false\n            } else {\n                result += String(char)\n            }\n        }\n    }\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(snake_to_camel(word: \"android_tv\") == \"AndroidTv\")\nassert(snake_to_camel(word: \"google_pixel\") == \"GooglePixel\")\nassert(snake_to_camel(word: \"apple_watch\") == \"AppleWatch\")",
      "timestamp": 1665517255,
      "stdout": "",
      "stderr": "tmpue2mm5u7/tmpue2mm5u7.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b630a5e0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b630a2d7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b630a2d7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b630a2d67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpue2mm5u7                        0x00005612e36bd5a7 <unavailable> + 5543\n5    libc.so.6                          0x00002b630a7cc460 __libc_start_main + 245\n6    tmpue2mm5u7                        0x00005612e36bd1e9 <unavailable> + 4585\n",
      "exit_code": -4,
      "status": "Exception"
    }
  ]
}