{
  "name": "mbpp_572_two_unique_nums",
  "language": "swift",
  "prompt": "\n/// Write a swiftthon function to remove duplicate numbers from a given number of arrays.\nfunc two_unique_nums(nums: [Int]) -> [Int] {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_572_two_unique_nums.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(two_unique_nums(nums: [1, 2, 3, 2, 3, 4, 5]) == [1, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 2, 4, 5]) == [1, 3, 4, 5])\nassert(two_unique_nums(nums: [1, 2, 3, 4, 5]) == [1, 2, 3, 4, 5])",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums",
    "    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums",
    "    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums",
    "    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums",
    "    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums",
    "    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums",
    "    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums",
    "    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums",
    "    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums",
    "    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums",
    "    var result = [Int]()\n    var nums = nums\n    while nums.count > 0 {\n        let num = nums.removeFirst()\n        if !nums.contains(num) {\n            result.append(num)\n        }\n    }\n    return result",
    "    var nums = nums\n    var unique_nums: [Int] = []\n    while nums.count > 0 {\n        let num = nums.removeFirst()\n        if nums.contains(num) {\n            nums.remove(at: nums.index(of: num)!)\n        } else {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums",
    "    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums",
    "    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums",
    "    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums",
    "    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums",
    "    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums",
    "    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums",
    "    var unique_nums: [Int] = []\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums",
    "    var nums = nums\n    var unique_nums = [Int]()\n    for num in nums {\n        if !unique_nums.contains(num) {\n            unique_nums.append(num)\n        }\n    }\n    return unique_nums"
  ]
}