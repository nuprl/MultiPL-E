{
  "name": "mbpp_395_first_non_repeating_character",
  "language": "swift",
  "prompt": "\n/// Write a swiftthon function to find the first non-repeated character in a given string.\nfunc first_non_repeating_character(str1: String) -> String? {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_395_first_non_repeating_character.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(first_non_repeating_character(str1: \"abcabc\") == nil)\nassert(first_non_repeating_character(str1: \"abc\") == \"a\")\nassert(first_non_repeating_character(str1: \"ababc\") == \"c\")",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil",
    "    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil",
    "    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil",
    "    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil",
    "    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil",
    "    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil",
    "    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil",
    "    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil",
    "    var dict = [Character: Int]()\n    for char in str1 {\n        dict[char] = (dict[char] ?? 0) + 1\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil",
    "    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil",
    "    let str = str1.lowercased()\n    var dict = [Character: Int]()\n    for char in str {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil",
    "    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil",
    "    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil",
    "    var charCount = [Character: Int]()\n    for char in str1 {\n        if let count = charCount[char] {\n            charCount[char] = count + 1\n        } else {\n            charCount[char] = 1\n        }\n    }\n    for (char, count) in charCount {\n        if count == 1 {\n            return String(char)\n        }\n    }\n    return nil",
    "    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil",
    "    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil",
    "    var dict = [Character: Int]()\n    for character in str1 {\n        if let count = dict[character] {\n            dict[character] = count + 1\n        } else {\n            dict[character] = 1\n        }\n    }\n    for character in str1 {\n        if dict[character] == 1 {\n            return String(character)\n        }\n    }\n    return nil",
    "    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if dict[char] == 1 {\n            return String(char)\n        }\n    }\n    return nil",
    "    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil",
    "    var dict = [Character: Int]()\n    for char in str1 {\n        if let count = dict[char] {\n            dict[char] = count + 1\n        } else {\n            dict[char] = 1\n        }\n    }\n    for char in str1 {\n        if let count = dict[char], count == 1 {\n            return String(char)\n        }\n    }\n    return nil"
  ]
}