{
  "name": "mbpp_265_list_split",
  "language": "swift",
  "prompt": "\n/// Write a function that takes in an array and an integer n and splits an array for every nth element, returning an array of the resulting arrays.\nfunc list_split(S: AnyHashable, step: Int) -> AnyHashable {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_265_list_split.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(list_split(S: [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"n\"], step: 3) == [[\"a\", \"d\", \"g\", \"j\", \"m\"], [\"b\", \"e\", \"h\", \"k\", \"n\"], [\"c\", \"f\", \"i\", \"l\"]])\nassert(list_split(S: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], step: 3) == [[1, 4, 7, 10, 13], [2, 5, 8, 11, 14], [3, 6, 9, 12]])\nassert(list_split(S: [\"python\", \"java\", \"C\", \"C++\", \"DBMS\", \"SQL\"], step: 2) == [[\"python\", \"C\", \"DBMS\"], [\"java\", \"C++\", \"SQL\"]])",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var result = [AnyHashable]()\n    var i = 0\n    var j = 0\n    var temp = [AnyHashable]()\n    if let S = S as? [AnyHashable] {\n        while i < S.count {\n            temp.append(S[i])\n            j += 1\n            if j == step {\n                result.append(temp)\n                temp = [AnyHashable]()\n                j = 0\n            }\n            i += 1\n        }\n        if temp.count > 0 {\n            result.append(temp)\n        }\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var temp = [AnyHashable]()\n    var i = 0\n    for item in S {\n        if i < step {\n            temp.append(item)\n            i += 1\n        } else {\n            result.append(temp)\n            temp = [AnyHashable]()\n            temp.append(item)\n            i = 1\n        }\n    }\n    if temp.count > 0 {\n        result.append(temp)\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var temp = [AnyHashable]()\n    var count = 0\n    for i in S {\n        count += 1\n        temp.append(i)\n        if count == step {\n            result.append(temp)\n            temp = [AnyHashable]()\n            count = 0\n        }\n    }\n    if temp.count > 0 {\n        result.append(temp)\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var i = 0\n    var j = 0\n    var temp = [AnyHashable]()\n    if let s = S as? [AnyHashable] {\n        for _ in s {\n            if i < step {\n                temp.append(s[j])\n                i += 1\n                j += 1\n            } else {\n                result.append(temp)\n                temp = [AnyHashable]()\n                i = 0\n            }\n        }\n        if temp.count > 0 {\n            result.append(temp)\n        }\n    }\n    return result",
    "    var result: AnyHashable = []\n    var i: Int = 0\n    for item in S {\n        if i % step == 0 {\n            result.append([])\n        }\n        result[result.count - 1].append(item)\n        i += 1\n    }\n    return result",
    "    var result: AnyHashable = []\n    var temp: AnyHashable = []\n    var i = 0\n    for item in S {\n        if i == step {\n            result.append(temp)\n            temp = []\n            i = 0\n        }\n        temp.append(item)\n        i += 1\n    }\n    result.append(temp)\n    return result",
    "    let list = S as! [AnyHashable]\n    var result = [AnyHashable]()\n    var i = 0\n    while i < list.count {\n        result.append(Array(list[i..<min(i + step, list.count)]))\n        i += step\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var i = 0\n    var j = 0\n    var k = 0\n    var l = 0\n    var m = 0\n    var n = 0\n    var o = 0\n    var p = 0\n    var q = 0\n    var r = 0\n    var s = 0\n    var t = 0\n    var u = 0\n    var v = 0\n    var w = 0\n    var x = 0\n    var y = 0\n    var z = 0\n    var aa = 0\n    var ab = 0\n    var ac = 0\n    var ad = 0\n    var ae = 0\n    var af = 0\n    var ag = 0\n    var ah = 0\n    var ai = 0\n    var aj = 0\n    var ak = 0\n    var al = 0\n    var am = 0\n    var an = 0\n    var ao = 0\n    var ap = 0\n    var aq = 0\n    var ar = 0\n    var as = 0\n    var at = 0\n    var au = 0\n    var av = 0\n    var aw = 0\n    var ax = 0\n    var ay = 0\n    var az = 0\n    var ba = 0\n    var bb = 0\n    var bc = 0\n    var bd = 0\n    var be = 0\n    var bf = 0\n    var bg = 0\n    var bh = 0\n    var bi = 0\n    var bj = 0\n    var bk = 0\n    var bl = 0\n    var bm = 0\n    var bn = 0\n    var bo = 0\n    var bp = 0\n    var bq = 0\n    var br = 0\n    var bs = 0\n    var bt = 0\n    var bu = 0\n    var bv = 0\n    var bw = 0\n    var bx = 0\n    var by = 0\n    var bz = 0\n    var ca = 0\n    var cb = 0\n    var cc = 0\n    var cd = 0\n    var ce = 0\n    var cf = 0\n    var cg = 0\n    var ch = 0\n    var ci = 0\n",
    "    var result: AnyHashable = []\n    var temp: AnyHashable = []\n    var i = 0\n    for item in S {\n        i += 1\n        temp.append(item)\n        if i % step == 0 {\n            result.append(temp)\n            temp = []\n        }\n    }\n    if temp.count > 0 {\n        result.append(temp)\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var i = 0\n    var j = 0\n    var temp = [AnyHashable]()\n    if let S = S as? [AnyHashable] {\n        for item in S {\n            if i < step {\n                temp.append(item)\n                i += 1\n            } else {\n                result.append(temp)\n                temp = [AnyHashable]()\n                temp.append(item)\n                i = 1\n                j += 1\n            }\n        }\n        result.append(temp)\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var temp = [AnyHashable]()\n    var count = 0\n    for i in S {\n        if count == step {\n            result.append(temp)\n            temp = [AnyHashable]()\n            count = 0\n        }\n        temp.append(i)\n        count += 1\n    }\n    result.append(temp)\n    return result",
    "    var result: AnyHashable = []\n    var i = 0\n    for item in S {\n        if i % step == 0 {\n            result.append([item])\n        } else {\n            result[result.count - 1].append(item)\n        }\n        i += 1\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var temp = [AnyHashable]()\n    var count = 0\n    for i in S {\n        if count == step {\n            result.append(temp)\n            temp = [AnyHashable]()\n            count = 0\n        }\n        temp.append(i)\n        count += 1\n    }\n    result.append(temp)\n    return result",
    "    var result: AnyHashable = []\n    var i = 0\n    for item in S {\n        if i % step == 0 {\n            result.append([])\n        }\n        result[result.count - 1].append(item)\n        i += 1\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var temp = [AnyHashable]()\n    let s = S as! [AnyHashable]\n    for i in 0..<s.count {\n        temp.append(s[i])\n        if (i + 1) % step == 0 {\n            result.append(temp)\n            temp = [AnyHashable]()\n        }\n    }\n    if temp.count > 0 {\n        result.append(temp)\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var temp = [AnyHashable]()\n    var i = 0\n    for item in S {\n        if i == step {\n            result.append(temp)\n            temp = [AnyHashable]()\n            i = 0\n        }\n        temp.append(item)\n        i += 1\n    }\n    if temp.count > 0 {\n        result.append(temp)\n    }\n    return result",
    "    let array = S as! [AnyHashable]\n    var result = [[AnyHashable]]()\n    var i = 0\n    while i < array.count {\n        var j = i\n        var temp = [AnyHashable]()\n        while j < array.count && j < i + step {\n            temp.append(array[j])\n            j += 1\n        }\n        result.append(temp)\n        i += step\n    }\n    return result",
    "    var result = [AnyHashable]()\n    var i = 0\n    var temp = [AnyHashable]()\n    for item in S {\n        if i < step {\n            temp.append(item)\n            i += 1\n        } else {\n            result.append(temp)\n            temp = [AnyHashable]()\n            temp.append(item)\n            i = 1\n        }\n    }\n    result.append(temp)\n    return result",
    "    var result = [AnyHashable]()\n    var temp = [AnyHashable]()\n    var i = 0\n    for item in S {\n        if i < step {\n            temp.append(item)\n            i += 1\n        } else {\n            result.append(temp)\n            temp = [AnyHashable]()\n            temp.append(item)\n            i = 1\n        }\n    }\n    result.append(temp)\n    return result",
    "    var result = [AnyHashable]()\n    if let s = S as? [AnyHashable] {\n        var i = 0\n        while i < s.count {\n            result.append(Array(s[i..<min(i + step, s.count)]))\n            i += step\n        }\n    } else if let s = S as? String {\n        var i = 0\n        while i < s.count {\n            result.append(String(s[s.index(s.startIndex, offsetBy: i)..<s.index(s.startIndex, offsetBy: min(i + step, s.count))]))\n            i += step\n        }\n    }\n    return result"
  ]
}