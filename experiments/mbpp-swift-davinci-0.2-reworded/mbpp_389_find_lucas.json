{
  "name": "mbpp_389_find_lucas",
  "language": "swift",
  "prompt": "\n/// Write a function to find the n'th lucas number.\nfunc find_lucas(n: Int) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_389_find_lucas.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find_lucas(n: 9) == 76)\nassert(find_lucas(n: 4) == 7)\nassert(find_lucas(n: 3) == 4)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    if n == 0 {\n        return 2\n    } else if n == 1 {\n        return 1\n    } else {\n        return find_lucas(n: n - 1) + find_lucas(n: n - 2)\n    }",
    "    if n == 0 {\n        return 2\n    } else if n == 1 {\n        return 1\n    } else {\n        return find_lucas(n: n - 1) + find_lucas(n: n - 2)\n    }",
    "    if n == 0 {\n        return 2\n    } else if n == 1 {\n        return 1\n    } else {\n        return find_lucas(n: n - 1) + find_lucas(n: n - 2)\n    }",
    "    if n == 0 {\n        return 2\n    } else if n == 1 {\n        return 1\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2)\n    }",
    "    if n == 0 {\n        return 2\n    } else if n == 1 {\n        return 1\n    } else {\n        return find_lucas(n: n - 1) + find_lucas(n: n - 2)\n    }",
    "    if n == 0 {\n        return 2\n    } else if n == 1 {\n        return 1\n    } else {\n        return find_lucas(n: n - 1) + find_lucas(n: n - 2)\n    }",
    "    if n == 0 {\n        return 2\n    } else if n == 1 {\n        return 1\n    } else {\n        return find_lucas(n: n - 1) + find_lucas(n: n - 2)\n    }",
    "    if n == 0 {\n        return 2\n    } else if n == 1 {\n        return 1\n    } else {\n        return find_lucas(n: n - 1) + find_lucas(n: n - 2)\n    }",
    "    if n == 0 {\n        return 2\n    } else if n == 1 {\n        return 1\n    } else {\n        return find_lucas(n: n - 1) + find_lucas(n: n - 2)\n    }",
    "    if n == 0 {\n        return 2\n    } else if n == 1 {\n        return 1\n    } else {\n        return find_lucas(n: n - 1) + find_lucas(n: n - 2)\n    }",
    "    var lucas_numbers = [2, 1]\n    if n == 1 {\n        return lucas_numbers[0]\n    } else if n == 2 {\n        return lucas_numbers[1]\n    } else {\n        for _ in 3...n {\n            let next_number = lucas_numbers[0] + lucas_numbers[1]\n            lucas_numbers[0] = lucas_numbers[1]\n            lucas_numbers[1] = next_number\n        }\n        return lucas_numbers[1]\n    }",
    "    if n == 0 {\n        return 2\n    } else if n == 1 {\n        return 1\n    } else {\n        return find_lucas(n: n - 1) + find_lucas(n: n - 2)\n    }",
    "    if n == 0 {\n        return 2\n    } else if n == 1 {\n        return 1\n    } else {\n        return find_lucas(n: n - 1) + find_lucas(n: n - 2)\n    }",
    "    if n == 1 {\n        return 2\n    } else if n == 2 {\n        return 1\n    } else {\n        return find_lucas(n: n - 1) + find_lucas(n: n - 2)\n    }",
    "    if n == 0 {\n        return 2\n    } else if n == 1 {\n        return 1\n    } else {\n        return find_lucas(n - 1) + find_lucas(n - 2)\n    }",
    "    if n == 0 {\n        return 2\n    } else if n == 1 {\n        return 1\n    } else {\n        return find_lucas(n: n - 1) + find_lucas(n: n - 2)\n    }",
    "    if n == 0 {\n        return 2\n    } else if n == 1 {\n        return 1\n    } else {\n        return find_lucas(n: n - 1) + find_lucas(n: n - 2)\n    }",
    "    if n == 0 {\n        return 2\n    } else if n == 1 {\n        return 1\n    } else {\n        return find_lucas(n: n - 1) + find_lucas(n: n - 2)\n    }",
    "    if n == 0 {\n        return 2\n    } else if n == 1 {\n        return 1\n    } else {\n        return find_lucas(n: n - 1) + find_lucas(n: n - 2)\n    }",
    "    if n == 0 {\n        return 2\n    } else if n == 1 {\n        return 1\n    } else {\n        return find_lucas(n: n - 1) + find_lucas(n: n - 2)\n    }"
  ]
}