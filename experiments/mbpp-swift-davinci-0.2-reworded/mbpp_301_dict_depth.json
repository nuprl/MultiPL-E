{
  "name": "mbpp_301_dict_depth",
  "language": "swift",
  "prompt": "\n/// Write a function to find the depth of a dictionary.\nfunc dict_depth(d: AnyHashable) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_301_dict_depth.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(dict_depth(d: [\"a\" : 1, \"b\" : [\"c\" : [\"d\" : [:] as [AnyHashable : AnyHashable]]]]) == 4)\nassert(dict_depth(d: [\"a\" : 1, \"b\" : [\"c\" : \"python\"]]) == 2)\nassert(dict_depth(d: [1 : \"Sun\", 2 : [3 : [4 : \"Mon\"]]]) == 3)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    if let d = d as? [AnyHashable: AnyHashable] {\n        return 1 + d.values.map(dict_depth).max()!\n    } else {\n        return 0\n    }",
    "    var depth = 0\n    if let d = d as? [AnyHashable: AnyHashable] {\n        for (_, v) in d {\n            depth = max(depth, dict_depth(d: v))\n        }\n        return depth + 1\n    }\n    return 0",
    "    var depth = 0\n    if let d = d as? [AnyHashable: AnyHashable] {\n        for (_, v) in d {\n            depth = max(depth, dict_depth(d: v))\n        }\n        depth += 1\n    }\n    return depth",
    "    var depth = 0\n    var current = d\n    while let dict = current as? [AnyHashable: AnyHashable] {\n        depth += 1\n        current = dict\n    }\n    return depth",
    "    var depth = 0\n    var current = d\n    while let dict = current as? [AnyHashable: AnyHashable] {\n        depth += 1\n        current = dict\n    }\n    return depth",
    "    var depth = 0\n    if let d = d as? [AnyHashable: AnyHashable] {\n        for (_, v) in d {\n            depth = max(depth, dict_depth(d: v))\n        }\n        depth += 1\n    }\n    return depth",
    "    var max_depth = 0\n    var depth = 0\n    var stack = [AnyHashable]()\n    stack.append(d)\n    while !stack.isEmpty {\n        let item = stack.removeLast()\n        if let dict = item as? [AnyHashable: AnyHashable] {\n            depth += 1\n            max_depth = max(max_depth, depth)\n            for (_, value) in dict {\n                stack.append(value)\n            }\n        } else {\n            depth -= 1\n        }\n    }\n    return max_depth",
    "    var depth = 0\n    if let dict = d as? [AnyHashable: AnyHashable] {\n        for (_, v) in dict {\n            depth = max(depth, dict_depth(d: v))\n        }\n        depth += 1\n    }\n    return depth",
    "    return 0",
    "    if let d = d as? [AnyHashable: AnyHashable] {\n        return 1 + d.reduce(0) { max($0, dict_depth(d: $1.value)) }\n    }\n    return 0",
    "    var depth = 0\n    if let d = d as? [AnyHashable: AnyHashable] {\n        for (_, v) in d {\n            depth = max(depth, dict_depth(d: v))\n        }\n        depth += 1\n    }\n    return depth",
    "    return 0",
    "    if let d = d as? [AnyHashable: AnyHashable] {\n        return 1 + d.map { dict_depth(d: $0.value) }.max()!\n    }\n    return 0",
    "    return 0",
    "    var depth = 0\n    if let d = d as? [AnyHashable: AnyHashable] {\n        for (_, v) in d {\n            depth = max(depth, dict_depth(d: v))\n        }\n        depth += 1\n    }\n    return depth",
    "    var depth = 0\n    var current = d\n    while let dict = current as? [AnyHashable: AnyHashable] {\n        depth += 1\n        if let first = dict.first {\n            current = first.value\n        } else {\n            break\n        }\n    }\n    return depth",
    "    if let d = d as? [AnyHashable: AnyHashable] {\n        return 1 + d.map { dict_depth(d: $0.value) }.max()!\n    }\n    return 0",
    "    var depth = 0\n    if let d = d as? [AnyHashable: AnyHashable] {\n        for (_, v) in d {\n            depth = max(depth, dict_depth(d: v))\n        }\n        depth += 1\n    }\n    return depth",
    "    if let d = d as? [AnyHashable: AnyHashable] {\n        var max = 0\n        for (_, v) in d {\n            max = max(max, dict_depth(d: v))\n        }\n        return max + 1\n    }\n    return 0",
    "    if let dict = d as? [AnyHashable: AnyHashable] {\n        return 1 + dict.values.map(dict_depth).max()!\n    }\n    return 0"
  ]
}