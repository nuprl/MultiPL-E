{
  "name": "mbpp_595_min_Swaps",
  "language": "swift",
  "prompt": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_595_min_Swaps.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    while str1 != str2 {\n        let index = str1.index(str1.startIndex, offsetBy: 1)\n        str1 = String(str1[index...])\n        let index2 = str2.index(str2.startIndex, offsetBy: 1)\n        str2 = String(str2[index2...])\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpc4z3th0u.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpc4z3th0u.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpc4z3th0u.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp4jc3bi_9.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp4jc3bi_9.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp4jc3bi_9.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp4jc3bi_9.swift:8:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp4jc3bi_9.swift:8:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp4jc3bi_9.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp4jc3bi_9.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    var temp = \"\"\n    if str1.count == str2.count {\n        for i in 0..<str1.count {\n            if str1[i] != str2[i] {\n                count += 1\n            }\n        }\n        return count / 2\n    } else {\n        if str1.count > str2.count {\n            temp = str1\n            str1 = str2\n            str2 = temp\n        }\n        for i in 0..<str1.count {\n            if str1[i] != str2[i] {\n                count += 1\n            }\n        }\n        return count / 2\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpeukhqysf.swift:43:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpeukhqysf.swift:44:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpeukhqysf.swift:45:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpeukhqysf.swift:10:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str1[i] != str2[i] {\n               ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpeukhqysf.swift:10:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str1[i] != str2[i] {\n                          ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpeukhqysf.swift:22:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str1[i] != str2[i] {\n               ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpeukhqysf.swift:22:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str1[i] != str2[i] {\n                          ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i:",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    var str1_arr = Array(str1)\n    var str2_arr = Array(str2)\n    var i = 0\n    while i < str1.count {\n        if str1_arr[i] != str2_arr[i] {\n            count += 1\n            if str1_arr[i] == \"1\" {\n                str1_arr[i] = \"0\"\n            } else {\n                str1_arr[i] = \"1\"\n            }\n            str1 = String(str1_arr)\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpnttwym9x.swift:38:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpnttwym9x.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpnttwym9x.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpnttwym9x.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n/tmp/tmpnttwym9x.swift:8:9: warning: variable 'str2_arr' was never mutated; consider changing to 'let' constant\n    var str2_arr = Array(str2)\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    var str1_arr = [Character]()\n    var str2_arr = [Character]()\n    for i in str1 {\n        str1_arr.append(i)\n    }\n    for i in str2 {\n        str2_arr.append(i)\n    }\n    for i in 0..<str1_arr.count {\n        if str1_arr[i] != str2_arr[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpansll_ol.swift:36:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpansll_ol.swift:37:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpansll_ol.swift:38:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpansll_ol.swift:4:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpansll_ol.swift:5:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp4jc3bi_9.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp4jc3bi_9.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp4jc3bi_9.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp4jc3bi_9.swift:8:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp4jc3bi_9.swift:8:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp4jc3bi_9.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp4jc3bi_9.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpvo_mtj16.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpvo_mtj16.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:4:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpvo_mtj16.swift:5:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpy14l2xvn.swift:26:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpy14l2xvn.swift:27:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpy14l2xvn.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpy14l2xvn.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpy14l2xvn.swift:6:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count == str2.count {\n        for i in 0..<str1.count {\n            if str1[i] != str2[i] {\n                count += 1\n            }\n        }\n        return count/2\n    }\n    return \"Not Possible\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpiinva5nr.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpiinva5nr.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiinva5nr.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpiinva5nr.swift:9:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str1[i] != str2[i] {\n               ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiinva5nr.swift:9:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str1[i] != str2[i] {\n                          ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpiinva5nr.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpiinva5nr.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    let str1 = str1.map { String($0) }\n    let str2 = str2.map { String($0) }\n    var count = 0\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpvjdmdet5.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpvjdmdet5.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvjdmdet5.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp4jc3bi_9.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp4jc3bi_9.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp4jc3bi_9.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp4jc3bi_9.swift:8:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp4jc3bi_9.swift:8:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp4jc3bi_9.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp4jc3bi_9.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpvo_mtj16.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpvo_mtj16.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:4:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpvo_mtj16.swift:5:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    var i = 0\n    while i < str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n            if str1[i] == \"0\" {\n                str1[i] = \"1\"\n            } else {\n                str1[i] = \"0\"\n            }\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp4x_xkldu.swift:35:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp4x_xkldu.swift:36:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp4x_xkldu.swift:37:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp4x_xkldu.swift:9:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp4x_xkldu.swift:9:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp4x_xkldu.swift:11:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str1[i] == \"0\" {\n               ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp4x_xkldu.swift:12:21: error: cannot assign through subscript: subscript is get-only\n                str1[i] = \"1\"\n                ~~~~^~~\n/tmp/tmp4x_xkldu.swift:14:21: error: cannot assign through subscript: subscript is get-only\n                str1[i] = \"0\"\n                ~~~~^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    let str1 = str1.characters.map { String($0) }\n    let str2 = str2.characters.map { String($0) }\n    var count = 0\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpu9h5pywr.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpu9h5pywr.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpu9h5pywr.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpu9h5pywr.swift:4:21: error: 'characters' is unavailable: Please use String directly\n    let str1 = str1.characters.map { String($0) }\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n/tmp/tmpu9h5pywr.swift:5:21: error: 'characters' is unavailable: Please use String directly\n    let str2 = str2.characters.map { String($0) }\n                    ^~~~~~~~~~\nSwift.String:5:16: note: 'characters' was obsoleted in Swift 5.0\n    public var characters: String { get set }\n               ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    let str1 = Array(str1)\n    let str2 = Array(str2)\n    var count = 0\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpuredkii2.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpuredkii2.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpuredkii2.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var arr1 = Array(str1)\n    var arr2 = Array(str2)\n    for i in 0..<arr1.count {\n        if arr1[i] != arr2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp3ls2senh.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp3ls2senh.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp3ls2senh.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp3ls2senh.swift:5:9: warning: variable 'arr1' was never mutated; consider changing to 'let' constant\n    var arr1 = Array(str1)\n    ~~~ ^\n    let\n/tmp/tmp3ls2senh.swift:6:9: warning: variable 'arr2' was never mutated; consider changing to 'let' constant\n    var arr2 = Array(str2)\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122510,
      "stdout": "",
      "stderr": "/tmp/tmpgn4bu2uw.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpgn4bu2uw.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpgn4bu2uw.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpgn4bu2uw.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpgn4bu2uw.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpgn4bu2uw.swift:4:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpgn4bu2uw.swift:5:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    let str1 = Array(str1)\n    let str2 = Array(str2)\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122510,
      "stdout": "",
      "stderr": "/tmp/tmp75y7t0pq.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp75y7t0pq.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp75y7t0pq.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpy14l2xvn.swift:26:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpy14l2xvn.swift:27:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpy14l2xvn.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpy14l2xvn.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpy14l2xvn.swift:6:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    var str1_arr = Array(str1)\n    var str2_arr = Array(str2)\n    for i in 0..<str1_arr.count {\n        if str1_arr[i] != str2_arr[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122510,
      "stdout": "",
      "stderr": "/tmp/tmpo_ioq3uq.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpo_ioq3uq.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpo_ioq3uq.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpo_ioq3uq.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpo_ioq3uq.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n/tmp/tmpo_ioq3uq.swift:7:9: warning: variable 'str1_arr' was never mutated; consider changing to 'let' constant\n    var str1_arr = Array(str1)\n    ~~~ ^\n    let\n/tmp/tmpo_ioq3uq.swift:8:9: warning: variable 'str2_arr' was never mutated; consider changing to 'let' constant\n    var str2_arr = Array(str2)\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return \"Invalid Input\"\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122510,
      "stdout": "",
      "stderr": "/tmp/tmp2xt2su7d.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp2xt2su7d.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp2xt2su7d.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp2xt2su7d.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp2xt2su7d.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp2xt2su7d.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp2xt2su7d.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    var i = 0\n    while i < str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n            if str1[i] == \"1\" {\n                str1[i] = \"0\"\n            } else {\n                str1[i] = \"1\"\n            }\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122510,
      "stdout": "",
      "stderr": "/tmp/tmp54yzgg76.swift:35:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp54yzgg76.swift:36:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp54yzgg76.swift:37:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp54yzgg76.swift:9:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp54yzgg76.swift:9:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp54yzgg76.swift:11:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str1[i] == \"1\" {\n               ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp54yzgg76.swift:12:21: error: cannot assign through subscript: subscript is get-only\n                str1[i] = \"0\"\n                ~~~~^~~\n/tmp/tmp54yzgg76.swift:14:21: error: cannot assign through subscript: subscript is get-only\n                str1[i] = \"1\"\n                ~~~~^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpvo_mtj16.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpvo_mtj16.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:4:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpvo_mtj16.swift:5:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    while str1 != str2 {\n        if str1.count == str2.count {\n            let index = str1.index(str1.startIndex, offsetBy: 1)\n            str1 = String(str1[index...])\n            str2 = String(str2[index...])\n            count += 1\n        } else if str1.count > str2.count {\n            let index = str1.index(str1.startIndex, offsetBy: 1)\n            str1 = String(str1[index...])\n            count += 1\n        } else {\n            let index = str2.index(str2.startIndex, offsetBy: 1)\n            str2 = String(str2[index...])\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122510,
      "stdout": "",
      "stderr": "/tmp/tmpn8ohie61.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpn8ohie61.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpn8ohie61.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    if str1.count != str2.count {\n        return \"Invalid Input\"\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122510,
      "stdout": "",
      "stderr": "/tmp/tmp943vi4ek.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp943vi4ek.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp943vi4ek.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp943vi4ek.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp943vi4ek.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp943vi4ek.swift:4:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp943vi4ek.swift:5:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return \"Invalid input\"\n    }\n    for i in 0..<str1.count {\n        let index1 = str1.index(str1.startIndex, offsetBy: i)\n        let index2 = str2.index(str2.startIndex, offsetBy: i)\n        if str1[index1] != str2[index2] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122510,
      "stdout": "",
      "stderr": "/tmp/tmpzeqwxxks.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpzeqwxxks.swift:34:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpzeqwxxks.swift:35:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpzeqwxxks.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpzeqwxxks.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpvo_mtj16.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpvo_mtj16.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:4:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpvo_mtj16.swift:5:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122510,
      "stdout": "",
      "stderr": "/tmp/tmpwoyarecw.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpwoyarecw.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpwoyarecw.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpwoyarecw.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpwoyarecw.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpwoyarecw.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpwoyarecw.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    let str1 = Array(str1)\n    let str2 = Array(str2)\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122510,
      "stdout": "",
      "stderr": "/tmp/tmp9rib4dg9.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9rib4dg9.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9rib4dg9.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122510,
      "stdout": "",
      "stderr": "/tmp/tmpwoyarecw.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpwoyarecw.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpwoyarecw.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpwoyarecw.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpwoyarecw.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpwoyarecw.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpwoyarecw.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    if str1.count != str2.count {\n        return \"Invalid Input\"\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122510,
      "stdout": "",
      "stderr": "/tmp/tmp943vi4ek.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp943vi4ek.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp943vi4ek.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp943vi4ek.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp943vi4ek.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp943vi4ek.swift:4:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp943vi4ek.swift:5:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpvo_mtj16.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpvo_mtj16.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:4:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpvo_mtj16.swift:5:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    var count = 0\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122510,
      "stdout": "",
      "stderr": "/tmp/tmpche134k4.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpche134k4.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpche134k4.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpche134k4.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpche134k4.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpche134k4.swift:4:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpche134k4.swift:5:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp4jc3bi_9.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp4jc3bi_9.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp4jc3bi_9.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp4jc3bi_9.swift:8:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp4jc3bi_9.swift:8:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp4jc3bi_9.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp4jc3bi_9.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    while str1 != str2 {\n        let index = str1.index(str1.startIndex, offsetBy: 1)\n        let index2 = str1.index(str1.endIndex, offsetBy: -1)\n        str1.replaceSubrange(index...index2, with: str1[index2])\n        count += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122510,
      "stdout": "",
      "stderr": "/tmp/tmp3sgipvz7.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp3sgipvz7.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp3sgipvz7.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp3sgipvz7.swift:10:56: error: subscript 'subscript(_:)' requires that 'String.Index' conform to 'RangeExpression'\n        str1.replaceSubrange(index...index2, with: str1[index2])\n                                                       ^\nSwift.Collection:2:23: note: where 'R' = 'String.Index'\n    @inlinable public subscript<R>(r: R) -> Self.SubSequence where R : RangeExpression, Self.Index == R.Bound { get }\n                      ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return \"Invalid input\"\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122510,
      "stdout": "",
      "stderr": "/tmp/tmpqrrl_jzf.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpqrrl_jzf.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpqrrl_jzf.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpqrrl_jzf.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpqrrl_jzf.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpqrrl_jzf.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpqrrl_jzf.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpvo_mtj16.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpvo_mtj16.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:4:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpvo_mtj16.swift:5:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    while str1 != str2 {\n        let index = str1.index(str1.startIndex, offsetBy: 0)\n        if str1[index] == str2[index] {\n            str1.remove(at: index)\n            str2.remove(at: index)\n        } else {\n            str1.remove(at: index)\n            str2.remove(at: index)\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122510,
      "stdout": "",
      "stderr": "/tmp/tmpyelt02l7.swift:37:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpyelt02l7.swift:38:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpyelt02l7.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    let str1 = str1.map { $0 == \"1\" }\n    let str2 = str2.map { $0 == \"1\" }\n    var count = 0\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122510,
      "stdout": "",
      "stderr": "/tmp/tmpwl0svpgq.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpwl0svpgq.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpwl0svpgq.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    let str1 = Array(str1)\n    let str2 = Array(str2)\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122510,
      "stdout": "",
      "stderr": "/tmp/tmp9rib4dg9.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9rib4dg9.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9rib4dg9.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpvo_mtj16.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpvo_mtj16.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:4:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpvo_mtj16.swift:5:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp4jc3bi_9.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp4jc3bi_9.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp4jc3bi_9.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp4jc3bi_9.swift:8:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp4jc3bi_9.swift:8:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp4jc3bi_9.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp4jc3bi_9.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpvo_mtj16.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpvo_mtj16.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:4:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpvo_mtj16.swift:5:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count == str2.count {\n        for i in 0..<str1.count {\n            if str1[i] != str2[i] {\n                count += 1\n            }\n        }\n        return count / 2\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122510,
      "stdout": "",
      "stderr": "/tmp/tmpt_2hoy8k.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpt_2hoy8k.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpt_2hoy8k.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpt_2hoy8k.swift:9:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str1[i] != str2[i] {\n               ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpt_2hoy8k.swift:9:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str1[i] != str2[i] {\n                          ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpt_2hoy8k.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpt_2hoy8k.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    if str1.count == str2.count {\n        for i in 0..<str1.count {\n            if str1[i] != str2[i] {\n                count += 1\n            }\n        }\n        return count/2\n    }\n    return \"Not Possible\"\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122510,
      "stdout": "",
      "stderr": "/tmp/tmpzl3wrmh1.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpzl3wrmh1.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpzl3wrmh1.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpzl3wrmh1.swift:7:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str1[i] != str2[i] {\n               ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpzl3wrmh1.swift:7:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str1[i] != str2[i] {\n                          ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    let str1 = Array(str1)\n    let str2 = Array(str2)\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122510,
      "stdout": "",
      "stderr": "/tmp/tmp9rib4dg9.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9rib4dg9.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9rib4dg9.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    var i = 0\n    while i < str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n            if str1[i] == \"1\" {\n                str1 = str1.replacingOccurrences(of: \"1\", with: \"0\")\n                str2 = str2.replacingOccurrences(of: \"0\", with: \"1\")\n            } else {\n                str1 = str1.replacingOccurrences(of: \"0\", with: \"1\")\n                str2 = str2.replacingOccurrences(of: \"1\", with: \"0\")\n            }\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122510,
      "stdout": "",
      "stderr": "/tmp/tmp4m0m_yf8.swift:37:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp4m0m_yf8.swift:38:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp4m0m_yf8.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp4m0m_yf8.swift:9:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp4m0m_yf8.swift:9:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp4m0m_yf8.swift:11:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str1[i] == \"1\" {\n               ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp4m0m_yf8.swift:12:29: error: value of type 'String' has no member 'replacingOccurrences'\n                str1 = str1.replacingOccurrences(of: \"1\", with: \"0\")\n                       ~~~~ ^~~~~~~~~~~~~~~~~~~~\n/tmp/tmp4m0m_yf8.swift:13:29: error: value of type 'String' has no member 'replacingOccurrences'\n                str2 =",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpvo_mtj16.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpvo_mtj16.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:4:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpvo_mtj16.swift:5:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    let str1 = str1.map { String($0) }\n    let str2 = str2.map { String($0) }\n    var count = 0\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpvjdmdet5.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpvjdmdet5.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvjdmdet5.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpvo_mtj16.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpvo_mtj16.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:4:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpvo_mtj16.swift:5:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    let str1 = str1.map { $0 == \"1\" }\n    let str2 = str2.map { $0 == \"1\" }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122510,
      "stdout": "",
      "stderr": "/tmp/tmp28c13s6z.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp28c13s6z.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp28c13s6z.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpvo_mtj16.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpvo_mtj16.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:4:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpvo_mtj16.swift:5:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    var i = 0\n    while i < str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122510,
      "stdout": "",
      "stderr": "/tmp/tmp2rvqaz7s.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp2rvqaz7s.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp2rvqaz7s.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp2rvqaz7s.swift:9:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp2rvqaz7s.swift:9:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp2rvqaz7s.swift:4:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp2rvqaz7s.swift:5:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    let str1 = str1.map { $0 == \"0\" ? 0 : 1 }\n    let str2 = str2.map { $0 == \"0\" ? 0 : 1 }\n    var count = 0\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122510,
      "stdout": "",
      "stderr": "/tmp/tmpwp_jencz.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpwp_jencz.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpwp_jencz.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp4jc3bi_9.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp4jc3bi_9.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp4jc3bi_9.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp4jc3bi_9.swift:8:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp4jc3bi_9.swift:8:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp4jc3bi_9.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp4jc3bi_9.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpy14l2xvn.swift:26:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpy14l2xvn.swift:27:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpy14l2xvn.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpy14l2xvn.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpy14l2xvn.swift:6:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    let str1 = Array(str1)\n    let str2 = Array(str2)\n    var count = 0\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpuredkii2.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpuredkii2.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpuredkii2.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpvo_mtj16.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpvo_mtj16.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:4:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpvo_mtj16.swift:5:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return \"Not Possible\"\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122510,
      "stdout": "",
      "stderr": "/tmp/tmpppy_a90y.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpppy_a90y.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpppy_a90y.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpppy_a90y.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpppy_a90y.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpppy_a90y.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpppy_a90y.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    if str1.count != str2.count {\n        return \"Invalid Input\"\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122510,
      "stdout": "",
      "stderr": "/tmp/tmp943vi4ek.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp943vi4ek.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp943vi4ek.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp943vi4ek.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp943vi4ek.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp943vi4ek.swift:4:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp943vi4ek.swift:5:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    var str1_arr = str1.compactMap { $0.wholeNumberValue }\n    var str2_arr = str2.compactMap { $0.wholeNumberValue }\n    for i in 0..<str1_arr.count {\n        if str1_arr[i] != str2_arr[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122510,
      "stdout": "",
      "stderr": "/tmp/tmplldp4qzy.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmplldp4qzy.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmplldp4qzy.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmplldp4qzy.swift:4:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmplldp4qzy.swift:5:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n/tmp/tmplldp4qzy.swift:7:9: warning: variable 'str1_arr' was never mutated; consider changing to 'let' constant\n    var str1_arr = str1.compactMap { $0.wholeNumberValue }\n    ~~~ ^\n    let\n/tmp/tmplldp4qzy.swift:8:9: warning: variable 'str2_arr' was never mutated; consider changing to 'let' constant\n    var str2_arr = str2.compactMap { $0.wholeNumberValue }\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    let n = str1.count\n    var count = 0\n    for i in 0..<n {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122511,
      "stdout": "",
      "stderr": "/tmp/tmpilhhuq_z.swift:27:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpilhhuq_z.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpilhhuq_z.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpilhhuq_z.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpilhhuq_z.swift:7:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpvo_mtj16.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpvo_mtj16.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:4:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpvo_mtj16.swift:5:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    let str1 = Array(str1)\n    let str2 = Array(str2)\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122510,
      "stdout": "",
      "stderr": "/tmp/tmp9rib4dg9.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9rib4dg9.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9rib4dg9.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp4jc3bi_9.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp4jc3bi_9.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp4jc3bi_9.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp4jc3bi_9.swift:8:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp4jc3bi_9.swift:8:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp4jc3bi_9.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp4jc3bi_9.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp4jc3bi_9.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp4jc3bi_9.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp4jc3bi_9.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp4jc3bi_9.swift:8:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp4jc3bi_9.swift:8:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp4jc3bi_9.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp4jc3bi_9.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp4jc3bi_9.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp4jc3bi_9.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp4jc3bi_9.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp4jc3bi_9.swift:8:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp4jc3bi_9.swift:8:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp4jc3bi_9.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp4jc3bi_9.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpvo_mtj16.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpvo_mtj16.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:4:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpvo_mtj16.swift:5:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    var i = 0\n    while i < str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n            if str1[i] == \"1\" {\n                str1[i] = \"0\"\n            } else {\n                str1[i] = \"1\"\n            }\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122510,
      "stdout": "",
      "stderr": "/tmp/tmp54yzgg76.swift:35:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp54yzgg76.swift:36:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp54yzgg76.swift:37:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp54yzgg76.swift:9:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp54yzgg76.swift:9:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp54yzgg76.swift:11:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str1[i] == \"1\" {\n               ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp54yzgg76.swift:12:21: error: cannot assign through subscript: subscript is get-only\n                str1[i] = \"0\"\n                ~~~~^~~\n/tmp/tmp54yzgg76.swift:14:21: error: cannot assign through subscript: subscript is get-only\n                str1[i] = \"1\"\n                ~~~~^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpvo_mtj16.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpvo_mtj16.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:4:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpvo_mtj16.swift:5:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    var i = 0\n    while i < str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n            if str1[i] == \"1\" {\n                str1[i] = \"0\"\n            } else {\n                str1[i] = \"1\"\n            }\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122510,
      "stdout": "",
      "stderr": "/tmp/tmp54yzgg76.swift:35:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp54yzgg76.swift:36:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp54yzgg76.swift:37:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp54yzgg76.swift:9:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp54yzgg76.swift:9:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp54yzgg76.swift:11:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str1[i] == \"1\" {\n               ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp54yzgg76.swift:12:21: error: cannot assign through subscript: subscript is get-only\n                str1[i] = \"0\"\n                ~~~~^~~\n/tmp/tmp54yzgg76.swift:14:21: error: cannot assign through subscript: subscript is get-only\n                str1[i] = \"1\"\n                ~~~~^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpy14l2xvn.swift:26:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpy14l2xvn.swift:27:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpy14l2xvn.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpy14l2xvn.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpy14l2xvn.swift:6:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return \"Not Possible\"\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122510,
      "stdout": "",
      "stderr": "/tmp/tmpppy_a90y.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpppy_a90y.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpppy_a90y.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpppy_a90y.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpppy_a90y.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpppy_a90y.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpppy_a90y.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    let str1 = Array(str1)\n    let str2 = Array(str2)\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122510,
      "stdout": "",
      "stderr": "/tmp/tmp9rib4dg9.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9rib4dg9.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9rib4dg9.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    let str1 = str1.map { $0 == \"1\" }\n    let str2 = str2.map { $0 == \"1\" }\n    var count = 0\n    for (i, j) in zip(str1, str2) {\n        if i != j {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122511,
      "stdout": "",
      "stderr": "/tmp/tmptdv6lpy8.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmptdv6lpy8.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmptdv6lpy8.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    if str1.count == str2.count {\n        for i in 0..<str1.count {\n            if str1[i] != str2[i] {\n                count += 1\n            }\n        }\n        return count / 2\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122511,
      "stdout": "",
      "stderr": "/tmp/tmpra9lq3ye.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpra9lq3ye.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpra9lq3ye.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpra9lq3ye.swift:9:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str1[i] != str2[i] {\n               ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpra9lq3ye.swift:9:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str1[i] != str2[i] {\n                          ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpra9lq3ye.swift:4:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpra9lq3ye.swift:5:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    let str1 = str1.map { String($0) }\n    let str2 = str2.map { String($0) }\n    var count = 0\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122511,
      "stdout": "",
      "stderr": "/tmp/tmp562x4cm0.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp562x4cm0.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp562x4cm0.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpy14l2xvn.swift:26:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpy14l2xvn.swift:27:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpy14l2xvn.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpy14l2xvn.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpy14l2xvn.swift:6:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    let str1 = str1.map { $0 == \"1\" }\n    let str2 = str2.map { $0 == \"1\" }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122510,
      "stdout": "",
      "stderr": "/tmp/tmp28c13s6z.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp28c13s6z.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp28c13s6z.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    for i in 0 ..< str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122511,
      "stdout": "",
      "stderr": "/tmp/tmpvu47eekl.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpvu47eekl.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvu47eekl.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvu47eekl.swift:8:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvu47eekl.swift:8:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvu47eekl.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpvu47eekl.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpvo_mtj16.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpvo_mtj16.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:4:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpvo_mtj16.swift:5:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpvo_mtj16.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpvo_mtj16.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:4:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpvo_mtj16.swift:5:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpvo_mtj16.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpvo_mtj16.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:4:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpvo_mtj16.swift:5:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122510,
      "stdout": "",
      "stderr": "/tmp/tmpwoyarecw.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpwoyarecw.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpwoyarecw.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpwoyarecw.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpwoyarecw.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpwoyarecw.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpwoyarecw.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    while str1 != str2 {\n        let index = str1.index(str1.startIndex, offsetBy: 0)\n        let index2 = str1.index(str1.startIndex, offsetBy: 1)\n        if str1[index] != str2[index] {\n            str1.replaceSubrange(index...index, with: String(str2[index]))\n            count += 1\n        }\n        if str1[index2] != str2[index2] {\n            str1.replaceSubrange(index2...index2, with: String(str2[index2]))\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122511,
      "stdout": "",
      "stderr": "/tmp/tmpgwtmgiw7.swift:35:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpgwtmgiw7.swift:36:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpgwtmgiw7.swift:37:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpgwtmgiw7.swift:5:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    let str1 = Array(str1)\n    let str2 = Array(str2)\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122510,
      "stdout": "",
      "stderr": "/tmp/tmp9rib4dg9.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9rib4dg9.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9rib4dg9.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    let str1 = str1.map { String($0) }\n    let str2 = str2.map { String($0) }\n    var count = 0\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpvjdmdet5.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpvjdmdet5.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvjdmdet5.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count == str2.count {\n        for i in 0..<str1.count {\n            if str1[i] != str2[i] {\n                count += 1\n            }\n        }\n        return count / 2\n    } else {\n        return \"Not Possible\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122511,
      "stdout": "",
      "stderr": "/tmp/tmpl0hms8ib.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpl0hms8ib.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpl0hms8ib.swift:34:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpl0hms8ib.swift:9:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str1[i] != str2[i] {\n               ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpl0hms8ib.swift:9:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str1[i] != str2[i] {\n                          ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpl0hms8ib.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpl0hms8ib.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    if str1.count == str2.count {\n        for i in 0..<str1.count {\n            if str1[i] != str2[i] {\n                count += 1\n            }\n        }\n        return count / 2\n    } else {\n        return -1\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122511,
      "stdout": "",
      "stderr": "/tmp/tmpx8jgh2lw.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpx8jgh2lw.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpx8jgh2lw.swift:34:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpx8jgh2lw.swift:9:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str1[i] != str2[i] {\n               ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpx8jgh2lw.swift:9:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str1[i] != str2[i] {\n                          ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpx8jgh2lw.swift:4:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpx8jgh2lw.swift:5:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    let str1 = str1.map { $0 }\n    let str2 = str2.map { $0 }\n    var count = 0\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122511,
      "stdout": "",
      "stderr": "/tmp/tmpqkdjg7w4.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpqkdjg7w4.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpqkdjg7w4.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    var i = 0\n    while i < str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n            if str1[i] == \"0\" {\n                str1[i] = \"1\"\n            } else {\n                str1[i] = \"0\"\n            }\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122511,
      "stdout": "",
      "stderr": "/tmp/tmpsob9tdnz.swift:35:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpsob9tdnz.swift:36:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpsob9tdnz.swift:37:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpsob9tdnz.swift:9:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpsob9tdnz.swift:9:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpsob9tdnz.swift:11:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str1[i] == \"0\" {\n               ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpsob9tdnz.swift:12:21: error: cannot assign through subscript: subscript is get-only\n                str1[i] = \"1\"\n                ~~~~^~~\n/tmp/tmpsob9tdnz.swift:14:21: error: cannot assign through subscript: subscript is get-only\n                str1[i] = \"0\"\n                ~~~~^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp4jc3bi_9.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp4jc3bi_9.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp4jc3bi_9.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp4jc3bi_9.swift:8:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp4jc3bi_9.swift:8:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp4jc3bi_9.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp4jc3bi_9.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    var i = 0\n    var j = 0\n    while i < str1.count && j < str2.count {\n        if str1[i] != str2[j] {\n            count += 1\n        }\n        i += 1\n        j += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122511,
      "stdout": "",
      "stderr": "/tmp/tmpfkkll66g.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpfkkll66g.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpfkkll66g.swift:34:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpfkkll66g.swift:10:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[j] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpfkkll66g.swift:10:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[j] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpfkkll66g.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpfkkll66g.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpvo_mtj16.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpvo_mtj16.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:4:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpvo_mtj16.swift:5:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    if count == 0 {\n        return 0\n    }\n    if count == 2 {\n        return 1\n    }\n    return -1\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122511,
      "stdout": "",
      "stderr": "/tmp/tmpnlspbrdl.swift:37:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpnlspbrdl.swift:38:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpnlspbrdl.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpnlspbrdl.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpnlspbrdl.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpnlspbrdl.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpnlspbrdl.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpvo_mtj16.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpvo_mtj16.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:4:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpvo_mtj16.swift:5:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    let arr1 = Array(str1)\n    let arr2 = Array(str2)\n    var count = 0\n    for i in 0..<arr1.count {\n        if arr1[i] != arr2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122511,
      "stdout": "",
      "stderr": "/tmp/tmpx3y95tbe.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpx3y95tbe.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpx3y95tbe.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return \"Invalid input\"\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122511,
      "stdout": "",
      "stderr": "/tmp/tmpp0e041jk.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpp0e041jk.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpp0e041jk.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpp0e041jk.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpp0e041jk.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpp0e041jk.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpp0e041jk.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    let len = str1.count\n    var count = 0\n    for i in 0..<len {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122511,
      "stdout": "",
      "stderr": "/tmp/tmpcsp2xqoa.swift:27:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpcsp2xqoa.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpcsp2xqoa.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpcsp2xqoa.swift:7:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpcsp2xqoa.swift:7:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpvo_mtj16.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpvo_mtj16.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:4:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpvo_mtj16.swift:5:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    var i = 0\n    while i < str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n            if str1[i] == \"1\" {\n                str1 = str1.replacingCharacters(in: str1.index(str1.startIndex, offsetBy: i)..<str1.index(str1.startIndex, offsetBy: i + 1), with: \"0\")\n            } else {\n                str1 = str1.replacingCharacters(in: str1.index(str1.startIndex, offsetBy: i)..<str1.index(str1.startIndex, offsetBy: i + 1), with: \"1\")\n            }\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122511,
      "stdout": "",
      "stderr": "/tmp/tmp2mugyji_.swift:35:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp2mugyji_.swift:36:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp2mugyji_.swift:37:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp2mugyji_.swift:9:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp2mugyji_.swift:9:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp2mugyji_.swift:11:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str1[i] == \"1\" {\n               ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp2mugyji_.swift:12:29: error: value of type 'String' has no member 'replacingCharacters'\n                str1 = str1.replacingCharacters(in: str1.index(str1.startIndex, offsetBy: i)..<str1.index(str1.startIndex, offsetBy: i + 1), with: \"0\")\n                       ~~~~ ^~~~~~~~~~~~~~~~~~~\n/tmp/tmp2mugyji_.swift:14:29: error: v",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpvo_mtj16.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpvo_mtj16.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:4:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpvo_mtj16.swift:5:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    let str1 = Array(str1)\n    let str2 = Array(str2)\n    var count = 0\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122511,
      "stdout": "",
      "stderr": "/tmp/tmpepc6ipd5.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpepc6ipd5.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpepc6ipd5.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    let str1 = str1.map { $0 == \"1\" }\n    let str2 = str2.map { $0 == \"1\" }\n    let n = str1.count\n    var count = 0\n    for i in 0..<n {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122511,
      "stdout": "",
      "stderr": "/tmp/tmpb4ion52t.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpb4ion52t.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpb4ion52t.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    let str1 = str1.map { String($0) }\n    let str2 = str2.map { String($0) }\n    var count = 0\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpvjdmdet5.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpvjdmdet5.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvjdmdet5.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp4jc3bi_9.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp4jc3bi_9.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp4jc3bi_9.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp4jc3bi_9.swift:8:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp4jc3bi_9.swift:8:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp4jc3bi_9.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp4jc3bi_9.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    let str1 = str1.map { $0 == \"1\" }\n    let str2 = str2.map { $0 == \"1\" }\n    var count = 0\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122510,
      "stdout": "",
      "stderr": "/tmp/tmpwl0svpgq.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpwl0svpgq.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpwl0svpgq.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpy14l2xvn.swift:26:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpy14l2xvn.swift:27:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpy14l2xvn.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpy14l2xvn.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpy14l2xvn.swift:6:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpy14l2xvn.swift:26:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpy14l2xvn.swift:27:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpy14l2xvn.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpy14l2xvn.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpy14l2xvn.swift:6:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpy14l2xvn.swift:26:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpy14l2xvn.swift:27:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpy14l2xvn.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpy14l2xvn.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpy14l2xvn.swift:6:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpvo_mtj16.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpvo_mtj16.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:4:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpvo_mtj16.swift:5:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count == str2.count {\n        for i in 0..<str1.count {\n            if str1[i] != str2[i] {\n                count += 1\n            }\n        }\n        return count / 2\n    } else {\n        return \"Not Possible\"\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122511,
      "stdout": "",
      "stderr": "/tmp/tmpl0hms8ib.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpl0hms8ib.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpl0hms8ib.swift:34:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpl0hms8ib.swift:9:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str1[i] != str2[i] {\n               ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpl0hms8ib.swift:9:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str1[i] != str2[i] {\n                          ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpl0hms8ib.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpl0hms8ib.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpy14l2xvn.swift:26:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpy14l2xvn.swift:27:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpy14l2xvn.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpy14l2xvn.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpy14l2xvn.swift:6:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122511,
      "stdout": "",
      "stderr": "/tmp/tmpl9nvr31m.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpl9nvr31m.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpl9nvr31m.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpl9nvr31m.swift:8:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpl9nvr31m.swift:8:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpl9nvr31m.swift:4:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpl9nvr31m.swift:5:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    let str1 = str1.map { $0 == \"1\" }\n    let str2 = str2.map { $0 == \"1\" }\n    var count = 0\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122510,
      "stdout": "",
      "stderr": "/tmp/tmpwl0svpgq.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpwl0svpgq.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpwl0svpgq.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    var count = 0\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122510,
      "stdout": "",
      "stderr": "/tmp/tmpche134k4.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpche134k4.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpche134k4.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpche134k4.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpche134k4.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpche134k4.swift:4:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpche134k4.swift:5:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var arr1 = Array(str1)\n    var arr2 = Array(str2)\n    var count = 0\n    for i in 0..<arr1.count {\n        if arr1[i] != arr2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122511,
      "stdout": "",
      "stderr": "/tmp/tmpnzz_v4eb.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpnzz_v4eb.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpnzz_v4eb.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpnzz_v4eb.swift:4:9: warning: variable 'arr1' was never mutated; consider changing to 'let' constant\n    var arr1 = Array(str1)\n    ~~~ ^\n    let\n/tmp/tmpnzz_v4eb.swift:5:9: warning: variable 'arr2' was never mutated; consider changing to 'let' constant\n    var arr2 = Array(str2)\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    let str1 = Array(str1)\n    let str2 = Array(str2)\n    var count = 0\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpuredkii2.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpuredkii2.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpuredkii2.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    var i = 0\n    while i < str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n            str1 = str1.replacingOccurrences(of: String(str1[i]), with: String(str2[i]))\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122511,
      "stdout": "",
      "stderr": "/tmp/tmpekhm1zj3.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpekhm1zj3.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpekhm1zj3.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpekhm1zj3.swift:9:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpekhm1zj3.swift:9:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpekhm1zj3.swift:11:25: error: value of type 'String' has no member 'replacingOccurrences'\n            str1 = str1.replacingOccurrences(of: String(str1[i]), with: String(str2[i]))\n                   ~~~~ ^~~~~~~~~~~~~~~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    var i = 0\n    while i < str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n            if str1[i] == \"0\" {\n                str1[i] = \"1\"\n            } else {\n                str1[i] = \"0\"\n            }\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122511,
      "stdout": "",
      "stderr": "/tmp/tmpsob9tdnz.swift:35:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpsob9tdnz.swift:36:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpsob9tdnz.swift:37:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpsob9tdnz.swift:9:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpsob9tdnz.swift:9:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpsob9tdnz.swift:11:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str1[i] == \"0\" {\n               ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpsob9tdnz.swift:12:21: error: cannot assign through subscript: subscript is get-only\n                str1[i] = \"1\"\n                ~~~~^~~\n/tmp/tmpsob9tdnz.swift:14:21: error: cannot assign through subscript: subscript is get-only\n                str1[i] = \"0\"\n                ~~~~^~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    let len1 = str1.count\n    let len2 = str2.count\n    if len1 != len2 {\n        return -1\n    }\n    var count = 0\n    for i in 0..<len1 {\n        if str1[i] == str2[i] {\n            continue\n        }\n        count += 1\n        for j in i + 1..<len1 {\n            if str1[i] == str2[j] {\n                str1.swapAt(i, j)\n            }\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122511,
      "stdout": "",
      "stderr": "/tmp/tmp6zqkyw0x.swift:39:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp6zqkyw0x.swift:40:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp6zqkyw0x.swift:41:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp6zqkyw0x.swift:13:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] == str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp6zqkyw0x.swift:13:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] == str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp6zqkyw0x.swift:18:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str1[i] == str2[j] {\n               ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp6zqkyw0x.swift:18:27: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str1[i] == str2[j] {\n                          ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Charact",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return \"Invalid Input\"\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122510,
      "stdout": "",
      "stderr": "/tmp/tmp2xt2su7d.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp2xt2su7d.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp2xt2su7d.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp2xt2su7d.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp2xt2su7d.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp2xt2su7d.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp2xt2su7d.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    if str1.count != str2.count {\n        return \"Invalid input\"\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122511,
      "stdout": "",
      "stderr": "/tmp/tmp038tcfnh.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp038tcfnh.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp038tcfnh.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp038tcfnh.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp038tcfnh.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp038tcfnh.swift:4:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp038tcfnh.swift:5:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpvo_mtj16.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpvo_mtj16.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:4:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpvo_mtj16.swift:5:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpvo_mtj16.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpvo_mtj16.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:4:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpvo_mtj16.swift:5:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    var i = 0\n    while i < str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n            str1.replaceSubrange(str1.startIndex...str1.startIndex, with: str2[i])\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122511,
      "stdout": "",
      "stderr": "/tmp/tmpzh6n8j79.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpzh6n8j79.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpzh6n8j79.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpzh6n8j79.swift:9:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpzh6n8j79.swift:9:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpzh6n8j79.swift:11:79: error: no exact matches in call to subscript \n            str1.replaceSubrange(str1.startIndex...str1.startIndex, with: str2[i])\n                                                                              ^\nSwift.String:3:12: note: candidate expects value of type 'Range<String.Index>' for parameter #1 (got 'Int')\n    public subscript(r: Range<String.Index>) -> Substring { get }\n           ^\nSwift.Collection:3:23: note: candidate expects value of type '(UnboundedRange_) -> ()' for parameter #1 (got 'Int')\n    @inlinable public subscript(x: (UnboundedRange_) -> ()) -> Self.SubSequence { get }\n                      ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    let str1 = str1.map { $0 == \"1\" }\n    let str2 = str2.map { $0 == \"1\" }\n    var count = 0\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122510,
      "stdout": "",
      "stderr": "/tmp/tmpwl0svpgq.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpwl0svpgq.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpwl0svpgq.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpvo_mtj16.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpvo_mtj16.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:4:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpvo_mtj16.swift:5:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122510,
      "stdout": "",
      "stderr": "/tmp/tmpwoyarecw.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpwoyarecw.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpwoyarecw.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpwoyarecw.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpwoyarecw.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpwoyarecw.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpwoyarecw.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    let str1 = Array(str1)\n    let str2 = Array(str2)\n    var count = 0\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpuredkii2.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpuredkii2.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpuredkii2.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    let str1 = str1.map { $0 == \"1\" }\n    let str2 = str2.map { $0 == \"1\" }\n    var count = 0\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122510,
      "stdout": "",
      "stderr": "/tmp/tmpwl0svpgq.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpwl0svpgq.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpwl0svpgq.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    let str1 = Array(str1)\n    let str2 = Array(str2)\n    var count = 0\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpuredkii2.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpuredkii2.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpuredkii2.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpy14l2xvn.swift:26:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpy14l2xvn.swift:27:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpy14l2xvn.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpy14l2xvn.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpy14l2xvn.swift:6:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return \"Not Possible\"\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122510,
      "stdout": "",
      "stderr": "/tmp/tmpppy_a90y.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpppy_a90y.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpppy_a90y.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpppy_a90y.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpppy_a90y.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpppy_a90y.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpppy_a90y.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    let arr1 = Array(str1)\n    let arr2 = Array(str2)\n    var count = 0\n    for i in 0..<arr1.count {\n        if arr1[i] != arr2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122511,
      "stdout": "",
      "stderr": "/tmp/tmpx3y95tbe.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpx3y95tbe.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpx3y95tbe.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    var i = 0\n    while i < str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n            if str1[i] == \"1\" {\n                str1.replaceSubrange(str1.startIndex..<str1.index(str1.startIndex, offsetBy: i + 1), with: String(repeating: \"0\", count: i + 1))\n            } else {\n                str1.replaceSubrange(str1.startIndex..<str1.index(str1.startIndex, offsetBy: i + 1), with: String(repeating: \"1\", count: i + 1))\n            }\n        }\n        i += 1\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122511,
      "stdout": "",
      "stderr": "/tmp/tmp09pj3rni.swift:35:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp09pj3rni.swift:36:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp09pj3rni.swift:37:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp09pj3rni.swift:9:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp09pj3rni.swift:9:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp09pj3rni.swift:11:16: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n            if str1[i] == \"1\" {\n               ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp09pj3rni.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpy14l2xvn.swift:26:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpy14l2xvn.swift:27:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpy14l2xvn.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpy14l2xvn.swift:6:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpy14l2xvn.swift:6:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var str1 = str1\n    var str2 = str2\n    var count = 0\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmpvo_mtj16.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpvo_mtj16.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpvo_mtj16.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpvo_mtj16.swift:4:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpvo_mtj16.swift:5:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp4jc3bi_9.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp4jc3bi_9.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp4jc3bi_9.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp4jc3bi_9.swift:8:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp4jc3bi_9.swift:8:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp4jc3bi_9.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp4jc3bi_9.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var a = Array(str1)\n    var b = Array(str2)\n    var count = 0\n    for i in 0..<a.count {\n        if a[i] != b[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122511,
      "stdout": "",
      "stderr": "/tmp/tmpxloiyk3q.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpxloiyk3q.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpxloiyk3q.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpxloiyk3q.swift:4:9: warning: variable 'a' was never mutated; consider changing to 'let' constant\n    var a = Array(str1)\n    ~~~ ^\n    let\n/tmp/tmpxloiyk3q.swift:5:9: warning: variable 'b' was never mutated; consider changing to 'let' constant\n    var b = Array(str2)\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    let str1 = Array(str1)\n    let str2 = Array(str2)\n    var count = 0\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122511,
      "stdout": "",
      "stderr": "/tmp/tmpepc6ipd5.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpepc6ipd5.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpepc6ipd5.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return \"Invalid Input\"\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count/2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122511,
      "stdout": "",
      "stderr": "/tmp/tmpg8j03jn7.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmpg8j03jn7.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpg8j03jn7.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmpg8j03jn7.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpg8j03jn7.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmpg8j03jn7.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmpg8j03jn7.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    var str1 = str1\n    var str2 = str2\n    if str1.count != str2.count {\n        return -1\n    }\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1665509807,
      "stdout": "",
      "stderr": "/tmp/tmp9vcayjuo.swift:31:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9vcayjuo.swift:32:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:33:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9vcayjuo.swift:11:12: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n           ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:11:23: error: 'subscript(_:)' is unavailable: cannot subscript String with an Int, use a String.Index instead.\n        if str1[i] != str2[i] {\n                      ^~~~~~~\nSwift.String:3:12: note: 'subscript(_:)' has been explicitly marked unavailable here\n    public subscript(i: Int) -> Character { get }\n           ^\n/tmp/tmp9vcayjuo.swift:5:9: warning: variable 'str1' was never mutated; consider changing to 'let' constant\n    var str1 = str1\n    ~~~ ^\n    let\n/tmp/tmp9vcayjuo.swift:6:9: warning: variable 'str2' was never mutated; consider changing to 'let' constant\n    var str2 = str2\n    ~~~ ^\n    let\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\n/// Write a swiftthon function to count minimum number of swaps required to convert one binary number represented as a string to another.\nfunc min_Swaps(str1: String, str2: String) -> AnyHashable {\n    var count = 0\n    let str1 = Array(str1)\n    let str2 = Array(str2)\n    for i in 0..<str1.count {\n        if str1[i] != str2[i] {\n            count += 1\n        }\n    }\n    return count / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")",
      "timestamp": 1666122510,
      "stdout": "",
      "stderr": "/tmp/tmp9rib4dg9.swift:28:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'Int'\nassert(min_Swaps(str1: \"1101\", str2: \"1110\") == 1)\n       ^\n                                             as! Int\n/tmp/tmp9rib4dg9.swift:29:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"000\") == \"Not Possible\")\n       ^\n                                           as! String\n/tmp/tmp9rib4dg9.swift:30:8: error: cannot convert value of type 'AnyHashable' to expected argument type 'String'\nassert(min_Swaps(str1: \"111\", str2: \"110\") == \"Not Possible\")\n       ^\n                                           as! String\n",
      "exit_code": 1,
      "status": "SyntaxError"
    }
  ]
}