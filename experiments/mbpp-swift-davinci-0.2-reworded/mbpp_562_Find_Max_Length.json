{
  "name": "mbpp_562_Find_Max_Length",
  "language": "swift",
  "prompt": "\n/// Write a swiftthon function to find the length of the longest subarrays.\nfunc Find_Max_Length(lst: [[Int]]) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_562_Find_Max_Length.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(Find_Max_Length(lst: [[1], [1, 4], [5, 6, 7, 8]]) == 4)\nassert(Find_Max_Length(lst: [[0, 1], [2, 2], [3, 2, 1]]) == 3)\nassert(Find_Max_Length(lst: [[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]]) == 5)",
  "stop_tokens": [
    "\n}"
  ],
  "completions": [
    "    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length",
    "    var max_len = 0\n    var start_index = 0\n    var end_index = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in i..<lst.count {\n            sum += lst[j]\n            if sum == 0 {\n                if max_len < j - i + 1 {\n                    max_len = j - i + 1\n                    start_index = i\n                    end_index = j\n                }\n            }\n        }\n    }\n    return max_len",
    "    var max_length = 0\n    for subarray in lst {\n        if subarray.count > max_length {\n            max_length = subarray.count\n        }\n    }\n    return max_length",
    "    var max_length = 0\n    for i in 0..<lst.count {\n        var sub_array = lst[i]\n        var length = 0\n        for j in 0..<sub_array.count {\n            if sub_array[j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length",
    "    var max_length = 0\n    for subarray in lst {\n        if subarray.count > max_length {\n            max_length = subarray.count\n        }\n    }\n    return max_length",
    "    var max_length = 0\n    for subarray in lst {\n        if subarray.count > max_length {\n            max_length = subarray.count\n        }\n    }\n    return max_length",
    "    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            }\n        }\n        if length > max_length {\n            max_length = length\n        }\n    }\n    return max_length",
    "    var max_length = 0\n    for i in 0..<lst.count {\n        var curr_length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                curr_length += 1\n            } else {\n                curr_length = 0\n            }\n            if curr_length > max_length {\n                max_length = curr_length\n            }\n        }\n    }\n    return max_length",
    "    var max_length = 0\n    for subarray in lst {\n        if subarray.count > max_length {\n            max_length = subarray.count\n        }\n    }\n    return max_length",
    "    var max_length = 0\n    for subarray in lst {\n        if subarray.count > max_length {\n            max_length = subarray.count\n        }\n    }\n    return max_length",
    "    var max_length = 0\n    for i in 0..<lst.count {\n        var sub_lst = lst[i]\n        var length = 0\n        for j in 0..<sub_lst.count {\n            if sub_lst[j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length",
    "    var max_len = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_len = max(max_len, j + 1)\n            }\n        }\n    }\n    return max_len",
    "    var max_len = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_len = max(max_len, j + 1)\n            }\n        }\n    }\n    return max_len",
    "    var max_length = 0\n    for subarray in lst {\n        max_length = max(max_length, subarray.count)\n    }\n    return max_length",
    "    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length",
    "    var max_length = 0\n    for sub_array in lst {\n        if sub_array.count > max_length {\n            max_length = sub_array.count\n        }\n    }\n    return max_length",
    "    var max_len = 0\n    for i in 0..<lst.count {\n        var sum = 0\n        for j in 0..<lst[i].count {\n            sum += lst[i][j]\n            if sum == 0 {\n                max_len = max(max_len, j + 1)\n            }\n        }\n    }\n    return max_len",
    "    var max_length = 0\n    for subarray in lst {\n        if subarray.count > max_length {\n            max_length = subarray.count\n        }\n    }\n    return max_length",
    "    var max_length = 0\n    for i in 0..<lst.count {\n        var length = 0\n        for j in 0..<lst[i].count {\n            if lst[i][j] == 1 {\n                length += 1\n            } else {\n                length = 0\n            }\n            if length > max_length {\n                max_length = length\n            }\n        }\n    }\n    return max_length",
    "    var max_len = 0\n    var sum = 0\n    var dict = [Int:Int]()\n    dict[0] = -1\n    for i in 0..<lst.count {\n        sum += lst[i][0]\n        if let j = dict[sum] {\n            max_len = max(max_len, i - j)\n        } else {\n            dict[sum] = i\n        }\n    }\n    return max_len"
  ]
}