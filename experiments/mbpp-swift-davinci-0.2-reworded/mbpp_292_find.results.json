{
  "name": "mbpp_292_find",
  "language": "swift",
  "prompt": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_292_find.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n/m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1666122458,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a swiftthon function to find quotient of two numbers (rounded down to the nearest integer).\nfunc find(n: Int, m: Int) -> Int {\n    return n / m\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(find(n: 10, m: 3) == 3)\nassert(find(n: 4, m: 2) == 2)\nassert(find(n: 20, m: 5) == 4)",
      "timestamp": 1665517135,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}