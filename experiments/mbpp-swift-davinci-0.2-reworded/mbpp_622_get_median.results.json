{
  "name": "mbpp_622_get_median",
  "language": "swift",
  "prompt": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_622_get_median.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0, j = 0\n    var m1 = -1, m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    while count < n + 1 {\n        count += 1\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    while count < n + 1 {\n        count += 1\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    \n    while count < n + 1 {\n        count += 1\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    while count < n + 1 {\n        count += 1\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    \n    while count < n + 1 {\n        count += 1\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    \n    while count < n + 1 {\n        count += 1\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    for _ in 0..<(n + 1) / 2 {\n        m1 = m2\n        if i == n {\n            m2 = arr2[0]\n            j += 1\n        } else if j == n {\n            m2 = arr1[0]\n            i += 1\n        } else if arr1[i] < arr2[j] {\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    if n % 2 == 0 {\n        return Double(m1 + m2) / 2\n    }\n    return Double(m2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "tmpdo5em6yy/tmpdo5em6yy.swift:43: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002acabacc5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002acaba9bcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002acaba9bc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002acaba9bb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpdo5em6yy                        0x000055d9dd70355e <unavailable> + 5470\n5    libc.so.6                          0x00002acabaeb1460 __libc_start_main + 245\n6    tmpdo5em6yy                        0x000055d9dd703149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1, m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var count = 0\n    var m1 = -1\n    var m2 = -1\n    \n    while count < n + 1 {\n        count += 1\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<(n + 1) {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    while count < n + 1 {\n        count += 1\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0, j = 0\n    var m1 = -1, m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    \n    while count < n + 1 {\n        count += 1\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0, j = 0\n    var m1 = -1, m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var count = 0\n    var m1 = -1\n    var m2 = -1\n    \n    while count <= n {\n        count += 1\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    \n    while count < n + 1 {\n        count += 1\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        }\n        else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        }\n        else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    while count <= n {\n        count += 1\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        }\n        else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        }\n        else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    \n    while count < n + 1 {\n        count += 1\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0, j = 0\n    var m1 = -1, m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    while count < n + 1 {\n        count += 1\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0, j = 0\n    var m1 = -1, m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        }\n        \n        if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var count = 0\n    var m1 = -1\n    var m2 = -1\n    \n    while count < n + 1 {\n        count += 1\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    while count < n + 1 {\n        count += 1\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    \n    while count < n + 1 {\n        count += 1\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        }\n        \n        if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    while count < n + 1 {\n        count += 1\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    for _ in 0..<n + 1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    while count < n + 1 {\n        count += 1\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    \n    while count < n + 1 {\n        count += 1\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var count = 0\n    var m1 = -1\n    var m2 = -1\n    \n    while count < n + 1 {\n        count += 1\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    while count < n + 1 {\n        count += 1\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    while count < n + 1 {\n        count += 1\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    while count < n + 1 {\n        count += 1\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    while count < n + 1 {\n        count += 1\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<(n + 1) {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    while count < n + 1 {\n        count += 1\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0, j = 0\n    var m1 = -1, m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    \n    while count < n + 1 {\n        count += 1\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0, j = 0\n    var m1 = -1, m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    \n    var i = 0, j = 0\n    var m1 = -1, m2 = -1\n    \n    for _ in 0...n {\n        \n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        }\n        \n        if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    while count < n + 1 {\n        count += 1\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    while count < n + 1 {\n        count += 1\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    while count < n + 1 {\n        count += 1\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    while count < n + 1 {\n        count += 1\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1, m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        }\n        if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var count = 0\n    var m1 = -1\n    var m2 = -1\n    \n    while count < n + 1 {\n        count += 1\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0, j = 0\n    var m1 = -1, m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0, j = 0\n    var m1 = -1, m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0, j = 0\n    var m1 = -1, m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0, j = 0\n    var m1 = -1, m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0, j = 0\n    var m1 = -1, m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    while count < n + 1 {\n        count += 1\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    while count < n + 1 {\n        count += 1\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    while count < n + 1 {\n        count += 1\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    while count < n + 1 {\n        count += 1\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var count = 0\n    var m1 = -1\n    var m2 = -1\n    \n    while count < n + 1 {\n        count += 1\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    while count < n + 1 {\n        count += 1\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    while count < n + 1 {\n        count += 1\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        }\n        else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        }\n        else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0, j = 0\n    var m1 = -1, m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    while count < n + 1 {\n        count += 1\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    \n    while count < n + 1 {\n        count += 1\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    while count < n + 1 {\n        count += 1\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0, j = 0\n    var m1 = -1, m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        }\n        else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        }\n        else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    while count < n + 1 {\n        count += 1\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1, m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        }\n        if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1, m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1, m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0, j = 0\n    var m1 = -1, m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        }\n        else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        }\n        else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var count = 0\n    var m1 = -1, m2 = -1\n    \n    while count < n + 1 {\n        count += 1\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0, j = 0\n    var m1 = -1, m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0, j = 0\n    var m1 = -1, m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    while count < n + 1 {\n        count += 1\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        }\n        else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        }\n        else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0, j = 0\n    var m1 = -1, m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0, j = 0\n    var m1 = -1, m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    \n    while count <= n {\n        count += 1\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1, m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        }\n        \n        if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    while count < n + 1 {\n        count += 1\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    while count < n + 1 {\n        count += 1\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1, m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    while count < n + 1 {\n        count += 1\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var count = 0\n    var m1 = -1\n    var m2 = -1\n    while count < n + 1 {\n        count += 1\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        }\n        if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    while count < n + 1 {\n        count += 1\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    while count < n + 1 {\n        count += 1\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    while count < n + 1 {\n        count += 1\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    \n    while count < n + 1 {\n        count += 1\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1, m2 = -1\n    \n    for _ in 0..<(n + 1) {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0, j = 0\n    var m1 = -1, m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1, m2 = -1\n    for _ in 0..<n {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "tmpf76spi2q/tmpf76spi2q.swift:43: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b30af363c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b30af05ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b30af05a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b30af0597b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpf76spi2q                        0x00005635e252255e <unavailable> + 5470\n5    libc.so.6                          0x00002b30af54f460 __libc_start_main + 245\n6    tmpf76spi2q                        0x00005635e2522149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    \n    while count < n + 1 {\n        count += 1\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    while count < n + 1 {\n        count += 1\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    while count < n + 1 {\n        count += 1\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        }\n        else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        }\n        else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    while count <= n {\n        count += 1\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    while count < n + 1 {\n        count += 1\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1, m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1, m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0, j = 0\n    var m1 = -1, m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    while count < n + 1 {\n        count += 1\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    \n    while count < n + 1 {\n        count += 1\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0, j = 0\n    var m1 = -1, m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<(n+1)/2 {\n        m1 = m2\n        if i == n {\n            m2 = arr2[0]\n            j += 1\n        } else if j == n {\n            m2 = arr1[0]\n            i += 1\n        } else if arr1[i] < arr2[j] {\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    if n % 2 == 0 {\n        return Double(m1 + m2) / 2.0\n    }\n    return Double(m2)\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "tmptlje9q2r/tmptlje9q2r.swift:45: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b11408f3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b11405eab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b11405ea988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b11405e97b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptlje9q2r                        0x00005645b68c155e <unavailable> + 5470\n5    libc.so.6                          0x00002b1140adf460 __libc_start_main + 245\n6    tmptlje9q2r                        0x00005645b68c1149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    while count < n + 1 {\n        count += 1\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0, j = 0\n    var m1 = -1, m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    \n    while count < n + 1 {\n        count += 1\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        }\n        if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        }\n        \n        if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0, j = 0\n    var m1 = -1, m2 = -1\n    for _ in 0..<n + 1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        }\n        else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        }\n        else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        }\n        else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        }\n        else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        }\n        \n        if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0, j = 0\n    var m1 = -1, m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<(n+1)/2 {\n        m1 = m2\n        if i == n {\n            m2 = arr2[0]\n            j += 1\n        } else if j == n {\n            m2 = arr1[0]\n            i += 1\n        } else if arr1[i] < arr2[j] {\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    if n % 2 == 0 {\n        return Double(m1 + m2) / 2.0\n    } else {\n        return Double(m2)\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "tmp2v5vtmq5/tmp2v5vtmq5.swift:46: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b434ea0ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b434e705b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b434e705988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b434e7047b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2v5vtmq5                        0x000055df3cf7d55e <unavailable> + 5470\n5    libc.so.6                          0x00002b434ebfa460 __libc_start_main + 245\n6    tmp2v5vtmq5                        0x000055df3cf7d149 <unavailable> + 4425\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1, m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        }\n        \n        if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    \n    while count < n + 1 {\n        count += 1\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    while count < n + 1 {\n        count += 1\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    while count <= n {\n        count += 1\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    while count < n + 1 {\n        count += 1\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    return Double(m1 + m2) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    var count = 0\n    \n    while count < n + 1 {\n        count += 1\n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        } else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        } else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2.0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1665510654,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the median of two sorted arrays of same size.\nfunc get_median(arr1: [Int], arr2: [Int], n: Int) -> Double {\n    var i = 0\n    var j = 0\n    var m1 = -1\n    var m2 = -1\n    \n    for _ in 0..<n+1 {\n        if i == n {\n            m1 = m2\n            m2 = arr2[0]\n            break\n        }\n        else if j == n {\n            m1 = m2\n            m2 = arr1[0]\n            break\n        }\n        \n        if arr1[i] < arr2[j] {\n            m1 = m2\n            m2 = arr1[i]\n            i += 1\n        }\n        else {\n            m1 = m2\n            m2 = arr2[j]\n            j += 1\n        }\n    }\n    \n    return Double(m1 + m2) / 2\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(get_median(arr1: [1, 12, 15, 26, 38], arr2: [2, 13, 17, 30, 45], n: 5) == 16.0)\nassert(get_median(arr1: [2, 4, 8, 9], arr2: [7, 13, 19, 28], n: 4) == 8.5)\nassert(get_median(arr1: [3, 6, 14, 23, 36, 42], arr2: [2, 18, 27, 39, 49, 55], n: 6) == 25.0)",
      "timestamp": 1666123804,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}