{
  "name": "mbpp_723_count_same_pair",
  "language": "swift",
  "prompt": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_723_count_same_pair.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for (index, num) in nums1.enumerated() {\n        if num == nums2[index] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1666124217,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// The input is defined as two arrays of the same length. Write a function to count indices where the arrays have the same values.\nfunc count_same_pair(nums1: [Int], nums2: [Int]) -> Int {\n    var count = 0\n    for i in 0..<nums1.count {\n        if nums1[i] == nums2[i] {\n            count += 1\n        }\n    }\n    return count\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(count_same_pair(nums1: [1, 2, 3, 4, 5, 6, 7, 8], nums2: [2, 2, 3, 1, 2, 6, 7, 9]) == 4)\nassert(count_same_pair(nums1: [0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 11)\nassert(count_same_pair(nums1: [2, 4, -6, -9, 11, -12, 14, -5, 17], nums2: [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8]) == 1)\nassert(count_same_pair(nums1: [0, 1, 1, 2], nums2: [0, 1, 2, 2]) == 3)",
      "timestamp": 1665509950,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}