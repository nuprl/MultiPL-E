{
  "name": "mbpp_594_diff_even_odd",
  "language": "swift",
  "prompt": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_594_diff_even_odd.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even: Int = 0\n    var odd: Int = 0\n    var count: Int = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    if count == 0 {\n        return 0\n    }\n    for j in list1 {\n        if j % 2 != 0 {\n            odd = j\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    if count == 0 {\n        return 0\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    \n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    if count == 0 {\n        return 0\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    if count == 0 {\n        return 0\n    }\n    for j in list1 {\n        if j % 2 != 0 {\n            odd = j\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    if count == 0 {\n        return 0\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var result = 0\n    \n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    \n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    \n    result = even - odd\n    \n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even_num = 0\n    var odd_num = 0\n    var diff = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even_num = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd_num = i\n            break\n        }\n    }\n    diff = even_num - odd_num\n    return diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = false\n    for i in list1 {\n        if i % 2 == 0 {\n            if flag == false {\n                even = i\n                flag = true\n            }\n        } else {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "tmpd4wwyyly/tmpd4wwyyly.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0684187c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0683e7eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0683e7e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0683e7d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpd4wwyyly                        0x0000562ec758152e <unavailable> + 5422\n5    libc.so.6                          0x00002b0684373460 __libc_start_main + 245\n6    tmpd4wwyyly                        0x0000562ec7581169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var foundEven = false\n    var foundOdd = false\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            foundEven = true\n        }\n        if i % 2 != 0 {\n            odd = i\n            foundOdd = true\n        }\n        if foundEven && foundOdd {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "tmpa21lz7nu/tmpa21lz7nu.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002add3e8c0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002add3e5b7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002add3e5b7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002add3e5b67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpa21lz7nu                        0x0000557aa58ce52e <unavailable> + 5422\n5    libc.so.6                          0x00002add3eaac460 __libc_start_main + 245\n6    tmpa21lz7nu                        0x0000557aa58ce169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            flag = 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            flag = 1\n            break\n        }\n    }\n    if flag == 1 {\n        return even - odd\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even: Int?\n    var odd: Int?\n    for i in list1 {\n        if i % 2 == 0 {\n            if even == nil {\n                even = i\n            }\n        } else {\n            if odd == nil {\n                odd = i\n            }\n        }\n    }\n    if even == nil || odd == nil {\n        return 0\n    }\n    return even! - odd!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if flag == 0 {\n                even = i\n                flag = 1\n            }\n        } else {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "tmpob5nmdcl/tmpob5nmdcl.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af6ec43dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af6ec134b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af6ec134988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af6ec1337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpob5nmdcl                        0x00005645876c252e <unavailable> + 5422\n5    libc.so.6                          0x00002af6ec629460 __libc_start_main + 245\n6    tmpob5nmdcl                        0x00005645876c2169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var foundEven = false\n    var foundOdd = false\n    for i in list1 {\n        if i % 2 == 0 {\n            if !foundEven {\n                even = i\n                foundEven = true\n            }\n        } else {\n            if !foundOdd {\n                odd = i\n                foundOdd = true\n            }\n        }\n        if foundEven && foundOdd {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    if count == 0 {\n        return 0\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = 0\n    for i in list1 {\n        if i % 2 == 0 && flag == 0 {\n            even = i\n            flag = 1\n        }\n        if i % 2 != 0 && flag == 0 {\n            odd = i\n            flag = 1\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "tmpjxnu_zk7/tmpjxnu_zk7.swift:33: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b197464fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1974346b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1974346988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b19743457b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjxnu_zk7                        0x000055c46b55752e <unavailable> + 5422\n5    libc.so.6                          0x00002b197483b460 __libc_start_main + 245\n6    tmpjxnu_zk7                        0x000055c46b557169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even: Int = 0\n    var odd: Int = 0\n    var count: Int = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    if count == 0 {\n        return 0\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if flag == 0 {\n                even = i\n                flag = 1\n            }\n        } else {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "tmpob5nmdcl/tmpob5nmdcl.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af6ec43dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af6ec134b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af6ec134988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af6ec1337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpob5nmdcl                        0x00005645876c252e <unavailable> + 5422\n5    libc.so.6                          0x00002af6ec629460 __libc_start_main + 245\n6    tmpob5nmdcl                        0x00005645876c2169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    if count == 0 {\n        return 0\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if flag == 0 {\n                even = i\n                flag = 1\n            }\n        } else {\n            if flag == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "tmptt_0tkyx/tmptt_0tkyx.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1dc1955c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1dc164cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1dc164c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1dc164b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptt_0tkyx                        0x0000558d5e09c62f <unavailable> + 5679\n5    libc.so.6                          0x00002b1dc1b41460 __libc_start_main + 245\n6    tmptt_0tkyx                        0x0000558d5e09c169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    var diff = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n        }\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n        }\n        if count == 2 {\n            break\n        }\n    }\n    diff = even - odd\n    return diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "tmpfpiufveo/tmpfpiufveo.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b385953ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b3859235b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b3859235988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b38592347b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpfpiufveo                        0x0000559cc444c52e <unavailable> + 5422\n5    libc.so.6                          0x00002b385972a460 __libc_start_main + 245\n6    tmpfpiufveo                        0x0000559cc444c169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var even_found = false\n    var odd_found = false\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            even_found = true\n        }\n        else {\n            odd = i\n            odd_found = true\n        }\n        if even_found && odd_found {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "tmp8y_sfizt/tmp8y_sfizt.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4001e85c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4001b7cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4001b7c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4001b7b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp8y_sfizt                        0x000055f0fe7c152e <unavailable> + 5422\n5    libc.so.6                          0x00002b4002071460 __libc_start_main + 245\n6    tmp8y_sfizt                        0x000055f0fe7c1169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if flag == 0 {\n                even = i\n                flag = 1\n            }\n        }\n        else {\n            if flag == 0 {\n                odd = i\n                flag = 1\n            }\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "tmpshjv9ncu/tmpshjv9ncu.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac8dfd14c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac8dfa0bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac8dfa0b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac8dfa0a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpshjv9ncu                        0x000055f34f7c852e <unavailable> + 5422\n5    libc.so.6                          0x00002ac8dff00460 __libc_start_main + 245\n6    tmpshjv9ncu                        0x000055f34f7c8169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if flag == 0 {\n                even = i\n                flag = 1\n            }\n        } else {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "tmpob5nmdcl/tmpob5nmdcl.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af6ec43dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af6ec134b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af6ec134988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af6ec1337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpob5nmdcl                        0x00005645876c252e <unavailable> + 5422\n5    libc.so.6                          0x00002af6ec629460 __libc_start_main + 245\n6    tmpob5nmdcl                        0x00005645876c2169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if flag == 0 {\n                even = i\n                flag = 1\n            }\n        } else {\n            if flag == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "tmptt_0tkyx/tmptt_0tkyx.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1dc1955c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1dc164cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1dc164c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1dc164b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptt_0tkyx                        0x0000558d5e09c62f <unavailable> + 5679\n5    libc.so.6                          0x00002b1dc1b41460 __libc_start_main + 245\n6    tmptt_0tkyx                        0x0000558d5e09c169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if flag == 0 {\n                even = i\n                flag = 1\n            }\n        } else {\n            if flag == 1 {\n                odd = i\n                flag = 2\n            }\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "tmpgqx9xex7/tmpgqx9xex7.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9d4c926c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9d4c61db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9d4c61d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9d4c61c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgqx9xex7                        0x0000555f2258d62f <unavailable> + 5679\n5    libc.so.6                          0x00002b9d4cb12460 __libc_start_main + 245\n6    tmpgqx9xex7                        0x0000555f2258d169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for j in list1 {\n        if j % 2 != 0 {\n            odd = j\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    \n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    \n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    \n    if count == 2 {\n        return even - odd\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var even_found = false\n    var odd_found = false\n    for i in list1 {\n        if i % 2 == 0 {\n            if !even_found {\n                even = i\n                even_found = true\n            }\n        } else {\n            if !odd_found {\n                odd = i\n                odd_found = true\n            }\n        }\n        if even_found && odd_found {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var diff = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    diff = even - odd\n    return diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    if count == 0 {\n        return 0\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    for i in 0..<list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n    }\n    for i in 0..<list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var foundEven = false\n    var foundOdd = false\n    for number in list1 {\n        if number % 2 == 0 {\n            if !foundEven {\n                even = number\n                foundEven = true\n            }\n        } else {\n            if !foundOdd {\n                odd = number\n                foundOdd = true\n            }\n        }\n        if foundEven && foundOdd {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if flag == 0 {\n                even = i\n                flag = 1\n            }\n        }\n        else {\n            if flag == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "tmpjqg208ty/tmpjqg208ty.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ade22b28c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ade2281fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ade2281f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ade2281e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjqg208ty                        0x00005632fd68562f <unavailable> + 5679\n5    libc.so.6                          0x00002ade22d14460 __libc_start_main + 245\n6    tmpjqg208ty                        0x00005632fd685169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for j in list1 {\n        if j % 2 != 0 {\n            odd = j\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even: Int = 0\n    var odd: Int = 0\n    var count: Int = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    if count == 0 {\n        return 0\n    }\n    for j in list1 {\n        if j % 2 != 0 {\n            odd = j\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while even == 0 || odd == 0 {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n        } else {\n            odd = list1[i]\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "tmpino7zxr7/tmpino7zxr7.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeb4c5aec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeb4c2a5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeb4c2a5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeb4c2a47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpino7zxr7                        0x00005592c586541e <unavailable> + 5150\n5    libc.so.6                          0x00002aeb4c79a460 __libc_start_main + 245\n6    tmpino7zxr7                        0x00005592c5865059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if flag == 0 {\n                even = i\n                flag = 1\n            }\n        } else {\n            if flag == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "tmptt_0tkyx/tmptt_0tkyx.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1dc1955c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1dc164cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1dc164c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1dc164b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptt_0tkyx                        0x0000558d5e09c62f <unavailable> + 5679\n5    libc.so.6                          0x00002b1dc1b41460 __libc_start_main + 245\n6    tmptt_0tkyx                        0x0000558d5e09c169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = true\n    for i in list1 {\n        if i % 2 == 0 {\n            if flag {\n                even = i\n                flag = false\n            }\n        } else {\n            if flag {\n                odd = i\n                flag = false\n            }\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "tmpxsirqf_f/tmpxsirqf_f.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9edae52c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9edab49b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9edab49988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9edab487b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxsirqf_f                        0x000055801f4cf52e <unavailable> + 5422\n5    libc.so.6                          0x00002b9edb03e460 __libc_start_main + 245\n6    tmpxsirqf_f                        0x000055801f4cf169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even: Int = 0\n    var odd: Int = 0\n    var count: Int = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    if count == 0 {\n        return 0\n    }\n    for j in list1 {\n        if j % 2 != 0 {\n            odd = j\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    if count == 0 {\n        return 0\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even: Int = 0\n    var odd: Int = 0\n    var isEven: Bool = false\n    var isOdd: Bool = false\n    for i in list1 {\n        if i % 2 == 0 && !isEven {\n            even = i\n            isEven = true\n        }\n        if i % 2 != 0 && !isOdd {\n            odd = i\n            isOdd = true\n        }\n        if isEven && isOdd {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var firstEven = 0\n    var firstOdd = 0\n    var diff = 0\n    for i in 0..<list1.count {\n        if list1[i] % 2 == 0 {\n            even += 1\n            if even == 1 {\n                firstEven = list1[i]\n            }\n        }\n        else {\n            odd += 1\n            if odd == 1 {\n                firstOdd = list1[i]\n            }\n        }\n    }\n    diff = firstEven - firstOdd\n    return diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    if count == 0 {\n        return 0\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even_num = 0\n    var odd_num = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even_num = i\n            count += 1\n            break\n        }\n    }\n    if count == 0 {\n        return 0\n    }\n    for j in list1 {\n        if j % 2 != 0 {\n            odd_num = j\n            break\n        }\n    }\n    return even_num - odd_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even: Int = 0\n    var odd: Int = 0\n    var count: Int = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    if count == 0 {\n        return 0\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var diff = 0\n    for i in 0..<list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n    }\n    for i in 0..<list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n    }\n    diff = even - odd\n    return diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    if count == 0 {\n        return 0\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if flag == 0 {\n                even = i\n                flag = 1\n            }\n        } else {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "tmpob5nmdcl/tmpob5nmdcl.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af6ec43dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af6ec134b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af6ec134988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af6ec1337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpob5nmdcl                        0x00005645876c252e <unavailable> + 5422\n5    libc.so.6                          0x00002af6ec629460 __libc_start_main + 245\n6    tmpob5nmdcl                        0x00005645876c2169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    if count == 0 {\n        return 0\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even: Int = 0\n    var odd: Int = 0\n    var diff: Int = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    diff = even - odd\n    return diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if flag == 0 {\n                even = i\n                flag = 1\n            }\n        }\n        else {\n            if flag == 0 {\n                odd = i\n                flag = 1\n            }\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "tmpshjv9ncu/tmpshjv9ncu.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac8dfd14c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac8dfa0bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac8dfa0b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac8dfa0a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpshjv9ncu                        0x000055f34f7c852e <unavailable> + 5422\n5    libc.so.6                          0x00002ac8dff00460 __libc_start_main + 245\n6    tmpshjv9ncu                        0x000055f34f7c8169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for j in list1 {\n        if j % 2 != 0 {\n            odd = j\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    if count == 0 {\n        return 0\n    }\n    for j in list1 {\n        if j % 2 != 0 {\n            odd = j\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even: Int = 0\n    var odd: Int = 0\n    var count: Int = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            if count == 2 {\n                break\n            }\n        }\n    }\n    count = 0\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            if count == 2 {\n                break\n            }\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "tmp3mo3osd3/tmp3mo3osd3.swift:44: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002afe052ecc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002afe04fe3b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002afe04fe3988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002afe04fe27b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp3mo3osd3                        0x0000562bfb62770f <unavailable> + 5903\n5    libc.so.6                          0x00002afe054d8460 __libc_start_main + 245\n6    tmp3mo3osd3                        0x0000562bfb627169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    for i in 0..<list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n    }\n    for i in 0..<list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while even == 0 || odd == 0 {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n        }\n        else {\n            odd = list1[i]\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "tmpgiezxypr/tmpgiezxypr.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8ea481bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8ea4512b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8ea4512988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8ea45117b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpgiezxypr                        0x0000557ab69f541e <unavailable> + 5150\n5    libc.so.6                          0x00002b8ea4a07460 __libc_start_main + 245\n6    tmpgiezxypr                        0x0000557ab69f5059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if flag == 0 {\n                even = i\n                flag = 1\n            }\n        } else {\n            if flag == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "tmptt_0tkyx/tmptt_0tkyx.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1dc1955c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1dc164cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1dc164c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1dc164b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptt_0tkyx                        0x0000558d5e09c62f <unavailable> + 5679\n5    libc.so.6                          0x00002b1dc1b41460 __libc_start_main + 245\n6    tmptt_0tkyx                        0x0000558d5e09c169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even_num = 0\n    var odd_num = 0\n    var diff = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even_num = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd_num = i\n            break\n        }\n    }\n    diff = even_num - odd_num\n    return diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var result = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    result = even - odd\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var diff = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    diff = even - odd\n    return diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while even == 0 || odd == 0 {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n        } else {\n            odd = list1[i]\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "tmpino7zxr7/tmpino7zxr7.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeb4c5aec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeb4c2a5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeb4c2a5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeb4c2a47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpino7zxr7                        0x00005592c586541e <unavailable> + 5150\n5    libc.so.6                          0x00002aeb4c79a460 __libc_start_main + 245\n6    tmpino7zxr7                        0x00005592c5865059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while even == 0 || odd == 0 {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n        } else {\n            odd = list1[i]\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "tmpino7zxr7/tmpino7zxr7.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeb4c5aec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeb4c2a5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeb4c2a5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeb4c2a47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpino7zxr7                        0x00005592c586541e <unavailable> + 5150\n5    libc.so.6                          0x00002aeb4c79a460 __libc_start_main + 245\n6    tmpino7zxr7                        0x00005592c5865059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    \n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    if count == 0 {\n        return 0\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    if count == 0 {\n        return 0\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if flag == 0 {\n                even = i\n                flag = 1\n            }\n        }\n        else {\n            if flag == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "tmpjqg208ty/tmpjqg208ty.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ade22b28c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ade2281fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ade2281f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ade2281e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjqg208ty                        0x00005632fd68562f <unavailable> + 5679\n5    libc.so.6                          0x00002ade22d14460 __libc_start_main + 245\n6    tmpjqg208ty                        0x00005632fd685169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while even == 0 || odd == 0 {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n        } else {\n            odd = list1[i]\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "tmpino7zxr7/tmpino7zxr7.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeb4c5aec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeb4c2a5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeb4c2a5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeb4c2a47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpino7zxr7                        0x00005592c586541e <unavailable> + 5150\n5    libc.so.6                          0x00002aeb4c79a460 __libc_start_main + 245\n6    tmpino7zxr7                        0x00005592c5865059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var result = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    result = even - odd\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if flag == 0 {\n                even = i\n                flag = 1\n            }\n        } else {\n            if flag == 0 {\n                odd = i\n                flag = 1\n            }\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "tmpmic07ldc/tmpmic07ldc.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adeb9920c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adeb9617b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adeb9617988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adeb96167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmic07ldc                        0x000055b0d220a52e <unavailable> + 5422\n5    libc.so.6                          0x00002adeb9b0c460 __libc_start_main + 245\n6    tmpmic07ldc                        0x000055b0d220a169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    if count == 0 {\n        return 0\n    }\n    for j in list1 {\n        if j % 2 != 0 {\n            odd = j\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var diff = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    diff = even - odd\n    return diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var evenFound = false\n    var oddFound = false\n    for i in list1 {\n        if i % 2 == 0 {\n            if !evenFound {\n                even = i\n                evenFound = true\n            }\n        } else {\n            if !oddFound {\n                odd = i\n                oddFound = true\n            }\n        }\n        if evenFound && oddFound {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = false\n    for i in list1 {\n        if i % 2 == 0 {\n            if flag == false {\n                even = i\n                flag = true\n            }\n        } else {\n            if flag == false {\n                odd = i\n                flag = true\n            }\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "tmpt_kaq83c/tmpt_kaq83c.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6cf1c04c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6cf18fbb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6cf18fb988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6cf18fa7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpt_kaq83c                        0x000055d463ae552e <unavailable> + 5422\n5    libc.so.6                          0x00002b6cf1df0460 __libc_start_main + 245\n6    tmpt_kaq83c                        0x000055d463ae5169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for number in list1 {\n        if number % 2 == 0 {\n            even = number\n            count += 1\n            break\n        }\n    }\n    for number in list1 {\n        if number % 2 != 0 {\n            odd = number\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = true\n    for i in list1 {\n        if i % 2 == 0 {\n            if flag {\n                even = i\n                flag = false\n            }\n        } else {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "tmp2dh7ag3q/tmp2dh7ag3q.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba84397cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba843673b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba843673988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba8436727b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2dh7ag3q                        0x0000561b3695d52e <unavailable> + 5422\n5    libc.so.6                          0x00002ba843b68460 __libc_start_main + 245\n6    tmp2dh7ag3q                        0x0000561b3695d169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even_num = 0\n    var odd_num = 0\n    var diff = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even_num = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd_num = i\n            break\n        }\n    }\n    diff = even_num - odd_num\n    return diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if flag == 0 {\n                even = i\n                flag = 1\n            }\n        } else {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "tmpob5nmdcl/tmpob5nmdcl.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af6ec43dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af6ec134b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af6ec134988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af6ec1337b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpob5nmdcl                        0x00005645876c252e <unavailable> + 5422\n5    libc.so.6                          0x00002af6ec629460 __libc_start_main + 245\n6    tmpob5nmdcl                        0x00005645876c2169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    var diff = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        diff = even - odd\n    }\n    return diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var diff = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    diff = even - odd\n    return diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if flag == 0 {\n                even = i\n                flag = 1\n            }\n        } else {\n            if flag == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "tmptt_0tkyx/tmptt_0tkyx.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1dc1955c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1dc164cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1dc164c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1dc164b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptt_0tkyx                        0x0000558d5e09c62f <unavailable> + 5679\n5    libc.so.6                          0x00002b1dc1b41460 __libc_start_main + 245\n6    tmptt_0tkyx                        0x0000558d5e09c169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if flag == 0 {\n                even = i\n                flag = 1\n            }\n        } else {\n            if flag == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "tmptt_0tkyx/tmptt_0tkyx.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1dc1955c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1dc164cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1dc164c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1dc164b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptt_0tkyx                        0x0000558d5e09c62f <unavailable> + 5679\n5    libc.so.6                          0x00002b1dc1b41460 __libc_start_main + 245\n6    tmptt_0tkyx                        0x0000558d5e09c169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even: Int = 0\n    var odd: Int = 0\n    var count: Int = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n        count += 1\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n        count += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var result = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    result = even - odd\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    if count == 0 {\n        return 0\n    }\n    for j in list1 {\n        if j % 2 != 0 {\n            odd = j\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = false\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            flag = true\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    if flag {\n        return even - odd\n    } else {\n        return odd - even\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for j in list1 {\n        if j % 2 != 0 {\n            odd = j\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var diff = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    diff = even - odd\n    return diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    for i in 0..<list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n    }\n    for i in 0..<list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = false\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            flag = true\n            break\n        }\n    }\n    if flag == false {\n        return 0\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for j in list1 {\n        if j % 2 != 0 {\n            odd = j\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for j in list1 {\n        if j % 2 != 0 {\n            odd = j\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while even == 0 || odd == 0 {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n        } else {\n            odd = list1[i]\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "tmpino7zxr7/tmpino7zxr7.swift:31: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aeb4c5aec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aeb4c2a5b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aeb4c2a5988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aeb4c2a47b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpino7zxr7                        0x00005592c586541e <unavailable> + 5150\n5    libc.so.6                          0x00002aeb4c79a460 __libc_start_main + 245\n6    tmpino7zxr7                        0x00005592c5865059 <unavailable> + 4185\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var foundEven = false\n    var foundOdd = false\n    for item in list1 {\n        if item % 2 == 0 {\n            even = item\n            foundEven = true\n        } else {\n            odd = item\n            foundOdd = true\n        }\n        if foundEven && foundOdd {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "tmpwdzdf1bk/tmpwdzdf1bk.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b6074d74c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b6074a6bb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b6074a6b988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b6074a6a7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwdzdf1bk                        0x000055778aaae52e <unavailable> + 5422\n5    libc.so.6                          0x00002b6074f60460 __libc_start_main + 245\n6    tmpwdzdf1bk                        0x000055778aaae169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var diff = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    diff = even - odd\n    return diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var diff = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    diff = even - odd\n    return diff\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    if count == 0 {\n        return 0\n    }\n    for j in list1 {\n        if j % 2 != 0 {\n            odd = j\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = true\n    for i in list1 {\n        if i % 2 == 0 {\n            if flag {\n                even = i\n                flag = false\n            }\n        } else {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "tmp2dh7ag3q/tmp2dh7ag3q.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ba84397cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ba843673b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ba843673988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ba8436727b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp2dh7ag3q                        0x0000561b3695d52e <unavailable> + 5422\n5    libc.so.6                          0x00002ba843b68460 __libc_start_main + 245\n6    tmp2dh7ag3q                        0x0000561b3695d169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    }\n    return 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = false\n    var flag1 = false\n    for i in list1 {\n        if i % 2 == 0 && flag == false {\n            even = i\n            flag = true\n        }\n        if i % 2 != 0 && flag1 == false {\n            odd = i\n            flag1 = true\n        }\n        if flag == true && flag1 == true {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    if count == 0 {\n        return 0\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var result = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    result = even - odd\n    return result\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var firstEven = 0\n    var firstOdd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if count == 0 {\n                firstEven = i\n                count += 1\n            }\n            even += 1\n        } else {\n            if count == 0 {\n                firstOdd = i\n                count += 1\n            }\n            odd += 1\n        }\n    }\n    if even == 0 {\n        return 0\n    } else if odd == 0 {\n        return 0\n    } else {\n        return firstEven - firstOdd\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "tmp7g2viizu/tmp7g2viizu.swift:46: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b81b7be9c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b81b78e0b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b81b78e0988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b81b78df7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7g2viizu                        0x000055a218a3552e <unavailable> + 5422\n5    libc.so.6                          0x00002b81b7dd5460 __libc_start_main + 245\n6    tmp7g2viizu                        0x000055a218a35169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    if count == 0 {\n        return 0\n    }\n    for j in list1 {\n        if j % 2 != 0 {\n            odd = j\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even_num = 0\n    var odd_num = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even_num = i\n            count += 1\n            break\n        }\n    }\n    if count == 0 {\n        return 0\n    }\n    for j in list1 {\n        if j % 2 != 0 {\n            odd_num = j\n            break\n        }\n    }\n    return even_num - odd_num\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = false\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            flag = true\n            break\n        }\n    }\n    if flag == false {\n        return 0\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var foundEven = false\n    var foundOdd = false\n    \n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            foundEven = true\n        }\n        if i % 2 != 0 {\n            odd = i\n            foundOdd = true\n        }\n        if foundEven && foundOdd {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "tmp6uyy78ja/tmp6uyy78ja.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af7122e5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af711fdcb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af711fdc988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af711fdb7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6uyy78ja                        0x000055d5bd30552e <unavailable> + 5422\n5    libc.so.6                          0x00002af7124d1460 __libc_start_main + 245\n6    tmp6uyy78ja                        0x000055d5bd305169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 && count == 0 {\n            even = i\n            count += 1\n        } else if i % 2 != 0 && count == 0 {\n            odd = i\n            count += 1\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "tmp6bn_28c_/tmp6bn_28c_.swift:32: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b05383b1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b05380a8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b05380a8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b05380a77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp6bn_28c_                        0x000055a2fa89c52e <unavailable> + 5422\n5    libc.so.6                          0x00002b053859d460 __libc_start_main + 245\n6    tmp6bn_28c_                        0x000055a2fa89c169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for j in list1 {\n        if j % 2 != 0 {\n            odd = j\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even_num = 0\n    var odd_num = 0\n    var flag = false\n    for i in list1 {\n        if i % 2 == 0 {\n            even_num = i\n            flag = true\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd_num = i\n            break\n        }\n    }\n    if flag {\n        return even_num - odd_num\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if flag == 0 {\n                even = i\n                flag = 1\n            }\n        }\n        else {\n            if flag == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "tmpjqg208ty/tmpjqg208ty.swift:38: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ade22b28c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ade2281fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ade2281f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ade2281e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpjqg208ty                        0x00005632fd68562f <unavailable> + 5679\n5    libc.so.6                          0x00002ade22d14460 __libc_start_main + 245\n6    tmpjqg208ty                        0x00005632fd685169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even: Int = 0\n    var odd: Int = 0\n    var flag: Bool = true\n    for i in list1 {\n        if i % 2 == 0 {\n            if flag {\n                even = i\n                flag = false\n            }\n        } else {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "tmp97hdcb31/tmp97hdcb31.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2050ca6c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b205099db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b205099d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b205099c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp97hdcb31                        0x000055d850e4d52e <unavailable> + 5422\n5    libc.so.6                          0x00002b2050e92460 __libc_start_main + 245\n6    tmp97hdcb31                        0x000055d850e4d169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even: Int = 0\n    var odd: Int = 0\n    var foundEven = false\n    var foundOdd = false\n    for number in list1 {\n        if number % 2 == 0 {\n            even = number\n            foundEven = true\n        } else {\n            odd = number\n            foundOdd = true\n        }\n        if foundEven && foundOdd {\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "tmp4z1ncml2/tmp4z1ncml2.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ac962613c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ac96230ab6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ac96230a988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ac9623097b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp4z1ncml2                        0x000055a4655e152e <unavailable> + 5422\n5    libc.so.6                          0x00002ac9627ff460 __libc_start_main + 245\n6    tmp4z1ncml2                        0x000055a4655e1169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = false\n    for i in list1 {\n        if i % 2 == 0 {\n            if flag == false {\n                even = i\n                flag = true\n            }\n        } else {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "tmpd4wwyyly/tmpd4wwyyly.swift:34: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b0684187c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b0683e7eb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b0683e7e988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b0683e7d7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpd4wwyyly                        0x0000562ec758152e <unavailable> + 5422\n5    libc.so.6                          0x00002b0684373460 __libc_start_main + 245\n6    tmpd4wwyyly                        0x0000562ec7581169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for j in list1 {\n        if j % 2 != 0 {\n            odd = j\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    }\n    else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var count = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            count += 1\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            count += 1\n            break\n        }\n    }\n    if count == 2 {\n        return even - odd\n    } else {\n        return 0\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if flag == 0 {\n                even = i\n                flag = 1\n            }\n        } else {\n            if flag == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "tmptt_0tkyx/tmptt_0tkyx.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1dc1955c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1dc164cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1dc164c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1dc164b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptt_0tkyx                        0x0000558d5e09c62f <unavailable> + 5679\n5    libc.so.6                          0x00002b1dc1b41460 __libc_start_main + 245\n6    tmptt_0tkyx                        0x0000558d5e09c169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            even = i\n            break\n        }\n    }\n    for i in list1 {\n        if i % 2 != 0 {\n            odd = i\n            break\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if flag == 0 {\n                even = i\n                flag = 1\n            }\n        } else {\n            if flag == 0 {\n                odd = i\n                flag = 1\n            }\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "tmpmic07ldc/tmpmic07ldc.swift:36: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adeb9920c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adeb9617b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adeb9617988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adeb96167b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpmic07ldc                        0x000055b0d220a52e <unavailable> + 5422\n5    libc.so.6                          0x00002adeb9b0c460 __libc_start_main + 245\n6    tmpmic07ldc                        0x000055b0d220a169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var flag = 0\n    for i in list1 {\n        if i % 2 == 0 {\n            if flag == 0 {\n                even = i\n                flag = 1\n            }\n        } else {\n            if flag == 1 {\n                odd = i\n                break\n            }\n        }\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1666123563,
      "stdout": "",
      "stderr": "tmptt_0tkyx/tmptt_0tkyx.swift:37: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1dc1955c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1dc164cb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1dc164c988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1dc164b7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmptt_0tkyx                        0x0000558d5e09c62f <unavailable> + 5679\n5    libc.so.6                          0x00002b1dc1b41460 __libc_start_main + 245\n6    tmptt_0tkyx                        0x0000558d5e09c169 <unavailable> + 4457\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\n/// Write a function to find the difference of the first even and first odd number of a given array.\nfunc diff_even_odd(list1: [Int]) -> Int {\n    var even = 0\n    var odd = 0\n    var i = 0\n    while i < list1.count {\n        if list1[i] % 2 == 0 {\n            even = list1[i]\n            break\n        }\n        i += 1\n    }\n    i = 0\n    while i < list1.count {\n        if list1[i] % 2 != 0 {\n            odd = list1[i]\n            break\n        }\n        i += 1\n    }\n    return even - odd\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(diff_even_odd(list1: [1, 3, 5, 7, 4, 1, 6, 8]) == 3)\nassert(diff_even_odd(list1: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == 1)\nassert(diff_even_odd(list1: [1, 5, 7, 9, 10]) == 9)",
      "timestamp": 1665517491,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}