{
  "name": "mbpp_294_max_val",
  "language": "swift",
  "prompt": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n",
  "doctests": "transform",
  "original": "/home/arjun/repos/MultiPL-E/datasets/../datasets/mbpp-typed/mbpp_294_max_val.py",
  "prompt_terminology": "reworded",
  "tests": "}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
  "stop_tokens": [
    "\n}"
  ],
  "results": [
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > max {\n                max = intval\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var maxval = 0\n    for val in listval {\n        switch val {\n        case .success(let strval):\n            if let intval = Int(strval) {\n                if intval > maxval {\n                    maxval = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > maxval {\n                maxval = intval\n            }\n        }\n    }\n    return maxval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > max {\n                max = intval\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for item in listval {\n        switch item {\n        case .success(let value):\n            if let intval = Int(value) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let error):\n            print(\"Error: \\(error)\")\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "tmps18d3ax5/tmps18d3ax5.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2f43a5cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2f43753b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2f43753988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2f437527b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmps18d3ax5                        0x0000563f7167ccba <unavailable> + 7354\n5    libc.so.6                          0x00002b2f43c48460 __libc_start_main + 245\n6    tmps18d3ax5                        0x0000563f7167c879 <unavailable> + 6265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max_val = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max_val {\n                    max_val = intval\n                }\n            }\n        case .failure(let val):\n            if val > max_val {\n                max_val = val\n            }\n        }\n    }\n    return max_val\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max_val = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let val = Int(val) {\n                if val > max_val {\n                    max_val = val\n                }\n            }\n        case .failure(let val):\n            if val > max_val {\n                max_val = val\n            }\n        }\n    }\n    return max_val\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intVal = Int(str) {\n                if intVal > max {\n                    max = intVal\n                }\n            }\n        case .failure(let intVal):\n            if intVal > max {\n                max = intVal\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let val):\n            if val > max {\n                max = val\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > max {\n                max = intval\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case let .success(value):\n            if let intval = Int(value) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case let .failure(value):\n            if value > max {\n                max = value\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let value):\n            if let intval = Int(value) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let error):\n            if error > max {\n                max = error\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.map {\n        switch $0 {\n        case .success(let val):\n            return Int(val)!\n        case .failure(let val):\n            return val\n        }\n    }.max()!\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "tmprdmua6oi/tmprdmua6oi.swift:9: Fatal error: Unexpectedly found nil while unwrapping an Optional value\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aae836dec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aae833d5561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002aae833d5286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002aae833d513c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002aae833d4bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmprdmua6oi                        0x000055a5d74b8f13 <unavailable> + 7955\n6    libswiftCore.so                    0x00002aae833bd820 Collection.map<A>(_:) + 426\n7    tmprdmua6oi                        0x000055a5d74b8caa <unavailable> + 7338\n8    tmprdmua6oi                        0x000055a5d74b88fc <unavailable> + 6396\n9    libc.so.6                          0x00002aae838ca460 __libc_start_main + 245\n10   tmprdmua6oi                        0x000055a5d74b8539 <unavailable> + 5433\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for item in listval {\n        switch item {\n        case .success(let value):\n            if let intval = Int(value) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let error):\n            if error > max {\n                max = error\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var maxval = 0\n    for val in listval {\n        switch val {\n        case .success(let strval):\n            if let intval = Int(strval) {\n                if intval > maxval {\n                    maxval = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > maxval {\n                maxval = intval\n            }\n        }\n    }\n    return maxval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let val):\n            if val > max {\n                max = val\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let val):\n            if val > max {\n                max = val\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var maxval = 0\n    for val in listval {\n        switch val {\n        case let .success(strval):\n            if let intval = Int(strval) {\n                if intval > maxval {\n                    maxval = intval\n                }\n            }\n        case let .failure(intval):\n            if intval > maxval {\n                maxval = intval\n            }\n        }\n    }\n    return maxval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let value):\n            if let intval = Int(value) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let error):\n            if error > max {\n                max = error\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for item in listval {\n        switch item {\n        case .success(let value):\n            if let intValue = Int(value) {\n                if intValue > max {\n                    max = intValue\n                }\n            }\n        case .failure(let error):\n            print(\"Error: \\(error)\")\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "tmp5_sto773/tmp5_sto773.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b690cbcbc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b690c8c2b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b690c8c2988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b690c8c17b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp5_sto773                        0x000055a73be7dcba <unavailable> + 7354\n5    libc.so.6                          0x00002b690cdb7460 __libc_start_main + 245\n6    tmp5_sto773                        0x000055a73be7d879 <unavailable> + 6265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for value in listval {\n        switch value {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let err):\n            if err > max {\n                max = err\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.compactMap {\n        switch $0 {\n        case .success(let val):\n            return Int(val)\n        case .failure(let val):\n            return val\n        }\n    }.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let value):\n            if let intval = Int(value) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let error):\n            if error > max {\n                max = error\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) { (acc, val) -> Int in\n        switch val {\n        case .success(let str):\n            return max(acc, Int(str) ?? 0)\n        case .failure(let int):\n            return max(acc, int)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let val):\n            if val > max {\n                max = val\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intVal = Int(str) {\n                if intVal > max {\n                    max = intVal\n                }\n            }\n        case .failure(let intVal):\n            if intVal > max {\n                max = intVal\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max_val = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let int_val = Int(val) {\n                if int_val > max_val {\n                    max_val = int_val\n                }\n            }\n        case .failure(let val):\n            if val > max_val {\n                max_val = val\n            }\n        }\n    }\n    return max_val\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let val):\n            if val > max {\n                max = val\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max_val = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let int_val = Int(val) {\n                if int_val > max_val {\n                    max_val = int_val\n                }\n            }\n        case .failure(let val):\n            if val > max_val {\n                max_val = val\n            }\n        }\n    }\n    return max_val\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var maxval = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > maxval {\n                    maxval = intval\n                }\n            }\n        case .failure(let val):\n            if val > maxval {\n                maxval = val\n            }\n        }\n    }\n    return maxval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case let .success(str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case let .failure(int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) {\n        switch $1 {\n        case .success(let val):\n            return max($0, Int(val)!)\n        case .failure(let val):\n            return max($0, val)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "tmp__x7oz03/tmp__x7oz03.swift:9: Fatal error: Unexpectedly found nil while unwrapping an Optional value\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab087dd3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab087aca561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ab087aca286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ab087aca13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ab087ac9bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp__x7oz03                        0x000055ca82bd4e62 <unavailable> + 7778\n6    libswiftCore.so                    0x00002ab087bd9410 Sequence.reduce<A>(_:_:) + 530\n7    tmp__x7oz03                        0x000055ca82bd4c77 <unavailable> + 7287\n8    tmp__x7oz03                        0x000055ca82bd48bc <unavailable> + 6332\n9    libc.so.6                          0x00002ab087fbf460 __libc_start_main + 245\n10   tmp__x7oz03                        0x000055ca82bd44f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max_val = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let int_val = Int(val) {\n                if int_val > max_val {\n                    max_val = int_val\n                }\n            }\n        case .failure(let err):\n            print(\"Error: \\(err)\")\n        }\n    }\n    return max_val\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "tmpl9c5yh_y/tmpl9c5yh_y.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b57edafac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b57ed7f1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b57ed7f1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b57ed7f07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpl9c5yh_y                        0x000055bee1a7acba <unavailable> + 7354\n5    libc.so.6                          0x00002b57edce6460 __libc_start_main + 245\n6    tmpl9c5yh_y                        0x000055bee1a7a879 <unavailable> + 6265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > max {\n                max = intval\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > max {\n                max = intval\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for item in listval {\n        switch item {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let val):\n            if val > max {\n                max = val\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let s):\n            if let i = Int(s) {\n                if i > max {\n                    max = i\n                }\n            }\n        case .failure(let i):\n            if i > max {\n                max = i\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let num = Int(str) {\n                if num > max {\n                    max = num\n                }\n            }\n        case .failure(let err):\n            if err > max {\n                max = err\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > max {\n                max = intval\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case let .success(str):\n            if let int = Int(str) {\n                max = max > int ? max : int\n            }\n        case let .failure(int):\n            max = max > int ? max : int\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let err):\n            if err > max {\n                max = err\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let value):\n            if let intVal = Int(value) {\n                if intVal > max {\n                    max = intVal\n                }\n            }\n        case .failure(let error):\n            print(\"Error: \\(error)\")\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "tmpuifiyxp7/tmpuifiyxp7.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ae66005ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ae65fd55b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ae65fd55988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ae65fd547b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpuifiyxp7                        0x000055e2ea449cba <unavailable> + 7354\n5    libc.so.6                          0x00002ae66024a460 __libc_start_main + 245\n6    tmpuifiyxp7                        0x000055e2ea449879 <unavailable> + 6265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for item in listval {\n        switch item {\n        case .success(let value):\n            if let intVal = Int(value) {\n                if intVal > max {\n                    max = intVal\n                }\n            }\n        case .failure(let error):\n            print(\"Error: \\(error)\")\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "tmp7dnm_qnt/tmp7dnm_qnt.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab915d62c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab915a59b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab915a59988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab915a587b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp7dnm_qnt                        0x0000556aecbe7cba <unavailable> + 7354\n5    libc.so.6                          0x00002ab915f4e460 __libc_start_main + 245\n6    tmp7dnm_qnt                        0x0000556aecbe7879 <unavailable> + 6265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let value):\n            if let intval = Int(value) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let error):\n            if error > max {\n                max = error\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > max {\n                max = intval\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max_value = 0\n    for val in listval {\n        switch val {\n        case .success(let value):\n            if let int_val = Int(value) {\n                if int_val > max_value {\n                    max_value = int_val\n                }\n            }\n        case .failure(let error):\n            print(error)\n        }\n    }\n    return max_value\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "tmpbzmyt460/tmpbzmyt460.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af63e081c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af63dd78b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af63dd78988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af63dd777b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpbzmyt460                        0x0000555bb4f34a2a <unavailable> + 6698\n5    libc.so.6                          0x00002af63e26d460 __libc_start_main + 245\n6    tmpbzmyt460                        0x0000555bb4f345e9 <unavailable> + 5609\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case let .Success(value):\n            if let val = Int(value) {\n                if val > max {\n                    max = val\n                }\n            }\n        case let .Failure(error):\n            if error > max {\n                max = error\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123695,
      "stdout": "",
      "stderr": "/tmp/tmpnqb73325.swift:9:19: error: type 'Result<String, Int>' has no member 'Success'\n        case let .Success(value):\n                 ~^~~~~~~\n/tmp/tmpnqb73325.swift:15:19: error: type 'Result<String, Int>' has no member 'Failure'\n        case let .Failure(error):\n                 ~^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let val):\n            if val > max {\n                max = val\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case let .success(val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case let .failure(val):\n            if val > max {\n                max = val\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intVal = Int(str) {\n                if intVal > max {\n                    max = intVal\n                }\n            }\n        case .failure(let intVal):\n            if intVal > max {\n                max = intVal\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for i in listval {\n        switch i {\n        case .success(let value):\n            if let val = Int(value) {\n                if val > max {\n                    max = val\n                }\n            }\n        case .failure(let error):\n            if error > max {\n                max = error\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var maxval = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > maxval {\n                    maxval = intval\n                }\n            }\n        case .failure(let val):\n            if val > maxval {\n                maxval = val\n            }\n        }\n    }\n    return maxval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) { (acc, val) -> Int in\n        switch val {\n        case .success(let str):\n            return max(acc, Int(str) ?? 0)\n        case .failure(let int):\n            return max(acc, int)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let val):\n            if val > max {\n                max = val\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > max {\n                max = intval\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > max {\n                max = intval\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var maxval = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval > maxval {\n                    maxval = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > maxval {\n                maxval = intval\n            }\n        }\n    }\n    return maxval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for item in listval {\n        switch item {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let err):\n            print(\"Error: \\(err)\")\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "tmpkpb3448d/tmpkpb3448d.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aab66b6dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aab66864b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aab66864988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aab668637b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkpb3448d                        0x000055bb83c53cba <unavailable> + 7354\n5    libc.so.6                          0x00002aab66d59460 __libc_start_main + 245\n6    tmpkpb3448d                        0x000055bb83c53879 <unavailable> + 6265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.map {\n        switch $0 {\n        case .success(let str):\n            return Int(str) ?? 0\n        case .failure(let int):\n            return int\n        }\n    }.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let val):\n            if val > max {\n                max = val\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for value in listval {\n        switch value {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let err):\n            if err > max {\n                max = err\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if Int(val) ?? 0 > max {\n                max = Int(val) ?? 0\n            }\n        case .failure(let val):\n            if val > max {\n                max = val\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.map({\n        switch $0 {\n        case .success(let val):\n            return Int(val) ?? 0\n        case .failure(let val):\n            return val\n        }\n    }).max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max_val = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let int_val = Int(val) {\n                if int_val > max_val {\n                    max_val = int_val\n                }\n            }\n        case .failure(let val):\n            if val > max_val {\n                max_val = val\n            }\n        }\n    }\n    return max_val\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) { (res, val) -> Int in\n        switch val {\n        case .success(let str):\n            return max(res, Int(str)!)\n        case .failure(let int):\n            return max(res, int)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "tmpx_gif__j/tmpx_gif__j.swift:9: Fatal error: Unexpectedly found nil while unwrapping an Optional value\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b032bee1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b032bbd8561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b032bbd8286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b032bbd813c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b032bbd7bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpx_gif__j                        0x0000555a737a1e62 <unavailable> + 7778\n6    libswiftCore.so                    0x00002b032bce7410 Sequence.reduce<A>(_:_:) + 530\n7    tmpx_gif__j                        0x0000555a737a1c77 <unavailable> + 7287\n8    tmpx_gif__j                        0x0000555a737a18bc <unavailable> + 6332\n9    libc.so.6                          0x00002b032c0cd460 __libc_start_main + 245\n10   tmpx_gif__j                        0x0000555a737a14f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case let .Success(value):\n            if let intval = Int(value) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case let .Failure(value):\n            if value > max {\n                max = value\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "/tmp/tmpko3nokgt.swift:9:19: error: type 'Result<String, Int>' has no member 'Success'\n        case let .Success(value):\n                 ~^~~~~~~\n/tmp/tmpko3nokgt.swift:15:19: error: type 'Result<String, Int>' has no member 'Failure'\n        case let .Failure(value):\n                 ~^~~~~~~\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let err):\n            if err > max {\n                max = err\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let strval):\n            if let intval = Int(strval) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > max {\n                max = intval\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let num = Int(str) {\n                if num > max {\n                    max = num\n                }\n            }\n        case .failure(let num):\n            if num > max {\n                max = num\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let value):\n            if let intVal = Int(value) {\n                if intVal > max {\n                    max = intVal\n                }\n            }\n        case .failure(let error):\n            print(error)\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "tmpsofmvemh/tmpsofmvemh.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ace5056ec80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ace50265b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ace50265988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ace502647b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsofmvemh                        0x000055ccf9c26a2a <unavailable> + 6698\n5    libc.so.6                          0x00002ace5075a460 __libc_start_main + 245\n6    tmpsofmvemh                        0x000055ccf9c265e9 <unavailable> + 5609\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > max {\n                max = intval\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > max {\n                max = intval\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var maxval = 0\n    for item in listval {\n        switch item {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > maxval {\n                    maxval = intval\n                }\n            }\n        case .failure(let err):\n            if err > maxval {\n                maxval = err\n            }\n        }\n    }\n    return maxval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) { (acc, val) -> Int in\n        switch val {\n        case .success(let str):\n            return max(acc, Int(str)!)\n        case .failure(let int):\n            return max(acc, int)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "tmpqe9v4dp6/tmpqe9v4dp6.swift:9: Fatal error: Unexpectedly found nil while unwrapping an Optional value\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adfdcc54c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adfdc94b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002adfdc94b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002adfdc94b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002adfdc94abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpqe9v4dp6                        0x000055b608636e62 <unavailable> + 7778\n6    libswiftCore.so                    0x00002adfdca5a410 Sequence.reduce<A>(_:_:) + 530\n7    tmpqe9v4dp6                        0x000055b608636c77 <unavailable> + 7287\n8    tmpqe9v4dp6                        0x000055b6086368bc <unavailable> + 6332\n9    libc.so.6                          0x00002adfdce40460 __libc_start_main + 245\n10   tmpqe9v4dp6                        0x000055b6086364f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let num = Int(str) {\n                if num > max {\n                    max = num\n                }\n            }\n        case .failure(let num):\n            if num > max {\n                max = num\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let val):\n            if val > max {\n                max = val\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let value):\n            if let intval = Int(value) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let error):\n            print(\"Error: \\(error)\")\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "tmpemk81dy6/tmpemk81dy6.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002af699c16c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002af69990db6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002af69990d988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002af69990c7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpemk81dy6                        0x00005620d8748cba <unavailable> + 7354\n5    libc.so.6                          0x00002af699e02460 __libc_start_main + 245\n6    tmpemk81dy6                        0x00005620d8748879 <unavailable> + 6265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let err):\n            if err > max {\n                max = err\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let val):\n            if val > max {\n                max = val\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max_val = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval > max_val {\n                    max_val = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > max_val {\n                max_val = intval\n            }\n        }\n    }\n    return max_val\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for value in listval {\n        switch value {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let err):\n            if err > max {\n                max = err\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var maxval = 0\n    for val in listval {\n        switch val {\n        case .success(let strval):\n            if let intval = Int(strval) {\n                if intval > maxval {\n                    maxval = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > maxval {\n                maxval = intval\n            }\n        }\n    }\n    return maxval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let value):\n            if let intval = Int(value) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let error):\n            print(error)\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "tmpe0d9rxum/tmpe0d9rxum.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b13efd28c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b13efa1fb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b13efa1f988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b13efa1e7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpe0d9rxum                        0x000056472b396a2a <unavailable> + 6698\n5    libc.so.6                          0x00002b13eff14460 __libc_start_main + 245\n6    tmpe0d9rxum                        0x000056472b3965e9 <unavailable> + 5609\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let val):\n            if val > max {\n                max = val\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                max = max > intval ? max : intval\n            }\n        case .failure(let intval):\n            max = max > intval ? max : intval\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > max {\n                max = intval\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var maxval = 0\n    for val in listval {\n        switch val {\n        case .success(let strval):\n            if let intval = Int(strval) {\n                if intval > maxval {\n                    maxval = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > maxval {\n                maxval = intval\n            }\n        }\n    }\n    return maxval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > max {\n                max = intval\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let num = Int(str) {\n                if num > max {\n                    max = num\n                }\n            }\n        case .failure(let num):\n            if num > max {\n                max = num\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let val):\n            if val > max {\n                max = val\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let val):\n            if val > max {\n                max = val\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for i in listval {\n        switch i {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let error):\n            print(\"Error: \\(error)\")\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "tmpwmp48_gh/tmpwmp48_gh.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b1dc4c79c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b1dc4970b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b1dc4970988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b1dc496f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpwmp48_gh                        0x000055b14d2d7cba <unavailable> + 7354\n5    libc.so.6                          0x00002b1dc4e65460 __libc_start_main + 245\n6    tmpwmp48_gh                        0x000055b14d2d7879 <unavailable> + 6265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) {\n        switch $1 {\n        case .success(let str):\n            return max($0, Int(str)!)\n        case .failure(let int):\n            return max($0, int)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "tmp1_es4hmi/tmp1_es4hmi.swift:9: Fatal error: Unexpectedly found nil while unwrapping an Optional value\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b7152cf4c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b71529eb561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002b71529eb286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002b71529eb13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002b71529eabb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp1_es4hmi                        0x00005609bb920e62 <unavailable> + 7778\n6    libswiftCore.so                    0x00002b7152afa410 Sequence.reduce<A>(_:_:) + 530\n7    tmp1_es4hmi                        0x00005609bb920c77 <unavailable> + 7287\n8    tmp1_es4hmi                        0x00005609bb9208bc <unavailable> + 6332\n9    libc.so.6                          0x00002b7152ee0460 __libc_start_main + 245\n10   tmp1_es4hmi                        0x00005609bb9204f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) { (max, value) -> Int in\n        switch value {\n        case .success(let val):\n            return max > Int(val) ? max : Int(val)\n        case .failure(let val):\n            return max > val ? max : val\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "/tmp/tmpd0879jht.swift:9:26: error: value of optional type 'Int?' must be unwrapped to a value of type 'Int'\n            return max > Int(val) ? max : Int(val)\n                         ^\n/tmp/tmpd0879jht.swift:9:26: note: coalesce using '??' to provide a default when the optional value contains 'nil'\n            return max > Int(val) ? max : Int(val)\n                         ^\n                                  ?? <#default value#>\n/tmp/tmpd0879jht.swift:9:26: note: force-unwrap using '!' to abort execution if the optional value contains 'nil'\n            return max > Int(val) ? max : Int(val)\n                         ^\n                                 !\n/tmp/tmpd0879jht.swift:9:35: error: cannot convert return expression of type 'Int?' to return type 'Int'\n            return max > Int(val) ? max : Int(val)\n                   ~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~\n                                                  !\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > max {\n                max = intval\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let val):\n            if val > max {\n                max = val\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for item in listval {\n        switch item {\n        case .success(let value):\n            if let val = Int(value) {\n                if val > max {\n                    max = val\n                }\n            }\n        case .failure(let error):\n            print(\"Error: \\(error)\")\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "tmph3780fm8/tmph3780fm8.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b8b924e0c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b8b921d7b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b8b921d7988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b8b921d67b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmph3780fm8                        0x0000560c9e726cba <unavailable> + 7354\n5    libc.so.6                          0x00002b8b926cc460 __libc_start_main + 245\n6    tmph3780fm8                        0x0000560c9e726879 <unavailable> + 6265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > max {\n                max = intval\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max_val = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let val = Int(val) {\n                if val > max_val {\n                    max_val = val\n                }\n            }\n        case .failure(let val):\n            if val > max_val {\n                max_val = val\n            }\n        }\n    }\n    return max_val\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > max {\n                max = intval\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let val):\n            if val > max {\n                max = val\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var maxval = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > maxval {\n                    maxval = intval\n                }\n            }\n        case .failure(let val):\n            if val > maxval {\n                maxval = val\n            }\n        }\n    }\n    return maxval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let val):\n            if val > max {\n                max = val\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.compactMap {\n        switch $0 {\n        case .success(let val):\n            return Int(val)\n        case .failure(let val):\n            return val\n        }\n    }.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var maxval = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval > maxval {\n                    maxval = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > maxval {\n                maxval = intval\n            }\n        }\n    }\n    return maxval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let err):\n            if err > max {\n                max = err\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for item in listval {\n        switch item {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let err):\n            print(\"Error: \\(err)\")\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "tmpkpb3448d/tmpkpb3448d.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aab66b6dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aab66864b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aab66864988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aab668637b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkpb3448d                        0x000055bb83c53cba <unavailable> + 7354\n5    libc.so.6                          0x00002aab66d59460 __libc_start_main + 245\n6    tmpkpb3448d                        0x000055bb83c53879 <unavailable> + 6265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) { (acc, val) -> Int in\n        switch val {\n        case .success(let str):\n            return acc > Int(str) ?? 0 ? acc : Int(str) ?? 0\n        case .failure(let int):\n            return acc > int ? acc : int\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.map {\n        switch $0 {\n        case .success(let val):\n            return Int(val) ?? 0\n        case .failure(let val):\n            return val\n        }\n    }.max() ?? 0\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for item in listval {\n        switch item {\n        case .success(let value):\n            if let val = Int(value) {\n                if val > max {\n                    max = val\n                }\n            }\n        case .failure(let error):\n            if error > max {\n                max = error\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var maxval = 0\n    for val in listval {\n        switch val {\n        case let .success(strval):\n            if let intval = Int(strval) {\n                if intval > maxval {\n                    maxval = intval\n                }\n            }\n        case let .failure(intval):\n            if intval > maxval {\n                maxval = intval\n            }\n        }\n    }\n    return maxval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > max {\n                max = intval\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max_val = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int_val = Int(str) {\n                if int_val > max_val {\n                    max_val = int_val\n                }\n            }\n        case .failure(let int_val):\n            if int_val > max_val {\n                max_val = int_val\n            }\n        }\n    }\n    return max_val\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let value):\n            if let intval = Int(value) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let value):\n            if value > max {\n                max = value\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let val = Int(val) {\n                if val > max {\n                    max = val\n                }\n            }\n        case .failure(let val):\n            if val > max {\n                max = val\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max_val = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int_val = Int(str) {\n                if int_val > max_val {\n                    max_val = int_val\n                }\n            }\n        case .failure(let int_val):\n            if int_val > max_val {\n                max_val = int_val\n            }\n        }\n    }\n    return max_val\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let num = Int(str) {\n                if num > max {\n                    max = num\n                }\n            }\n        case .failure(let num):\n            if num > max {\n                max = num\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var maxval = 0\n    for item in listval {\n        switch item {\n        case .success(let value):\n            if let val = Int(value) {\n                if val > maxval {\n                    maxval = val\n                }\n            }\n        case .failure(let error):\n            if error > maxval {\n                maxval = error\n            }\n        }\n    }\n    return maxval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let err):\n            print(\"Error: \\(err)\")\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "tmpv4n4dl4p/tmpv4n4dl4p.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2fb58b1c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2fb55a8b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2fb55a8988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2fb55a77b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpv4n4dl4p                        0x0000557d4413ccba <unavailable> + 7354\n5    libc.so.6                          0x00002b2fb5a9d460 __libc_start_main + 245\n6    tmpv4n4dl4p                        0x0000557d4413c879 <unavailable> + 6265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max_val: Int = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let val = Int(val) {\n                if val > max_val {\n                    max_val = val\n                }\n            }\n        case .failure(let val):\n            if val > max_val {\n                max_val = val\n            }\n        }\n    }\n    return max_val\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) { (acc, val) -> Int in\n        switch val {\n        case .success(let str):\n            return max(acc, Int(str)!)\n        case .failure(let int):\n            return max(acc, int)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "tmpqe9v4dp6/tmpqe9v4dp6.swift:9: Fatal error: Unexpectedly found nil while unwrapping an Optional value\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adfdcc54c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adfdc94b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002adfdc94b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002adfdc94b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002adfdc94abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpqe9v4dp6                        0x000055b608636e62 <unavailable> + 7778\n6    libswiftCore.so                    0x00002adfdca5a410 Sequence.reduce<A>(_:_:) + 530\n7    tmpqe9v4dp6                        0x000055b608636c77 <unavailable> + 7287\n8    tmpqe9v4dp6                        0x000055b6086368bc <unavailable> + 6332\n9    libc.so.6                          0x00002adfdce40460 __libc_start_main + 245\n10   tmpqe9v4dp6                        0x000055b6086364f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > max {\n                max = intval\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intVal = Int(str) {\n                if intVal > max {\n                    max = intVal\n                }\n            }\n        case .failure(let intVal):\n            if intVal > max {\n                max = intVal\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > max {\n                max = intval\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let val):\n            if val > max {\n                max = val\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > max {\n                max = intval\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var maxval = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > maxval {\n                    maxval = intval\n                }\n            }\n        case .failure(let val):\n            if val > maxval {\n                maxval = val\n            }\n        }\n    }\n    return maxval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > max {\n                max = intval\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max_val: Int = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let int_val = Int(val) {\n                if int_val > max_val {\n                    max_val = int_val\n                }\n            }\n        case .failure(let val):\n            if val > max_val {\n                max_val = val\n            }\n        }\n    }\n    return max_val\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intVal = Int(str) {\n                if intVal > max {\n                    max = intVal\n                }\n            }\n        case .failure(let err):\n            print(err)\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "tmpw60zxusm/tmpw60zxusm.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b18777f2c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b18774e9b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b18774e9988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b18774e87b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpw60zxusm                        0x0000563d97988a2a <unavailable> + 6698\n5    libc.so.6                          0x00002b18779de460 __libc_start_main + 245\n6    tmpw60zxusm                        0x0000563d979885e9 <unavailable> + 5609\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max_val = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max_val {\n                    max_val = intval\n                }\n            }\n        case .failure(let val):\n            if val > max_val {\n                max_val = val\n            }\n        }\n    }\n    return max_val\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max_val = 0\n    for val in listval {\n        switch val {\n        case let .success(val):\n            if let intval = Int(val) {\n                if intval > max_val {\n                    max_val = intval\n                }\n            }\n        case let .failure(val):\n            if val > max_val {\n                max_val = val\n            }\n        }\n    }\n    return max_val\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for item in listval {\n        switch item {\n        case .success(let value):\n            if let intval = Int(value) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let error):\n            print(\"Error: \\(error)\")\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "tmps18d3ax5/tmps18d3ax5.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b2f43a5cc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b2f43753b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b2f43753988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b2f437527b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmps18d3ax5                        0x0000563f7167ccba <unavailable> + 7354\n5    libc.so.6                          0x00002b2f43c48460 __libc_start_main + 245\n6    tmps18d3ax5                        0x0000563f7167c879 <unavailable> + 6265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max_val = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let int_val = Int(val) {\n                if int_val > max_val {\n                    max_val = int_val\n                }\n            }\n        case .failure(let val):\n            if val > max_val {\n                max_val = val\n            }\n        }\n    }\n    return max_val\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) {\n        switch $1 {\n        case .success(let val):\n            return max($0, Int(val)!)\n        case .failure(let val):\n            return max($0, val)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "tmp__x7oz03/tmp__x7oz03.swift:9: Fatal error: Unexpectedly found nil while unwrapping an Optional value\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab087dd3c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab087aca561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002ab087aca286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002ab087aca13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002ab087ac9bb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmp__x7oz03                        0x000055ca82bd4e62 <unavailable> + 7778\n6    libswiftCore.so                    0x00002ab087bd9410 Sequence.reduce<A>(_:_:) + 530\n7    tmp__x7oz03                        0x000055ca82bd4c77 <unavailable> + 7287\n8    tmp__x7oz03                        0x000055ca82bd48bc <unavailable> + 6332\n9    libc.so.6                          0x00002ab087fbf460 __libc_start_main + 245\n10   tmp__x7oz03                        0x000055ca82bd44f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max: Int = 0\n    for item in listval {\n        switch item {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let err):\n            print(\"Error: \\(err)\")\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "tmp_cb38ige/tmp_cb38ige.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b9115e90c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b9115b87b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b9115b87988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b9115b867b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp_cb38ige                        0x000055a7871eacba <unavailable> + 7354\n5    libc.so.6                          0x00002b911607c460 __libc_start_main + 245\n6    tmp_cb38ige                        0x000055a7871ea879 <unavailable> + 6265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) { (acc, val) -> Int in\n        switch val {\n        case .success(let str):\n            return max(acc, Int(str) ?? 0)\n        case .failure(let int):\n            return max(acc, int)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max_val = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval > max_val {\n                    max_val = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > max_val {\n                max_val = intval\n            }\n        }\n    }\n    return max_val\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max_val = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let int_val = Int(val) {\n                if int_val > max_val {\n                    max_val = int_val\n                }\n            }\n        case .failure(let error):\n            print(\"Error: \\(error)\")\n        }\n    }\n    return max_val\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "tmpaakvsatf/tmpaakvsatf.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b4c13e0fc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b4c13b06b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b4c13b06988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b4c13b057b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpaakvsatf                        0x00005575046b0cba <unavailable> + 7354\n5    libc.so.6                          0x00002b4c13ffb460 __libc_start_main + 245\n6    tmpaakvsatf                        0x00005575046b0879 <unavailable> + 6265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for i in listval {\n        switch i {\n        case .success(let value):\n            if let val = Int(value) {\n                if val > max {\n                    max = val\n                }\n            }\n        case .failure(let error):\n            if error > max {\n                max = error\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for i in listval {\n        switch i {\n        case .success(let val):\n            if let val = Int(val) {\n                if val > max {\n                    max = val\n                }\n            }\n        case .failure(let val):\n            if val > max {\n                max = val\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let err):\n            if err > max {\n                max = err\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var maxval = 0\n    for val in listval {\n        switch val {\n        case let .success(value):\n            if let intval = Int(value) {\n                if intval > maxval {\n                    maxval = intval\n                }\n            }\n        case let .failure(error):\n            if error > maxval {\n                maxval = error\n            }\n        }\n    }\n    return maxval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var maxval = 0\n    for val in listval {\n        switch val {\n        case .success(let value):\n            if let intval = Int(value) {\n                if intval > maxval {\n                    maxval = intval\n                }\n            }\n        case .failure(let error):\n            if error > maxval {\n                maxval = error\n            }\n        }\n    }\n    return maxval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let num = Int(str) {\n                if num > max {\n                    max = num\n                }\n            }\n        case .failure(let num):\n            if num > max {\n                max = num\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0, {\n        if case let Result.Error(val) = $1 {\n            return max($0, val)\n        } else {\n            return $0\n        }\n    })\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "/tmp/tmp6310xrcx.swift:7:41: error: cannot reference invalid declaration '$1'\n        if case let Result.Error(val) = $1 {\n                                        ^\n/tmp/tmp6310xrcx.swift:6:30: note: '$1' declared here\n    return listval.reduce(0, {\n                             ^\n",
      "exit_code": 1,
      "status": "SyntaxError"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for item in listval {\n        switch item {\n        case .success(let value):\n            if let intval = Int(value) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let error):\n            if error > max {\n                max = error\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int_val = Int(str) {\n                if int_val > max {\n                    max = int_val\n                }\n            }\n        case .failure(let int_val):\n            if int_val > max {\n                max = int_val\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                max = max < int ? int : max\n            }\n        case .failure(let int):\n            max = max < int ? int : max\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for item in listval {\n        switch item {\n        case .success(let string):\n            if let int = Int(string) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max_val = 0\n    for val in listval {\n        switch val {\n        case .success(let value):\n            if let int_val = Int(value) {\n                if int_val > max_val {\n                    max_val = int_val\n                }\n            }\n        case .failure(let error):\n            print(error)\n        }\n    }\n    return max_val\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "tmpxc9mtbu5/tmpxc9mtbu5.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aec987cac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aec984c1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aec984c1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aec984c07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxc9mtbu5                        0x000055c890934a2a <unavailable> + 6698\n5    libc.so.6                          0x00002aec989b6460 __libc_start_main + 245\n6    tmpxc9mtbu5                        0x000055c8909345e9 <unavailable> + 5609\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > max {\n                max = intval\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var maxval = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > maxval {\n                    maxval = intval\n                }\n            }\n        case .failure(let val):\n            if val > maxval {\n                maxval = val\n            }\n        }\n    }\n    return maxval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > max {\n                max = intval\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var maxval = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > maxval {\n                    maxval = intval\n                }\n            }\n        case .failure(let val):\n            if val > maxval {\n                maxval = val\n            }\n        }\n    }\n    return maxval\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let value):\n            if let intval = Int(value) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let error):\n            if error > max {\n                max = error\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let err):\n            print(\"Error: \\(err)\")\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "tmpsskm_kt9/tmpsskm_kt9.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002ab9d2a69c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002ab9d2760b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002ab9d2760988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002ab9d275f7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpsskm_kt9                        0x0000563887287cba <unavailable> + 7354\n5    libc.so.6                          0x00002ab9d2c55460 __libc_start_main + 245\n6    tmpsskm_kt9                        0x0000563887287879 <unavailable> + 6265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > max {\n                max = intval\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max_val = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let int_val = Int(val) {\n                if int_val > max_val {\n                    max_val = int_val\n                }\n            }\n        case .failure(let val):\n            if val > max_val {\n                max_val = val\n            }\n        }\n    }\n    return max_val\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intVal = Int(str) {\n                if intVal > max {\n                    max = intVal\n                }\n            }\n        case .failure(let intVal):\n            if intVal > max {\n                max = intVal\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intVal = Int(str) {\n                if intVal > max {\n                    max = intVal\n                }\n            }\n        case .failure(let intVal):\n            if intVal > max {\n                max = intVal\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let int = Int(str) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max_value: Int = 0\n    for item in listval {\n        switch item {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max_value {\n                    max_value = intval\n                }\n            }\n        case .failure(let err):\n            print(\"Error: \\(err)\")\n        }\n    }\n    return max_value\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "tmp698ppvkn/tmp698ppvkn.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adb82eb5c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adb82bacb6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002adb82bac988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002adb82bab7b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmp698ppvkn                        0x0000560a61e0dcba <unavailable> + 7354\n5    libc.so.6                          0x00002adb830a1460 __libc_start_main + 245\n6    tmp698ppvkn                        0x0000560a61e0d879 <unavailable> + 6265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let string):\n            if let int = Int(string) {\n                if int > max {\n                    max = int\n                }\n            }\n        case .failure(let int):\n            if int > max {\n                max = int\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > max {\n                max = intval\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > max {\n                max = intval\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let val):\n            if val > max {\n                max = val\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let num = Int(str) {\n                if num > max {\n                    max = num\n                }\n            }\n        case .failure(let num):\n            if num > max {\n                max = num\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for item in listval {\n        switch item {\n        case .success(let val):\n            if let intVal = Int(val) {\n                if intVal > max {\n                    max = intVal\n                }\n            }\n        case .failure(let err):\n            print(err)\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "tmpqfsosu_s/tmpqfsosu_s.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002b23fff7bc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002b23ffc72b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002b23ffc72988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002b23ffc717b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpqfsosu_s                        0x00005615cedd6a2a <unavailable> + 6698\n5    libc.so.6                          0x00002b2400167460 __libc_start_main + 245\n6    tmpqfsosu_s                        0x00005615cedd65e9 <unavailable> + 5609\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) { (acc, val) -> Int in\n        switch val {\n        case .success(let str):\n            return max(acc, Int(str)!)\n        case .failure(let int):\n            return max(acc, int)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "tmpqe9v4dp6/tmpqe9v4dp6.swift:9: Fatal error: Unexpectedly found nil while unwrapping an Optional value\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adfdcc54c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adfdc94b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002adfdc94b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002adfdc94b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002adfdc94abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpqe9v4dp6                        0x000055b608636e62 <unavailable> + 7778\n6    libswiftCore.so                    0x00002adfdca5a410 Sequence.reduce<A>(_:_:) + 530\n7    tmpqe9v4dp6                        0x000055b608636c77 <unavailable> + 7287\n8    tmpqe9v4dp6                        0x000055b6086368bc <unavailable> + 6332\n9    libc.so.6                          0x00002adfdce40460 __libc_start_main + 245\n10   tmpqe9v4dp6                        0x000055b6086364f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max_val = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max_val {\n                    max_val = intval\n                }\n            }\n        case .failure(let val):\n            if val > max_val {\n                max_val = val\n            }\n        }\n    }\n    return max_val\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max: Int = 0\n    for item in listval {\n        switch item {\n        case .success(let value):\n            if let intval = Int(value) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let error):\n            if error > max {\n                max = error\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for item in listval {\n        switch item {\n        case .success(let value):\n            if let intval = Int(value) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let error):\n            if error > max {\n                max = error\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max_val = 0\n    for val in listval {\n        switch val {\n        case .success(let value):\n            if let int_val = Int(value) {\n                if int_val > max_val {\n                    max_val = int_val\n                }\n            }\n        case .failure(let error):\n            print(error)\n        }\n    }\n    return max_val\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "tmpxc9mtbu5/tmpxc9mtbu5.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aec987cac80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aec984c1b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aec984c1988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aec984c07b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpxc9mtbu5                        0x000055c890934a2a <unavailable> + 6698\n5    libc.so.6                          0x00002aec989b6460 __libc_start_main + 245\n6    tmpxc9mtbu5                        0x000055c8909345e9 <unavailable> + 5609\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let val):\n            if val > max {\n                max = val\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max_val = 0\n    for val in listval {\n        switch val {\n        case .success(let val):\n            if let val = Int(val) {\n                if val > max_val {\n                    max_val = val\n                }\n            }\n        case .failure(let val):\n            if val > max_val {\n                max_val = val\n            }\n        }\n    }\n    return max_val\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > max {\n                max = intval\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for item in listval {\n        switch item {\n        case .success(let val):\n            if let intval = Int(val) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let err):\n            print(\"Error: \\(err)\")\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "tmpkpb3448d/tmpkpb3448d.swift:35: Assertion failed\nCurrent stack trace:\n0    libswiftCore.so                    0x00002aab66b6dc80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002aab66864b6c <unavailable> + 1436524\n2    libswiftCore.so                    0x00002aab66864988 <unavailable> + 1436040\n3    libswiftCore.so                    0x00002aab668637b0 _assertionFailure(_:_:file:line:flags:) + 699\n4    tmpkpb3448d                        0x000055bb83c53cba <unavailable> + 7354\n5    libc.so.6                          0x00002aab66d59460 __libc_start_main + 245\n6    tmpkpb3448d                        0x000055bb83c53879 <unavailable> + 6265\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case .success(let str):\n            if let intval = Int(str) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case .failure(let intval):\n            if intval > max {\n                max = intval\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1665510609,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    return listval.reduce(0) { (acc, val) -> Int in\n        switch val {\n        case .success(let str):\n            return max(acc, Int(str)!)\n        case .failure(let int):\n            return max(acc, int)\n        }\n    }\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "tmpqe9v4dp6/tmpqe9v4dp6.swift:9: Fatal error: Unexpectedly found nil while unwrapping an Optional value\nCurrent stack trace:\n0    libswiftCore.so                    0x00002adfdcc54c80 _swift_stdlib_reportFatalErrorInFile + 112\n1    libswiftCore.so                    0x00002adfdc94b561 <unavailable> + 1434977\n2    libswiftCore.so                    0x00002adfdc94b286 <unavailable> + 1434246\n3    libswiftCore.so                    0x00002adfdc94b13c <unavailable> + 1433916\n4    libswiftCore.so                    0x00002adfdc94abb0 _assertionFailure(_:_:file:line:flags:) + 251\n5    tmpqe9v4dp6                        0x000055b608636e62 <unavailable> + 7778\n6    libswiftCore.so                    0x00002adfdca5a410 Sequence.reduce<A>(_:_:) + 530\n7    tmpqe9v4dp6                        0x000055b608636c77 <unavailable> + 7287\n8    tmpqe9v4dp6                        0x000055b6086368bc <unavailable> + 6332\n9    libc.so.6                          0x00002adfdce40460 __libc_start_main + 245\n10   tmpqe9v4dp6                        0x000055b6086364f9 <unavailable> + 5369\n",
      "exit_code": -4,
      "status": "Exception"
    },
    {
      "program": "\nextension Int: Error {}\n        \n/// Write a function to find the maximum value in a given heterogeneous array.\nfunc max_val(listval: [Result<String, Int>]) -> Int {\n    var max = 0\n    for val in listval {\n        switch val {\n        case let .success(value):\n            if let intval = Int(value) {\n                if intval > max {\n                    max = intval\n                }\n            }\n        case let .failure(error):\n            if error > max {\n                max = error\n            }\n        }\n    }\n    return max\n}\n\n\nfunc ==(left: [(Int, Int)], right: [(Int, Int)]) -> Bool {\n    if left.count != right.count {\n        return false\n    }\n    for (l, r) in zip(left, right) {\n        if l != r {\n            return false\n        }\n    }\n    return true\n}\n            \nassert(max_val(listval: [.success(\"Python\"), .failure(3), .failure(2), .failure(4), .failure(5), .success(\"version\")]) == 5)\nassert(max_val(listval: [.success(\"Python\"), .failure(15), .failure(20), .failure(25)]) == 25)\nassert(max_val(listval: [.success(\"Python\"), .failure(30), .failure(20), .failure(40), .failure(50), .success(\"version\")]) == 50)",
      "timestamp": 1666123696,
      "stdout": "",
      "stderr": "",
      "exit_code": 0,
      "status": "OK"
    }
  ]
}